Implementation smell,Namespace,Class,File,Method,Description
Long Method,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The method has 156 lines of code.
Long Method,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,ContainsSiblings,The method has 117 lines of code.
Long Method,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,GetAutoCompleteList,The method has 110 lines of code.
Long Method,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,GenerateCompletionData,The method has 177 lines of code.
Long Method,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The method has 115 lines of code.
Long Method,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The method has 170 lines of code.
Long Method,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The method has 121 lines of code.
Long Method,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The method has 390 lines of code.
Long Method,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The method has 351 lines of code.
Long Method,Fomm,Program,C:\repos\niveuseverto_fomm\flmm\Program.cs,Main,The method has 306 lines of code.
Long Method,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The method has 108 lines of code.
Long Method,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The method has 184 lines of code.
Long Method,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The method has 131 lines of code.
Long Method,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The method has 117 lines of code.
Long Method,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The method has 130 lines of code.
Long Method,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The method has 164 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.AutoSorter,LoadOrderSorter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\AutoSorter\LoadOrderSorter.cs,GenerateReport,The method has 134 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The method has 168 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The method has 232 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The method has 151 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The method has 182 lines of code.
Long Method,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The method has 231 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Setup,The method has 133 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitFunctionCall,The method has 254 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitShowMessage,The method has 120 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleBlock,The method has 146 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleResultsBlock,The method has 128 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The method has 107 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,TokenStream,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\Tokenizer.cs,PopTokenInternal2,The method has 170 lines of code.
Long Method,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The method has 108 lines of code.
Long Method,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The method has 131 lines of code.
Long Method,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The method has 118 lines of code.
Long Method,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The method has 136 lines of code.
Long Method,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The method has 164 lines of code.
Long Method,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The method has 138 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The method has 1023 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.InstallTweaker,BsaTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\BsaTrimmer.cs,Trim,The method has 146 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The method has 126 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The method has 124 lines of code.
Long Method,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The method has 119 lines of code.
Long Method,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The method has 143 lines of code.
Long Method,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The method has 276 lines of code.
Long Method,Fomm.PackageManager,ModInstallerBase,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallerBase.cs,Run,The method has 121 lines of code.
Long Method,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The method has 108 lines of code.
Long Method,Fomm.PackageManager,fomod,C:\repos\niveuseverto_fomm\flmm\PackageManager\fomod.cs,fomod,The method has 106 lines of code.
Long Method,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The method has 218 lines of code.
Long Method,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The method has 426 lines of code.
Long Method,Fomm.PackageManager.FomodBuilder,FomodFromSourceBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFromSourceBuilder.cs,BuildFomodFromSource,The method has 104 lines of code.
Long Method,Fomm.PackageManager.FomodBuilder,FomodFromSourceBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFromSourceBuilder.cs,DoGenerateFomod,The method has 124 lines of code.
Long Method,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The method has 618 lines of code.
Long Method,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,ProcessTree,The method has 141 lines of code.
Long Method,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The method has 203 lines of code.
Long Method,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,DoGenerateFomod,The method has 148 lines of code.
Long Method,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,The method has 187 lines of code.
Long Method,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The method has 123 lines of code.
Long Method,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The method has 175 lines of code.
Long Method,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The method has 108 lines of code.
Long Method,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The method has 134 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The method has 208 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The method has 280 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The method has 177 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,SubrecordStructure,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\RecordStructure.cs,SubrecordStructure,The method has 121 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,ElementStructure,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\RecordStructure.cs,ElementStructure,The method has 114 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The method has 549 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The method has 124 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordCheckCondition,The method has 101 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,sanitizeToolStripMenuItem_Click,The method has 113 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The method has 176 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The method has 477 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The method has 217 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintCurrentBytesSign,The method has 147 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The method has 234 lines of code.
Long Method,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The method has 181 lines of code.
Long Method,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The method has 116 lines of code.
Long Method,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,Decode,The method has 107 lines of code.
Long Method,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The method has 128 lines of code.
Long Method,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The method has 245 lines of code.
Long Method,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteLocalEntryHeader,The method has 106 lines of code.
Long Method,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteCentralDirectoryHeader,The method has 110 lines of code.
Long Method,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,RunUpdates,The method has 156 lines of code.
Long Method,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,ReadEntries,The method has 142 lines of code.
Long Method,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,PutNextEntry,The method has 178 lines of code.
Long Method,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,Finish,The method has 118 lines of code.
Complex Method,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,GetFontDetails,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Controls,SplitButton,C:\repos\niveuseverto_fomm\flmm\Controls\SplitButton.cs,OnPaint,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,GetChildrenElements,Cyclomatic complexity of the method is 9
Complex Method,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,ContainsSiblings,Cyclomatic complexity of the method is 13
Complex Method,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,GenerateCompletionData,Cyclomatic complexity of the method is 24
Complex Method,Fomm.Controls,XmlEditor,C:\repos\niveuseverto_fomm\flmm\Controls\XmlEditor.cs,ValidateXml,Cyclomatic complexity of the method is 11
Complex Method,Fomm.Controls,XmlParser,C:\repos\niveuseverto_fomm\flmm\Controls\XmlParser.cs,ParseTags,Cyclomatic complexity of the method is 13
Complex Method,Fomm.Controls,ReordableItemListView,C:\repos\niveuseverto_fomm\flmm\Controls\ReorderableItemListView.cs,OnDragDrop,Cyclomatic complexity of the method is 8
Complex Method,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,Cyclomatic complexity of the method is 13
Complex Method,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,SaveGeneralSettings,Cyclomatic complexity of the method is 9
Complex Method,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,importLoadOrderToolStripMenuItem_Click,Cyclomatic complexity of the method is 12
Complex Method,Fomm.Games.Fallout3,Fallout3PluginManager,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3PluginManager.cs,GetPluginInfo,Cyclomatic complexity of the method is 11
Complex Method,Fomm.Games.Fallout3,FOMMMigrator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\FOMMMigrator.cs,DoMigration,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,LaunchSortPlugins,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,LaunchLoadOrderReport,Cyclomatic complexity of the method is 10
Complex Method,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,Cyclomatic complexity of the method is 25
Complex Method,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,ScanForReadonlyFiles,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,Cyclomatic complexity of the method is 14
Complex Method,Fomm.Games.Fallout3.Tools.AutoSorter,LoadOrderSorter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\AutoSorter\LoadOrderSorter.cs,LoadList,Cyclomatic complexity of the method is 13
Complex Method,Fomm.Games.Fallout3.Tools.AutoSorter,LoadOrderSorter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\AutoSorter\LoadOrderSorter.cs,GenerateReport,Cyclomatic complexity of the method is 30
Complex Method,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,BSAArchive,Cyclomatic complexity of the method is 9
Complex Method,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,Cyclomatic complexity of the method is 12
Complex Method,Fomm.Games.Fallout3.Tools.CriticalRecords,ConflictDetector,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\ConflictDetector.cs,DetectConflicts,Cyclomatic complexity of the method is 9
Complex Method,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordPlugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordPlugin.cs,getCriticalRecordData,Cyclomatic complexity of the method is 11
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,Cyclomatic complexity of the method is 10
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Setup,Cyclomatic complexity of the method is 20
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitExpression2,Cyclomatic complexity of the method is 14
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitFunctionCall,Cyclomatic complexity of the method is 24
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,Cyclomatic complexity of the method is 12
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,FunctionSig,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,FunctionSig,Cyclomatic complexity of the method is 10
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,TokenStream,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\Tokenizer.cs,PopTokenInternal2,Cyclomatic complexity of the method is 11
Complex Method,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,GetSteamAppId,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,LaunchFalloutNV4GB,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,Cyclomatic complexity of the method is 15
Complex Method,Fomm.Games,GameMode,C:\repos\niveuseverto_fomm\flmm\Games\GameMode.cs,getPluginDependencyStatus,Cyclomatic complexity of the method is 9
Complex Method,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,Search,Cyclomatic complexity of the method is 9
Complex Method,Fomm.InstallLogUpgraders,Upgrader0000,C:\repos\niveuseverto_fomm\flmm\InstallLogUpgraders\Upgrader0000.cs,DoUpgrade,Cyclomatic complexity of the method is 9
Complex Method,Fomm.InstallLogUpgraders,Upgrader0000,C:\repos\niveuseverto_fomm\flmm\InstallLogUpgraders\Upgrader0000.cs,UpgradeInstalledFiles,Cyclomatic complexity of the method is 9
Complex Method,Fomm.Games.Fallout3.Tools.InstallTweaker,BsaTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\BsaTrimmer.cs,Trim,Cyclomatic complexity of the method is 18
Complex Method,Fomm.PackageManager,ModInstaller,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstaller.cs,DoScript,Cyclomatic complexity of the method is 8
Complex Method,Fomm.PackageManager,ModInstallScript,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallScript.cs,TestDoOverwrite,Cyclomatic complexity of the method is 10
Complex Method,Fomm.PackageManager,ModUninstaller,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModUninstaller.cs,DoScript,Cyclomatic complexity of the method is 8
Complex Method,Fomm.PackageManager,ModUninstaller,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModUninstaller.cs,PerformBasicUninstall,Cyclomatic complexity of the method is 10
Complex Method,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,SelectForm,Cyclomatic complexity of the method is 10
Complex Method,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,lbSelect_SelectedIndexChanged,Cyclomatic complexity of the method is 11
Complex Method,Fomm.PackageManager,fomod,C:\repos\niveuseverto_fomm\flmm\PackageManager\fomod.cs,fomod,Cyclomatic complexity of the method is 17
Complex Method,Fomm.PackageManager,fomod,C:\repos\niveuseverto_fomm\flmm\PackageManager\fomod.cs,LoadInfo,Cyclomatic complexity of the method is 8
Complex Method,Fomm.PackageManager,fomod,C:\repos\niveuseverto_fomm\flmm\PackageManager\fomod.cs,SaveInfo,Cyclomatic complexity of the method is 10
Complex Method,Fomm.PackageManager,fomod,C:\repos\niveuseverto_fomm\flmm\PackageManager\fomod.cs,GetStatusString,Cyclomatic complexity of the method is 13
Complex Method,Fomm.PackageManager,fomod,C:\repos\niveuseverto_fomm\flmm\PackageManager\fomod.cs,SetMissingInfo,Cyclomatic complexity of the method is 10
Complex Method,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,bActivateGroup_Click,Cyclomatic complexity of the method is 8
Complex Method,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,bDeactivateGroup_Click,Cyclomatic complexity of the method is 8
Complex Method,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,ExportModList,Cyclomatic complexity of the method is 8
Complex Method,Fomm.PackageManager,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\PackageManager\ScriptCompiler.cs,Compile,Cyclomatic complexity of the method is 9
Complex Method,Fomm.PackageManager.FomodBuilder,FomodFromSourceBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFromSourceBuilder.cs,BuildFomodFromSource,Cyclomatic complexity of the method is 10
Complex Method,Fomm.PackageManager.FomodBuilder,FomodFromSourceBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFromSourceBuilder.cs,DoGenerateFomod,Cyclomatic complexity of the method is 20
Complex Method,Fomm.PackageManager.FomodBuilder,NewFomodBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\NewFomodBuilder.cs,DoGenerateFomod,Cyclomatic complexity of the method is 13
Complex Method,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,butOK_Click,Cyclomatic complexity of the method is 9
Complex Method,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,PerformValidation,Cyclomatic complexity of the method is 12
Complex Method,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,UpdateDownloadLocationsList,Cyclomatic complexity of the method is 13
Complex Method,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,SetReadmeDefault,Cyclomatic complexity of the method is 13
Complex Method,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,SetCopyInstructions,Cyclomatic complexity of the method is 12
Complex Method,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,ProcessTree,Cyclomatic complexity of the method is 23
Complex Method,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,DoGenerateFomod,Cyclomatic complexity of the method is 23
Complex Method,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreateMetadataFile,Cyclomatic complexity of the method is 9
Complex Method,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,Cyclomatic complexity of the method is 17
Complex Method,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,ValidateFiles,Cyclomatic complexity of the method is 17
Complex Method,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,addSourceFile,Cyclomatic complexity of the method is 10
Complex Method,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,MergeUpgrade,Cyclomatic complexity of the method is 14
Complex Method,Fomm.PackageManager.Upgrade,ModUpgrader,C:\repos\niveuseverto_fomm\flmm\PackageManager\Upgrade\ModUpgrader.cs,ReconcileDifferences,Cyclomatic complexity of the method is 10
Complex Method,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,Fade,Cyclomatic complexity of the method is 10
Complex Method,Fomm.PackageManager.XmlConfiguredInstall,XmlConfiguredScript,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\XmlConfiguredScript.cs,InstallFiles,Cyclomatic complexity of the method is 13
Complex Method,Fomm.PackageManager.XmlConfiguredInstall,XmlConfiguredScript,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\XmlConfiguredScript.cs,InstallPluginFile,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,Cyclomatic complexity of the method is 14
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,CheckBox_CheckedChanged,Cyclomatic complexity of the method is 11
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,SubrecordStructure,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\RecordStructure.cs,SubrecordStructure,Cyclomatic complexity of the method is 15
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,ElementStructure,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\RecordStructure.cs,ElementStructure,Cyclomatic complexity of the method is 9
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,RecordStructure,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\RecordStructure.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,RecordStructure,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\RecordStructure.cs,RecordStructure,Cyclomatic complexity of the method is 9
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordStructureToRecord,Cyclomatic complexity of the method is 10
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,listView1_ItemActivate,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,sanitizeToolStripMenuItem_Click,Cyclomatic complexity of the method is 16
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,cleanRecurse2,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,cleanEspToolStripMenuItem_Click,Cyclomatic complexity of the method is 13
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,compileAllToolStripMenuItem_Click,Cyclomatic complexity of the method is 9
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,Cyclomatic complexity of the method is 13
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,FindMasters,Cyclomatic complexity of the method is 12
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,FormIDScan,Cyclomatic complexity of the method is 9
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,addMasterToolStripMenuItem_Click,Cyclomatic complexity of the method is 8
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,KeyInterpreter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PreProcessWmChar,Cyclomatic complexity of the method is 11
Complex Method,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,StringKeyInterpreter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PreProcessWmChar,Cyclomatic complexity of the method is 8
Complex Method,Fomm.SharpZipLib.Checksums,Adler32,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Checksums\Adler32.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,Fomm.SharpZipLib.Core,FileSystemScanner,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Core\FileSystemScanner.cs,ScanDir,Cyclomatic complexity of the method is 11
Complex Method,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,Cyclomatic complexity of the method is 13
Complex Method,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateFast,Cyclomatic complexity of the method is 10
Complex Method,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,Cyclomatic complexity of the method is 12
Complex Method,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,Cyclomatic complexity of the method is 9
Complex Method,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,Cyclomatic complexity of the method is 10
Complex Method,Fomm.SharpZipLib.Zip,WindowsNameTransform,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\WindowsNameTransform.cs,MakeValidName,Cyclomatic complexity of the method is 9
Complex Method,Fomm.SharpZipLib.Zip,ZipEntry,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,Cyclomatic complexity of the method is 12
Complex Method,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteLocalEntryHeader,Cyclomatic complexity of the method is 13
Complex Method,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteCentralDirectoryHeader,Cyclomatic complexity of the method is 16
Complex Method,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,RunUpdates,Cyclomatic complexity of the method is 15
Complex Method,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,ReadEntries,Cyclomatic complexity of the method is 13
Complex Method,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,PutNextEntry,Cyclomatic complexity of the method is 20
Complex Method,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,CloseEntry,Cyclomatic complexity of the method is 12
Complex Method,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,Finish,Cyclomatic complexity of the method is 17
Long Parameter List,Fomm.Controls,AutoCompleteListEventArgs,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,AutoCompleteListEventArgs,The method has 5 parameters. Parameters: p_lstAutoCompleteList' p_strElementPath' p_strSiblings' p_actType' p_strLastWord
Long Parameter List,Fomm,NativeMethods,C:\repos\niveuseverto_fomm\flmm\Imports.cs,Compile,The method has 5 parameters. Parameters: data' len' EntryPoint' Profile' Debug
Long Parameter List,Fomm,NativeMethods,C:\repos\niveuseverto_fomm\flmm\Imports.cs,ddsBlt,The method has 10 parameters. Parameters: source' sL' sT' sW' sH' dest' dL' dT' dW' dH
Long Parameter List,Fomm,NativeMethods,C:\repos\niveuseverto_fomm\flmm\Imports.cs,GetPrivateProfileStringA,The method has 6 parameters. Parameters: section' value' def' buf' buflen' path
Long Parameter List,Fomm,PluginFormat,C:\repos\niveuseverto_fomm\flmm\PluginFormat.cs,PluginFormat,The method has 7 parameters. Parameters: p_intIndex' p_ffmFontFamily' p_fltFontSizeEM' p_fstFontStyle' p_clrColour' p_clrHighlight' p_strMessage
Long Parameter List,Fomm,PluginFormatterManager,C:\repos\niveuseverto_fomm\flmm\PluginFormatterManager.cs,CreateFormat,The method has 6 parameters. Parameters: p_ffmFontFamily' p_fltFontSizeEM' p_fstFontStyle' p_clrColour' p_clrHighlight' p_strMessage
Long Parameter List,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Show,The method has 6 parameters. Parameters: p_ctlParent' p_strMessage' p_strCaption' p_mbbButtons' p_mbiIcon' p_booRemember
Long Parameter List,Fomm.Games.Fallout3.Tools.BSA,SDPArchives,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,ReplaceShader,The method has 5 parameters. Parameters: file' shader' newdata' OldData' crc
Long Parameter List,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,The method has 6 parameters. Parameters: r' mask' id' records' quests' refs
Long Parameter List,Fomm.Games.Fallout3.Tools.InstallTweaker,BsaTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\BsaTrimmer.cs,Commit,The method has 6 parameters. Parameters: bw' offset' data' offset2' add' parse
Long Parameter List,Fomm.Games.Fallout3.Tools.InstallTweaker,EsmTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\EsmTrimmer.cs,Trim,The method has 5 parameters. Parameters: stripEdids' stripRefs' In' Out' del
Long Parameter List,Fomm.PackageManager,ModInstallScript,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallScript.cs,Select,The method has 5 parameters. Parameters: p_strItems' p_strPreviews' p_strDescriptions' p_strTitle' p_booSelectMany
Long Parameter List,Fomm.PackageManager,SourceFile,C:\repos\niveuseverto_fomm\flmm\PackageManager\SourceDownloadLocation.cs,SourceFile,The method has 5 parameters. Parameters: p_strSource' p_strUrl' p_booIncluded' p_booHidden' p_booGenerated
Long Parameter List,Fomm.PackageManager.FomodBuilder,BuildFomodArgs,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFromSourceBuilder.cs,BuildFomodArgs,The method has 8 parameters. Parameters: p_strFomodName' p_lstCopyPaths' p_rmeReadme' p_xmlInfo' p_booSetScreenshot' p_shtScreenshot' p_fscScript' p_strPackedPath
Long Parameter List,Fomm.PackageManager.FomodBuilder,NewFomodBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\NewFomodBuilder.cs,BuildFomod,The method has 7 parameters. Parameters: p_strFileName' p_lstCopyInstructions' p_rmeReadme' p_xmlInfo' p_booSetScreenshot' p_shtScreenshot' p_fscScript
Long Parameter List,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,BuildPFP,The method has 12 parameters. Parameters: p_strFileName' p_strVersion' p_strMachineVersion' p_lstCopyInstructions' p_lstSourceFiles' p_strCustomHowToSteps' p_rmeReadme' p_xmlInfo' p_booSetScreenshot' p_shtScreenshot' p_fscScript' p_strPFPPath
Long Parameter List,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,The method has 6 parameters. Parameters: p_strPFPFolder' p_strModBaseName' p_lstSourceFiles' p_lstCopyInstructions' p_strCustomHowToSteps' p_fscScript
Long Parameter List,Fomm.PackageManager.FomodBuilder,BuildPFPArgs,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,BuildPFPArgs,The method has 10 parameters. Parameters: p_strFomodName' p_lstCopyInstructions' p_lstSourceFiles' p_strCustomHowToSteps' p_rmeReadme' p_xmlInfo' p_booSetScreenshot' p_shtScreenshot' p_fscScript' p_strPackedPath
Long Parameter List,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,CreateIniEditNode,The method has 6 parameters. Parameters: p_strModKey' p_strFile' p_strSection' p_strKey' p_strValue' p_xndModList
Long Parameter List,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,AddIniEdit,The method has 5 parameters. Parameters: p_strFile' p_strSection' p_strKey' p_strModName' p_strValue
Long Parameter List,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,ReplaceIniEdit,The method has 5 parameters. Parameters: p_strFile' p_strSection' p_strKey' p_strModName' p_strValue
Long Parameter List,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,PrependAfterOriginalIniEdit,The method has 5 parameters. Parameters: p_strFile' p_strSection' p_strKey' p_strModName' p_strValue
Long Parameter List,Fomm.PackageManager.XmlConfiguredInstall,PluginFile,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\PluginFile.cs,PluginFile,The method has 6 parameters. Parameters: p_strSource' p_strDest' p_booIsFolder' p_intPriority' p_booAlwaysInstall' p_booInstallIfUsable
Long Parameter List,Fomm.PackageManager.XmlConfiguredInstall,HeaderInfo,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderInfo.cs,HeaderInfo,The method has 7 parameters. Parameters: p_strTitle' p_clrColour' p_tpsTitlePosition' p_imgImage' p_booShowImage' p_booShowFade' p_intHeight
Long Parameter List,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The method has 5 parameters. Parameters: es' offset' data' groupOffset' CurrentGroup
Long Parameter List,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,FormIDScanRecurse,The method has 5 parameters. Parameters: r' match' mask' table' type
Long Parameter List,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintHexStringSelected,The method has 5 parameters. Parameters: g' b' brush' brushBack' gridPoint
Long Parameter List,Fomm.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\DeflaterOutputStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Fomm.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\DeflaterOutputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Fomm.SharpZipLib.Zip.Compression.Streams,InflaterInputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\InflaterInputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Fomm.SharpZipLib.Zip,FastZip,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\FastZip.cs,CreateZip,The method has 5 parameters. Parameters: outputStream' sourceDirectory' recurse' fileFilter' directoryFilter
Long Parameter List,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,CopyBytes,The method has 5 parameters. Parameters: update' destination' source' bytesToCopy' updateCrc
Long Parameter List,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,CopyEntryDataDirect,The method has 5 parameters. Parameters: update' stream' updateCrc' destinationPosition' sourcePosition
Long Parameter List,Fomm.Util,UacUtil,C:\repos\niveuseverto_fomm\flmm\Util\UacUtil.cs,GetTokenInformation,The method has 5 parameters. Parameters: TokenHandle' TokenInformationClass' TokenInformation' TokenInformationLength' ReturnLength
Long Identifier,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,,The length of the parameter m_dicExtraCompletionCharacters is 30.
Long Identifier,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,,The length of the parameter copyToClipboardToolStripMenuItem is 32.
Long Identifier,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,,The length of the parameter openNewPluginToolStripMenuItem is 30.
Long Identifier,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,,The length of the parameter createFromFolderToolStripMenuItem is 33.
Long Identifier,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,,The length of the parameter exportModListToolStripMenuItem is 30.
Long Identifier,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,,The length of the parameter exportActiveModListToolStripMenuItem is 36.
Long Identifier,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,,The length of the parameter nodeNewFolderToolStripMenuItem is 30.
Long Identifier,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,,The length of the parameter openNewPluginToolStripMenuItem is 30.
Long Identifier,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,,The length of the parameter insertSubrecordToolStripMenuItem is 32.
Long Identifier,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,,The length of the parameter findDuplicatedFormIDToolStripMenuItem is 37.
Long Identifier,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,,The length of the parameter useNewSubrecordEditorToolStripMenuItem is 38.
Long Identifier,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,,The length of the parameter lookupFormidsToolStripMenuItem is 30.
Long Identifier,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,,The length of the parameter findNonconformingRecordToolStripMenuItem is 40.
Long Identifier,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,,The length of the parameter compileScriptToolStripMenuItem is 30.
Long Identifier,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,,The length of the parameter generateLLXmlToolStripMenuItem is 30.
Long Identifier,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,,The length of the parameter exportBinaryAllToolStripMenuItem is 32.
Long Identifier,Fomm.SharpZipLib.Zip,ZipConstants,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipConstants.cs,,The length of the parameter Zip64CentralFileHeaderSignature is 31.
Long Identifier,Fomm.SharpZipLib.Zip,ZipConstants,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipConstants.cs,,The length of the parameter Zip64CentralDirLocatorSignature is 31.
Long Identifier,Fomm.SharpZipLib.Zip,ZipConstants,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipConstants.cs,,The length of the parameter EndOfCentralDirectorySignature is 30.
Long Statement,Fomm.Controls,ScriptEditor,C:\repos\niveuseverto_fomm\flmm\Controls\ScriptEditor.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ScriptEditor)); " is 132.
Long Statement,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The length of the statement  "      this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The length of the statement  "      this.butOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The length of the statement  "      this.pbrItemProgress.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 148.
Long Statement,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The length of the statement  "      this.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The length of the statement  "      this.pbrTotalProgress.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 149.
Long Statement,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The length of the statement  "      this.cbxRemember.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The length of the statement  "      this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The length of the statement  "      this.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The length of the statement  "      this.butOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The length of the statement  "      this.pictureBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The length of the statement  "      this.bLaunch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 143.
Long Statement,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The length of the statement  "      this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 151.
Long Statement,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The length of the statement  "      this.bPackageManager.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The length of the statement  "      this.bHelp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 141.
Long Statement,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The length of the statement  "      this.bSettings.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The length of the statement  "      this.copyToClipboardToolStripMenuItem.Click += new System.EventHandler(this.copyLoadOrderToClipboardToolStripMenuItem_Click); " is 125.
Long Statement,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The length of the statement  "      this.butFileManager.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,Fomm,Program,C:\repos\niveuseverto_fomm\flmm\Program.cs,Main,The length of the statement  "                  "FOMM needs to upgrade its files before it can run. Please allow the upgrade to complete' or install an older version of FOMM."' " is 128.
Long Statement,Fomm.Games.Fallout3,Fallout3PluginManager,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3PluginManager.cs,GetPluginInfo,The length of the statement  "            ? @"\cf1 \b WARNING: This plugin has the file extension .esm' but its file header marks it as an esp! \b0 \cf0 \line \line " " is 124.
Long Statement,Fomm.Games.Fallout3,Fallout3PluginManager,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3PluginManager.cs,GetPluginInfo,The length of the statement  "            : @"\cf1 \b WARNING: This plugin has the file extension .esp' but its file header marks it as an esm! \b0 \cf0 \line \line "); " is 126.
Long Statement,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The length of the statement  "      this.label1.Font = new System.Drawing.Font("Verdana"' 10F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 138.
Long Statement,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The length of the statement  "      this.wizSetup.SelectedTabPageChanged += new System.EventHandler<Fomm.Controls.VerticalTabControl.TabPageEventArgs>(this.wizSetup_SelectedTabPageChanged); " is 153.
Long Statement,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,Init,The length of the statement  "          "You have no Fallout INI file. Please run Fallout 3 to initialize the file before installing any mods or turning on Archive Invalidation."' " is 139.
Long Statement,Fomm.Games.Fallout3.Script,Fallout3ModInstallScript,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Script\Fallout3ModInstallScript.cs,UneditShader,The length of the statement  "         *        InstallLog.UndoShaderEdit(int.Parse(node.Attributes.GetNamedItem("package").Value)' node.Attributes.GetNamedItem("shader").Value' 0); " is 142.
Long Statement,Fomm.Games.Fallout3.Script,Fallout3ModInstallScript,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Script\Fallout3ModInstallScript.cs,UneditShader,The length of the statement  "         *        InstallLog.UndoShaderEdit(int.Parse(node.Attributes.GetNamedItem("package").Value)' node.Attributes.GetNamedItem("shader").Value' " is 138.
Long Statement,Fomm.Games.Fallout3.Script,Fallout3ModInstallScript,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Script\Fallout3ModInstallScript.cs,UneditShader,The length of the statement  "         *      b[i] = byte.Parse("" + node.InnerText[i * 2] + node.InnerText[i * 2 + 1]' System.Globalization.NumberStyles.AllowHexSpecifier); " is 134.
Long Statement,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The length of the statement  "      this.butSelectInfoDirectory.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 158.
Long Statement,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The length of the statement  "      this.tbxInstallInfo.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 147.
Long Statement,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The length of the statement  "      this.butSelectModDirectory.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 157.
Long Statement,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The length of the statement  "      this.tbxModDirectory.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 148.
Long Statement,Fomm.Games.Fallout3.Tools,PluginConflictDetector,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\PluginConflictDetector.cs,cdrDetector_ConflictDetected,The length of the statement  "          "Form Id \\b {0:x8}\\b0  is overridden by \\b {1}\\b0 .\\par \\pard\\li720\\sl240\\slmult1 {2}\\par \\pard\\sl240\\slmult1 "' " is 125.
Long Statement,Fomm.Games.Fallout3.Tools,PluginConflictDetector,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\PluginConflictDetector.cs,cdrDetector_ConflictDetected,The length of the statement  "          "Form Id \\b {0:x8}\\b0  is overridden by \\b {1}\\b0  in \\b {2}\\b0 .\\par \\pard\\li720\\sl240\\slmult1 {3}\\par \\pard\\sl240\\slmult1 "' " is 141.
Long Statement,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The length of the statement  "      this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 151.
Long Statement,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The length of the statement  "      this.cmbSort.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The length of the statement  "      this.bExport.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.AutoSorter,LoadOrderSorter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\AutoSorter\LoadOrderSorter.cs,GenerateReport,The length of the statement  "            "* The auto-sorter doesn't recognize this mod. It is probably safe to put it anywhere' depending on how you want the various plugins to override one another."); " is 160.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The length of the statement  "      this.bOpen.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 143.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The length of the statement  "      this.bExtractAll.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 149.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The length of the statement  "      this.bExtract.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The length of the statement  "      this.cmbSortOrder.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The length of the statement  "      this.bSort.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The length of the statement  "      this.bPreview.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The length of the statement  "      this.tbSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The length of the statement  "      this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The length of the statement  "      this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 151.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The length of the statement  "      this.cbRegex.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,bAddFolder_Click,The length of the statement  "                Settings.BSACreatorFolderBrowserDir=Settings.BSACreatorFolderBrowserDir.Substring(0' Settings.BSACreatorFolderBrowserDir.LastIndexOf('\\')); " is 140.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The length of the statement  "            this.lvFiles.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 143.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The length of the statement  "            this.cmbCompression.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 152.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The length of the statement  "            this.bCreate.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The length of the statement  "            this.bAddFile.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The length of the statement  "            this.bAddFolder.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 148.
Long Statement,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The length of the statement  "            this.cmbCompLevel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 150.
Long Statement,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The length of the statement  "      this.tbxReason.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The length of the statement  "      this.openNewPluginToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O))); " is 148.
Long Statement,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The length of the statement  "      this.saveToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S))); " is 139.
Long Statement,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FileManager)); " is 131.
Long Statement,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The length of the statement  "      this.imlFolders.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imlFolders.ImageStream"))); " is 120.
Long Statement,Fomm.FileManager,ModInstallReorderer,C:\repos\niveuseverto_fomm\flmm\FileManager\ModInstallReorderer.cs,DoScript,The length of the statement  "          "The File and OrderedMods properties must be set before calling Run(); or Run(string' IList<string>) can be used instead."); " is 124.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitExpressionValue,The length of the statement  "          //if(fs.requiredArgs!=fs.args.Length) throw new ExpressionParseException("functions with variable argument count cannot be used in expressions"); " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitExpressionValue,The length of the statement  "          //if(fs.ret==VarType.None) throw new ExpressionParseException("Functions with no return type cannot be used in expressions"); " is 125.
Long Statement,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,Init,The length of the statement  "          "You have no Fallout INI file. Please run Fallout: New Vegas to initialize the file before installing any mods or turning on Archive Invalidation."' " is 148.
Long Statement,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,SetupLaunchCommands,The length of the statement  "        GameLaunchCommands.Add(new Command<MainForm>("Launch 4GB Fallout: New Vegas"' "Launches Fallout: New Vegas with 4GB Patch."' " is 124.
Long Statement,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,SetupLaunchCommands,The length of the statement  "        GameLaunchCommands.Add(new Command<MainForm>("Launch NVSE Fallout: New Vegas"' "Launches Fallout: New Vegas with NVSE."' " is 120.
Long Statement,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The length of the statement  "      this.label1.Font = new System.Drawing.Font("Verdana"' 10F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 138.
Long Statement,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The length of the statement  "      this.wizSetup.SelectedTabPageChanged += new System.EventHandler<Fomm.Controls.VerticalTabControl.TabPageEventArgs>(this.wizSetup_SelectedTabPageChanged); " is 153.
Long Statement,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The length of the statement  "      this.butSelectInfoDirectory.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 158.
Long Statement,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The length of the statement  "      this.tbxInstallInfo.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 147.
Long Statement,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The length of the statement  "      this.butSelectModDirectory.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 157.
Long Statement,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The length of the statement  "      this.tbxModDirectory.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 148.
Long Statement,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The length of the statement  "      this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 151.
Long Statement,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The length of the statement  "      this.cmbSort.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The length of the statement  "      this.bExport.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The length of the statement  "      this.tbxWorkingDirectory.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 152.
Long Statement,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The length of the statement  "      this.butSelect.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The length of the statement  "      this.butOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The length of the statement  "      this.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The length of the statement  "      this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The length of the statement  "      this.butOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The length of the statement  "      this.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The length of the statement  "      this.nudValue.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The length of the statement  "      this.ckbOverride.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 149.
Long Statement,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The length of the statement  "      this.tkbSlider.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,cbDisableLive_MouseEnter,The length of the statement  "                           "Prevents fallout from loading the real xlive.dll at all' and enables some extra code patching options that require disabling g4wl's hash checking" + " is 149.
Long Statement,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,cbShrinkTextures_MouseEnter,The length of the statement  "                           "After checking this' change textures to medium if you normally use small or large if you normally use medium to keep the same visual quality."; " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The length of the statement  "            this.bApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The length of the statement  "            this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The length of the statement  "            this.tbDescription.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 149.
Long Statement,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The length of the statement  "            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 139.
Long Statement,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The length of the statement  "            this.bReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The length of the statement  "            this.backgroundWorker1.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler(this.backgroundWorker1_ProgressChanged); " is 136.
Long Statement,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,bSseHelp_Click,The length of the statement  "        "If set to something other than 'off'' the fake xlive dll will patch several pieces of fallouts code with faster versions\n" + " is 126.
Long Statement,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,bSseHelp_Click,The length of the statement  "        "This doesn't make any permenent changes; the improved functions will only be in effect while the fake xlive dll is in place\n" + " is 129.
Long Statement,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The length of the statement  "      this.xedScript.GotAutoCompleteList += new System.EventHandler<Fomm.Controls.RegeneratableAutoCompleteListEventArgs>(xedScript_GotAutoCompleteList); " is 147.
Long Statement,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ReadmeEditor)); " is 132.
Long Statement,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The length of the statement  "      this.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The length of the statement  "      this.butOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The length of the statement  "      this.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The length of the statement  "      this.butOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The length of the statement  "      this.clbGroups.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The length of the statement  "      this.tbEmail.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 140.
Long Statement,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The length of the statement  "      this.tbWebsite.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The length of the statement  "      this.tbMinFommVersion.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 149.
Long Statement,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The length of the statement  "      this.tbMVersion.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 143.
Long Statement,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The length of the statement  "      this.tbVersion.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The length of the statement  "      this.tbDescription.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The length of the statement  "      this.tbAuthor.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 141.
Long Statement,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The length of the statement  "      this.tbName.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 139.
Long Statement,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The length of the statement  "      this.pbxScreenshot.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(InfoEditor)); " is 130.
Long Statement,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The length of the statement  "      this.butSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The length of the statement  "      this.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Fomm.PackageManager,ModInstallScript,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallScript.cs,Select,The length of the statement  "          m_strLastError = "There were " + intMissingImages + " filenames specified for preview images which could not be loaded"; " is 120.
Long Statement,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SelectForm)); " is 130.
Long Statement,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The length of the statement  "            this.lbSelect.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 144.
Long Statement,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The length of the statement  "            this.bOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 142.
Long Statement,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The length of the statement  "            this.bPreview.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The length of the statement  "            this.bDescription.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 150.
Long Statement,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The length of the statement  "            this.tbDesc.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 142.
Long Statement,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TextEditor)); " is 130.
Long Statement,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The length of the statement  "      this.bNo.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 139.
Long Statement,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The length of the statement  "      this.bYes.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 140.
Long Statement,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The length of the statement  "      this.bNoToMod.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The length of the statement  "      this.bYesToMod.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 145.
Long Statement,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The length of the statement  "      this.bNoToFolder.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 147.
Long Statement,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The length of the statement  "      this.bYesToFolder.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The length of the statement  "      this.bYesToAll.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 145.
Long Statement,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The length of the statement  "      this.bNoToAll.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,ActivateFomod,The length of the statement  "            "A different version of {0} has been detected. The installed version is {1}' the new version is {2}. Would you like to upgrade?" + " is 130.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 151.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.pictureBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.bEditScript.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.butViewReadme.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.bEditInfo.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.bActivate.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.cbGroups.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.bEditGroups.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.bActivateGroup.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.bDeactivateGroup.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.bDeactivateAll.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.cmbSortOrder.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.butDeactivate.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.butExtractFomod.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.sbtAddFomod.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The length of the statement  "      this.exportActiveModListToolStripMenuItem.Click += new System.EventHandler(this.exportActiveModListToolStripMenuItem_Click); " is 124.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FomodBuilderForm)); " is 136.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The length of the statement  "      this.label1.Font = new System.Drawing.Font("Arial"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 136.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The length of the statement  "      this.butOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The length of the statement  "      this.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The length of the statement  "      this.vtcFomodData.SelectedTabPageChanged += new System.EventHandler<Fomm.Controls.VerticalTabControl.TabPageEventArgs>(this.vtcFomodData_SelectedTabPageChanged); " is 161.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The length of the statement  "      this.tbxFomodFileName.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 149.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The length of the statement  "      this.butGenerateReadme.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 156.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The length of the statement  "      this.butSelectPFPFolder.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 154.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The length of the statement  "      this.tbxPFPPath.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 143.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The length of the statement  "      this.fseScriptEditor.GotXMLAutoCompleteList += new System.EventHandler<Fomm.Controls.RegeneratableAutoCompleteListEventArgs>(this.fseScriptEditor_GotXMLAutoCompleteList); " is 170.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FomodFileSelector)); " is 137.
Long Statement,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The length of the statement  "      this.lblFomodFiles.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 160.
Long Statement,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,The length of the statement  "            "{{0}}) Put all the files you downloaded in Step {{1}}' as well as any files or folders you created in Steps {0}-{1}' into the same folder."' " is 141.
Long Statement,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,The length of the statement  "                          "{0}) Enter the path to the Premade FOMod Pack (PFP) in the 'Premade FOMod Pack' textbox. You can click the '...' button next to the textbox to select the file' if desired. The PFP file is the archive containing this HowTo file."' " is 230.
Long Statement,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,The length of the statement  "                          "{0}) Enter the path you put all of the downloaded files into in Step {1} into the 'Source Files Folder' textbox. You can click the '...' button next to the textbox to select the folder' if desired."' " is 200.
Long Statement,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,The length of the statement  "                            "{0}) In the file you downloaded in Step {1} is a 'fomod' folder. Copy the contents of that folder into the '{2}/fomod' folder you created in Step {3}."' " is 153.
Long Statement,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The length of the statement  "      this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The length of the statement  "      this.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The length of the statement  "      this.butOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.PackageManager.FomodBuilder,SourceDownloadSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceDownloadSelector.cs,InitializeComponent,The length of the statement  "      this.dgvSourceList.CellValueChanged += new System.Windows.Forms.DataGridViewCellEventHandler(this.dgvSourceList_CellValueChanged); " is 130.
Long Statement,Fomm.PackageManager.FomodBuilder,SourceDownloadSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceDownloadSelector.cs,InitializeComponent,The length of the statement  "      this.dgvSourceList.RowsAdded += new System.Windows.Forms.DataGridViewRowsAddedEventHandler(this.dgvSourceList_RowsAdded); " is 121.
Long Statement,Fomm.PackageManager.FomodBuilder,SourceDownloadSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceDownloadSelector.cs,InitializeComponent,The length of the statement  "      this.dgvSourceList.CurrentCellDirtyStateChanged += new System.EventHandler(this.dgvSourceList_CurrentCellDirtyStateChanged); " is 124.
Long Statement,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FomodFileSelector)); " is 137.
Long Statement,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The length of the statement  "      this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The length of the statement  "      this.tvwSource.QueryContinueDrag += new System.Windows.Forms.QueryContinueDragEventHandler(this.tvwSource_QueryContinueDrag); " is 125.
Long Statement,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The length of the statement  "      this.butBack.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The length of the statement  "      this.butNext.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The length of the statement  "      this.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The length of the statement  "      this.hplTitle.Font = new System.Drawing.Font("Arial"' 14F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 138.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.bSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.tbFloat.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.tbInt.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 143.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.tbWord.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.bCFloat.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.bCInt.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 143.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.bCWord.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.label3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.label4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.tbFormID.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.bLookup.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.bCFormID.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.tbEDID.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.label5.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.hexBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 143.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.hexBox1.Font = new System.Drawing.Font("Courier New"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255))))); " is 161.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.bFromFile.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 147.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The length of the statement  "            this.bSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The length of the statement  "            this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The length of the statement  "            this.fpanel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 143.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The length of the statement  "            this.tbEdit.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 142.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The length of the statement  "            this.bSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The length of the statement  "            this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,sanitizeToolStripMenuItem_Click,The length of the statement  "          "The subgroup structure of this plugins cell' world or dial records appears to be incorrect' and cannot be fixed automatically"' " is 128.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The length of the statement  "      this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.I))); " is 138.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The length of the statement  "      this.openNewPluginToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O))); " is 148.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The length of the statement  "      this.saveToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S))); " is 139.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The length of the statement  "      this.cutToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.X))); " is 138.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The length of the statement  "      this.copyToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.C))); " is 139.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The length of the statement  "      this.pasteToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.V))); " is 140.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The length of the statement  "      this.addMasterToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.M))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The length of the statement  "      this.findToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F))); " is 139.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The length of the statement  "      this.findDuplicatedFormIDToolStripMenuItem.Click += new System.EventHandler(this.findDuplicatedFormIDToolStripMenuItem_Click); " is 126.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The length of the statement  "      this.findNonconformingRecordToolStripMenuItem.Click += new System.EventHandler(this.findNonconformingRecordToolStripMenuItem_Click); " is 132.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,Plugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,LoadPlugin,The length of the statement  "        throw new Exception(String.Format("File is not a valid TES4 plugin (Missing TES4 record)\nFile: {0}"' ((System.IO.FileStream)br.BaseStream).Name)); " is 147.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,Plugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,LoadPlugin,The length of the statement  "          throw new Exception(String.Format("File is not a valid TES4 plugin (Missing HEDR subrecord in the TES4 record)\nFile: {0}"' ((System.IO.FileStream)br.BaseStream).Name)); " is 169.
Long Statement,Fomm.Games.Fallout3.Tools.TESsnip,Record,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetDesc,The length of the statement  "          "Warning: An error occured while processing the record. It may not conform to the strucure defined in RecordStructure.xml"; " is 123.
Long Statement,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The length of the statement  "            this.tbEdit.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 142.
Long Statement,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The length of the statement  "            this.tbEdit.Font = new System.Drawing.Font("Courier New"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 147.
Long Statement,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The length of the statement  "            this.bSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The length of the statement  "            this.bOpen.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The length of the statement  "            this.cmbShaderSelect.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 153.
Long Statement,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The length of the statement  "            this.bCompile.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The length of the statement  "            this.bClose.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The length of the statement  "            this.bImport.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Complex Conditional,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,ProcessKey,The conditional expression  "lstExtraChars.Contains(p_chrKey) || p_chrKey.Equals('=') || p_chrKey.Equals('\n') || p_chrKey.Equals('\t')"  is complex.
Complex Conditional,Fomm.Controls,XmlEditor,C:\repos\niveuseverto_fomm\flmm\Controls\XmlEditor.cs,OnTextChanged,The conditional expression  "!m_booFormatOnce &&            (intCaretOffset > 0) &&            (intCaretOffset < Document.TextLength) &&            (Document.GetCharAt(intCaretOffset) == '>') &&            (Document.TextContent.LastIndexOf("</"' intCaretOffset) >             Document.TextContent.LastIndexOf(">"' intCaretOffset - 1))"  is complex.
Complex Conditional,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,importLoadOrderToolStripMenuItem_Click,The conditional expression  "lines[i].Length < 5 || lines[i][0] != '[' || lines[i][2] != ']' || lines[i][3] != ' '"  is complex.
Complex Conditional,Fomm,Program,C:\repos\niveuseverto_fomm\flmm\Program.cs,Main,The conditional expression  "args.Length > 0 && (args[0] == "-?" || args[0] == "/?" || args[0] == "-help")"  is complex.
Complex Conditional,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The conditional expression  "(i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0])))))"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The conditional expression  "cmbCompression.SelectedIndex != 0 && (cmbCompression.SelectedIndex != 6 || fr2.DoCompress) &&                ((comp = CompressRecord(fr2.filepath)) != null)"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,FunctionSig,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,FunctionSig,The conditional expression  "block && (args[i] != VarType.Ref && args[i] != VarType.Short && args[i] != VarType.Int)"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,TokenStream,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\Tokenizer.cs,FromWord,The conditional expression  "char.IsDigit(token[0]) || (token.Length > 1 && (token[0] == '.' || token[0] == '-') && char.IsDigit(token[1]))"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,TokenStream,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\Tokenizer.cs,PopTokenInternal2,The conditional expression  "char.IsLetterOrDigit(c) || c == '_' || ((c == '.' || c == '~') && char.IsDigit(SafePeek()))"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,TokenStream,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\Tokenizer.cs,PopTokenInternal2,The conditional expression  "char.IsLetterOrDigit(c) || c == '_' || (numeric && c == '.')"  is complex.
Complex Conditional,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,ValidateWebsite,The conditional expression  "!Uri.TryCreate(tbWebsite.Text' UriKind.Absolute' out uri) || uri.IsFile ||              (uri.Scheme != "http" && uri.Scheme != "https")"  is complex.
Complex Conditional,Fomm.PackageManager,ModInstallScript,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallScript.cs,MeetsMinimumScriptExtenderVersion,The conditional expression  "(currVer.FileMajorPart >= maj) &&              (currVer.FileMinorPart >= minor) &&              (currVer.FileBuildPart >= build) &&              (currVer.FilePrivatePart >= priv)"  is complex.
Complex Conditional,Fomm.PackageManager,PremadeFomodPack,C:\repos\niveuseverto_fomm\flmm\PackageManager\PremadeFomodPack.cs,ValidatePFP,The conditional expression  "(xndSource.Attributes["name"] == null) || String.IsNullOrEmpty(xndSource.Attributes["name"].Value) ||              (xndSource.Attributes["url"] == null) || String.IsNullOrEmpty(xndSource.Attributes["url"].Value)"  is complex.
Complex Conditional,Fomm.PackageManager,fomod,C:\repos\niveuseverto_fomm\flmm\PackageManager\fomod.cs,fomod,The conditional expression  "p_booUseCache && !File.Exists(CachePath) && (FomodFile.IsSolid || FomodFile.ReadOnly)"  is complex.
Complex Conditional,Fomm.PackageManager,fomod,C:\repos\niveuseverto_fomm\flmm\PackageManager\fomod.cs,FindPathPrefix,The conditional expression  "directories.Length == 1 &&               ((FomodFile.GetFiles(strSourcePath' "*.esp").Length == 0 &&                 FomodFile.GetFiles(strSourcePath' "*.esm").Length == 0 &&                 FomodFile.GetFiles(strSourcePath' "*.bsa").Length == 0) ||                Path.GetFileName(directories[0]).Equals("data"' StringComparison.InvariantCultureIgnoreCase))"  is complex.
Complex Conditional,Fomm.PackageManager.FomodBuilder,FomodFromSourceBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFromSourceBuilder.cs,DescendToFomodFolder,The conditional expression  "directories.Length == 1 &&               ((Program.GetFiles(strSourcePath' "*.esp").Length == 0 &&                 Program.GetFiles(strSourcePath' "*.esm").Length == 0 &&                 Program.GetFiles(strSourcePath' "*.bsa").Length == 0) ||                Path.GetFileName(directories[0]).Equals("data"' StringComparison.InvariantCultureIgnoreCase))"  is complex.
Complex Conditional,Fomm.PackageManager.FomodBuilder,FomodFromSourceBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFromSourceBuilder.cs,DescendToFomodFolder,The conditional expression  "(name != "fomod") && (name != "textures") && (name != "meshes") && (name != "music") &&              (name != "shaders") && (name != "video") && (name != "facegen") && (name != "menus") &&              (name != "lodsettings") && (name != "lsdata") && (name != "sound")"  is complex.
Complex Conditional,Fomm.PackageManager.FomodBuilder,FileSystemTreeNode,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FileSystemTreeNode.cs,FileSystemTreeNode,The conditional expression  "!p_strPath.StartsWith(Archive.ARCHIVE_PREFIX) && !p_strPath.StartsWith(NEW_PREFIX) &&            !Directory.Exists(p_strPath) && !File.Exists(p_strPath)"  is complex.
Complex Conditional,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,PerformValidation,The conditional expression  "String.IsNullOrEmpty(finInfo.Name) ||                 String.IsNullOrEmpty(finInfo.Author) ||                 String.IsNullOrEmpty(finInfo.HumanReadableVersion) ||                 String.IsNullOrEmpty(finInfo.Website) ||                 String.IsNullOrEmpty(finInfo.Description)"  is complex.
Complex Conditional,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,fseScriptEditor_GotXMLAutoCompleteList,The conditional expression  "!String.IsNullOrEmpty(e.ElementPath) &&            (Path.GetFileName(e.ElementPath).Equals("file") || Path.GetFileName(e.ElementPath).Equals("folder")) &&            (e.AutoCompleteType == AutoCompleteType.AttributeValues) &&            (e.Siblings[e.Siblings.Length - 1].Equals("source"))"  is complex.
Complex Conditional,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,tvwSource_DragEnter,The conditional expression  "!tvwSource.Nodes.ContainsKey(strFile) &&                (Directory.Exists(strFile) ||                 (File.Exists(strFile) && !".lnk".Equals(Path.GetExtension(strFile).ToLowerInvariant())))"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,tbName_KeyPress,The conditional expression  "!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && !char.IsLetter(e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The conditional expression  "(CurrentGroup == 0 && es.group != 0) || (CurrentGroup != 0 && es.group != 0 && CurrentGroup != es.group)"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,tbName_KeyPress,The conditional expression  "!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && !char.IsLetter(e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,HexOnlyKeyPress,The conditional expression  "c != 'a' && c != 'b' && c != 'c' && c != 'd' && c != 'e' && c != 'f'"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,tbName_KeyPress,The conditional expression  "!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && !char.IsLetter(e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,listView1_ItemActivate,The conditional expression  "useNewSubrecordEditorToolStripMenuItem.Checked && SubrecordStructs != null &&            SubrecordStructs[listView1.SelectedIndices[0]].elements != null &&            SubrecordStructs[listView1.SelectedIndices[0]].elements[0].type != ElementValueType.Blob &&            !SubrecordStructs[listView1.SelectedIndices[0]].UseHexEditor"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,sanitizeToolStripMenuItem_Click,The conditional expression  "r2.Name == "CELL" || r2.Name == "WRLD" || r2.Name == "REFR" || r2.Name == "ACRE" || r2.Name == "ACHR" ||                r2.Name == "NAVM" || r2.Name == "DIAL" || r2.Name == "INFO""  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,cleanRecurse,The conditional expression  "r2.Name != "REFR" && r2.Name != "ACHR" && r2.Name != "NAVM" && r2.Name != "INFO""  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,cleanRecurse2,The conditional expression  "r2.Name == r3.Name && r2.Size == r3.Size && r2.SubRecords.Count == r3.SubRecords.Count &&                r2.Flags1 == r3.Flags1 &&                r2.Flags2 == r3.Flags2 && r2.Flags3 == r3.Flags3"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,compileScriptToolStripMenuItem_Click,The conditional expression  "i < srs.Count &&                   (srs[i].Name == "SCTX" || srs[i].Name == "SLSD" || srs[i].Name == "SCVR" || srs[i].Name == "SCRO" ||                    srs[i].Name == "SCRV")"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,UpdateScrollSize,The conditional expression  "VScrollBarVisible && _byteProvider != null && _byteProvider.Length > 0 && HorizontalByteCount != 0"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,CreateCaret,The conditional expression  "_byteProvider == null || _keyInterpreter == null || _caretVisible || !Focused"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintCurrentBytesSign,The conditional expression  "_keyInterpreter != null && Focused && _bytePos != -1 && Enabled"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintCurrentByteSign,The conditional expression  "rec.Top < 0 || rec.Left < 0 || rec.Width <= 0 || rec.Height <= 0"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,KeyInterpreter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PreProcessWmChar,The conditional expression  "(!sw && pos != _hexBox._byteProvider.Length) ||            (!si && pos == _hexBox._byteProvider.Length)"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,KeyInterpreter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PreProcessWmChar,The conditional expression  "!isInsertMode && si && _hexBox._insertActive && cp == 0"  is complex.
Complex Conditional,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,StringKeyInterpreter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PreProcessWmChar,The conditional expression  "(!sw && pos != _hexBox._byteProvider.Length) ||            (!si && pos == _hexBox._byteProvider.Length)"  is complex.
Complex Conditional,Fomm.SharpZipLib.Core,WindowsPathUtils,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The conditional expression  "(index <= path.Length) &&                     (((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))"  is complex.
Complex Conditional,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[curMatch + best_len] != scan_end ||              window[curMatch + best_len - 1] != scan_end1 ||              window[curMatch] != window[scan] ||              window[curMatch + 1] != window[scan + 1]"  is complex.
Complex Conditional,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            (scan < strend)"  is complex.
Complex Conditional,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateStored,The conditional expression  "(storedLength >= DeflaterConstants.MAX_BLOCK_SIZE) || // Block is full            (blockStart < DeflaterConstants.WSIZE && storedLength >= DeflaterConstants.MAX_DIST) ||            // Block may move out of window            flush"  is complex.
Complex Conditional,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateFast,The conditional expression  "lookahead >= DeflaterConstants.MIN_MATCH &&              (hashHead = InsertString()) != 0 &&              strategy != DeflateStrategy.HuffmanOnly &&              strstart - hashHead <= DeflaterConstants.MAX_DIST &&              FindLongestMatch(hashHead)"  is complex.
Complex Conditional,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "strategy != DeflateStrategy.HuffmanOnly &&                hashHead != 0 &&                strstart - hashHead <= DeflaterConstants.MAX_DIST &&                FindLongestMatch(hashHead)"  is complex.
Complex Conditional,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "matchLen <= 5 &&                  (strategy == DeflateStrategy.Filtered ||                   (matchLen == DeflaterConstants.MIN_MATCH && strstart - matchStart > TooFar))"  is complex.
Complex Conditional,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The conditional expression  "(extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)"  is complex.
Complex Conditional,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,ReadEntries,The conditional expression  "(thisDiskNumber == 0xffff) ||            (startCentralDirDisk == 0xffff) ||            (entriesForThisDisk == 0xffff) ||            (entriesForWholeCentralDir == 0xffff) ||            (centralDirSize == 0xffffffff) ||            (offsetOfCentralDir == 0xffffffff)"  is complex.
Virtual Method Call from Constructor,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The constructor "GroupRecord" calls a virtual method "Clone".
Empty Catch Block,Fomm.Controls,XmlEditor,C:\repos\niveuseverto_fomm\flmm\Controls\XmlEditor.cs,UpdateFolds,The method has an empty catch block.
Empty Catch Block,Fomm,Program,C:\repos\niveuseverto_fomm\flmm\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,StartSteam,The method has an empty catch block.
Empty Catch Block,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,FomodInfoControl,The method has an empty catch block.
Empty Catch Block,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordStructureToRecord,The method has an empty catch block.
Empty Catch Block,Fomm.Games.Fallout3.Tools.TESsnip,Plugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,Save,The method has an empty catch block.
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: mPnlNavigation.Height = 23 + 2*12;
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: mPnlNavigation.Height = 23 + 2*12;
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: mPnlNavigation.Height = 23 + 2*12;
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: mPnlNavigationLight.Size = new Size(444' 1);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: mPnlNavigationShadow.Size = new Size(444' 1);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: mPnlNavigationShadow.TabIndex = 2;
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: mButCancel.Size = new Size(75' 23);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: mButCancel.Size = new Size(75' 23);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: mButCancel.Location = new Point(mPnlNavigation.Width - 12 - mButCancel.Width' 12);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: mButCancel.Location = new Point(mPnlNavigation.Width - 12 - mButCancel.Width' 12);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: NextButton.Size = new Size(75' 23);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: NextButton.Size = new Size(75' 23);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: NextButton.Location = new Point(mButCancel.Left - 12 - NextButton.Width' 12);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: NextButton.Location = new Point(mButCancel.Left - 12 - NextButton.Width' 12);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: PreviousButton.Size = new Size(75' 23);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: PreviousButton.Size = new Size(75' 23);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: PreviousButton.Location = new Point(NextButton.Left - 6 - PreviousButton.Width' 12);
Magic Number,Fomm.Controls,WizardControl,C:\repos\niveuseverto_fomm\flmm\Controls\WizardControl.cs,WizardControl,The following statement contains a magic number: PreviousButton.Location = new Point(NextButton.Left - 6 - PreviousButton.Width' 12);
Magic Number,Fomm.Controls,AutosizeLabel,C:\repos\niveuseverto_fomm\flmm\Controls\AutosizeLabel.cs,OnContentsResized,The following statement contains a magic number: Height = e.NewRectangle.Height + 5;
Magic Number,Fomm.Controls,CodeEditor,C:\repos\niveuseverto_fomm\flmm\Controls\CodeEditor.cs,CodeEditor,The following statement contains a magic number: m_tmrFoldUpdater.Interval = 2000;
Magic Number,Fomm.Controls,DropDownTabControl,C:\repos\niveuseverto_fomm\flmm\Controls\DropDownTabControl.cs,DropDownTabControl,The following statement contains a magic number: m_lblLabel.Location = new Point(3' 3);
Magic Number,Fomm.Controls,DropDownTabControl,C:\repos\niveuseverto_fomm\flmm\Controls\DropDownTabControl.cs,DropDownTabControl,The following statement contains a magic number: m_lblLabel.Location = new Point(3' 3);
Magic Number,Fomm.Controls,DropDownTabControl,C:\repos\niveuseverto_fomm\flmm\Controls\DropDownTabControl.cs,DropDownTabControl,The following statement contains a magic number: TabSelector.Location = new Point(13' m_lblLabel.Top + 13 + 4);
Magic Number,Fomm.Controls,DropDownTabControl,C:\repos\niveuseverto_fomm\flmm\Controls\DropDownTabControl.cs,DropDownTabControl,The following statement contains a magic number: TabSelector.Location = new Point(13' m_lblLabel.Top + 13 + 4);
Magic Number,Fomm.Controls,DropDownTabControl,C:\repos\niveuseverto_fomm\flmm\Controls\DropDownTabControl.cs,DropDownTabControl,The following statement contains a magic number: TabSelector.Location = new Point(13' m_lblLabel.Top + 13 + 4);
Magic Number,Fomm.Controls,DropDownTabControl,C:\repos\niveuseverto_fomm\flmm\Controls\DropDownTabControl.cs,DropDownTabControl,The following statement contains a magic number: mPnlDropDownPanel.Height = TabSelector.Location.Y + TabSelector.Height + 4;
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.rtbTextbox.Location = new System.Drawing.Point(0' 25);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.rtbTextbox.Size = new System.Drawing.Size(694' 351);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.rtbTextbox.Size = new System.Drawing.Size(694' 351);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip1.Size = new System.Drawing.Size(694' 25);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip1.Size = new System.Drawing.Size(694' 25);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tscbFont.DropDownWidth = 175;
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tscbFont.Size = new System.Drawing.Size(150' 25);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tscbFont.Size = new System.Drawing.Size(150' 25);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tscbFontSize.DropDownWidth = 35;
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tscbFontSize.Size = new System.Drawing.Size(35' 23);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tscbFontSize.Size = new System.Drawing.Size(35' 23);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(6' 25);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(6' 25);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbBold.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbBold.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbItalic.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbItalic.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbUnderline.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbUnderline.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbStrikeout.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbStrikeout.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbJustifyLeft.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbJustifyLeft.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbJustifyCentre.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbJustifyCentre.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbJustifyRight.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbJustifyRight.Size = new System.Drawing.Size(23' 22);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(694' 376);
Magic Number,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(694' 376);
Magic Number,Fomm.Controls,ScriptEditor,C:\repos\niveuseverto_fomm\flmm\Controls\ScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip1.Size = new System.Drawing.Size(482' 25);
Magic Number,Fomm.Controls,ScriptEditor,C:\repos\niveuseverto_fomm\flmm\Controls\ScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip1.Size = new System.Drawing.Size(482' 25);
Magic Number,Fomm.Controls,ScriptEditor,C:\repos\niveuseverto_fomm\flmm\Controls\ScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbCheckSyntax.Size = new System.Drawing.Size(81' 22);
Magic Number,Fomm.Controls,ScriptEditor,C:\repos\niveuseverto_fomm\flmm\Controls\ScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbCheckSyntax.Size = new System.Drawing.Size(81' 22);
Magic Number,Fomm.Controls,ScriptEditor,C:\repos\niveuseverto_fomm\flmm\Controls\ScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.cedEditor.Location = new System.Drawing.Point(0' 25);
Magic Number,Fomm.Controls,ScriptEditor,C:\repos\niveuseverto_fomm\flmm\Controls\ScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.cedEditor.Size = new System.Drawing.Size(482' 319);
Magic Number,Fomm.Controls,ScriptEditor,C:\repos\niveuseverto_fomm\flmm\Controls\ScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.cedEditor.Size = new System.Drawing.Size(482' 319);
Magic Number,Fomm.Controls,ScriptEditor,C:\repos\niveuseverto_fomm\flmm\Controls\ScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(482' 344);
Magic Number,Fomm.Controls,ScriptEditor,C:\repos\niveuseverto_fomm\flmm\Controls\ScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(482' 344);
Magic Number,Fomm.Controls,SplitButton,C:\repos\niveuseverto_fomm\flmm\Controls\SplitButton.cs,GetPreferredSize,The following statement contains a magic number: if (m_booShowSplit && !string.IsNullOrEmpty(Text) &&            TextRenderer.MeasureText(Text' Font).Width + PUSH_BUTTON_WIDTH > szePreferredSize.Width)        {          return szePreferredSize + new Size(PUSH_BUTTON_WIDTH + m_intBorderSize*2' 0);        }
Magic Number,Fomm.Controls,SplitButton,C:\repos\niveuseverto_fomm\flmm\Controls\SplitButton.cs,OnPaint,The following statement contains a magic number: m_rctDropDownRectangle = new Rectangle(rctBounds.Right - PUSH_BUTTON_WIDTH - 1' m_intBorderSize' PUSH_BUTTON_WIDTH'                                               rctBounds.Height - m_intBorderSize*2);
Magic Number,Fomm.Controls,SplitButton,C:\repos\niveuseverto_fomm\flmm\Controls\SplitButton.cs,OnPaint,The following statement contains a magic number: var rctFocusRect = new Rectangle(intInternalBorder'                                         intInternalBorder'                                         rctBounds.Width - m_rctDropDownRectangle.Width - intInternalBorder'                                         rctBounds.Height - (intInternalBorder*2));
Magic Number,Fomm.Controls,SplitButton,C:\repos\niveuseverto_fomm\flmm\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: var pntMiddle = new Point(Convert.ToInt32(p_rctDropDownRect.Left + p_rctDropDownRect.Width/2)'                                  Convert.ToInt32(p_rctDropDownRect.Top + p_rctDropDownRect.Height/2));
Magic Number,Fomm.Controls,SplitButton,C:\repos\niveuseverto_fomm\flmm\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: var pntMiddle = new Point(Convert.ToInt32(p_rctDropDownRect.Left + p_rctDropDownRect.Width/2)'                                  Convert.ToInt32(p_rctDropDownRect.Top + p_rctDropDownRect.Height/2));
Magic Number,Fomm.Controls,SplitButton,C:\repos\niveuseverto_fomm\flmm\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: pntMiddle.X += (p_rctDropDownRect.Width%2);
Magic Number,Fomm.Controls,SplitButton,C:\repos\niveuseverto_fomm\flmm\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: var pntArrowPoints = new[]        {          new Point(pntMiddle.X - 2' pntMiddle.Y - 1)' new Point(pntMiddle.X + 3' pntMiddle.Y - 1)'          new Point(pntMiddle.X' pntMiddle.Y + 2)        };
Magic Number,Fomm.Controls,SplitButton,C:\repos\niveuseverto_fomm\flmm\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: var pntArrowPoints = new[]        {          new Point(pntMiddle.X - 2' pntMiddle.Y - 1)' new Point(pntMiddle.X + 3' pntMiddle.Y - 1)'          new Point(pntMiddle.X' pntMiddle.Y + 2)        };
Magic Number,Fomm.Controls,SplitButton,C:\repos\niveuseverto_fomm\flmm\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: var pntArrowPoints = new[]        {          new Point(pntMiddle.X - 2' pntMiddle.Y - 1)' new Point(pntMiddle.X + 3' pntMiddle.Y - 1)'          new Point(pntMiddle.X' pntMiddle.Y + 2)        };
Magic Number,Fomm.Controls,VerticalTabControl,C:\repos\niveuseverto_fomm\flmm\Controls\VerticalTabControl.cs,VerticalTabControl,The following statement contains a magic number: m_ptsTabContainer.Width = 150;
Magic Number,Fomm.Controls,XmlCompletionData,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionData.cs,InsertAction,The following statement contains a magic number: switch (m_actCompletionType)        {          case AutoCompleteType.Attribute:          case AutoCompleteType.AttributeValues:            textArea.InsertString(Text);            return false;          case AutoCompleteType.Element:            if (Text.EndsWith("["))            {              var crtCaret = textArea.Caret;              textArea.InsertString(String.Concat(Text' "]]>"));              crtCaret.Position = textArea.Document.OffsetToPosition(crtCaret.Offset - 3);              return false;            }            break;        }
Magic Number,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,GenerateCompletionData,The following statement contains a magic number: if (booInsideTag)        {          var intQuoteCount = 0;          for (var intStartPos = intOpenTagPos;               (intStartPos = strText.IndexOf('"'' intStartPos + 1)) > -1;               intQuoteCount++) {}          booInsideValue = (intQuoteCount%2 == 1);        }
Magic Number,Fomm.Controls,XmlEditor,C:\repos\niveuseverto_fomm\flmm\Controls\XmlEditor.cs,XmlEditor,The following statement contains a magic number: m_tmrFoldUpdater.Interval = 2000;
Magic Number,Fomm.Controls,XmlEditor,C:\repos\niveuseverto_fomm\flmm\Controls\XmlEditor.cs,XmlEditor,The following statement contains a magic number: m_tmrValidator.Interval = 2000;
Magic Number,Fomm.Controls,ReordableItemListView,C:\repos\niveuseverto_fomm\flmm\Controls\ReorderableItemListView.cs,DrawInsertionLine,The following statement contains a magic number: using (var g = CreateGraphics())        {          g.DrawLine(new Pen(Color.Red)' X1' Y' X2 - 1' Y);            var leftTriangle = new[]          {            new Point(X1' Y - 4)'            new Point(X1 + 7' Y)'            new Point(X1' Y + 4)          };          var rightTriangle = new[]          {            new Point(X2' Y - 4)'            new Point(X2 - 8' Y)'            new Point(X2' Y + 4)          };            Brush br = new SolidBrush(Color.Red);          g.FillPolygon(br' leftTriangle);          g.FillPolygon(br' rightTriangle);        }
Magic Number,Fomm.Controls,ReordableItemListView,C:\repos\niveuseverto_fomm\flmm\Controls\ReorderableItemListView.cs,DrawInsertionLine,The following statement contains a magic number: using (var g = CreateGraphics())        {          g.DrawLine(new Pen(Color.Red)' X1' Y' X2 - 1' Y);            var leftTriangle = new[]          {            new Point(X1' Y - 4)'            new Point(X1 + 7' Y)'            new Point(X1' Y + 4)          };          var rightTriangle = new[]          {            new Point(X2' Y - 4)'            new Point(X2 - 8' Y)'            new Point(X2' Y + 4)          };            Brush br = new SolidBrush(Color.Red);          g.FillPolygon(br' leftTriangle);          g.FillPolygon(br' rightTriangle);        }
Magic Number,Fomm.Controls,ReordableItemListView,C:\repos\niveuseverto_fomm\flmm\Controls\ReorderableItemListView.cs,DrawInsertionLine,The following statement contains a magic number: using (var g = CreateGraphics())        {          g.DrawLine(new Pen(Color.Red)' X1' Y' X2 - 1' Y);            var leftTriangle = new[]          {            new Point(X1' Y - 4)'            new Point(X1 + 7' Y)'            new Point(X1' Y + 4)          };          var rightTriangle = new[]          {            new Point(X2' Y - 4)'            new Point(X2 - 8' Y)'            new Point(X2' Y + 4)          };            Brush br = new SolidBrush(Color.Red);          g.FillPolygon(br' leftTriangle);          g.FillPolygon(br' rightTriangle);        }
Magic Number,Fomm.Controls,ReordableItemListView,C:\repos\niveuseverto_fomm\flmm\Controls\ReorderableItemListView.cs,DrawInsertionLine,The following statement contains a magic number: using (var g = CreateGraphics())        {          g.DrawLine(new Pen(Color.Red)' X1' Y' X2 - 1' Y);            var leftTriangle = new[]          {            new Point(X1' Y - 4)'            new Point(X1 + 7' Y)'            new Point(X1' Y + 4)          };          var rightTriangle = new[]          {            new Point(X2' Y - 4)'            new Point(X2 - 8' Y)'            new Point(X2' Y + 4)          };            Brush br = new SolidBrush(Color.Red);          g.FillPolygon(br' leftTriangle);          g.FillPolygon(br' rightTriangle);        }
Magic Number,Fomm.Controls,ReordableItemListView,C:\repos\niveuseverto_fomm\flmm\Controls\ReorderableItemListView.cs,DrawInsertionLine,The following statement contains a magic number: using (var g = CreateGraphics())        {          g.DrawLine(new Pen(Color.Red)' X1' Y' X2 - 1' Y);            var leftTriangle = new[]          {            new Point(X1' Y - 4)'            new Point(X1 + 7' Y)'            new Point(X1' Y + 4)          };          var rightTriangle = new[]          {            new Point(X2' Y - 4)'            new Point(X2 - 8' Y)'            new Point(X2' Y + 4)          };            Brush br = new SolidBrush(Color.Red);          g.FillPolygon(br' leftTriangle);          g.FillPolygon(br' rightTriangle);        }
Magic Number,Fomm.Controls,ReordableItemListView,C:\repos\niveuseverto_fomm\flmm\Controls\ReorderableItemListView.cs,DrawInsertionLine,The following statement contains a magic number: using (var g = CreateGraphics())        {          g.DrawLine(new Pen(Color.Red)' X1' Y' X2 - 1' Y);            var leftTriangle = new[]          {            new Point(X1' Y - 4)'            new Point(X1 + 7' Y)'            new Point(X1' Y + 4)          };          var rightTriangle = new[]          {            new Point(X2' Y - 4)'            new Point(X2 - 8' Y)'            new Point(X2' Y + 4)          };            Brush br = new SolidBrush(Color.Red);          g.FillPolygon(br' leftTriangle);          g.FillPolygon(br' rightTriangle);        }
Magic Number,Fomm.Controls,ReordableItemListView,C:\repos\niveuseverto_fomm\flmm\Controls\ReorderableItemListView.cs,IsPointInTopHalfOfItem,The following statement contains a magic number: return (pt.Y < (rc.Top + (rc.Height/2)));
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.radFallout3.Location = new System.Drawing.Point(19' 19);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.radFallout3.Location = new System.Drawing.Point(19' 19);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.radFallout3.Size = new System.Drawing.Size(65' 17);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.radFallout3.Size = new System.Drawing.Size(65' 17);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.radFalloutNV.Location = new System.Drawing.Point(19' 42);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.radFalloutNV.Location = new System.Drawing.Point(19' 42);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.radFalloutNV.Size = new System.Drawing.Size(117' 17);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.radFalloutNV.Size = new System.Drawing.Size(117' 17);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.cbxRemember.Location = new System.Drawing.Point(102' 86);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.cbxRemember.Location = new System.Drawing.Point(102' 86);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.cbxRemember.Size = new System.Drawing.Size(136' 17);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.cbxRemember.Size = new System.Drawing.Size(136' 17);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(226' 68);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(226' 68);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(163' 112);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(163' 112);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.butOK.TabIndex = 2;
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(250' 147);
Magic Number,Fomm,GameModeSelector,C:\repos\niveuseverto_fomm\flmm\GameModeSelector.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(250' 147);
Magic Number,Fomm,ImageForm,C:\repos\niveuseverto_fomm\flmm\ImageForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(292' 273);
Magic Number,Fomm,ImageForm,C:\repos\niveuseverto_fomm\flmm\ImageForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(292' 273);
Magic Number,Fomm,ImageForm,C:\repos\niveuseverto_fomm\flmm\ImageForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 273);
Magic Number,Fomm,ImageForm,C:\repos\niveuseverto_fomm\flmm\ImageForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 273);
Magic Number,Fomm,NativeMethods,C:\repos\niveuseverto_fomm\flmm\Imports.cs,GetPrivateProfileString,The following statement contains a magic number: var buffer = new byte[256];
Magic Number,Fomm,NativeMethods,C:\repos\niveuseverto_fomm\flmm\Imports.cs,GetPrivateProfileString,The following statement contains a magic number: var len = GetPrivateProfileStringA(section' value' def' buffer' 256' path);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbrItemProgress.Location = new System.Drawing.Point(12' 25);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbrItemProgress.Location = new System.Drawing.Point(12' 25);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbrItemProgress.Size = new System.Drawing.Size(435' 23);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbrItemProgress.Size = new System.Drawing.Size(435' 23);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblItemMessage.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblItemMessage.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblItemMessage.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblItemMessage.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(372' 6);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(372' 6);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.TabIndex = 2;
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlItemProgress.Size = new System.Drawing.Size(459' 54);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlItemProgress.Size = new System.Drawing.Size(459' 54);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlItemProgress.TabIndex = 5;
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlTotalProgress.Location = new System.Drawing.Point(0' 54);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlTotalProgress.Size = new System.Drawing.Size(459' 54);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlTotalProgress.Size = new System.Drawing.Size(459' 54);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlTotalProgress.TabIndex = 6;
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbrTotalProgress.Location = new System.Drawing.Point(12' 25);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbrTotalProgress.Location = new System.Drawing.Point(12' 25);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbrTotalProgress.Size = new System.Drawing.Size(435' 23);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbrTotalProgress.Size = new System.Drawing.Size(435' 23);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblTotalMessage.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblTotalMessage.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblTotalMessage.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblTotalMessage.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Location = new System.Drawing.Point(0' 108);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size(459' 41);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size(459' 41);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel3.TabIndex = 7;
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(459' 153);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(459' 153);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(465' 181);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(465' 181);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(465' 28);
Magic Number,Fomm,BackgroundWorkerProgressDialog,C:\repos\niveuseverto_fomm\flmm\BackgroundWorkerProgressDialog.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(465' 28);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: if (intWindowWidth > 460)        {          intWindowWidth = 460;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: if (intWindowWidth > 460)        {          intWindowWidth = 460;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: if (booShowIcon)        {          szeTextSize = gphGraphics.MeasureString(albPrompt.Text' albPrompt.Font'                                                  intWindowWidth - pbxIcon.MinimumSize.Width);          var intLabelPadding = (pbxIcon.MinimumSize.Height - (Int32) szeTextSize.Height)/2;          if (intLabelPadding > pnlLabel.Padding.Top)          {            pnlLabel.Padding = new Padding(pnlLabel.Padding.Left' intLabelPadding' pnlLabel.Padding.Right' 0);          }        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: var intLastButtonLeft = pnlButtons.Right - 6;
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.OKCancel:          case MessageBoxButtons.RetryCancel:          case MessageBoxButtons.YesNoCancel:            var butCancel = new Button();            butCancel.Text = "Cancel";            butCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butCancel.Location = new Point(intLastButtonLeft - butCancel.Width - 6' 12);            butCancel.Click += Button_Click;            butCancel.Tag = DialogResult.Cancel;            butCancel.TabIndex = 6;            pnlButtons.Controls.Add(butCancel);            intLastButtonLeft = butCancel.Left;            CancelButton = butCancel;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.OKCancel:          case MessageBoxButtons.RetryCancel:          case MessageBoxButtons.YesNoCancel:            var butCancel = new Button();            butCancel.Text = "Cancel";            butCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butCancel.Location = new Point(intLastButtonLeft - butCancel.Width - 6' 12);            butCancel.Click += Button_Click;            butCancel.Tag = DialogResult.Cancel;            butCancel.TabIndex = 6;            pnlButtons.Controls.Add(butCancel);            intLastButtonLeft = butCancel.Left;            CancelButton = butCancel;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.OKCancel:          case MessageBoxButtons.RetryCancel:          case MessageBoxButtons.YesNoCancel:            var butCancel = new Button();            butCancel.Text = "Cancel";            butCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butCancel.Location = new Point(intLastButtonLeft - butCancel.Width - 6' 12);            butCancel.Click += Button_Click;            butCancel.Tag = DialogResult.Cancel;            butCancel.TabIndex = 6;            pnlButtons.Controls.Add(butCancel);            intLastButtonLeft = butCancel.Left;            CancelButton = butCancel;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.YesNo:          case MessageBoxButtons.YesNoCancel:            var butNo = new Button();            butNo.Text = "No";            butNo.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butNo.Location = new Point(intLastButtonLeft - butNo.Width - 6' 12);            butNo.Click += Button_Click;            butNo.Tag = DialogResult.No;            butNo.TabIndex = 5;            intLastButtonLeft = butNo.Left;            pnlButtons.Controls.Add(butNo);            if (p_mbbButtons == MessageBoxButtons.YesNo)            {              CancelButton = butNo;            }            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.YesNo:          case MessageBoxButtons.YesNoCancel:            var butNo = new Button();            butNo.Text = "No";            butNo.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butNo.Location = new Point(intLastButtonLeft - butNo.Width - 6' 12);            butNo.Click += Button_Click;            butNo.Tag = DialogResult.No;            butNo.TabIndex = 5;            intLastButtonLeft = butNo.Left;            pnlButtons.Controls.Add(butNo);            if (p_mbbButtons == MessageBoxButtons.YesNo)            {              CancelButton = butNo;            }            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.YesNo:          case MessageBoxButtons.YesNoCancel:            var butNo = new Button();            butNo.Text = "No";            butNo.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butNo.Location = new Point(intLastButtonLeft - butNo.Width - 6' 12);            butNo.Click += Button_Click;            butNo.Tag = DialogResult.No;            butNo.TabIndex = 5;            intLastButtonLeft = butNo.Left;            pnlButtons.Controls.Add(butNo);            if (p_mbbButtons == MessageBoxButtons.YesNo)            {              CancelButton = butNo;            }            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.YesNo:          case MessageBoxButtons.YesNoCancel:            var butYes = new Button();            butYes.Text = "Yes";            butYes.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butYes.Location = new Point(intLastButtonLeft - butYes.Width - 6' 12);            butYes.Click += Button_Click;            butYes.Tag = DialogResult.Yes;            butYes.TabIndex = 4;            intLastButtonLeft = butYes.Left;            pnlButtons.Controls.Add(butYes);            AcceptButton = butYes;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.YesNo:          case MessageBoxButtons.YesNoCancel:            var butYes = new Button();            butYes.Text = "Yes";            butYes.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butYes.Location = new Point(intLastButtonLeft - butYes.Width - 6' 12);            butYes.Click += Button_Click;            butYes.Tag = DialogResult.Yes;            butYes.TabIndex = 4;            intLastButtonLeft = butYes.Left;            pnlButtons.Controls.Add(butYes);            AcceptButton = butYes;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.YesNo:          case MessageBoxButtons.YesNoCancel:            var butYes = new Button();            butYes.Text = "Yes";            butYes.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butYes.Location = new Point(intLastButtonLeft - butYes.Width - 6' 12);            butYes.Click += Button_Click;            butYes.Tag = DialogResult.Yes;            butYes.TabIndex = 4;            intLastButtonLeft = butYes.Left;            pnlButtons.Controls.Add(butYes);            AcceptButton = butYes;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.OK:          case MessageBoxButtons.OKCancel:            var butOk = new Button();            butOk.Text = "OK";            butOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butOk.Location = new Point(intLastButtonLeft - butOk.Width - 6' 12);            butOk.Click += Button_Click;            butOk.Tag = DialogResult.OK;            butOk.TabIndex = 3;            intLastButtonLeft = butOk.Left;            pnlButtons.Controls.Add(butOk);            AcceptButton = butOk;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.OK:          case MessageBoxButtons.OKCancel:            var butOk = new Button();            butOk.Text = "OK";            butOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butOk.Location = new Point(intLastButtonLeft - butOk.Width - 6' 12);            butOk.Click += Button_Click;            butOk.Tag = DialogResult.OK;            butOk.TabIndex = 3;            intLastButtonLeft = butOk.Left;            pnlButtons.Controls.Add(butOk);            AcceptButton = butOk;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.OK:          case MessageBoxButtons.OKCancel:            var butOk = new Button();            butOk.Text = "OK";            butOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butOk.Location = new Point(intLastButtonLeft - butOk.Width - 6' 12);            butOk.Click += Button_Click;            butOk.Tag = DialogResult.OK;            butOk.TabIndex = 3;            intLastButtonLeft = butOk.Left;            pnlButtons.Controls.Add(butOk);            AcceptButton = butOk;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.AbortRetryIgnore:            var butIgnore = new Button();            butIgnore.Text = "Ignore";            butIgnore.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butIgnore.Location = new Point(intLastButtonLeft - butIgnore.Width - 6' 12);            butIgnore.Click += Button_Click;            butIgnore.Tag = DialogResult.Ignore;            butIgnore.TabIndex = 2;            intLastButtonLeft = butIgnore.Left;            pnlButtons.Controls.Add(butIgnore);            CancelButton = butIgnore;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.AbortRetryIgnore:            var butIgnore = new Button();            butIgnore.Text = "Ignore";            butIgnore.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butIgnore.Location = new Point(intLastButtonLeft - butIgnore.Width - 6' 12);            butIgnore.Click += Button_Click;            butIgnore.Tag = DialogResult.Ignore;            butIgnore.TabIndex = 2;            intLastButtonLeft = butIgnore.Left;            pnlButtons.Controls.Add(butIgnore);            CancelButton = butIgnore;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.AbortRetryIgnore:            var butIgnore = new Button();            butIgnore.Text = "Ignore";            butIgnore.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butIgnore.Location = new Point(intLastButtonLeft - butIgnore.Width - 6' 12);            butIgnore.Click += Button_Click;            butIgnore.Tag = DialogResult.Ignore;            butIgnore.TabIndex = 2;            intLastButtonLeft = butIgnore.Left;            pnlButtons.Controls.Add(butIgnore);            CancelButton = butIgnore;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.AbortRetryIgnore:          case MessageBoxButtons.RetryCancel:            var butRetry = new Button();            butRetry.Text = "Retry";            butRetry.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butRetry.Location = new Point(intLastButtonLeft - butRetry.Width - 6' 12);            butRetry.Click += Button_Click;            butRetry.Tag = DialogResult.Retry;            butRetry.TabIndex = 1;            intLastButtonLeft = butRetry.Left;            pnlButtons.Controls.Add(butRetry);            AcceptButton = butRetry;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.AbortRetryIgnore:          case MessageBoxButtons.RetryCancel:            var butRetry = new Button();            butRetry.Text = "Retry";            butRetry.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butRetry.Location = new Point(intLastButtonLeft - butRetry.Width - 6' 12);            butRetry.Click += Button_Click;            butRetry.Tag = DialogResult.Retry;            butRetry.TabIndex = 1;            intLastButtonLeft = butRetry.Left;            pnlButtons.Controls.Add(butRetry);            AcceptButton = butRetry;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.AbortRetryIgnore:            var butAbort = new Button();            butAbort.Text = "Abort";            butAbort.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butAbort.Location = new Point(intLastButtonLeft - butAbort.Width - 6' 12);            butAbort.Click += Button_Click;            butAbort.Tag = DialogResult.Abort;            butAbort.TabIndex = 0;            pnlButtons.Controls.Add(butAbort);            AcceptButton = butAbort;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following statement contains a magic number: switch (p_mbbButtons)        {          case MessageBoxButtons.AbortRetryIgnore:            var butAbort = new Button();            butAbort.Text = "Abort";            butAbort.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butAbort.Location = new Point(intLastButtonLeft - butAbort.Width - 6' 12);            butAbort.Click += Button_Click;            butAbort.Tag = DialogResult.Abort;            butAbort.TabIndex = 0;            pnlButtons.Controls.Add(butAbort);            AcceptButton = butAbort;            break;        }
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Location = new System.Drawing.Point(0' 95);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Size = new System.Drawing.Size(284' 47);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Size = new System.Drawing.Size(284' 47);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.TabIndex = 2;
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlMessage.Size = new System.Drawing.Size(284' 66);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlMessage.Size = new System.Drawing.Size(284' 66);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlMessage.TabIndex = 3;
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlLabel.Location = new System.Drawing.Point(72' 0);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlLabel.Padding = new System.Windows.Forms.Padding(0' 24' 24' 24);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlLabel.Padding = new System.Windows.Forms.Padding(0' 24' 24' 24);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlLabel.Padding = new System.Windows.Forms.Padding(0' 24' 24' 24);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlLabel.Size = new System.Drawing.Size(212' 66);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlLabel.Size = new System.Drawing.Size(212' 66);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlLabel.TabIndex = 2;
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pbxIcon.Padding = new System.Windows.Forms.Padding(24' 24' 12' 24);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pbxIcon.Padding = new System.Windows.Forms.Padding(24' 24' 12' 24);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pbxIcon.Padding = new System.Windows.Forms.Padding(24' 24' 12' 24);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pbxIcon.Padding = new System.Windows.Forms.Padding(24' 24' 12' 24);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pbxIcon.Size = new System.Drawing.Size(72' 66);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pbxIcon.Size = new System.Drawing.Size(72' 66);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlRemember.Location = new System.Drawing.Point(0' 66);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlRemember.Size = new System.Drawing.Size(284' 29);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlRemember.Size = new System.Drawing.Size(284' 29);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlRemember.TabIndex = 4;
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.cbxRemember.Location = new System.Drawing.Point(134' 12);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.cbxRemember.Location = new System.Drawing.Point(134' 12);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.cbxRemember.Size = new System.Drawing.Size(138' 17);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.cbxRemember.Size = new System.Drawing.Size(138' 17);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.albPrompt.Location = new System.Drawing.Point(0' 24);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.albPrompt.Size = new System.Drawing.Size(188' 18);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.albPrompt.Size = new System.Drawing.Size(188' 18);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateFomod.Location = new System.Drawing.Point(16' 19);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateFomod.Location = new System.Drawing.Point(16' 19);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateFomod.Size = new System.Drawing.Size(131' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateFomod.Size = new System.Drawing.Size(131' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateBsa.Location = new System.Drawing.Point(16' 42);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateBsa.Location = new System.Drawing.Point(16' 42);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateBsa.Size = new System.Drawing.Size(123' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateBsa.Size = new System.Drawing.Size(123' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateSdp.Location = new System.Drawing.Point(16' 65);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateSdp.Location = new System.Drawing.Point(16' 65);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateSdp.Size = new System.Drawing.Size(124' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateSdp.Size = new System.Drawing.Size(124' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbAssociateSdp.TabIndex = 2;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbShellExtensions.Location = new System.Drawing.Point(16' 88);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbShellExtensions.Location = new System.Drawing.Point(16' 88);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbShellExtensions.Size = new System.Drawing.Size(231' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbShellExtensions.Size = new System.Drawing.Size(231' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbShellExtensions.TabIndex = 3;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableIPC.Location = new System.Drawing.Point(16' 19);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableIPC.Location = new System.Drawing.Point(16' 19);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableIPC.Size = new System.Drawing.Size(135' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableIPC.Size = new System.Drawing.Size(135' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableIPC.TabIndex = 4;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableUAC.Location = new System.Drawing.Point(16' 42);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableUAC.Location = new System.Drawing.Point(16' 42);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableUAC.Size = new System.Drawing.Size(124' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableUAC.Size = new System.Drawing.Size(124' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableUAC.TabIndex = 5;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tbcTabs.Size = new System.Drawing.Size(406' 320);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tbcTabs.Size = new System.Drawing.Size(406' 320);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tbcTabs.TabIndex = 22;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tpgGeneral.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tpgGeneral.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tpgGeneral.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tpgGeneral.Size = new System.Drawing.Size(398' 294);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tpgGeneral.Size = new System.Drawing.Size(398' 294);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new System.Drawing.Point(6' 126);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new System.Drawing.Point(6' 126);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Size = new System.Drawing.Size(384' 114);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Size = new System.Drawing.Size(384' 114);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.TabIndex = 23;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.gbxAssociations.Location = new System.Drawing.Point(6' 6);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.gbxAssociations.Location = new System.Drawing.Point(6' 6);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.gbxAssociations.Size = new System.Drawing.Size(384' 114);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.gbxAssociations.Size = new System.Drawing.Size(384' 114);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.gbxAssociations.TabIndex = 22;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(398' 294);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(398' 294);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbUseDocs.Location = new System.Drawing.Point(17' 210);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbUseDocs.Location = new System.Drawing.Point(17' 210);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbUseDocs.Size = new System.Drawing.Size(175' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbUseDocs.Size = new System.Drawing.Size(175' 17);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbUseDocs.TabIndex = 2;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(6' 124);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(6' 124);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(384' 80);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(384' 80);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFPFormat.Location = new System.Drawing.Point(111' 19);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFPFormat.Location = new System.Drawing.Point(111' 19);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFPFormat.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFPFormat.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFPCompression.Location = new System.Drawing.Point(111' 46);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFPCompression.Location = new System.Drawing.Point(111' 46);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFPCompression.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFPCompression.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(63' 22);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(63' 22);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(42' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(42' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 4;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(6' 49);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(6' 49);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(99' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(99' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 6;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(6' 6);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(6' 6);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(384' 112);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(384' 112);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(22' 16);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(22' 16);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(354' 31);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(354' 31);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 3;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomodFormat.Location = new System.Drawing.Point(111' 50);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomodFormat.Location = new System.Drawing.Point(111' 50);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomodFormat.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomodFormat.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomodCompression.Location = new System.Drawing.Point(111' 77);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomodCompression.Location = new System.Drawing.Point(111' 77);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomodCompression.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomodCompression.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(63' 53);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(63' 53);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(42' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(42' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(6' 80);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(6' 80);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(99' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(99' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 2;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(22' 16);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(22' 16);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(354' 31);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(354' 31);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 3;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(111' 50);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(111' 50);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Location = new System.Drawing.Point(111' 77);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Location = new System.Drawing.Point(111' 77);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Size = new System.Drawing.Size(186' 21);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(63' 53);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(63' 53);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(42' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(42' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(6' 80);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(6' 80);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(99' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(99' 13);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.TabIndex = 2;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(0' 320);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(406' 47);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(406' 47);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 23;
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(319' 12);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(319' 12);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(238' 12);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(238' 12);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(406' 367);
Magic Number,Fomm,SettingsForm,C:\repos\niveuseverto_fomm\flmm\SettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(406' 367);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,MainForm,The following statement contains a magic number: if (!Settings.Default.DisableIPC)        {          var newFommTimer = new Timer();          try          {            newFommTimer.Interval = 1000;            newFommTimer.Tick += newFommTimer_Tick;            newFommTimer.Start();            Messaging.ServerSetup(RecieveMessage);          }          catch (RemotingException)          {            newFommTimer.Stop();            newFommTimer.Enabled = false;            Settings.Default.DisableIPC = true;            Settings.Default.Save();          }        }
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,lvEspList_KeyDown,The following statement contains a magic number: if (e.Alt && (e.KeyCode == Keys.Up || e.KeyCode == Keys.Down))        {          e.Handled = true;          if (lvEspList.SelectedItems.Count > 0)          {            var indicies = new int[lvEspList.SelectedIndices.Count];            for (var i = 0; i < indicies.Length; i++)            {              indicies[i] = lvEspList.SelectedIndices[i];            }              Array.Sort(indicies);            if (e.KeyCode == Keys.Up)            {              if (indicies[0] > 0)              {                CommitLoadOrder(indicies[0] - 1' indicies);              }            }            else            {              if (indicies[indicies.Length - 1] < lvEspList.Items.Count - 1)              {                CommitLoadOrder(indicies[indicies.Length - 1] + 2' indicies);              }            }          }        }        else if (e.KeyCode == Keys.Delete)        {          deleteToolStripMenuItem_Click(null' null);          e.Handled = true;        }
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,importLoadOrderToolStripMenuItem_Click,The following statement contains a magic number: if (ofd.ShowDialog() == DialogResult.OK)        {          var lines = File.ReadAllLines(ofd.FileName);          var active = new List<string>();          for (var i = 0; i < lines.Length; i++)          {            if (lines[i].Length < 5 || lines[i][0] != '[' || lines[i][2] != ']' || lines[i][3] != ' ')            {              MessageBox.Show("File does not appear to be an exported load order list"' "Error");              return;            }            var bactive = lines[i][1] == 'X';            lines[i] = lines[i].Substring(4).ToLowerInvariant();            if (bactive)            {              active.Add(lines[i]);            }          }            var order = new string[lvEspList.Items.Count];          var upto = 0;          foreach (var line in lines)          {            if (File.Exists(Path.Combine(Program.GameMode.PluginsPath' line)))            {              order[upto++] = line;            }          }            for (var i = 0; i < lvEspList.Items.Count; i++)          {            if (Array.IndexOf(order' lvEspList.Items[i].Text.ToLowerInvariant()) == -1)            {              order[upto++] = lvEspList.Items[i].Text;            }          }            for (var i = 0; i < order.Length; i++)          {            Program.GameMode.PluginManager.SetLoadOrder(Path.Combine(Program.GameMode.PluginsPath' order[i])' i);          }            RefreshPluginList();            RefreshingList = true;          for (var i = 0; i < lvEspList.Items.Count; i++)          {            lvEspList.Items[i].Checked = active.Contains(lvEspList.Items[i].Text.ToLowerInvariant());            if (lvEspList.Items[i].Checked)            {              Program.GameMode.PluginManager.ActivatePlugin(lvEspList.Items[i].Text);            }            else            {              Program.GameMode.PluginManager.DeactivatePlugin(lvEspList.Items[i].Text);            }          }          RefreshingList = false;        }
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,importLoadOrderToolStripMenuItem_Click,The following statement contains a magic number: if (ofd.ShowDialog() == DialogResult.OK)        {          var lines = File.ReadAllLines(ofd.FileName);          var active = new List<string>();          for (var i = 0; i < lines.Length; i++)          {            if (lines[i].Length < 5 || lines[i][0] != '[' || lines[i][2] != ']' || lines[i][3] != ' ')            {              MessageBox.Show("File does not appear to be an exported load order list"' "Error");              return;            }            var bactive = lines[i][1] == 'X';            lines[i] = lines[i].Substring(4).ToLowerInvariant();            if (bactive)            {              active.Add(lines[i]);            }          }            var order = new string[lvEspList.Items.Count];          var upto = 0;          foreach (var line in lines)          {            if (File.Exists(Path.Combine(Program.GameMode.PluginsPath' line)))            {              order[upto++] = line;            }          }            for (var i = 0; i < lvEspList.Items.Count; i++)          {            if (Array.IndexOf(order' lvEspList.Items[i].Text.ToLowerInvariant()) == -1)            {              order[upto++] = lvEspList.Items[i].Text;            }          }            for (var i = 0; i < order.Length; i++)          {            Program.GameMode.PluginManager.SetLoadOrder(Path.Combine(Program.GameMode.PluginsPath' order[i])' i);          }            RefreshPluginList();            RefreshingList = true;          for (var i = 0; i < lvEspList.Items.Count; i++)          {            lvEspList.Items[i].Checked = active.Contains(lvEspList.Items[i].Text.ToLowerInvariant());            if (lvEspList.Items[i].Checked)            {              Program.GameMode.PluginManager.ActivatePlugin(lvEspList.Items[i].Text);            }            else            {              Program.GameMode.PluginManager.DeactivatePlugin(lvEspList.Items[i].Text);            }          }          RefreshingList = false;        }
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,importLoadOrderToolStripMenuItem_Click,The following statement contains a magic number: if (ofd.ShowDialog() == DialogResult.OK)        {          var lines = File.ReadAllLines(ofd.FileName);          var active = new List<string>();          for (var i = 0; i < lines.Length; i++)          {            if (lines[i].Length < 5 || lines[i][0] != '[' || lines[i][2] != ']' || lines[i][3] != ' ')            {              MessageBox.Show("File does not appear to be an exported load order list"' "Error");              return;            }            var bactive = lines[i][1] == 'X';            lines[i] = lines[i].Substring(4).ToLowerInvariant();            if (bactive)            {              active.Add(lines[i]);            }          }            var order = new string[lvEspList.Items.Count];          var upto = 0;          foreach (var line in lines)          {            if (File.Exists(Path.Combine(Program.GameMode.PluginsPath' line)))            {              order[upto++] = line;            }          }            for (var i = 0; i < lvEspList.Items.Count; i++)          {            if (Array.IndexOf(order' lvEspList.Items[i].Text.ToLowerInvariant()) == -1)            {              order[upto++] = lvEspList.Items[i].Text;            }          }            for (var i = 0; i < order.Length; i++)          {            Program.GameMode.PluginManager.SetLoadOrder(Path.Combine(Program.GameMode.PluginsPath' order[i])' i);          }            RefreshPluginList();            RefreshingList = true;          for (var i = 0; i < lvEspList.Items.Count; i++)          {            lvEspList.Items[i].Checked = active.Contains(lvEspList.Items[i].Text.ToLowerInvariant());            if (lvEspList.Items[i].Checked)            {              Program.GameMode.PluginManager.ActivatePlugin(lvEspList.Items[i].Text);            }            else            {              Program.GameMode.PluginManager.DeactivatePlugin(lvEspList.Items[i].Text);            }          }          RefreshingList = false;        }
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,importLoadOrderToolStripMenuItem_Click,The following statement contains a magic number: if (ofd.ShowDialog() == DialogResult.OK)        {          var lines = File.ReadAllLines(ofd.FileName);          var active = new List<string>();          for (var i = 0; i < lines.Length; i++)          {            if (lines[i].Length < 5 || lines[i][0] != '[' || lines[i][2] != ']' || lines[i][3] != ' ')            {              MessageBox.Show("File does not appear to be an exported load order list"' "Error");              return;            }            var bactive = lines[i][1] == 'X';            lines[i] = lines[i].Substring(4).ToLowerInvariant();            if (bactive)            {              active.Add(lines[i]);            }          }            var order = new string[lvEspList.Items.Count];          var upto = 0;          foreach (var line in lines)          {            if (File.Exists(Path.Combine(Program.GameMode.PluginsPath' line)))            {              order[upto++] = line;            }          }            for (var i = 0; i < lvEspList.Items.Count; i++)          {            if (Array.IndexOf(order' lvEspList.Items[i].Text.ToLowerInvariant()) == -1)            {              order[upto++] = lvEspList.Items[i].Text;            }          }            for (var i = 0; i < order.Length; i++)          {            Program.GameMode.PluginManager.SetLoadOrder(Path.Combine(Program.GameMode.PluginsPath' order[i])' i);          }            RefreshPluginList();            RefreshingList = true;          for (var i = 0; i < lvEspList.Items.Count; i++)          {            lvEspList.Items[i].Checked = active.Contains(lvEspList.Items[i].Text.ToLowerInvariant());            if (lvEspList.Items[i].Checked)            {              Program.GameMode.PluginManager.ActivatePlugin(lvEspList.Items[i].Text);            }            else            {              Program.GameMode.PluginManager.DeactivatePlugin(lvEspList.Items[i].Text);            }          }          RefreshingList = false;        }
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(417' 27);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(417' 27);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(120' 90);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(120' 90);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.TabIndex = 4;
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bLaunch.Location = new System.Drawing.Point(417' 123);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bLaunch.Location = new System.Drawing.Point(417' 123);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bLaunch.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bLaunch.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmsPlugins.Size = new System.Drawing.Size(136' 114);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmsPlugins.Size = new System.Drawing.Size(136' 114);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.sendToTopToolStripMenuItem.Size = new System.Drawing.Size(135' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.sendToTopToolStripMenuItem.Size = new System.Drawing.Size(135' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.sendToBottomToolStripMenuItem.Size = new System.Drawing.Size(135' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.sendToBottomToolStripMenuItem.Size = new System.Drawing.Size(135' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.uncheckAllToolStripMenuItem.Size = new System.Drawing.Size(135' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.uncheckAllToolStripMenuItem.Size = new System.Drawing.Size(135' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkAllToolStripMenuItem.Size = new System.Drawing.Size(135' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkAllToolStripMenuItem.Size = new System.Drawing.Size(135' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.deleteToolStripMenuItem.Size = new System.Drawing.Size(135' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.deleteToolStripMenuItem.Size = new System.Drawing.Size(135' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(12' 27);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(12' 27);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(399' 562);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(399' 562);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 402;
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 11;
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lvEspList.Size = new System.Drawing.Size(399' 402);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lvEspList.Size = new System.Drawing.Size(399' 402);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 219;
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader2.Width = 87;
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rtbPluginInfo.Size = new System.Drawing.Size(399' 156);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rtbPluginInfo.Size = new System.Drawing.Size(399' 156);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bPackageManager.Location = new System.Drawing.Point(417' 152);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bPackageManager.Location = new System.Drawing.Point(417' 152);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bPackageManager.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bPackageManager.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bHelp.Location = new System.Drawing.Point(417' 288);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bHelp.Location = new System.Drawing.Point(417' 288);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bHelp.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bHelp.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bHelp.TabIndex = 8;
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bSettings.Location = new System.Drawing.Point(417' 259);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bSettings.Location = new System.Drawing.Point(417' 259);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bSettings.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bSettings.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bSettings.TabIndex = 7;
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(549' 24);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(549' 24);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.TabIndex = 9;
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.launchGameToolStripMenuItem.Size = new System.Drawing.Size(158' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.launchGameToolStripMenuItem.Size = new System.Drawing.Size(158' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.changeGameToolStripMenuItem.Size = new System.Drawing.Size(158' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.changeGameToolStripMenuItem.Size = new System.Drawing.Size(158' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.closeToolStripMenuItem.Size = new System.Drawing.Size(158' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.closeToolStripMenuItem.Size = new System.Drawing.Size(158' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolsToolStripMenuItem.Size = new System.Drawing.Size(48' 20);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolsToolStripMenuItem.Size = new System.Drawing.Size(48' 20);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.loadOrderToolStripMenuItem.Size = new System.Drawing.Size(78' 20);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.loadOrderToolStripMenuItem.Size = new System.Drawing.Size(78' 20);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.importToolStripMenuItem.Size = new System.Drawing.Size(169' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.importToolStripMenuItem.Size = new System.Drawing.Size(169' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exportToolStripMenuItem.Size = new System.Drawing.Size(169' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exportToolStripMenuItem.Size = new System.Drawing.Size(169' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.copyToClipboardToolStripMenuItem.Size = new System.Drawing.Size(169' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.copyToClipboardToolStripMenuItem.Size = new System.Drawing.Size(169' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.gameSettingsToolStripMenuItem.Size = new System.Drawing.Size(95' 20);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.gameSettingsToolStripMenuItem.Size = new System.Drawing.Size(95' 20);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.viewReadmeToolStripMenuItem.Size = new System.Drawing.Size(142' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.viewReadmeToolStripMenuItem.Size = new System.Drawing.Size(142' 22);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.butFileManager.Location = new System.Drawing.Point(417' 181);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.butFileManager.Location = new System.Drawing.Point(417' 181);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.butFileManager.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.butFileManager.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.butFileManager.TabIndex = 12;
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(549' 600);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(549' 600);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(300' 457);
Magic Number,Fomm,MainForm,C:\repos\niveuseverto_fomm\flmm\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(300' 457);
Magic Number,Fomm,Program,C:\repos\niveuseverto_fomm\flmm\Program.cs,Main,The following statement contains a magic number: do        {          if (booChangeGameMode || (booChooseGame && !Settings.Default.rememberGameMode))          {            var gmsSelector = new GameModeSelector();            gmsSelector.ShowDialog();            sgmSelectedGame = gmsSelector.SelectedGameMode;          }          switch (sgmSelectedGame)          {            case SupportedGameModes.Fallout3:              GameMode = new Fallout3GameMode();              break;              case SupportedGameModes.FalloutNV:              GameMode = new FalloutNewVegasGameMode();              break;              default:              MessageBox.Show("Unrecognized game selection."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);              return;          }            Mutex mutex;          bool booNewMutex;          string autoLoad = null;            if (!booChangeGameMode && (args.Length > 0))          {            var booArgsHandled = true;            if (!args[0].StartsWith("-") && File.Exists(args[0]))            {              switch (Path.GetExtension(args[0]).ToLowerInvariant())              {                case ".rar":                case ".7z":                case ".zip":                case ".fomod":                  mutex = new Mutex(true' "fommMainMutex"' out booNewMutex);                  mutex.Close();                  if (!booNewMutex)                  {                    Messaging.TransmitMessage(args[0]);                    return;                  }                  autoLoad = args[0];                  break;                default:                  booArgsHandled = false;                  break;              }            }            else            {              switch (args[0])              {                case "-u":                  var strGuid = args[1];                  var strPath = Environment.GetFolderPath(Environment.SpecialFolder.System);                  var psiInfo = new ProcessStartInfo(strPath + @"\msiexec.exe"' "/x " + strGuid);                  Process.Start(psiInfo);                  return;                default:                  booArgsHandled = false;                  break;              }            }            if (!booArgsHandled && GameMode.HandleStandaloneArguments(args))            {              return;            }          }            mutex = new Mutex(true' "fommMainMutex"' out booNewMutex);          if (!booNewMutex)          {            MessageBox.Show(ProgrammeAcronym + " is already running"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);            mutex.Close();            return;          }            try          {            string strErrorMessage;            if (!GameMode.SetWorkingDirectory(out strErrorMessage))            {              MessageBox.Show(null' strErrorMessage' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);              booChangeGameMode = false;              if (Settings.Default.rememberGameMode)              {                booChangeGameMode = true;                Settings.Default.rememberGameMode = false;                Settings.Default.Save();              }              continue;            }              GameMode.PreInit();              //Check that we're in fallout's directory and that we have write access            var cancellaunch = true;            if (!Settings.Default.NoUACCheck || Array.IndexOf(args' "-no-uac-check") == -1)            {              try              {                File.Delete("limited");                var strVirtualStore =                  Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)' "VirtualStore\\");                strVirtualStore = Path.Combine(strVirtualStore' Directory.GetCurrentDirectory().Remove(0' 3));                strVirtualStore = Path.Combine(strVirtualStore' "limited");                if (File.Exists(strVirtualStore))                {                  File.Delete(strVirtualStore);                }                var fs = File.Create("limited");                fs.Close();                if (File.Exists(strVirtualStore))                {                  MessageBox.Show(                    "UAC is preventing Fallout mod manager from obtaining write access to fallout's installation directory.\n" +                    "Either right click fomm.exe and check the 'run as administrator' checkbox on the comptibility tab' or disable UAC"'                    "Error");                  File.Delete("limited");                }                else                {                  File.Delete("limited");                  cancellaunch = false;                }              }              catch              {                MessageBox.Show(                  "Unable to get write permissions for:" + Environment.NewLine + GameMode.PluginsPath +                  Environment.NewLine + "Please read" + Environment.NewLine +                  Path.Combine(ProgrammeInfoDirectory' "Readme - fomm.txt") + Environment.NewLine +                  "for the solution."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);              }            }            else            {              cancellaunch = false;            }              if (cancellaunch)            {              return;            }              if (!Directory.Exists(tmpPath))            {              Directory.CreateDirectory(tmpPath);            }              var str7zPath = "";                        if (Environment.Is64BitProcess)            {              str7zPath = Path.Combine(ProgrammeInfoDirectory' "7z-64bit.dll");            }            else            {              str7zPath = Path.Combine(ProgrammeInfoDirectory' "7z-32bit.dll");            }            SevenZipBase.SetLibraryPath(str7zPath);              if (!GameMode.Init())            {              return;            }            PermissionsManager.Init();              //check to see if we need to upgrade the install log format            if (InstallLog.Current.GetInstallLogVersion() != InstallLog.CURRENT_VERSION)            {              var iluUgrader = new InstallLogUpgrader();              try              {                MessageBox.Show(                  "FOMM needs to upgrade some of its files. This could take a few minutes' depending on how many mods are installed."'                  "Upgrade Required");                if (!iluUgrader.UpgradeInstallLog())                {                  MessageBox.Show(                    "FOMM needs to upgrade its files before it can run. Please allow the upgrade to complete' or install an older version of FOMM."'                    "Upgrade Cancelled"' MessageBoxButtons.OK' MessageBoxIcon.Information);                  return;                }              }              catch (Exception e)              {                HandleException(e' "An error occurred while upgrading your log file."' "Upgrade Error");                return;              }            }              InstallLog.Reload();              //let's uninstall any fomods that have been deleted since we last ran            var lstMods = InstallLog.Current.GetVersionedModList();            foreach (var fifMod in lstMods)            {              var strFomodPath = Path.Combine(GameMode.ModDirectory' fifMod.BaseName + ".fomod");              if (!File.Exists(strFomodPath))              {                var strMessage = "'" + fifMod.BaseName + ".fomod' was deleted without being deactivated. " +                                 Environment.NewLine +                                 "If you don't uninstall the FOMod' FOMM will close and you will " +                                 "have to put the FOMod back in the mods folder." + Environment.NewLine +                                 "Would you like to uninstall the missing FOMod?";                if (MessageBox.Show(strMessage' "Missing FOMod"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) ==                    DialogResult.No)                {                  return;                }                var mduUninstaller = new ModUninstaller(fifMod.BaseName);                mduUninstaller.Uninstall(true);              }            }              try            {              //check to see if any fomod versions have changed' and whether to upgrade them              var upsScanner = new UpgradeScanner();              upsScanner.Scan();            }            catch (Exception e)            {              HandleException(e' "An error occurred while scanning your fomods for new versions."' "Scan Error");              return;            }              if (booChangeGameMode || !GameMode.HandleInAppArguments(args))            {              try              {                var frmMain = new MainForm(autoLoad);                frmMain.Text += " (" + MVersion + ") - " + GameMode.GameName;                  Application.Run(frmMain);                booChangeGameMode = frmMain.ChangeGameMode;              }              catch (Exception e)              {                HandleException(e' "Something bad seems to have happened."' "Error");              }            }              //backup the install log            if (File.Exists(InstallLog.Current.InstallLogPath))            {              var strLogPath = InstallLog.Current.InstallLogPath + ".bak";              var fifInstallLog = new FileInfo(InstallLog.Current.InstallLogPath);              FileInfo fifInstallLogBak = null;              if (File.Exists(strLogPath))              {                fifInstallLogBak = new FileInfo(strLogPath);              }                if ((fifInstallLogBak == null) || (fifInstallLogBak.LastWriteTimeUtc != fifInstallLog.LastWriteTimeUtc))              {                for (var i = 4; i > 0; i--)                {                  if (File.Exists(strLogPath + i))                  {                    File.Copy(strLogPath + i' strLogPath + (i + 1)' true);                  }                }                if (File.Exists(strLogPath))                {                  File.Copy(strLogPath' strLogPath + "1"' true);                }                File.Copy(InstallLog.Current.InstallLogPath' InstallLog.Current.InstallLogPath + ".bak"' true);              }            }              FileUtil.ForceDelete(tmpPath);          }          finally          {            if (mutex != null)            {              mutex.Close();            }          }        }        while (booChangeGameMode);
Magic Number,Fomm,Program,C:\repos\niveuseverto_fomm\flmm\Program.cs,Main,The following statement contains a magic number: do        {          if (booChangeGameMode || (booChooseGame && !Settings.Default.rememberGameMode))          {            var gmsSelector = new GameModeSelector();            gmsSelector.ShowDialog();            sgmSelectedGame = gmsSelector.SelectedGameMode;          }          switch (sgmSelectedGame)          {            case SupportedGameModes.Fallout3:              GameMode = new Fallout3GameMode();              break;              case SupportedGameModes.FalloutNV:              GameMode = new FalloutNewVegasGameMode();              break;              default:              MessageBox.Show("Unrecognized game selection."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);              return;          }            Mutex mutex;          bool booNewMutex;          string autoLoad = null;            if (!booChangeGameMode && (args.Length > 0))          {            var booArgsHandled = true;            if (!args[0].StartsWith("-") && File.Exists(args[0]))            {              switch (Path.GetExtension(args[0]).ToLowerInvariant())              {                case ".rar":                case ".7z":                case ".zip":                case ".fomod":                  mutex = new Mutex(true' "fommMainMutex"' out booNewMutex);                  mutex.Close();                  if (!booNewMutex)                  {                    Messaging.TransmitMessage(args[0]);                    return;                  }                  autoLoad = args[0];                  break;                default:                  booArgsHandled = false;                  break;              }            }            else            {              switch (args[0])              {                case "-u":                  var strGuid = args[1];                  var strPath = Environment.GetFolderPath(Environment.SpecialFolder.System);                  var psiInfo = new ProcessStartInfo(strPath + @"\msiexec.exe"' "/x " + strGuid);                  Process.Start(psiInfo);                  return;                default:                  booArgsHandled = false;                  break;              }            }            if (!booArgsHandled && GameMode.HandleStandaloneArguments(args))            {              return;            }          }            mutex = new Mutex(true' "fommMainMutex"' out booNewMutex);          if (!booNewMutex)          {            MessageBox.Show(ProgrammeAcronym + " is already running"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);            mutex.Close();            return;          }            try          {            string strErrorMessage;            if (!GameMode.SetWorkingDirectory(out strErrorMessage))            {              MessageBox.Show(null' strErrorMessage' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);              booChangeGameMode = false;              if (Settings.Default.rememberGameMode)              {                booChangeGameMode = true;                Settings.Default.rememberGameMode = false;                Settings.Default.Save();              }              continue;            }              GameMode.PreInit();              //Check that we're in fallout's directory and that we have write access            var cancellaunch = true;            if (!Settings.Default.NoUACCheck || Array.IndexOf(args' "-no-uac-check") == -1)            {              try              {                File.Delete("limited");                var strVirtualStore =                  Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)' "VirtualStore\\");                strVirtualStore = Path.Combine(strVirtualStore' Directory.GetCurrentDirectory().Remove(0' 3));                strVirtualStore = Path.Combine(strVirtualStore' "limited");                if (File.Exists(strVirtualStore))                {                  File.Delete(strVirtualStore);                }                var fs = File.Create("limited");                fs.Close();                if (File.Exists(strVirtualStore))                {                  MessageBox.Show(                    "UAC is preventing Fallout mod manager from obtaining write access to fallout's installation directory.\n" +                    "Either right click fomm.exe and check the 'run as administrator' checkbox on the comptibility tab' or disable UAC"'                    "Error");                  File.Delete("limited");                }                else                {                  File.Delete("limited");                  cancellaunch = false;                }              }              catch              {                MessageBox.Show(                  "Unable to get write permissions for:" + Environment.NewLine + GameMode.PluginsPath +                  Environment.NewLine + "Please read" + Environment.NewLine +                  Path.Combine(ProgrammeInfoDirectory' "Readme - fomm.txt") + Environment.NewLine +                  "for the solution."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);              }            }            else            {              cancellaunch = false;            }              if (cancellaunch)            {              return;            }              if (!Directory.Exists(tmpPath))            {              Directory.CreateDirectory(tmpPath);            }              var str7zPath = "";                        if (Environment.Is64BitProcess)            {              str7zPath = Path.Combine(ProgrammeInfoDirectory' "7z-64bit.dll");            }            else            {              str7zPath = Path.Combine(ProgrammeInfoDirectory' "7z-32bit.dll");            }            SevenZipBase.SetLibraryPath(str7zPath);              if (!GameMode.Init())            {              return;            }            PermissionsManager.Init();              //check to see if we need to upgrade the install log format            if (InstallLog.Current.GetInstallLogVersion() != InstallLog.CURRENT_VERSION)            {              var iluUgrader = new InstallLogUpgrader();              try              {                MessageBox.Show(                  "FOMM needs to upgrade some of its files. This could take a few minutes' depending on how many mods are installed."'                  "Upgrade Required");                if (!iluUgrader.UpgradeInstallLog())                {                  MessageBox.Show(                    "FOMM needs to upgrade its files before it can run. Please allow the upgrade to complete' or install an older version of FOMM."'                    "Upgrade Cancelled"' MessageBoxButtons.OK' MessageBoxIcon.Information);                  return;                }              }              catch (Exception e)              {                HandleException(e' "An error occurred while upgrading your log file."' "Upgrade Error");                return;              }            }              InstallLog.Reload();              //let's uninstall any fomods that have been deleted since we last ran            var lstMods = InstallLog.Current.GetVersionedModList();            foreach (var fifMod in lstMods)            {              var strFomodPath = Path.Combine(GameMode.ModDirectory' fifMod.BaseName + ".fomod");              if (!File.Exists(strFomodPath))              {                var strMessage = "'" + fifMod.BaseName + ".fomod' was deleted without being deactivated. " +                                 Environment.NewLine +                                 "If you don't uninstall the FOMod' FOMM will close and you will " +                                 "have to put the FOMod back in the mods folder." + Environment.NewLine +                                 "Would you like to uninstall the missing FOMod?";                if (MessageBox.Show(strMessage' "Missing FOMod"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) ==                    DialogResult.No)                {                  return;                }                var mduUninstaller = new ModUninstaller(fifMod.BaseName);                mduUninstaller.Uninstall(true);              }            }              try            {              //check to see if any fomod versions have changed' and whether to upgrade them              var upsScanner = new UpgradeScanner();              upsScanner.Scan();            }            catch (Exception e)            {              HandleException(e' "An error occurred while scanning your fomods for new versions."' "Scan Error");              return;            }              if (booChangeGameMode || !GameMode.HandleInAppArguments(args))            {              try              {                var frmMain = new MainForm(autoLoad);                frmMain.Text += " (" + MVersion + ") - " + GameMode.GameName;                  Application.Run(frmMain);                booChangeGameMode = frmMain.ChangeGameMode;              }              catch (Exception e)              {                HandleException(e' "Something bad seems to have happened."' "Error");              }            }              //backup the install log            if (File.Exists(InstallLog.Current.InstallLogPath))            {              var strLogPath = InstallLog.Current.InstallLogPath + ".bak";              var fifInstallLog = new FileInfo(InstallLog.Current.InstallLogPath);              FileInfo fifInstallLogBak = null;              if (File.Exists(strLogPath))              {                fifInstallLogBak = new FileInfo(strLogPath);              }                if ((fifInstallLogBak == null) || (fifInstallLogBak.LastWriteTimeUtc != fifInstallLog.LastWriteTimeUtc))              {                for (var i = 4; i > 0; i--)                {                  if (File.Exists(strLogPath + i))                  {                    File.Copy(strLogPath + i' strLogPath + (i + 1)' true);                  }                }                if (File.Exists(strLogPath))                {                  File.Copy(strLogPath' strLogPath + "1"' true);                }                File.Copy(InstallLog.Current.InstallLogPath' InstallLog.Current.InstallLogPath + ".bak"' true);              }            }              FileUtil.ForceDelete(tmpPath);          }          finally          {            if (mutex != null)            {              mutex.Close();            }          }        }        while (booChangeGameMode);
Magic Number,Fomm,Program,C:\repos\niveuseverto_fomm\flmm\Program.cs,CreateTempDirectory,The following statement contains a magic number: for (var i = 0; i < 32000; i++)        {          var tmp = Path.Combine(tmpPath' i.ToString());          if (!Directory.Exists(tmp))          {            Directory.CreateDirectory(tmp);            return tmp + Path.DirectorySeparatorChar;          }        }
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.pbProgress.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.pbProgress.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.pbProgress.Maximum = 10000;
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.pbProgress.Size = new System.Drawing.Size(255' 15);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.pbProgress.Size = new System.Drawing.Size(255' 15);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.pbRatio.Location = new System.Drawing.Point(12' 33);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.pbRatio.Location = new System.Drawing.Point(12' 33);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.pbRatio.Maximum = 10000;
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.pbRatio.Size = new System.Drawing.Size(255' 15);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.pbRatio.Size = new System.Drawing.Size(255' 15);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.lProgress.Location = new System.Drawing.Point(273' 10);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.lProgress.Location = new System.Drawing.Point(273' 10);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.lProgress.Size = new System.Drawing.Size(0' 13);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.lProgress.TabIndex = 2;
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.lRatio.Location = new System.Drawing.Point(273' 31);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.lRatio.Location = new System.Drawing.Point(273' 31);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.lRatio.Size = new System.Drawing.Size(0' 13);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.lRatio.TabIndex = 3;
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(107' 54);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(107' 54);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 4;
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(309' 88);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(309' 88);
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,ProgressForm,The following statement contains a magic number: if (!ShowRatio)        {          pbRatio.Visible = false;          lRatio.Visible = false;          pbProgress.Height += 21;          lProgress.Top += 10;        }
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,ProgressForm,The following statement contains a magic number: if (!ShowRatio)        {          pbRatio.Visible = false;          lRatio.Visible = false;          pbProgress.Height += 21;          lProgress.Top += 10;        }
Magic Number,Fomm,ProgressForm,C:\repos\niveuseverto_fomm\flmm\ProgressForm.cs,UpdateProgress,The following statement contains a magic number: lProgress.Text = ((int) (100*(float) value/pbProgress.Maximum)) + "%";
Magic Number,Fomm,TypeConverter,C:\repos\niveuseverto_fomm\flmm\TypeConverter.cs,UpdateBytes,The following statement contains a magic number: bytes[2] = tc.b3;
Magic Number,Fomm,TypeConverter,C:\repos\niveuseverto_fomm\flmm\TypeConverter.cs,UpdateBytes,The following statement contains a magic number: bytes[3] = tc.b4;
Magic Number,Fomm,TypeConverter,C:\repos\niveuseverto_fomm\flmm\TypeConverter.cs,i2h,The following statement contains a magic number: data[offset + 2] = tc.b3;
Magic Number,Fomm,TypeConverter,C:\repos\niveuseverto_fomm\flmm\TypeConverter.cs,i2h,The following statement contains a magic number: data[offset + 3] = tc.b4;
Magic Number,Fomm,TypeConverter,C:\repos\niveuseverto_fomm\flmm\TypeConverter.cs,si2h,The following statement contains a magic number: data[offset + 2] = tc.b3;
Magic Number,Fomm,TypeConverter,C:\repos\niveuseverto_fomm\flmm\TypeConverter.cs,si2h,The following statement contains a magic number: data[offset + 3] = tc.b4;
Magic Number,Fomm.Games.Fallout3.PluginFormatProviders,ColorizerPluginFormatProvider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\PluginFormatProviders\ColorizerPluginFormatProvider.cs,GetFormat,The following statement contains a magic number: switch (Program.GameMode.getPluginDependencyStatus(p_strPluginName))        {          case 1:            // Missing master            clr = Color.DarkRed;            break;            case 2:            // Present but disabled            clr = Color.DarkOrange;            break;            case 3:            // Present and active but in wrong order            clr = Color.Sienna;            break;            default:            clr = Color.Black;            break;        }
Magic Number,Fomm.Games.Fallout3.PluginFormatProviders,ColorizerPluginFormatProvider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\PluginFormatProviders\ColorizerPluginFormatProvider.cs,GetFormat,The following statement contains a magic number: switch (Program.GameMode.getPluginDependencyStatus(p_strPluginName))        {          case 1:            // Missing master            clr = Color.DarkRed;            break;            case 2:            // Present but disabled            clr = Color.DarkOrange;            break;            case 3:            // Present and active but in wrong order            clr = Color.Sienna;            break;            default:            clr = Color.Black;            break;        }
Magic Number,Fomm.Games.Fallout3,Fallout3PluginManager,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3PluginManager.cs,SetLoadOrder,The following statement contains a magic number: var dteTimestamp = new DateTime(2008' 1' 1);
Magic Number,Fomm.Games.Fallout3,Fallout3PluginManager,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3PluginManager.cs,SetLoadOrder,The following statement contains a magic number: var tspTwoMins = TimeSpan.FromMinutes(2 + p_intOrderIndex);
Magic Number,Fomm.Games.Fallout3,FOMMMigrator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\FOMMMigrator.cs,Migrate,The following statement contains a magic number: using (var tsTransaction = new TransactionScope())        {          using (m_bwdProgress = new BackgroundWorkerProgressDialog(DoMigration))          {            m_bwdProgress.OverallProgressMaximum = 3;            m_bwdProgress.OverallProgressStep = 1;            m_bwdProgress.ItemProgressStep = 1;            m_bwdProgress.OverallMessage = "Migrating...";            m_bwdProgress.WorkMethodArguments = strOldFOMMLocation;            if (m_bwdProgress.ShowDialog() == DialogResult.Cancel)            {              return false;            }          }          tsTransaction.Complete();        }
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(455' 38);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(455' 38);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(125' 17);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(125' 17);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlShadow.Location = new System.Drawing.Point(0' 36);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlShadow.Size = new System.Drawing.Size(455' 1);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlLight.Location = new System.Drawing.Point(0' 37);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlLight.Size = new System.Drawing.Size(455' 1);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.wizSetup.Location = new System.Drawing.Point(0' 38);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.wizSetup.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.wizSetup.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpDirectories.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpDirectories.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpDirectories.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.rdcDirectories.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.rdcDirectories.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(455' 345);
Magic Number,Fomm.Games.Fallout3,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(455' 345);
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following statement contains a magic number: if (Directory.Exists(DLCDirectory) && !Properties.Settings.Default.fallout3IgnoreDLC)        {          if (Program.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Anchorage.esm") && !File.Exists("data\\Anchorage - Main.bsa") &&                !File.Exists("data\\Anchorage - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Anchorage.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Anchorage - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Anchorage - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }          if (Program.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\ThePitt.esm") && !File.Exists("data\\ThePitt - Main.bsa") &&                !File.Exists("data\\ThePitt - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "ThePitt.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "ThePitt - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "ThePitt - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("Data\\BrokenSteel.esm"))            {              var files = new string[8][];              files[0] = Directory.GetFiles(DLCDirectory' "BrokenSteel.esm"' SearchOption.AllDirectories);              files[1] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Main.bsa"' SearchOption.AllDirectories);              files[2] = Directory.GetFiles(DLCDirectory' "BrokenSteel - Sounds.bsa"' SearchOption.AllDirectories);              files[3] = Directory.GetFiles(DLCDirectory' "2 weeks later.bik"' SearchOption.AllDirectories);              files[4] = Directory.GetFiles(DLCDirectory' "B09.bik"' SearchOption.AllDirectories);              files[5] = Directory.GetFiles(DLCDirectory' "B27.bik"' SearchOption.AllDirectories);              files[6] = Directory.GetFiles(DLCDirectory' "B28.bik"' SearchOption.AllDirectories);              files[7] = Directory.GetFiles(DLCDirectory' "B29.bik"' SearchOption.AllDirectories);              var missing = false;              for (var i = 0; i < 8; i++)              {                if (files[i].Length != 1)                {                  missing = true;                  break;                }                if ((i < 3 && File.Exists(Path.Combine(PluginsPath' Path.GetFileName(files[i][0])))) ||                    (i > 4 && File.Exists(Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))))))                {                  missing = true;                  break;                }              }              if (!missing)              {                switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "PointLookout.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\PointLookout.esm ") && !File.Exists("data\\PointLookout - Main.bsa") &&                !File.Exists("data\\PointLookout - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "PointLookout.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "PointLookout - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "PointLookout - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }            if (Program.GetFiles(DLCDirectory' "Zeta.esm "' SearchOption.AllDirectories).Length == 1)          {            if (!File.Exists("data\\Zeta.esm ") && !File.Exists("data\\Zeta - Main.bsa") &&                !File.Exists("data\\Zeta - Sounds.bsa"))            {              var f1 = Directory.GetFiles(DLCDirectory' "Zeta.esm"' SearchOption.AllDirectories);              var f2 = Directory.GetFiles(DLCDirectory' "Zeta - Main.bsa"' SearchOption.AllDirectories);              var f3 = Directory.GetFiles(DLCDirectory' "Zeta - Sounds.bsa"' SearchOption.AllDirectories);              if (f1.Length == 1 && f2.Length == 1 && f3.Length == 1)              {                switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3.Script,Fallout3ModInstallScript,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Script\Fallout3ModInstallScript.cs,UneditGameSpecificValue,The following statement contains a magic number: var strKey = p_strValueKey.Split(new[]        {          ':'        }' 2);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(1' 97);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(95' 13);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(95' 13);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Location = new System.Drawing.Point(102' 94);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Location = new System.Drawing.Point(102' 94);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Size = new System.Drawing.Size(236' 20);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Size = new System.Drawing.Size(236' 20);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.butSelectWorkingDirectory.Location = new System.Drawing.Point(344' 92);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.butSelectWorkingDirectory.Location = new System.Drawing.Point(344' 92);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.butSelectWorkingDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.butSelectWorkingDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.butSelectWorkingDirectory.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(16' 22);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(16' 22);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(57' 13);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(57' 13);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(24' 121);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(24' 121);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(346' 78);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(346' 78);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommandArguments.Location = new System.Drawing.Point(79' 45);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommandArguments.Location = new System.Drawing.Point(79' 45);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommandArguments.Size = new System.Drawing.Size(257' 20);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommandArguments.Size = new System.Drawing.Size(257' 20);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommandArguments.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommand.Location = new System.Drawing.Point(79' 19);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommand.Location = new System.Drawing.Point(79' 19);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommand.Size = new System.Drawing.Size(257' 20);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommand.Size = new System.Drawing.Size(257' 20);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommand.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(13' 48);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(13' 48);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(60' 13);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(60' 13);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.rdcDirectories.Location = new System.Drawing.Point(0' 3);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.rdcDirectories.Size = new System.Drawing.Size(393' 85);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.rdcDirectories.Size = new System.Drawing.Size(393' 85);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.cbxBoldifyESMs.Location = new System.Drawing.Point(24' 210);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.cbxBoldifyESMs.Location = new System.Drawing.Point(24' 210);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.cbxBoldifyESMs.Size = new System.Drawing.Size(137' 17);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.cbxBoldifyESMs.Size = new System.Drawing.Size(137' 17);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.cbxBoldifyESMs.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(403' 307);
Magic Number,Fomm.Games.Fallout3.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(403' 307);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectInfoDirectory.Location = new System.Drawing.Point(394' 57);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectInfoDirectory.Location = new System.Drawing.Point(394' 57);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectInfoDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectInfoDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectInfoDirectory.TabIndex = 12;
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(3' 43);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(3' 43);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(362' 13);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(362' 13);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 14;
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxInstallInfo.Location = new System.Drawing.Point(102' 59);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxInstallInfo.Location = new System.Drawing.Point(102' 59);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxInstallInfo.Size = new System.Drawing.Size(286' 20);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxInstallInfo.Size = new System.Drawing.Size(286' 20);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxInstallInfo.TabIndex = 10;
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(38' 62);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(38' 62);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(58' 13);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(58' 13);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 13;
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectModDirectory.Location = new System.Drawing.Point(394' 14);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectModDirectory.Location = new System.Drawing.Point(394' 14);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectModDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectModDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectModDirectory.TabIndex = 9;
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(3' 0);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(356' 13);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(356' 13);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 11;
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxModDirectory.Location = new System.Drawing.Point(102' 16);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxModDirectory.Location = new System.Drawing.Point(102' 16);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxModDirectory.Size = new System.Drawing.Size(286' 20);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxModDirectory.Size = new System.Drawing.Size(286' 20);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxModDirectory.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(20' 19);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(20' 19);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(76' 13);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(76' 13);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(443' 405);
Magic Number,Fomm.Games.Fallout3.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(443' 405);
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("Fallout - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 1);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("Fallout - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 1);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("Anchorage - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 2);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("Anchorage - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 2);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("Anchorage - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 2);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("ThePitt - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 3);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("ThePitt - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 3);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("ThePitt - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 3);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("BrokenSteel - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 4);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("BrokenSteel - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 4);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("BrokenSteel - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 4);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("PointLookout - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 5);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("PointLookout - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 5);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("PointLookout - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 5);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("Zeta - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 6);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("Zeta - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 6);        }
Magic Number,Fomm.Games.Fallout3.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("Zeta - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 6);        }
Magic Number,Fomm.Games.Fallout3.Tools,PluginConflictDetector,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\PluginConflictDetector.cs,cdrDetector_ConflictDetected,The following statement contains a magic number: switch (e.ConflictInfo.Severity)        {          case CriticalRecordInfo.ConflictSeverity.Conflict:            stbMessage.Append(@"\b \cf1 CONFLICT\cf0 :\b0  ");            intColourIndex = 2;            break;          case CriticalRecordInfo.ConflictSeverity.Warning:            stbMessage.Append(@"\b \cf2 WARNING\cf0 :\b0  ");            intColourIndex = 1;            break;          case CriticalRecordInfo.ConflictSeverity.Info:            stbMessage.Append(@"\b \cf3 INFO\cf0 :\b0  ");            intColourIndex = 0;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: cmbSort.SelectedIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,UpdateSaveList,The following statement contains a magic number: foreach (var sf in saves)        {          var lvi = new ListViewItem(sf.FileName);          lvi.ToolTipText = "Player: " + sf.Player + "\nLevel: " + sf.Level + " (" + sf.Karma + ")\nLocation: " +                            sf.Location + "\nPlay time: " + sf.Playtime +                            "\nDate saved: " + sf.saved + "\nNumber of plugins: " +                            sf.plugins.Length;          lvi.Tag = sf;          var worst = 0;          foreach (var s in sf.plugins)          {            if (Array.BinarySearch(aPlugins' s) < 0)            {              if (Array.BinarySearch(iPlugins' s) < 0)              {                worst = 2;                break;              }              worst = 1;            }          }          lvi.ImageIndex = worst;          lvSaves.Items.Add(lvi);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,UpdatePluginList,The following statement contains a magic number: foreach (var s in plugins)        {          var lvi = new ListViewItem(s);          if (Array.BinarySearch(aPlugins' s) >= 0)          {            lvi.ImageIndex = 0;          }          else if (Array.BinarySearch(iPlugins' s) >= 0)          {            lvi.ImageIndex = 1;          }          else          {            lvi.ImageIndex = 2;          }          lvPlugins.Items.Add(lvi);        }
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(49' 12);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(49' 12);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(320' 240);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(320' 240);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lName.Location = new System.Drawing.Point(12' 255);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lName.Location = new System.Drawing.Point(12' 255);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lName.Size = new System.Drawing.Size(71' 13);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lName.Size = new System.Drawing.Size(71' 13);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lLocation.Location = new System.Drawing.Point(12' 268);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lLocation.Location = new System.Drawing.Point(12' 268);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lLocation.Size = new System.Drawing.Size(82' 13);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lLocation.Size = new System.Drawing.Size(82' 13);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lDate.Location = new System.Drawing.Point(12' 281);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lDate.Location = new System.Drawing.Point(12' 281);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lDate.Size = new System.Drawing.Size(68' 13);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lDate.Size = new System.Drawing.Size(68' 13);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lDate.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(15' 297);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(15' 297);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(386' 264);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(386' 264);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 132;
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lvPlugins.Size = new System.Drawing.Size(386' 132);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lvPlugins.Size = new System.Drawing.Size(386' 132);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.SaveImageList.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.SaveImageList.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lvSaves.Size = new System.Drawing.Size(386' 128);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lvSaves.Size = new System.Drawing.Size(386' 128);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbSort.Location = new System.Drawing.Point(15' 567);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbSort.Location = new System.Drawing.Point(15' 567);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbSort.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbSort.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbSort.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.DudMenu.Size = new System.Drawing.Size(61' 4);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.DudMenu.Size = new System.Drawing.Size(61' 4);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.bExport.Location = new System.Drawing.Point(204' 567);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.bExport.Location = new System.Drawing.Point(204' 567);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.bExport.Size = new System.Drawing.Size(118' 23);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.bExport.Size = new System.Drawing.Size(118' 23);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.bExport.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(413' 596);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(413' 596);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(421' 555);
Magic Number,Fomm.Games.Fallout3.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(421' 555);
Magic Number,Fomm.Games.Fallout3.Tools.AutoSorter,LoadOrderSorter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\AutoSorter\LoadOrderSorter.cs,BuildModInfo,The following statement contains a magic number: for (var i = 0; i < mi.Length; i++)        {          var lplugin = plugins[i].ToLowerInvariant();          if (m_dicMasterList.ContainsKey(lplugin))          {            lastPos = m_dicMasterList[lplugin].id;            if (lastPos > maxPos)            {              maxPos = lastPos;            }            mi[i] = new ModInfo(plugins[i]' lastPos' true);            addcount = 1;          }          else          {            mi[i] = new ModInfo(plugins[i]' lastPos + addcount*0.001' false);            addcount++;          }        }
Magic Number,Fomm.Games.Fallout3.Tools.AutoSorter,LoadOrderSorter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\AutoSorter\LoadOrderSorter.cs,BuildModInfo,The following statement contains a magic number: for (var i = mi.Length - 1; i >= 0; i--)        {          if (mi[i].hadEntry)          {            break;          }          mi[i].id = maxPos - addcount*0.001;          addcount++;        }
Magic Number,Fomm.Games.Fallout3.Tools.AutoSorter,LoadOrderSorter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\AutoSorter\LoadOrderSorter.cs,GenerateReport,The following statement contains a magic number: var sb = new StringBuilder(plugins.Length*32);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,BSAArchive,The following statement contains a magic number: defaultCompressed = (header.archiveFlags & 4) > 0;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (file.Length > 0)        {          hash = (ulong) (            (((byte) file[file.Length - 1])*0x1) +            ((file.Length > 2 ? (byte) file[file.Length - 2] : 0)*0x100) +            (file.Length*0x10000) +            (((byte) file[0])*0x1000000)            );        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (file.Length > 0)        {          hash = (ulong) (            (((byte) file[file.Length - 1])*0x1) +            ((file.Length > 2 ? (byte) file[file.Length - 2] : 0)*0x100) +            (file.Length*0x10000) +            (((byte) file[0])*0x1000000)            );        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (file.Length > 3)        {          hash += (ulong) (GenHash2(file.Substring(1' file.Length - 3))*0x100000000);        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (file.Length > 3)        {          hash += (ulong) (GenHash2(file.Substring(1' file.Length - 3))*0x100000000);        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHash2(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;              //case ".kf": i=2; break;            case ".dds":              i = 3;              break;              //case ".wav": i=4; break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHash2(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;              //case ".kf": i=2; break;            case ".dds":              i = 3;              break;              //case ".wav": i=4; break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHash2(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;              //case ".kf": i=2; break;            case ".dds":              i = 3;              break;              //case ".wav": i=4; break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHash2(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;              //case ".kf": i=2; break;            case ".dds":              i = 3;              break;              //case ".wav": i=4; break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHash2(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;              //case ".kf": i=2; break;            case ".dds":              i = 3;              break;              //case ".wav": i=4; break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHash2(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;              //case ".kf": i=2; break;            case ".dds":              i = 3;              break;              //case ".wav": i=4; break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHash2(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;              //case ".kf": i=2; break;            case ".dds":              i = 3;              break;              //case ".wav": i=4; break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHash2(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;              //case ".kf": i=2; break;            case ".dds":              i = 3;              break;              //case ".wav": i=4; break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAFileInfo,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,BSAFileInfo,The following statement contains a magic number: if ((size & (1 << 30)) != 0)          {            size ^= 1 << 30;            compressed = !bsa.defaultCompressed;          }          else          {            compressed = bsa.defaultCompressed;          }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAFileInfo,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,BSAFileInfo,The following statement contains a magic number: if ((size & (1 << 30)) != 0)          {            size ^= 1 << 30;            compressed = !bsa.defaultCompressed;          }          else          {            compressed = bsa.defaultCompressed;          }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAFileInfo,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GetRawData,The following statement contains a magic number: if (compressed)          {            var b = new byte[size - 4];            var output = new byte[bsa.br.ReadUInt32()];            bsa.br.Read(b' 0' size - 4);              var inf = new Inflater();            inf.SetInput(b' 0' b.Length);            inf.Inflate(output);              return output;          }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAFileInfo,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GetRawData,The following statement contains a magic number: if (compressed)          {            var b = new byte[size - 4];            var output = new byte[bsa.br.ReadUInt32()];            bsa.br.Read(b' 0' size - 4);              var inf = new Inflater();            inf.SetInput(b' 0' b.Length);            inf.Inflate(output);              return output;          }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAFolderInfo4,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,BSAFolderInfo4,The following statement contains a magic number: br.BaseStream.Position += 4;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAHeader4,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,BSAHeader4,The following statement contains a magic number: br.BaseStream.Position += 4;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,SDPArchives,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GetPath,The following statement contains a magic number: return "data\\shaders\\shaderpackage" + package.ToString().PadLeft(3' '0') + ".sdp";
Magic Number,Fomm.Games.Fallout3.Tools.BSA,SDPArchives,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,ReplaceShader,The following statement contains a magic number: for (var i = 0; i < num; i++)        {          var name = br.ReadChars(0x100);          var size = br.ReadInt32();          var data = br.ReadBytes(size);            bw.Write(name);          var sname = "";          for (var i2 = 0; i2 < 100; i2++)          {            if (name[i2] == '\0')            {              break;            }            sname += name[i2];          }          if (!found && sname == shader)          {            var ccrc = new Crc32();            ccrc.Update(data);            if (crc == 0 || ccrc.Value == crc)            {              bw.Write(newdata.Length);              bw.Write(newdata);              found = true;              OldData = data;            }            else            {              bw.Write(size);              bw.Write(data);            }          }          else          {            bw.Write(size);            bw.Write(data);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,SDPArchives,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,ReplaceShader,The following statement contains a magic number: bw.Write((int) (bw.BaseStream.Length - 12));
Magic Number,Fomm.Games.Fallout3.Tools.BSA,SDPArchives,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GetShader,The following statement contains a magic number: for (var i = 0; i < num; i++)        {          var name = br.ReadChars(0x100);          var size = br.ReadInt32();          var data = br.ReadBytes(size);            var sname = "";          for (var i2 = 0; i2 < 100; i2++)          {            if (name[i2] == '\0')            {              break;            }            sname += name[i2];          }          if (!found && sname == shader)          {            found = true;            OldData = data;          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,OpenArchive,The following statement contains a magic number: try        {          br = new BinaryReader(File.OpenRead(path)' Encoding.Default);          //if(Program.ReadCString(br)!="BSA") throw new fommException("File was not a valid BSA archive");          var type = br.ReadUInt32();          var sb = new StringBuilder(64);          if (type != 0x00415342 && type != 0x00000100)          {            //Might be a fallout 2 dat            br.BaseStream.Position = br.BaseStream.Length - 8;            var TreeSize = br.ReadUInt32();            var DataSize = br.ReadUInt32();            if (DataSize != br.BaseStream.Length)            {              MessageBox.Show("File is not a valid bsa archive");              br.Close();              return;            }            br.BaseStream.Position = DataSize - TreeSize - 8;            var FileCount = br.ReadInt32();            Files = new BSAFileEntry[FileCount];            for (var i = 0; i < FileCount; i++)            {              var fileLen = br.ReadInt32();              for (var j = 0; j < fileLen; j++)              {                sb.Append(br.ReadChar());              }              var comp = br.ReadByte();              var realSize = br.ReadUInt32();              var compSize = br.ReadUInt32();              var offset = br.ReadUInt32();              if (sb[0] == '\\')              {                sb.Remove(0' 1);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' compSize' comp == 0 ? 0 : realSize);              sb.Length = 0;            }          }          else if (type == 0x0100)          {            var hashoffset = br.ReadUInt32();            var FileCount = br.ReadUInt32();            Files = new BSAFileEntry[FileCount];              var dataoffset = 12 + hashoffset + FileCount*8;            var fnameOffset1 = 12 + FileCount*8;            var fnameOffset2 = 12 + FileCount*12;              for (var i = 0; i < FileCount; i++)            {              br.BaseStream.Position = 12 + i*8;              var size = br.ReadUInt32();              var offset = br.ReadUInt32() + dataoffset;              br.BaseStream.Position = fnameOffset1 + i*4;              br.BaseStream.Position = br.ReadInt32() + fnameOffset2;                sb.Length = 0;              while (true)              {                var b = br.ReadChar();                if (b == '\0')                {                  break;                }                sb.Append(b);              }              Files[i] = new BSAFileEntry(sb.ToString()' offset' size);            }          }          else          {            var version = br.ReadInt32();            if (version != 0x67 && version != 0x68)            {              if (MessageBox.Show("This BSA archive has an unknown version number.\n" +                                  "Attempt to open anyway?"' "Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes)              {                br.Close();                return;              }            }            br.BaseStream.Position += 4;            var flags = br.ReadUInt32();            Compressed = (flags & 0x004) > 0;            if ((flags & 0x100) > 0 && version == 0x68)            {              ContainsFileNameBlobs = true;            }            else            {              ContainsFileNameBlobs = false;            }            var FolderCount = br.ReadInt32();            var FileCount = br.ReadInt32();            br.BaseStream.Position += 12;            Files = new BSAFileEntry[FileCount];            var numfiles = new int[FolderCount];            br.BaseStream.Position += 8;            for (var i = 0; i < FolderCount; i++)            {              numfiles[i] = br.ReadInt32();              br.BaseStream.Position += 12;            }            br.BaseStream.Position -= 8;            var filecount = 0;            for (var i = 0; i < FolderCount; i++)            {              int k = br.ReadByte();              while (--k > 0)              {                sb.Append(br.ReadChar());              }              br.BaseStream.Position++;              var folder = sb.ToString();              for (var j = 0; j < numfiles[i]; j++)              {                br.BaseStream.Position += 8;                var size = br.ReadUInt32();                var comp = Compressed;                if ((size & (1 << 30)) != 0)                {                  comp = !comp;                  size ^= 1 << 30;                }                Files[filecount++] = new BSAFileEntry(comp' folder' br.ReadUInt32()' size);              }              sb.Length = 0;            }            for (var i = 0; i < FileCount; i++)            {              while (true)              {                var c = br.ReadChar();                if (c == '\0')                {                  break;                }                sb.Append(c);              }              Files[i].FileName = sb.ToString();              sb.Length = 0;            }          }        }        catch (Exception ex)        {          if (br != null)          {            br.Close();          }          br = null;          MessageBox.Show("An error occured trying to open the archive.\n" + ex.Message);          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.lvFiles.Size = new System.Drawing.Size(407' 318);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.lvFiles.Size = new System.Drawing.Size(407' 318);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 375;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bOpen.Location = new System.Drawing.Point(12' 336);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bOpen.Location = new System.Drawing.Point(12' 336);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bOpen.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bOpen.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bExtractAll.Location = new System.Drawing.Point(273' 336);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bExtractAll.Location = new System.Drawing.Point(273' 336);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bExtractAll.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bExtractAll.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bExtractAll.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bExtract.Location = new System.Drawing.Point(192' 336);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bExtract.Location = new System.Drawing.Point(192' 336);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bExtract.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bExtract.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bExtract.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.cmbSortOrder.Location = new System.Drawing.Point(368' 338);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.cmbSortOrder.Location = new System.Drawing.Point(368' 338);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.cmbSortOrder.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.cmbSortOrder.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.cmbSortOrder.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.DudMenu.Size = new System.Drawing.Size(61' 4);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.DudMenu.Size = new System.Drawing.Size(61' 4);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bSort.Location = new System.Drawing.Point(495' 336);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bSort.Location = new System.Drawing.Point(495' 336);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bSort.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bSort.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bSort.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bPreview.Location = new System.Drawing.Point(111' 336);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bPreview.Location = new System.Drawing.Point(111' 336);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bPreview.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.bPreview.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Location = new System.Drawing.Point(12' 368);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Location = new System.Drawing.Point(12' 368);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Size = new System.Drawing.Size(336' 20);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Size = new System.Drawing.Size(336' 20);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(365' 371);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(365' 371);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(41' 13);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(41' 13);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.tvFolders.Size = new System.Drawing.Size(147' 318);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.tvFolders.Size = new System.Drawing.Size(147' 318);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(558' 318);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(558' 318);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 147;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 10;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.cbRegex.Location = new System.Drawing.Point(428' 370);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.cbRegex.Location = new System.Drawing.Point(428' 370);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.cbRegex.Size = new System.Drawing.Size(74' 17);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.cbRegex.Size = new System.Drawing.Size(74' 17);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.cbRegex.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(582' 400);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(582' 400);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(590' 150);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSABrowser,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(590' 150);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAFileEntry,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,Extract,The following statement contains a magic number: if (!Compressed)          {            var bytes = new byte[Size];            br.Read(bytes' 0' (int) Size);            fs.Write(bytes' 0' (int) Size);          }          else          {            var uncompressed = RealSize == 0 ? new byte[br.ReadUInt32()] : new byte[RealSize];            var compressed = new byte[Size - 4];            br.Read(compressed' 0' (int) (Size - 4));            inf.Reset();            inf.SetInput(compressed);            inf.Inflate(uncompressed);            fs.Write(uncompressed' 0' uncompressed.Length);          }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSAFileEntry,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSABrowser.cs,Extract,The following statement contains a magic number: if (!Compressed)          {            var bytes = new byte[Size];            br.Read(bytes' 0' (int) Size);            fs.Write(bytes' 0' (int) Size);          }          else          {            var uncompressed = RealSize == 0 ? new byte[br.ReadUInt32()] : new byte[RealSize];            var compressed = new byte[Size - 4];            br.Read(compressed' 0' (int) (Size - 4));            inf.Reset();            inf.SetInput(compressed);            inf.Inflate(uncompressed);            fs.Write(uncompressed' 0' uncompressed.Length);          }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (file.Length > 0)        {          hash = (ulong) (            (((byte) file[file.Length - 1])*0x1) +            ((file.Length > 2 ? (byte) file[file.Length - 2] : 0)*0x100) +            (file.Length*0x10000) +            (((byte) file[0])*0x1000000)            );        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (file.Length > 0)        {          hash = (ulong) (            (((byte) file[file.Length - 1])*0x1) +            ((file.Length > 2 ? (byte) file[file.Length - 2] : 0)*0x100) +            (file.Length*0x10000) +            (((byte) file[0])*0x1000000)            );        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (file.Length > 3)        {          hash += (ulong) (GenHashInternal(file.Substring(1' file.Length - 3))*0x100000000);        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (file.Length > 3)        {          hash += (ulong) (GenHashInternal(file.Substring(1' file.Length - 3))*0x100000000);        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHashInternal(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHashInternal(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHashInternal(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHashInternal(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHashInternal(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHashInternal(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHashInternal(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHashInternal(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHashInternal(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following statement contains a magic number: if (ext.Length > 0)        {          hash += (ulong) (GenHashInternal(ext)*0x100000000);          byte i = 0;          switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }          if (i != 0)          {            var a = (byte) (((i & 0xfc) << 5) + (byte) ((hash & 0xff000000) >> 24));            var b = (byte) (((i & 0xfe) << 6) + (byte) (hash & 0xff));            var c = (byte) ((i << 7) + (byte) ((hash & 0xff00) >> 8));            hash -= hash & 0xFF00FFFF;            hash += (uint) ((a << 24) + b + (c << 8));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CreateFileRecords,The following statement contains a magic number: foreach (ListViewItem lvi in lvFiles.Items)        {          var newfolder = Path.GetDirectoryName(lvi.Text);          if (newfolder != folder)          {            currentfolder = new FolderRecord(newfolder);            folders.Add(currentfolder);            folder = newfolder;          }          var fr = new FileRecord(lvi);          if (fr.size >= (1 << 30))          {            MessageBox.Show("Error: File '" + fr.filepath + "' is too big to store in a BSA archive");            continue;          }          files.Add(fr);          currentfolder.files.Add(fr);        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,bAddFile_Click,The following statement contains a magic number: foreach (var s in openFileDialog1.FileNames)        {          var path = s.ToLower();          /*if(path.StartsWith(Program.CurrentDir+"data\\")) {                      path=path.Substring((Program.CurrentDir+"data\\").Length);                  } else*/          path = path.StartsWith("data\\") ? path.Substring(5) : Path.GetFileName(path);          var lvi = new ListViewItem(new[]          {            path' s          });          lvFiles.Items.Add(lvi);        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: bw.Write((uint) 36);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: if (cmbCompression.SelectedIndex == 4 || cmbCompression.SelectedIndex == 5)        {          flags = 7 + 1792;          Compressed = true;        }        else        {          flags = 3 + 1792;          Compressed = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: if (cmbCompression.SelectedIndex == 4 || cmbCompression.SelectedIndex == 5)        {          flags = 7 + 1792;          Compressed = true;        }        else        {          flags = 3 + 1792;          Compressed = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: if (cmbCompression.SelectedIndex == 4 || cmbCompression.SelectedIndex == 5)        {          flags = 7 + 1792;          Compressed = true;        }        else        {          flags = 3 + 1792;          Compressed = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: if (cmbCompression.SelectedIndex == 4 || cmbCompression.SelectedIndex == 5)        {          flags = 7 + 1792;          Compressed = true;        }        else        {          flags = 3 + 1792;          Compressed = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: if (cmbCompression.SelectedIndex == 4 || cmbCompression.SelectedIndex == 5)        {          flags = 7 + 1792;          Compressed = true;        }        else        {          flags = 3 + 1792;          Compressed = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: if (cmbCompression.SelectedIndex == 4 || cmbCompression.SelectedIndex == 5)        {          flags = 7 + 1792;          Compressed = true;        }        else        {          flags = 3 + 1792;          Compressed = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: foreach (var fr in folders)        {          foreach (var fr2 in fr.files)          {            byte[] comp;            if (cmbCompression.SelectedIndex != 0 && (cmbCompression.SelectedIndex != 6 || fr2.DoCompress) &&                ((comp = CompressRecord(fr2.filepath)) != null))            {              bw.BaseStream.Position = fr2.offsetpos;              bw.Write((uint) (comp.Length + 4) | (uint) (Compressed ? 0 : (1 << 30)));              bw.Write((uint) bw.BaseStream.Length);              bw.BaseStream.Position = bw.BaseStream.Length;              bw.Write(fr2.size);              bw.Write(comp);            }            else            {              bw.BaseStream.Position = fr2.offsetpos;              bw.Write(fr2.size | (uint) (Compressed ? (1 << 30) : 0));              bw.Write((uint) bw.BaseStream.Length);              bw.BaseStream.Position = bw.BaseStream.Length;              bw.Write(File.ReadAllBytes(fr2.filepath));            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: foreach (var fr in folders)        {          foreach (var fr2 in fr.files)          {            byte[] comp;            if (cmbCompression.SelectedIndex != 0 && (cmbCompression.SelectedIndex != 6 || fr2.DoCompress) &&                ((comp = CompressRecord(fr2.filepath)) != null))            {              bw.BaseStream.Position = fr2.offsetpos;              bw.Write((uint) (comp.Length + 4) | (uint) (Compressed ? 0 : (1 << 30)));              bw.Write((uint) bw.BaseStream.Length);              bw.BaseStream.Position = bw.BaseStream.Length;              bw.Write(fr2.size);              bw.Write(comp);            }            else            {              bw.BaseStream.Position = fr2.offsetpos;              bw.Write(fr2.size | (uint) (Compressed ? (1 << 30) : 0));              bw.Write((uint) bw.BaseStream.Length);              bw.BaseStream.Position = bw.BaseStream.Length;              bw.Write(File.ReadAllBytes(fr2.filepath));            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: foreach (var fr in folders)        {          foreach (var fr2 in fr.files)          {            byte[] comp;            if (cmbCompression.SelectedIndex != 0 && (cmbCompression.SelectedIndex != 6 || fr2.DoCompress) &&                ((comp = CompressRecord(fr2.filepath)) != null))            {              bw.BaseStream.Position = fr2.offsetpos;              bw.Write((uint) (comp.Length + 4) | (uint) (Compressed ? 0 : (1 << 30)));              bw.Write((uint) bw.BaseStream.Length);              bw.BaseStream.Position = bw.BaseStream.Length;              bw.Write(fr2.size);              bw.Write(comp);            }            else            {              bw.BaseStream.Position = fr2.offsetpos;              bw.Write(fr2.size | (uint) (Compressed ? (1 << 30) : 0));              bw.Write((uint) bw.BaseStream.Length);              bw.BaseStream.Position = bw.BaseStream.Length;              bw.Write(File.ReadAllBytes(fr2.filepath));            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenerateBSA,The following statement contains a magic number: foreach (var fr in folders)        {          foreach (var fr2 in fr.files)          {            byte[] comp;            if (cmbCompression.SelectedIndex != 0 && (cmbCompression.SelectedIndex != 6 || fr2.DoCompress) &&                ((comp = CompressRecord(fr2.filepath)) != null))            {              bw.BaseStream.Position = fr2.offsetpos;              bw.Write((uint) (comp.Length + 4) | (uint) (Compressed ? 0 : (1 << 30)));              bw.Write((uint) bw.BaseStream.Length);              bw.BaseStream.Position = bw.BaseStream.Length;              bw.Write(fr2.size);              bw.Write(comp);            }            else            {              bw.BaseStream.Position = fr2.offsetpos;              bw.Write(fr2.size | (uint) (Compressed ? (1 << 30) : 0));              bw.Write((uint) bw.BaseStream.Length);              bw.BaseStream.Position = bw.BaseStream.Length;              bw.Write(File.ReadAllBytes(fr2.filepath));            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: var level = 5;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompLevel.SelectedIndex)        {          case 0:            level = 9;            break;          case 1:            level = 7;            break;          case 2:            level = 5;            break;          case 3:            level = 3;            break;          case 4:            level = 1;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompLevel.SelectedIndex)        {          case 0:            level = 9;            break;          case 1:            level = 7;            break;          case 2:            level = 5;            break;          case 3:            level = 3;            break;          case 4:            level = 1;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompLevel.SelectedIndex)        {          case 0:            level = 9;            break;          case 1:            level = 7;            break;          case 2:            level = 5;            break;          case 3:            level = 3;            break;          case 4:            level = 1;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompLevel.SelectedIndex)        {          case 0:            level = 9;            break;          case 1:            level = 7;            break;          case 2:            level = 5;            break;          case 3:            level = 3;            break;          case 4:            level = 1;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompLevel.SelectedIndex)        {          case 0:            level = 9;            break;          case 1:            level = 7;            break;          case 2:            level = 5;            break;          case 3:            level = 3;            break;          case 4:            level = 1;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompLevel.SelectedIndex)        {          case 0:            level = 9;            break;          case 1:            level = 7;            break;          case 2:            level = 5;            break;          case 3:            level = 3;            break;          case 4:            level = 1;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompLevel.SelectedIndex)        {          case 0:            level = 9;            break;          case 1:            level = 7;            break;          case 2:            level = 5;            break;          case 3:            level = 3;            break;          case 4:            level = 1;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: var Out = new byte[In.Length + 64];
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompression.SelectedIndex)        {          case 6:          case 5:            return Out;          case 4:            mul = 0.8f;            break;          case 3:            mul = 0.6f;            break;          case 2:            mul = 0.4f;            break;          case 1:            mul = 0.2f;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompression.SelectedIndex)        {          case 6:          case 5:            return Out;          case 4:            mul = 0.8f;            break;          case 3:            mul = 0.6f;            break;          case 2:            mul = 0.4f;            break;          case 1:            mul = 0.2f;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompression.SelectedIndex)        {          case 6:          case 5:            return Out;          case 4:            mul = 0.8f;            break;          case 3:            mul = 0.6f;            break;          case 2:            mul = 0.4f;            break;          case 1:            mul = 0.2f;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompression.SelectedIndex)        {          case 6:          case 5:            return Out;          case 4:            mul = 0.8f;            break;          case 3:            mul = 0.6f;            break;          case 2:            mul = 0.4f;            break;          case 1:            mul = 0.2f;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following statement contains a magic number: switch (cmbCompression.SelectedIndex)        {          case 6:          case 5:            return Out;          case 4:            mul = 0.8f;            break;          case 3:            mul = 0.6f;            break;          case 2:            mul = 0.4f;            break;          case 1:            mul = 0.2f;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,cmbCompression_SelectedIndexChanged,The following statement contains a magic number: lvFiles.CheckBoxes = cmbCompression.SelectedIndex == 6;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.lvFiles.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.lvFiles.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.lvFiles.Size = new System.Drawing.Size(507' 317);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.lvFiles.Size = new System.Drawing.Size(507' 317);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 187;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader2.Width = 264;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.DudMenu.Size = new System.Drawing.Size(61' 4);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.DudMenu.Size = new System.Drawing.Size(61' 4);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.cmbCompression.Location = new System.Drawing.Point(12' 337);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.cmbCompression.Location = new System.Drawing.Point(12' 337);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.cmbCompression.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.cmbCompression.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bCreate.Location = new System.Drawing.Point(444' 335);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bCreate.Location = new System.Drawing.Point(444' 335);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bCreate.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bCreate.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bCreate.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bAddFile.Location = new System.Drawing.Point(266' 335);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bAddFile.Location = new System.Drawing.Point(266' 335);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bAddFile.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bAddFile.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bAddFile.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bAddFolder.Location = new System.Drawing.Point(347' 335);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bAddFolder.Location = new System.Drawing.Point(347' 335);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bAddFolder.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bAddFolder.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.bAddFolder.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.cmbCompLevel.Location = new System.Drawing.Point(139' 337);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.cmbCompLevel.Location = new System.Drawing.Point(139' 337);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.cmbCompLevel.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.cmbCompLevel.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.cmbCompLevel.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(531' 371);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(531' 371);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(396' 338);
Magic Number,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(396' 338);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,ConflictDetector,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\ConflictDetector.cs,DetectConflicts,The following statement contains a magic number: for (var intIndex = 0; intIndex < p_lstOrderedPlugins.Count; intIndex++)        {          var strBasePlugin = p_lstOrderedPlugins[intIndex];          if (m_booCancelled)          {            return;          }            OnPluginProcessed();            if (SKIP_PLUGINS.Contains(strBasePlugin.ToLowerInvariant()))          {            continue;          }            var crpBasePlugin = new CriticalRecordPlugin(Path.Combine(Program.GameMode.PluginsPath' strBasePlugin)' false);          if (!crpBasePlugin.HasCriticalRecordData)          {            continue;          }          for (var i = intIndex + 1; i < p_lstOrderedPlugins.Count; i++)          {            var strPlugin = p_lstOrderedPlugins[i];            var plgPlugin = new Plugin(Path.Combine(Program.GameMode.PluginsPath' strPlugin)' false);            foreach (var uintFormId in crpBasePlugin.CriticalRecordFormIds)            {              var strMasterPlugin = crpBasePlugin.GetMaster((Int32) uintFormId >> 24) ?? strBasePlugin;              if (plgPlugin.GetMasterIndex(strMasterPlugin) < 0)              {                continue;              }              var uintAdjustedFormId = ((UInt32) plgPlugin.GetMasterIndex(strMasterPlugin) << 24);              uintAdjustedFormId = uintAdjustedFormId + (uintFormId & 0x00ffffff);              if (plgPlugin.ContainsFormId(uintAdjustedFormId))              {                OnConflictDetected(crpBasePlugin' plgPlugin' uintFormId' crpBasePlugin.GetCriticalRecordInfo(uintFormId));              }            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,ConflictDetector,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\ConflictDetector.cs,DetectConflicts,The following statement contains a magic number: for (var intIndex = 0; intIndex < p_lstOrderedPlugins.Count; intIndex++)        {          var strBasePlugin = p_lstOrderedPlugins[intIndex];          if (m_booCancelled)          {            return;          }            OnPluginProcessed();            if (SKIP_PLUGINS.Contains(strBasePlugin.ToLowerInvariant()))          {            continue;          }            var crpBasePlugin = new CriticalRecordPlugin(Path.Combine(Program.GameMode.PluginsPath' strBasePlugin)' false);          if (!crpBasePlugin.HasCriticalRecordData)          {            continue;          }          for (var i = intIndex + 1; i < p_lstOrderedPlugins.Count; i++)          {            var strPlugin = p_lstOrderedPlugins[i];            var plgPlugin = new Plugin(Path.Combine(Program.GameMode.PluginsPath' strPlugin)' false);            foreach (var uintFormId in crpBasePlugin.CriticalRecordFormIds)            {              var strMasterPlugin = crpBasePlugin.GetMaster((Int32) uintFormId >> 24) ?? strBasePlugin;              if (plgPlugin.GetMasterIndex(strMasterPlugin) < 0)              {                continue;              }              var uintAdjustedFormId = ((UInt32) plgPlugin.GetMasterIndex(strMasterPlugin) << 24);              uintAdjustedFormId = uintAdjustedFormId + (uintFormId & 0x00ffffff);              if (plgPlugin.ContainsFormId(uintAdjustedFormId))              {                OnConflictDetected(crpBasePlugin' plgPlugin' uintFormId' crpBasePlugin.GetCriticalRecordInfo(uintFormId));              }            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordPlugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordPlugin.cs,loadCriticalData,The following statement contains a magic number: foreach (var strCriticalRecord in strCriticalRecords)        {          UInt32 uintFormId;          if (            !UInt32.TryParse(strCriticalRecord.Substring(0' 8)' NumberStyles.HexNumber' null'                             out uintFormId))          {            continue;          }          var criInfo = new CriticalRecordInfo();          criInfo.Severity =            (CriticalRecordInfo.ConflictSeverity)              Int32.Parse(strCriticalRecord[9].ToString()' NumberStyles.HexNumber);          criInfo.Reason = strCriticalRecord.Substring(11);          m_dicCriticalRecords[uintFormId] = criInfo;        }
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordPlugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordPlugin.cs,loadCriticalData,The following statement contains a magic number: foreach (var strCriticalRecord in strCriticalRecords)        {          UInt32 uintFormId;          if (            !UInt32.TryParse(strCriticalRecord.Substring(0' 8)' NumberStyles.HexNumber' null'                             out uintFormId))          {            continue;          }          var criInfo = new CriticalRecordInfo();          criInfo.Severity =            (CriticalRecordInfo.ConflictSeverity)              Int32.Parse(strCriticalRecord[9].ToString()' NumberStyles.HexNumber);          criInfo.Reason = strCriticalRecord.Substring(11);          m_dicCriticalRecords[uintFormId] = criInfo;        }
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordPlugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordPlugin.cs,loadCriticalData,The following statement contains a magic number: foreach (var strCriticalRecord in strCriticalRecords)        {          UInt32 uintFormId;          if (            !UInt32.TryParse(strCriticalRecord.Substring(0' 8)' NumberStyles.HexNumber' null'                             out uintFormId))          {            continue;          }          var criInfo = new CriticalRecordInfo();          criInfo.Severity =            (CriticalRecordInfo.ConflictSeverity)              Int32.Parse(strCriticalRecord[9].ToString()' NumberStyles.HexNumber);          criInfo.Reason = strCriticalRecord.Substring(11);          m_dicCriticalRecords[uintFormId] = criInfo;        }
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordPlugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordPlugin.cs,getCriticalRecordData,The following statement contains a magic number: var uintMastersCount = (UInt32) Masters.Count << 24;
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(0' 24);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(527' 512);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(527' 512);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 390;
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.tvwRecords.Size = new System.Drawing.Size(527' 390);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.tvwRecords.Size = new System.Drawing.Size(527' 390);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxSeverity.Location = new System.Drawing.Point(394' 3);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxSeverity.Location = new System.Drawing.Point(394' 3);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxSeverity.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxSeverity.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(340' 6);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(340' 6);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(48' 13);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(48' 13);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(9' 25);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(9' 25);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(172' 13);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(172' 13);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxReason.Location = new System.Drawing.Point(12' 41);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxReason.Location = new System.Drawing.Point(12' 41);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxReason.Size = new System.Drawing.Size(503' 65);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxReason.Size = new System.Drawing.Size(503' 65);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxReason.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.ckbIsCritical.Location = new System.Drawing.Point(12' 5);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.ckbIsCritical.Location = new System.Drawing.Point(12' 5);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.ckbIsCritical.Size = new System.Drawing.Size(57' 17);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.ckbIsCritical.Size = new System.Drawing.Size(57' 17);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(527' 24);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(527' 24);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.openNewPluginToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.openNewPluginToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.saveToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.saveToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.closeToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.closeToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(527' 536);
Magic Number,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordsForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(527' 536);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,FileManager,The following statement contains a magic number: rlvOverwrites.Columns[0].Width = rlvOverwrites.ClientSize.Width - 3;
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,tvwFolders_AfterSelect,The following statement contains a magic number: foreach (var strFile in lstDirectoryFiles)        {          var lviFile = new ListViewItem(Path.GetFileName(strFile));          lviFile.Name = lviFile.Text;          lviFile.Tag = strFile;          var fliFile = new FileInfo(Path.Combine(Program.GameMode.PluginsPath' strFile));          lviFile.SubItems.Add(fliFile.CreationTime.ToString("g"));          lviFile.SubItems.Add(fliFile.LastWriteTime.ToString("g"));          if (fliFile.Exists)          {            lviFile.SubItems.Add(((Int64) Math.Ceiling(fliFile.Length/1024.0)) + " KB");            if (!imlFiles.Images.ContainsKey(fliFile.Extension))            {              imlFiles.Images.Add(fliFile.Extension' Icon.ExtractAssociatedIcon(fliFile.FullName));            }          }          else          {            lviFile.SubItems.Add("0 KB");            lviFile.Font = new Font(lviFile.Font' FontStyle.Strikeout);          }          lviFile.ImageKey = fliFile.Extension;          lvwFiles.Items.Add(lviFile);        }
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,rlvOverwrites_DragDrop,The following statement contains a magic number: if (!mirReorderer.ReorderFileInstallers(strFile' lstOrderedMods))        {          loadInstallingMods();        }        else        {          for (var i = rlvOverwrites.Items.Count - 2; i >= 0; i--)          {            rlvOverwrites.Items[i].BackColor = SystemColors.Window;          }          rlvOverwrites.Items[rlvOverwrites.Items.Count - 1].BackColor = Color.LightGreen;        }
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,rlvOverwrites_SizeChanged,The following statement contains a magic number: rlvOverwrites.Columns[0].Width = rlvOverwrites.ClientSize.Width - 3;
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(806' 466);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(806' 466);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 268;
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.tvwFolders.Location = new System.Drawing.Point(0' 28);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.tvwFolders.Size = new System.Drawing.Size(268' 438);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.tvwFolders.Size = new System.Drawing.Size(268' 438);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Size = new System.Drawing.Size(534' 466);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Size = new System.Drawing.Size(534' 466);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.SplitterDistance = 168;
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.lvwFiles.Size = new System.Drawing.Size(534' 168);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.lvwFiles.Size = new System.Drawing.Size(534' 168);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.chdName.Width = 200;
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.chdDateCreated.Width = 125;
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.chdDateModified.Width = 125;
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.chdSize.Width = 80;
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.imlFiles.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.imlFiles.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(534' 41);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(534' 41);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 0);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(329' 39);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(329' 39);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(268' 28);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(268' 28);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.radByFile.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.radByFile.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.radByFile.Size = new System.Drawing.Size(79' 25);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.radByFile.Size = new System.Drawing.Size(79' 25);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.radByMod.Location = new System.Drawing.Point(80' 3);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.radByMod.Location = new System.Drawing.Point(80' 3);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.radByMod.Size = new System.Drawing.Size(84' 25);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.radByMod.Size = new System.Drawing.Size(84' 25);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.radByMod.TabIndex = 2;
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.rlvOverwrites.Location = new System.Drawing.Point(0' 41);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.rlvOverwrites.Size = new System.Drawing.Size(534' 253);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.rlvOverwrites.Size = new System.Drawing.Size(534' 253);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.chdModName.Width = 400;
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(806' 466);
Magic Number,Fomm.FileManager,FileManager,C:\repos\niveuseverto_fomm\flmm\FileManager\FileManager.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(806' 466);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add("*"' new Operator(null' 4' "*"));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add("/"' new Operator(null' 4' "/"));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add("+"' new Operator(null' 5' "+"));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add("-"' new Operator(null' 5' "-"));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add("<"' new Operator(null' 7' "<"));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add("<="' new Operator(null' 7' "<="));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add(">="' new Operator(null' 7' ">="));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add(">"' new Operator(null' 7' ">"));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add("=="' new Operator(null' 8' "=="));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add("!="' new Operator(null' 8' "!="));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add("&&"' new Operator(null' 12' "&&"));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: biOps.Add("||"' new Operator(null' 13' "||"));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Init,The following statement contains a magic number: uniOps.Add("-"' new Operator(null' 3' "~"));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,The following statement contains a magic number: if (r is Record)        {          var r2 = (Record) r;          if (r2.descriptiveName == null)          {            return;          }          if ((r2.FormID & 0xff000000) != mask || r2.descriptiveName == null)          {            return;          }          records[(r2.FormID & 0xffffff) + id] = r2;            if (r2.Name == "QUST")          {            foreach (var sr in r2.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                if ((formid & 0xff000000) != mask)                {                  return;                }                quests.Add(new Pair<uint' Record>((formid & 0xffffff) + id' r2));              }            }          }          else if (r2.Name == "REFR" || r2.Name == "ACHR" || r2.Name == "ACRE")          {            if (r2.SubRecords.Count > 2 && r2.SubRecords[0].Name == "EDID" && r2.SubRecords[1].Name == "NAME")            {              var bytes = r2.SubRecords[1].GetReadonlyData();              var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));              if ((formid & 0xff000000) != mask)              {                return;              }              refs.Add(new Pair<uint' Record>((formid & 0xffffff) + id' r2));            }          }        }        else        {          foreach (var r2 in ((GroupRecord) r).Records)          {            RecursePlugin(r2' mask' id' records' quests' refs);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,The following statement contains a magic number: if (r is Record)        {          var r2 = (Record) r;          if (r2.descriptiveName == null)          {            return;          }          if ((r2.FormID & 0xff000000) != mask || r2.descriptiveName == null)          {            return;          }          records[(r2.FormID & 0xffffff) + id] = r2;            if (r2.Name == "QUST")          {            foreach (var sr in r2.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                if ((formid & 0xff000000) != mask)                {                  return;                }                quests.Add(new Pair<uint' Record>((formid & 0xffffff) + id' r2));              }            }          }          else if (r2.Name == "REFR" || r2.Name == "ACHR" || r2.Name == "ACRE")          {            if (r2.SubRecords.Count > 2 && r2.SubRecords[0].Name == "EDID" && r2.SubRecords[1].Name == "NAME")            {              var bytes = r2.SubRecords[1].GetReadonlyData();              var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));              if ((formid & 0xff000000) != mask)              {                return;              }              refs.Add(new Pair<uint' Record>((formid & 0xffffff) + id' r2));            }          }        }        else        {          foreach (var r2 in ((GroupRecord) r).Records)          {            RecursePlugin(r2' mask' id' records' quests' refs);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,The following statement contains a magic number: if (r is Record)        {          var r2 = (Record) r;          if (r2.descriptiveName == null)          {            return;          }          if ((r2.FormID & 0xff000000) != mask || r2.descriptiveName == null)          {            return;          }          records[(r2.FormID & 0xffffff) + id] = r2;            if (r2.Name == "QUST")          {            foreach (var sr in r2.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                if ((formid & 0xff000000) != mask)                {                  return;                }                quests.Add(new Pair<uint' Record>((formid & 0xffffff) + id' r2));              }            }          }          else if (r2.Name == "REFR" || r2.Name == "ACHR" || r2.Name == "ACRE")          {            if (r2.SubRecords.Count > 2 && r2.SubRecords[0].Name == "EDID" && r2.SubRecords[1].Name == "NAME")            {              var bytes = r2.SubRecords[1].GetReadonlyData();              var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));              if ((formid & 0xff000000) != mask)              {                return;              }              refs.Add(new Pair<uint' Record>((formid & 0xffffff) + id' r2));            }          }        }        else        {          foreach (var r2 in ((GroupRecord) r).Records)          {            RecursePlugin(r2' mask' id' records' quests' refs);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,The following statement contains a magic number: if (r is Record)        {          var r2 = (Record) r;          if (r2.descriptiveName == null)          {            return;          }          if ((r2.FormID & 0xff000000) != mask || r2.descriptiveName == null)          {            return;          }          records[(r2.FormID & 0xffffff) + id] = r2;            if (r2.Name == "QUST")          {            foreach (var sr in r2.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                if ((formid & 0xff000000) != mask)                {                  return;                }                quests.Add(new Pair<uint' Record>((formid & 0xffffff) + id' r2));              }            }          }          else if (r2.Name == "REFR" || r2.Name == "ACHR" || r2.Name == "ACRE")          {            if (r2.SubRecords.Count > 2 && r2.SubRecords[0].Name == "EDID" && r2.SubRecords[1].Name == "NAME")            {              var bytes = r2.SubRecords[1].GetReadonlyData();              var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));              if ((formid & 0xff000000) != mask)              {                return;              }              refs.Add(new Pair<uint' Record>((formid & 0xffffff) + id' r2));            }          }        }        else        {          foreach (var r2 in ((GroupRecord) r).Records)          {            RecursePlugin(r2' mask' id' records' quests' refs);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,The following statement contains a magic number: if (r is Record)        {          var r2 = (Record) r;          if (r2.descriptiveName == null)          {            return;          }          if ((r2.FormID & 0xff000000) != mask || r2.descriptiveName == null)          {            return;          }          records[(r2.FormID & 0xffffff) + id] = r2;            if (r2.Name == "QUST")          {            foreach (var sr in r2.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                if ((formid & 0xff000000) != mask)                {                  return;                }                quests.Add(new Pair<uint' Record>((formid & 0xffffff) + id' r2));              }            }          }          else if (r2.Name == "REFR" || r2.Name == "ACHR" || r2.Name == "ACRE")          {            if (r2.SubRecords.Count > 2 && r2.SubRecords[0].Name == "EDID" && r2.SubRecords[1].Name == "NAME")            {              var bytes = r2.SubRecords[1].GetReadonlyData();              var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));              if ((formid & 0xff000000) != mask)              {                return;              }              refs.Add(new Pair<uint' Record>((formid & 0xffffff) + id' r2));            }          }        }        else        {          foreach (var r2 in ((GroupRecord) r).Records)          {            RecursePlugin(r2' mask' id' records' quests' refs);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,The following statement contains a magic number: if (r is Record)        {          var r2 = (Record) r;          if (r2.descriptiveName == null)          {            return;          }          records[r2.FormID] = r2;            if (r2.Name == "QUST")          {            foreach (var sr in r2.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                quests.Add(new Pair<uint' Record>(formid' r2));              }            }          }          else if (r2.Name == "REFR" || r2.Name == "ACHR" || r2.Name == "ACRE")          {            if (r2.SubRecords.Count > 0 && r2.SubRecords[1].Name == "NAME")            {              var bytes = r2.SubRecords[1].GetReadonlyData();              var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));              refs.Add(new Pair<uint' Record>(formid' r2));            }          }        }        else        {          foreach (var r2 in ((GroupRecord) r).Records)          {            RecursePlugin(r2' records' quests' refs);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,The following statement contains a magic number: if (r is Record)        {          var r2 = (Record) r;          if (r2.descriptiveName == null)          {            return;          }          records[r2.FormID] = r2;            if (r2.Name == "QUST")          {            foreach (var sr in r2.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                quests.Add(new Pair<uint' Record>(formid' r2));              }            }          }          else if (r2.Name == "REFR" || r2.Name == "ACHR" || r2.Name == "ACRE")          {            if (r2.SubRecords.Count > 0 && r2.SubRecords[1].Name == "NAME")            {              var bytes = r2.SubRecords[1].GetReadonlyData();              var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));              refs.Add(new Pair<uint' Record>(formid' r2));            }          }        }        else        {          foreach (var r2 in ((GroupRecord) r).Records)          {            RecursePlugin(r2' records' quests' refs);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,The following statement contains a magic number: if (r is Record)        {          var r2 = (Record) r;          if (r2.descriptiveName == null)          {            return;          }          records[r2.FormID] = r2;            if (r2.Name == "QUST")          {            foreach (var sr in r2.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                quests.Add(new Pair<uint' Record>(formid' r2));              }            }          }          else if (r2.Name == "REFR" || r2.Name == "ACHR" || r2.Name == "ACRE")          {            if (r2.SubRecords.Count > 0 && r2.SubRecords[1].Name == "NAME")            {              var bytes = r2.SubRecords[1].GetReadonlyData();              var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));              refs.Add(new Pair<uint' Record>(formid' r2));            }          }        }        else        {          foreach (var r2 in ((GroupRecord) r).Records)          {            RecursePlugin(r2' records' quests' refs);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,RecursePlugin,The following statement contains a magic number: if (r is Record)        {          var r2 = (Record) r;          if (r2.descriptiveName == null)          {            return;          }          records[r2.FormID] = r2;            if (r2.Name == "QUST")          {            foreach (var sr in r2.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                quests.Add(new Pair<uint' Record>(formid' r2));              }            }          }          else if (r2.Name == "REFR" || r2.Name == "ACHR" || r2.Name == "ACRE")          {            if (r2.SubRecords.Count > 0 && r2.SubRecords[1].Name == "NAME")            {              var bytes = r2.SubRecords[1].GetReadonlyData();              var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));              refs.Add(new Pair<uint' Record>(formid' r2));            }          }        }        else        {          foreach (var r2 in ((GroupRecord) r).Records)          {            RecursePlugin(r2' records' quests' refs);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Setup,The following statement contains a magic number: for (uint i = 0; i < plugins.Length - 1; i++)        {          if (plugins[i] == null)          {            continue;          }          if (plugins[i].Records.Count == 0 || plugins[i].Records[0].Name != "TES4")          {            continue;          }          uint mask = 0;          foreach (var sr in ((Record) plugins[i].Records[0]).SubRecords)          {            if (sr.Name == "MAST")            {              mask++;            }          }          mask <<= 24;          var id = i << 24;          foreach (var r in plugins[i].Records)          {            RecursePlugin(r' mask' id' records' quests' refs);          }            foreach (var recs in refs)          {            if (RefLookupTable.ContainsKey(recs.Key) && RefLookupTable[recs.Key] != 0)            {              quests.Add(new Pair<uint' Record>(RefLookupTable[recs.Key]' recs.Value));            }            else if (records.ContainsKey(recs.Key))            {              var r = records[recs.Key];              uint formID = 0;              foreach (var sr in r.SubRecords)              {                if (sr.Name == "SCRI")                {                  var bytes = sr.GetReadonlyData();                  var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                  if ((formid & 0xff000000) == mask)                  {                    formID = (formid & 0xffffff) + id;                    break;                  }                }              }              quests.Add(new Pair<uint' Record>(formID' recs.Value));            }          }          RefLookupTable.Clear();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Setup,The following statement contains a magic number: for (uint i = 0; i < plugins.Length - 1; i++)        {          if (plugins[i] == null)          {            continue;          }          if (plugins[i].Records.Count == 0 || plugins[i].Records[0].Name != "TES4")          {            continue;          }          uint mask = 0;          foreach (var sr in ((Record) plugins[i].Records[0]).SubRecords)          {            if (sr.Name == "MAST")            {              mask++;            }          }          mask <<= 24;          var id = i << 24;          foreach (var r in plugins[i].Records)          {            RecursePlugin(r' mask' id' records' quests' refs);          }            foreach (var recs in refs)          {            if (RefLookupTable.ContainsKey(recs.Key) && RefLookupTable[recs.Key] != 0)            {              quests.Add(new Pair<uint' Record>(RefLookupTable[recs.Key]' recs.Value));            }            else if (records.ContainsKey(recs.Key))            {              var r = records[recs.Key];              uint formID = 0;              foreach (var sr in r.SubRecords)              {                if (sr.Name == "SCRI")                {                  var bytes = sr.GetReadonlyData();                  var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                  if ((formid & 0xff000000) == mask)                  {                    formID = (formid & 0xffffff) + id;                    break;                  }                }              }              quests.Add(new Pair<uint' Record>(formID' recs.Value));            }          }          RefLookupTable.Clear();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Setup,The following statement contains a magic number: for (uint i = 0; i < plugins.Length - 1; i++)        {          if (plugins[i] == null)          {            continue;          }          if (plugins[i].Records.Count == 0 || plugins[i].Records[0].Name != "TES4")          {            continue;          }          uint mask = 0;          foreach (var sr in ((Record) plugins[i].Records[0]).SubRecords)          {            if (sr.Name == "MAST")            {              mask++;            }          }          mask <<= 24;          var id = i << 24;          foreach (var r in plugins[i].Records)          {            RecursePlugin(r' mask' id' records' quests' refs);          }            foreach (var recs in refs)          {            if (RefLookupTable.ContainsKey(recs.Key) && RefLookupTable[recs.Key] != 0)            {              quests.Add(new Pair<uint' Record>(RefLookupTable[recs.Key]' recs.Value));            }            else if (records.ContainsKey(recs.Key))            {              var r = records[recs.Key];              uint formID = 0;              foreach (var sr in r.SubRecords)              {                if (sr.Name == "SCRI")                {                  var bytes = sr.GetReadonlyData();                  var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                  if ((formid & 0xff000000) == mask)                  {                    formID = (formid & 0xffffff) + id;                    break;                  }                }              }              quests.Add(new Pair<uint' Record>(formID' recs.Value));            }          }          RefLookupTable.Clear();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Setup,The following statement contains a magic number: for (uint i = 0; i < plugins.Length - 1; i++)        {          if (plugins[i] == null)          {            continue;          }          if (plugins[i].Records.Count == 0 || plugins[i].Records[0].Name != "TES4")          {            continue;          }          uint mask = 0;          foreach (var sr in ((Record) plugins[i].Records[0]).SubRecords)          {            if (sr.Name == "MAST")            {              mask++;            }          }          mask <<= 24;          var id = i << 24;          foreach (var r in plugins[i].Records)          {            RecursePlugin(r' mask' id' records' quests' refs);          }            foreach (var recs in refs)          {            if (RefLookupTable.ContainsKey(recs.Key) && RefLookupTable[recs.Key] != 0)            {              quests.Add(new Pair<uint' Record>(RefLookupTable[recs.Key]' recs.Value));            }            else if (records.ContainsKey(recs.Key))            {              var r = records[recs.Key];              uint formID = 0;              foreach (var sr in r.SubRecords)              {                if (sr.Name == "SCRI")                {                  var bytes = sr.GetReadonlyData();                  var formid = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                  if ((formid & 0xff000000) == mask)                  {                    formID = (formid & 0xffffff) + id;                    break;                  }                }              }              quests.Add(new Pair<uint' Record>(formID' recs.Value));            }          }          RefLookupTable.Clear();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Setup,The following statement contains a magic number: foreach (var recs in refs)        {          if (RefLookupTable.ContainsKey(recs.Key) && RefLookupTable[recs.Key] != 0)          {            quests.Add(new Pair<uint' Record>(RefLookupTable[recs.Key]' recs.Value));          }          else if (records.ContainsKey(recs.Key))          {            var r = records[recs.Key];            uint formID = 0;            foreach (var sr in r.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                formID = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                break;              }            }            quests.Add(new Pair<uint' Record>(formID' recs.Value));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Setup,The following statement contains a magic number: foreach (var recs in refs)        {          if (RefLookupTable.ContainsKey(recs.Key) && RefLookupTable[recs.Key] != 0)          {            quests.Add(new Pair<uint' Record>(RefLookupTable[recs.Key]' recs.Value));          }          else if (records.ContainsKey(recs.Key))          {            var r = records[recs.Key];            uint formID = 0;            foreach (var sr in r.SubRecords)            {              if (sr.Name == "SCRI")              {                var bytes = sr.GetReadonlyData();                formID = (TypeConverter.h2i(bytes[0]' bytes[1]' bytes[2]' bytes[3]));                break;              }            }            quests.Add(new Pair<uint' Record>(formID' recs.Value));          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleVariables,The following statement contains a magic number: while (smt.Length > 0 && smt[0].IsType())        {          ts.PopNextStatement();          if (smt.Length != 2 || smt[1].type != TokenType.Unknown)          {            AddError("Expected <type> <variable name>");            smt = ts.PeekNextStatement();            continue;          }          var slsd = new SubRecord();          slsd.Name = "SLSD";          var data = new byte[24];          TypeConverter.si2h(locals.Count + 1' data' 0);          if (smt[0].IsKeyword(Keywords.Int))          {            data[16] = 1;          }          slsd.SetData(data);          r.AddRecord(slsd);          var scvr = new SubRecord();          scvr.Name = "SCVR";          scvr.SetStrData(smt[1].utoken' true);          r.AddRecord(scvr);            var lv = new LocalVar(locals.Count + 1' smt[0]);          locals.Add(smt[1].token' lv);          localList.Add(lv);          ts.AddLocal(smt[1].token);            smt = ts.PeekNextStatement();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleVariables,The following statement contains a magic number: while (smt.Length > 0 && smt[0].IsType())        {          ts.PopNextStatement();          if (smt.Length != 2 || smt[1].type != TokenType.Unknown)          {            AddError("Expected <type> <variable name>");            smt = ts.PeekNextStatement();            continue;          }          var slsd = new SubRecord();          slsd.Name = "SLSD";          var data = new byte[24];          TypeConverter.si2h(locals.Count + 1' data' 0);          if (smt[0].IsKeyword(Keywords.Int))          {            data[16] = 1;          }          slsd.SetData(data);          r.AddRecord(slsd);          var scvr = new SubRecord();          scvr.Name = "SCVR";          scvr.SetStrData(smt[1].utoken' true);          r.AddRecord(scvr);            var lv = new LocalVar(locals.Count + 1' smt[0]);          locals.Add(smt[1].token' lv);          localList.Add(lv);          ts.AddLocal(smt[1].token);            smt = ts.PeekNextStatement();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleVariables,The following statement contains a magic number: while (smt.Length > 0 && smt[0].IsType())        {          ts.PopNextStatement();          if (smt.Length != 2 || smt[1].type != TokenType.Unknown)          {            AddError("Expected <type> <variable name>");            smt = ts.PeekNextStatement();            continue;          }          var slsd = new SubRecord();          slsd.Name = "SLSD";          var data = new byte[24];          TypeConverter.si2h(locals.Count + 1' data' 0);          if (smt[0].IsKeyword(Keywords.Int))          {            data[16] = 1;          }          slsd.SetData(data);          r.AddRecord(slsd);          var scvr = new SubRecord();          scvr.Name = "SCVR";          scvr.SetStrData(smt[1].utoken' true);          r.AddRecord(scvr);            var lv = new LocalVar(locals.Count + 1' smt[0]);          locals.Add(smt[1].token' lv);          localList.Add(lv);          ts.AddLocal(smt[1].token);            smt = ts.PeekNextStatement();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitBegin,The following statement contains a magic number: if (smt.Length > fs.args.Length + 2)        {          AddError("Too many arguments to 'begin' block");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitBegin,The following statement contains a magic number: if (fs.args.Length > 0)        {          Emit((ushort) (smt.Length - 2));          for (var i = 2; i < smt.Length; i++)          {            switch (fs.args[i - 2])            {              case VarType.Short:                if (smt[i].type != TokenType.Integer)                {                  AddError("Block argument: Expected short");                }                else                {                  Emit(ushort.Parse(smt[i].token));                }                break;              case VarType.Int:                if (smt[i].type != TokenType.Integer)                {                  AddError("Block argument: Expected integer");                }                else                {                  EmitByte(0x73);                  EmitLong(uint.Parse(smt[i].token));                }                break;              case VarType.Ref:                if (smt[i].type != TokenType.edid)                {                  AddError("Block argument: Expected edid");                }                else                {                  EmitRefLabel(smt[i]' RefType.Expression);                }                break;              default:                AddError("Sanity check failed. VarType of block argument was invalid");                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitBegin,The following statement contains a magic number: if (fs.args.Length > 0)        {          Emit((ushort) (smt.Length - 2));          for (var i = 2; i < smt.Length; i++)          {            switch (fs.args[i - 2])            {              case VarType.Short:                if (smt[i].type != TokenType.Integer)                {                  AddError("Block argument: Expected short");                }                else                {                  Emit(ushort.Parse(smt[i].token));                }                break;              case VarType.Int:                if (smt[i].type != TokenType.Integer)                {                  AddError("Block argument: Expected integer");                }                else                {                  EmitByte(0x73);                  EmitLong(uint.Parse(smt[i].token));                }                break;              case VarType.Ref:                if (smt[i].type != TokenType.edid)                {                  AddError("Block argument: Expected edid");                }                else                {                  EmitRefLabel(smt[i]' RefType.Expression);                }                break;              default:                AddError("Sanity check failed. VarType of block argument was invalid");                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitBegin,The following statement contains a magic number: if (fs.args.Length > 0)        {          Emit((ushort) (smt.Length - 2));          for (var i = 2; i < smt.Length; i++)          {            switch (fs.args[i - 2])            {              case VarType.Short:                if (smt[i].type != TokenType.Integer)                {                  AddError("Block argument: Expected short");                }                else                {                  Emit(ushort.Parse(smt[i].token));                }                break;              case VarType.Int:                if (smt[i].type != TokenType.Integer)                {                  AddError("Block argument: Expected integer");                }                else                {                  EmitByte(0x73);                  EmitLong(uint.Parse(smt[i].token));                }                break;              case VarType.Ref:                if (smt[i].type != TokenType.edid)                {                  AddError("Block argument: Expected edid");                }                else                {                  EmitRefLabel(smt[i]' RefType.Expression);                }                break;              default:                AddError("Sanity check failed. VarType of block argument was invalid");                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitBegin,The following statement contains a magic number: Emit((ushort) (bw.BaseStream.Length - (pos + 2)));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitExpression,The following statement contains a magic number: Emit((ushort) (bw.BaseStream.Length - (pos + 2)));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitFunctionCall,The following statement contains a magic number: if (smt.Length == 1)        {          if (fs.requiredArgs > 0)          {            AddError("Not enough arguments to function");          }          if (fs.args.Length > 0)          {            Emit(2);          }          Emit(0);          smt = new Token[0];          return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitFunctionCall,The following statement contains a magic number: while (true)        {          i++;          if (i == smt.Length)          {            if (argcount < fs.requiredArgs)            {              AddError("Not enough arguments to function. Expected " + fs.requiredArgs);            }            smt = new Token[0];            break;          }          if (smt[i].type == TokenType.Symbol)          {            if (smt[i].IsSymbol(".") && lastwasref)            {              if (i < smt.Length - 1 && farVars.ContainsKey(smt[i - 1].token))              {                i++;                EmitByte(0x73);                var vars = farVars[smt[i - 2].token];                if (!vars.ContainsKey(smt[i].token))                {                  AddError("Reference '" + smt[i - 2].utoken + "' has no variable called '" + smt[i].utoken + "'");                }                else                {                  Emit(vars[smt[i].token]);                }                continue;              }            }            else if (smt[i].IsSymbol("-") && (!expression || (argcount < fs.requiredArgs)))            {              if (i < smt.Length - 1 && (smt[i + 1].type == TokenType.Integer || smt[i + 1].type == TokenType.Float))              {                smt[i + 1] = new Token(smt[i + 1].type' "-" + smt[i + 1].token);                continue;              }            }            if (expression)            {              if (argcount < fs.requiredArgs)              {                AddError("Not enough arguments to function. Expected " + fs.requiredArgs);              }              for (var j = i; j < smt.Length; j++)              {                smt[j - i] = smt[j];              }              Array.Resize(ref smt' smt.Length - i);              break;            }            AddError("Unexpected symbol '" + smt[i].token + "' in function arguments");          }          if (argcount == fs.args.Length)          {            AddError("Too many arguments given to function. Expected " + fs.args.Length);          }          argcount++;          lastwasref = false;          switch (fs.args[argcount - 1])          {            case VarType.Axis:              switch (smt[i].token)              {                case "x":                  EmitByte((byte) 'X');                  continue;                case "y":                  EmitByte((byte) 'Y');                  continue;                case "z":                  EmitByte((byte) 'Z');                  continue;                default:                  AddError("Expected 'x'' 'y' or 'z'");                  continue;              }            case VarType.Enum:              if (smt[i].type == TokenType.Integer)              {                Emit(ushort.Parse(smt[i].token));              }              else              {                var Enum = enumList[fs.reftypes[argcount - 1]];                if (!Enum.ContainsKey(smt[i].token))                {                  AddError("'" + smt[i].token + "' is not a valid entry of the enum '" + fs.reftypes[argcount - 1] + "'");                }                else                {                  Emit(Enum[smt[i].token]);                }              }              continue;            case VarType.Short:              if (smt[i].type != TokenType.Integer)              {                AddError("Expected integer argument");              }              else              {                Emit(ushort.Parse(smt[i].token));              }              continue;            case VarType.String:              Emit((ushort) smt[i].token.Length);              bw.Write(Encoding.Default.GetBytes(smt[i].token));              continue;          }          switch (smt[i].type)          {            case TokenType.edid:              if (i == smt.Length - 1 || !smt[i + 1].IsSymbol("."))              {                if (fs.args[argcount - 1] != VarType.Ref)                {                  AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                }                if (fs.reftypes[argcount - 1] != null && fs.reftypes[argcount - 1] != edidList[smt[i].token].Value)                {                  AddError("Invalid record type at argument " + i + " of function. Expected " + fs.reftypes[argcount - 1]);                }              }              EmitRefLabel(smt[i]' RefType.Expression);              lastwasref = true;              break;            case TokenType.Local:              var vt = locals[smt[i].token];              switch (vt.type)              {                case VarType.Int:                  if (fs.args[argcount - 1] != VarType.Float && fs.args[argcount - 1] != VarType.Int)                  {                    AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                  }                  EmitByte(0x73);                  Emit((ushort) locals[smt[i].token].index);                  break;                case VarType.Float:                  if (fs.args[argcount - 1] != VarType.Float && fs.args[argcount - 1] != VarType.Int)                  {                    AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                  }                  EmitByte(0x66);                  Emit((ushort) locals[smt[i].token].index);                  break;                case VarType.Ref:                  if (fs.args[argcount - 1] != VarType.Ref)                  {                    AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                  }                  EmitRefLabel(smt[i]' RefType.Expression);                  break;              }              break;            case TokenType.Global:              if (fs.args[argcount - 1] != VarType.Float && fs.args[argcount - 1] != VarType.Int)              {                AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);              }              EmitRefLabel(smt[i]' RefType.Expression);              break;            case TokenType.Integer:              if (fs.args[argcount - 1] == VarType.Float)              {                goto case TokenType.Float;              }              if (fs.args[argcount - 1] != VarType.Int)              {                AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);              }              EmitByte(0x6e);              bw.Write(int.Parse(smt[i].token));              break;            case TokenType.Float:              if (fs.args[argcount - 1] != VarType.Float && fs.args[argcount - 1] != VarType.Int)              {                AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);              }              EmitByte(0x7a);              bw.Write(double.Parse(smt[i].token));              break;            default:              AddError("Expected <global>|<local>|<constant>");              return;          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitFunctionCall,The following statement contains a magic number: while (true)        {          i++;          if (i == smt.Length)          {            if (argcount < fs.requiredArgs)            {              AddError("Not enough arguments to function. Expected " + fs.requiredArgs);            }            smt = new Token[0];            break;          }          if (smt[i].type == TokenType.Symbol)          {            if (smt[i].IsSymbol(".") && lastwasref)            {              if (i < smt.Length - 1 && farVars.ContainsKey(smt[i - 1].token))              {                i++;                EmitByte(0x73);                var vars = farVars[smt[i - 2].token];                if (!vars.ContainsKey(smt[i].token))                {                  AddError("Reference '" + smt[i - 2].utoken + "' has no variable called '" + smt[i].utoken + "'");                }                else                {                  Emit(vars[smt[i].token]);                }                continue;              }            }            else if (smt[i].IsSymbol("-") && (!expression || (argcount < fs.requiredArgs)))            {              if (i < smt.Length - 1 && (smt[i + 1].type == TokenType.Integer || smt[i + 1].type == TokenType.Float))              {                smt[i + 1] = new Token(smt[i + 1].type' "-" + smt[i + 1].token);                continue;              }            }            if (expression)            {              if (argcount < fs.requiredArgs)              {                AddError("Not enough arguments to function. Expected " + fs.requiredArgs);              }              for (var j = i; j < smt.Length; j++)              {                smt[j - i] = smt[j];              }              Array.Resize(ref smt' smt.Length - i);              break;            }            AddError("Unexpected symbol '" + smt[i].token + "' in function arguments");          }          if (argcount == fs.args.Length)          {            AddError("Too many arguments given to function. Expected " + fs.args.Length);          }          argcount++;          lastwasref = false;          switch (fs.args[argcount - 1])          {            case VarType.Axis:              switch (smt[i].token)              {                case "x":                  EmitByte((byte) 'X');                  continue;                case "y":                  EmitByte((byte) 'Y');                  continue;                case "z":                  EmitByte((byte) 'Z');                  continue;                default:                  AddError("Expected 'x'' 'y' or 'z'");                  continue;              }            case VarType.Enum:              if (smt[i].type == TokenType.Integer)              {                Emit(ushort.Parse(smt[i].token));              }              else              {                var Enum = enumList[fs.reftypes[argcount - 1]];                if (!Enum.ContainsKey(smt[i].token))                {                  AddError("'" + smt[i].token + "' is not a valid entry of the enum '" + fs.reftypes[argcount - 1] + "'");                }                else                {                  Emit(Enum[smt[i].token]);                }              }              continue;            case VarType.Short:              if (smt[i].type != TokenType.Integer)              {                AddError("Expected integer argument");              }              else              {                Emit(ushort.Parse(smt[i].token));              }              continue;            case VarType.String:              Emit((ushort) smt[i].token.Length);              bw.Write(Encoding.Default.GetBytes(smt[i].token));              continue;          }          switch (smt[i].type)          {            case TokenType.edid:              if (i == smt.Length - 1 || !smt[i + 1].IsSymbol("."))              {                if (fs.args[argcount - 1] != VarType.Ref)                {                  AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                }                if (fs.reftypes[argcount - 1] != null && fs.reftypes[argcount - 1] != edidList[smt[i].token].Value)                {                  AddError("Invalid record type at argument " + i + " of function. Expected " + fs.reftypes[argcount - 1]);                }              }              EmitRefLabel(smt[i]' RefType.Expression);              lastwasref = true;              break;            case TokenType.Local:              var vt = locals[smt[i].token];              switch (vt.type)              {                case VarType.Int:                  if (fs.args[argcount - 1] != VarType.Float && fs.args[argcount - 1] != VarType.Int)                  {                    AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                  }                  EmitByte(0x73);                  Emit((ushort) locals[smt[i].token].index);                  break;                case VarType.Float:                  if (fs.args[argcount - 1] != VarType.Float && fs.args[argcount - 1] != VarType.Int)                  {                    AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                  }                  EmitByte(0x66);                  Emit((ushort) locals[smt[i].token].index);                  break;                case VarType.Ref:                  if (fs.args[argcount - 1] != VarType.Ref)                  {                    AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                  }                  EmitRefLabel(smt[i]' RefType.Expression);                  break;              }              break;            case TokenType.Global:              if (fs.args[argcount - 1] != VarType.Float && fs.args[argcount - 1] != VarType.Int)              {                AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);              }              EmitRefLabel(smt[i]' RefType.Expression);              break;            case TokenType.Integer:              if (fs.args[argcount - 1] == VarType.Float)              {                goto case TokenType.Float;              }              if (fs.args[argcount - 1] != VarType.Int)              {                AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);              }              EmitByte(0x6e);              bw.Write(int.Parse(smt[i].token));              break;            case TokenType.Float:              if (fs.args[argcount - 1] != VarType.Float && fs.args[argcount - 1] != VarType.Int)              {                AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);              }              EmitByte(0x7a);              bw.Write(double.Parse(smt[i].token));              break;            default:              AddError("Expected <global>|<local>|<constant>");              return;          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitFunctionCall,The following statement contains a magic number: Emit((ushort) (bw.BaseStream.Length - (pos + 2)));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitShowMessage,The following statement contains a magic number: if (smt.Length == 2)        {          Emit(0);        }        else        {          var lastwasref = false;          Emit((ushort) (smt.Length - 2));          for (var i = 2; i < smt.Length; i++)          {            if (smt[i].type == TokenType.Symbol)            {              if (smt[i].IsSymbol(".") && lastwasref)              {                if (i < smt.Length - 1 && farVars.ContainsKey(smt[i - 1].token))                {                  i++;                  EmitByte(0x73);                  var vars = farVars[smt[i - 2].token];                  if (!vars.ContainsKey(smt[i].token))                  {                    AddError("Reference '" + smt[i - 2].utoken + "' has no variable called '" + smt[i].utoken + "'");                  }                  else                  {                    Emit(vars[smt[i].token]);                  }                  continue;                }              }              else if (smt[i].IsSymbol("-"))              {                if (i < smt.Length - 1 && (smt[i + 1].type == TokenType.Integer || smt[i + 1].type == TokenType.Float))                {                  smt[i + 1] = new Token(smt[i + 1].type' "-" + smt[i + 1].token);                  continue;                }              }              AddError("Unexpected symbol '" + smt[i].token + "' in ShowMessage arguments");            }            lastwasref = false;            switch (smt[i].type)            {              case TokenType.edid:                EmitRefLabel(smt[i]' RefType.Expression);                lastwasref = true;                break;              case TokenType.Local:                var vt = locals[smt[i].token];                switch (vt.type)                {                  case VarType.Int:                    EmitByte(0x73);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Float:                    EmitByte(0x66);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Ref:                    EmitRefLabel(smt[i]' RefType.Expression);                    break;                }                break;              case TokenType.Global:                EmitRefLabel(smt[i]' RefType.Expression);                break;              case TokenType.Integer:                EmitByte(0x6e);                bw.Write(int.Parse(smt[i].token));                break;              case TokenType.Float:                EmitByte(0x7a);                bw.Write(double.Parse(smt[i].token));                break;              default:                AddError("Expected <global>|<local>|<constant>");                return;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitShowMessage,The following statement contains a magic number: if (smt.Length == 2)        {          Emit(0);        }        else        {          var lastwasref = false;          Emit((ushort) (smt.Length - 2));          for (var i = 2; i < smt.Length; i++)          {            if (smt[i].type == TokenType.Symbol)            {              if (smt[i].IsSymbol(".") && lastwasref)              {                if (i < smt.Length - 1 && farVars.ContainsKey(smt[i - 1].token))                {                  i++;                  EmitByte(0x73);                  var vars = farVars[smt[i - 2].token];                  if (!vars.ContainsKey(smt[i].token))                  {                    AddError("Reference '" + smt[i - 2].utoken + "' has no variable called '" + smt[i].utoken + "'");                  }                  else                  {                    Emit(vars[smt[i].token]);                  }                  continue;                }              }              else if (smt[i].IsSymbol("-"))              {                if (i < smt.Length - 1 && (smt[i + 1].type == TokenType.Integer || smt[i + 1].type == TokenType.Float))                {                  smt[i + 1] = new Token(smt[i + 1].type' "-" + smt[i + 1].token);                  continue;                }              }              AddError("Unexpected symbol '" + smt[i].token + "' in ShowMessage arguments");            }            lastwasref = false;            switch (smt[i].type)            {              case TokenType.edid:                EmitRefLabel(smt[i]' RefType.Expression);                lastwasref = true;                break;              case TokenType.Local:                var vt = locals[smt[i].token];                switch (vt.type)                {                  case VarType.Int:                    EmitByte(0x73);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Float:                    EmitByte(0x66);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Ref:                    EmitRefLabel(smt[i]' RefType.Expression);                    break;                }                break;              case TokenType.Global:                EmitRefLabel(smt[i]' RefType.Expression);                break;              case TokenType.Integer:                EmitByte(0x6e);                bw.Write(int.Parse(smt[i].token));                break;              case TokenType.Float:                EmitByte(0x7a);                bw.Write(double.Parse(smt[i].token));                break;              default:                AddError("Expected <global>|<local>|<constant>");                return;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitShowMessage,The following statement contains a magic number: if (smt.Length == 2)        {          Emit(0);        }        else        {          var lastwasref = false;          Emit((ushort) (smt.Length - 2));          for (var i = 2; i < smt.Length; i++)          {            if (smt[i].type == TokenType.Symbol)            {              if (smt[i].IsSymbol(".") && lastwasref)              {                if (i < smt.Length - 1 && farVars.ContainsKey(smt[i - 1].token))                {                  i++;                  EmitByte(0x73);                  var vars = farVars[smt[i - 2].token];                  if (!vars.ContainsKey(smt[i].token))                  {                    AddError("Reference '" + smt[i - 2].utoken + "' has no variable called '" + smt[i].utoken + "'");                  }                  else                  {                    Emit(vars[smt[i].token]);                  }                  continue;                }              }              else if (smt[i].IsSymbol("-"))              {                if (i < smt.Length - 1 && (smt[i + 1].type == TokenType.Integer || smt[i + 1].type == TokenType.Float))                {                  smt[i + 1] = new Token(smt[i + 1].type' "-" + smt[i + 1].token);                  continue;                }              }              AddError("Unexpected symbol '" + smt[i].token + "' in ShowMessage arguments");            }            lastwasref = false;            switch (smt[i].type)            {              case TokenType.edid:                EmitRefLabel(smt[i]' RefType.Expression);                lastwasref = true;                break;              case TokenType.Local:                var vt = locals[smt[i].token];                switch (vt.type)                {                  case VarType.Int:                    EmitByte(0x73);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Float:                    EmitByte(0x66);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Ref:                    EmitRefLabel(smt[i]' RefType.Expression);                    break;                }                break;              case TokenType.Global:                EmitRefLabel(smt[i]' RefType.Expression);                break;              case TokenType.Integer:                EmitByte(0x6e);                bw.Write(int.Parse(smt[i].token));                break;              case TokenType.Float:                EmitByte(0x7a);                bw.Write(double.Parse(smt[i].token));                break;              default:                AddError("Expected <global>|<local>|<constant>");                return;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitShowMessage,The following statement contains a magic number: if (smt.Length == 2)        {          Emit(0);        }        else        {          var lastwasref = false;          Emit((ushort) (smt.Length - 2));          for (var i = 2; i < smt.Length; i++)          {            if (smt[i].type == TokenType.Symbol)            {              if (smt[i].IsSymbol(".") && lastwasref)              {                if (i < smt.Length - 1 && farVars.ContainsKey(smt[i - 1].token))                {                  i++;                  EmitByte(0x73);                  var vars = farVars[smt[i - 2].token];                  if (!vars.ContainsKey(smt[i].token))                  {                    AddError("Reference '" + smt[i - 2].utoken + "' has no variable called '" + smt[i].utoken + "'");                  }                  else                  {                    Emit(vars[smt[i].token]);                  }                  continue;                }              }              else if (smt[i].IsSymbol("-"))              {                if (i < smt.Length - 1 && (smt[i + 1].type == TokenType.Integer || smt[i + 1].type == TokenType.Float))                {                  smt[i + 1] = new Token(smt[i + 1].type' "-" + smt[i + 1].token);                  continue;                }              }              AddError("Unexpected symbol '" + smt[i].token + "' in ShowMessage arguments");            }            lastwasref = false;            switch (smt[i].type)            {              case TokenType.edid:                EmitRefLabel(smt[i]' RefType.Expression);                lastwasref = true;                break;              case TokenType.Local:                var vt = locals[smt[i].token];                switch (vt.type)                {                  case VarType.Int:                    EmitByte(0x73);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Float:                    EmitByte(0x66);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Ref:                    EmitRefLabel(smt[i]' RefType.Expression);                    break;                }                break;              case TokenType.Global:                EmitRefLabel(smt[i]' RefType.Expression);                break;              case TokenType.Integer:                EmitByte(0x6e);                bw.Write(int.Parse(smt[i].token));                break;              case TokenType.Float:                EmitByte(0x7a);                bw.Write(double.Parse(smt[i].token));                break;              default:                AddError("Expected <global>|<local>|<constant>");                return;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitShowMessage,The following statement contains a magic number: if (smt.Length == 2)        {          Emit(0);        }        else        {          var lastwasref = false;          Emit((ushort) (smt.Length - 2));          for (var i = 2; i < smt.Length; i++)          {            if (smt[i].type == TokenType.Symbol)            {              if (smt[i].IsSymbol(".") && lastwasref)              {                if (i < smt.Length - 1 && farVars.ContainsKey(smt[i - 1].token))                {                  i++;                  EmitByte(0x73);                  var vars = farVars[smt[i - 2].token];                  if (!vars.ContainsKey(smt[i].token))                  {                    AddError("Reference '" + smt[i - 2].utoken + "' has no variable called '" + smt[i].utoken + "'");                  }                  else                  {                    Emit(vars[smt[i].token]);                  }                  continue;                }              }              else if (smt[i].IsSymbol("-"))              {                if (i < smt.Length - 1 && (smt[i + 1].type == TokenType.Integer || smt[i + 1].type == TokenType.Float))                {                  smt[i + 1] = new Token(smt[i + 1].type' "-" + smt[i + 1].token);                  continue;                }              }              AddError("Unexpected symbol '" + smt[i].token + "' in ShowMessage arguments");            }            lastwasref = false;            switch (smt[i].type)            {              case TokenType.edid:                EmitRefLabel(smt[i]' RefType.Expression);                lastwasref = true;                break;              case TokenType.Local:                var vt = locals[smt[i].token];                switch (vt.type)                {                  case VarType.Int:                    EmitByte(0x73);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Float:                    EmitByte(0x66);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Ref:                    EmitRefLabel(smt[i]' RefType.Expression);                    break;                }                break;              case TokenType.Global:                EmitRefLabel(smt[i]' RefType.Expression);                break;              case TokenType.Integer:                EmitByte(0x6e);                bw.Write(int.Parse(smt[i].token));                break;              case TokenType.Float:                EmitByte(0x7a);                bw.Write(double.Parse(smt[i].token));                break;              default:                AddError("Expected <global>|<local>|<constant>");                return;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitShowMessage,The following statement contains a magic number: Emit((ushort) (bw.BaseStream.Length - (pos + 2)));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleStatement,The following statement contains a magic number: if (smt[0].type == TokenType.Function)        {          EmitFunctionCall(ref smt' false' false);        }        else if (smt[0].IsKeyword(Keywords.ShowMessage))        {          EmitShowMessage(smt);        }        else if (smt[0].IsKeyword(Keywords.Set))        {          if (smt.Length < 4 || !(smt[2].IsKeyword(Keywords.To) || smt[2].IsSymbol(".")))          {            AddError("Expected 'set <var> to <expression>'");            return;          }          Emit(0x15);          var pos = bw.BaseStream.Length;          Emit(0);          if (smt[1].type == TokenType.Local)          {            var lv = locals[smt[1].token];            EmitByte(lv.type == VarType.Int ? (byte) 0x73 : (byte) 0x66);            Emit((ushort) lv.index);            EmitExpression(TrimStatement(smt' 3)' (lv.type == VarType.Ref) ? ExpressionType.Ref : ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.Global)          {            EmitRefLabel(smt[1]' RefType.Expression);            EmitExpression(TrimStatement(smt' 3)' ExpressionType.Numeric);          }          else if (smt[1].type == TokenType.edid && farVars.ContainsKey(smt[1].token) && smt[2].IsSymbol("."))          {            if (smt.Length < 6 || !smt[4].IsKeyword(Keywords.To))            {              AddError("Expected 'set <var> to <expression>'");              return;            }            EmitRefLabel(smt[1]' RefType.Expression);            EmitByte(0x73);            if (!farVars[smt[1].token].ContainsKey(smt[3].token))            {              AddError("Local variable '" + smt[3].token + " does not exist in quest " + smt[1].token);            }            else            {              Emit(farVars[smt[1].token][smt[3].token]);            }            EmitExpression(TrimStatement(smt' 5)' ExpressionType.If);          }          else          {            AddError("Expected set <local>|<global> to <expression>");          }          bw.BaseStream.Position = pos;          Emit((ushort) (bw.BaseStream.Length - (pos + 2)));          bw.BaseStream.Position = bw.BaseStream.Length;        }        else if (smt[0].type == TokenType.edid)        {          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else if (smt[0].type == TokenType.Local)        {          var lv = locals[smt[0].token];          if (lv.type != VarType.Ref)          {            AddError("Expected 'Set'' <function> or <ref>.<function>");            return;          }          if (smt.Length < 3 || !smt[1].IsSymbol(".") || smt[2].type != TokenType.Function)          {            AddError("Expected ref.function");            return;          }          EmitRefLabel(smt[0]' RefType.Standard);          smt = TrimStatement(smt' 2);          EmitFunctionCall(ref smt' false' true);        }        else        {          AddError("Expected 'Set'' <function> or <ref>.<function>");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleBlock,The following statement contains a magic number: var pos = bw.BaseStream.Length + 6;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleBlock,The following statement contains a magic number: if (smt.Length < 2 || !smt[0].IsKeyword(Keywords.Begin))        {          AddError("Expected 'begin <args>'");        }        else        {          EmitBegin(smt);        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleBlock,The following statement contains a magic number: while (smt.Length > 0 && !smt[0].IsKeyword(Keywords.End))        {          if (smt[0].IsFlowControl())          {            switch (smt[0].keyword)            {              case Keywords.If:              {                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x16);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);                break;              }              case Keywords.ElseIf:                if (flowControl.Count == 0)                {                  AddError("elseif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }              {                Emit(0x18);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);              }                break;              case Keywords.Else:                if (flowControl.Count == 0)                {                  AddError("else without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x17);                Emit(2);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                opcodecount.Add(0);                break;              case Keywords.EndIf:                Emit(0x19);                Emit(0);                if (flowControl.Count == 0)                {                  AddError("endif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;              case Keywords.Return:                Emit(0x1e);                Emit(0);                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;            }          }          else          {            HandleStatement(smt);            for (var i = 0; i < opcodecount.Count; i++)            {              opcodecount[i] += 1;            }          }          smt = ts.PopNextStatement();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleBlock,The following statement contains a magic number: while (smt.Length > 0 && !smt[0].IsKeyword(Keywords.End))        {          if (smt[0].IsFlowControl())          {            switch (smt[0].keyword)            {              case Keywords.If:              {                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x16);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);                break;              }              case Keywords.ElseIf:                if (flowControl.Count == 0)                {                  AddError("elseif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }              {                Emit(0x18);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);              }                break;              case Keywords.Else:                if (flowControl.Count == 0)                {                  AddError("else without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x17);                Emit(2);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                opcodecount.Add(0);                break;              case Keywords.EndIf:                Emit(0x19);                Emit(0);                if (flowControl.Count == 0)                {                  AddError("endif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;              case Keywords.Return:                Emit(0x1e);                Emit(0);                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;            }          }          else          {            HandleStatement(smt);            for (var i = 0; i < opcodecount.Count; i++)            {              opcodecount[i] += 1;            }          }          smt = ts.PopNextStatement();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleBlock,The following statement contains a magic number: while (smt.Length > 0 && !smt[0].IsKeyword(Keywords.End))        {          if (smt[0].IsFlowControl())          {            switch (smt[0].keyword)            {              case Keywords.If:              {                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x16);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);                break;              }              case Keywords.ElseIf:                if (flowControl.Count == 0)                {                  AddError("elseif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }              {                Emit(0x18);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);              }                break;              case Keywords.Else:                if (flowControl.Count == 0)                {                  AddError("else without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x17);                Emit(2);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                opcodecount.Add(0);                break;              case Keywords.EndIf:                Emit(0x19);                Emit(0);                if (flowControl.Count == 0)                {                  AddError("endif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;              case Keywords.Return:                Emit(0x1e);                Emit(0);                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;            }          }          else          {            HandleStatement(smt);            for (var i = 0; i < opcodecount.Count; i++)            {              opcodecount[i] += 1;            }          }          smt = ts.PopNextStatement();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleResultsBlock,The following statement contains a magic number: while (smt.Length > 0)        {          if (smt[0].IsKeyword(Keywords.End))          {            AddError("Keyword 'end' not valid in a results script");            return;          }          if (smt[0].IsFlowControl())          {            switch (smt[0].keyword)            {              case Keywords.If:              {                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x16);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);                break;              }              case Keywords.ElseIf:                if (flowControl.Count == 0)                {                  AddError("elseif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }              {                Emit(0x18);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);              }                break;              case Keywords.Else:                if (flowControl.Count == 0)                {                  AddError("else without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x17);                Emit(2);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                opcodecount.Add(0);                break;              case Keywords.EndIf:                Emit(0x19);                Emit(0);                if (flowControl.Count == 0)                {                  AddError("endif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;              case Keywords.Return:                Emit(0x1e);                Emit(0);                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;            }          }          else          {            HandleStatement(smt);            for (var i = 0; i < opcodecount.Count; i++)            {              opcodecount[i] += 1;            }          }          smt = ts.PopNextStatement();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleResultsBlock,The following statement contains a magic number: while (smt.Length > 0)        {          if (smt[0].IsKeyword(Keywords.End))          {            AddError("Keyword 'end' not valid in a results script");            return;          }          if (smt[0].IsFlowControl())          {            switch (smt[0].keyword)            {              case Keywords.If:              {                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x16);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);                break;              }              case Keywords.ElseIf:                if (flowControl.Count == 0)                {                  AddError("elseif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }              {                Emit(0x18);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);              }                break;              case Keywords.Else:                if (flowControl.Count == 0)                {                  AddError("else without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x17);                Emit(2);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                opcodecount.Add(0);                break;              case Keywords.EndIf:                Emit(0x19);                Emit(0);                if (flowControl.Count == 0)                {                  AddError("endif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;              case Keywords.Return:                Emit(0x1e);                Emit(0);                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;            }          }          else          {            HandleStatement(smt);            for (var i = 0; i < opcodecount.Count; i++)            {              opcodecount[i] += 1;            }          }          smt = ts.PopNextStatement();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleResultsBlock,The following statement contains a magic number: while (smt.Length > 0)        {          if (smt[0].IsKeyword(Keywords.End))          {            AddError("Keyword 'end' not valid in a results script");            return;          }          if (smt[0].IsFlowControl())          {            switch (smt[0].keyword)            {              case Keywords.If:              {                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x16);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);                break;              }              case Keywords.ElseIf:                if (flowControl.Count == 0)                {                  AddError("elseif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }              {                Emit(0x18);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);              }                break;              case Keywords.Else:                if (flowControl.Count == 0)                {                  AddError("else without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x17);                Emit(2);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                opcodecount.Add(0);                break;              case Keywords.EndIf:                Emit(0x19);                Emit(0);                if (flowControl.Count == 0)                {                  AddError("endif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;              case Keywords.Return:                Emit(0x1e);                Emit(0);                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;            }          }          else          {            HandleStatement(smt);            for (var i = 0; i < opcodecount.Count; i++)            {              opcodecount[i] += 1;            }          }          smt = ts.PopNextStatement();        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,CompileResultScript,The following statement contains a magic number: var header = new byte[20];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,CompileResultScript,The following statement contains a magic number: TypeConverter.si2h(refcount' header' 4);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,CompileResultScript,The following statement contains a magic number: TypeConverter.i2h((uint) bw.BaseStream.Length' header' 8);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,CompileResultScript,The following statement contains a magic number: TypeConverter.si2h(localList.Count' header' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,CompileResultScript,The following statement contains a magic number: TypeConverter.si2h(0x10000' header' 16);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The following statement contains a magic number: foreach (var sr2 in r2.SubRecords)        {          if (sr2.Name == "SCTX")          {            script = sr2.GetStrData();          }          if (sr2.Name == "SCHR")          {            var tmp = sr2.GetReadonlyData();            scptype = TypeConverter.h2si(tmp[16]' tmp[17]' tmp[18]' tmp[19]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The following statement contains a magic number: foreach (var sr2 in r2.SubRecords)        {          if (sr2.Name == "SCTX")          {            script = sr2.GetStrData();          }          if (sr2.Name == "SCHR")          {            var tmp = sr2.GetReadonlyData();            scptype = TypeConverter.h2si(tmp[16]' tmp[17]' tmp[18]' tmp[19]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The following statement contains a magic number: foreach (var sr2 in r2.SubRecords)        {          if (sr2.Name == "SCTX")          {            script = sr2.GetStrData();          }          if (sr2.Name == "SCHR")          {            var tmp = sr2.GetReadonlyData();            scptype = TypeConverter.h2si(tmp[16]' tmp[17]' tmp[18]' tmp[19]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The following statement contains a magic number: foreach (var sr2 in r2.SubRecords)        {          if (sr2.Name == "SCTX")          {            script = sr2.GetStrData();          }          if (sr2.Name == "SCHR")          {            var tmp = sr2.GetReadonlyData();            scptype = TypeConverter.h2si(tmp[16]' tmp[17]' tmp[18]' tmp[19]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The following statement contains a magic number: if (smt.Length != 2 || !smt[0].IsKeyword(Keywords.ScriptName) || smt[1].token == null)        {          return ReturnError("Expected 'ScriptName <edid>'"' out msg);        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The following statement contains a magic number: var header = new byte[20];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The following statement contains a magic number: TypeConverter.si2h(refcount' header' 4);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The following statement contains a magic number: TypeConverter.i2h((uint) bw.BaseStream.Length' header' 8);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The following statement contains a magic number: TypeConverter.si2h(localList.Count' header' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,Compile,The following statement contains a magic number: TypeConverter.si2h(scptype' header' 16);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,TokenStream,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\Tokenizer.cs,SafePop,The following statement contains a magic number: if (c < 32 && c != '\n')        {          AddError("There is an invalid character in the file");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,TokenStream,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\Tokenizer.cs,SafePeek,The following statement contains a magic number: if (c < 32 && c != '\n')        {          AddError("There is an invalid character in the file");        }
Magic Number,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,StartSteam,The following statement contains a magic number: if (!String.IsNullOrEmpty(strSteam))        {          try          {            var psi = new ProcessStartInfo();            psi.FileName = strSteam;            psi.WorkingDirectory = Path.GetDirectoryName(strSteam);            psi.UseShellExecute = false;              using (var fswClientBlob = new FileSystemWatcher(psi.WorkingDirectory))            {              //isn't there a more elegant way of determining if Steam has loaded'              // rather than counting how many time the ClientRegistry.blob file              // has been modified?              fswClientBlob.EnableRaisingEvents = true;              fswClientBlob.Filter = "ClientRegistry.blob";              var intSteamClientBlobChangeCount = 0;              fswClientBlob.Changed += (s' e) =>              {                intSteamClientBlobChangeCount++;              };                if (Process.Start(psi) != null)              {                for (var i = 0; i < 120 && intSteamClientBlobChangeCount < 4; i++)                {                  Thread.Sleep(500);                }                if (intSteamClientBlobChangeCount >= 4)                {                  return true;                }              }            }          }          catch (Exception) {}        }
Magic Number,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,StartSteam,The following statement contains a magic number: if (!String.IsNullOrEmpty(strSteam))        {          try          {            var psi = new ProcessStartInfo();            psi.FileName = strSteam;            psi.WorkingDirectory = Path.GetDirectoryName(strSteam);            psi.UseShellExecute = false;              using (var fswClientBlob = new FileSystemWatcher(psi.WorkingDirectory))            {              //isn't there a more elegant way of determining if Steam has loaded'              // rather than counting how many time the ClientRegistry.blob file              // has been modified?              fswClientBlob.EnableRaisingEvents = true;              fswClientBlob.Filter = "ClientRegistry.blob";              var intSteamClientBlobChangeCount = 0;              fswClientBlob.Changed += (s' e) =>              {                intSteamClientBlobChangeCount++;              };                if (Process.Start(psi) != null)              {                for (var i = 0; i < 120 && intSteamClientBlobChangeCount < 4; i++)                {                  Thread.Sleep(500);                }                if (intSteamClientBlobChangeCount >= 4)                {                  return true;                }              }            }          }          catch (Exception) {}        }
Magic Number,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,StartSteam,The following statement contains a magic number: if (!String.IsNullOrEmpty(strSteam))        {          try          {            var psi = new ProcessStartInfo();            psi.FileName = strSteam;            psi.WorkingDirectory = Path.GetDirectoryName(strSteam);            psi.UseShellExecute = false;              using (var fswClientBlob = new FileSystemWatcher(psi.WorkingDirectory))            {              //isn't there a more elegant way of determining if Steam has loaded'              // rather than counting how many time the ClientRegistry.blob file              // has been modified?              fswClientBlob.EnableRaisingEvents = true;              fswClientBlob.Filter = "ClientRegistry.blob";              var intSteamClientBlobChangeCount = 0;              fswClientBlob.Changed += (s' e) =>              {                intSteamClientBlobChangeCount++;              };                if (Process.Start(psi) != null)              {                for (var i = 0; i < 120 && intSteamClientBlobChangeCount < 4; i++)                {                  Thread.Sleep(500);                }                if (intSteamClientBlobChangeCount >= 4)                {                  return true;                }              }            }          }          catch (Exception) {}        }
Magic Number,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,StartSteam,The following statement contains a magic number: if (!String.IsNullOrEmpty(strSteam))        {          try          {            var psi = new ProcessStartInfo();            psi.FileName = strSteam;            psi.WorkingDirectory = Path.GetDirectoryName(strSteam);            psi.UseShellExecute = false;              using (var fswClientBlob = new FileSystemWatcher(psi.WorkingDirectory))            {              //isn't there a more elegant way of determining if Steam has loaded'              // rather than counting how many time the ClientRegistry.blob file              // has been modified?              fswClientBlob.EnableRaisingEvents = true;              fswClientBlob.Filter = "ClientRegistry.blob";              var intSteamClientBlobChangeCount = 0;              fswClientBlob.Changed += (s' e) =>              {                intSteamClientBlobChangeCount++;              };                if (Process.Start(psi) != null)              {                for (var i = 0; i < 120 && intSteamClientBlobChangeCount < 4; i++)                {                  Thread.Sleep(500);                }                if (intSteamClientBlobChangeCount >= 4)                {                  return true;                }              }            }          }          catch (Exception) {}        }
Magic Number,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,GetSteamAppId,The following statement contains a magic number: foreach (var strKeyName in strNames)        {          if (strKeyName.StartsWith("steam app"' StringComparison.InvariantCultureIgnoreCase))          {            var strDisplayName = (string) keyUninstall.OpenSubKey(strKeyName).GetValue("Displayname");            if ("fallout: new vegas".Equals(strDisplayName' StringComparison.InvariantCultureIgnoreCase))            {              int intAppId;              if (Int32.TryParse(strKeyName.Split(' ')[2]' out intAppId))              {                return intAppId;              }            }          }        }
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(455' 38);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(455' 38);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(207' 17);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(207' 17);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlShadow.Location = new System.Drawing.Point(0' 36);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlShadow.Size = new System.Drawing.Size(455' 1);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlLight.Location = new System.Drawing.Point(0' 37);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlLight.Size = new System.Drawing.Size(455' 1);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.wizSetup.Location = new System.Drawing.Point(0' 38);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.wizSetup.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.wizSetup.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpDirectories.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpDirectories.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpDirectories.TabIndex = 2;
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.rdcDirectories.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.rdcDirectories.Size = new System.Drawing.Size(455' 307);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(455' 345);
Magic Number,Fomm.Games.FalloutNewVegas,SetupForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(455' 345);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 97);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 97);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(110' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(110' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Location = new System.Drawing.Point(119' 94);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Location = new System.Drawing.Point(119' 94);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.butSelectWorkingDirectory.Location = new System.Drawing.Point(344' 92);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.butSelectWorkingDirectory.Location = new System.Drawing.Point(344' 92);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.butSelectWorkingDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.butSelectWorkingDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.butSelectWorkingDirectory.TabIndex = 2;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(16' 22);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(16' 22);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(57' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(57' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 6;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(24' 121);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(24' 121);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(346' 78);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(346' 78);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 3;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommandArguments.Location = new System.Drawing.Point(79' 45);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommandArguments.Location = new System.Drawing.Point(79' 45);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommandArguments.Size = new System.Drawing.Size(257' 20);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommandArguments.Size = new System.Drawing.Size(257' 20);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommandArguments.TabIndex = 5;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommand.Location = new System.Drawing.Point(79' 19);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommand.Location = new System.Drawing.Point(79' 19);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommand.Size = new System.Drawing.Size(257' 20);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommand.Size = new System.Drawing.Size(257' 20);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.tbxCommand.TabIndex = 4;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(13' 48);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(13' 48);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(60' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(60' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 7;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.rdcDirectories.Location = new System.Drawing.Point(0' 3);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.rdcDirectories.Size = new System.Drawing.Size(393' 85);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.rdcDirectories.Size = new System.Drawing.Size(393' 85);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.cbxBoldifyESMs.Location = new System.Drawing.Point(24' 210);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.cbxBoldifyESMs.Location = new System.Drawing.Point(24' 210);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.cbxBoldifyESMs.Size = new System.Drawing.Size(137' 17);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.cbxBoldifyESMs.Size = new System.Drawing.Size(137' 17);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.cbxBoldifyESMs.TabIndex = 5;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(403' 295);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,GeneralSettingsPage,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\GeneralSettingsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(403' 295);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectInfoDirectory.Location = new System.Drawing.Point(394' 57);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectInfoDirectory.Location = new System.Drawing.Point(394' 57);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectInfoDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectInfoDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectInfoDirectory.TabIndex = 12;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(3' 43);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(3' 43);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(374' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(374' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 14;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxInstallInfo.Location = new System.Drawing.Point(102' 59);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxInstallInfo.Location = new System.Drawing.Point(102' 59);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxInstallInfo.Size = new System.Drawing.Size(286' 20);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxInstallInfo.Size = new System.Drawing.Size(286' 20);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxInstallInfo.TabIndex = 10;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(38' 62);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(38' 62);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(58' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(58' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 13;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectModDirectory.Location = new System.Drawing.Point(394' 14);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectModDirectory.Location = new System.Drawing.Point(394' 14);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectModDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectModDirectory.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.butSelectModDirectory.TabIndex = 9;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(3' 0);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(368' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(368' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 11;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxModDirectory.Location = new System.Drawing.Point(102' 16);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxModDirectory.Location = new System.Drawing.Point(102' 16);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxModDirectory.Size = new System.Drawing.Size(286' 20);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxModDirectory.Size = new System.Drawing.Size(286' 20);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.tbxModDirectory.TabIndex = 7;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(20' 19);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(20' 19);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(76' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(76' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 8;
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(443' 405);
Magic Number,Fomm.Games.FalloutNewVegas.Settings,RequiredDirectoriesControl,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Settings\RequiredDirectoriesControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(443' 405);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("Fallout - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 1);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("Fallout - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 1);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("ClassicPack - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 1);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,ArchiveInvalidation,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\ArchiveInvalidation.cs,ApplyAI,The following statement contains a magic number: foreach (var fi in new DirectoryInfo(Program.GameMode.PluginsPath).GetFiles("ClassicPack - *.bsa"))        {          fi.LastWriteTime = new DateTime(2008' 10' 1);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: cmbSort.SelectedIndex = 3;
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,SaveForm,The following statement contains a magic number: foreach (var file in Directory.GetFiles(Program.GameMode.SavesPath))        {          BinaryReader br;          SaveFile sf;          try          {            br = new BinaryReader(File.OpenRead(file));          }          catch          {            continue;          }          try          {            if (br.BaseStream.Length < 12)            {              br.Close();              continue;            }            var str = "";            for (var i = 0; i < 11; i++)            {              str += (char) br.ReadByte();            }            if (str != "FO3SAVEGAME")            {              br.Close();              continue;            }            sf = new SaveFile();            sf.saved = (new FileInfo(file)).LastWriteTime;            sf.FileName = Path.GetFileName(file);            br.BaseStream.Position += 9;              for (var i = 0; i < 64; i++)            {              sf.Language += (char) br.ReadByte();            }            sf.Language = sf.Language.Trim('\0');            br.ReadByte();              sf.ImageWidth = br.ReadInt32();            br.ReadByte();            sf.ImageHeight = br.ReadInt32();            br.ReadByte();            br.ReadInt32();            br.ReadByte();            var s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Player += (char) br.ReadByte();            }            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Karma += (char) br.ReadByte();            }            br.ReadByte();            sf.Level = br.ReadInt32();            br.ReadByte();            s = br.ReadInt16();            br.ReadByte();            for (var i = 0; i < s; i++)            {              sf.Location += (char) br.ReadByte();            }            br.ReadInt32(); //|<short>|            for (var i = 0; i < 3; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " hours' ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " minutes and ";            br.ReadByte();            for (var i = 0; i < 2; i++)            {              sf.Playtime += (char) br.ReadByte();            }            sf.Playtime += " seconds";            br.ReadByte();              sf.ImageData = new byte[sf.ImageHeight*sf.ImageWidth*3];            br.Read(sf.ImageData' 0' sf.ImageData.Length);            //Flip the blue and red channels            for (var i = 0; i < sf.ImageWidth*sf.ImageHeight; i++)            {              var temp = sf.ImageData[i*3];              sf.ImageData[i*3] = sf.ImageData[i*3 + 2];              sf.ImageData[i*3 + 2] = temp;            }            br.ReadByte();            br.ReadInt32();            sf.plugins = new string[br.ReadByte()];            for (var i = 0; i < sf.plugins.Length; i++)            {              br.ReadByte();              s = br.ReadInt16();              br.ReadByte();              sf.plugins[i] = "";              for (var j = 0; j < s; j++)              {                sf.plugins[i] += (char) br.ReadByte();              }            }          }          catch (Exception)          {            continue;          }          finally          {            br.Close();          }          saves.Add(sf);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,UpdateSaveList,The following statement contains a magic number: foreach (var sf in saves)        {          var lvi = new ListViewItem(sf.FileName);          lvi.ToolTipText = "Player: " + sf.Player + "\nLevel: " + sf.Level + " (" + sf.Karma + ")\nLocation: " +                            sf.Location + "\nPlay time: " + sf.Playtime +                            "\nDate saved: " + sf.saved + "\nNumber of plugins: " +                            sf.plugins.Length;          lvi.Tag = sf;          var worst = 0;          foreach (var s in sf.plugins)          {            if (Array.BinarySearch(aPlugins' s) < 0)            {              if (Array.BinarySearch(iPlugins' s) < 0)              {                worst = 2;                break;              }              worst = 1;            }          }          lvi.ImageIndex = worst;          lvSaves.Items.Add(lvi);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,UpdatePluginList,The following statement contains a magic number: foreach (var s in plugins)        {          var lvi = new ListViewItem(s);          if (Array.BinarySearch(aPlugins' s) >= 0)          {            lvi.ImageIndex = 0;          }          else if (Array.BinarySearch(iPlugins' s) >= 0)          {            lvi.ImageIndex = 1;          }          else          {            lvi.ImageIndex = 2;          }          lvPlugins.Items.Add(lvi);        }
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(49' 12);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(49' 12);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(320' 240);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(320' 240);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lName.Location = new System.Drawing.Point(12' 255);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lName.Location = new System.Drawing.Point(12' 255);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lName.Size = new System.Drawing.Size(71' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lName.Size = new System.Drawing.Size(71' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lLocation.Location = new System.Drawing.Point(12' 268);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lLocation.Location = new System.Drawing.Point(12' 268);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lLocation.Size = new System.Drawing.Size(82' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lLocation.Size = new System.Drawing.Size(82' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lDate.Location = new System.Drawing.Point(12' 281);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lDate.Location = new System.Drawing.Point(12' 281);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lDate.Size = new System.Drawing.Size(68' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lDate.Size = new System.Drawing.Size(68' 13);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lDate.TabIndex = 2;
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(15' 297);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(15' 297);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(386' 264);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(386' 264);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 132;
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 6;
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lvPlugins.Size = new System.Drawing.Size(386' 132);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lvPlugins.Size = new System.Drawing.Size(386' 132);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.SaveImageList.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.SaveImageList.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lvSaves.Size = new System.Drawing.Size(386' 128);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.lvSaves.Size = new System.Drawing.Size(386' 128);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbSort.Location = new System.Drawing.Point(15' 567);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbSort.Location = new System.Drawing.Point(15' 567);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbSort.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbSort.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbSort.TabIndex = 3;
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.DudMenu.Size = new System.Drawing.Size(61' 4);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.DudMenu.Size = new System.Drawing.Size(61' 4);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.bExport.Location = new System.Drawing.Point(204' 567);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.bExport.Location = new System.Drawing.Point(204' 567);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.bExport.Size = new System.Drawing.Size(118' 23);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.bExport.Size = new System.Drawing.Size(118' 23);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.bExport.TabIndex = 7;
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(413' 596);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(413' 596);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(421' 555);
Magic Number,Fomm.Games.FalloutNewVegas.Tools,SaveForm,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Tools\SaveForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(421' 555);
Magic Number,Fomm.Games,GameMode,C:\repos\niveuseverto_fomm\flmm\Games\GameMode.cs,getPluginDependencyStatus,The following statement contains a magic number: if (PluginManager.IsPluginActive(Path.Combine(Program.GameMode.PluginsPath' name)))        {          // Get the list of masters of the queried plugin          var plgPlugin = new Plugin(Path.Combine(Program.GameMode.PluginsPath' name)' true);          var masters = new List<string>();          foreach (var sr in ((Record) plgPlugin.Records[0]).SubRecords)          {            switch (sr.Name)            {              case "MAST":                masters.Add(sr.GetStrData().ToLower());                break;            }          }            int i;          for (i = 0; i < masters.Count; i++)          {            if (fullModList.ContainsKey(masters[i]))            {              if (fullModList[masters[i]].active)              {                if (fullModList[masters[i]].idx > fullModList[name.ToLower()].idx)                {                  // Master present and active but in wrong order.                  ret = 3;                  if (showMessage)                  {                    MessageBox.Show("The plugin '" + name + "'  is being loaded before its master '" + masters[i] +                                    "'.  Fix the load order to continue.");                  }                  break;                }              }              else              {                // Master present but inactive                ret = 2;                if (showMessage)                {                  MessageBox.Show("The plugin '" + name + "'  requires master '" + masters[i] +                                  "' To be active.  Activate it or disable this plugin.");                }                break;              }            }            else            {              // Missing master file              ret = 1;              if (showMessage)              {                MessageBox.Show("The plugin '" + name + "' is missing a master' '" + masters[i] +                                "' which it requires.  Deactivate this plugin' or install and activate the missing master.");              }              break;            }          }        }
Magic Number,Fomm.Games,GameMode,C:\repos\niveuseverto_fomm\flmm\Games\GameMode.cs,getPluginDependencyStatus,The following statement contains a magic number: if (PluginManager.IsPluginActive(Path.Combine(Program.GameMode.PluginsPath' name)))        {          // Get the list of masters of the queried plugin          var plgPlugin = new Plugin(Path.Combine(Program.GameMode.PluginsPath' name)' true);          var masters = new List<string>();          foreach (var sr in ((Record) plgPlugin.Records[0]).SubRecords)          {            switch (sr.Name)            {              case "MAST":                masters.Add(sr.GetStrData().ToLower());                break;            }          }            int i;          for (i = 0; i < masters.Count; i++)          {            if (fullModList.ContainsKey(masters[i]))            {              if (fullModList[masters[i]].active)              {                if (fullModList[masters[i]].idx > fullModList[name.ToLower()].idx)                {                  // Master present and active but in wrong order.                  ret = 3;                  if (showMessage)                  {                    MessageBox.Show("The plugin '" + name + "'  is being loaded before its master '" + masters[i] +                                    "'.  Fix the load order to continue.");                  }                  break;                }              }              else              {                // Master present but inactive                ret = 2;                if (showMessage)                {                  MessageBox.Show("The plugin '" + name + "'  requires master '" + masters[i] +                                  "' To be active.  Activate it or disable this plugin.");                }                break;              }            }            else            {              // Missing master file              ret = 1;              if (showMessage)              {                MessageBox.Show("The plugin '" + name + "' is missing a master' '" + masters[i] +                                "' which it requires.  Deactivate this plugin' or install and activate the missing master.");              }              break;            }          }        }
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Location = new System.Drawing.Point(24' 19);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Location = new System.Drawing.Point(24' 19);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Size = new System.Drawing.Size(519' 20);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxWorkingDirectory.Size = new System.Drawing.Size(519' 20);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 3);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 3);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butSelect.Location = new System.Drawing.Point(549' 17);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butSelect.Location = new System.Drawing.Point(549' 17);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butSelect.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butSelect.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(419' 74);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(419' 74);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.TabIndex = 3;
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(500' 74);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(500' 74);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.TabIndex = 4;
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butAutoDetect.Location = new System.Drawing.Point(500' 45);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butAutoDetect.Location = new System.Drawing.Point(500' 45);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butAutoDetect.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butAutoDetect.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.butAutoDetect.TabIndex = 2;
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Padding = new System.Windows.Forms.Padding(12' 9' 12' 3);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Padding = new System.Windows.Forms.Padding(12' 9' 12' 3);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Padding = new System.Windows.Forms.Padding(12' 9' 12' 3);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Padding = new System.Windows.Forms.Padding(12' 9' 12' 3);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(587' 30);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(587' 30);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 7;
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(0' 30);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(587' 109);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(587' 109);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.TabIndex = 8;
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel1.Size = new System.Drawing.Size(563' 18);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel1.Size = new System.Drawing.Size(563' 18);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(587' 139);
Magic Number,Fomm.Games,WorkingDirectorySelectionForm,C:\repos\niveuseverto_fomm\flmm\Games\WorkingDirectorySelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(587' 139);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadGeneralValues,The following statement contains a magic number: for (var i = 2; i < Math.Max(4' intAliasingSamples) + 1; i += 2)        {          cbiAliasing = new ComboBoxItem(i + " Samples"' i);          cbxAntialiasing.Items.Add(cbiAliasing);        }
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadGeneralValues,The following statement contains a magic number: for (var i = 2; i < Math.Max(4' intAliasingSamples) + 1; i += 2)        {          cbiAliasing = new ComboBoxItem(i + " Samples"' i);          cbxAntialiasing.Items.Add(cbiAliasing);        }
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadGeneralValues,The following statement contains a magic number: for (var i = 2; i < Math.Max(4' intAliasingSamples) + 1; i += 2)        {          cbiAliasing = new ComboBoxItem(i + " Samples"' i);          cbxAntialiasing.Items.Add(cbiAliasing);        }
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadGeneralValues,The following statement contains a magic number: cbxAntialiasing.SelectedIndex = intAliasingSamples/2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadGeneralValues,The following statement contains a magic number: for (var i = 2; i < Math.Max(15' intAnisoSamples) + 1; i++)        {          cbiAniso = new ComboBoxItem(i + " Samples"' i);          cbxAnisotropic.Items.Add(cbiAniso);        }
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadGeneralValues,The following statement contains a magic number: for (var i = 2; i < Math.Max(15' intAnisoSamples) + 1; i++)        {          cbiAniso = new ComboBoxItem(i + " Samples"' i);          cbxAnisotropic.Items.Add(cbiAniso);        }
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadViewDistanceValues,The following statement contains a magic number: oslGrassFade.Value =          NativeMethods.GetPrivateProfileIntA("Grass"' "fGrassStartFadeDistance"' 0'                                              ((Fallout3GameMode.SettingsFilesSet) Program.GameMode.SettingsFiles)                                                .FOPrefsIniPath)/1000;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadViewDistanceValues,The following statement contains a magic number: oslSpecularityFade.Value =          NativeMethods.GetPrivateProfileIntA("Display"' "fSpecularLODStartFade"' 0'                                              ((Fallout3GameMode.SettingsFilesSet) Program.GameMode.SettingsFiles)                                                .FOPrefsIniPath)/100;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadViewDistanceValues,The following statement contains a magic number: oslLightFade.Value =          NativeMethods.GetPrivateProfileIntA("Display"' "fLightLODStartFade"' 0'                                              ((Fallout3GameMode.SettingsFilesSet) Program.GameMode.SettingsFiles)                                                .FOPrefsIniPath)/100;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadViewDistanceValues,The following statement contains a magic number: oslShadowFade.Value =          NativeMethods.GetPrivateProfileIntA("Display"' "fShadowLODStartFade"' 0'                                              ((Fallout3GameMode.SettingsFilesSet) Program.GameMode.SettingsFiles)                                                .FOPrefsIniPath)/100;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadDistantLODValues,The following statement contains a magic number: oslTreeLODFade.Value =          NativeMethods.GetPrivateProfileIntA("TerrainManager"' "fTreeLoadDistance"' 0'                                              ((Fallout3GameMode.SettingsFilesSet) Program.GameMode.SettingsFiles)                                                .FOPrefsIniPath)/1000;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadDistantLODValues,The following statement contains a magic number: oslObjectLODFade.Value =          NativeMethods.GetPrivateProfileIntA("TerrainManager"' "fBlockLoadDistanceLow"' 0'                                              ((Fallout3GameMode.SettingsFilesSet) Program.GameMode.SettingsFiles)                                                .FOPrefsIniPath)/1000;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadDistantLODValues,The following statement contains a magic number: oslLandQuality.Value = dcmValue*100;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,LoadResolutions,The following statement contains a magic number: while (EnumDisplaySettings(null' intEnumCounter' ref vDevMode))        {          var dblRatio = vDevMode.dmPelsWidth/(double) vDevMode.dmPelsHeight;          var cbiResolution =            new ComboBoxItem(String.Format("{0}x{1}"' vDevMode.dmPelsWidth' vDevMode.dmPelsHeight));          cbiResolution.Value = new[]          {            vDevMode.dmPelsWidth' vDevMode.dmPelsHeight          };          if ((!cbxResolution.Items.Contains(cbiResolution)) && (Math.Abs(dblRatio - p_dblSelectedRatio) < 0.001))          {            var intIndex = cbxResolution.Items.Add(cbiResolution);            if (cbiResolution.Equals(p_strCurrentRes))            {              cbxResolution.SelectedIndex = intIndex;            }          }          intEnumCounter++;        }
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxResolution.Location = new System.Drawing.Point(123' 73);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxResolution.Location = new System.Drawing.Point(123' 73);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxResolution.Size = new System.Drawing.Size(333' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxResolution.Size = new System.Drawing.Size(333' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxResolution.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(497' 406);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(497' 406);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(250' 172);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(250' 172);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(233' 90);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(233' 90);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radHDR.Location = new System.Drawing.Point(11' 64);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radHDR.Location = new System.Drawing.Point(11' 64);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radHDR.Size = new System.Drawing.Size(49' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radHDR.Size = new System.Drawing.Size(49' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radHDR.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radBloom.Location = new System.Drawing.Point(11' 41);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radBloom.Location = new System.Drawing.Point(11' 41);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radBloom.Size = new System.Drawing.Size(54' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radBloom.Size = new System.Drawing.Size(54' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radNone.Location = new System.Drawing.Point(11' 18);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radNone.Location = new System.Drawing.Point(11' 18);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radNone.Size = new System.Drawing.Size(51' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.radNone.Size = new System.Drawing.Size(51' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(6' 172);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(6' 172);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(233' 90);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(233' 90);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbVSync.Location = new System.Drawing.Point(11' 42);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbVSync.Location = new System.Drawing.Point(11' 42);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbVSync.Size = new System.Drawing.Size(88' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbVSync.Size = new System.Drawing.Size(88' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWindowed.Location = new System.Drawing.Point(11' 19);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWindowed.Location = new System.Drawing.Point(11' 19);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWindowed.Size = new System.Drawing.Size(77' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWindowed.Size = new System.Drawing.Size(77' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(6' 6);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(6' 6);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(477' 160);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(477' 160);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAnisotropic.Location = new System.Drawing.Point(123' 127);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAnisotropic.Location = new System.Drawing.Point(123' 127);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAnisotropic.Size = new System.Drawing.Size(333' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAnisotropic.Size = new System.Drawing.Size(333' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAnisotropic.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAntialiasing.Location = new System.Drawing.Point(123' 100);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAntialiasing.Location = new System.Drawing.Point(123' 100);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAntialiasing.Size = new System.Drawing.Size(333' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAntialiasing.Size = new System.Drawing.Size(333' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAntialiasing.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(16' 130);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(16' 130);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(101' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(101' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(54' 103);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(54' 103);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(63' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(63' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(57' 76);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(57' 76);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(60' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(60' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAspectRatio.Location = new System.Drawing.Point(123' 46);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAspectRatio.Location = new System.Drawing.Point(123' 46);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAspectRatio.Size = new System.Drawing.Size(333' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAspectRatio.Size = new System.Drawing.Size(333' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(46' 49);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(46' 49);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(71' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(71' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAdapter.Location = new System.Drawing.Point(123' 19);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAdapter.Location = new System.Drawing.Point(123' 19);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAdapter.Size = new System.Drawing.Size(333' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxAdapter.Size = new System.Drawing.Size(333' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(25' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(25' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(92' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(92' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslDecalCap.Location = new System.Drawing.Point(129' 125);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslDecalCap.Location = new System.Drawing.Point(129' 125);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslDecalCap.Maximum = 10;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslDecalCap.Minimum = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslDecalCap.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslDecalCap.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslDecalCap.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(63' 138);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(63' 138);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(60' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(60' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbTransparencyMultisampling.Location = new System.Drawing.Point(129' 102);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbTransparencyMultisampling.Location = new System.Drawing.Point(129' 102);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbTransparencyMultisampling.Size = new System.Drawing.Size(157' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbTransparencyMultisampling.Size = new System.Drawing.Size(157' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbTransparencyMultisampling.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbDepthOfField.Location = new System.Drawing.Point(129' 79);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbDepthOfField.Location = new System.Drawing.Point(129' 79);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbDepthOfField.Size = new System.Drawing.Size(92' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbDepthOfField.Size = new System.Drawing.Size(92' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbDepthOfField.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxRadialBlurQuality.Location = new System.Drawing.Point(129' 52);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxRadialBlurQuality.Location = new System.Drawing.Point(129' 52);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxRadialBlurQuality.Size = new System.Drawing.Size(208' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxRadialBlurQuality.Size = new System.Drawing.Size(208' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxTextureQuality.Location = new System.Drawing.Point(129' 25);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxTextureQuality.Location = new System.Drawing.Point(129' 25);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxTextureQuality.Size = new System.Drawing.Size(208' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxTextureQuality.Size = new System.Drawing.Size(208' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(27' 55);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(27' 55);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(96' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(96' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(42' 28);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(42' 28);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(81' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(81' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbxWaterReflections.Location = new System.Drawing.Point(77' 71);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbxWaterReflections.Location = new System.Drawing.Point(77' 71);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbxWaterReflections.Size = new System.Drawing.Size(284' 117);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbxWaterReflections.Size = new System.Drawing.Size(284' 117);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbxWaterReflections.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxReflectionQuality.Location = new System.Drawing.Point(117' 19);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxReflectionQuality.Location = new System.Drawing.Point(117' 19);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxReflectionQuality.Size = new System.Drawing.Size(146' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxReflectionQuality.Size = new System.Drawing.Size(146' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(18' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(18' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(93' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(93' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbSoftReflections.Location = new System.Drawing.Point(117' 46);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbSoftReflections.Location = new System.Drawing.Point(117' 46);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbSoftReflections.Size = new System.Drawing.Size(101' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbSoftReflections.Size = new System.Drawing.Size(101' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbFullSceneReflections.Location = new System.Drawing.Point(117' 69);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbFullSceneReflections.Location = new System.Drawing.Point(117' 69);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbFullSceneReflections.Size = new System.Drawing.Size(132' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbFullSceneReflections.Size = new System.Drawing.Size(132' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbFullSceneReflections.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbFullDetailReflections.Location = new System.Drawing.Point(117' 92);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbFullDetailReflections.Location = new System.Drawing.Point(117' 92);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbFullDetailReflections.Size = new System.Drawing.Size(128' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbFullDetailReflections.Size = new System.Drawing.Size(128' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbFullDetailReflections.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxWaterMultisampling.Location = new System.Drawing.Point(194' 240);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxWaterMultisampling.Location = new System.Drawing.Point(194' 240);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxWaterMultisampling.Size = new System.Drawing.Size(146' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxWaterMultisampling.Size = new System.Drawing.Size(146' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxWaterMultisampling.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(83' 243);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(83' 243);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(105' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(105' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 9;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbDepthFog.Location = new System.Drawing.Point(194' 217);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbDepthFog.Location = new System.Drawing.Point(194' 217);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbDepthFog.Size = new System.Drawing.Size(76' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbDepthFog.Size = new System.Drawing.Size(76' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbDepthFog.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterDisplacement.Location = new System.Drawing.Point(194' 194);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterDisplacement.Location = new System.Drawing.Point(194' 194);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterDisplacement.Size = new System.Drawing.Size(122' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterDisplacement.Size = new System.Drawing.Size(122' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterDisplacement.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterReflections.Location = new System.Drawing.Point(194' 48);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterReflections.Location = new System.Drawing.Point(194' 48);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterReflections.Size = new System.Drawing.Size(111' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterReflections.Size = new System.Drawing.Size(111' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterRefractions.Location = new System.Drawing.Point(194' 25);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterRefractions.Location = new System.Drawing.Point(194' 25);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterRefractions.Size = new System.Drawing.Size(112' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbWaterRefractions.Size = new System.Drawing.Size(112' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbxShadows.Location = new System.Drawing.Point(62' 48);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbxShadows.Location = new System.Drawing.Point(62' 48);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbxShadows.Size = new System.Drawing.Size(354' 224);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbxShadows.Size = new System.Drawing.Size(354' 224);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxExteriorShadows.Location = new System.Drawing.Point(132' 146);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxExteriorShadows.Location = new System.Drawing.Point(132' 146);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxExteriorShadows.Maximum = 6;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxExteriorShadows.Minimum = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxExteriorShadows.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxExteriorShadows.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxExteriorShadows.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxInteriorShadows.Location = new System.Drawing.Point(132' 73);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxInteriorShadows.Location = new System.Drawing.Point(132' 73);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxInteriorShadows.Maximum = 6;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxInteriorShadows.Minimum = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxInteriorShadows.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxInteriorShadows.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslMaxInteriorShadows.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point(11' 162);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point(11' 162);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size(115' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size(115' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label14.TabIndex = 14;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point(14' 90);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point(14' 90);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size(112' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size(112' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label13.TabIndex = 10;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxShadowFiltering.Location = new System.Drawing.Point(132' 46);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxShadowFiltering.Location = new System.Drawing.Point(132' 46);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxShadowFiltering.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxShadowFiltering.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(38' 49);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(38' 49);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(88' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(88' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label12.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxShadowQuality.Location = new System.Drawing.Point(132' 19);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxShadowQuality.Location = new System.Drawing.Point(132' 19);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxShadowQuality.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.cbxShadowQuality.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(42' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(42' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(84' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(84' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbEnableShadows.Location = new System.Drawing.Point(194' 25);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbEnableShadows.Location = new System.Drawing.Point(194' 25);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbEnableShadows.Size = new System.Drawing.Size(106' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ckbEnableShadows.Size = new System.Drawing.Size(106' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label21.Location = new System.Drawing.Point(246' 183);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label21.Location = new System.Drawing.Point(246' 183);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label21.Size = new System.Drawing.Size(76' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label21.Size = new System.Drawing.Size(76' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label21.TabIndex = 13;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label20.Location = new System.Drawing.Point(246' 97);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label20.Location = new System.Drawing.Point(246' 97);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label20.Size = new System.Drawing.Size(57' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label20.Size = new System.Drawing.Size(57' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label20.TabIndex = 12;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label19.Location = new System.Drawing.Point(246' 11);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label19.Location = new System.Drawing.Point(246' 11);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label19.Size = new System.Drawing.Size(60' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label19.Size = new System.Drawing.Size(60' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label19.TabIndex = 11;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point(24' 269);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point(24' 269);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size(89' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size(89' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label18.TabIndex = 10;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point(24' 183);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point(24' 183);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size(64' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size(64' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label17.TabIndex = 9;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point(24' 97);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point(24' 97);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size(62' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size(62' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label16.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point(24' 11);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point(24' 11);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size(68' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size(68' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label15.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslShadowFade.Location = new System.Drawing.Point(249' 199);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslShadowFade.Location = new System.Drawing.Point(249' 199);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslShadowFade.Maximum = 10;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslShadowFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslShadowFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslShadowFade.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslItemFade.Divisor = 10;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslItemFade.Location = new System.Drawing.Point(249' 113);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslItemFade.Location = new System.Drawing.Point(249' 113);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslItemFade.Maximum = 15;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslItemFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslItemFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslItemFade.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslItemFade.TickFrequency = 10;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLightFade.Location = new System.Drawing.Point(249' 27);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLightFade.Location = new System.Drawing.Point(249' 27);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLightFade.Maximum = 35;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLightFade.Minimum = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLightFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLightFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLightFade.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslSpecularityFade.Location = new System.Drawing.Point(27' 285);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslSpecularityFade.Location = new System.Drawing.Point(27' 285);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslSpecularityFade.Maximum = 15;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslSpecularityFade.Minimum = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslSpecularityFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslSpecularityFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslSpecularityFade.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslGrassFade.Location = new System.Drawing.Point(27' 199);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslGrassFade.Location = new System.Drawing.Point(27' 199);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslGrassFade.Maximum = 7;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslGrassFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslGrassFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslGrassFade.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslActorFade.Location = new System.Drawing.Point(27' 113);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslActorFade.Location = new System.Drawing.Point(27' 113);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslActorFade.Maximum = 15;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslActorFade.Minimum = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslActorFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslActorFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectFade.Location = new System.Drawing.Point(27' 27);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectFade.Location = new System.Drawing.Point(27' 27);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectFade.Maximum = 15;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Location = new System.Drawing.Point(4' 22);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Size = new System.Drawing.Size(489' 380);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLandQuality.Location = new System.Drawing.Point(27' 199);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLandQuality.Location = new System.Drawing.Point(27' 199);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLandQuality.Maximum = 150;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLandQuality.Minimum = 75;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLandQuality.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLandQuality.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLandQuality.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslLandQuality.TickFrequency = 5;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label24.Location = new System.Drawing.Point(24' 183);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label24.Location = new System.Drawing.Point(24' 183);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label24.Size = new System.Drawing.Size(69' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label24.Size = new System.Drawing.Size(69' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label24.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectLODFade.Location = new System.Drawing.Point(27' 113);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectLODFade.Location = new System.Drawing.Point(27' 113);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectLODFade.Maximum = 50;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectLODFade.Minimum = 25;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectLODFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectLODFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslObjectLODFade.TickFrequency = 5;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label23.Location = new System.Drawing.Point(24' 97);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label23.Location = new System.Drawing.Point(24' 97);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label23.Size = new System.Drawing.Size(93' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label23.Size = new System.Drawing.Size(93' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label23.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslTreeLODFade.Location = new System.Drawing.Point(27' 27);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslTreeLODFade.Location = new System.Drawing.Point(27' 27);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslTreeLODFade.Maximum = 40;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslTreeLODFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslTreeLODFade.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.oslTreeLODFade.TickFrequency = 5;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label22.Location = new System.Drawing.Point(24' 11);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label22.Location = new System.Drawing.Point(24' 11);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label22.Size = new System.Drawing.Size(84' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.label22.Size = new System.Drawing.Size(84' 13);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(353' 428);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(353' 428);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(434' 428);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(434' 428);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(521' 463);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,GraphicsSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(521' 463);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,SettingsInstaller,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,SaveViewDistanceValues,The following statement contains a magic number: SaveValue("Grass"' "fGrassStartFadeDistance"' (p_gstSettings.oslGrassFade.Value*1000).ToString("f0"));
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,SettingsInstaller,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,SaveViewDistanceValues,The following statement contains a magic number: SaveValue("Display"' "fSpecularLODStartFade"' (p_gstSettings.oslSpecularityFade.Value*100).ToString("f0"));
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,SettingsInstaller,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,SaveViewDistanceValues,The following statement contains a magic number: SaveValue("Display"' "fLightLODStartFade"' (p_gstSettings.oslLightFade.Value*100).ToString("f0"));
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,SettingsInstaller,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,SaveViewDistanceValues,The following statement contains a magic number: SaveValue("Display"' "fShadowLODStartFade"' (p_gstSettings.oslShadowFade.Value*100).ToString("f0"));
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,SettingsInstaller,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,SaveDistantLODValues,The following statement contains a magic number: SaveValue("TerrainManager"' "fTreeLoadDistance"' (p_gstSettings.oslTreeLODFade.Value*1000).ToString("f0"));
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,SettingsInstaller,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\GraphicsSettings.cs,SaveDistantLODValues,The following statement contains a magic number: SaveValue("TerrainManager"' "fBlockLoadDistanceLow"' (p_gstSettings.oslObjectLODFade.Value*1000).ToString("f0"));
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.nudValue.Location = new System.Drawing.Point(3' 42);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.nudValue.Location = new System.Drawing.Point(3' 42);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.nudValue.Size = new System.Drawing.Size(82' 20);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.nudValue.Size = new System.Drawing.Size(82' 20);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.nudValue.TabIndex = 11;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.ckbOverride.Location = new System.Drawing.Point(94' 43);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.ckbOverride.Location = new System.Drawing.Point(94' 43);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.ckbOverride.Size = new System.Drawing.Size(66' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.ckbOverride.Size = new System.Drawing.Size(66' 17);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.ckbOverride.TabIndex = 9;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.tkbSlider.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.tkbSlider.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.tkbSlider.Minimum = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.tkbSlider.Size = new System.Drawing.Size(208' 45);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.tkbSlider.Size = new System.Drawing.Size(208' 45);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.tkbSlider.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.tkbSlider.Value = 2;
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.Games.Fallout3.Tools.GraphicsSettings,OverrideSlider,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\GraphicsSettings\OverrideSlider.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(216' 67);
Magic Number,Fomm.InstallLogUpgraders,Upgrader0000,C:\repos\niveuseverto_fomm\flmm\InstallLogUpgraders\Upgrader0000.cs,GetOldSdpValue,The following statement contains a magic number: var b = new byte[node.InnerText.Length/2];
Magic Number,Fomm.InstallLogUpgraders,Upgrader0000,C:\repos\niveuseverto_fomm\flmm\InstallLogUpgraders\Upgrader0000.cs,GetOldSdpValue,The following statement contains a magic number: for (var i = 0; i < b.Length; i++)        {          b[i] = byte.Parse("" + node.InnerText[i*2] + node.InnerText[i*2 + 1]'                            NumberStyles.AllowHexSpecifier);        }
Magic Number,Fomm.InstallLogUpgraders,Upgrader0000,C:\repos\niveuseverto_fomm\flmm\InstallLogUpgraders\Upgrader0000.cs,GetOldSdpValue,The following statement contains a magic number: for (var i = 0; i < b.Length; i++)        {          b[i] = byte.Parse("" + node.InnerText[i*2] + node.InnerText[i*2 + 1]'                            NumberStyles.AllowHexSpecifier);        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,BsaTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\BsaTrimmer.cs,Trim,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,BsaTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\BsaTrimmer.cs,Trim,The following statement contains a magic number: for (var i = 0; i < FileCount; i++)        {          if ((i%100) == 0)          {            del("Processing file " + i + " of " + FileCount);          }          br.BaseStream.Position = fileOffsets[i];          var offset = bw.BaseStream.Position;          var add = 0;          if (SkipName)          {            var len = br.ReadByte();            bw.Write(len);            bw.Write(br.ReadBytes(len + 1));            add = len + 2;          }          var compressed2 = Compressed;          if ((fileLengths[i] & (1 << 30)) != 0)          {            compressed2 = !compressed2;            fileLengths[i] ^= (1 << 30);          }          if (!compressed2)          {            var bytes = new byte[fileLengths[i]];            br.Read(bytes' 0' fileLengths[i]);            Commit(bw' offsetOffsets[i]' bytes' offset' add' parsefiles[i]);          }          else          {            var uncompressed = new byte[br.ReadUInt32()];            var compressed = new byte[fileLengths[i] - 4];            br.Read(compressed' 0' fileLengths[i] - 4);            inf.Reset();            inf.SetInput(compressed);            inf.Inflate(uncompressed);            Commit(bw' offsetOffsets[i]' uncompressed' offset' add' parsefiles[i]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,BsaTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\BsaTrimmer.cs,Trim,The following statement contains a magic number: for (var i = 0; i < FileCount; i++)        {          if ((i%100) == 0)          {            del("Processing file " + i + " of " + FileCount);          }          br.BaseStream.Position = fileOffsets[i];          var offset = bw.BaseStream.Position;          var add = 0;          if (SkipName)          {            var len = br.ReadByte();            bw.Write(len);            bw.Write(br.ReadBytes(len + 1));            add = len + 2;          }          var compressed2 = Compressed;          if ((fileLengths[i] & (1 << 30)) != 0)          {            compressed2 = !compressed2;            fileLengths[i] ^= (1 << 30);          }          if (!compressed2)          {            var bytes = new byte[fileLengths[i]];            br.Read(bytes' 0' fileLengths[i]);            Commit(bw' offsetOffsets[i]' bytes' offset' add' parsefiles[i]);          }          else          {            var uncompressed = new byte[br.ReadUInt32()];            var compressed = new byte[fileLengths[i] - 4];            br.Read(compressed' 0' fileLengths[i] - 4);            inf.Reset();            inf.SetInput(compressed);            inf.Inflate(uncompressed);            Commit(bw' offsetOffsets[i]' uncompressed' offset' add' parsefiles[i]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,BsaTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\BsaTrimmer.cs,Trim,The following statement contains a magic number: for (var i = 0; i < FileCount; i++)        {          if ((i%100) == 0)          {            del("Processing file " + i + " of " + FileCount);          }          br.BaseStream.Position = fileOffsets[i];          var offset = bw.BaseStream.Position;          var add = 0;          if (SkipName)          {            var len = br.ReadByte();            bw.Write(len);            bw.Write(br.ReadBytes(len + 1));            add = len + 2;          }          var compressed2 = Compressed;          if ((fileLengths[i] & (1 << 30)) != 0)          {            compressed2 = !compressed2;            fileLengths[i] ^= (1 << 30);          }          if (!compressed2)          {            var bytes = new byte[fileLengths[i]];            br.Read(bytes' 0' fileLengths[i]);            Commit(bw' offsetOffsets[i]' bytes' offset' add' parsefiles[i]);          }          else          {            var uncompressed = new byte[br.ReadUInt32()];            var compressed = new byte[fileLengths[i] - 4];            br.Read(compressed' 0' fileLengths[i] - 4);            inf.Reset();            inf.SetInput(compressed);            inf.Inflate(uncompressed);            Commit(bw' offsetOffsets[i]' uncompressed' offset' add' parsefiles[i]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,BsaTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\BsaTrimmer.cs,Trim,The following statement contains a magic number: for (var i = 0; i < FileCount; i++)        {          if ((i%100) == 0)          {            del("Processing file " + i + " of " + FileCount);          }          br.BaseStream.Position = fileOffsets[i];          var offset = bw.BaseStream.Position;          var add = 0;          if (SkipName)          {            var len = br.ReadByte();            bw.Write(len);            bw.Write(br.ReadBytes(len + 1));            add = len + 2;          }          var compressed2 = Compressed;          if ((fileLengths[i] & (1 << 30)) != 0)          {            compressed2 = !compressed2;            fileLengths[i] ^= (1 << 30);          }          if (!compressed2)          {            var bytes = new byte[fileLengths[i]];            br.Read(bytes' 0' fileLengths[i]);            Commit(bw' offsetOffsets[i]' bytes' offset' add' parsefiles[i]);          }          else          {            var uncompressed = new byte[br.ReadUInt32()];            var compressed = new byte[fileLengths[i] - 4];            br.Read(compressed' 0' fileLengths[i] - 4);            inf.Reset();            inf.SetInput(compressed);            inf.Inflate(uncompressed);            Commit(bw' offsetOffsets[i]' uncompressed' offset' add' parsefiles[i]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,BsaTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\BsaTrimmer.cs,Trim,The following statement contains a magic number: for (var i = 0; i < FileCount; i++)        {          if ((i%100) == 0)          {            del("Processing file " + i + " of " + FileCount);          }          br.BaseStream.Position = fileOffsets[i];          var offset = bw.BaseStream.Position;          var add = 0;          if (SkipName)          {            var len = br.ReadByte();            bw.Write(len);            bw.Write(br.ReadBytes(len + 1));            add = len + 2;          }          var compressed2 = Compressed;          if ((fileLengths[i] & (1 << 30)) != 0)          {            compressed2 = !compressed2;            fileLengths[i] ^= (1 << 30);          }          if (!compressed2)          {            var bytes = new byte[fileLengths[i]];            br.Read(bytes' 0' fileLengths[i]);            Commit(bw' offsetOffsets[i]' bytes' offset' add' parsefiles[i]);          }          else          {            var uncompressed = new byte[br.ReadUInt32()];            var compressed = new byte[fileLengths[i] - 4];            br.Read(compressed' 0' fileLengths[i] - 4);            inf.Reset();            inf.SetInput(compressed);            inf.Inflate(uncompressed);            Commit(bw' offsetOffsets[i]' uncompressed' offset' add' parsefiles[i]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,BsaTrimmer,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\BsaTrimmer.cs,Trim,The following statement contains a magic number: for (var i = 0; i < FileCount; i++)        {          if ((i%100) == 0)          {            del("Processing file " + i + " of " + FileCount);          }          br.BaseStream.Position = fileOffsets[i];          var offset = bw.BaseStream.Position;          var add = 0;          if (SkipName)          {            var len = br.ReadByte();            bw.Write(len);            bw.Write(br.ReadBytes(len + 1));            add = len + 2;          }          var compressed2 = Compressed;          if ((fileLengths[i] & (1 << 30)) != 0)          {            compressed2 = !compressed2;            fileLengths[i] ^= (1 << 30);          }          if (!compressed2)          {            var bytes = new byte[fileLengths[i]];            br.Read(bytes' 0' fileLengths[i]);            Commit(bw' offsetOffsets[i]' bytes' offset' add' parsefiles[i]);          }          else          {            var uncompressed = new byte[br.ReadUInt32()];            var compressed = new byte[fileLengths[i] - 4];            br.Read(compressed' 0' fileLengths[i] - 4);            inf.Reset();            inf.SetInput(compressed);            inf.Inflate(uncompressed);            Commit(bw' offsetOffsets[i]' uncompressed' offset' add' parsefiles[i]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,bApply_Click,The following statement contains a magic number: lines = new string[70];
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,bApply_Click,The following statement contains a magic number: for (var i = 0; i < 70; i++)        {          lines[i] = string.Empty;        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,backgroundWorker1_ProgressChanged,The following statement contains a magic number: if (LineCount < 70)        {          lines[LineCount++] = (string) e.UserState;        }        else        {          for (var i = 0; i < 69; i++)          {            lines[i] = lines[i + 1];          }          lines[69] = (string) e.UserState;        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,backgroundWorker1_ProgressChanged,The following statement contains a magic number: if (LineCount < 70)        {          lines[LineCount++] = (string) e.UserState;        }        else        {          for (var i = 0; i < 69; i++)          {            lines[i] = lines[i + 1];          }          lines[69] = (string) e.UserState;        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,backgroundWorker1_ProgressChanged,The following statement contains a magic number: if (LineCount < 70)        {          lines[LineCount++] = (string) e.UserState;        }        else        {          for (var i = 0; i < 69; i++)          {            lines[i] = lines[i + 1];          }          lines[69] = (string) e.UserState;        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,backgroundWorker1_ProgressChanged,The following statement contains a magic number: tbDescription.Select(tbDescription.TextLength - (70 - LineCount)*Environment.NewLine.Length' 0);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableLive.Location = new System.Drawing.Point(12' 47);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableLive.Location = new System.Drawing.Point(12' 47);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableLive.Size = new System.Drawing.Size(106' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.cbDisableLive.Size = new System.Drawing.Size(106' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.cbShrinkTextures.Location = new System.Drawing.Point(158' 47);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.cbShrinkTextures.Location = new System.Drawing.Point(158' 47);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.cbShrinkTextures.Size = new System.Drawing.Size(96' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.cbShrinkTextures.Size = new System.Drawing.Size(96' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point(221' 233);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point(221' 233);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bApply.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(140' 233);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(140' 233);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.tbDescription.Location = new System.Drawing.Point(12' 99);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.tbDescription.Location = new System.Drawing.Point(12' 99);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.tbDescription.Size = new System.Drawing.Size(284' 128);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.tbDescription.Size = new System.Drawing.Size(284' 128);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.tbDescription.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(9' 9);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(9' 9);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(287' 35);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(287' 35);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bReset.Location = new System.Drawing.Point(12' 233);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bReset.Location = new System.Drawing.Point(12' 233);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bReset.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bReset.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bReset.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bXliveSettings.Location = new System.Drawing.Point(12' 70);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bXliveSettings.Location = new System.Drawing.Point(12' 70);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bXliveSettings.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bXliveSettings.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.bXliveSettings.TabIndex = 9;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(308' 268);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,InstallationTweaker,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\InstallationTweaker.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(308' 268);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,xliveSettings,The following statement contains a magic number: switch (NativeMethods.GetPrivateProfileIntA("d3dx"' "sse"' 0' ".\\xlive.ini"))        {          case 2:            rbSse2.Checked = true;            break;          case 3:            rbSse3.Checked = true;            break;          case 4:            rbSse4.Checked = true;            break;          default:            rbSse0.Checked = true;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,xliveSettings,The following statement contains a magic number: switch (NativeMethods.GetPrivateProfileIntA("d3dx"' "sse"' 0' ".\\xlive.ini"))        {          case 2:            rbSse2.Checked = true;            break;          case 3:            rbSse3.Checked = true;            break;          case 4:            rbSse4.Checked = true;            break;          default:            rbSse0.Checked = true;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,xliveSettings,The following statement contains a magic number: switch (NativeMethods.GetPrivateProfileIntA("d3dx"' "sse"' 0' ".\\xlive.ini"))        {          case 2:            rbSse2.Checked = true;            break;          case 3:            rbSse3.Checked = true;            break;          case 4:            rbSse4.Checked = true;            break;          default:            rbSse0.Checked = true;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,xliveSettings_FormClosing,The following statement contains a magic number: if (rbSse4.Checked)        {          sse = 4;        }        else if (rbSse3.Checked)        {          sse = 3;        }        else if (rbSse2.Checked)        {          sse = 2;        }        else        {          sse = 0;        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,xliveSettings_FormClosing,The following statement contains a magic number: if (rbSse4.Checked)        {          sse = 4;        }        else if (rbSse3.Checked)        {          sse = 3;        }        else if (rbSse2.Checked)        {          sse = 2;        }        else        {          sse = 0;        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,xliveSettings_FormClosing,The following statement contains a magic number: if (rbSse4.Checked)        {          sse = 4;        }        else if (rbSse3.Checked)        {          sse = 3;        }        else if (rbSse2.Checked)        {          sse = 2;        }        else        {          sse = 0;        }
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse0.Location = new System.Drawing.Point(12' 34);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse0.Location = new System.Drawing.Point(12' 34);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse0.Size = new System.Drawing.Size(39' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse0.Size = new System.Drawing.Size(39' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse2.Location = new System.Drawing.Point(75' 34);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse2.Location = new System.Drawing.Point(75' 34);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse2.Size = new System.Drawing.Size(47' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse2.Size = new System.Drawing.Size(47' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse3.Location = new System.Drawing.Point(12' 57);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse3.Location = new System.Drawing.Point(12' 57);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse3.Size = new System.Drawing.Size(47' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse3.Size = new System.Drawing.Size(47' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse3.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse4.Location = new System.Drawing.Point(75' 57);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse4.Location = new System.Drawing.Point(75' 57);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse4.Size = new System.Drawing.Size(47' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse4.Size = new System.Drawing.Size(47' 17);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbSse4.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(9' 18);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(9' 18);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(138' 13);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(138' 13);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(9' 95);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(9' 95);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(97' 13);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(97' 13);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.tbProfile.Location = new System.Drawing.Point(12' 111);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.tbProfile.Location = new System.Drawing.Point(12' 111);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.tbProfile.MaxLength = 32;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.tbProfile.Size = new System.Drawing.Size(110' 20);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.tbProfile.Size = new System.Drawing.Size(110' 20);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.tbProfile.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.bSseHelp.Location = new System.Drawing.Point(166' 34);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.bSseHelp.Location = new System.Drawing.Point(166' 34);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.bSseHelp.Size = new System.Drawing.Size(25' 25);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.bSseHelp.Size = new System.Drawing.Size(25' 25);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.bSseHelp.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.bProfileHelp.Location = new System.Drawing.Point(166' 108);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.bProfileHelp.Location = new System.Drawing.Point(166' 108);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.bProfileHelp.Size = new System.Drawing.Size(25' 25);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.bProfileHelp.Size = new System.Drawing.Size(25' 25);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.bProfileHelp.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(223' 158);
Magic Number,Fomm.Games.Fallout3.Tools.InstallTweaker,xliveSettings,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\InstallTweaker\xliveSettings.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(223' 158);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,FomodScriptEditor,The following statement contains a magic number: cbxVersion.SelectedIndex = 4;
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddtScript.Size = new System.Drawing.Size(448' 398);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddtScript.Size = new System.Drawing.Size(448' 398);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddtScript.TabIndex = 2;
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddtScript.TabWidth = 121;
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.dtpCSharp.Location = new System.Drawing.Point(0' 45);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.dtpCSharp.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.dtpCSharp.Size = new System.Drawing.Size(448' 353);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.dtpCSharp.Size = new System.Drawing.Size(448' 353);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.sedScript.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.sedScript.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.sedScript.Size = new System.Drawing.Size(442' 347);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.sedScript.Size = new System.Drawing.Size(442' 347);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.dtpXML.Location = new System.Drawing.Point(0' 45);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.dtpXML.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.dtpXML.Size = new System.Drawing.Size(448' 353);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.dtpXML.Size = new System.Drawing.Size(448' 353);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.dtpXML.TabIndex = 2;
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.xedScript.Location = new System.Drawing.Point(3' 37);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.xedScript.Location = new System.Drawing.Point(3' 37);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.xedScript.Size = new System.Drawing.Size(442' 313);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.xedScript.Size = new System.Drawing.Size(442' 313);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size(442' 34);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size(442' 34);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.cbxVersion.Location = new System.Drawing.Point(151' 6);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.cbxVersion.Location = new System.Drawing.Point(151' 6);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.cbxVersion.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.cbxVersion.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(10' 9);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(10' 9);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(135' 13);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(135' 13);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(448' 398);
Magic Number,Fomm.PackageManager.Controls,FomodScriptEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\FomodScriptEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(448' 398);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddtReadme.Size = new System.Drawing.Size(387' 266);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddtReadme.Size = new System.Drawing.Size(387' 266);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddtReadme.TabIndex = 2;
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddtReadme.TabWidth = 121;
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpPlainText.Location = new System.Drawing.Point(0' 45);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpPlainText.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpPlainText.Size = new System.Drawing.Size(387' 221);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpPlainText.Size = new System.Drawing.Size(387' 221);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbxReadme.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbxReadme.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbxReadme.Size = new System.Drawing.Size(381' 215);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbxReadme.Size = new System.Drawing.Size(381' 215);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpHTML.Location = new System.Drawing.Point(0' 45);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpHTML.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpHTML.PageIndex = 2;
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpHTML.Size = new System.Drawing.Size(387' 221);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpHTML.Size = new System.Drawing.Size(387' 221);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpHTML.TabIndex = 3;
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.xedReadme.Location = new System.Drawing.Point(3' 28);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.xedReadme.Location = new System.Drawing.Point(3' 28);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.xedReadme.Size = new System.Drawing.Size(381' 190);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.xedReadme.Size = new System.Drawing.Size(381' 190);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip1.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip1.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip1.Size = new System.Drawing.Size(381' 25);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip1.Size = new System.Drawing.Size(381' 25);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbPreview.Size = new System.Drawing.Size(52' 22);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.tsbPreview.Size = new System.Drawing.Size(52' 22);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpRichText.Location = new System.Drawing.Point(0' 45);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpRichText.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpRichText.Size = new System.Drawing.Size(387' 221);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpRichText.Size = new System.Drawing.Size(387' 221);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.ddpRichText.TabIndex = 2;
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.rteReadme.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.rteReadme.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.rteReadme.Size = new System.Drawing.Size(381' 215);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.rteReadme.Size = new System.Drawing.Size(381' 215);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(387' 266);
Magic Number,Fomm.PackageManager.Controls,ReadmeEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\Controls\ReadmeEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(387' 266);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(0' 383);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(523' 43);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(523' 43);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(445' 8);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(445' 8);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(364' 8);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(364' 8);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.redReadmeEditor.Size = new System.Drawing.Size(523' 383);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.redReadmeEditor.Size = new System.Drawing.Size(523' 383);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(523' 426);
Magic Number,Fomm.PackageManager,EditReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(523' 426);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(0' 383);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(523' 43);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(523' 43);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(445' 8);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(445' 8);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(364' 8);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(364' 8);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.fseScriptEditor.Size = new System.Drawing.Size(523' 383);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.fseScriptEditor.Size = new System.Drawing.Size(523' 383);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(523' 426);
Magic Number,Fomm.PackageManager,EditScriptForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\EditScriptForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(523' 426);
Magic Number,Fomm.PackageManager,Archive,C:\repos\niveuseverto_fomm\flmm\PackageManager\Archive.cs,ParseArchivePath,The following statement contains a magic number: var strPath = p_strPath.Substring(intEndIndex + 2);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,OnResize,The following statement contains a magic number: pbxScreenshot.Height = ClientSize.Height - pbxScreenshot.Top - 3;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,OnResize,The following statement contains a magic number: pbxScreenshot.Width = ClientSize.Width - 6;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.clbGroups.Location = new System.Drawing.Point(3' 359);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.clbGroups.Location = new System.Drawing.Point(3' 359);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.clbGroups.Size = new System.Drawing.Size(364' 142);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.clbGroups.Size = new System.Drawing.Size(364' 142);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.clbGroups.TabIndex = 40;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(0' 343);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(41' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(41' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 39;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(51' 136);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(51' 136);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(75' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(75' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 34;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbEmail.Location = new System.Drawing.Point(132' 133);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbEmail.Location = new System.Drawing.Point(132' 133);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbEmail.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbEmail.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbEmail.TabIndex = 33;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(77' 110);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(77' 110);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(49' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(49' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 32;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbWebsite.Location = new System.Drawing.Point(132' 107);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbWebsite.Location = new System.Drawing.Point(132' 107);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbWebsite.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbWebsite.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbWebsite.TabIndex = 31;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbMinFommVersion.Location = new System.Drawing.Point(132' 159);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbMinFommVersion.Location = new System.Drawing.Point(132' 159);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbMinFommVersion.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbMinFommVersion.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbMinFommVersion.TabIndex = 35;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(0' 162);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(126' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(126' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 36;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbMVersion.Location = new System.Drawing.Point(132' 81);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbMVersion.Location = new System.Drawing.Point(132' 81);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbMVersion.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbMVersion.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbMVersion.TabIndex = 29;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.butClearScreenshot.Location = new System.Drawing.Point(127' 507);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.butClearScreenshot.Location = new System.Drawing.Point(127' 507);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.butClearScreenshot.Size = new System.Drawing.Size(115' 23);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.butClearScreenshot.Size = new System.Drawing.Size(115' 23);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.butClearScreenshot.TabIndex = 42;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(21' 84);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(21' 84);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(105' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(105' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 30;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(57' 58);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(57' 58);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(69' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(69' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 28;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbVersion.Location = new System.Drawing.Point(132' 55);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbVersion.Location = new System.Drawing.Point(132' 55);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbVersion.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbVersion.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbVersion.TabIndex = 27;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(0' 182);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(84' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(84' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 37;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbDescription.Location = new System.Drawing.Point(3' 198);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbDescription.Location = new System.Drawing.Point(3' 198);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbDescription.Size = new System.Drawing.Size(364' 142);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbDescription.Size = new System.Drawing.Size(364' 142);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbDescription.TabIndex = 38;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.butSetScreenshot.Location = new System.Drawing.Point(6' 507);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.butSetScreenshot.Location = new System.Drawing.Point(6' 507);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.butSetScreenshot.Size = new System.Drawing.Size(115' 23);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.butSetScreenshot.Size = new System.Drawing.Size(115' 23);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.butSetScreenshot.TabIndex = 41;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(61' 32);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(61' 32);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(65' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(65' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 26;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbAuthor.Location = new System.Drawing.Point(132' 29);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbAuthor.Location = new System.Drawing.Point(132' 29);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbAuthor.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbAuthor.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbAuthor.TabIndex = 25;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(64' 6);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(64' 6);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(62' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(62' 13);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 24;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Location = new System.Drawing.Point(132' 3);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Location = new System.Drawing.Point(132' 3);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Size = new System.Drawing.Size(219' 20);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.tbName.TabIndex = 23;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.pbxScreenshot.Location = new System.Drawing.Point(3' 536);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.pbxScreenshot.Location = new System.Drawing.Point(3' 536);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.pbxScreenshot.MinimumSize = new System.Drawing.Size(2' 150);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.pbxScreenshot.MinimumSize = new System.Drawing.Size(2' 150);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.pbxScreenshot.Size = new System.Drawing.Size(364' 150);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.pbxScreenshot.Size = new System.Drawing.Size(364' 150);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.pbxScreenshot.TabIndex = 43;
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(371' 689);
Magic Number,Fomm.PackageManager,FomodInfoControl,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodInfoControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(371' 689);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butSave.Location = new System.Drawing.Point(163' 12);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butSave.Location = new System.Drawing.Point(163' 12);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(244' 12);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(244' 12);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(0' 401);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(331' 47);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(331' 47);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 23;
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butEditReadme.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butEditReadme.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butEditReadme.Size = new System.Drawing.Size(78' 23);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butEditReadme.Size = new System.Drawing.Size(78' 23);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.butEditReadme.TabIndex = 2;
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.finInfo.Size = new System.Drawing.Size(331' 401);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.finInfo.Size = new System.Drawing.Size(331' 401);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.finInfo.TabIndex = 24;
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(331' 448);
Magic Number,Fomm.PackageManager,InfoEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\InfoEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(331' 448);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.lbSelect.Location = new System.Drawing.Point(12' 32);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.lbSelect.Location = new System.Drawing.Point(12' 32);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.lbSelect.Size = new System.Drawing.Size(238' 139);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.lbSelect.Size = new System.Drawing.Size(238' 139);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bOK.Location = new System.Drawing.Point(175' 177);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bOK.Location = new System.Drawing.Point(175' 177);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bOK.TabIndex = 4;
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(90' 13);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(90' 13);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bPreview.Location = new System.Drawing.Point(93' 177);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bPreview.Location = new System.Drawing.Point(93' 177);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bPreview.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bPreview.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bPreview.TabIndex = 3;
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bDescription.Location = new System.Drawing.Point(12' 177);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bDescription.Location = new System.Drawing.Point(12' 177);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bDescription.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bDescription.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.bDescription.TabIndex = 2;
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.tbDesc.Location = new System.Drawing.Point(12' 32);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.tbDesc.Location = new System.Drawing.Point(12' 32);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.tbDesc.Size = new System.Drawing.Size(238' 139);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.tbDesc.Size = new System.Drawing.Size(238' 139);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(262' 212);
Magic Number,Fomm.PackageManager,SelectForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\SelectForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(262' 212);
Magic Number,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip1.Size = new System.Drawing.Size(503' 25);
Magic Number,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip1.Size = new System.Drawing.Size(503' 25);
Magic Number,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(35' 22);
Magic Number,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(35' 22);
Magic Number,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(0' 25);
Magic Number,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(503' 399);
Magic Number,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(503' 399);
Magic Number,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 2;
Magic Number,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(503' 424);
Magic Number,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(503' 424);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,panel1_Layout,The following statement contains a magic number: panel6.Width = panel1.Width/4;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,panel1_Layout,The following statement contains a magic number: panel5.Width = panel1.Width/4;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,panel1_Layout,The following statement contains a magic number: panel4.Width = panel1.Width/4;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.label1.MaximumSize = new System.Drawing.Size(483' 76);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.label1.MaximumSize = new System.Drawing.Size(483' 76);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.label1.MinimumSize = new System.Drawing.Size(70' 27);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.label1.MinimumSize = new System.Drawing.Size(70' 27);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.label1.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(70' 27);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(70' 27);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 8;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(440' 233);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(440' 233);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel2.TabIndex = 9;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(0' 162);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(440' 71);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(440' 71);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 10;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Location = new System.Drawing.Point(330' 0);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size(110' 71);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size(110' 71);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel3.TabIndex = 4;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNo.Location = new System.Drawing.Point(18' 37);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNo.Location = new System.Drawing.Point(18' 37);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNo.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNo.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNo.TabIndex = 2;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYes.Location = new System.Drawing.Point(18' 8);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYes.Location = new System.Drawing.Point(18' 8);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYes.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYes.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Location = new System.Drawing.Point(220' 0);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size(110' 71);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size(110' 71);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel4.TabIndex = 5;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToMod.Location = new System.Drawing.Point(18' 37);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToMod.Location = new System.Drawing.Point(18' 37);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToMod.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToMod.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToMod.TabIndex = 4;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToMod.Location = new System.Drawing.Point(18' 8);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToMod.Location = new System.Drawing.Point(18' 8);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToMod.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToMod.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToMod.TabIndex = 3;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Location = new System.Drawing.Point(110' 0);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Size = new System.Drawing.Size(110' 71);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Size = new System.Drawing.Size(110' 71);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel5.TabIndex = 6;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToFolder.Location = new System.Drawing.Point(18' 37);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToFolder.Location = new System.Drawing.Point(18' 37);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToFolder.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToFolder.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToFolder.TabIndex = 6;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToFolder.Location = new System.Drawing.Point(18' 8);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToFolder.Location = new System.Drawing.Point(18' 8);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToFolder.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToFolder.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToFolder.TabIndex = 5;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel6.Size = new System.Drawing.Size(110' 71);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel6.Size = new System.Drawing.Size(110' 71);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.panel6.TabIndex = 3;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToAll.Location = new System.Drawing.Point(18' 8);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToAll.Location = new System.Drawing.Point(18' 8);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToAll.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToAll.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bYesToAll.TabIndex = 7;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToAll.Location = new System.Drawing.Point(18' 37);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToAll.Location = new System.Drawing.Point(18' 37);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToAll.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToAll.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.bNoToAll.TabIndex = 8;
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(440' 233);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(440' 233);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(456' 271);
Magic Number,Fomm.PackageManager,Overwriteform,C:\repos\niveuseverto_fomm\flmm\PackageManager\Overwriteform.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(456' 271);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,AddFomodToList,The following statement contains a magic number: if (!cbGroups.Checked)        {          var lvi = new ListViewItem(new[]          {            mod.ModName' mod.HumanReadableVersion' strWebVersion' mod.Author          });          lvi.Tag = mod;          lvi.Name = mod.BaseName;          lvi.Checked = mod.IsActive;          lvi.SubItems[2].Name = "WebVersion";          lvModList.Items.Add(lvi);          return;        }
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,AddFomodToList,The following statement contains a magic number: for (var i = 0; i < groups.Count; i++)        {          if (Array.IndexOf(mod.Groups' lgroups[i]) != -1)          {            added = true;            var lvi = new ListViewItem(new[]            {              mod.ModName' mod.HumanReadableVersion' strWebVersion' mod.Author            });            lvi.Tag = mod;            lvi.Name = mod.BaseName;            lvi.Checked = mod.IsActive;            lvi.SubItems[2].Name = "WebVersion";            lvModList.Items.Add(lvi);            lvModList.Groups[i + 1].Items.Add(lvi);          }        }
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,AddFomodToList,The following statement contains a magic number: if (!added)        {          var lvi = new ListViewItem(new[]          {            mod.ModName' mod.HumanReadableVersion' strWebVersion' mod.Author          });          lvi.Tag = mod;          lvi.Name = mod.BaseName;          lvi.Checked = mod.IsActive;          lvi.SubItems[2].Name = "WebVersion";          lvModList.Items.Add(lvi);          lvModList.Groups[0].Items.Add(lvi);        }
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,bEditInfo_Click,The following statement contains a magic number: if ((new InfoEditor(mod)).ShowDialog() == DialogResult.OK)        {          if (cbGroups.Checked)          {            ReaddFomodToList(mod);          }          else          {            var lvi = lvModList.SelectedItems[0];            lvi.SubItems[0].Text = mod.ModName;            lvi.SubItems[1].Text = mod.HumanReadableVersion;            lvi.SubItems[3].Text = mod.Author;            tbModInfo.Text = mod.Description;            pictureBox1.Image = mod.GetScreenshotImage();          }          UpdateModStateText();        }
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,lvModList_ColumnClick,The following statement contains a magic number: switch (e.Column)        {          case 0:            cmbSortOrder.SelectedIndex = 1;            break;          case 2:            cmbSortOrder.SelectedIndex = 2;            break;        }
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,lvModList_ColumnClick,The following statement contains a magic number: switch (e.Column)        {          case 0:            cmbSortOrder.SelectedIndex = 1;            break;          case 2:            cmbSortOrder.SelectedIndex = 2;            break;        }
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(12' 27);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(12' 27);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(475' 560);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(475' 560);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 388;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 18;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.lvModList.Size = new System.Drawing.Size(475' 388);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.lvModList.Size = new System.Drawing.Size(475' 388);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.fomodContextMenu.Size = new System.Drawing.Size(147' 92);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.fomodContextMenu.Size = new System.Drawing.Size(147' 92);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.visitWebsiteToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.visitWebsiteToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.emailAuthorToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.emailAuthorToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.fomodStatusToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.fomodStatusToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.deleteToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.deleteToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.tbModInfo.Size = new System.Drawing.Size(475' 168);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.tbModInfo.Size = new System.Drawing.Size(475' 168);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(493' 27);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(493' 27);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(120' 90);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(120' 90);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.TabIndex = 16;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditScript.Location = new System.Drawing.Point(493' 385);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditScript.Location = new System.Drawing.Point(493' 385);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditScript.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditScript.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditScript.TabIndex = 9;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butViewReadme.Location = new System.Drawing.Point(493' 356);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butViewReadme.Location = new System.Drawing.Point(493' 356);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butViewReadme.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butViewReadme.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butViewReadme.TabIndex = 8;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditInfo.Location = new System.Drawing.Point(493' 414);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditInfo.Location = new System.Drawing.Point(493' 414);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditInfo.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditInfo.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditInfo.TabIndex = 10;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bActivate.Location = new System.Drawing.Point(493' 196);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bActivate.Location = new System.Drawing.Point(493' 196);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bActivate.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bActivate.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bActivate.TabIndex = 3;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cbGroups.Location = new System.Drawing.Point(493' 487);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cbGroups.Location = new System.Drawing.Point(493' 487);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cbGroups.Size = new System.Drawing.Size(97' 17);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cbGroups.Size = new System.Drawing.Size(97' 17);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cbGroups.TabIndex = 12;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditGroups.Location = new System.Drawing.Point(493' 458);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditGroups.Location = new System.Drawing.Point(493' 458);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditGroups.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditGroups.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bEditGroups.TabIndex = 11;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bActivateGroup.Location = new System.Drawing.Point(493' 254);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bActivateGroup.Location = new System.Drawing.Point(493' 254);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bActivateGroup.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bActivateGroup.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bActivateGroup.TabIndex = 5;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bDeactivateGroup.Location = new System.Drawing.Point(493' 283);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bDeactivateGroup.Location = new System.Drawing.Point(493' 283);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bDeactivateGroup.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bDeactivateGroup.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bDeactivateGroup.TabIndex = 6;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bDeactivateAll.Location = new System.Drawing.Point(493' 312);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bDeactivateAll.Location = new System.Drawing.Point(493' 312);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bDeactivateAll.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bDeactivateAll.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.bDeactivateAll.TabIndex = 7;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cmbSortOrder.Location = new System.Drawing.Point(493' 510);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cmbSortOrder.Location = new System.Drawing.Point(493' 510);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cmbSortOrder.Size = new System.Drawing.Size(120' 21);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cmbSortOrder.Size = new System.Drawing.Size(120' 21);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cmbSortOrder.TabIndex = 13;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butDeactivate.Location = new System.Drawing.Point(493' 225);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butDeactivate.Location = new System.Drawing.Point(493' 225);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butDeactivate.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butDeactivate.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butDeactivate.TabIndex = 4;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butExtractFomod.Location = new System.Drawing.Point(493' 152);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butExtractFomod.Location = new System.Drawing.Point(493' 152);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butExtractFomod.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butExtractFomod.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.butExtractFomod.TabIndex = 2;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cmsAddFomod.Size = new System.Drawing.Size(176' 114);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.cmsAddFomod.Size = new System.Drawing.Size(176' 114);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.addFOMODToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.addFOMODToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.addPFPToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.addPFPToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.createFromFolderToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.createFromFolderToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.createFOMODToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.createFOMODToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.editPFPToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.editPFPToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.sbtAddFomod.Location = new System.Drawing.Point(493' 123);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.sbtAddFomod.Location = new System.Drawing.Point(493' 123);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.sbtAddFomod.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.sbtAddFomod.Size = new System.Drawing.Size(120' 23);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.sbtAddFomod.TabIndex = 19;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(625' 24);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(625' 24);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.TabIndex = 20;
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.modListToolStripMenuItem.Size = new System.Drawing.Size(65' 20);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.modListToolStripMenuItem.Size = new System.Drawing.Size(65' 20);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.exportModListToolStripMenuItem.Size = new System.Drawing.Size(201' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.exportModListToolStripMenuItem.Size = new System.Drawing.Size(201' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.exportActiveModListToolStripMenuItem.Size = new System.Drawing.Size(201' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.exportActiveModListToolStripMenuItem.Size = new System.Drawing.Size(201' 22);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(625' 599);
Magic Number,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(625' 599);
Magic Number,Fomm.PackageManager,FomodSorter,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,Compare,The following statement contains a magic number: switch (Mode)          {            case 0:              return 0;            case 1:              return m1.BaseName.CompareTo(m2.BaseName);            case 2:              return m1.ModName.CompareTo(m2.ModName);            case 3:              return m1.Author.CompareTo(m2.Author);          }
Magic Number,Fomm.PackageManager,FomodSorter,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,Compare,The following statement contains a magic number: switch (Mode)          {            case 0:              return 0;            case 1:              return m1.BaseName.CompareTo(m2.BaseName);            case 2:              return m1.ModName.CompareTo(m2.ModName);            case 3:              return m1.Author.CompareTo(m2.Author);          }
Magic Number,Fomm.PackageManager,ViewReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\ViewReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,Fomm.PackageManager,ViewReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\ViewReadmeForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFromSourceBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFromSourceBuilder.cs,DoGenerateFomod,The following statement contains a magic number: ProgressDialog.OverallProgressMaximum = 6;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFromSourceBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFromSourceBuilder.cs,DescendToFomodFolder,The following statement contains a magic number: ProgressDialog.ItemProgressMaximum = 50;
Magic Number,Fomm.PackageManager.FomodBuilder,NewFomodBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\NewFomodBuilder.cs,DoGenerateFomod,The following statement contains a magic number: var intBaseStepCount = 7;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlHeader.Size = new System.Drawing.Size(595' 36);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlHeader.Size = new System.Drawing.Size(595' 36);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(131' 19);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(131' 19);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Location = new System.Drawing.Point(0' 403);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Size = new System.Drawing.Size(595' 39);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Size = new System.Drawing.Size(595' 39);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(427' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(427' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(508' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(508' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtcFomodData.Location = new System.Drawing.Point(0' 36);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtcFomodData.Size = new System.Drawing.Size(595' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtcFomodData.Size = new System.Drawing.Size(595' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtcFomodData.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpDownloadLocations.Location = new System.Drawing.Point(150' 0);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpDownloadLocations.Size = new System.Drawing.Size(445' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpDownloadLocations.Size = new System.Drawing.Size(445' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpDownloadLocations.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.sdsDownloadLocations.Location = new System.Drawing.Point(0' 115);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.sdsDownloadLocations.Padding = new System.Windows.Forms.Padding(6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.sdsDownloadLocations.Size = new System.Drawing.Size(445' 252);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.sdsDownloadLocations.Size = new System.Drawing.Size(445' 252);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.sdsDownloadLocations.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Location = new System.Drawing.Point(0' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Padding = new System.Windows.Forms.Padding(5);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Size = new System.Drawing.Size(445' 98);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Size = new System.Drawing.Size(445' 98);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel5.TabIndex = 4;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel2.Location = new System.Drawing.Point(5' 62);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel2.Location = new System.Drawing.Point(5' 62);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel2.Size = new System.Drawing.Size(435' 31);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel2.Size = new System.Drawing.Size(435' 31);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel1.Location = new System.Drawing.Point(5' 5);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel1.Location = new System.Drawing.Point(5' 5);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel1.Size = new System.Drawing.Size(435' 57);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel1.Size = new System.Drawing.Size(435' 57);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size(445' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size(445' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel4.TabIndex = 3;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(247' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(247' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpSources.Location = new System.Drawing.Point(150' 0);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpSources.Size = new System.Drawing.Size(445' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpSources.Size = new System.Drawing.Size(445' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.ffsFileStructure.Location = new System.Drawing.Point(0' 78);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.ffsFileStructure.Padding = new System.Windows.Forms.Padding(6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.ffsFileStructure.Size = new System.Drawing.Size(445' 289);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.ffsFileStructure.Size = new System.Drawing.Size(445' 289);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(445' 78);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(445' 78);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(379' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(379' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 33);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 33);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(186' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(186' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxFomodFileName.Location = new System.Drawing.Point(6' 49);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxFomodFileName.Location = new System.Drawing.Point(6' 49);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxFomodFileName.Size = new System.Drawing.Size(416' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxFomodFileName.Size = new System.Drawing.Size(416' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpHowTo.PageIndex = 5;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpHowTo.Size = new System.Drawing.Size(595' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpHowTo.Size = new System.Drawing.Size(595' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpHowTo.TabIndex = 7;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel7.Location = new System.Drawing.Point(0' 43);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel7.Padding = new System.Windows.Forms.Padding(6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel7.Size = new System.Drawing.Size(595' 324);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel7.Size = new System.Drawing.Size(595' 324);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel7.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxHowTo.Location = new System.Drawing.Point(6' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxHowTo.Location = new System.Drawing.Point(6' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxHowTo.Size = new System.Drawing.Size(583' 312);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxHowTo.Size = new System.Drawing.Size(583' 312);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel6.Padding = new System.Windows.Forms.Padding(6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel6.Size = new System.Drawing.Size(595' 43);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel6.Size = new System.Drawing.Size(595' 43);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel3.Location = new System.Drawing.Point(6' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel3.Location = new System.Drawing.Point(6' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel3.Size = new System.Drawing.Size(583' 31);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.autosizeLabel3.Size = new System.Drawing.Size(583' 31);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpInfo.Location = new System.Drawing.Point(150' 0);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpInfo.PageIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpInfo.Size = new System.Drawing.Size(445' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpInfo.Size = new System.Drawing.Size(445' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpInfo.TabIndex = 4;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.finInfo.Size = new System.Drawing.Size(445' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.finInfo.Size = new System.Drawing.Size(445' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpReadme.PageIndex = 3;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpReadme.Size = new System.Drawing.Size(595' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpReadme.Size = new System.Drawing.Size(595' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpReadme.TabIndex = 3;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.redReadmeEditor.Location = new System.Drawing.Point(0' 75);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.redReadmeEditor.Size = new System.Drawing.Size(595' 292);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.redReadmeEditor.Size = new System.Drawing.Size(595' 292);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(595' 75);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(595' 75);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butGenerateReadme.Location = new System.Drawing.Point(358' 46);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butGenerateReadme.Location = new System.Drawing.Point(358' 46);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butGenerateReadme.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butGenerateReadme.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butGenerateReadme.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(3' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(3' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(430' 33);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(430' 33);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(171' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(171' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpOutput.PageIndex = 6;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpOutput.Size = new System.Drawing.Size(595' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpOutput.Size = new System.Drawing.Size(595' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpOutput.TabIndex = 5;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(191' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(191' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 4;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butSelectPFPFolder.Location = new System.Drawing.Point(557' 84);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butSelectPFPFolder.Location = new System.Drawing.Point(557' 84);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butSelectPFPFolder.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butSelectPFPFolder.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.butSelectPFPFolder.TabIndex = 3;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxPFPPath.Location = new System.Drawing.Point(34' 86);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxPFPPath.Location = new System.Drawing.Point(34' 86);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxPFPPath.Size = new System.Drawing.Size(517' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxPFPPath.Size = new System.Drawing.Size(517' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxPFPPath.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFP.Location = new System.Drawing.Point(16' 63);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFP.Location = new System.Drawing.Point(16' 63);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFP.Size = new System.Drawing.Size(168' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxPFP.Size = new System.Drawing.Size(168' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomod.Location = new System.Drawing.Point(16' 40);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomod.Location = new System.Drawing.Point(16' 40);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomod.Size = new System.Drawing.Size(95' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxFomod.Size = new System.Drawing.Size(95' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpScript.PageIndex = 4;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpScript.Size = new System.Drawing.Size(595' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpScript.Size = new System.Drawing.Size(595' 367);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.vtpScript.TabIndex = 6;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.fseScriptEditor.Location = new System.Drawing.Point(0' 40);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.fseScriptEditor.Size = new System.Drawing.Size(595' 327);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.fseScriptEditor.Size = new System.Drawing.Size(595' 327);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size(595' 40);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size(595' 40);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxUseScript.Location = new System.Drawing.Point(16' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxUseScript.Location = new System.Drawing.Point(16' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxUseScript.Size = new System.Drawing.Size(91' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.cbxUseScript.Size = new System.Drawing.Size(91' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(211' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(211' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(595' 442);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodBuilderForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodBuilderForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(595' 442);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.tvwFomod.Location = new System.Drawing.Point(0' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.tvwFomod.Size = new System.Drawing.Size(161' 145);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.tvwFomod.Size = new System.Drawing.Size(161' 145);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.cmsFomod.Size = new System.Drawing.Size(135' 26);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.cmsFomod.Size = new System.Drawing.Size(135' 26);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.newFolderToolStripMenuItem1.Size = new System.Drawing.Size(134' 22);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.newFolderToolStripMenuItem1.Size = new System.Drawing.Size(134' 22);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(0' 75);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(337' 165);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(337' 165);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 166;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterWidth = 10;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.sftSources.Size = new System.Drawing.Size(166' 165);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.sftSources.Size = new System.Drawing.Size(166' 165);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size(161' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size(161' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel4.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lblFomodFiles.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lblFomodFiles.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lblFomodFiles.Size = new System.Drawing.Size(77' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lblFomodFiles.Size = new System.Drawing.Size(77' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.cmsFomodNode.Size = new System.Drawing.Size(153' 92);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.cmsFomodNode.Size = new System.Drawing.Size(153' 92);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.renameToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.renameToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.deleteToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.deleteToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.nodeNewFolderToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.nodeNewFolderToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(337' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(337' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lnkHelp.Size = new System.Drawing.Size(58' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lnkHelp.Size = new System.Drawing.Size(58' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.rtbHelp.Location = new System.Drawing.Point(0' 17);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.rtbHelp.Size = new System.Drawing.Size(337' 58);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.rtbHelp.Size = new System.Drawing.Size(337' 58);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(337' 240);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(337' 240);
Magic Number,Fomm.PackageManager.FomodBuilder,FomodGenerator,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodGenerator.cs,CheckFileName,The following statement contains a magic number: for (var i = 2; i < 999 && File.Exists(strNewPath); i++)        {          strNewPath = String.Format("{0} ({1}){2}"' Path.ChangeExtension(newpath' null)' i' strExtension);        }
Magic Number,Fomm.PackageManager.FomodBuilder,FomodGenerator,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodGenerator.cs,CheckFileName,The following statement contains a magic number: for (var i = 2; i < 999 && File.Exists(strNewPath); i++)        {          strNewPath = String.Format("{0} ({1}){2}"' Path.ChangeExtension(newpath' null)' i' strExtension);        }
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,BuildPFP,The following statement contains a magic number: if (strVersion.Length > 8)        {          strVersion = p_strMachineVersion;        }
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,DoGenerateFomod,The following statement contains a magic number: var intBaseStepCount = 8;
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,The following statement contains a magic number: AppendWrappedFormat(stbHowTo'                            "{0}) If you are using FOMM 0.12.0 or newer' proceed to Step {1}' otherwise proceed to Step {2}."'                            intStepCounter++' intStepCounter' intStepCounter + 8).AppendLine().AppendLine();
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,The following statement contains a magic number: if ((p_fscScript != null) && (p_fscScript.Type == FomodScriptType.XMLConfig))        {          var strXMLVersion = Parser.GetConfigVersion(p_fscScript.Text);          string strMinFOMMVersion = null;          switch (strXMLVersion)          {            case "1.0":              strMinFOMMVersion = "0.11.5";              break;            case "2.0":              strMinFOMMVersion = "0.11.7";              break;            case "3.0":              strMinFOMMVersion = "0.11.9";              break;            case "4.0":              strMinFOMMVersion = "0.12.4";              break;            case "5.0":              strMinFOMMVersion = "0.13.0";              break;          }          AppendWrappedFormat(stbHowTo'                              "{0}) If you are using FOMM {1} or newer' proceed to Step {2}' otherwise proceed to Step {3}."'                              intStepCounter++' strMinFOMMVersion' intStepCounter + 2' intStepCounter).AppendLine();          stbHowTo.AppendLine();          AppendWrappedFormat(stbHowTo' "{0}) Download the 'Old FOMM Compatibility' file."' intStepCounter++).AppendLine();          AppendWrappedFormat(stbHowTo'                              "{0}) In the file you downloaded in Step {1} is a 'fomod' folder. Copy the contents of that folder into the '{2}/fomod' folder you created in Step {3}."'                              intStepCounter++' intStepCounter - 2' p_strModBaseName' intCreateFomodFolderStep)            .AppendLine();          stbHowTo.AppendLine();        }
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,The following statement contains a magic number: if ((p_fscScript != null) && (p_fscScript.Type == FomodScriptType.XMLConfig))        {          var strXMLVersion = Parser.GetConfigVersion(p_fscScript.Text);          string strMinFOMMVersion = null;          switch (strXMLVersion)          {            case "1.0":              strMinFOMMVersion = "0.11.5";              break;            case "2.0":              strMinFOMMVersion = "0.11.7";              break;            case "3.0":              strMinFOMMVersion = "0.11.9";              break;            case "4.0":              strMinFOMMVersion = "0.12.4";              break;            case "5.0":              strMinFOMMVersion = "0.13.0";              break;          }          AppendWrappedFormat(stbHowTo'                              "{0}) If you are using FOMM {1} or newer' proceed to Step {2}' otherwise proceed to Step {3}."'                              intStepCounter++' strMinFOMMVersion' intStepCounter + 2' intStepCounter).AppendLine();          stbHowTo.AppendLine();          AppendWrappedFormat(stbHowTo' "{0}) Download the 'Old FOMM Compatibility' file."' intStepCounter++).AppendLine();          AppendWrappedFormat(stbHowTo'                              "{0}) In the file you downloaded in Step {1} is a 'fomod' folder. Copy the contents of that folder into the '{2}/fomod' folder you created in Step {3}."'                              intStepCounter++' intStepCounter - 2' p_strModBaseName' intCreateFomodFolderStep)            .AppendLine();          stbHowTo.AppendLine();        }
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,AppendWrappedFormat,The following statement contains a magic number: var intWidth = 80;
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,ShowHTML,The following statement contains a magic number: frmHTMLPreview.Size = new Size(500' 500);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,ShowHTML,The following statement contains a magic number: frmHTMLPreview.Size = new Size(500' 500);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(118' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(118' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 48);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 48);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(100' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(100' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxPFP.Location = new System.Drawing.Point(12' 25);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxPFP.Location = new System.Drawing.Point(12' 25);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxPFP.Size = new System.Drawing.Size(374' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxPFP.Size = new System.Drawing.Size(374' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxSources.Location = new System.Drawing.Point(12' 64);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxSources.Location = new System.Drawing.Point(12' 64);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxSources.Size = new System.Drawing.Size(374' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxSources.Size = new System.Drawing.Size(374' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxSources.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butPFP.Location = new System.Drawing.Point(392' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butPFP.Location = new System.Drawing.Point(392' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butPFP.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butPFP.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butSources.Location = new System.Drawing.Point(392' 62);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butSources.Location = new System.Drawing.Point(392' 62);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butSources.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butSources.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butSources.TabIndex = 3;
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(262' 101);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(262' 101);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.TabIndex = 4;
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(343' 101);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(343' 101);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.TabIndex = 5;
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(436' 135);
Magic Number,Fomm.PackageManager.FomodBuilder,PremadeFomodPackForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(436' 135);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(486' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(486' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lnkHelp.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lnkHelp.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lnkHelp.Size = new System.Drawing.Size(58' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lnkHelp.Size = new System.Drawing.Size(58' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(0' 120);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(486' 256);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(486' 256);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 238;
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterWidth = 10;
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(238' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(238' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(83' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(83' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.rtbHelp.Location = new System.Drawing.Point(0' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.rtbHelp.Size = new System.Drawing.Size(486' 100);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.rtbHelp.Size = new System.Drawing.Size(486' 100);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Location = new System.Drawing.Point(0' 376);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size(486' 33);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size(486' 33);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.panel3.TabIndex = 3;
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 9);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 9);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(85' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(85' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.cbxFormat.Location = new System.Drawing.Point(94' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.cbxFormat.Location = new System.Drawing.Point(94' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.cbxFormat.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.cbxFormat.Size = new System.Drawing.Size(121' 21);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.sftSources.Size = new System.Drawing.Size(238' 256);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.sftSources.Size = new System.Drawing.Size(238' 256);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lvwReadmeFiles.Location = new System.Drawing.Point(0' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lvwReadmeFiles.Size = new System.Drawing.Size(238' 236);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.lvwReadmeFiles.Size = new System.Drawing.Size(238' 236);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.chdFileName.Width = 200;
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(486' 409);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeFileSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeFileSelector.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(486' 409);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(0' 296);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(418' 42);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(418' 42);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(331' 7);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(331' 7);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(250' 7);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(250' 7);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.rfsSelector.Size = new System.Drawing.Size(418' 296);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.rfsSelector.Size = new System.Drawing.Size(418' 296);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(418' 338);
Magic Number,Fomm.PackageManager.FomodBuilder,ReadmeGeneratorForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\ReadmeGeneratorForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(418' 338);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceDownloadSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceDownloadSelector.cs,InitializeComponent,The following statement contains a magic number: this.dgvSourceList.Size = new System.Drawing.Size(544' 294);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceDownloadSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceDownloadSelector.cs,InitializeComponent,The following statement contains a magic number: this.dgvSourceList.Size = new System.Drawing.Size(544' 294);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceDownloadSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceDownloadSelector.cs,InitializeComponent,The following statement contains a magic number: this.clmURL.Width = 300;
Magic Number,Fomm.PackageManager.FomodBuilder,SourceDownloadSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceDownloadSelector.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(544' 294);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceDownloadSelector,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceDownloadSelector.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(544' 294);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(0' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(229' 34);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(229' 34);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.butAddFolder.Location = new System.Drawing.Point(84' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.butAddFolder.Location = new System.Drawing.Point(84' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.butAddFolder.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.butAddFolder.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.butAddFiles.Location = new System.Drawing.Point(3' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.butAddFiles.Location = new System.Drawing.Point(3' 6);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.butAddFiles.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.butAddFiles.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size(229' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size(229' 20);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.panel3.TabIndex = 2;
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 3);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(77' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(77' 13);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.tvwSource.Location = new System.Drawing.Point(0' 54);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.tvwSource.Size = new System.Drawing.Size(229' 163);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.tvwSource.Size = new System.Drawing.Size(229' 163);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(229' 217);
Magic Number,Fomm.PackageManager.FomodBuilder,SourceFileTree,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\SourceFileTree.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(229' 217);
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,InstallLogWatcher_Changed,The following statement contains a magic number: for (var i = 0; i < 3;)        {          try          {            Load();            break;          }          catch (IOException)          {            Thread.Sleep(250);            i++;          }        }
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,InstallLogWatcher_Changed,The following statement contains a magic number: for (var i = 0; i < 3;)        {          try          {            Load();            break;          }          catch (IOException)          {            Thread.Sleep(250);            i++;          }        }
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,CreateIniEditNode,The following statement contains a magic number: lock (iniEditsNode)        {          var xndIni =            iniEditsNode.SelectSingleNode("ini[@file=\"" + p_strFile + "\" and @section=\"" + p_strSection +                                          "\" and @key=\"" + p_strKey + "\"]");          if (xndIni == null)          {            xndIni = iniEditsNode.AppendChild(Document.CreateElement("ini"));            xndIni.Attributes.Append(Document.CreateAttribute("file"));            xndIni.Attributes.Append(Document.CreateAttribute("section"));            xndIni.Attributes.Append(Document.CreateAttribute("key"));            xndIni.Attributes[0].Value = p_strFile;            xndIni.Attributes[1].Value = p_strSection;            xndIni.Attributes[2].Value = p_strKey;            p_xndModList = xndIni.AppendChild(Document.CreateElement("installingMods"));          }          else          {            p_xndModList = xndIni.SelectSingleNode("installingMods");            xndInstallingMod = p_xndModList.SelectSingleNode("mod[@key=\"" + p_strModKey + "\"]");            if (xndInstallingMod != null)            {              p_xndModList.RemoveChild(xndInstallingMod);            }          }          if (xndInstallingMod == null)          {            xndInstallingMod = Document.CreateElement("mod");            xndInstallingMod.Attributes.Append(Document.CreateAttribute("key"));            xndInstallingMod.Attributes["key"].InnerText = p_strModKey;          }          xndInstallingMod.InnerText = p_strValue;        }
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,GetPreviousGameSpecifcValueData,The following statement contains a magic number: var bteData = new byte[strData.Length/2];
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,GetPreviousGameSpecifcValueData,The following statement contains a magic number: for (var i = 0; i < bteData.Length; i++)        {          bteData[i] = byte.Parse("" + strData[i*2] + strData[i*2 + 1]'                                  NumberStyles.AllowHexSpecifier);        }
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,GetPreviousGameSpecifcValueData,The following statement contains a magic number: for (var i = 0; i < bteData.Length; i++)        {          bteData[i] = byte.Parse("" + strData[i*2] + strData[i*2 + 1]'                                  NumberStyles.AllowHexSpecifier);        }
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,CreateGameSpecificValueEditNode,The following statement contains a magic number: lock (gameSpecificValueEditsNode)        {          var xndGameSpecificValueEdit =            gameSpecificValueEditsNode.SelectSingleNode("edit[@key=\"" + strLoweredValueKey + "\"]");          if (xndGameSpecificValueEdit == null)          {            xndGameSpecificValueEdit = gameSpecificValueEditsNode.AppendChild(Document.CreateElement("edit"));            xndGameSpecificValueEdit.Attributes.Append(Document.CreateAttribute("key"));            xndGameSpecificValueEdit.Attributes[0].Value = strLoweredValueKey;            p_xndModList = xndGameSpecificValueEdit.AppendChild(Document.CreateElement("installingMods"));          }          else          {            p_xndModList = xndGameSpecificValueEdit.SelectSingleNode("installingMods");            xndInstallingMod = p_xndModList.SelectSingleNode("mod[@key=\"" + p_strModKey + "\"]");            if (xndInstallingMod != null)            {              p_xndModList.RemoveChild(xndInstallingMod);            }          }          if (xndInstallingMod == null)          {            xndInstallingMod = Document.CreateElement("mod");            xndInstallingMod.Attributes.Append(Document.CreateAttribute("key"));            xndInstallingMod.Attributes["key"].InnerText = p_strModKey;          }          var stbData = new StringBuilder(p_bteData.Length*2);          foreach (var b in p_bteData)          {            stbData.Append(b.ToString("x2"));          }          xndInstallingMod.InnerText = stbData.ToString();        }
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,ReplaceGameSpecificValueEdit,The following statement contains a magic number: if (xndInstallingMod != null)        {          var stbData = new StringBuilder(p_bteData.Length*2);          foreach (var b in p_bteData)          {            stbData.Append(b.ToString("x2"));          }          xndInstallingMod.InnerText = stbData.ToString();        }        else        {          AddGameSpecificValueEdit(p_strModName' p_strValueKey' p_bteData);        }
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,GetMergeModule,The following statement contains a magic number: foreach (XmlNode xndGameSpecificValueEdit in xnlComponentMods)        {          xndComponent = xndGameSpecificValueEdit.ParentNode.ParentNode;            var strData = xndGameSpecificValueEdit.InnerText;          var bteData = new byte[strData.Length/2];          for (var i = 0; i < bteData.Length; i++)          {            bteData[i] = byte.Parse("" + strData[i*2] + strData[i*2 + 1]'                                    NumberStyles.AllowHexSpecifier);          }            ilmMergeModule.AddGameSpecificValueEdit(xndComponent.Attributes["key"].InnerText' bteData);        }
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,GetMergeModule,The following statement contains a magic number: foreach (XmlNode xndGameSpecificValueEdit in xnlComponentMods)        {          xndComponent = xndGameSpecificValueEdit.ParentNode.ParentNode;            var strData = xndGameSpecificValueEdit.InnerText;          var bteData = new byte[strData.Length/2];          for (var i = 0; i < bteData.Length; i++)          {            bteData[i] = byte.Parse("" + strData[i*2] + strData[i*2 + 1]'                                    NumberStyles.AllowHexSpecifier);          }            ilmMergeModule.AddGameSpecificValueEdit(xndComponent.Attributes["key"].InnerText' bteData);        }
Magic Number,Fomm.PackageManager.ModInstallLog,InstallLog,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstallLog\InstallLog.cs,GetMergeModule,The following statement contains a magic number: foreach (XmlNode xndGameSpecificValueEdit in xnlComponentMods)        {          xndComponent = xndGameSpecificValueEdit.ParentNode.ParentNode;            var strData = xndGameSpecificValueEdit.InnerText;          var bteData = new byte[strData.Length/2];          for (var i = 0; i < bteData.Length; i++)          {            bteData[i] = byte.Parse("" + strData[i*2] + strData[i*2 + 1]'                                    NumberStyles.AllowHexSpecifier);          }            ilmMergeModule.AddGameSpecificValueEdit(xndComponent.Attributes["key"].InnerText' bteData);        }
Magic Number,Fomm.PackageManager.Upgrade,ModUpgrader,C:\repos\niveuseverto_fomm\flmm\PackageManager\Upgrade\ModUpgrader.cs,ReconcileDifferences,The following statement contains a magic number: m_bwdProgress.OverallProgressMaximum = 3;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,adjustListViewColumnWidth,The following statement contains a magic number: lvwPlugins.Columns[0].Width = lvwPlugins.Width - SystemInformation.VerticalScrollBarWidth - 6;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.sptPlugins.Location = new System.Drawing.Point(0' 47);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.sptPlugins.Size = new System.Drawing.Size(587' 396);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.sptPlugins.Size = new System.Drawing.Size(587' 396);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.sptPlugins.SplitterDistance = 195;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.lvwPlugins.Size = new System.Drawing.Size(195' 396);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.lvwPlugins.Size = new System.Drawing.Size(195' 396);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.sptImage.Size = new System.Drawing.Size(388' 396);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.sptImage.Size = new System.Drawing.Size(388' 396);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.sptImage.SplitterDistance = 129;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.sptImage.TabIndex = 101;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(388' 129);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(388' 129);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.tbxDescription.Location = new System.Drawing.Point(3' 16);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.tbxDescription.Location = new System.Drawing.Point(3' 16);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.tbxDescription.Size = new System.Drawing.Size(382' 110);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.tbxDescription.Size = new System.Drawing.Size(382' 110);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.pbxImage.Size = new System.Drawing.Size(388' 263);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.pbxImage.Size = new System.Drawing.Size(388' 263);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(612' 588);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(612' 588);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,updateLayout,The following statement contains a magic number: m_tlbLabel.Top = (ClientSize.Height - m_tlbLabel.Height)/2;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,updateLayout,The following statement contains a magic number: switch (m_tpsPosition)        {          case TextPosition.Left:            m_tlbLabel.Left = 15;            m_tlbLabel.Anchor = AnchorStyles.Top | AnchorStyles.Left;            break;          case TextPosition.RightOfImage:            m_tlbLabel.Left = m_pbxImage.Width + 15;            m_tlbLabel.Anchor = AnchorStyles.Top | AnchorStyles.Left;            break;          default:            m_tlbLabel.Left = ClientSize.Width - m_tlbLabel.Width - 15;            m_tlbLabel.Anchor = AnchorStyles.Top | AnchorStyles.Right;            break;        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,updateLayout,The following statement contains a magic number: switch (m_tpsPosition)        {          case TextPosition.Left:            m_tlbLabel.Left = 15;            m_tlbLabel.Anchor = AnchorStyles.Top | AnchorStyles.Left;            break;          case TextPosition.RightOfImage:            m_tlbLabel.Left = m_pbxImage.Width + 15;            m_tlbLabel.Anchor = AnchorStyles.Top | AnchorStyles.Left;            break;          default:            m_tlbLabel.Left = ClientSize.Width - m_tlbLabel.Width - 15;            m_tlbLabel.Anchor = AnchorStyles.Top | AnchorStyles.Right;            break;        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,updateLayout,The following statement contains a magic number: switch (m_tpsPosition)        {          case TextPosition.Left:            m_tlbLabel.Left = 15;            m_tlbLabel.Anchor = AnchorStyles.Top | AnchorStyles.Left;            break;          case TextPosition.RightOfImage:            m_tlbLabel.Left = m_pbxImage.Width + 15;            m_tlbLabel.Anchor = AnchorStyles.Top | AnchorStyles.Left;            break;          default:            m_tlbLabel.Left = ClientSize.Width - m_tlbLabel.Width - 15;            m_tlbLabel.Anchor = AnchorStyles.Top | AnchorStyles.Right;            break;        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,loadImage,The following statement contains a magic number: if (m_bmpOriginalImage == null)        {          m_bmpOriginalImage = new Bitmap(120' 90);          using (var g = Graphics.FromImage(m_bmpOriginalImage))          {            g.FillRectangle(new SolidBrush(BackColor)' 0' 0' 120' 90);          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,loadImage,The following statement contains a magic number: if (m_bmpOriginalImage == null)        {          m_bmpOriginalImage = new Bitmap(120' 90);          using (var g = Graphics.FromImage(m_bmpOriginalImage))          {            g.FillRectangle(new SolidBrush(BackColor)' 0' 0' 120' 90);          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,loadImage,The following statement contains a magic number: if (m_bmpOriginalImage == null)        {          m_bmpOriginalImage = new Bitmap(120' 90);          using (var g = Graphics.FromImage(m_bmpOriginalImage))          {            g.FillRectangle(new SolidBrush(BackColor)' 0' 0' 120' 90);          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,loadImage,The following statement contains a magic number: if (m_bmpOriginalImage == null)        {          m_bmpOriginalImage = new Bitmap(120' 90);          using (var g = Graphics.FromImage(m_bmpOriginalImage))          {            g.FillRectangle(new SolidBrush(BackColor)' 0' 0' 120' 90);          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,Fade,The following statement contains a magic number: for (var i = 0; i < bmpImage.Width; i += 10)        {          for (var j = 0; j < bmpImage.Height; j += 10)          {            var clrPixel = bmpImage.GetPixel(i' j);            intR += clrPixel.R;            intG += clrPixel.G;            intB += clrPixel.B;            intCounter++;          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,Fade,The following statement contains a magic number: for (var i = 0; i < bmpImage.Width; i += 10)        {          for (var j = 0; j < bmpImage.Height; j += 10)          {            var clrPixel = bmpImage.GetPixel(i' j);            intR += clrPixel.R;            intG += clrPixel.G;            intB += clrPixel.B;            intCounter++;          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,Fade,The following statement contains a magic number: pbxImage.BackColor = Color.FromArgb(255' intR' intG' intB);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,Fade,The following statement contains a magic number: var intRange = bmpImage.Width/4;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,Fade,The following statement contains a magic number: var bmpGradient = new Bitmap(256*GRADIENT_SIZE_MULT' bmpImage.Height);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,Fade,The following statement contains a magic number: if (m_tpsPosition == TextPosition.Left)        {          for (var i = 0; i < bmpImage.Height; i++)          {            for (var j = 0; j < 256*GRADIENT_SIZE_MULT; j += GRADIENT_SIZE_MULT)            {              for (var n = 0; n < GRADIENT_SIZE_MULT; n++)              {                bmpGradient.SetPixel(j + n' i' Color.FromArgb(j/GRADIENT_SIZE_MULT' intR' intG' intB));              }            }          }        }        else        {          for (var i = 0; i < bmpImage.Height; i++)          {            for (var j = 0; j < 256*GRADIENT_SIZE_MULT; j += GRADIENT_SIZE_MULT)            {              for (var n = 0; n < GRADIENT_SIZE_MULT; n++)              {                bmpGradient.SetPixel(j + n' i' Color.FromArgb(255 - j/GRADIENT_SIZE_MULT' intR' intG' intB));              }            }          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,Fade,The following statement contains a magic number: if (m_tpsPosition == TextPosition.Left)        {          for (var i = 0; i < bmpImage.Height; i++)          {            for (var j = 0; j < 256*GRADIENT_SIZE_MULT; j += GRADIENT_SIZE_MULT)            {              for (var n = 0; n < GRADIENT_SIZE_MULT; n++)              {                bmpGradient.SetPixel(j + n' i' Color.FromArgb(j/GRADIENT_SIZE_MULT' intR' intG' intB));              }            }          }        }        else        {          for (var i = 0; i < bmpImage.Height; i++)          {            for (var j = 0; j < 256*GRADIENT_SIZE_MULT; j += GRADIENT_SIZE_MULT)            {              for (var n = 0; n < GRADIENT_SIZE_MULT; n++)              {                bmpGradient.SetPixel(j + n' i' Color.FromArgb(255 - j/GRADIENT_SIZE_MULT' intR' intG' intB));              }            }          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,HeaderPanel,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\HeaderPanel.cs,Fade,The following statement contains a magic number: if (m_tpsPosition == TextPosition.Left)        {          for (var i = 0; i < bmpImage.Height; i++)          {            for (var j = 0; j < 256*GRADIENT_SIZE_MULT; j += GRADIENT_SIZE_MULT)            {              for (var n = 0; n < GRADIENT_SIZE_MULT; n++)              {                bmpGradient.SetPixel(j + n' i' Color.FromArgb(j/GRADIENT_SIZE_MULT' intR' intG' intB));              }            }          }        }        else        {          for (var i = 0; i < bmpImage.Height; i++)          {            for (var j = 0; j < 256*GRADIENT_SIZE_MULT; j += GRADIENT_SIZE_MULT)            {              for (var n = 0; n < GRADIENT_SIZE_MULT; n++)              {                bmpGradient.SetPixel(j + n' i' Color.FromArgb(255 - j/GRADIENT_SIZE_MULT' intR' intG' intB));              }            }          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.Location = new System.Drawing.Point(0' 443);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.Size = new System.Drawing.Size(587' 39);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.Size = new System.Drawing.Size(587' 39);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butBack.Location = new System.Drawing.Point(342' 4);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butBack.Location = new System.Drawing.Point(342' 4);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butBack.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butBack.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butBack.TabIndex = 2;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butNext.Location = new System.Drawing.Point(419' 4);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butNext.Location = new System.Drawing.Point(419' 4);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butNext.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butNext.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(500' 4);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(500' 4);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.hplTitle.Size = new System.Drawing.Size(587' 47);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.hplTitle.Size = new System.Drawing.Size(587' 47);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.hplTitle.TabIndex = 21;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlWizardSteps.Location = new System.Drawing.Point(0' 47);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlWizardSteps.Size = new System.Drawing.Size(587' 396);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlWizardSteps.Size = new System.Drawing.Size(587' 396);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlWizardSteps.TabIndex = 22;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(587' 482);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,OptionsForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(587' 482);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall,XmlConfiguredScript,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\XmlConfiguredScript.cs,InstallPluginFile,The following statement contains a magic number: if (plfFile.IsFolder)        {          CopyDataFolder(strSource' strDest);            if (m_bwdProgress.Cancelled())          {            return false;          }            //if the destination length is greater than 0' then nothing in          // this folder is directly in the Data folder as so cannot be          // activated          if (strDest.Length == 0)          {            var lstFiles = GetFomodFolderFileList(strSource);            m_bwdProgress.ItemMessage = "Activating " + (String.IsNullOrEmpty(strDest) ? strSource : strDest);            m_bwdProgress.ItemProgress = 0;            m_bwdProgress.ItemProgressMaximum = lstFiles.Count;              if (!strSource.EndsWith("/"))            {              strSource += "/";            }            foreach (var strFile in lstFiles)            {              if (strFile.ToLowerInvariant().EndsWith(".esm") || strFile.ToLowerInvariant().EndsWith(".esp"))              {                var strNewFileName = strFile.Substring(strSource.Length' strFile.Length - strSource.Length);                m_misInstallScript.SetPluginActivation(strNewFileName' booActivate);              }              if (m_bwdProgress.Cancelled())              {                return false;              }              m_bwdProgress.StepItemProgress();            }          }        }        else        {          m_bwdProgress.ItemProgress = 0;          m_bwdProgress.ItemProgressMaximum = 2;            m_misInstallScript.CopyDataFile(strSource' strDest);            m_bwdProgress.StepItemProgress();            if (String.IsNullOrEmpty(strDest))          {            if (strSource.ToLowerInvariant().EndsWith(".esm") || strSource.ToLowerInvariant().EndsWith(".esp"))            {              m_misInstallScript.SetPluginActivation(strSource' booActivate);            }          }          else if (strDest.ToLowerInvariant().EndsWith(".esm") || strDest.ToLowerInvariant().EndsWith(".esp"))          {            m_misInstallScript.SetPluginActivation(strDest' booActivate);          }            m_bwdProgress.StepItemProgress();        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser30,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser30.cs,GetHeaderInfo,The following statement contains a magic number: if (xndImage != null)        {          var strImagePath = xndImage.Attributes["path"].Value;          var imgImage = String.IsNullOrEmpty(strImagePath)            ? Fomod.GetScreenshotImage()            : new Bitmap(Fomod.GetImage(strImagePath));          var booShowImage = Boolean.Parse(xndImage.Attributes["showImage"].Value) && (imgImage != null);          var booShowFade = Boolean.Parse(xndImage.Attributes["showFade"].Value);          var intHeight = Int32.Parse(xndImage.Attributes["height"].Value);          if ((intHeight == -1) && booShowImage)          {            intHeight = 75;          }          return new HeaderInfo(strTitle' clrColour' tpsPosition' imgImage' booShowImage' booShowFade' intHeight);        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser30,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser30.cs,GetHeaderInfo,The following statement contains a magic number: return new HeaderInfo(strTitle' clrColour' tpsPosition' imgScreenshot' imgScreenshot != null' true'                              (imgScreenshot != null) ? 75 : -1);
Magic Number,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser.cs,GetParser,The following statement contains a magic number: var intStartPos = strSchemaName.LastIndexOf("modconfig") + 9;
Magic Number,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser.cs,GetParser,The following statement contains a magic number: if (intStartPos > 8)        {          var intLength = strSchemaName.Length - intStartPos - 4;          if (intLength > 0)          {            strConfigVersion = strSchemaName.Substring(intStartPos' intLength);          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser.cs,GetParser,The following statement contains a magic number: if (intStartPos > 8)        {          var intLength = strSchemaName.Length - intStartPos - 4;          if (intLength > 0)          {            strConfigVersion = strSchemaName.Substring(intStartPos' intLength);          }        }
Magic Number,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser10,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser10.cs,GetHeaderInfo,The following statement contains a magic number: return new HeaderInfo(XmlConfig.SelectSingleNode("/config/moduleName").InnerText'                              Color.FromKnownColor(KnownColor.ControlText)' TextPosition.Left' imgScreenshot'                              imgScreenshot != null' true' (imgScreenshot != null) ? 75 : -1);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(42' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(42' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxMaster.Location = new System.Drawing.Point(60' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxMaster.Location = new System.Drawing.Point(60' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxMaster.Size = new System.Drawing.Size(387' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.tbxMaster.Size = new System.Drawing.Size(387' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butChooseMaster.Location = new System.Drawing.Point(453' 10);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butChooseMaster.Location = new System.Drawing.Point(453' 10);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butChooseMaster.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butChooseMaster.Size = new System.Drawing.Size(26' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butChooseMaster.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(323' 39);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Location = new System.Drawing.Point(323' 39);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butOK.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(404' 39);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Location = new System.Drawing.Point(404' 39);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.butCancel.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(491' 73);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,AddMasterForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\AddMasterForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(491' 73);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,GroupEditor,The following statement contains a magic number: tbX.Text = TypeConverter.h2ss(data[2]' data[3]).ToString();
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,GroupEditor,The following statement contains a magic number: tbX.Text = TypeConverter.h2ss(data[2]' data[3]).ToString();
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,GroupEditor,The following statement contains a magic number: tbBlock.Text = TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]).ToString();
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,GroupEditor,The following statement contains a magic number: tbBlock.Text = TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]).ToString();
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,GroupEditor,The following statement contains a magic number: tbParent.Text = TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]).ToString("X8");
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,GroupEditor,The following statement contains a magic number: tbParent.Text = TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]).ToString("X8");
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            tbRecType.Enabled = true;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 2:          case 3:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = true;            break;          case 4:          case 5:            tbRecType.Enabled = false;            tbX.Enabled = true;            tbY.Enabled = true;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = true;            tbBlock.Enabled = false;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            tbRecType.Enabled = true;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 2:          case 3:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = true;            break;          case 4:          case 5:            tbRecType.Enabled = false;            tbX.Enabled = true;            tbY.Enabled = true;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = true;            tbBlock.Enabled = false;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            tbRecType.Enabled = true;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 2:          case 3:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = true;            break;          case 4:          case 5:            tbRecType.Enabled = false;            tbX.Enabled = true;            tbY.Enabled = true;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = true;            tbBlock.Enabled = false;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            tbRecType.Enabled = true;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 2:          case 3:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = true;            break;          case 4:          case 5:            tbRecType.Enabled = false;            tbX.Enabled = true;            tbY.Enabled = true;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = true;            tbBlock.Enabled = false;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            tbRecType.Enabled = true;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 2:          case 3:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = true;            break;          case 4:          case 5:            tbRecType.Enabled = false;            tbX.Enabled = true;            tbY.Enabled = true;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = true;            tbBlock.Enabled = false;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            tbRecType.Enabled = true;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 2:          case 3:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = true;            break;          case 4:          case 5:            tbRecType.Enabled = false;            tbX.Enabled = true;            tbY.Enabled = true;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = true;            tbBlock.Enabled = false;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            tbRecType.Enabled = true;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 2:          case 3:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = true;            break;          case 4:          case 5:            tbRecType.Enabled = false;            tbX.Enabled = true;            tbY.Enabled = true;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = true;            tbBlock.Enabled = false;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            tbRecType.Enabled = true;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 2:          case 3:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = true;            break;          case 4:          case 5:            tbRecType.Enabled = false;            tbX.Enabled = true;            tbY.Enabled = true;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = true;            tbBlock.Enabled = false;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            tbRecType.Enabled = true;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 2:          case 3:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = true;            break;          case 4:          case 5:            tbRecType.Enabled = false;            tbX.Enabled = true;            tbY.Enabled = true;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = true;            tbBlock.Enabled = false;            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (cmbGroupType.SelectedIndex)        {          case 0:            data = Encoding.ASCII.GetBytes(tbRecType.Text);            break;          case 2:          case 3:            uint block;            if (!uint.TryParse(tbBlock.Text' out block))            {              MessageBox.Show("Invalid value specified for block id");              return;            }            data = TypeConverter.i2h(block);            break;          case 4:          case 5:            short x' y;            if (!short.TryParse(tbX.Text' out x))            {              MessageBox.Show("Invalid value specified for x coord");              return;            }            if (!short.TryParse(tbY.Text' out y))            {              MessageBox.Show("Invalid value specified for y coord");              return;            }            data = new byte[4];            TypeConverter.ss2h(x' data' 2);            TypeConverter.ss2h(y' data' 0);            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            uint parent;            if (!uint.TryParse(tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))            {              MessageBox.Show("Invalid value specified for parent");              return;            }            data = TypeConverter.i2h(parent);            break;          default:            MessageBox.Show("Sanity check failed; invalid group type");            return;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,tbRecType_Leave,The following statement contains a magic number: if (tbRecType.Text.Length < 4)        {          tbRecType.Text = tbRecType.Text.PadRight(4' '_');        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,tbRecType_Leave,The following statement contains a magic number: if (tbRecType.Text.Length < 4)        {          tbRecType.Text = tbRecType.Text.PadRight(4' '_');        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.cmbGroupType.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.cmbGroupType.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.cmbGroupType.Size = new System.Drawing.Size(151' 21);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.cmbGroupType.Size = new System.Drawing.Size(151' 21);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbRecType.Location = new System.Drawing.Point(12' 39);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbRecType.Location = new System.Drawing.Point(12' 39);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbRecType.MaxLength = 4;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbRecType.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbRecType.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbBlock.Location = new System.Drawing.Point(12' 65);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbBlock.Location = new System.Drawing.Point(12' 65);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbBlock.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbBlock.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbBlock.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbX.Location = new System.Drawing.Point(12' 91);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbX.Location = new System.Drawing.Point(12' 91);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbX.MaxLength = 2;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbX.Size = new System.Drawing.Size(47' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbX.Size = new System.Drawing.Size(47' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbX.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbY.Location = new System.Drawing.Point(65' 91);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbY.Location = new System.Drawing.Point(65' 91);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbY.MaxLength = 2;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbY.Size = new System.Drawing.Size(47' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbY.Size = new System.Drawing.Size(47' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbY.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbParent.Location = new System.Drawing.Point(12' 117);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbParent.Location = new System.Drawing.Point(12' 117);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbParent.MaxLength = 8;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbParent.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbParent.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbParent.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbDateStamp.Location = new System.Drawing.Point(12' 170);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbDateStamp.Location = new System.Drawing.Point(12' 170);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbDateStamp.MaxLength = 8;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbDateStamp.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbDateStamp.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbDateStamp.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags.Location = new System.Drawing.Point(12' 196);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags.Location = new System.Drawing.Point(12' 196);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags.MaxLength = 8;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(169' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(169' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(59' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(59' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(118' 42);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(118' 42);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(94' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(94' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 9;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(118' 68);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(118' 68);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(72' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(72' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 10;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(118' 94);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(118' 94);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(66' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(66' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 11;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(118' 120);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(118' 120);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(38' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(38' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 12;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(118' 173);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(118' 173);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(58' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(58' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 13;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(118' 199);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(118' 199);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(32' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(32' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 14;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(183' 238);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(183' 238);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 15;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(102' 238);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(102' 238);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.TabIndex = 16;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 273);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 273);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,tbName_Leave,The following statement contains a magic number: if (tbName.Text.Length < 4)        {          tbName.Text = tbName.Text.PadRight(4' '_');        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,tbName_Leave,The following statement contains a magic number: if (tbName.Text.Length < 4)        {          tbName.Text = tbName.Text.PadRight(4' '_');        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (bytes.Count >= pos + 4)        {          tbFloat.Text = TypeConverter.h2f(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbFloat.Enabled = true;          tbInt.Text = TypeConverter.h2si(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbInt.Enabled = true;          bCFloat.Enabled = true;          bCInt.Enabled = true;          tbFormID.Text = TypeConverter.h2i(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString("X8");          tbFormID.Enabled = true;          bCFormID.Enabled = true;          bLookup.Enabled = true;        }        else        {          tbFloat.Enabled = false;          tbInt.Enabled = false;          bCFloat.Enabled = false;          bCInt.Enabled = false;          tbFormID.Enabled = false;          bCFormID.Enabled = false;          bLookup.Enabled = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (bytes.Count >= pos + 4)        {          tbFloat.Text = TypeConverter.h2f(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbFloat.Enabled = true;          tbInt.Text = TypeConverter.h2si(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbInt.Enabled = true;          bCFloat.Enabled = true;          bCInt.Enabled = true;          tbFormID.Text = TypeConverter.h2i(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString("X8");          tbFormID.Enabled = true;          bCFormID.Enabled = true;          bLookup.Enabled = true;        }        else        {          tbFloat.Enabled = false;          tbInt.Enabled = false;          bCFloat.Enabled = false;          bCInt.Enabled = false;          tbFormID.Enabled = false;          bCFormID.Enabled = false;          bLookup.Enabled = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (bytes.Count >= pos + 4)        {          tbFloat.Text = TypeConverter.h2f(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbFloat.Enabled = true;          tbInt.Text = TypeConverter.h2si(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbInt.Enabled = true;          bCFloat.Enabled = true;          bCInt.Enabled = true;          tbFormID.Text = TypeConverter.h2i(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString("X8");          tbFormID.Enabled = true;          bCFormID.Enabled = true;          bLookup.Enabled = true;        }        else        {          tbFloat.Enabled = false;          tbInt.Enabled = false;          bCFloat.Enabled = false;          bCInt.Enabled = false;          tbFormID.Enabled = false;          bCFormID.Enabled = false;          bLookup.Enabled = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (bytes.Count >= pos + 4)        {          tbFloat.Text = TypeConverter.h2f(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbFloat.Enabled = true;          tbInt.Text = TypeConverter.h2si(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbInt.Enabled = true;          bCFloat.Enabled = true;          bCInt.Enabled = true;          tbFormID.Text = TypeConverter.h2i(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString("X8");          tbFormID.Enabled = true;          bCFormID.Enabled = true;          bLookup.Enabled = true;        }        else        {          tbFloat.Enabled = false;          tbInt.Enabled = false;          bCFloat.Enabled = false;          bCInt.Enabled = false;          tbFormID.Enabled = false;          bCFormID.Enabled = false;          bLookup.Enabled = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (bytes.Count >= pos + 4)        {          tbFloat.Text = TypeConverter.h2f(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbFloat.Enabled = true;          tbInt.Text = TypeConverter.h2si(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbInt.Enabled = true;          bCFloat.Enabled = true;          bCInt.Enabled = true;          tbFormID.Text = TypeConverter.h2i(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString("X8");          tbFormID.Enabled = true;          bCFormID.Enabled = true;          bLookup.Enabled = true;        }        else        {          tbFloat.Enabled = false;          tbInt.Enabled = false;          bCFloat.Enabled = false;          bCInt.Enabled = false;          tbFormID.Enabled = false;          bCFormID.Enabled = false;          bLookup.Enabled = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (bytes.Count >= pos + 4)        {          tbFloat.Text = TypeConverter.h2f(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbFloat.Enabled = true;          tbInt.Text = TypeConverter.h2si(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbInt.Enabled = true;          bCFloat.Enabled = true;          bCInt.Enabled = true;          tbFormID.Text = TypeConverter.h2i(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString("X8");          tbFormID.Enabled = true;          bCFormID.Enabled = true;          bLookup.Enabled = true;        }        else        {          tbFloat.Enabled = false;          tbInt.Enabled = false;          bCFloat.Enabled = false;          bCInt.Enabled = false;          tbFormID.Enabled = false;          bCFormID.Enabled = false;          bLookup.Enabled = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (bytes.Count >= pos + 4)        {          tbFloat.Text = TypeConverter.h2f(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbFloat.Enabled = true;          tbInt.Text = TypeConverter.h2si(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString();          tbInt.Enabled = true;          bCFloat.Enabled = true;          bCInt.Enabled = true;          tbFormID.Text = TypeConverter.h2i(bytes[pos]' bytes[pos + 1]' bytes[pos + 2]' bytes[pos + 3]).ToString("X8");          tbFormID.Enabled = true;          bCFormID.Enabled = true;          bLookup.Enabled = true;        }        else        {          tbFloat.Enabled = false;          tbInt.Enabled = false;          bCFloat.Enabled = false;          bCInt.Enabled = false;          tbFormID.Enabled = false;          bCFormID.Enabled = false;          bLookup.Enabled = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (bytes.Count >= pos + 2)        {          tbWord.Text = TypeConverter.h2ss(bytes[pos]' bytes[pos + 1]).ToString();          tbWord.Enabled = true;          bCWord.Enabled = true;        }        else        {          tbWord.Enabled = false;          bCWord.Enabled = false;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: bytes[pos + 2] = b[2];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: bytes[pos + 2] = b[2];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: bytes[pos + 3] = b[3];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: bytes[pos + 3] = b[3];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: bytes[pos + 2] = b[2];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: bytes[pos + 2] = b[2];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: bytes[pos + 3] = b[3];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: bytes[pos + 3] = b[3];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: bytes[pos + 2] = b[2];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: bytes[pos + 2] = b[2];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: bytes[pos + 3] = b[3];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: bytes[pos + 3] = b[3];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(493' 403);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(493' 403);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(412' 403);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(412' 403);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.MaxLength = 4;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(121' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(121' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbFloat.Location = new System.Drawing.Point(38' 349);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbFloat.Location = new System.Drawing.Point(38' 349);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbFloat.Size = new System.Drawing.Size(118' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbFloat.Size = new System.Drawing.Size(118' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbFloat.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbInt.Location = new System.Drawing.Point(38' 375);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbInt.Location = new System.Drawing.Point(38' 375);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbInt.Size = new System.Drawing.Size(118' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbInt.Size = new System.Drawing.Size(118' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbInt.TabIndex = 9;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbWord.Location = new System.Drawing.Point(38' 401);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbWord.Location = new System.Drawing.Point(38' 401);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbWord.Size = new System.Drawing.Size(118' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbWord.Size = new System.Drawing.Size(118' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbWord.TabIndex = 10;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCFloat.Location = new System.Drawing.Point(12' 349);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCFloat.Location = new System.Drawing.Point(12' 349);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCFloat.Size = new System.Drawing.Size(20' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCFloat.Size = new System.Drawing.Size(20' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCFloat.TabIndex = 11;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCInt.Location = new System.Drawing.Point(12' 375);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCInt.Location = new System.Drawing.Point(12' 375);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCInt.Size = new System.Drawing.Size(20' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCInt.Size = new System.Drawing.Size(20' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCInt.TabIndex = 12;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCWord.Location = new System.Drawing.Point(12' 401);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCWord.Location = new System.Drawing.Point(12' 401);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCWord.Size = new System.Drawing.Size(20' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCWord.Size = new System.Drawing.Size(20' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCWord.TabIndex = 13;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.cbInsert.Location = new System.Drawing.Point(230' 14);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.cbInsert.Location = new System.Drawing.Point(230' 14);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.cbInsert.Size = new System.Drawing.Size(81' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.cbInsert.Size = new System.Drawing.Size(81' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.cbInsert.TabIndex = 14;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(162' 353);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(162' 353);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(27' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(27' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 15;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(162' 378);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(162' 378);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(18' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(18' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 16;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(162' 404);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(162' 404);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(30' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(30' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 17;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.Location = new System.Drawing.Point(295' 349);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.Location = new System.Drawing.Point(295' 349);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.Size = new System.Drawing.Size(90' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.Size = new System.Drawing.Size(90' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.TabIndex = 18;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bLookup.Location = new System.Drawing.Point(214' 375);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bLookup.Location = new System.Drawing.Point(214' 375);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bLookup.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bLookup.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bLookup.TabIndex = 19;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCFormID.Location = new System.Drawing.Point(269' 349);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCFormID.Location = new System.Drawing.Point(269' 349);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCFormID.Size = new System.Drawing.Size(20' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCFormID.Size = new System.Drawing.Size(20' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCFormID.TabIndex = 20;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbEDID.Location = new System.Drawing.Point(295' 375);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbEDID.Location = new System.Drawing.Point(295' 375);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbEDID.Size = new System.Drawing.Size(273' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbEDID.Size = new System.Drawing.Size(273' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbEDID.TabIndex = 21;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(391' 353);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(391' 353);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(41' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(41' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 22;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.Location = new System.Drawing.Point(12' 38);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.Location = new System.Drawing.Point(12' 38);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.Size = new System.Drawing.Size(556' 305);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.Size = new System.Drawing.Size(556' 305);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bFromFile.Location = new System.Drawing.Point(214' 404);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bFromFile.Location = new System.Drawing.Point(214' 404);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bFromFile.Size = new System.Drawing.Size(123' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bFromFile.Size = new System.Drawing.Size(123' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bFromFile.TabIndex = 23;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(580' 438);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HexDataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(580' 438);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.group != 0)        {          var cb = new CheckBox();          cb.Text = "Use this value?";          panel1.Controls.Add(cb);          cb.Location = new Point(10' ypos);          ypos += 24;          cb.Tag = new cbTag(es.group' tb);          if (CurrentGroup != es.group)          {            cb.Checked = true;          }          else          {            tb.Enabled = false;          }          cb.CheckedChanged += CheckBox_CheckedChanged;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.group != 0)        {          var cb = new CheckBox();          cb.Text = "Use this value?";          panel1.Controls.Add(cb);          cb.Location = new Point(10' ypos);          ypos += 24;          cb.Tag = new cbTag(es.group' tb);          if (CurrentGroup != es.group)          {            cb.Checked = true;          }          else          {            tb.Enabled = false;          }          cb.CheckedChanged += CheckBox_CheckedChanged;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.optional || es.repeat && repeatcount > 0)        {          var cb = new CheckBox();          cb.Text = "Use this value?";          panel1.Controls.Add(cb);          cb.Location = new Point(10' ypos);          ypos += 24;          cb.Tag = new repeatCbTag(tb' elements.Count);          if (data == null)          {            tb.Enabled = false;          }          else          {            cb.Checked = true;          }          cb.CheckedChanged += RepeatCheckBox_CheckedChanged;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.optional || es.repeat && repeatcount > 0)        {          var cb = new CheckBox();          cb.Text = "Use this value?";          panel1.Controls.Add(cb);          cb.Location = new Point(10' ypos);          ypos += 24;          cb.Tag = new repeatCbTag(tb' elements.Count);          if (data == null)          {            tb.Enabled = false;          }          else          {            cb.Checked = true;          }          cb.CheckedChanged += RepeatCheckBox_CheckedChanged;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null)        {          switch (es.type)          {            case ElementValueType.Int:              tb.Text = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.FormID:              tb.Text =                TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");              offset += 4;              break;            case ElementValueType.Float:              tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();              offset += 4;              break;            case ElementValueType.Short:              tb.Text = TypeConverter.h2ss(data[offset]' data[offset + 1]).ToString();              offset += 2;              break;            case ElementValueType.Byte:              tb.Text = data[offset].ToString();              offset++;              break;            case ElementValueType.String:              var s = "";              while (data[offset] != 0)              {                s += (char) data[offset++];              }              offset++;              tb.Text = s;              tb.Width += 200;              break;            case ElementValueType.fstring:              tb.Text = sr.GetStrData();              tb.Width += 200;              break;            default:              throw new ApplicationException();          }        }        else        {          if (es.type == ElementValueType.String || es.type == ElementValueType.fstring)          {            tb.Width += 200;          }          if (removedStrings.ContainsKey(boxes.Count - 1))          {            tb.Text = removedStrings[boxes.Count - 1];          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Location = new Point(10' ypos);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.multiline)        {          tb.Multiline = true;          ypos += tb.Height*5;          tb.Height *= 6;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.multiline)        {          tb.Multiline = true;          ypos += tb.Height*5;          tb.Height *= 6;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: l.Location = new Point(tb.Right + 10' ypos + 3);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: l.Location = new Point(tb.Right + 10' ypos + 3);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID)        {          ypos += 28;          var b = new Button();          b.Text = "FormID lookup";          b.Click += LookupFormID_Click;          panel1.Controls.Add(b);          b.Location = new Point(20' ypos);          var tb2 = new TextBox();          tb2.Width += 200;          tb2.ReadOnly = true;          panel1.Controls.Add(tb2);          tb2.Location = new Point(b.Right + 10' ypos);          b.Tag = new bTag(tb' tb2);          if (es.FormIDType != null)          {            if (cachedFormIDs.ContainsKey(es.FormIDType))            {              options = cachedFormIDs[es.FormIDType];            }            else            {              options = formIDScan(es.FormIDType);              cachedFormIDs[es.FormIDType] = options;            }          }        }        else if (es.options != null)        {          options = es.options;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID)        {          ypos += 28;          var b = new Button();          b.Text = "FormID lookup";          b.Click += LookupFormID_Click;          panel1.Controls.Add(b);          b.Location = new Point(20' ypos);          var tb2 = new TextBox();          tb2.Width += 200;          tb2.ReadOnly = true;          panel1.Controls.Add(tb2);          tb2.Location = new Point(b.Right + 10' ypos);          b.Tag = new bTag(tb' tb2);          if (es.FormIDType != null)          {            if (cachedFormIDs.ContainsKey(es.FormIDType))            {              options = cachedFormIDs[es.FormIDType];            }            else            {              options = formIDScan(es.FormIDType);              cachedFormIDs[es.FormIDType] = options;            }          }        }        else if (es.options != null)        {          options = es.options;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID)        {          ypos += 28;          var b = new Button();          b.Text = "FormID lookup";          b.Click += LookupFormID_Click;          panel1.Controls.Add(b);          b.Location = new Point(20' ypos);          var tb2 = new TextBox();          tb2.Width += 200;          tb2.ReadOnly = true;          panel1.Controls.Add(tb2);          tb2.Location = new Point(b.Right + 10' ypos);          b.Tag = new bTag(tb' tb2);          if (es.FormIDType != null)          {            if (cachedFormIDs.ContainsKey(es.FormIDType))            {              options = cachedFormIDs[es.FormIDType];            }            else            {              options = formIDScan(es.FormIDType);              cachedFormIDs[es.FormIDType] = options;            }          }        }        else if (es.options != null)        {          options = es.options;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID)        {          ypos += 28;          var b = new Button();          b.Text = "FormID lookup";          b.Click += LookupFormID_Click;          panel1.Controls.Add(b);          b.Location = new Point(20' ypos);          var tb2 = new TextBox();          tb2.Width += 200;          tb2.ReadOnly = true;          panel1.Controls.Add(tb2);          tb2.Location = new Point(b.Right + 10' ypos);          b.Tag = new bTag(tb' tb2);          if (es.FormIDType != null)          {            if (cachedFormIDs.ContainsKey(es.FormIDType))            {              options = cachedFormIDs[es.FormIDType];            }            else            {              options = formIDScan(es.FormIDType);              cachedFormIDs[es.FormIDType] = options;            }          }        }        else if (es.options != null)        {          options = es.options;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (options != null)        {          ypos += 28;          var cmb = new ComboBox();          cmb.Tag = tb;          cmb.Width += 200;          for (var j = 0; j < options.Length; j += 2)          {            cmb.Items.Add(new comboBoxItem(options[j]' options[j + 1]));          }          cmb.KeyPress += cb_KeyPress;          cmb.ContextMenu = new ContextMenu();          cmb.SelectedIndexChanged += cb_SelectedIndexChanged;          panel1.Controls.Add(cmb);          cmb.Location = new Point(20' ypos);        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (options != null)        {          ypos += 28;          var cmb = new ComboBox();          cmb.Tag = tb;          cmb.Width += 200;          for (var j = 0; j < options.Length; j += 2)          {            cmb.Items.Add(new comboBoxItem(options[j]' options[j + 1]));          }          cmb.KeyPress += cb_KeyPress;          cmb.ContextMenu = new ContextMenu();          cmb.SelectedIndexChanged += cb_SelectedIndexChanged;          panel1.Controls.Add(cmb);          cmb.Location = new Point(20' ypos);        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (options != null)        {          ypos += 28;          var cmb = new ComboBox();          cmb.Tag = tb;          cmb.Width += 200;          for (var j = 0; j < options.Length; j += 2)          {            cmb.Items.Add(new comboBoxItem(options[j]' options[j + 1]));          }          cmb.KeyPress += cb_KeyPress;          cmb.ContextMenu = new ContextMenu();          cmb.SelectedIndexChanged += cb_SelectedIndexChanged;          panel1.Controls.Add(cmb);          cmb.Location = new Point(20' ypos);        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (options != null)        {          ypos += 28;          var cmb = new ComboBox();          cmb.Tag = tb;          cmb.Width += 200;          for (var j = 0; j < options.Length; j += 2)          {            cmb.Items.Add(new comboBoxItem(options[j]' options[j + 1]));          }          cmb.KeyPress += cb_KeyPress;          cmb.ContextMenu = new ContextMenu();          cmb.SelectedIndexChanged += cb_SelectedIndexChanged;          panel1.Controls.Add(cmb);          cmb.Location = new Point(20' ypos);        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(235' 334);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(235' 334);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(316' 334);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(316' 334);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.fpanel1.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.fpanel1.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.fpanel1.Size = new System.Drawing.Size(379' 316);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.fpanel1.Size = new System.Drawing.Size(379' 316);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.fpanel1.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(403' 369);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,MediumLevelRecordEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\MediumLevelRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(403' 369);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,tbName_Leave,The following statement contains a magic number: if (tbName.Text.Length < 4)        {          tbName.Text = tbName.Text.PadRight(4' '_');        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,tbName_Leave,The following statement contains a magic number: if (tbName.Text.Length < 4)        {          tbName.Text = tbName.Text.PadRight(4' '_');        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbEdit.Location = new System.Drawing.Point(12' 48);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbEdit.Location = new System.Drawing.Point(12' 48);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbEdit.Size = new System.Drawing.Size(268' 99);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbEdit.Size = new System.Drawing.Size(268' 99);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(205' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(205' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(124' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(124' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.MaxLength = 4;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.tbName.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(121' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(121' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 191);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,DataEdit,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\DataEdit.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 191);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,HexValidCheck,The following statement contains a magic number: if (tb.Text.Length < 8)        {          tb.Text = tb.Text.PadLeft(8' '0');        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,HexValidCheck,The following statement contains a magic number: if (tb.Text.Length < 8)        {          tb.Text = tb.Text.PadLeft(8' '0');        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,tbName_Leave,The following statement contains a magic number: if (tbName.Text.Length < 4)        {          tbName.Text = tbName.Text.PadRight(4' '_');        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,tbName_Leave,The following statement contains a magic number: if (tbName.Text.Length < 4)        {          tbName.Text = tbName.Text.PadRight(4' '_');        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb0.Location = new System.Drawing.Point(12' 38);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb0.Location = new System.Drawing.Point(12' 38);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb0.Size = new System.Drawing.Size(130' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb0.Size = new System.Drawing.Size(130' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb1.Location = new System.Drawing.Point(12' 61);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb1.Location = new System.Drawing.Point(12' 61);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb1.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb1.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb3.Location = new System.Drawing.Point(12' 107);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb3.Location = new System.Drawing.Point(12' 107);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb3.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb3.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb3.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb2.Location = new System.Drawing.Point(12' 84);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb2.Location = new System.Drawing.Point(12' 84);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb2.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb2.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb2.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb5.Location = new System.Drawing.Point(12' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb5.Location = new System.Drawing.Point(12' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb5.Size = new System.Drawing.Size(131' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb5.Size = new System.Drawing.Size(131' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb5.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb4.Location = new System.Drawing.Point(12' 130);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb4.Location = new System.Drawing.Point(12' 130);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb4.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb4.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb4.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb7.Location = new System.Drawing.Point(12' 199);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb7.Location = new System.Drawing.Point(12' 199);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb7.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb7.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb7.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb6.Location = new System.Drawing.Point(12' 176);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb6.Location = new System.Drawing.Point(12' 176);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb6.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb6.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb6.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb9.Location = new System.Drawing.Point(12' 245);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb9.Location = new System.Drawing.Point(12' 245);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb9.Size = new System.Drawing.Size(160' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb9.Size = new System.Drawing.Size(160' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb9.TabIndex = 9;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb8.Location = new System.Drawing.Point(12' 222);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb8.Location = new System.Drawing.Point(12' 222);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb8.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb8.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb8.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb11.Location = new System.Drawing.Point(12' 291);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb11.Location = new System.Drawing.Point(12' 291);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb11.Size = new System.Drawing.Size(167' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb11.Size = new System.Drawing.Size(167' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb11.TabIndex = 11;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb10.Location = new System.Drawing.Point(12' 268);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb10.Location = new System.Drawing.Point(12' 268);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb10.Size = new System.Drawing.Size(195' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb10.Size = new System.Drawing.Size(195' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb10.TabIndex = 10;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb13.Location = new System.Drawing.Point(12' 337);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb13.Location = new System.Drawing.Point(12' 337);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb13.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb13.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb13.TabIndex = 13;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb12.Location = new System.Drawing.Point(12' 314);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb12.Location = new System.Drawing.Point(12' 314);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb12.Size = new System.Drawing.Size(130' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb12.Size = new System.Drawing.Size(130' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb12.TabIndex = 12;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb15.Location = new System.Drawing.Point(12' 383);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb15.Location = new System.Drawing.Point(12' 383);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb15.Size = new System.Drawing.Size(191' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb15.Size = new System.Drawing.Size(191' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb15.TabIndex = 15;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb14.Location = new System.Drawing.Point(12' 360);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb14.Location = new System.Drawing.Point(12' 360);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb14.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb14.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb14.TabIndex = 14;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb31.Location = new System.Drawing.Point(244' 383);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb31.Location = new System.Drawing.Point(244' 383);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb31.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb31.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb31.TabIndex = 31;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb30.Location = new System.Drawing.Point(244' 360);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb30.Location = new System.Drawing.Point(244' 360);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb30.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb30.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb30.TabIndex = 30;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb29.Location = new System.Drawing.Point(244' 337);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb29.Location = new System.Drawing.Point(244' 337);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb29.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb29.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb29.TabIndex = 29;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb28.Location = new System.Drawing.Point(244' 314);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb28.Location = new System.Drawing.Point(244' 314);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb28.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb28.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb28.TabIndex = 28;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb27.Location = new System.Drawing.Point(244' 291);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb27.Location = new System.Drawing.Point(244' 291);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb27.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb27.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb27.TabIndex = 27;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb26.Location = new System.Drawing.Point(244' 268);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb26.Location = new System.Drawing.Point(244' 268);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb26.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb26.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb26.TabIndex = 26;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb25.Location = new System.Drawing.Point(244' 245);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb25.Location = new System.Drawing.Point(244' 245);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb25.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb25.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb25.TabIndex = 25;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb24.Location = new System.Drawing.Point(244' 222);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb24.Location = new System.Drawing.Point(244' 222);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb24.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb24.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb24.TabIndex = 24;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb23.Location = new System.Drawing.Point(244' 199);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb23.Location = new System.Drawing.Point(244' 199);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb23.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb23.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb23.TabIndex = 23;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb22.Location = new System.Drawing.Point(244' 176);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb22.Location = new System.Drawing.Point(244' 176);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb22.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb22.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb22.TabIndex = 22;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb21.Location = new System.Drawing.Point(244' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb21.Location = new System.Drawing.Point(244' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb21.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb21.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb21.TabIndex = 21;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb20.Location = new System.Drawing.Point(244' 130);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb20.Location = new System.Drawing.Point(244' 130);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb20.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb20.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb20.TabIndex = 20;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb19.Location = new System.Drawing.Point(244' 107);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb19.Location = new System.Drawing.Point(244' 107);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb19.Size = new System.Drawing.Size(140' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb19.Size = new System.Drawing.Size(140' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb19.TabIndex = 19;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb18.Location = new System.Drawing.Point(244' 84);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb18.Location = new System.Drawing.Point(244' 84);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb18.Size = new System.Drawing.Size(185' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb18.Size = new System.Drawing.Size(185' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb18.TabIndex = 18;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb17.Location = new System.Drawing.Point(244' 61);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb17.Location = new System.Drawing.Point(244' 61);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb17.Size = new System.Drawing.Size(256' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb17.Size = new System.Drawing.Size(256' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb17.TabIndex = 17;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb16.Location = new System.Drawing.Point(244' 38);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb16.Location = new System.Drawing.Point(244' 38);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb16.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb16.Size = new System.Drawing.Size(85' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.cb16.TabIndex = 16;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(332' 431);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(332' 431);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 34;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(413' 431);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(413' 431);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.bSave.TabIndex = 35;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.Location = new System.Drawing.Point(244' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.Location = new System.Drawing.Point(244' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.MaxLength = 8;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFormID.TabIndex = 36;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(350' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(350' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(41' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(41' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 37;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags2.Location = new System.Drawing.Point(12' 406);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags2.Location = new System.Drawing.Point(12' 406);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags2.MaxLength = 8;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags2.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags2.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags2.TabIndex = 38;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags3.Location = new System.Drawing.Point(12' 432);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags3.Location = new System.Drawing.Point(12' 432);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags3.MaxLength = 8;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags3.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags3.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbFlags3.TabIndex = 39;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(118' 409);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(118' 409);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(62' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(62' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 40;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(118' 435);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(118' 435);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(62' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(62' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 41;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbName.MaxLength = 4;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbName.Size = new System.Drawing.Size(100' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.tbName.TabIndex = 42;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(118' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(118' 15);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(35' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 43;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(500' 466);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,HeaderEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HeaderEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(500' 466);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,RecurseSearch,The following statement contains a magic number: if (rec != null)        {          if (rbFormID.Checked)          {            if (rec.FormID == searchID)            {              matches.Add(node);            }          }          else if (rec.descriptiveName != null)          {            if (cbPartial.Checked)            {              if (rec.descriptiveName.ToLowerInvariant().Contains(searchString))              {                matches.Add(node);              }            }            else            {              if (rec.descriptiveName.ToLowerInvariant().Substring(2' rec.descriptiveName.Length - 3) == searchString)              {                matches.Add(node);              }            }          }        }        else        {          for (var i = 0; i < node.Nodes.Count; i++)          {            RecurseSearch(matches' node.Nodes[i]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,RecurseSearch,The following statement contains a magic number: if (rec != null)        {          if (rbFormID.Checked)          {            if (rec.FormID == searchID)            {              matches.Add(node);            }          }          else if (rec.descriptiveName != null)          {            if (cbPartial.Checked)            {              if (rec.descriptiveName.ToLowerInvariant().Contains(searchString))              {                matches.Add(node);              }            }            else            {              if (rec.descriptiveName.ToLowerInvariant().Substring(2' rec.descriptiveName.Length - 3) == searchString)              {                matches.Add(node);              }            }          }        }        else        {          for (var i = 0; i < node.Nodes.Count; i++)          {            RecurseSearch(matches' node.Nodes[i]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Size = new System.Drawing.Size(205' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Size = new System.Drawing.Size(205' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.cbPartial.Location = new System.Drawing.Point(12' 107);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.cbPartial.Location = new System.Drawing.Point(12' 107);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.cbPartial.Size = new System.Drawing.Size(120' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.cbPartial.Size = new System.Drawing.Size(120' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSelectedNode.Location = new System.Drawing.Point(12' 130);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSelectedNode.Location = new System.Drawing.Point(12' 130);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSelectedNode.Size = new System.Drawing.Size(176' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSelectedNode.Size = new System.Drawing.Size(176' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSelectedNode.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.bFind.Location = new System.Drawing.Point(142' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.bFind.Location = new System.Drawing.Point(142' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.bFind.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.bFind.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.bFind.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.bReset.Location = new System.Drawing.Point(12' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.bReset.Location = new System.Drawing.Point(12' 153);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.bReset.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.bReset.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.bReset.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbEDID.Location = new System.Drawing.Point(12' 38);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbEDID.Location = new System.Drawing.Point(12' 38);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbEDID.Size = new System.Drawing.Size(71' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbEDID.Size = new System.Drawing.Size(71' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbEDID.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbFormID.Location = new System.Drawing.Point(12' 61);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbFormID.Location = new System.Drawing.Point(12' 61);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbFormID.Size = new System.Drawing.Size(64' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbFormID.Size = new System.Drawing.Size(64' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbFormID.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbAll.Location = new System.Drawing.Point(12' 84);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbAll.Location = new System.Drawing.Point(12' 84);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbAll.Size = new System.Drawing.Size(91' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbAll.Size = new System.Drawing.Size(91' 17);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.rbAll.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(139' 65);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(139' 65);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(64' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(64' 13);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(229' 187);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SearchForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\SearchForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(229' 187);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordAddConditionals,The following statement contains a magic number: for (var j = 0; j < ess.Length; j++)        {          if (ess[j].CondID != 0)          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Int'                                                            TypeConverter.h2si(data[offset]' data[offset + 1]'                                                                               data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Float:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Float'                                                            TypeConverter.h2f(data[offset]' data[offset + 1]'                                                                              data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Short:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Short'                                                            (int) TypeConverter.h2ss(data[offset]' data[offset + 1]));                offset += 2;                break;              case ElementValueType.Byte:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Byte' (int) data[offset]);                offset++;                break;              case ElementValueType.String:                var s = "";                while (data[offset] != 0)                {                  s += (char) data[offset++];                }                offset++;                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' s);                break;              case ElementValueType.fstring:                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' sr.GetStrData());                break;              default:                throw new ApplicationException();            }          }          else          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:              case ElementValueType.Float:                offset += 4;                break;              case ElementValueType.Short:                offset += 2;                break;              case ElementValueType.Byte:                offset++;                break;              case ElementValueType.String:                while (data[offset] != 0)                {                  offset++;                }                offset++;                break;              case ElementValueType.fstring:                break;              default:                throw new ApplicationException();            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordAddConditionals,The following statement contains a magic number: for (var j = 0; j < ess.Length; j++)        {          if (ess[j].CondID != 0)          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Int'                                                            TypeConverter.h2si(data[offset]' data[offset + 1]'                                                                               data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Float:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Float'                                                            TypeConverter.h2f(data[offset]' data[offset + 1]'                                                                              data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Short:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Short'                                                            (int) TypeConverter.h2ss(data[offset]' data[offset + 1]));                offset += 2;                break;              case ElementValueType.Byte:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Byte' (int) data[offset]);                offset++;                break;              case ElementValueType.String:                var s = "";                while (data[offset] != 0)                {                  s += (char) data[offset++];                }                offset++;                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' s);                break;              case ElementValueType.fstring:                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' sr.GetStrData());                break;              default:                throw new ApplicationException();            }          }          else          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:              case ElementValueType.Float:                offset += 4;                break;              case ElementValueType.Short:                offset += 2;                break;              case ElementValueType.Byte:                offset++;                break;              case ElementValueType.String:                while (data[offset] != 0)                {                  offset++;                }                offset++;                break;              case ElementValueType.fstring:                break;              default:                throw new ApplicationException();            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordAddConditionals,The following statement contains a magic number: for (var j = 0; j < ess.Length; j++)        {          if (ess[j].CondID != 0)          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Int'                                                            TypeConverter.h2si(data[offset]' data[offset + 1]'                                                                               data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Float:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Float'                                                            TypeConverter.h2f(data[offset]' data[offset + 1]'                                                                              data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Short:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Short'                                                            (int) TypeConverter.h2ss(data[offset]' data[offset + 1]));                offset += 2;                break;              case ElementValueType.Byte:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Byte' (int) data[offset]);                offset++;                break;              case ElementValueType.String:                var s = "";                while (data[offset] != 0)                {                  s += (char) data[offset++];                }                offset++;                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' s);                break;              case ElementValueType.fstring:                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' sr.GetStrData());                break;              default:                throw new ApplicationException();            }          }          else          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:              case ElementValueType.Float:                offset += 4;                break;              case ElementValueType.Short:                offset += 2;                break;              case ElementValueType.Byte:                offset++;                break;              case ElementValueType.String:                while (data[offset] != 0)                {                  offset++;                }                offset++;                break;              case ElementValueType.fstring:                break;              default:                throw new ApplicationException();            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordAddConditionals,The following statement contains a magic number: for (var j = 0; j < ess.Length; j++)        {          if (ess[j].CondID != 0)          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Int'                                                            TypeConverter.h2si(data[offset]' data[offset + 1]'                                                                               data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Float:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Float'                                                            TypeConverter.h2f(data[offset]' data[offset + 1]'                                                                              data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Short:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Short'                                                            (int) TypeConverter.h2ss(data[offset]' data[offset + 1]));                offset += 2;                break;              case ElementValueType.Byte:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Byte' (int) data[offset]);                offset++;                break;              case ElementValueType.String:                var s = "";                while (data[offset] != 0)                {                  s += (char) data[offset++];                }                offset++;                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' s);                break;              case ElementValueType.fstring:                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' sr.GetStrData());                break;              default:                throw new ApplicationException();            }          }          else          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:              case ElementValueType.Float:                offset += 4;                break;              case ElementValueType.Short:                offset += 2;                break;              case ElementValueType.Byte:                offset++;                break;              case ElementValueType.String:                while (data[offset] != 0)                {                  offset++;                }                offset++;                break;              case ElementValueType.fstring:                break;              default:                throw new ApplicationException();            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordAddConditionals,The following statement contains a magic number: for (var j = 0; j < ess.Length; j++)        {          if (ess[j].CondID != 0)          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Int'                                                            TypeConverter.h2si(data[offset]' data[offset + 1]'                                                                               data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Float:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Float'                                                            TypeConverter.h2f(data[offset]' data[offset + 1]'                                                                              data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Short:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Short'                                                            (int) TypeConverter.h2ss(data[offset]' data[offset + 1]));                offset += 2;                break;              case ElementValueType.Byte:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Byte' (int) data[offset]);                offset++;                break;              case ElementValueType.String:                var s = "";                while (data[offset] != 0)                {                  s += (char) data[offset++];                }                offset++;                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' s);                break;              case ElementValueType.fstring:                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' sr.GetStrData());                break;              default:                throw new ApplicationException();            }          }          else          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:              case ElementValueType.Float:                offset += 4;                break;              case ElementValueType.Short:                offset += 2;                break;              case ElementValueType.Byte:                offset++;                break;              case ElementValueType.String:                while (data[offset] != 0)                {                  offset++;                }                offset++;                break;              case ElementValueType.fstring:                break;              default:                throw new ApplicationException();            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordAddConditionals,The following statement contains a magic number: for (var j = 0; j < ess.Length; j++)        {          if (ess[j].CondID != 0)          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Int'                                                            TypeConverter.h2si(data[offset]' data[offset + 1]'                                                                               data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Float:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Float'                                                            TypeConverter.h2f(data[offset]' data[offset + 1]'                                                                              data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Short:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Short'                                                            (int) TypeConverter.h2ss(data[offset]' data[offset + 1]));                offset += 2;                break;              case ElementValueType.Byte:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Byte' (int) data[offset]);                offset++;                break;              case ElementValueType.String:                var s = "";                while (data[offset] != 0)                {                  s += (char) data[offset++];                }                offset++;                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' s);                break;              case ElementValueType.fstring:                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' sr.GetStrData());                break;              default:                throw new ApplicationException();            }          }          else          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:              case ElementValueType.Float:                offset += 4;                break;              case ElementValueType.Short:                offset += 2;                break;              case ElementValueType.Byte:                offset++;                break;              case ElementValueType.String:                while (data[offset] != 0)                {                  offset++;                }                offset++;                break;              case ElementValueType.fstring:                break;              default:                throw new ApplicationException();            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordAddConditionals,The following statement contains a magic number: for (var j = 0; j < ess.Length; j++)        {          if (ess[j].CondID != 0)          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Int'                                                            TypeConverter.h2si(data[offset]' data[offset + 1]'                                                                               data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Float:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Float'                                                            TypeConverter.h2f(data[offset]' data[offset + 1]'                                                                              data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Short:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Short'                                                            (int) TypeConverter.h2ss(data[offset]' data[offset + 1]));                offset += 2;                break;              case ElementValueType.Byte:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Byte' (int) data[offset]);                offset++;                break;              case ElementValueType.String:                var s = "";                while (data[offset] != 0)                {                  s += (char) data[offset++];                }                offset++;                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' s);                break;              case ElementValueType.fstring:                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' sr.GetStrData());                break;              default:                throw new ApplicationException();            }          }          else          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:              case ElementValueType.Float:                offset += 4;                break;              case ElementValueType.Short:                offset += 2;                break;              case ElementValueType.Byte:                offset++;                break;              case ElementValueType.String:                while (data[offset] != 0)                {                  offset++;                }                offset++;                break;              case ElementValueType.fstring:                break;              default:                throw new ApplicationException();            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordAddConditionals,The following statement contains a magic number: for (var j = 0; j < ess.Length; j++)        {          if (ess[j].CondID != 0)          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Int'                                                            TypeConverter.h2si(data[offset]' data[offset + 1]'                                                                               data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Float:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Float'                                                            TypeConverter.h2f(data[offset]' data[offset + 1]'                                                                              data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Short:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Short'                                                            (int) TypeConverter.h2ss(data[offset]' data[offset + 1]));                offset += 2;                break;              case ElementValueType.Byte:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Byte' (int) data[offset]);                offset++;                break;              case ElementValueType.String:                var s = "";                while (data[offset] != 0)                {                  s += (char) data[offset++];                }                offset++;                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' s);                break;              case ElementValueType.fstring:                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' sr.GetStrData());                break;              default:                throw new ApplicationException();            }          }          else          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:              case ElementValueType.Float:                offset += 4;                break;              case ElementValueType.Short:                offset += 2;                break;              case ElementValueType.Byte:                offset++;                break;              case ElementValueType.String:                while (data[offset] != 0)                {                  offset++;                }                offset++;                break;              case ElementValueType.fstring:                break;              default:                throw new ApplicationException();            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordAddConditionals,The following statement contains a magic number: for (var j = 0; j < ess.Length; j++)        {          if (ess[j].CondID != 0)          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Int'                                                            TypeConverter.h2si(data[offset]' data[offset + 1]'                                                                               data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Float:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Float'                                                            TypeConverter.h2f(data[offset]' data[offset + 1]'                                                                              data[offset + 2]' data[offset + 3]));                offset += 4;                break;              case ElementValueType.Short:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Short'                                                            (int) TypeConverter.h2ss(data[offset]' data[offset + 1]));                offset += 2;                break;              case ElementValueType.Byte:                conditions[ess[j].CondID] = new Conditional(ElementValueType.Byte' (int) data[offset]);                offset++;                break;              case ElementValueType.String:                var s = "";                while (data[offset] != 0)                {                  s += (char) data[offset++];                }                offset++;                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' s);                break;              case ElementValueType.fstring:                conditions[ess[j].CondID] = new Conditional(ElementValueType.String' sr.GetStrData());                break;              default:                throw new ApplicationException();            }          }          else          {            switch (ess[j].type)            {              case ElementValueType.Int:              case ElementValueType.FormID:              case ElementValueType.Float:                offset += 4;                break;              case ElementValueType.Short:                offset += 2;                break;              case ElementValueType.Byte:                offset++;                break;              case ElementValueType.String:                while (data[offset] != 0)                {                  offset++;                }                offset++;                break;              case ElementValueType.fstring:                break;              default:                throw new ApplicationException();            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,sanitizeToolStripMenuItem_Click,The following statement contains a magic number: if (p.Records.Count > 0 && p.Records[0].Name == "TES4")        {          var tes4 = (Record) p.Records[0];          if (tes4.SubRecords.Count > 0 && tes4.SubRecords[0].Name == "HEDR" && tes4.SubRecords[0].Size >= 8)          {            var data = tes4.SubRecords[0].GetData();            var reccountbytes = TypeConverter.si2h(reccount);            for (var i = 0; i < 4; i++)            {              data[4 + i] = reccountbytes[i];            }            tes4.SubRecords[0].SetData(data);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,sanitizeToolStripMenuItem_Click,The following statement contains a magic number: if (p.Records.Count > 0 && p.Records[0].Name == "TES4")        {          var tes4 = (Record) p.Records[0];          if (tes4.SubRecords.Count > 0 && tes4.SubRecords[0].Name == "HEDR" && tes4.SubRecords[0].Size >= 8)          {            var data = tes4.SubRecords[0].GetData();            var reccountbytes = TypeConverter.si2h(reccount);            for (var i = 0; i < 4; i++)            {              data[4 + i] = reccountbytes[i];            }            tes4.SubRecords[0].SetData(data);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,sanitizeToolStripMenuItem_Click,The following statement contains a magic number: if (p.Records.Count > 0 && p.Records[0].Name == "TES4")        {          var tes4 = (Record) p.Records[0];          if (tes4.SubRecords.Count > 0 && tes4.SubRecords[0].Name == "HEDR" && tes4.SubRecords[0].Size >= 8)          {            var data = tes4.SubRecords[0].GetData();            var reccountbytes = TypeConverter.si2h(reccount);            for (var i = 0; i < 4; i++)            {              data[4 + i] = reccountbytes[i];            }            tes4.SubRecords[0].SetData(data);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: for (var i = 0; i < FormIDLookup.Length - 1; i++)        {          if (FormIDLookup[i] == null)          {            missingMasters = true;            continue;          }          if (FormIDLookup[i].Records.Count < 2 || FormIDLookup[i].Records[0].Name != "TES4")          {            continue;          }          uint match = 0;          foreach (var sr in ((Record) FormIDLookup[i].Records[0]).SubRecords)          {            if (sr.Name == "MAST")            {              match++;            }          }          match <<= 24;          var mask = (uint) i << 24;          for (var j = 1; j < FormIDLookup[i].Records.Count; j++)          {            cleanRecurse(FormIDLookup[i].Records[j]' match' mask' lookup);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: for (var i = 0; i < FormIDLookup.Length - 1; i++)        {          if (FormIDLookup[i] == null)          {            missingMasters = true;            continue;          }          if (FormIDLookup[i].Records.Count < 2 || FormIDLookup[i].Records[0].Name != "TES4")          {            continue;          }          uint match = 0;          foreach (var sr in ((Record) FormIDLookup[i].Records[0]).SubRecords)          {            if (sr.Name == "MAST")            {              match++;            }          }          match <<= 24;          var mask = (uint) i << 24;          for (var j = 1; j < FormIDLookup[i].Records.Count; j++)          {            cleanRecurse(FormIDLookup[i].Records[j]' match' mask' lookup);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: for (var i = 0; i < FormIDLookup.Length - 1; i++)        {          if (FormIDLookup[i] == null)          {            missingMasters = true;            continue;          }          if (FormIDLookup[i].Records.Count < 2 || FormIDLookup[i].Records[0].Name != "TES4")          {            continue;          }          uint match = 0;          foreach (var sr in ((Record) FormIDLookup[i].Records[0]).SubRecords)          {            if (sr.Name == "MAST")            {              match++;            }          }          match <<= 24;          var mask = (uint) i << 24;          for (var j = 1; j < FormIDLookup[i].Records.Count; j++)          {            cleanRecurse(FormIDLookup[i].Records[j]' match' mask' lookup);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: var mask = (uint) (FormIDLookup.Length - 1) << 24;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0)        {          var rec = recs.Dequeue();          if (rec is GroupRecord)          {            var gr = (GroupRecord) rec;            if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC")            {              foreach (var r in gr.Records)              {                recs.Enqueue(r);              }            }          }          else          {            var r = (Record) rec;            if ((r.FormID & 0xff000000) != 0)            {              continue;            }            switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,LookupFormIDI,The following statement contains a magic number: var pluginid = (id & 0xff000000) >> 24;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,LookupFormIDI,The following statement contains a magic number: id += Fixups[pluginid] << 24;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,FormIDScan,The following statement contains a magic number: for (var i = 0; i < FormIDLookup.Length - 1; i++)        {          if (FormIDLookup[i] == null)          {            continue;          }          if (FormIDLookup[i].Records.Count < 2 || FormIDLookup[i].Records[0].Name != "TES4")          {            continue;          }          uint match = 0;          foreach (var sr in ((Record) FormIDLookup[i].Records[0]).SubRecords)          {            if (sr.Name == "MAST")            {              match++;            }          }          match <<= 24;          var mask = (uint) i << 24;          for (var j = 1; j < FormIDLookup[i].Records.Count; j++)          {            FormIDScanRecurse(FormIDLookup[i].Records[j]' match' mask' list' type);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,FormIDScan,The following statement contains a magic number: for (var i = 0; i < FormIDLookup.Length - 1; i++)        {          if (FormIDLookup[i] == null)          {            continue;          }          if (FormIDLookup[i].Records.Count < 2 || FormIDLookup[i].Records[0].Name != "TES4")          {            continue;          }          uint match = 0;          foreach (var sr in ((Record) FormIDLookup[i].Records[0]).SubRecords)          {            if (sr.Name == "MAST")            {              match++;            }          }          match <<= 24;          var mask = (uint) i << 24;          for (var j = 1; j < FormIDLookup[i].Records.Count; j++)          {            FormIDScanRecurse(FormIDLookup[i].Records[j]' match' mask' list' type);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,FormIDScan,The following statement contains a magic number: for (var i = 0; i < FormIDLookup.Length - 1; i++)        {          if (FormIDLookup[i] == null)          {            continue;          }          if (FormIDLookup[i].Records.Count < 2 || FormIDLookup[i].Records[0].Name != "TES4")          {            continue;          }          uint match = 0;          foreach (var sr in ((Record) FormIDLookup[i].Records[0]).SubRecords)          {            if (sr.Name == "MAST")            {              match++;            }          }          match <<= 24;          var mask = (uint) i << 24;          for (var j = 1; j < FormIDLookup[i].Records.Count; j++)          {            FormIDScanRecurse(FormIDLookup[i].Records[j]' match' mask' list' type);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,FormIDScan,The following statement contains a magic number: var ret = new string[list.Count*2];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.PluginTree.Size = new System.Drawing.Size(196' 211);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.PluginTree.Size = new System.Drawing.Size(196' 211);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(589' 24);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(589' 24);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.newToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.newToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.openNewPluginToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.openNewPluginToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.saveToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.saveToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.closeToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.closeToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.reloadXmlToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.reloadXmlToolStripMenuItem.Size = new System.Drawing.Size(146' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.editToolStripMenuItem.Size = new System.Drawing.Size(39' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.editToolStripMenuItem.Size = new System.Drawing.Size(39' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.cutToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.cutToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.copyToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.copyToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.pasteToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.pasteToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.deleteToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.deleteToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.insertRecordToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.insertRecordToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.insertSubrecordToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.insertSubrecordToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.addMasterToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.addMasterToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.findToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.findToolStripMenuItem.Size = new System.Drawing.Size(189' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.hexModeToolStripMenuItem.Size = new System.Drawing.Size(208' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.hexModeToolStripMenuItem.Size = new System.Drawing.Size(208' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.useNewSubrecordEditorToolStripMenuItem.Size = new System.Drawing.Size(208' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.useNewSubrecordEditorToolStripMenuItem.Size = new System.Drawing.Size(208' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.lookupFormidsToolStripMenuItem.Size = new System.Drawing.Size(208' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.lookupFormidsToolStripMenuItem.Size = new System.Drawing.Size(208' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.spellsToolStripMenuItem.Size = new System.Drawing.Size(49' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.spellsToolStripMenuItem.Size = new System.Drawing.Size(49' 20);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.sanitizeToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.sanitizeToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.stripEDIDsToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.stripEDIDsToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.findDuplicatedFormIDToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.findDuplicatedFormIDToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.dumpEDIDListToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.dumpEDIDListToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.cleanEspToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.cleanEspToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.findNonconformingRecordToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.findNonconformingRecordToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.compileScriptToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.compileScriptToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.compileAllToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.compileAllToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.generateLLXmlToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.generateLLXmlToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.makeEsmToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.makeEsmToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.martigensToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.martigensToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.tbInfo.Size = new System.Drawing.Size(389' 429);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.tbInfo.Size = new System.Drawing.Size(389' 429);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.tbInfo.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(0' 24);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(589' 429);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(589' 429);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 196;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Size = new System.Drawing.Size(196' 429);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Size = new System.Drawing.Size(196' 429);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.SplitterDistance = 211;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Size = new System.Drawing.Size(196' 214);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Size = new System.Drawing.Size(196' 214);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(589' 453);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(589' 453);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(380' 300);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(380' 300);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,BaseRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,ReadRecName,The following statement contains a magic number: br.Read(RecByte' 0' 4);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,BaseRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,ReadRecName,The following statement contains a magic number: return "" + ((char) RecByte[0]) + ((char) RecByte[1]) + ((char) RecByte[2]) + ((char) RecByte[3]);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,BaseRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,ReadRecName,The following statement contains a magic number: return "" + ((char) RecByte[0]) + ((char) RecByte[1]) + ((char) RecByte[2]) + ((char) RecByte[3]);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,Plugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,LoadPlugin,The following statement contains a magic number: br.BaseStream.Position = 20;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,Plugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,LoadPlugin,The following statement contains a magic number: br.BaseStream.Position = 4;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: data = br.ReadBytes(4);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: while (AmountRead < Size - (Oblivion ? 20 : 24))        {          var s = ReadRecName(br);          var recsize = br.ReadUInt32();          if (s == "GRUP")          {            var gr = new GroupRecord(recsize' br' Oblivion);            AmountRead += recsize;            Records.Add(gr);          }          else          {            var r = new Record(s' recsize' br' Oblivion);            AmountRead += (uint) (recsize + (Oblivion ? 20 : 24));            Records.Add(r);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: while (AmountRead < Size - (Oblivion ? 20 : 24))        {          var s = ReadRecName(br);          var recsize = br.ReadUInt32();          if (s == "GRUP")          {            var gr = new GroupRecord(recsize' br' Oblivion);            AmountRead += recsize;            Records.Add(gr);          }          else          {            var r = new Record(s' recsize' br' Oblivion);            AmountRead += (uint) (recsize + (Oblivion ? 20 : 24));            Records.Add(r);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: while (AmountRead < Size - (Oblivion ? 20 : 24))        {          var s = ReadRecName(br);          var recsize = br.ReadUInt32();          if (s == "GRUP")          {            var gr = new GroupRecord(recsize' br' Oblivion);            AmountRead += recsize;            Records.Add(gr);          }          else          {            var r = new Record(s' recsize' br' Oblivion);            AmountRead += (uint) (recsize + (Oblivion ? 20 : 24));            Records.Add(r);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: while (AmountRead < Size - (Oblivion ? 20 : 24))        {          var s = ReadRecName(br);          var recsize = br.ReadUInt32();          if (s == "GRUP")          {            var gr = new GroupRecord(recsize' br' Oblivion);            AmountRead += recsize;            Records.Add(gr);          }          else          {            var r = new Record(s' recsize' br' Oblivion);            AmountRead += (uint) (recsize + (Oblivion ? 20 : 24));            Records.Add(r);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: if (AmountRead > (Size - (Oblivion ? 20 : 24)))        {          throw new TESParserException("Record block did not match the size specified in the group header");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: if (AmountRead > (Size - (Oblivion ? 20 : 24)))        {          throw new TESParserException("Record block did not match the size specified in the group header");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: if (groupType == 0)        {          descriptiveName = " (" + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: if (groupType == 0)        {          descriptiveName = " (" + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: this.data = new byte[4];
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GroupRecord,The following statement contains a magic number: for (var i = 0; i < 4; i++)        {          this.data[i] = (byte) data[i];        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            desc += "Top " + GetSubDesc();            break;          case 1:            desc += "World children " + GetSubDesc();            break;          case 2:            desc += "Interior Cell Block " + GetSubDesc();            break;          case 3:            desc += "Interior Cell Sub-Block " + GetSubDesc();            break;          case 4:            desc += "Exterior Cell Block " + GetSubDesc();            break;          case 5:            desc += "Exterior Cell Sub-Block " + GetSubDesc();            break;          case 6:            desc += "Cell Children " + GetSubDesc();            break;          case 7:            desc += "Topic Children " + GetSubDesc();            break;          case 8:            desc += "Cell Persistent Childen " + GetSubDesc();            break;          case 9:            desc += "Cell Temporary Children " + GetSubDesc();            break;          case 10:            desc += "Cell Visible Distant Children " + GetSubDesc();            break;          default:            desc += "Unknown";            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            desc += "Top " + GetSubDesc();            break;          case 1:            desc += "World children " + GetSubDesc();            break;          case 2:            desc += "Interior Cell Block " + GetSubDesc();            break;          case 3:            desc += "Interior Cell Sub-Block " + GetSubDesc();            break;          case 4:            desc += "Exterior Cell Block " + GetSubDesc();            break;          case 5:            desc += "Exterior Cell Sub-Block " + GetSubDesc();            break;          case 6:            desc += "Cell Children " + GetSubDesc();            break;          case 7:            desc += "Topic Children " + GetSubDesc();            break;          case 8:            desc += "Cell Persistent Childen " + GetSubDesc();            break;          case 9:            desc += "Cell Temporary Children " + GetSubDesc();            break;          case 10:            desc += "Cell Visible Distant Children " + GetSubDesc();            break;          default:            desc += "Unknown";            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            desc += "Top " + GetSubDesc();            break;          case 1:            desc += "World children " + GetSubDesc();            break;          case 2:            desc += "Interior Cell Block " + GetSubDesc();            break;          case 3:            desc += "Interior Cell Sub-Block " + GetSubDesc();            break;          case 4:            desc += "Exterior Cell Block " + GetSubDesc();            break;          case 5:            desc += "Exterior Cell Sub-Block " + GetSubDesc();            break;          case 6:            desc += "Cell Children " + GetSubDesc();            break;          case 7:            desc += "Topic Children " + GetSubDesc();            break;          case 8:            desc += "Cell Persistent Childen " + GetSubDesc();            break;          case 9:            desc += "Cell Temporary Children " + GetSubDesc();            break;          case 10:            desc += "Cell Visible Distant Children " + GetSubDesc();            break;          default:            desc += "Unknown";            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            desc += "Top " + GetSubDesc();            break;          case 1:            desc += "World children " + GetSubDesc();            break;          case 2:            desc += "Interior Cell Block " + GetSubDesc();            break;          case 3:            desc += "Interior Cell Sub-Block " + GetSubDesc();            break;          case 4:            desc += "Exterior Cell Block " + GetSubDesc();            break;          case 5:            desc += "Exterior Cell Sub-Block " + GetSubDesc();            break;          case 6:            desc += "Cell Children " + GetSubDesc();            break;          case 7:            desc += "Topic Children " + GetSubDesc();            break;          case 8:            desc += "Cell Persistent Childen " + GetSubDesc();            break;          case 9:            desc += "Cell Temporary Children " + GetSubDesc();            break;          case 10:            desc += "Cell Visible Distant Children " + GetSubDesc();            break;          default:            desc += "Unknown";            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            desc += "Top " + GetSubDesc();            break;          case 1:            desc += "World children " + GetSubDesc();            break;          case 2:            desc += "Interior Cell Block " + GetSubDesc();            break;          case 3:            desc += "Interior Cell Sub-Block " + GetSubDesc();            break;          case 4:            desc += "Exterior Cell Block " + GetSubDesc();            break;          case 5:            desc += "Exterior Cell Sub-Block " + GetSubDesc();            break;          case 6:            desc += "Cell Children " + GetSubDesc();            break;          case 7:            desc += "Topic Children " + GetSubDesc();            break;          case 8:            desc += "Cell Persistent Childen " + GetSubDesc();            break;          case 9:            desc += "Cell Temporary Children " + GetSubDesc();            break;          case 10:            desc += "Cell Visible Distant Children " + GetSubDesc();            break;          default:            desc += "Unknown";            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            desc += "Top " + GetSubDesc();            break;          case 1:            desc += "World children " + GetSubDesc();            break;          case 2:            desc += "Interior Cell Block " + GetSubDesc();            break;          case 3:            desc += "Interior Cell Sub-Block " + GetSubDesc();            break;          case 4:            desc += "Exterior Cell Block " + GetSubDesc();            break;          case 5:            desc += "Exterior Cell Sub-Block " + GetSubDesc();            break;          case 6:            desc += "Cell Children " + GetSubDesc();            break;          case 7:            desc += "Topic Children " + GetSubDesc();            break;          case 8:            desc += "Cell Persistent Childen " + GetSubDesc();            break;          case 9:            desc += "Cell Temporary Children " + GetSubDesc();            break;          case 10:            desc += "Cell Visible Distant Children " + GetSubDesc();            break;          default:            desc += "Unknown";            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            desc += "Top " + GetSubDesc();            break;          case 1:            desc += "World children " + GetSubDesc();            break;          case 2:            desc += "Interior Cell Block " + GetSubDesc();            break;          case 3:            desc += "Interior Cell Sub-Block " + GetSubDesc();            break;          case 4:            desc += "Exterior Cell Block " + GetSubDesc();            break;          case 5:            desc += "Exterior Cell Sub-Block " + GetSubDesc();            break;          case 6:            desc += "Cell Children " + GetSubDesc();            break;          case 7:            desc += "Topic Children " + GetSubDesc();            break;          case 8:            desc += "Cell Persistent Childen " + GetSubDesc();            break;          case 9:            desc += "Cell Temporary Children " + GetSubDesc();            break;          case 10:            desc += "Cell Visible Distant Children " + GetSubDesc();            break;          default:            desc += "Unknown";            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            desc += "Top " + GetSubDesc();            break;          case 1:            desc += "World children " + GetSubDesc();            break;          case 2:            desc += "Interior Cell Block " + GetSubDesc();            break;          case 3:            desc += "Interior Cell Sub-Block " + GetSubDesc();            break;          case 4:            desc += "Exterior Cell Block " + GetSubDesc();            break;          case 5:            desc += "Exterior Cell Sub-Block " + GetSubDesc();            break;          case 6:            desc += "Cell Children " + GetSubDesc();            break;          case 7:            desc += "Topic Children " + GetSubDesc();            break;          case 8:            desc += "Cell Persistent Childen " + GetSubDesc();            break;          case 9:            desc += "Cell Temporary Children " + GetSubDesc();            break;          case 10:            desc += "Cell Visible Distant Children " + GetSubDesc();            break;          default:            desc += "Unknown";            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetDesc,The following statement contains a magic number: switch (groupType)        {          case 0:            desc += "Top " + GetSubDesc();            break;          case 1:            desc += "World children " + GetSubDesc();            break;          case 2:            desc += "Interior Cell Block " + GetSubDesc();            break;          case 3:            desc += "Interior Cell Sub-Block " + GetSubDesc();            break;          case 4:            desc += "Exterior Cell Block " + GetSubDesc();            break;          case 5:            desc += "Exterior Cell Sub-Block " + GetSubDesc();            break;          case 6:            desc += "Cell Children " + GetSubDesc();            break;          case 7:            desc += "Topic Children " + GetSubDesc();            break;          case 8:            desc += "Cell Persistent Childen " + GetSubDesc();            break;          case 9:            desc += "Cell Temporary Children " + GetSubDesc();            break;          case 10:            desc += "Cell Visible Distant Children " + GetSubDesc();            break;          default:            desc += "Unknown";            break;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,SetData,The following statement contains a magic number: if (data.Length != 4)        {          throw new ArgumentException("data length must be 4");        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,SetData,The following statement contains a magic number: for (var i = 0; i < 4; i++)        {          this.data[i] = data[i];        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,Record,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,Record,The following statement contains a magic number: if ((Flags1 & 0x00040000) > 0)        {          Flags1 ^= 0x00040000;          var newSize = br.ReadUInt32();          br = Decompress(br' (int) (Size - 4)' (int) newSize);          Size = newSize;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,SubRecord,The following statement contains a magic number: if (size == 0)        {          size = br.ReadUInt16();        }        else        {          br.BaseStream.Position += 2;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,SaveData,The following statement contains a magic number: if (Data.Length > ushort.MaxValue)        {          WriteString(bw' "XXXX");          bw.Write((ushort) 4);          bw.Write(Data.Length);          WriteString(bw' Name);          bw.Write((ushort) 0);          bw.Write(Data' 0' Data.Length);        }        else        {          WriteString(bw' Name);          bw.Write((ushort) Data.Length);          bw.Write(Data' 0' Data.Length);        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetHexData,The following statement contains a magic number: foreach (var b in Data)        {          s += b.ToString("X").PadLeft(2' '0') + " ";        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,SubRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetFormattedData,The following statement contains a magic number: try        {          for (var j = 0; j < ss.elements.Length; j++)          {            if (offset == Data.Length && j == ss.elements.Length - 1 && ss.elements[j].optional)            {              break;            }            var s2 = "";            if (!ss.elements[j].notininfo)            {              s2 += ss.elements[j].name + ": ";            }            switch (ss.elements[j].type)            {              case ElementValueType.Int:                var tmps =                  TypeConverter.h2si(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 +=                      TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString("X8");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    var val = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 4;                break;              case ElementValueType.Short:                tmps = TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += TypeConverter.h2ss(Data[offset]' Data[offset + 1]).ToString("X4");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    uint val = TypeConverter.h2s(Data[offset]' Data[offset + 1]);                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset += 2;                break;              case ElementValueType.Byte:                tmps = Data[offset].ToString();                if (!ss.elements[j].notininfo)                {                  if (ss.elements[j].hexview)                  {                    s2 += Data[offset].ToString("X2");                  }                  else                  {                    s2 += tmps;                  }                  if (ss.elements[j].options != null)                  {                    for (var k = 0; k < ss.elements[j].options.Length; k += 2)                    {                      if (tmps == ss.elements[j].options[k + 1])                      {                        s2 += " (" + ss.elements[j].options[k] + ")";                      }                    }                  }                  else if (ss.elements[j].flags != null)                  {                    int val = Data[offset];                    var tmp2 = "";                    for (var k = 0; k < ss.elements[j].flags.Length; k++)                    {                      if ((val & (1 << k)) != 0)                      {                        if (tmp2.Length > 0)                        {                          tmp2 += "' ";                        }                        tmp2 += ss.elements[j].flags[k];                      }                    }                    if (tmp2.Length > 0)                    {                      s2 += " (" + tmp2 + ")";                    }                  }                }                offset++;                break;              case ElementValueType.FormID:                var id = TypeConverter.h2i(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]);                if (!ss.elements[j].notininfo)                {                  s2 += id.ToString("X8");                }                if (formIDLookup != null)                {                  s2 += ": " + formIDLookup(id);                }                offset += 4;                break;              case ElementValueType.Float:                if (!ss.elements[j].notininfo)                {                  s2 += TypeConverter.h2f(Data[offset]' Data[offset + 1]' Data[offset + 2]' Data[offset + 3]).ToString();                }                offset += 4;                break;              case ElementValueType.String:                if (!ss.elements[j].notininfo)                {                  while (Data[offset] != 0)                  {                    s2 += (char) Data[offset++];                  }                }                else                {                  while (Data[offset] != 0)                  {                    offset++;                  }                }                offset++;                break;              case ElementValueType.fstring:                s2 += GetStrData();                break;              case ElementValueType.Blob:                s2 += GetHexData();                break;              default:                throw new ApplicationException();            }            if (!ss.elements[j].notininfo)            {              s2 += Environment.NewLine;            }            if (offset < Data.Length && j == ss.elements.Length - 1 && ss.elements[j].repeat)            {              j--;            }            s += s2;          }        }        catch        {          s += "Warning: Subrecord doesn't seem to match the expected structure" + Environment.NewLine;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip,FlagDefs,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetRecFlags1Desc,The following statement contains a magic number: for (var i = 0; i < 32; i++)        {          if ((flags & (uint) (1 << i)) > 0)          {            if (b)            {              desc += "' ";            }            b = true;            desc += (RecFlags1[i] == null ? "Unknown (" + ((uint) (1 << i)).ToString("x") + ")" : RecFlags1[i]);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,HexBox,The following statement contains a magic number: _thumbTrackTimer.Interval = 50;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,ToScrollPos,The following statement contains a magic number: var max = 65535;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,ToScrollPos,The following statement contains a magic number: var valperc = value/(double) _scrollVmax*100;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,ToScrollPos,The following statement contains a magic number: var res = (int) Math.Floor((double) max/100*valperc);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,FromScrollPos,The following statement contains a magic number: var max = 65535;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,FromScrollPos,The following statement contains a magic number: var valperc = (double) value/max*100;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,FromScrollPos,The following statement contains a magic number: long res = (int) Math.Floor((double) _scrollVmax/100*valperc);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,ToScrollMax,The following statement contains a magic number: long max = 65535;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PerformScrollThumpPosition,The following statement contains a magic number: var difference = (_scrollVmax > 65535) ? 10 : 9;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PerformScrollThumpPosition,The following statement contains a magic number: var difference = (_scrollVmax > 65535) ? 10 : 9;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PerformScrollThumpPosition,The following statement contains a magic number: var difference = (_scrollVmax > 65535) ? 10 : 9;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,GetHexBytePositionInfo,The following statement contains a magic number: var hPos = (iX/3 + 1);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,GetHexBytePositionInfo,The following statement contains a magic number: var byteCharaterPos = (iX%3);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,Find,The following statement contains a magic number: for (var pos = startIndex; pos < _byteProvider.Length; pos++)        {          if (_abortFind)          {            return -2;          }            if (pos%1000 == 0) // for performance reasons: DoEvents only 1 times per 1000 loops          {            Application.DoEvents();          }            if (_byteProvider.ReadByte(pos) != bytes[match])          {            pos -= match;            match = 0;            CurrentFindingPosition = pos;            continue;          }            match++;            if (match == bytesLength)          {            var bytePos = pos - bytesLength + 1;            Select(bytePos' bytesLength);            ScrollByteIntoView(_bytePos + _selectionLength);            ScrollByteIntoView(_bytePos);              return bytePos;          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,Find,The following statement contains a magic number: for (var pos = startIndex; pos < _byteProvider.Length; pos++)        {          if (_abortFind)          {            return -2;          }            if (pos%1000 == 0) // for performance reasons: DoEvents only 1 times per 1000 loops          {            Application.DoEvents();          }            if (_byteProvider.ReadByte(pos) != bytes[match])          {            pos -= match;            match = 0;            CurrentFindingPosition = pos;            continue;          }            match++;            if (match == bytesLength)          {            var bytePos = pos - bytesLength + 1;            Select(bytePos' bytesLength);            ScrollByteIntoView(_bytePos + _selectionLength);            ScrollByteIntoView(_bytePos);              return bytePos;          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (var i = 0; i < maxLine; i++)        {          var firstLineByte = startByte + (HorizontalByteCount)*i;            var bytePointF = GetBytePointF(new Point(0' 0 + i));          var info = firstLineByte.ToString(_hexStringFormat' Thread.CurrentThread.CurrentCulture);          var nulls = 8 - info.Length;          string formattedInfo;          if (nulls > -1)          {            formattedInfo = new string('0'' 8 - info.Length) + info;          }          else          {            formattedInfo = new string('~'' 8);          }            g.DrawString(formattedInfo' Font' brush' new PointF(_recLineInfo.X' bytePointF.Y)' _stringFormat);        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (var i = 0; i < maxLine; i++)        {          var firstLineByte = startByte + (HorizontalByteCount)*i;            var bytePointF = GetBytePointF(new Point(0' 0 + i));          var info = firstLineByte.ToString(_hexStringFormat' Thread.CurrentThread.CurrentCulture);          var nulls = 8 - info.Length;          string formattedInfo;          if (nulls > -1)          {            formattedInfo = new string('0'' 8 - info.Length) + info;          }          else          {            formattedInfo = new string('~'' 8);          }            g.DrawString(formattedInfo' Font' brush' new PointF(_recLineInfo.X' bytePointF.Y)' _stringFormat);        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (var i = 0; i < maxLine; i++)        {          var firstLineByte = startByte + (HorizontalByteCount)*i;            var bytePointF = GetBytePointF(new Point(0' 0 + i));          var info = firstLineByte.ToString(_hexStringFormat' Thread.CurrentThread.CurrentCulture);          var nulls = 8 - info.Length;          string formattedInfo;          if (nulls > -1)          {            formattedInfo = new string('0'' 8 - info.Length) + info;          }          else          {            formattedInfo = new string('~'' 8);          }            g.DrawString(formattedInfo' Font' brush' new PointF(_recLineInfo.X' bytePointF.Y)' _stringFormat);        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintHexStringSelected,The following statement contains a magic number: var bcWidth = (isLastLineChar) ? _charSize.Width*2 : _charSize.Width*3;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintHexStringSelected,The following statement contains a magic number: var bcWidth = (isLastLineChar) ? _charSize.Width*2 : _charSize.Width*3;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled)        {          if (_keyInterpreter.GetType() == typeof (KeyInterpreter))          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetByteStringPointF(gp);              var s = new Size((int) _charSize.Width' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              if (r.IntersectsWith(_recStringView))              {                r.Intersect(_recStringView);                PaintCurrentByteSign(g' r);              }            }            else            {              var lineWidth = (int) (_recStringView.Width - _charSize.Width);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetByteStringPointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetByteStringPointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recStringView))                {                  singleLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recStringView))                {                  firstLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recStringView.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    _recStringView.Width'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recStringView))                  {                    betweenLines.Intersect(_recStringView);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recStringView.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recStringView.X + _charSize.Width)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recStringView))                {                  lastLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }          else          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetBytePointF(gp);              var s = new Size((int) _charSize.Width*2' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              PaintCurrentByteSign(g' r);            }            else            {              var lineWidth = (int) (_recHex.Width - _charSize.Width*5);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetBytePointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetBytePointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recHex))                {                  singleLine.Intersect(_recHex);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recHex.X + lineWidth - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recHex))                {                  firstLine.Intersect(_recHex);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recHex.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    (int) (lineWidth + _charSize.Width*2)'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recHex))                  {                    betweenLines.Intersect(_recHex);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recHex.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recHex.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recHex))                {                  lastLine.Intersect(_recHex);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled)        {          if (_keyInterpreter.GetType() == typeof (KeyInterpreter))          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetByteStringPointF(gp);              var s = new Size((int) _charSize.Width' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              if (r.IntersectsWith(_recStringView))              {                r.Intersect(_recStringView);                PaintCurrentByteSign(g' r);              }            }            else            {              var lineWidth = (int) (_recStringView.Width - _charSize.Width);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetByteStringPointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetByteStringPointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recStringView))                {                  singleLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recStringView))                {                  firstLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recStringView.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    _recStringView.Width'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recStringView))                  {                    betweenLines.Intersect(_recStringView);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recStringView.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recStringView.X + _charSize.Width)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recStringView))                {                  lastLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }          else          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetBytePointF(gp);              var s = new Size((int) _charSize.Width*2' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              PaintCurrentByteSign(g' r);            }            else            {              var lineWidth = (int) (_recHex.Width - _charSize.Width*5);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetBytePointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetBytePointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recHex))                {                  singleLine.Intersect(_recHex);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recHex.X + lineWidth - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recHex))                {                  firstLine.Intersect(_recHex);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recHex.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    (int) (lineWidth + _charSize.Width*2)'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recHex))                  {                    betweenLines.Intersect(_recHex);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recHex.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recHex.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recHex))                {                  lastLine.Intersect(_recHex);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled)        {          if (_keyInterpreter.GetType() == typeof (KeyInterpreter))          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetByteStringPointF(gp);              var s = new Size((int) _charSize.Width' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              if (r.IntersectsWith(_recStringView))              {                r.Intersect(_recStringView);                PaintCurrentByteSign(g' r);              }            }            else            {              var lineWidth = (int) (_recStringView.Width - _charSize.Width);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetByteStringPointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetByteStringPointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recStringView))                {                  singleLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recStringView))                {                  firstLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recStringView.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    _recStringView.Width'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recStringView))                  {                    betweenLines.Intersect(_recStringView);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recStringView.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recStringView.X + _charSize.Width)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recStringView))                {                  lastLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }          else          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetBytePointF(gp);              var s = new Size((int) _charSize.Width*2' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              PaintCurrentByteSign(g' r);            }            else            {              var lineWidth = (int) (_recHex.Width - _charSize.Width*5);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetBytePointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetBytePointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recHex))                {                  singleLine.Intersect(_recHex);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recHex.X + lineWidth - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recHex))                {                  firstLine.Intersect(_recHex);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recHex.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    (int) (lineWidth + _charSize.Width*2)'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recHex))                  {                    betweenLines.Intersect(_recHex);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recHex.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recHex.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recHex))                {                  lastLine.Intersect(_recHex);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled)        {          if (_keyInterpreter.GetType() == typeof (KeyInterpreter))          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetByteStringPointF(gp);              var s = new Size((int) _charSize.Width' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              if (r.IntersectsWith(_recStringView))              {                r.Intersect(_recStringView);                PaintCurrentByteSign(g' r);              }            }            else            {              var lineWidth = (int) (_recStringView.Width - _charSize.Width);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetByteStringPointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetByteStringPointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recStringView))                {                  singleLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recStringView))                {                  firstLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recStringView.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    _recStringView.Width'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recStringView))                  {                    betweenLines.Intersect(_recStringView);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recStringView.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recStringView.X + _charSize.Width)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recStringView))                {                  lastLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }          else          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetBytePointF(gp);              var s = new Size((int) _charSize.Width*2' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              PaintCurrentByteSign(g' r);            }            else            {              var lineWidth = (int) (_recHex.Width - _charSize.Width*5);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetBytePointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetBytePointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recHex))                {                  singleLine.Intersect(_recHex);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recHex.X + lineWidth - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recHex))                {                  firstLine.Intersect(_recHex);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recHex.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    (int) (lineWidth + _charSize.Width*2)'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recHex))                  {                    betweenLines.Intersect(_recHex);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recHex.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recHex.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recHex))                {                  lastLine.Intersect(_recHex);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled)        {          if (_keyInterpreter.GetType() == typeof (KeyInterpreter))          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetByteStringPointF(gp);              var s = new Size((int) _charSize.Width' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              if (r.IntersectsWith(_recStringView))              {                r.Intersect(_recStringView);                PaintCurrentByteSign(g' r);              }            }            else            {              var lineWidth = (int) (_recStringView.Width - _charSize.Width);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetByteStringPointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetByteStringPointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recStringView))                {                  singleLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recStringView))                {                  firstLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recStringView.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    _recStringView.Width'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recStringView))                  {                    betweenLines.Intersect(_recStringView);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recStringView.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recStringView.X + _charSize.Width)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recStringView))                {                  lastLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }          else          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetBytePointF(gp);              var s = new Size((int) _charSize.Width*2' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              PaintCurrentByteSign(g' r);            }            else            {              var lineWidth = (int) (_recHex.Width - _charSize.Width*5);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetBytePointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetBytePointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recHex))                {                  singleLine.Intersect(_recHex);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recHex.X + lineWidth - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recHex))                {                  firstLine.Intersect(_recHex);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recHex.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    (int) (lineWidth + _charSize.Width*2)'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recHex))                  {                    betweenLines.Intersect(_recHex);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recHex.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recHex.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recHex))                {                  lastLine.Intersect(_recHex);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled)        {          if (_keyInterpreter.GetType() == typeof (KeyInterpreter))          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetByteStringPointF(gp);              var s = new Size((int) _charSize.Width' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              if (r.IntersectsWith(_recStringView))              {                r.Intersect(_recStringView);                PaintCurrentByteSign(g' r);              }            }            else            {              var lineWidth = (int) (_recStringView.Width - _charSize.Width);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetByteStringPointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetByteStringPointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recStringView))                {                  singleLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recStringView))                {                  firstLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recStringView.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    _recStringView.Width'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recStringView))                  {                    betweenLines.Intersect(_recStringView);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recStringView.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recStringView.X + _charSize.Width)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recStringView))                {                  lastLine.Intersect(_recStringView);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }          else          {            if (_selectionLength == 0)            {              var gp = GetGridBytePoint(_bytePos - _startByte);              var pf = GetBytePointF(gp);              var s = new Size((int) _charSize.Width*2' (int) _charSize.Height);              var r = new Rectangle((int) pf.X' (int) pf.Y' s.Width' s.Height);              PaintCurrentByteSign(g' r);            }            else            {              var lineWidth = (int) (_recHex.Width - _charSize.Width*5);                var startSelGridPoint = GetGridBytePoint(_bytePos - _startByte);              var startSelPointF = GetBytePointF(startSelGridPoint);                var endSelGridPoint = GetGridBytePoint(_bytePos - _startByte + _selectionLength - 1);              var endSelPointF = GetBytePointF(endSelGridPoint);                var multiLine = endSelGridPoint.Y - startSelGridPoint.Y;              if (multiLine == 0)              {                var singleLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (endSelPointF.X - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (singleLine.IntersectsWith(_recHex))                {                  singleLine.Intersect(_recHex);                  PaintCurrentByteSign(g' singleLine);                }              }              else              {                var firstLine = new Rectangle(                  (int) startSelPointF.X'                  (int) startSelPointF.Y'                  (int) (_recHex.X + lineWidth - startSelPointF.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (firstLine.IntersectsWith(_recHex))                {                  firstLine.Intersect(_recHex);                  PaintCurrentByteSign(g' firstLine);                }                  if (multiLine > 1)                {                  var betweenLines = new Rectangle(                    _recHex.X'                    (int) (startSelPointF.Y + _charSize.Height)'                    (int) (lineWidth + _charSize.Width*2)'                    (int) (_charSize.Height*(multiLine - 1)));                  if (betweenLines.IntersectsWith(_recHex))                  {                    betweenLines.Intersect(_recHex);                    PaintCurrentByteSign(g' betweenLines);                  }                }                  var lastLine = new Rectangle(                  _recHex.X'                  (int) endSelPointF.Y'                  (int) (endSelPointF.X - _recHex.X + _charSize.Width*2)'                  (int) _charSize.Height);                if (lastLine.IntersectsWith(_recHex))                {                  lastLine.Intersect(_recHex);                  PaintCurrentByteSign(g' lastLine);                }              }            }          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: var charSize = CreateGraphics().MeasureString("A"' Font' 100' _stringFormat);
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: var marginLeft = 4;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (_lineInfoVisible)        {          _recLineInfo = new Rectangle(_recContent.X + marginLeft'                                       _recContent.Y'                                       (int) (_charSize.Width*10)'                                       _recContent.Height);        }        else        {          _recLineInfo = Rectangle.Empty;          _recLineInfo.X = marginLeft;        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (UseFixedBytesPerLine)        {          SetHorizontalByteCount(_bytesPerLine);          _recHex.Width = (int) Math.Floor(((double) HorizontalByteCount)*_charSize.Width*3 + (2*_charSize.Width));        }        else        {          var hmax = (int) Math.Floor((double) _recHex.Width/_charSize.Width);          if (hmax > 1)          {            SetHorizontalByteCount((int) Math.Floor((double) hmax/3));          }          else          {            SetHorizontalByteCount(hmax);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (UseFixedBytesPerLine)        {          SetHorizontalByteCount(_bytesPerLine);          _recHex.Width = (int) Math.Floor(((double) HorizontalByteCount)*_charSize.Width*3 + (2*_charSize.Width));        }        else        {          var hmax = (int) Math.Floor((double) _recHex.Width/_charSize.Width);          if (hmax > 1)          {            SetHorizontalByteCount((int) Math.Floor((double) hmax/3));          }          else          {            SetHorizontalByteCount(hmax);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (UseFixedBytesPerLine)        {          SetHorizontalByteCount(_bytesPerLine);          _recHex.Width = (int) Math.Floor(((double) HorizontalByteCount)*_charSize.Width*3 + (2*_charSize.Width));        }        else        {          var hmax = (int) Math.Floor((double) _recHex.Width/_charSize.Width);          if (hmax > 1)          {            SetHorizontalByteCount((int) Math.Floor((double) hmax/3));          }          else          {            SetHorizontalByteCount(hmax);          }        }
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,GetBytePointF,The following statement contains a magic number: var x = (3*_charSize.Width)*gp.X + _recHex.X;
Magic Number,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,OnMouseWheel,The following statement contains a magic number: var linesToScroll = -(e.Delta*SystemInformation.MouseWheelScrollLines/120);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Location = new System.Drawing.Point(12' 26);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Location = new System.Drawing.Point(12' 26);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton1.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Location = new System.Drawing.Point(78' 26);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Location = new System.Drawing.Point(78' 26);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton2.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Location = new System.Drawing.Point(144' 26);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Location = new System.Drawing.Point(144' 26);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton3.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton4.Location = new System.Drawing.Point(210' 26);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton4.Location = new System.Drawing.Point(210' 26);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton4.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton4.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton4.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton5.Location = new System.Drawing.Point(12' 49);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton5.Location = new System.Drawing.Point(12' 49);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton5.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton5.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton5.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton6.Location = new System.Drawing.Point(78' 49);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton6.Location = new System.Drawing.Point(78' 49);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton6.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton6.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton6.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton7.Location = new System.Drawing.Point(144' 49);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton7.Location = new System.Drawing.Point(144' 49);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton7.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton7.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton7.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton8.Location = new System.Drawing.Point(210' 49);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton8.Location = new System.Drawing.Point(210' 49);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton8.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton8.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton8.TabIndex = 7;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton9.Location = new System.Drawing.Point(12' 72);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton9.Location = new System.Drawing.Point(12' 72);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton9.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton9.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton9.TabIndex = 8;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton10.Location = new System.Drawing.Point(78' 72);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton10.Location = new System.Drawing.Point(78' 72);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton10.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton10.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton10.TabIndex = 9;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton11.Location = new System.Drawing.Point(144' 72);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton11.Location = new System.Drawing.Point(144' 72);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton11.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton11.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton11.TabIndex = 10;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton12.Location = new System.Drawing.Point(210' 72);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton12.Location = new System.Drawing.Point(210' 72);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton12.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton12.Size = new System.Drawing.Size(60' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.radioButton12.TabIndex = 11;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.tbEntry.Location = new System.Drawing.Point(12' 95);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.tbEntry.Location = new System.Drawing.Point(12' 95);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.tbEntry.MaxLength = 256;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.tbEntry.Size = new System.Drawing.Size(126' 20);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.tbEntry.Size = new System.Drawing.Size(126' 20);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.tbEntry.TabIndex = 12;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.bImport.Location = new System.Drawing.Point(158' 144);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.bImport.Location = new System.Drawing.Point(158' 144);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.bImport.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.bImport.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.bImport.TabIndex = 13;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(32' 144);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(32' 144);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 14;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(77' 13);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(77' 13);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 15;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(144' 98);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(144' 98);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(57' 13);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(57' 13);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 16;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.cbDebug.Location = new System.Drawing.Point(12' 121);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.cbDebug.Location = new System.Drawing.Point(12' 121);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.cbDebug.Size = new System.Drawing.Size(172' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.cbDebug.Size = new System.Drawing.Size(172' 17);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.cbDebug.TabIndex = 17;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 183);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,HLSLImporter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\HLSLImporter.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 183);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,Open,The following statement contains a magic number: for (var i = 0; i < num; i++)        {          var s = new Shader();          var name = br.ReadChars(0x100);          s.name = "";          s.name2 = name;          for (var i2 = 0; i2 < 100; i2++)          {            if (name[i2] == '\0')            {              break;            }            s.name += name[i2];          }          var size = br.ReadInt32();          s.data = br.ReadBytes(size);          shaders.Add(s);          cmbShaderSelect.Items.Add(s.name);        }
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,cmbShaderSelect_SelectedIndexChanged,The following statement contains a magic number: text = text.Replace("" + (char) 10' Environment.NewLine);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,Save,The following statement contains a magic number: foreach (var s in shaders)        {          tsize += 0x100 + 4 + s.data.Length;        }
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,Compile,The following statement contains a magic number: var size = (data[3] << 24) + (data[2] << 16) + (data[1] << 8) + data[0];
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,Compile,The following statement contains a magic number: var size = (data[3] << 24) + (data[2] << 16) + (data[1] << 8) + data[0];
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,Compile,The following statement contains a magic number: var size = (data[3] << 24) + (data[2] << 16) + (data[1] << 8) + data[0];
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,Compile,The following statement contains a magic number: var size = (data[3] << 24) + (data[2] << 16) + (data[1] << 8) + data[0];
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,Compile,The following statement contains a magic number: var size = (data[3] << 24) + (data[2] << 16) + (data[1] << 8) + data[0];
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,Compile,The following statement contains a magic number: if (size == 0)        {          var error = "";          for (var i = 4; i < 0x10000; i++)          {            if (data[i] == '\0')            {              break;            }            error += (char) data[i];          }          MessageBox.Show("Shader assembly failed: " + Environment.NewLine +                          error.Replace("" + (char) 10' Environment.NewLine));          return false;        }
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,Compile,The following statement contains a magic number: if (size == 0)        {          var error = "";          for (var i = 4; i < 0x10000; i++)          {            if (data[i] == '\0')            {              break;            }            error += (char) data[i];          }          MessageBox.Show("Shader assembly failed: " + Environment.NewLine +                          error.Replace("" + (char) 10' Environment.NewLine));          return false;        }
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,Compile,The following statement contains a magic number: for (var i = 0; i < size; i++)        {          newdata[i] = data[i + 4];        }
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,importHLSLToolStripMenuItem_Click,The following statement contains a magic number: var size = (data[3] << 24) + (data[2] << 16) + (data[1] << 8) + data[0];
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,importHLSLToolStripMenuItem_Click,The following statement contains a magic number: var size = (data[3] << 24) + (data[2] << 16) + (data[1] << 8) + data[0];
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,importHLSLToolStripMenuItem_Click,The following statement contains a magic number: var size = (data[3] << 24) + (data[2] << 16) + (data[1] << 8) + data[0];
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,importHLSLToolStripMenuItem_Click,The following statement contains a magic number: var size = (data[3] << 24) + (data[2] << 16) + (data[1] << 8) + data[0];
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,importHLSLToolStripMenuItem_Click,The following statement contains a magic number: var size = (data[3] << 24) + (data[2] << 16) + (data[1] << 8) + data[0];
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,importHLSLToolStripMenuItem_Click,The following statement contains a magic number: if (size == 0)        {          var error = "";          for (var i = 4; i < 0x10000; i++)          {            if (data[i] == '\0')            {              break;            }            error += (char) data[i];          }          MessageBox.Show("Shader compilation failed: " + Environment.NewLine +                          error.Replace("" + (char) 10' Environment.NewLine));        }        else        {          shaders[Editing].data = new byte[size];          var newdata = new byte[size];          for (var i = 0; i < size; i++)          {            newdata[i] = data[i + 4];          }          Array.Copy(newdata' 0' shaders[Editing].data' 0' size);          ChangedFile = true;          Text = "SDP Editor (" + FileName + ")";          Editing = -1;          cmbShaderSelect_SelectedIndexChanged(null' null);        }
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,importHLSLToolStripMenuItem_Click,The following statement contains a magic number: if (size == 0)        {          var error = "";          for (var i = 4; i < 0x10000; i++)          {            if (data[i] == '\0')            {              break;            }            error += (char) data[i];          }          MessageBox.Show("Shader compilation failed: " + Environment.NewLine +                          error.Replace("" + (char) 10' Environment.NewLine));        }        else        {          shaders[Editing].data = new byte[size];          var newdata = new byte[size];          for (var i = 0; i < size; i++)          {            newdata[i] = data[i + 4];          }          Array.Copy(newdata' 0' shaders[Editing].data' 0' size);          ChangedFile = true;          Text = "SDP Editor (" + FileName + ")";          Editing = -1;          cmbShaderSelect_SelectedIndexChanged(null' null);        }
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,importHLSLToolStripMenuItem_Click,The following statement contains a magic number: if (size == 0)        {          var error = "";          for (var i = 4; i < 0x10000; i++)          {            if (data[i] == '\0')            {              break;            }            error += (char) data[i];          }          MessageBox.Show("Shader compilation failed: " + Environment.NewLine +                          error.Replace("" + (char) 10' Environment.NewLine));        }        else        {          shaders[Editing].data = new byte[size];          var newdata = new byte[size];          for (var i = 0; i < size; i++)          {            newdata[i] = data[i + 4];          }          Array.Copy(newdata' 0' shaders[Editing].data' 0' size);          ChangedFile = true;          Text = "SDP Editor (" + FileName + ")";          Editing = -1;          cmbShaderSelect_SelectedIndexChanged(null' null);        }
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,importBinaryToolStripMenuItem_Click,The following statement contains a magic number: if (new IntPtr(result) == IntPtr.Zero)        {          MessageBox.Show("An error occured during shader disassembly"' "Error");        }        else        {          shaders[Editing].data = b;          var text = new string(result);          tbEdit.Text = text.Replace("" + (char) 10' Environment.NewLine);        }
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbEdit.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbEdit.Location = new System.Drawing.Point(12' 12);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbEdit.Size = new System.Drawing.Size(580' 350);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbEdit.Size = new System.Drawing.Size(580' 350);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(355' 368);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(355' 368);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bOpen.Location = new System.Drawing.Point(517' 368);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bOpen.Location = new System.Drawing.Point(517' 368);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bOpen.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bOpen.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bOpen.TabIndex = 2;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbShaderSelect.Location = new System.Drawing.Point(12' 370);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbShaderSelect.Location = new System.Drawing.Point(12' 370);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbShaderSelect.MaxDropDownItems = 20;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbShaderSelect.Size = new System.Drawing.Size(155' 21);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbShaderSelect.Size = new System.Drawing.Size(155' 21);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmbShaderSelect.TabIndex = 3;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.DudMenu.Size = new System.Drawing.Size(61' 4);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.DudMenu.Size = new System.Drawing.Size(61' 4);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bCompile.Location = new System.Drawing.Point(173' 368);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bCompile.Location = new System.Drawing.Point(173' 368);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bCompile.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bCompile.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bCompile.TabIndex = 4;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bClose.Location = new System.Drawing.Point(436' 368);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bClose.Location = new System.Drawing.Point(436' 368);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bClose.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bClose.Size = new System.Drawing.Size(75' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bClose.TabIndex = 5;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bImport.Location = new System.Drawing.Point(254' 368);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bImport.Location = new System.Drawing.Point(254' 368);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bImport.Size = new System.Drawing.Size(83' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bImport.Size = new System.Drawing.Size(83' 23);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bImport.TabIndex = 6;
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ImportMenu.Size = new System.Drawing.Size(153' 92);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ImportMenu.Size = new System.Drawing.Size(153' 92);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.importHLSLToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.importHLSLToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.importBinaryToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.importBinaryToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exportBinaryToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exportBinaryToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exportBinaryAllToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exportBinaryAllToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(604' 403);
Magic Number,Fomm.Games.Fallout3.Tools.ShaderEdit,MainForm,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\ShaderEdit\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(604' 403);
Magic Number,Fomm.SharpZipLib.Checksums,Adler32,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: var s2 = checksum >> 16;
Magic Number,Fomm.SharpZipLib.Checksums,Adler32,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) + s1;
Magic Number,Fomm.SharpZipLib.Checksums,Adler32,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: var s2 = checksum >> 16;
Magic Number,Fomm.SharpZipLib.Checksums,Adler32,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: while (count > 0)        {          // We can defer the modulo operation:          // s1 maximally grows from 65521 to 65521 + 255 * 3800          // s2 maximally grows by 3800 * median(s1) = 2090079800 < 2^31          var n = 3800;          if (n > count)          {            n = count;          }          count -= n;          while (--n >= 0)          {            s1 = s1 + (uint) (buffer[offset++] & 0xff);            s2 = s2 + s1;          }          s1 %= BASE;          s2 %= BASE;        }
Magic Number,Fomm.SharpZipLib.Checksums,Adler32,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) | s1;
Magic Number,Fomm.SharpZipLib.Checksums,Crc32,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Checksums\CRC32.cs,Update,The following statement contains a magic number: crc = CrcTable[(crc ^ value) & 0xFF] ^ (crc >> 8);
Magic Number,Fomm.SharpZipLib.Checksums,Crc32,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Checksums\CRC32.cs,Update,The following statement contains a magic number: while (--count >= 0)        {          crc = CrcTable[(crc ^ buffer[offset++]) & 0xFF] ^ (crc >> 8);        }
Magic Number,Fomm.SharpZipLib.Core,StreamUtils,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Core\StreamUtils.cs,Copy,The following statement contains a magic number: if (buffer.Length < 128)        {          throw new ArgumentException("Buffer is too small"' "buffer");        }
Magic Number,Fomm.SharpZipLib.Core,WindowsPathUtils,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if (!string.IsNullOrEmpty(path))        {          if ((path[0] == '\\') || (path[0] == '/'))          {            // UNC name ?            if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/')))            {              var index = 2;              var elements = 2;                // Scan for two separate elements \\machine\share\restofpath              while ((index <= path.Length) &&                     (((path[index] != '\\') && (path[index] != '/')) || (--elements > 0)))              {                index++;              }                index++;                result = index < path.Length ? path.Substring(index) : "";            }          }          else if ((path.Length > 1) && (path[1] == ':'))          {            var dropCount = 2;            if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/')))            {              dropCount = 3;            }            result = result.Remove(0' dropCount);          }        }
Magic Number,Fomm.SharpZipLib.Core,WindowsPathUtils,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if (!string.IsNullOrEmpty(path))        {          if ((path[0] == '\\') || (path[0] == '/'))          {            // UNC name ?            if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/')))            {              var index = 2;              var elements = 2;                // Scan for two separate elements \\machine\share\restofpath              while ((index <= path.Length) &&                     (((path[index] != '\\') && (path[index] != '/')) || (--elements > 0)))              {                index++;              }                index++;                result = index < path.Length ? path.Substring(index) : "";            }          }          else if ((path.Length > 1) && (path[1] == ':'))          {            var dropCount = 2;            if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/')))            {              dropCount = 3;            }            result = result.Remove(0' dropCount);          }        }
Magic Number,Fomm.SharpZipLib.Core,WindowsPathUtils,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if (!string.IsNullOrEmpty(path))        {          if ((path[0] == '\\') || (path[0] == '/'))          {            // UNC name ?            if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/')))            {              var index = 2;              var elements = 2;                // Scan for two separate elements \\machine\share\restofpath              while ((index <= path.Length) &&                     (((path[index] != '\\') && (path[index] != '/')) || (--elements > 0)))              {                index++;              }                index++;                result = index < path.Length ? path.Substring(index) : "";            }          }          else if ((path.Length > 1) && (path[1] == ':'))          {            var dropCount = 2;            if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/')))            {              dropCount = 3;            }            result = result.Remove(0' dropCount);          }        }
Magic Number,Fomm.SharpZipLib.Core,WindowsPathUtils,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if (!string.IsNullOrEmpty(path))        {          if ((path[0] == '\\') || (path[0] == '/'))          {            // UNC name ?            if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/')))            {              var index = 2;              var elements = 2;                // Scan for two separate elements \\machine\share\restofpath              while ((index <= path.Length) &&                     (((path[index] != '\\') && (path[index] != '/')) || (--elements > 0)))              {                index++;              }                index++;                result = index < path.Length ? path.Substring(index) : "";            }          }          else if ((path.Length > 1) && (path[1] == ':'))          {            var dropCount = 2;            if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/')))            {              dropCount = 3;            }            result = result.Remove(0' dropCount);          }        }
Magic Number,Fomm.SharpZipLib.Core,WindowsPathUtils,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if (!string.IsNullOrEmpty(path))        {          if ((path[0] == '\\') || (path[0] == '/'))          {            // UNC name ?            if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/')))            {              var index = 2;              var elements = 2;                // Scan for two separate elements \\machine\share\restofpath              while ((index <= path.Length) &&                     (((path[index] != '\\') && (path[index] != '/')) || (--elements > 0)))              {                index++;              }                index++;                result = index < path.Length ? path.Substring(index) : "";            }          }          else if ((path.Length > 1) && (path[1] == ':'))          {            var dropCount = 2;            if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/')))            {              dropCount = 3;            }            result = result.Remove(0' dropCount);          }        }
Magic Number,Fomm.SharpZipLib.Core,WindowsPathUtils,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if (!string.IsNullOrEmpty(path))        {          if ((path[0] == '\\') || (path[0] == '/'))          {            // UNC name ?            if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/')))            {              var index = 2;              var elements = 2;                // Scan for two separate elements \\machine\share\restofpath              while ((index <= path.Length) &&                     (((path[index] != '\\') && (path[index] != '/')) || (--elements > 0)))              {                index++;              }                index++;                result = index < path.Length ? path.Substring(index) : "";            }          }          else if ((path.Length > 1) && (path[1] == ':'))          {            var dropCount = 2;            if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/')))            {              dropCount = 3;            }            result = result.Remove(0' dropCount);          }        }
Magic Number,Fomm.SharpZipLib.Core,WindowsPathUtils,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if (!string.IsNullOrEmpty(path))        {          if ((path[0] == '\\') || (path[0] == '/'))          {            // UNC name ?            if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/')))            {              var index = 2;              var elements = 2;                // Scan for two separate elements \\machine\share\restofpath              while ((index <= path.Length) &&                     (((path[index] != '\\') && (path[index] != '/')) || (--elements > 0)))              {                index++;              }                index++;                result = index < path.Length ? path.Substring(index) : "";            }          }          else if ((path.Length > 1) && (path[1] == ':'))          {            var dropCount = 2;            if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/')))            {              dropCount = 3;            }            result = result.Remove(0' dropCount);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflater,The following statement contains a magic number: if (level == DEFAULT_COMPRESSION)        {          level = 6;        }        else if (level < NO_COMPRESSION || level > BEST_COMPRESSION)        {          throw new ArgumentOutOfRangeException("level");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,SetLevel,The following statement contains a magic number: if (level == DEFAULT_COMPRESSION)        {          level = 6;        }        else if (level < NO_COMPRESSION || level > BEST_COMPRESSION)        {          throw new ArgumentOutOfRangeException("level");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE)        {          // output header          var header = (DEFLATED +                        ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;          var level_flags = (level - 1) >> 1;          if (level_flags < 0 || level_flags > 3)          {            level_flags = 3;          }          header |= level_flags << 6;          if ((state & IS_SETDICT) != 0)          {            // Dictionary was set            header |= DeflaterConstants.PRESET_DICT;          }          header += 31 - (header%31);            pending.WriteShortMSB(header);          if ((state & IS_SETDICT) != 0)          {            var chksum = engine.Adler;            engine.ResetAdler();            pending.WriteShortMSB(chksum >> 16);            pending.WriteShortMSB(chksum & 0xffff);          }            state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE)        {          // output header          var header = (DEFLATED +                        ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;          var level_flags = (level - 1) >> 1;          if (level_flags < 0 || level_flags > 3)          {            level_flags = 3;          }          header |= level_flags << 6;          if ((state & IS_SETDICT) != 0)          {            // Dictionary was set            header |= DeflaterConstants.PRESET_DICT;          }          header += 31 - (header%31);            pending.WriteShortMSB(header);          if ((state & IS_SETDICT) != 0)          {            var chksum = engine.Adler;            engine.ResetAdler();            pending.WriteShortMSB(chksum >> 16);            pending.WriteShortMSB(chksum & 0xffff);          }            state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE)        {          // output header          var header = (DEFLATED +                        ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;          var level_flags = (level - 1) >> 1;          if (level_flags < 0 || level_flags > 3)          {            level_flags = 3;          }          header |= level_flags << 6;          if ((state & IS_SETDICT) != 0)          {            // Dictionary was set            header |= DeflaterConstants.PRESET_DICT;          }          header += 31 - (header%31);            pending.WriteShortMSB(header);          if ((state & IS_SETDICT) != 0)          {            var chksum = engine.Adler;            engine.ResetAdler();            pending.WriteShortMSB(chksum >> 16);            pending.WriteShortMSB(chksum & 0xffff);          }            state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE)        {          // output header          var header = (DEFLATED +                        ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;          var level_flags = (level - 1) >> 1;          if (level_flags < 0 || level_flags > 3)          {            level_flags = 3;          }          header |= level_flags << 6;          if ((state & IS_SETDICT) != 0)          {            // Dictionary was set            header |= DeflaterConstants.PRESET_DICT;          }          header += 31 - (header%31);            pending.WriteShortMSB(header);          if ((state & IS_SETDICT) != 0)          {            var chksum = engine.Adler;            engine.ResetAdler();            pending.WriteShortMSB(chksum >> 16);            pending.WriteShortMSB(chksum & 0xffff);          }            state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE)        {          // output header          var header = (DEFLATED +                        ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;          var level_flags = (level - 1) >> 1;          if (level_flags < 0 || level_flags > 3)          {            level_flags = 3;          }          header |= level_flags << 6;          if ((state & IS_SETDICT) != 0)          {            // Dictionary was set            header |= DeflaterConstants.PRESET_DICT;          }          header += 31 - (header%31);            pending.WriteShortMSB(header);          if ((state & IS_SETDICT) != 0)          {            var chksum = engine.Adler;            engine.ResetAdler();            pending.WriteShortMSB(chksum >> 16);            pending.WriteShortMSB(chksum & 0xffff);          }            state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE)        {          // output header          var header = (DEFLATED +                        ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;          var level_flags = (level - 1) >> 1;          if (level_flags < 0 || level_flags > 3)          {            level_flags = 3;          }          header |= level_flags << 6;          if ((state & IS_SETDICT) != 0)          {            // Dictionary was set            header |= DeflaterConstants.PRESET_DICT;          }          header += 31 - (header%31);            pending.WriteShortMSB(header);          if ((state & IS_SETDICT) != 0)          {            var chksum = engine.Adler;            engine.ResetAdler();            pending.WriteShortMSB(chksum >> 16);            pending.WriteShortMSB(chksum & 0xffff);          }            state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE)        {          // output header          var header = (DEFLATED +                        ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;          var level_flags = (level - 1) >> 1;          if (level_flags < 0 || level_flags > 3)          {            level_flags = 3;          }          header |= level_flags << 6;          if ((state & IS_SETDICT) != 0)          {            // Dictionary was set            header |= DeflaterConstants.PRESET_DICT;          }          header += 31 - (header%31);            pending.WriteShortMSB(header);          if ((state & IS_SETDICT) != 0)          {            var chksum = engine.Adler;            engine.ResetAdler();            pending.WriteShortMSB(chksum >> 16);            pending.WriteShortMSB(chksum & 0xffff);          }            state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE)        {          // output header          var header = (DEFLATED +                        ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;          var level_flags = (level - 1) >> 1;          if (level_flags < 0 || level_flags > 3)          {            level_flags = 3;          }          header |= level_flags << 6;          if ((state & IS_SETDICT) != 0)          {            // Dictionary was set            header |= DeflaterConstants.PRESET_DICT;          }          header += 31 - (header%31);            pending.WriteShortMSB(header);          if ((state & IS_SETDICT) != 0)          {            var chksum = engine.Adler;            engine.ResetAdler();            pending.WriteShortMSB(chksum >> 16);            pending.WriteShortMSB(chksum & 0xffff);          }            state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE)        {          // output header          var header = (DEFLATED +                        ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;          var level_flags = (level - 1) >> 1;          if (level_flags < 0 || level_flags > 3)          {            level_flags = 3;          }          header |= level_flags << 6;          if ((state & IS_SETDICT) != 0)          {            // Dictionary was set            header |= DeflaterConstants.PRESET_DICT;          }          header += 31 - (header%31);            pending.WriteShortMSB(header);          if ((state & IS_SETDICT) != 0)          {            var chksum = engine.Adler;            engine.ResetAdler();            pending.WriteShortMSB(chksum >> 16);            pending.WriteShortMSB(chksum & 0xffff);          }            state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;)        {          var count = pending.Flush(output' offset' length);          offset += count;          TotalOut += count;          length -= count;            if (length == 0 || state == FINISHED_STATE)          {            break;          }            if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0))          {            if (state == BUSY_STATE)            {              // We need more input now              return origLength - length;            }              if (state == FLUSHING_STATE)            {              if (level != NO_COMPRESSION)              {                /* We have to supply some lookahead.  8 bit lookahead                 * is needed by the zlib inflater' and we must fill                 * the next byte' so that all bits are flushed.                 */                var neededbits = 8 + ((-pending.BitCount) & 7);                while (neededbits > 0)                {                  /* write a static tree block consisting solely of                   * an EOF:                   */                  pending.WriteBits(2' 10);                  neededbits -= 10;                }              }              state = BUSY_STATE;            }            else if (state == FINISHING_STATE)            {              pending.AlignToByte();                // Compressed data is complete.  Write footer information if required.              if (!noZlibHeaderOrFooter)              {                var adler = engine.Adler;                pending.WriteShortMSB(adler >> 16);                pending.WriteShortMSB(adler & 0xffff);              }              state = FINISHED_STATE;            }          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;)        {          var count = pending.Flush(output' offset' length);          offset += count;          TotalOut += count;          length -= count;            if (length == 0 || state == FINISHED_STATE)          {            break;          }            if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0))          {            if (state == BUSY_STATE)            {              // We need more input now              return origLength - length;            }              if (state == FLUSHING_STATE)            {              if (level != NO_COMPRESSION)              {                /* We have to supply some lookahead.  8 bit lookahead                 * is needed by the zlib inflater' and we must fill                 * the next byte' so that all bits are flushed.                 */                var neededbits = 8 + ((-pending.BitCount) & 7);                while (neededbits > 0)                {                  /* write a static tree block consisting solely of                   * an EOF:                   */                  pending.WriteBits(2' 10);                  neededbits -= 10;                }              }              state = BUSY_STATE;            }            else if (state == FINISHING_STATE)            {              pending.AlignToByte();                // Compressed data is complete.  Write footer information if required.              if (!noZlibHeaderOrFooter)              {                var adler = engine.Adler;                pending.WriteShortMSB(adler >> 16);                pending.WriteShortMSB(adler & 0xffff);              }              state = FINISHED_STATE;            }          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;)        {          var count = pending.Flush(output' offset' length);          offset += count;          TotalOut += count;          length -= count;            if (length == 0 || state == FINISHED_STATE)          {            break;          }            if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0))          {            if (state == BUSY_STATE)            {              // We need more input now              return origLength - length;            }              if (state == FLUSHING_STATE)            {              if (level != NO_COMPRESSION)              {                /* We have to supply some lookahead.  8 bit lookahead                 * is needed by the zlib inflater' and we must fill                 * the next byte' so that all bits are flushed.                 */                var neededbits = 8 + ((-pending.BitCount) & 7);                while (neededbits > 0)                {                  /* write a static tree block consisting solely of                   * an EOF:                   */                  pending.WriteBits(2' 10);                  neededbits -= 10;                }              }              state = BUSY_STATE;            }            else if (state == FINISHING_STATE)            {              pending.AlignToByte();                // Compressed data is complete.  Write footer information if required.              if (!noZlibHeaderOrFooter)              {                var adler = engine.Adler;                pending.WriteShortMSB(adler >> 16);                pending.WriteShortMSB(adler & 0xffff);              }              state = FINISHED_STATE;            }          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;)        {          var count = pending.Flush(output' offset' length);          offset += count;          TotalOut += count;          length -= count;            if (length == 0 || state == FINISHED_STATE)          {            break;          }            if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0))          {            if (state == BUSY_STATE)            {              // We need more input now              return origLength - length;            }              if (state == FLUSHING_STATE)            {              if (level != NO_COMPRESSION)              {                /* We have to supply some lookahead.  8 bit lookahead                 * is needed by the zlib inflater' and we must fill                 * the next byte' so that all bits are flushed.                 */                var neededbits = 8 + ((-pending.BitCount) & 7);                while (neededbits > 0)                {                  /* write a static tree block consisting solely of                   * an EOF:                   */                  pending.WriteBits(2' 10);                  neededbits -= 10;                }              }              state = BUSY_STATE;            }            else if (state == FINISHING_STATE)            {              pending.AlignToByte();                // Compressed data is complete.  Write footer information if required.              if (!noZlibHeaderOrFooter)              {                var adler = engine.Adler;                pending.WriteShortMSB(adler >> 16);                pending.WriteShortMSB(adler & 0xffff);              }              state = FINISHED_STATE;            }          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;)        {          var count = pending.Flush(output' offset' length);          offset += count;          TotalOut += count;          length -= count;            if (length == 0 || state == FINISHED_STATE)          {            break;          }            if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0))          {            if (state == BUSY_STATE)            {              // We need more input now              return origLength - length;            }              if (state == FLUSHING_STATE)            {              if (level != NO_COMPRESSION)              {                /* We have to supply some lookahead.  8 bit lookahead                 * is needed by the zlib inflater' and we must fill                 * the next byte' so that all bits are flushed.                 */                var neededbits = 8 + ((-pending.BitCount) & 7);                while (neededbits > 0)                {                  /* write a static tree block consisting solely of                   * an EOF:                   */                  pending.WriteBits(2' 10);                  neededbits -= 10;                }              }              state = BUSY_STATE;            }            else if (state == FINISHING_STATE)            {              pending.AlignToByte();                // Compressed data is complete.  Write footer information if required.              if (!noZlibHeaderOrFooter)              {                var adler = engine.Adler;                pending.WriteShortMSB(adler >> 16);                pending.WriteShortMSB(adler & 0xffff);              }              state = FINISHED_STATE;            }          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Deflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;)        {          var count = pending.Flush(output' offset' length);          offset += count;          TotalOut += count;          length -= count;            if (length == 0 || state == FINISHED_STATE)          {            break;          }            if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0))          {            if (state == BUSY_STATE)            {              // We need more input now              return origLength - length;            }              if (state == FLUSHING_STATE)            {              if (level != NO_COMPRESSION)              {                /* We have to supply some lookahead.  8 bit lookahead                 * is needed by the zlib inflater' and we must fill                 * the next byte' so that all bits are flushed.                 */                var neededbits = 8 + ((-pending.BitCount) & 7);                while (neededbits > 0)                {                  /* write a static tree block consisting solely of                   * an EOF:                   */                  pending.WriteBits(2' 10);                  neededbits -= 10;                }              }              state = BUSY_STATE;            }            else if (state == FINISHING_STATE)            {              pending.AlignToByte();                // Compressed data is complete.  Write footer information if required.              if (!noZlibHeaderOrFooter)              {                var adler = engine.Adler;                pending.WriteShortMSB(adler >> 16);                pending.WriteShortMSB(adler & 0xffff);              }              state = FINISHED_STATE;            }          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflaterEngine,The following statement contains a magic number: window = new byte[2*DeflaterConstants.WSIZE];
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,SetLevel,The following statement contains a magic number: if ((level < 0) || (level > 9))        {          throw new ArgumentOutOfRangeException("level");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,FillWindow,The following statement contains a magic number: while (lookahead < DeflaterConstants.MIN_LOOKAHEAD && inputOff < inputEnd)        {          var more = 2*DeflaterConstants.WSIZE - lookahead - strstart;            if (more > inputEnd - inputOff)          {            more = inputEnd - inputOff;          }            Array.Copy(inputBuf' inputOff' window' strstart + lookahead' more);          adler.Update(inputBuf' inputOff' more);            inputOff += more;          lookahead += more;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: if (best_len >= goodLength)        {          chainLength >>= 2;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: do        {          if (window[curMatch + best_len] != scan_end ||              window[curMatch + best_len - 1] != scan_end1 ||              window[curMatch] != window[scan] ||              window[curMatch + 1] != window[scan + 1])          {            continue;          }            var match = curMatch + 2;          scan += 2;            /* We check for insufficient lookahead only every 8th comparison;          * the 256th check will be made at strstart + 258.          */          while (            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            (scan < strend))          {            // Do nothing          }            if (scan > best_end)          {            matchStart = curMatch;            best_end = scan;            best_len = scan - strstart;              if (best_len >= niceLength)            {              break;            }              scan_end1 = window[best_end - 1];            scan_end = window[best_end];          }          scan = strstart;        }        while ((curMatch = (prev[curMatch & DeflaterConstants.WMASK] & 0xffff)) > limit && --chainLength != 0);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: do        {          if (window[curMatch + best_len] != scan_end ||              window[curMatch + best_len - 1] != scan_end1 ||              window[curMatch] != window[scan] ||              window[curMatch + 1] != window[scan + 1])          {            continue;          }            var match = curMatch + 2;          scan += 2;            /* We check for insufficient lookahead only every 8th comparison;          * the 256th check will be made at strstart + 258.          */          while (            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            window[++scan] == window[++match] &&            (scan < strend))          {            // Do nothing          }            if (scan > best_end)          {            matchStart = curMatch;            best_end = scan;            best_len = scan - strstart;              if (best_len >= niceLength)            {              break;            }              scan_end1 = window[best_end - 1];            scan_end = window[best_end];          }          scan = strstart;        }        while ((curMatch = (prev[curMatch & DeflaterConstants.WMASK] & 0xffff)) > limit && --chainLength != 0);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateFast,The following statement contains a magic number: while (lookahead >= DeflaterConstants.MIN_LOOKAHEAD || flush)        {          if (lookahead == 0)          {            // We are flushing everything            huffman.FlushBlock(window' blockStart' strstart - blockStart' finish);            blockStart = strstart;            return false;          }            if (strstart > 2*DeflaterConstants.WSIZE - DeflaterConstants.MIN_LOOKAHEAD)          {            /* slide window' as FindLongestMatch needs this.             * This should only happen when flushing and the window             * is almost full.             */            SlideWindow();          }            int hashHead;          if (lookahead >= DeflaterConstants.MIN_MATCH &&              (hashHead = InsertString()) != 0 &&              strategy != DeflateStrategy.HuffmanOnly &&              strstart - hashHead <= DeflaterConstants.MAX_DIST &&              FindLongestMatch(hashHead))          {            // longestMatch sets matchStart and matchLen              var full = huffman.TallyDist(strstart - matchStart' matchLen);              lookahead -= matchLen;            if (matchLen <= max_lazy && lookahead >= DeflaterConstants.MIN_MATCH)            {              while (--matchLen > 0)              {                ++strstart;                InsertString();              }              ++strstart;            }            else            {              strstart += matchLen;              if (lookahead >= DeflaterConstants.MIN_MATCH - 1)              {                UpdateHash();              }            }            matchLen = DeflaterConstants.MIN_MATCH - 1;            if (!full)            {              continue;            }          }          else          {            // No match found            huffman.TallyLit(window[strstart] & 0xff);            ++strstart;            --lookahead;          }            if (huffman.IsFull())          {            var lastBlock = finish && (lookahead == 0);            huffman.FlushBlock(window' blockStart' strstart - blockStart' lastBlock);            blockStart = strstart;            return !lastBlock;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: while (lookahead >= DeflaterConstants.MIN_LOOKAHEAD || flush)        {          if (lookahead == 0)          {            if (prevAvailable)            {              huffman.TallyLit(window[strstart - 1] & 0xff);            }            prevAvailable = false;              // We are flushing everything  #if DebugDeflation            if (DeflaterConstants.DEBUGGING && !flush)             {              throw new SharpZipBaseException("Not flushing' but no lookahead");            }  #endif            huffman.FlushBlock(window' blockStart' strstart - blockStart'                               finish);            blockStart = strstart;            return false;          }            if (strstart >= 2*DeflaterConstants.WSIZE - DeflaterConstants.MIN_LOOKAHEAD)          {            /* slide window' as FindLongestMatch needs this.             * This should only happen when flushing and the window             * is almost full.             */            SlideWindow();          }            var prevMatch = matchStart;          var prevLen = matchLen;          if (lookahead >= DeflaterConstants.MIN_MATCH)          {            var hashHead = InsertString();              if (strategy != DeflateStrategy.HuffmanOnly &&                hashHead != 0 &&                strstart - hashHead <= DeflaterConstants.MAX_DIST &&                FindLongestMatch(hashHead))            {              // longestMatch sets matchStart and matchLen                // Discard match if too small and too far away              if (matchLen <= 5 &&                  (strategy == DeflateStrategy.Filtered ||                   (matchLen == DeflaterConstants.MIN_MATCH && strstart - matchStart > TooFar)))              {                matchLen = DeflaterConstants.MIN_MATCH - 1;              }            }          }            // previous match was better          if ((prevLen >= DeflaterConstants.MIN_MATCH) && (matchLen <= prevLen))          {            huffman.TallyDist(strstart - 1 - prevMatch' prevLen);            prevLen -= 2;            do            {              strstart++;              lookahead--;              if (lookahead >= DeflaterConstants.MIN_MATCH)              {                InsertString();              }            }            while (--prevLen > 0);              strstart ++;            lookahead--;            prevAvailable = false;            matchLen = DeflaterConstants.MIN_MATCH - 1;          }          else          {            if (prevAvailable)            {              huffman.TallyLit(window[strstart - 1] & 0xff);            }            prevAvailable = true;            strstart++;            lookahead--;          }            if (huffman.IsFull())          {            var len = strstart - blockStart;            if (prevAvailable)            {              len--;            }            var lastBlock = (finish && (lookahead == 0) && !prevAvailable);            huffman.FlushBlock(window' blockStart' len' lastBlock);            blockStart += len;            return !lastBlock;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: while (lookahead >= DeflaterConstants.MIN_LOOKAHEAD || flush)        {          if (lookahead == 0)          {            if (prevAvailable)            {              huffman.TallyLit(window[strstart - 1] & 0xff);            }            prevAvailable = false;              // We are flushing everything  #if DebugDeflation            if (DeflaterConstants.DEBUGGING && !flush)             {              throw new SharpZipBaseException("Not flushing' but no lookahead");            }  #endif            huffman.FlushBlock(window' blockStart' strstart - blockStart'                               finish);            blockStart = strstart;            return false;          }            if (strstart >= 2*DeflaterConstants.WSIZE - DeflaterConstants.MIN_LOOKAHEAD)          {            /* slide window' as FindLongestMatch needs this.             * This should only happen when flushing and the window             * is almost full.             */            SlideWindow();          }            var prevMatch = matchStart;          var prevLen = matchLen;          if (lookahead >= DeflaterConstants.MIN_MATCH)          {            var hashHead = InsertString();              if (strategy != DeflateStrategy.HuffmanOnly &&                hashHead != 0 &&                strstart - hashHead <= DeflaterConstants.MAX_DIST &&                FindLongestMatch(hashHead))            {              // longestMatch sets matchStart and matchLen                // Discard match if too small and too far away              if (matchLen <= 5 &&                  (strategy == DeflateStrategy.Filtered ||                   (matchLen == DeflaterConstants.MIN_MATCH && strstart - matchStart > TooFar)))              {                matchLen = DeflaterConstants.MIN_MATCH - 1;              }            }          }            // previous match was better          if ((prevLen >= DeflaterConstants.MIN_MATCH) && (matchLen <= prevLen))          {            huffman.TallyDist(strstart - 1 - prevMatch' prevLen);            prevLen -= 2;            do            {              strstart++;              lookahead--;              if (lookahead >= DeflaterConstants.MIN_MATCH)              {                InsertString();              }            }            while (--prevLen > 0);              strstart ++;            lookahead--;            prevAvailable = false;            matchLen = DeflaterConstants.MIN_MATCH - 1;          }          else          {            if (prevAvailable)            {              huffman.TallyLit(window[strstart - 1] & 0xff);            }            prevAvailable = true;            strstart++;            lookahead--;          }            if (huffman.IsFull())          {            var len = strstart - blockStart;            if (prevAvailable)            {              len--;            }            var lastBlock = (finish && (lookahead == 0) && !prevAvailable);            huffman.FlushBlock(window' blockStart' len' lastBlock);            blockStart += len;            return !lastBlock;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: while (lookahead >= DeflaterConstants.MIN_LOOKAHEAD || flush)        {          if (lookahead == 0)          {            if (prevAvailable)            {              huffman.TallyLit(window[strstart - 1] & 0xff);            }            prevAvailable = false;              // We are flushing everything  #if DebugDeflation            if (DeflaterConstants.DEBUGGING && !flush)             {              throw new SharpZipBaseException("Not flushing' but no lookahead");            }  #endif            huffman.FlushBlock(window' blockStart' strstart - blockStart'                               finish);            blockStart = strstart;            return false;          }            if (strstart >= 2*DeflaterConstants.WSIZE - DeflaterConstants.MIN_LOOKAHEAD)          {            /* slide window' as FindLongestMatch needs this.             * This should only happen when flushing and the window             * is almost full.             */            SlideWindow();          }            var prevMatch = matchStart;          var prevLen = matchLen;          if (lookahead >= DeflaterConstants.MIN_MATCH)          {            var hashHead = InsertString();              if (strategy != DeflateStrategy.HuffmanOnly &&                hashHead != 0 &&                strstart - hashHead <= DeflaterConstants.MAX_DIST &&                FindLongestMatch(hashHead))            {              // longestMatch sets matchStart and matchLen                // Discard match if too small and too far away              if (matchLen <= 5 &&                  (strategy == DeflateStrategy.Filtered ||                   (matchLen == DeflaterConstants.MIN_MATCH && strstart - matchStart > TooFar)))              {                matchLen = DeflaterConstants.MIN_MATCH - 1;              }            }          }            // previous match was better          if ((prevLen >= DeflaterConstants.MIN_MATCH) && (matchLen <= prevLen))          {            huffman.TallyDist(strstart - 1 - prevMatch' prevLen);            prevLen -= 2;            do            {              strstart++;              lookahead--;              if (lookahead >= DeflaterConstants.MIN_MATCH)              {                InsertString();              }            }            while (--prevLen > 0);              strstart ++;            lookahead--;            prevAvailable = false;            matchLen = DeflaterConstants.MIN_MATCH - 1;          }          else          {            if (prevAvailable)            {              huffman.TallyLit(window[strstart - 1] & 0xff);            }            prevAvailable = true;            strstart++;            lookahead--;          }            if (huffman.IsFull())          {            var len = strstart - blockStart;            if (prevAvailable)            {              len--;            }            var lastBlock = (finish && (lookahead == 0) && !prevAvailable);            huffman.FlushBlock(window' blockStart' len' lastBlock);            blockStart += len;            return !lastBlock;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 144)        {          staticLCodes[i] = BitReverse((0x030 + i) << 8);          staticLLength[i++] = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 144)        {          staticLCodes[i] = BitReverse((0x030 + i) << 8);          staticLLength[i++] = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 144)        {          staticLCodes[i] = BitReverse((0x030 + i) << 8);          staticLLength[i++] = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256)        {          staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);          staticLLength[i++] = 9;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256)        {          staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);          staticLLength[i++] = 9;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256)        {          staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);          staticLLength[i++] = 9;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256)        {          staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);          staticLLength[i++] = 9;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280)        {          staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);          staticLLength[i++] = 7;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280)        {          staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);          staticLLength[i++] = 7;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280)        {          staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);          staticLLength[i++] = 7;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280)        {          staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);          staticLLength[i++] = 7;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < LITERAL_NUM)        {          staticLCodes[i] = BitReverse((0x0c0 - 280 + i) << 8);          staticLLength[i++] = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < LITERAL_NUM)        {          staticLCodes[i] = BitReverse((0x0c0 - 280 + i) << 8);          staticLLength[i++] = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < LITERAL_NUM)        {          staticLCodes[i] = BitReverse((0x0c0 - 280 + i) << 8);          staticLLength[i++] = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: for (i = 0; i < DIST_NUM; i++)        {          staticDCodes[i] = BitReverse(i << 11);          staticDLength[i] = 5;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: for (i = 0; i < DIST_NUM; i++)        {          staticDCodes[i] = BitReverse(i << 11);          staticDLength[i] = 5;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: distTree = new Tree(this' DIST_NUM' 1' 15);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(distTree.numCodes - 1' 5);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: for (var rank = 0; rank < blTreeCodes; rank++)        {          pending.WriteBits(blTree.length[BL_ORDER[rank]]' 3);        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (var i = 0; i < last_lit; i++)        {          var litlen = l_buf[i] & 0xff;          int dist = d_buf[i];          if (dist-- != 0)          {            //          if (DeflaterConstants.DEBUGGING) {            //            Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");            //          }              var lc = Lcode(litlen);            literalTree.WriteSymbol(lc);              var bits = (lc - 261)/4;            if (bits > 0 && bits <= 5)            {              pending.WriteBits(litlen & ((1 << bits) - 1)' bits);            }              var dc = Dcode(dist);            distTree.WriteSymbol(dc);              bits = dc/2 - 1;            if (bits > 0)            {              pending.WriteBits(dist & ((1 << bits) - 1)' bits);            }          }          else          {            //          if (DeflaterConstants.DEBUGGING) {            //            if (litlen > 32 && litlen < 127) {            //              Console.Write("("+(char)litlen+"): ");            //            } else {            //              Console.Write("{"+litlen+"}: ");            //            }            //          }            literalTree.WriteSymbol(litlen);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (var i = 0; i < last_lit; i++)        {          var litlen = l_buf[i] & 0xff;          int dist = d_buf[i];          if (dist-- != 0)          {            //          if (DeflaterConstants.DEBUGGING) {            //            Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");            //          }              var lc = Lcode(litlen);            literalTree.WriteSymbol(lc);              var bits = (lc - 261)/4;            if (bits > 0 && bits <= 5)            {              pending.WriteBits(litlen & ((1 << bits) - 1)' bits);            }              var dc = Dcode(dist);            distTree.WriteSymbol(dc);              bits = dc/2 - 1;            if (bits > 0)            {              pending.WriteBits(dist & ((1 << bits) - 1)' bits);            }          }          else          {            //          if (DeflaterConstants.DEBUGGING) {            //            if (litlen > 32 && litlen < 127) {            //              Console.Write("("+(char)litlen+"): ");            //            } else {            //              Console.Write("{"+litlen+"}: ");            //            }            //          }            literalTree.WriteSymbol(litlen);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (var i = 0; i < last_lit; i++)        {          var litlen = l_buf[i] & 0xff;          int dist = d_buf[i];          if (dist-- != 0)          {            //          if (DeflaterConstants.DEBUGGING) {            //            Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");            //          }              var lc = Lcode(litlen);            literalTree.WriteSymbol(lc);              var bits = (lc - 261)/4;            if (bits > 0 && bits <= 5)            {              pending.WriteBits(litlen & ((1 << bits) - 1)' bits);            }              var dc = Dcode(dist);            distTree.WriteSymbol(dc);              bits = dc/2 - 1;            if (bits > 0)            {              pending.WriteBits(dist & ((1 << bits) - 1)' bits);            }          }          else          {            //          if (DeflaterConstants.DEBUGGING) {            //            if (litlen > 32 && litlen < 127) {            //              Console.Write("("+(char)litlen+"): ");            //            } else {            //              Console.Write("{"+litlen+"}: ");            //            }            //          }            literalTree.WriteSymbol(litlen);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (var i = 0; i < last_lit; i++)        {          var litlen = l_buf[i] & 0xff;          int dist = d_buf[i];          if (dist-- != 0)          {            //          if (DeflaterConstants.DEBUGGING) {            //            Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");            //          }              var lc = Lcode(litlen);            literalTree.WriteSymbol(lc);              var bits = (lc - 261)/4;            if (bits > 0 && bits <= 5)            {              pending.WriteBits(litlen & ((1 << bits) - 1)' bits);            }              var dc = Dcode(dist);            distTree.WriteSymbol(dc);              bits = dc/2 - 1;            if (bits > 0)            {              pending.WriteBits(dist & ((1 << bits) - 1)' bits);            }          }          else          {            //          if (DeflaterConstants.DEBUGGING) {            //            if (litlen > 32 && litlen < 127) {            //              Console.Write("("+(char)litlen+"): ");            //            } else {            //              Console.Write("{"+litlen+"}: ");            //            }            //          }            literalTree.WriteSymbol(litlen);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushStoredBlock,The following statement contains a magic number: pending.WriteBits((DeflaterConstants.STORED_BLOCK << 1) + (lastBlock ? 1 : 0)' 3);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: var blTreeCodes = 4;
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: for (var i = 18; i > blTreeCodes; i--)        {          if (blTree.length[BL_ORDER[i]] > 0)          {            blTreeCodes = i + 1;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: var opt_len = 14 + blTreeCodes*3 + blTree.GetEncodedLength() +                      literalTree.GetEncodedLength() + distTree.GetEncodedLength() +                      extra_bits;
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: var opt_len = 14 + blTreeCodes*3 + blTree.GetEncodedLength() +                      literalTree.GetEncodedLength() + distTree.GetEncodedLength() +                      extra_bits;
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3)        {          // Store Block            //        if (DeflaterConstants.DEBUGGING) {          //          //Console.WriteLine("Storing' since " + storedLength + " < " + opt_len          //                            + " <= " + static_len);          //        }          FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);        }        else if (opt_len == static_len)        {          // Encode with static tree          pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);          literalTree.SetStaticCodes(staticLCodes' staticLLength);          distTree.SetStaticCodes(staticDCodes' staticDLength);          CompressBlock();          Reset();        }        else        {          // Encode with dynamic tree          pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);          SendAllTrees(blTreeCodes);          CompressBlock();          Reset();        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3)        {          // Store Block            //        if (DeflaterConstants.DEBUGGING) {          //          //Console.WriteLine("Storing' since " + storedLength + " < " + opt_len          //                            + " <= " + static_len);          //        }          FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);        }        else if (opt_len == static_len)        {          // Encode with static tree          pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);          literalTree.SetStaticCodes(staticLCodes' staticLLength);          distTree.SetStaticCodes(staticDCodes' staticDLength);          CompressBlock();          Reset();        }        else        {          // Encode with dynamic tree          pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);          SendAllTrees(blTreeCodes);          CompressBlock();          Reset();        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3)        {          // Store Block            //        if (DeflaterConstants.DEBUGGING) {          //          //Console.WriteLine("Storing' since " + storedLength + " < " + opt_len          //                            + " <= " + static_len);          //        }          FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);        }        else if (opt_len == static_len)        {          // Encode with static tree          pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);          literalTree.SetStaticCodes(staticLCodes' staticLLength);          distTree.SetStaticCodes(staticDCodes' staticDLength);          CompressBlock();          Reset();        }        else        {          // Encode with dynamic tree          pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);          SendAllTrees(blTreeCodes);          CompressBlock();          Reset();        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3)        {          // Store Block            //        if (DeflaterConstants.DEBUGGING) {          //          //Console.WriteLine("Storing' since " + storedLength + " < " + opt_len          //                            + " <= " + static_len);          //        }          FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);        }        else if (opt_len == static_len)        {          // Encode with static tree          pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);          literalTree.SetStaticCodes(staticLCodes' staticLLength);          distTree.SetStaticCodes(staticDCodes' staticDLength);          CompressBlock();          Reset();        }        else        {          // Encode with dynamic tree          pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);          SendAllTrees(blTreeCodes);          CompressBlock();          Reset();        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: l_buf[last_lit++] = (byte) (length - 3);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: var lc = Lcode(length - 3);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285)        {          extra_bits += (lc - 261)/4;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285)        {          extra_bits += (lc - 261)/4;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285)        {          extra_bits += (lc - 261)/4;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285)        {          extra_bits += (lc - 261)/4;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (dc >= 4)        {          extra_bits += dc/2 - 1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (dc >= 4)        {          extra_bits += dc/2 - 1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                        bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                        bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                        bit4Reverse[toReverse >> 12]);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                        bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                        bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                        bit4Reverse[toReverse >> 12]);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                        bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                        bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                        bit4Reverse[toReverse >> 12]);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                        bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                        bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                        bit4Reverse[toReverse >> 12]);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                        bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                        bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                        bit4Reverse[toReverse >> 12]);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                        bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                        bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                        bit4Reverse[toReverse >> 12]);
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: if (length == 255)        {          return 285;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: if (length == 255)        {          return 285;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: var code = 257;
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: while (length >= 8)        {          code += 4;          length >>= 1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: while (length >= 8)        {          code += 4;          length >>= 1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: while (distance >= 4)        {          code += 2;          distance >>= 1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: while (distance >= 4)        {          code += 2;          distance >>= 1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: for (var bits = 0; bits < maxLength; bits++)          {            nextCode[bits] = code;            code += bl_counts[bits] << (15 - bits);              //          if (DeflaterConstants.DEBUGGING) {            //            //Console.WriteLine("bits: " + ( bits + 1) + " count: " + bl_counts[bits]            //                              +" nextCode: "+code);            //          }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: for (var i = 0; i < numCodes; i++)          {            int bits = length[i];            if (bits > 0)            {              //            if (DeflaterConstants.DEBUGGING) {              //                //Console.WriteLine("codes["+i+"] = rev(" + nextCode[bits-1]+")'              //                                  +bits);              //            }                codes[i] = BitReverse(nextCode[bits - 1]);              nextCode[bits - 1] += 1 << (16 - bits);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (var n = 0; n < numSymbols; n++)          {            int freq = freqs[n];            if (freq != 0)            {              // Insert n into heap              var pos = heapLen++;              int ppos;              while (pos > 0 && freqs[heap[ppos = (pos - 1)/2]] > freq)              {                heap[pos] = heap[ppos];                pos = ppos;              }              heap[pos] = n;                maxCode = n;            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: while (heapLen < 2)          {            var node = maxCode < 2 ? ++maxCode : 0;            heap[heapLen++] = node;          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: while (heapLen < 2)          {            var node = maxCode < 2 ? ++maxCode : 0;            heap[heapLen++] = node;          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: var childs = new int[4*heapLen - 2];
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: var childs = new int[4*heapLen - 2];
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: var values = new int[2*heapLen - 1];
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < heapLen; i++)          {            var node = heap[i];            childs[2*i] = node;            childs[2*i + 1] = -1;            values[i] = freqs[node] << 8;            heap[i] = i;          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < heapLen; i++)          {            var node = heap[i];            childs[2*i] = node;            childs[2*i + 1] = -1;            values[i] = freqs[node] << 8;            heap[i] = i;          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < heapLen; i++)          {            var node = heap[i];            childs[2*i] = node;            childs[2*i + 1] = -1;            values[i] = freqs[node] << 8;            heap[i] = i;          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do          {            var first = heap[0];            var last = heap[--heapLen];              // Propagate the hole to the leafs of the heap            var ppos = 0;            var path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = path*2 + 1;            }              /* Now propagate the last element down along path.  Normally            * it shouldn't go too deep.            */            var lastVal = values[last];            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;              var second = heap[0];              // Create a new node father of first and second            last = numNodes++;            childs[2*last] = first;            childs[2*last + 1] = second;            var mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);            values[last] = lastVal = values[first] + values[second] - mindepth + 1;              // Again' propagate the hole to the leafs            ppos = 0;            path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = ppos*2 + 1;            }              // Now propagate the new element down along path            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;          }          while (heapLen > 1);
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do          {            var first = heap[0];            var last = heap[--heapLen];              // Propagate the hole to the leafs of the heap            var ppos = 0;            var path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = path*2 + 1;            }              /* Now propagate the last element down along path.  Normally            * it shouldn't go too deep.            */            var lastVal = values[last];            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;              var second = heap[0];              // Create a new node father of first and second            last = numNodes++;            childs[2*last] = first;            childs[2*last + 1] = second;            var mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);            values[last] = lastVal = values[first] + values[second] - mindepth + 1;              // Again' propagate the hole to the leafs            ppos = 0;            path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = ppos*2 + 1;            }              // Now propagate the new element down along path            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;          }          while (heapLen > 1);
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do          {            var first = heap[0];            var last = heap[--heapLen];              // Propagate the hole to the leafs of the heap            var ppos = 0;            var path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = path*2 + 1;            }              /* Now propagate the last element down along path.  Normally            * it shouldn't go too deep.            */            var lastVal = values[last];            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;              var second = heap[0];              // Create a new node father of first and second            last = numNodes++;            childs[2*last] = first;            childs[2*last + 1] = second;            var mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);            values[last] = lastVal = values[first] + values[second] - mindepth + 1;              // Again' propagate the hole to the leafs            ppos = 0;            path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = ppos*2 + 1;            }              // Now propagate the new element down along path            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;          }          while (heapLen > 1);
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do          {            var first = heap[0];            var last = heap[--heapLen];              // Propagate the hole to the leafs of the heap            var ppos = 0;            var path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = path*2 + 1;            }              /* Now propagate the last element down along path.  Normally            * it shouldn't go too deep.            */            var lastVal = values[last];            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;              var second = heap[0];              // Create a new node father of first and second            last = numNodes++;            childs[2*last] = first;            childs[2*last + 1] = second;            var mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);            values[last] = lastVal = values[first] + values[second] - mindepth + 1;              // Again' propagate the hole to the leafs            ppos = 0;            path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = ppos*2 + 1;            }              // Now propagate the new element down along path            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;          }          while (heapLen > 1);
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do          {            var first = heap[0];            var last = heap[--heapLen];              // Propagate the hole to the leafs of the heap            var ppos = 0;            var path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = path*2 + 1;            }              /* Now propagate the last element down along path.  Normally            * it shouldn't go too deep.            */            var lastVal = values[last];            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;              var second = heap[0];              // Create a new node father of first and second            last = numNodes++;            childs[2*last] = first;            childs[2*last + 1] = second;            var mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);            values[last] = lastVal = values[first] + values[second] - mindepth + 1;              // Again' propagate the hole to the leafs            ppos = 0;            path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = ppos*2 + 1;            }              // Now propagate the new element down along path            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;          }          while (heapLen > 1);
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do          {            var first = heap[0];            var last = heap[--heapLen];              // Propagate the hole to the leafs of the heap            var ppos = 0;            var path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = path*2 + 1;            }              /* Now propagate the last element down along path.  Normally            * it shouldn't go too deep.            */            var lastVal = values[last];            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;              var second = heap[0];              // Create a new node father of first and second            last = numNodes++;            childs[2*last] = first;            childs[2*last + 1] = second;            var mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);            values[last] = lastVal = values[first] + values[second] - mindepth + 1;              // Again' propagate the hole to the leafs            ppos = 0;            path = 1;              while (path < heapLen)            {              if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]])              {                path++;              }                heap[ppos] = heap[path];              ppos = path;              path = ppos*2 + 1;            }              // Now propagate the new element down along path            while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal)            {              heap[path] = heap[ppos];            }            heap[path] = last;          }          while (heapLen > 1);
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: if (heap[0] != childs.Length/2 - 1)          {            throw new SharpZipBaseException("Heap invariant violated");          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; /* repeat count of the current code */            int nextlen = length[i];            int max_count; /* max repeat count */            int min_count; /* min repeat count */            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.freqs[nextlen]++;                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              blTree.freqs[curlen] += (short) count;            }            else if (curlen != 0)            {              blTree.freqs[REP_3_6]++;            }            else if (count <= 10)            {              blTree.freqs[REP_3_10]++;            }            else            {              blTree.freqs[REP_11_138]++;            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; /* repeat count of the current code */            int nextlen = length[i];            int max_count; /* max repeat count */            int min_count; /* min repeat count */            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.freqs[nextlen]++;                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              blTree.freqs[curlen] += (short) count;            }            else if (curlen != 0)            {              blTree.freqs[REP_3_6]++;            }            else if (count <= 10)            {              blTree.freqs[REP_3_10]++;            }            else            {              blTree.freqs[REP_11_138]++;            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; /* repeat count of the current code */            int nextlen = length[i];            int max_count; /* max repeat count */            int min_count; /* min repeat count */            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.freqs[nextlen]++;                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              blTree.freqs[curlen] += (short) count;            }            else if (curlen != 0)            {              blTree.freqs[REP_3_6]++;            }            else if (count <= 10)            {              blTree.freqs[REP_3_10]++;            }            else            {              blTree.freqs[REP_11_138]++;            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; /* repeat count of the current code */            int nextlen = length[i];            int max_count; /* max repeat count */            int min_count; /* min repeat count */            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.freqs[nextlen]++;                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              blTree.freqs[curlen] += (short) count;            }            else if (curlen != 0)            {              blTree.freqs[REP_3_6]++;            }            else if (count <= 10)            {              blTree.freqs[REP_3_10]++;            }            else            {              blTree.freqs[REP_11_138]++;            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; /* repeat count of the current code */            int nextlen = length[i];            int max_count; /* max repeat count */            int min_count; /* min repeat count */            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.freqs[nextlen]++;                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              blTree.freqs[curlen] += (short) count;            }            else if (curlen != 0)            {              blTree.freqs[REP_3_6]++;            }            else if (count <= 10)            {              blTree.freqs[REP_3_10]++;            }            else            {              blTree.freqs[REP_11_138]++;            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes)          {            var count = 1; // repeat count of the current code            int nextlen = length[i];            int max_count; // max repeat count            int min_count; // min repeat count            if (nextlen == 0)            {              max_count = 138;              min_count = 3;            }            else            {              max_count = 6;              min_count = 3;              if (curlen != nextlen)              {                blTree.WriteSymbol(nextlen);                count = 0;              }            }            curlen = nextlen;            i++;              while (i < numCodes && curlen == length[i])            {              i++;              if (++count >= max_count)              {                break;              }            }              if (count < min_count)            {              while (count-- > 0)              {                blTree.WriteSymbol(curlen);              }            }            else if (curlen != 0)            {              blTree.WriteSymbol(REP_3_6);              dh.pending.WriteBits(count - 3' 2);            }            else if (count <= 10)            {              blTree.WriteSymbol(REP_3_10);              dh.pending.WriteBits(count - 3' 3);            }            else            {              blTree.WriteSymbol(REP_11_138);              dh.pending.WriteBits(count - 11' 7);            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: var numNodes = childs.Length/2;
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: var numLeafs = (numNodes + 1)/2;
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (var i = numNodes - 1; i >= 0; i--)          {            if (childs[2*i + 1] != -1)            {              var bitLength = lengths[i] + 1;              if (bitLength > maxLength)              {                bitLength = maxLength;                overflow++;              }              lengths[childs[2*i]] = lengths[childs[2*i + 1]] = bitLength;            }            else            {              // A leaf node              var bitLength = lengths[i];              bl_counts[bitLength - 1]++;              length[childs[2*i]] = (byte) lengths[i];            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (var i = numNodes - 1; i >= 0; i--)          {            if (childs[2*i + 1] != -1)            {              var bitLength = lengths[i] + 1;              if (bitLength > maxLength)              {                bitLength = maxLength;                overflow++;              }              lengths[childs[2*i]] = lengths[childs[2*i + 1]] = bitLength;            }            else            {              // A leaf node              var bitLength = lengths[i];              bl_counts[bitLength - 1]++;              length[childs[2*i]] = (byte) lengths[i];            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (var i = numNodes - 1; i >= 0; i--)          {            if (childs[2*i + 1] != -1)            {              var bitLength = lengths[i] + 1;              if (bitLength > maxLength)              {                bitLength = maxLength;                overflow++;              }              lengths[childs[2*i]] = lengths[childs[2*i + 1]] = bitLength;            }            else            {              // A leaf node              var bitLength = lengths[i];              bl_counts[bitLength - 1]++;              length[childs[2*i]] = (byte) lengths[i];            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (var i = numNodes - 1; i >= 0; i--)          {            if (childs[2*i + 1] != -1)            {              var bitLength = lengths[i] + 1;              if (bitLength > maxLength)              {                bitLength = maxLength;                overflow++;              }              lengths[childs[2*i]] = lengths[childs[2*i + 1]] = bitLength;            }            else            {              // A leaf node              var bitLength = lengths[i];              bl_counts[bitLength - 1]++;              length[childs[2*i]] = (byte) lengths[i];            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: bl_counts[maxLength - 2] -= overflow;
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: var nodePtr = 2*numLeafs;
Magic Number,Fomm.SharpZipLib.Zip.Compression,Tree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (var bits = maxLength; bits != 0; bits--)          {            var n = bl_counts[bits - 1];            while (n > 0)            {              var childPtr = 2*childs[nodePtr++];              if (childs[childPtr + 1] == -1)              {                // We found another leaf                length[childs[childPtr]] = (byte) bits;                n--;              }            }          }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: var header = input.PeekBits(16);
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: input.DropBits(16);
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: if (header%31 != 0)        {          throw new SharpZipBaseException("Header checksum illegal");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: if ((header & 0x0f00) != (Deflater.DEFLATED << 8))        {          throw new SharpZipBaseException("Compression Method unknown");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: if ((header & 0x0020) == 0)        {          // Dictionary flag?          mode = DECODE_BLOCKS;        }        else        {          mode = DECODE_DICT;          neededBits = 32;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0)        {          var dictByte = input.PeekBits(8);          if (dictByte < 0)          {            return false;          }          input.DropBits(8);          readAdler = (readAdler << 8) | dictByte;          neededBits -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0)        {          var dictByte = input.PeekBits(8);          if (dictByte < 0)          {            return false;          }          input.DropBits(8);          readAdler = (readAdler << 8) | dictByte;          neededBits -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0)        {          var dictByte = input.PeekBits(8);          if (dictByte < 0)          {            return false;          }          input.DropBits(8);          readAdler = (readAdler << 8) | dictByte;          neededBits -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0)        {          var dictByte = input.PeekBits(8);          if (dictByte < 0)          {            return false;          }          input.DropBits(8);          readAdler = (readAdler << 8) | dictByte;          neededBits -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)        {          int symbol;          switch (mode)          {            case DECODE_HUFFMAN:              // This is the inner loop so it is optimized a bit              while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)              {                outputWindow.Write(symbol);                if (--free < 258)                {                  return true;                }              }                if (symbol < 257)              {                if (symbol < 0)                {                  return false;                }                  // symbol == 256: end of block                distTree = null;                litlenTree = null;                mode = DECODE_BLOCKS;                return true;              }                try              {                repLength = CPLENS[symbol - 257];                neededBits = CPLEXT[symbol - 257];              }              catch (Exception)              {                throw new SharpZipBaseException("Illegal rep length code");              }              goto case DECODE_HUFFMAN_LENBITS; // fall through              case DECODE_HUFFMAN_LENBITS:              if (neededBits > 0)              {                mode = DECODE_HUFFMAN_LENBITS;                var i = input.PeekBits(neededBits);                if (i < 0)                {                  return false;                }                input.DropBits(neededBits);                repLength += i;              }              mode = DECODE_HUFFMAN_DIST;              goto case DECODE_HUFFMAN_DIST; // fall through              case DECODE_HUFFMAN_DIST:              symbol = distTree.GetSymbol(input);              if (symbol < 0)              {                return false;              }                try              {                repDist = CPDIST[symbol];                neededBits = CPDEXT[symbol];              }              catch (Exception)              {                throw new SharpZipBaseException("Illegal rep dist code");              }                goto case DECODE_HUFFMAN_DISTBITS; // fall through              case DECODE_HUFFMAN_DISTBITS:              if (neededBits > 0)              {                mode = DECODE_HUFFMAN_DISTBITS;                var i = input.PeekBits(neededBits);                if (i < 0)                {                  return false;                }                input.DropBits(neededBits);                repDist += i;              }                outputWindow.Repeat(repLength' repDist);              free -= repLength;              mode = DECODE_HUFFMAN;              break;              default:              throw new SharpZipBaseException("Inflater unknown mode");          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)        {          int symbol;          switch (mode)          {            case DECODE_HUFFMAN:              // This is the inner loop so it is optimized a bit              while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)              {                outputWindow.Write(symbol);                if (--free < 258)                {                  return true;                }              }                if (symbol < 257)              {                if (symbol < 0)                {                  return false;                }                  // symbol == 256: end of block                distTree = null;                litlenTree = null;                mode = DECODE_BLOCKS;                return true;              }                try              {                repLength = CPLENS[symbol - 257];                neededBits = CPLEXT[symbol - 257];              }              catch (Exception)              {                throw new SharpZipBaseException("Illegal rep length code");              }              goto case DECODE_HUFFMAN_LENBITS; // fall through              case DECODE_HUFFMAN_LENBITS:              if (neededBits > 0)              {                mode = DECODE_HUFFMAN_LENBITS;                var i = input.PeekBits(neededBits);                if (i < 0)                {                  return false;                }                input.DropBits(neededBits);                repLength += i;              }              mode = DECODE_HUFFMAN_DIST;              goto case DECODE_HUFFMAN_DIST; // fall through              case DECODE_HUFFMAN_DIST:              symbol = distTree.GetSymbol(input);              if (symbol < 0)              {                return false;              }                try              {                repDist = CPDIST[symbol];                neededBits = CPDEXT[symbol];              }              catch (Exception)              {                throw new SharpZipBaseException("Illegal rep dist code");              }                goto case DECODE_HUFFMAN_DISTBITS; // fall through              case DECODE_HUFFMAN_DISTBITS:              if (neededBits > 0)              {                mode = DECODE_HUFFMAN_DISTBITS;                var i = input.PeekBits(neededBits);                if (i < 0)                {                  return false;                }                input.DropBits(neededBits);                repDist += i;              }                outputWindow.Repeat(repLength' repDist);              free -= repLength;              mode = DECODE_HUFFMAN;              break;              default:              throw new SharpZipBaseException("Inflater unknown mode");          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)        {          int symbol;          switch (mode)          {            case DECODE_HUFFMAN:              // This is the inner loop so it is optimized a bit              while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)              {                outputWindow.Write(symbol);                if (--free < 258)                {                  return true;                }              }                if (symbol < 257)              {                if (symbol < 0)                {                  return false;                }                  // symbol == 256: end of block                distTree = null;                litlenTree = null;                mode = DECODE_BLOCKS;                return true;              }                try              {                repLength = CPLENS[symbol - 257];                neededBits = CPLEXT[symbol - 257];              }              catch (Exception)              {                throw new SharpZipBaseException("Illegal rep length code");              }              goto case DECODE_HUFFMAN_LENBITS; // fall through              case DECODE_HUFFMAN_LENBITS:              if (neededBits > 0)              {                mode = DECODE_HUFFMAN_LENBITS;                var i = input.PeekBits(neededBits);                if (i < 0)                {                  return false;                }                input.DropBits(neededBits);                repLength += i;              }              mode = DECODE_HUFFMAN_DIST;              goto case DECODE_HUFFMAN_DIST; // fall through              case DECODE_HUFFMAN_DIST:              symbol = distTree.GetSymbol(input);              if (symbol < 0)              {                return false;              }                try              {                repDist = CPDIST[symbol];                neededBits = CPDEXT[symbol];              }              catch (Exception)              {                throw new SharpZipBaseException("Illegal rep dist code");              }                goto case DECODE_HUFFMAN_DISTBITS; // fall through              case DECODE_HUFFMAN_DISTBITS:              if (neededBits > 0)              {                mode = DECODE_HUFFMAN_DISTBITS;                var i = input.PeekBits(neededBits);                if (i < 0)                {                  return false;                }                input.DropBits(neededBits);                repDist += i;              }                outputWindow.Repeat(repLength' repDist);              free -= repLength;              mode = DECODE_HUFFMAN;              break;              default:              throw new SharpZipBaseException("Inflater unknown mode");          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)        {          int symbol;          switch (mode)          {            case DECODE_HUFFMAN:              // This is the inner loop so it is optimized a bit              while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)              {                outputWindow.Write(symbol);                if (--free < 258)                {                  return true;                }              }                if (symbol < 257)              {                if (symbol < 0)                {                  return false;                }                  // symbol == 256: end of block                distTree = null;                litlenTree = null;                mode = DECODE_BLOCKS;                return true;              }                try              {                repLength = CPLENS[symbol - 257];                neededBits = CPLEXT[symbol - 257];              }              catch (Exception)              {                throw new SharpZipBaseException("Illegal rep length code");              }              goto case DECODE_HUFFMAN_LENBITS; // fall through              case DECODE_HUFFMAN_LENBITS:              if (neededBits > 0)              {                mode = DECODE_HUFFMAN_LENBITS;                var i = input.PeekBits(neededBits);                if (i < 0)                {                  return false;                }                input.DropBits(neededBits);                repLength += i;              }              mode = DECODE_HUFFMAN_DIST;              goto case DECODE_HUFFMAN_DIST; // fall through              case DECODE_HUFFMAN_DIST:              symbol = distTree.GetSymbol(input);              if (symbol < 0)              {                return false;              }                try              {                repDist = CPDIST[symbol];                neededBits = CPDEXT[symbol];              }              catch (Exception)              {                throw new SharpZipBaseException("Illegal rep dist code");              }                goto case DECODE_HUFFMAN_DISTBITS; // fall through              case DECODE_HUFFMAN_DISTBITS:              if (neededBits > 0)              {                mode = DECODE_HUFFMAN_DISTBITS;                var i = input.PeekBits(neededBits);                if (i < 0)                {                  return false;                }                input.DropBits(neededBits);                repDist += i;              }                outputWindow.Repeat(repLength' repDist);              free -= repLength;              mode = DECODE_HUFFMAN;              break;              default:              throw new SharpZipBaseException("Inflater unknown mode");          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)        {          int symbol;          switch (mode)          {            case DECODE_HUFFMAN:              // This is the inner loop so it is optimized a bit              while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)              {                outputWindow.Write(symbol);                if (--free < 258)                {                  return true;                }              }                if (symbol < 257)              {                if (symbol < 0)                {                  return false;                }                  // symbol == 256: end of block                distTree = null;                litlenTree = null;                mode = DECODE_BLOCKS;                return true;              }                try              {                repLength = CPLENS[symbol - 257];                neededBits = CPLEXT[symbol - 257];              }              catch (Exception)              {                throw new SharpZipBaseException("Illegal rep length code");              }              goto case DECODE_HUFFMAN_LENBITS; // fall through              case DECODE_HUFFMAN_LENBITS:              if (neededBits > 0)              {                mode = DECODE_HUFFMAN_LENBITS;                var i = input.PeekBits(neededBits);                if (i < 0)                {                  return false;                }                input.DropBits(neededBits);                repLength += i;              }              mode = DECODE_HUFFMAN_DIST;              goto case DECODE_HUFFMAN_DIST; // fall through              case DECODE_HUFFMAN_DIST:              symbol = distTree.GetSymbol(input);              if (symbol < 0)              {                return false;              }                try              {                repDist = CPDIST[symbol];                neededBits = CPDEXT[symbol];              }              catch (Exception)              {                throw new SharpZipBaseException("Illegal rep dist code");              }                goto case DECODE_HUFFMAN_DISTBITS; // fall through              case DECODE_HUFFMAN_DISTBITS:              if (neededBits > 0)              {                mode = DECODE_HUFFMAN_DISTBITS;                var i = input.PeekBits(neededBits);                if (i < 0)                {                  return false;                }                input.DropBits(neededBits);                repDist += i;              }                outputWindow.Repeat(repLength' repDist);              free -= repLength;              mode = DECODE_HUFFMAN;              break;              default:              throw new SharpZipBaseException("Inflater unknown mode");          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0)        {          var chkByte = input.PeekBits(8);          if (chkByte < 0)          {            return false;          }          input.DropBits(8);          readAdler = (readAdler << 8) | chkByte;          neededBits -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0)        {          var chkByte = input.PeekBits(8);          if (chkByte < 0)          {            return false;          }          input.DropBits(8);          readAdler = (readAdler << 8) | chkByte;          neededBits -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0)        {          var chkByte = input.PeekBits(8);          if (chkByte < 0)          {            return false;          }          input.DropBits(8);          readAdler = (readAdler << 8) | chkByte;          neededBits -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0)        {          var chkByte = input.PeekBits(8);          if (chkByte < 0)          {            return false;          }          input.DropBits(8);          readAdler = (readAdler << 8) | chkByte;          neededBits -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)        {          case DECODE_HEADER:            return DecodeHeader();            case DECODE_DICT:            return DecodeDict();            case DECODE_CHKSUM:            return DecodeChksum();            case DECODE_BLOCKS:            if (isLastBlock)            {              if (noHeader)              {                mode = FINISHED;                return false;              }                input.SkipToByteBoundary();              neededBits = 32;              mode = DECODE_CHKSUM;              return true;            }              var type = input.PeekBits(3);            if (type < 0)            {              return false;            }            input.DropBits(3);              if ((type & 1) != 0)            {              isLastBlock = true;            }            switch (type >> 1)            {              case DeflaterConstants.STORED_BLOCK:                input.SkipToByteBoundary();                mode = DECODE_STORED_LEN1;                break;              case DeflaterConstants.STATIC_TREES:                litlenTree = InflaterHuffmanTree.defLitLenTree;                distTree = InflaterHuffmanTree.defDistTree;                mode = DECODE_HUFFMAN;                break;              case DeflaterConstants.DYN_TREES:                dynHeader = new InflaterDynHeader();                mode = DECODE_DYN_HEADER;                break;              default:                throw new SharpZipBaseException("Unknown block type " + type);            }            return true;            case DECODE_STORED_LEN1:          {            if ((uncomprLen = input.PeekBits(16)) < 0)            {              return false;            }            input.DropBits(16);            mode = DECODE_STORED_LEN2;          }            goto case DECODE_STORED_LEN2; // fall through            case DECODE_STORED_LEN2:          {            var nlen = input.PeekBits(16);            if (nlen < 0)            {              return false;            }            input.DropBits(16);            if (nlen != (uncomprLen ^ 0xffff))            {              throw new SharpZipBaseException("broken uncompressed block");            }            mode = DECODE_STORED;          }            goto case DECODE_STORED; // fall through            case DECODE_STORED:          {            var more = outputWindow.CopyStored(input' uncomprLen);            uncomprLen -= more;            if (uncomprLen == 0)            {              mode = DECODE_BLOCKS;              return true;            }            return !input.IsNeedingInput;          }            case DECODE_DYN_HEADER:            if (!dynHeader.Decode(input))            {              return false;            }              litlenTree = dynHeader.BuildLitLenTree();            distTree = dynHeader.BuildDistTree();            mode = DECODE_HUFFMAN;            goto case DECODE_HUFFMAN; // fall through            case DECODE_HUFFMAN:          case DECODE_HUFFMAN_LENBITS:          case DECODE_HUFFMAN_DIST:          case DECODE_HUFFMAN_DISTBITS:            return DecodeHuffman();            case FINISHED:            return false;            default:            throw new SharpZipBaseException("Inflater.Decode unknown mode");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)        {          case DECODE_HEADER:            return DecodeHeader();            case DECODE_DICT:            return DecodeDict();            case DECODE_CHKSUM:            return DecodeChksum();            case DECODE_BLOCKS:            if (isLastBlock)            {              if (noHeader)              {                mode = FINISHED;                return false;              }                input.SkipToByteBoundary();              neededBits = 32;              mode = DECODE_CHKSUM;              return true;            }              var type = input.PeekBits(3);            if (type < 0)            {              return false;            }            input.DropBits(3);              if ((type & 1) != 0)            {              isLastBlock = true;            }            switch (type >> 1)            {              case DeflaterConstants.STORED_BLOCK:                input.SkipToByteBoundary();                mode = DECODE_STORED_LEN1;                break;              case DeflaterConstants.STATIC_TREES:                litlenTree = InflaterHuffmanTree.defLitLenTree;                distTree = InflaterHuffmanTree.defDistTree;                mode = DECODE_HUFFMAN;                break;              case DeflaterConstants.DYN_TREES:                dynHeader = new InflaterDynHeader();                mode = DECODE_DYN_HEADER;                break;              default:                throw new SharpZipBaseException("Unknown block type " + type);            }            return true;            case DECODE_STORED_LEN1:          {            if ((uncomprLen = input.PeekBits(16)) < 0)            {              return false;            }            input.DropBits(16);            mode = DECODE_STORED_LEN2;          }            goto case DECODE_STORED_LEN2; // fall through            case DECODE_STORED_LEN2:          {            var nlen = input.PeekBits(16);            if (nlen < 0)            {              return false;            }            input.DropBits(16);            if (nlen != (uncomprLen ^ 0xffff))            {              throw new SharpZipBaseException("broken uncompressed block");            }            mode = DECODE_STORED;          }            goto case DECODE_STORED; // fall through            case DECODE_STORED:          {            var more = outputWindow.CopyStored(input' uncomprLen);            uncomprLen -= more;            if (uncomprLen == 0)            {              mode = DECODE_BLOCKS;              return true;            }            return !input.IsNeedingInput;          }            case DECODE_DYN_HEADER:            if (!dynHeader.Decode(input))            {              return false;            }              litlenTree = dynHeader.BuildLitLenTree();            distTree = dynHeader.BuildDistTree();            mode = DECODE_HUFFMAN;            goto case DECODE_HUFFMAN; // fall through            case DECODE_HUFFMAN:          case DECODE_HUFFMAN_LENBITS:          case DECODE_HUFFMAN_DIST:          case DECODE_HUFFMAN_DISTBITS:            return DecodeHuffman();            case FINISHED:            return false;            default:            throw new SharpZipBaseException("Inflater.Decode unknown mode");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)        {          case DECODE_HEADER:            return DecodeHeader();            case DECODE_DICT:            return DecodeDict();            case DECODE_CHKSUM:            return DecodeChksum();            case DECODE_BLOCKS:            if (isLastBlock)            {              if (noHeader)              {                mode = FINISHED;                return false;              }                input.SkipToByteBoundary();              neededBits = 32;              mode = DECODE_CHKSUM;              return true;            }              var type = input.PeekBits(3);            if (type < 0)            {              return false;            }            input.DropBits(3);              if ((type & 1) != 0)            {              isLastBlock = true;            }            switch (type >> 1)            {              case DeflaterConstants.STORED_BLOCK:                input.SkipToByteBoundary();                mode = DECODE_STORED_LEN1;                break;              case DeflaterConstants.STATIC_TREES:                litlenTree = InflaterHuffmanTree.defLitLenTree;                distTree = InflaterHuffmanTree.defDistTree;                mode = DECODE_HUFFMAN;                break;              case DeflaterConstants.DYN_TREES:                dynHeader = new InflaterDynHeader();                mode = DECODE_DYN_HEADER;                break;              default:                throw new SharpZipBaseException("Unknown block type " + type);            }            return true;            case DECODE_STORED_LEN1:          {            if ((uncomprLen = input.PeekBits(16)) < 0)            {              return false;            }            input.DropBits(16);            mode = DECODE_STORED_LEN2;          }            goto case DECODE_STORED_LEN2; // fall through            case DECODE_STORED_LEN2:          {            var nlen = input.PeekBits(16);            if (nlen < 0)            {              return false;            }            input.DropBits(16);            if (nlen != (uncomprLen ^ 0xffff))            {              throw new SharpZipBaseException("broken uncompressed block");            }            mode = DECODE_STORED;          }            goto case DECODE_STORED; // fall through            case DECODE_STORED:          {            var more = outputWindow.CopyStored(input' uncomprLen);            uncomprLen -= more;            if (uncomprLen == 0)            {              mode = DECODE_BLOCKS;              return true;            }            return !input.IsNeedingInput;          }            case DECODE_DYN_HEADER:            if (!dynHeader.Decode(input))            {              return false;            }              litlenTree = dynHeader.BuildLitLenTree();            distTree = dynHeader.BuildDistTree();            mode = DECODE_HUFFMAN;            goto case DECODE_HUFFMAN; // fall through            case DECODE_HUFFMAN:          case DECODE_HUFFMAN_LENBITS:          case DECODE_HUFFMAN_DIST:          case DECODE_HUFFMAN_DISTBITS:            return DecodeHuffman();            case FINISHED:            return false;            default:            throw new SharpZipBaseException("Inflater.Decode unknown mode");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)        {          case DECODE_HEADER:            return DecodeHeader();            case DECODE_DICT:            return DecodeDict();            case DECODE_CHKSUM:            return DecodeChksum();            case DECODE_BLOCKS:            if (isLastBlock)            {              if (noHeader)              {                mode = FINISHED;                return false;              }                input.SkipToByteBoundary();              neededBits = 32;              mode = DECODE_CHKSUM;              return true;            }              var type = input.PeekBits(3);            if (type < 0)            {              return false;            }            input.DropBits(3);              if ((type & 1) != 0)            {              isLastBlock = true;            }            switch (type >> 1)            {              case DeflaterConstants.STORED_BLOCK:                input.SkipToByteBoundary();                mode = DECODE_STORED_LEN1;                break;              case DeflaterConstants.STATIC_TREES:                litlenTree = InflaterHuffmanTree.defLitLenTree;                distTree = InflaterHuffmanTree.defDistTree;                mode = DECODE_HUFFMAN;                break;              case DeflaterConstants.DYN_TREES:                dynHeader = new InflaterDynHeader();                mode = DECODE_DYN_HEADER;                break;              default:                throw new SharpZipBaseException("Unknown block type " + type);            }            return true;            case DECODE_STORED_LEN1:          {            if ((uncomprLen = input.PeekBits(16)) < 0)            {              return false;            }            input.DropBits(16);            mode = DECODE_STORED_LEN2;          }            goto case DECODE_STORED_LEN2; // fall through            case DECODE_STORED_LEN2:          {            var nlen = input.PeekBits(16);            if (nlen < 0)            {              return false;            }            input.DropBits(16);            if (nlen != (uncomprLen ^ 0xffff))            {              throw new SharpZipBaseException("broken uncompressed block");            }            mode = DECODE_STORED;          }            goto case DECODE_STORED; // fall through            case DECODE_STORED:          {            var more = outputWindow.CopyStored(input' uncomprLen);            uncomprLen -= more;            if (uncomprLen == 0)            {              mode = DECODE_BLOCKS;              return true;            }            return !input.IsNeedingInput;          }            case DECODE_DYN_HEADER:            if (!dynHeader.Decode(input))            {              return false;            }              litlenTree = dynHeader.BuildLitLenTree();            distTree = dynHeader.BuildDistTree();            mode = DECODE_HUFFMAN;            goto case DECODE_HUFFMAN; // fall through            case DECODE_HUFFMAN:          case DECODE_HUFFMAN_LENBITS:          case DECODE_HUFFMAN_DIST:          case DECODE_HUFFMAN_DISTBITS:            return DecodeHuffman();            case FINISHED:            return false;            default:            throw new SharpZipBaseException("Inflater.Decode unknown mode");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)        {          case DECODE_HEADER:            return DecodeHeader();            case DECODE_DICT:            return DecodeDict();            case DECODE_CHKSUM:            return DecodeChksum();            case DECODE_BLOCKS:            if (isLastBlock)            {              if (noHeader)              {                mode = FINISHED;                return false;              }                input.SkipToByteBoundary();              neededBits = 32;              mode = DECODE_CHKSUM;              return true;            }              var type = input.PeekBits(3);            if (type < 0)            {              return false;            }            input.DropBits(3);              if ((type & 1) != 0)            {              isLastBlock = true;            }            switch (type >> 1)            {              case DeflaterConstants.STORED_BLOCK:                input.SkipToByteBoundary();                mode = DECODE_STORED_LEN1;                break;              case DeflaterConstants.STATIC_TREES:                litlenTree = InflaterHuffmanTree.defLitLenTree;                distTree = InflaterHuffmanTree.defDistTree;                mode = DECODE_HUFFMAN;                break;              case DeflaterConstants.DYN_TREES:                dynHeader = new InflaterDynHeader();                mode = DECODE_DYN_HEADER;                break;              default:                throw new SharpZipBaseException("Unknown block type " + type);            }            return true;            case DECODE_STORED_LEN1:          {            if ((uncomprLen = input.PeekBits(16)) < 0)            {              return false;            }            input.DropBits(16);            mode = DECODE_STORED_LEN2;          }            goto case DECODE_STORED_LEN2; // fall through            case DECODE_STORED_LEN2:          {            var nlen = input.PeekBits(16);            if (nlen < 0)            {              return false;            }            input.DropBits(16);            if (nlen != (uncomprLen ^ 0xffff))            {              throw new SharpZipBaseException("broken uncompressed block");            }            mode = DECODE_STORED;          }            goto case DECODE_STORED; // fall through            case DECODE_STORED:          {            var more = outputWindow.CopyStored(input' uncomprLen);            uncomprLen -= more;            if (uncomprLen == 0)            {              mode = DECODE_BLOCKS;              return true;            }            return !input.IsNeedingInput;          }            case DECODE_DYN_HEADER:            if (!dynHeader.Decode(input))            {              return false;            }              litlenTree = dynHeader.BuildLitLenTree();            distTree = dynHeader.BuildDistTree();            mode = DECODE_HUFFMAN;            goto case DECODE_HUFFMAN; // fall through            case DECODE_HUFFMAN:          case DECODE_HUFFMAN_LENBITS:          case DECODE_HUFFMAN_DIST:          case DECODE_HUFFMAN_DISTBITS:            return DecodeHuffman();            case FINISHED:            return false;            default:            throw new SharpZipBaseException("Inflater.Decode unknown mode");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)        {          case DECODE_HEADER:            return DecodeHeader();            case DECODE_DICT:            return DecodeDict();            case DECODE_CHKSUM:            return DecodeChksum();            case DECODE_BLOCKS:            if (isLastBlock)            {              if (noHeader)              {                mode = FINISHED;                return false;              }                input.SkipToByteBoundary();              neededBits = 32;              mode = DECODE_CHKSUM;              return true;            }              var type = input.PeekBits(3);            if (type < 0)            {              return false;            }            input.DropBits(3);              if ((type & 1) != 0)            {              isLastBlock = true;            }            switch (type >> 1)            {              case DeflaterConstants.STORED_BLOCK:                input.SkipToByteBoundary();                mode = DECODE_STORED_LEN1;                break;              case DeflaterConstants.STATIC_TREES:                litlenTree = InflaterHuffmanTree.defLitLenTree;                distTree = InflaterHuffmanTree.defDistTree;                mode = DECODE_HUFFMAN;                break;              case DeflaterConstants.DYN_TREES:                dynHeader = new InflaterDynHeader();                mode = DECODE_DYN_HEADER;                break;              default:                throw new SharpZipBaseException("Unknown block type " + type);            }            return true;            case DECODE_STORED_LEN1:          {            if ((uncomprLen = input.PeekBits(16)) < 0)            {              return false;            }            input.DropBits(16);            mode = DECODE_STORED_LEN2;          }            goto case DECODE_STORED_LEN2; // fall through            case DECODE_STORED_LEN2:          {            var nlen = input.PeekBits(16);            if (nlen < 0)            {              return false;            }            input.DropBits(16);            if (nlen != (uncomprLen ^ 0xffff))            {              throw new SharpZipBaseException("broken uncompressed block");            }            mode = DECODE_STORED;          }            goto case DECODE_STORED; // fall through            case DECODE_STORED:          {            var more = outputWindow.CopyStored(input' uncomprLen);            uncomprLen -= more;            if (uncomprLen == 0)            {              mode = DECODE_BLOCKS;              return true;            }            return !input.IsNeedingInput;          }            case DECODE_DYN_HEADER:            if (!dynHeader.Decode(input))            {              return false;            }              litlenTree = dynHeader.BuildLitLenTree();            distTree = dynHeader.BuildDistTree();            mode = DECODE_HUFFMAN;            goto case DECODE_HUFFMAN; // fall through            case DECODE_HUFFMAN:          case DECODE_HUFFMAN_LENBITS:          case DECODE_HUFFMAN_DIST:          case DECODE_HUFFMAN_DISTBITS:            return DecodeHuffman();            case FINISHED:            return false;            default:            throw new SharpZipBaseException("Inflater.Decode unknown mode");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,Inflater,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)        {          case DECODE_HEADER:            return DecodeHeader();            case DECODE_DICT:            return DecodeDict();            case DECODE_CHKSUM:            return DecodeChksum();            case DECODE_BLOCKS:            if (isLastBlock)            {              if (noHeader)              {                mode = FINISHED;                return false;              }                input.SkipToByteBoundary();              neededBits = 32;              mode = DECODE_CHKSUM;              return true;            }              var type = input.PeekBits(3);            if (type < 0)            {              return false;            }            input.DropBits(3);              if ((type & 1) != 0)            {              isLastBlock = true;            }            switch (type >> 1)            {              case DeflaterConstants.STORED_BLOCK:                input.SkipToByteBoundary();                mode = DECODE_STORED_LEN1;                break;              case DeflaterConstants.STATIC_TREES:                litlenTree = InflaterHuffmanTree.defLitLenTree;                distTree = InflaterHuffmanTree.defDistTree;                mode = DECODE_HUFFMAN;                break;              case DeflaterConstants.DYN_TREES:                dynHeader = new InflaterDynHeader();                mode = DECODE_DYN_HEADER;                break;              default:                throw new SharpZipBaseException("Unknown block type " + type);            }            return true;            case DECODE_STORED_LEN1:          {            if ((uncomprLen = input.PeekBits(16)) < 0)            {              return false;            }            input.DropBits(16);            mode = DECODE_STORED_LEN2;          }            goto case DECODE_STORED_LEN2; // fall through            case DECODE_STORED_LEN2:          {            var nlen = input.PeekBits(16);            if (nlen < 0)            {              return false;            }            input.DropBits(16);            if (nlen != (uncomprLen ^ 0xffff))            {              throw new SharpZipBaseException("broken uncompressed block");            }            mode = DECODE_STORED;          }            goto case DECODE_STORED; // fall through            case DECODE_STORED:          {            var more = outputWindow.CopyStored(input' uncomprLen);            uncomprLen -= more;            if (uncomprLen == 0)            {              mode = DECODE_BLOCKS;              return true;            }            return !input.IsNeedingInput;          }            case DECODE_DYN_HEADER:            if (!dynHeader.Decode(input))            {              return false;            }              litlenTree = dynHeader.BuildLitLenTree();            distTree = dynHeader.BuildDistTree();            mode = DECODE_HUFFMAN;            goto case DECODE_HUFFMAN; // fall through            case DECODE_HUFFMAN:          case DECODE_HUFFMAN_LENBITS:          case DECODE_HUFFMAN_DIST:          case DECODE_HUFFMAN_DISTBITS:            return DecodeHuffman();            case FINISHED:            return false;            default:            throw new SharpZipBaseException("Inflater.Decode unknown mode");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:        for (;;)        {          switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: var codeLengths = new byte[288];
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: while (i < 144)        {          codeLengths[i++] = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: while (i < 144)        {          codeLengths[i++] = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: while (i < 256)        {          codeLengths[i++] = 9;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: while (i < 256)        {          codeLengths[i++] = 9;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: while (i < 280)        {          codeLengths[i++] = 7;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: while (i < 280)        {          codeLengths[i++] = 7;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: while (i < 288)        {          codeLengths[i++] = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: while (i < 288)        {          codeLengths[i++] = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths = new byte[32];
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: while (i < 32)        {          codeLengths[i++] = 5;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: while (i < 32)        {          codeLengths[i++] = 5;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: var treeSize = 512;
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var bits = 1; bits <= MAX_BITLEN; bits++)        {          nextCode[bits] = code;          code += blCount[bits] << (16 - bits);          if (bits >= 10)          {            /* We need an extra table for bit lengths >= 10. */            var start = nextCode[bits] & 0x1ff80;            var end = code & 0x1ff80;            treeSize += (end - start) >> (16 - bits);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var bits = 1; bits <= MAX_BITLEN; bits++)        {          nextCode[bits] = code;          code += blCount[bits] << (16 - bits);          if (bits >= 10)          {            /* We need an extra table for bit lengths >= 10. */            var start = nextCode[bits] & 0x1ff80;            var end = code & 0x1ff80;            treeSize += (end - start) >> (16 - bits);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var bits = 1; bits <= MAX_BITLEN; bits++)        {          nextCode[bits] = code;          code += blCount[bits] << (16 - bits);          if (bits >= 10)          {            /* We need an extra table for bit lengths >= 10. */            var start = nextCode[bits] & 0x1ff80;            var end = code & 0x1ff80;            treeSize += (end - start) >> (16 - bits);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: var treePtr = 512;
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var bits = MAX_BITLEN; bits >= 10; bits--)        {          var end = code & 0x1ff80;          code -= blCount[bits] << (16 - bits);          var start = code & 0x1ff80;          for (var i = start; i < end; i += 1 << 7)          {            tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);            treePtr += 1 << (bits - 9);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var bits = MAX_BITLEN; bits >= 10; bits--)        {          var end = code & 0x1ff80;          code -= blCount[bits] << (16 - bits);          var start = code & 0x1ff80;          for (var i = start; i < end; i += 1 << 7)          {            tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);            treePtr += 1 << (bits - 9);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var bits = MAX_BITLEN; bits >= 10; bits--)        {          var end = code & 0x1ff80;          code -= blCount[bits] << (16 - bits);          var start = code & 0x1ff80;          for (var i = start; i < end; i += 1 << 7)          {            tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);            treePtr += 1 << (bits - 9);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var bits = MAX_BITLEN; bits >= 10; bits--)        {          var end = code & 0x1ff80;          code -= blCount[bits] << (16 - bits);          var start = code & 0x1ff80;          for (var i = start; i < end; i += 1 << 7)          {            tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);            treePtr += 1 << (bits - 9);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var bits = MAX_BITLEN; bits >= 10; bits--)        {          var end = code & 0x1ff80;          code -= blCount[bits] << (16 - bits);          var start = code & 0x1ff80;          for (var i = start; i < end; i += 1 << 7)          {            tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);            treePtr += 1 << (bits - 9);          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < codeLengths.Length; i++)        {          int bits = codeLengths[i];          if (bits == 0)          {            continue;          }          code = nextCode[bits];          int revcode = DeflaterHuffman.BitReverse(code);          if (bits <= 9)          {            do            {              tree[revcode] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < 512);          }          else          {            int subTree = tree[revcode & 511];            var treeLen = 1 << (subTree & 15);            subTree = -(subTree >> 4);            do            {              tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < treeLen);          }          nextCode[bits] = code + (1 << (16 - bits));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < codeLengths.Length; i++)        {          int bits = codeLengths[i];          if (bits == 0)          {            continue;          }          code = nextCode[bits];          int revcode = DeflaterHuffman.BitReverse(code);          if (bits <= 9)          {            do            {              tree[revcode] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < 512);          }          else          {            int subTree = tree[revcode & 511];            var treeLen = 1 << (subTree & 15);            subTree = -(subTree >> 4);            do            {              tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < treeLen);          }          nextCode[bits] = code + (1 << (16 - bits));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < codeLengths.Length; i++)        {          int bits = codeLengths[i];          if (bits == 0)          {            continue;          }          code = nextCode[bits];          int revcode = DeflaterHuffman.BitReverse(code);          if (bits <= 9)          {            do            {              tree[revcode] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < 512);          }          else          {            int subTree = tree[revcode & 511];            var treeLen = 1 << (subTree & 15);            subTree = -(subTree >> 4);            do            {              tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < treeLen);          }          nextCode[bits] = code + (1 << (16 - bits));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < codeLengths.Length; i++)        {          int bits = codeLengths[i];          if (bits == 0)          {            continue;          }          code = nextCode[bits];          int revcode = DeflaterHuffman.BitReverse(code);          if (bits <= 9)          {            do            {              tree[revcode] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < 512);          }          else          {            int subTree = tree[revcode & 511];            var treeLen = 1 << (subTree & 15);            subTree = -(subTree >> 4);            do            {              tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < treeLen);          }          nextCode[bits] = code + (1 << (16 - bits));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < codeLengths.Length; i++)        {          int bits = codeLengths[i];          if (bits == 0)          {            continue;          }          code = nextCode[bits];          int revcode = DeflaterHuffman.BitReverse(code);          if (bits <= 9)          {            do            {              tree[revcode] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < 512);          }          else          {            int subTree = tree[revcode & 511];            var treeLen = 1 << (subTree & 15);            subTree = -(subTree >> 4);            do            {              tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < treeLen);          }          nextCode[bits] = code + (1 << (16 - bits));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < codeLengths.Length; i++)        {          int bits = codeLengths[i];          if (bits == 0)          {            continue;          }          code = nextCode[bits];          int revcode = DeflaterHuffman.BitReverse(code);          if (bits <= 9)          {            do            {              tree[revcode] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < 512);          }          else          {            int subTree = tree[revcode & 511];            var treeLen = 1 << (subTree & 15);            subTree = -(subTree >> 4);            do            {              tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < treeLen);          }          nextCode[bits] = code + (1 << (16 - bits));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < codeLengths.Length; i++)        {          int bits = codeLengths[i];          if (bits == 0)          {            continue;          }          code = nextCode[bits];          int revcode = DeflaterHuffman.BitReverse(code);          if (bits <= 9)          {            do            {              tree[revcode] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < 512);          }          else          {            int subTree = tree[revcode & 511];            var treeLen = 1 << (subTree & 15);            subTree = -(subTree >> 4);            do            {              tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < treeLen);          }          nextCode[bits] = code + (1 << (16 - bits));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < codeLengths.Length; i++)        {          int bits = codeLengths[i];          if (bits == 0)          {            continue;          }          code = nextCode[bits];          int revcode = DeflaterHuffman.BitReverse(code);          if (bits <= 9)          {            do            {              tree[revcode] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < 512);          }          else          {            int subTree = tree[revcode & 511];            var treeLen = 1 << (subTree & 15);            subTree = -(subTree >> 4);            do            {              tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < treeLen);          }          nextCode[bits] = code + (1 << (16 - bits));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (var i = 0; i < codeLengths.Length; i++)        {          int bits = codeLengths[i];          if (bits == 0)          {            continue;          }          code = nextCode[bits];          int revcode = DeflaterHuffman.BitReverse(code);          if (bits <= 9)          {            do            {              tree[revcode] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < 512);          }          else          {            int subTree = tree[revcode & 511];            var treeLen = 1 << (subTree & 15);            subTree = -(subTree >> 4);            do            {              tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);              revcode += 1 << bits;            }            while (revcode < treeLen);          }          nextCode[bits] = code + (1 << (16 - bits));        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0)        {          if ((symbol = tree[lookahead]) >= 0)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          var subtree = -(symbol >> 4);          var bitlen = symbol & 15;          if ((lookahead = input.PeekBits(bitlen)) >= 0)          {            symbol = tree[subtree | (lookahead >> 9)];            input.DropBits(symbol & 15);            return symbol >> 4;          }          bits = input.AvailableBits;          lookahead = input.PeekBits(bits);          symbol = tree[subtree | (lookahead >> 9)];          if ((symbol & 15) <= bits)          {            input.DropBits(symbol & 15);            return symbol >> 4;          }          return -1;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if (symbol >= 0 && (symbol & 15) <= bits)        {          input.DropBits(symbol & 15);          return symbol >> 4;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if (symbol >= 0 && (symbol & 15) <= bits)        {          input.DropBits(symbol & 15);          return symbol >> 4;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if (symbol >= 0 && (symbol & 15) <= bits)        {          input.DropBits(symbol & 15);          return symbol >> 4;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteShort,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 8));
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: if (BitCount > 0)        {          buffer_[end++] = unchecked((byte) bits);          if (BitCount > 8)          {            buffer_[end++] = unchecked((byte) (bits >> 8));          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: if (BitCount > 0)        {          buffer_[end++] = unchecked((byte) bits);          if (BitCount > 8)          {            buffer_[end++] = unchecked((byte) (bits >> 8));          }        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (BitCount >= 16)        {          buffer_[end++] = unchecked((byte) bits);          buffer_[end++] = unchecked((byte) (bits >> 8));          bits >>= 16;          BitCount -= 16;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (BitCount >= 16)        {          buffer_[end++] = unchecked((byte) bits);          buffer_[end++] = unchecked((byte) (bits >> 8));          bits >>= 16;          BitCount -= 16;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (BitCount >= 16)        {          buffer_[end++] = unchecked((byte) bits);          buffer_[end++] = unchecked((byte) (bits >> 8));          bits >>= 16;          BitCount -= 16;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (BitCount >= 16)        {          buffer_[end++] = unchecked((byte) bits);          buffer_[end++] = unchecked((byte) (bits >> 8));          bits >>= 16;          BitCount -= 16;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,WriteShortMSB,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (s >> 8));
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: if (BitCount >= 8)        {          buffer_[end++] = unchecked((byte) bits);          bits >>= 8;          BitCount -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: if (BitCount >= 8)        {          buffer_[end++] = unchecked((byte) bits);          bits >>= 8;          BitCount -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: if (BitCount >= 8)        {          buffer_[end++] = unchecked((byte) bits);          bits >>= 8;          BitCount -= 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: if (bufferSize < 1024)        {          bufferSize = 1024;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: if (bufferSize < 1024)        {          bufferSize = 1024;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: if (AvailableBits < bitCount)        {          if (windowStart_ == windowEnd_)          {            return -1; // ok          }          buffer_ |= (uint) ((window_[windowStart_++] & 0xff |                              (window_[windowStart_++] & 0xff) << 8) << AvailableBits);          AvailableBits += 16;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: if (AvailableBits < bitCount)        {          if (windowStart_ == windowEnd_)          {            return -1; // ok          }          buffer_ |= (uint) ((window_[windowStart_++] & 0xff |                              (window_[windowStart_++] & 0xff) << 8) << AvailableBits);          AvailableBits += 16;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: buffer_ >>= (AvailableBits & 7);
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: AvailableBits &= ~7;
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: if ((AvailableBits & 7) != 0)        {          // bits_in_buffer may only be 0 or a multiple of 8          throw new InvalidOperationException("Bit buffer is not byte aligned!");        }
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: while ((AvailableBits > 0) && (length > 0))        {          output[offset++] = (byte) buffer_;          buffer_ >>= 8;          AvailableBits -= 8;          length--;          count++;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: while ((AvailableBits > 0) && (length > 0))        {          output[offset++] = (byte) buffer_;          buffer_ >>= 8;          AvailableBits -= 8;          length--;          count++;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: if (((windowStart_ - windowEnd_) & 1) != 0)        {          // We always want an even number of bytes in input' see peekBits          buffer_ = (uint) (window_[windowStart_++] & 0xff);          AvailableBits = 8;        }
Magic Number,Fomm.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,SetInput,The following statement contains a magic number: if ((count & 1) != 0)        {          // We always want an even number of bytes in input' see PeekBits          buffer_ |= (uint) ((buffer[offset++] & 0xff) << AvailableBits);          AvailableBits += 8;        }
Magic Number,Fomm.SharpZipLib.Zip,FastZip,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\FastZip.cs,AddFileContents,The following statement contains a magic number: if (buffer_ == null)        {          buffer_ = new byte[4096];        }
Magic Number,Fomm.SharpZipLib.Zip,FastZip,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\FastZip.cs,ExtractFileEntry,The following statement contains a magic number: if (continueRunning_)        {          try          {            using (var outputStream = File.Create(targetName))            {              if (buffer_ == null)              {                buffer_ = new byte[4096];              }              StreamUtils.Copy(zipFile_.GetInputStream(entry)' outputStream' buffer_);            }            File.SetLastWriteTime(targetName' entry.DateTime);          }          catch (Exception)          {            continueRunning_ = false;            throw;          }        }
Magic Number,Fomm.SharpZipLib.Zip,WindowsNameTransform,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\WindowsNameTransform.cs,WindowsNameTransform,The following statement contains a magic number: var howMany = invalidPathChars.Length + 3;
Magic Number,Fomm.SharpZipLib.Zip,WindowsNameTransform,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\WindowsNameTransform.cs,WindowsNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 2] = '?';
Magic Number,Fomm.SharpZipLib.Zip,WindowsNameTransform,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\WindowsNameTransform.cs,WindowsNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 2] = ':';
Magic Number,Fomm.SharpZipLib.Zip,ZipEntry,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntry.cs,ZipEntry,The following statement contains a magic number: if ((versionRequiredToExtract != 0) && (versionRequiredToExtract < 10))        {          throw new ArgumentOutOfRangeException("versionRequiredToExtract");        }
Magic Number,Fomm.SharpZipLib.Zip,ZipEntry,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if (extraData.Find(0x0001))        {          if ((versionToExtract & 0xff) < ZipConstants.VersionZip64)          {            throw new ZipException("Zip64 Extended information found but version is not valid");          }            // The recorded size will change but remember that this is zip64.          forceZip64_ = true;            if (extraData.ValueLength < 4)          {            throw new ZipException("Extra data extended Zip64 information length is invalid");          }            if (localHeader || (size == uint.MaxValue))          {            size = (ulong) extraData.ReadLong();          }            if (localHeader || (compressedSize == uint.MaxValue))          {            compressedSize = (ulong) extraData.ReadLong();          }            if (!localHeader && (offset == uint.MaxValue))          {            offset = extraData.ReadLong();          }        }        else        {          if (            ((versionToExtract & 0xff) >= ZipConstants.VersionZip64) &&            ((size == uint.MaxValue) || (compressedSize == uint.MaxValue))            )          {            throw new ZipException("Zip64 Extended information required but is missing.");          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipEntry,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if (extraData.Find(10))        {          // No room for any tags.          if (extraData.ValueLength < 8)          {            throw new ZipException("NTFS Extra data invalid");          }            extraData.ReadInt(); // Reserved            while (extraData.UnreadCount >= 4)          {            var ntfsTag = extraData.ReadShort();            var ntfsLength = extraData.ReadShort();            if (ntfsTag == 1)            {              if (ntfsLength >= 24)              {                var lastModification = extraData.ReadLong();                //long lastAccess = extraData.ReadLong();                //long createTime = extraData.ReadLong();                extraData.Skip(16);                  DateTime = DateTime.FromFileTime(lastModification);              }              break;            }            // An unknown NTFS tag so simply skip it.            extraData.Skip(ntfsLength);          }        }        else if (extraData.Find(0x5455))        {          var length = extraData.ValueLength;          var flags = extraData.ReadByte();            // Can include other times but these are ignored.  Length of data should          // actually be 1 + 4 * no of bits in flags.          if (((flags & 1) != 0) && (length >= 5))          {            var iTime = extraData.ReadInt();              DateTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +                        new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipEntry,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if (extraData.Find(10))        {          // No room for any tags.          if (extraData.ValueLength < 8)          {            throw new ZipException("NTFS Extra data invalid");          }            extraData.ReadInt(); // Reserved            while (extraData.UnreadCount >= 4)          {            var ntfsTag = extraData.ReadShort();            var ntfsLength = extraData.ReadShort();            if (ntfsTag == 1)            {              if (ntfsLength >= 24)              {                var lastModification = extraData.ReadLong();                //long lastAccess = extraData.ReadLong();                //long createTime = extraData.ReadLong();                extraData.Skip(16);                  DateTime = DateTime.FromFileTime(lastModification);              }              break;            }            // An unknown NTFS tag so simply skip it.            extraData.Skip(ntfsLength);          }        }        else if (extraData.Find(0x5455))        {          var length = extraData.ValueLength;          var flags = extraData.ReadByte();            // Can include other times but these are ignored.  Length of data should          // actually be 1 + 4 * no of bits in flags.          if (((flags & 1) != 0) && (length >= 5))          {            var iTime = extraData.ReadInt();              DateTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +                        new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipEntry,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if (extraData.Find(10))        {          // No room for any tags.          if (extraData.ValueLength < 8)          {            throw new ZipException("NTFS Extra data invalid");          }            extraData.ReadInt(); // Reserved            while (extraData.UnreadCount >= 4)          {            var ntfsTag = extraData.ReadShort();            var ntfsLength = extraData.ReadShort();            if (ntfsTag == 1)            {              if (ntfsLength >= 24)              {                var lastModification = extraData.ReadLong();                //long lastAccess = extraData.ReadLong();                //long createTime = extraData.ReadLong();                extraData.Skip(16);                  DateTime = DateTime.FromFileTime(lastModification);              }              break;            }            // An unknown NTFS tag so simply skip it.            extraData.Skip(ntfsLength);          }        }        else if (extraData.Find(0x5455))        {          var length = extraData.ValueLength;          var flags = extraData.ReadByte();            // Can include other times but these are ignored.  Length of data should          // actually be 1 + 4 * no of bits in flags.          if (((flags & 1) != 0) && (length >= 5))          {            var iTime = extraData.ReadInt();              DateTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +                        new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipEntry,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if (extraData.Find(10))        {          // No room for any tags.          if (extraData.ValueLength < 8)          {            throw new ZipException("NTFS Extra data invalid");          }            extraData.ReadInt(); // Reserved            while (extraData.UnreadCount >= 4)          {            var ntfsTag = extraData.ReadShort();            var ntfsLength = extraData.ReadShort();            if (ntfsTag == 1)            {              if (ntfsLength >= 24)              {                var lastModification = extraData.ReadLong();                //long lastAccess = extraData.ReadLong();                //long createTime = extraData.ReadLong();                extraData.Skip(16);                  DateTime = DateTime.FromFileTime(lastModification);              }              break;            }            // An unknown NTFS tag so simply skip it.            extraData.Skip(ntfsLength);          }        }        else if (extraData.Find(0x5455))        {          var length = extraData.ValueLength;          var flags = extraData.ReadByte();            // Can include other times but these are ignored.  Length of data should          // actually be 1 + 4 * no of bits in flags.          if (((flags & 1) != 0) && (length >= 5))          {            var iTime = extraData.ReadInt();              DateTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +                        new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipEntry,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if (extraData.Find(10))        {          // No room for any tags.          if (extraData.ValueLength < 8)          {            throw new ZipException("NTFS Extra data invalid");          }            extraData.ReadInt(); // Reserved            while (extraData.UnreadCount >= 4)          {            var ntfsTag = extraData.ReadShort();            var ntfsLength = extraData.ReadShort();            if (ntfsTag == 1)            {              if (ntfsLength >= 24)              {                var lastModification = extraData.ReadLong();                //long lastAccess = extraData.ReadLong();                //long createTime = extraData.ReadLong();                extraData.Skip(16);                  DateTime = DateTime.FromFileTime(lastModification);              }              break;            }            // An unknown NTFS tag so simply skip it.            extraData.Skip(ntfsLength);          }        }        else if (extraData.Find(0x5455))        {          var length = extraData.ValueLength;          var flags = extraData.ReadByte();            // Can include other times but these are ignored.  Length of data should          // actually be 1 + 4 * no of bits in flags.          if (((flags & 1) != 0) && (length >= 5))          {            var iTime = extraData.ReadInt();              DateTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +                        new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipEntry,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if (extraData.Find(10))        {          // No room for any tags.          if (extraData.ValueLength < 8)          {            throw new ZipException("NTFS Extra data invalid");          }            extraData.ReadInt(); // Reserved            while (extraData.UnreadCount >= 4)          {            var ntfsTag = extraData.ReadShort();            var ntfsLength = extraData.ReadShort();            if (ntfsTag == 1)            {              if (ntfsLength >= 24)              {                var lastModification = extraData.ReadLong();                //long lastAccess = extraData.ReadLong();                //long createTime = extraData.ReadLong();                extraData.Skip(16);                  DateTime = DateTime.FromFileTime(lastModification);              }              break;            }            // An unknown NTFS tag so simply skip it.            extraData.Skip(ntfsLength);          }        }        else if (extraData.Find(0x5455))        {          var length = extraData.ValueLength;          var flags = extraData.ReadByte();            // Can include other times but these are ignored.  Length of data should          // actually be 1 + 4 * no of bits in flags.          if (((flags & 1) != 0) && (length >= 5))          {            var iTime = extraData.ReadInt();              DateTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +                        new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipEntry,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if (extraData.Find(10))        {          // No room for any tags.          if (extraData.ValueLength < 8)          {            throw new ZipException("NTFS Extra data invalid");          }            extraData.ReadInt(); // Reserved            while (extraData.UnreadCount >= 4)          {            var ntfsTag = extraData.ReadShort();            var ntfsLength = extraData.ReadShort();            if (ntfsTag == 1)            {              if (ntfsLength >= 24)              {                var lastModification = extraData.ReadLong();                //long lastAccess = extraData.ReadLong();                //long createTime = extraData.ReadLong();                extraData.Skip(16);                  DateTime = DateTime.FromFileTime(lastModification);              }              break;            }            // An unknown NTFS tag so simply skip it.            extraData.Skip(ntfsLength);          }        }        else if (extraData.Find(0x5455))        {          var length = extraData.ValueLength;          var flags = extraData.ReadByte();            // Can include other times but these are ignored.  Length of data should          // actually be 1 + 4 * no of bits in flags.          if (((flags & 1) != 0) && (length >= 5))          {            var iTime = extraData.ReadInt();              DateTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +                        new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipEntryFactory,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipEntryFactory.cs,MakeDirectoryEntry,The following statement contains a magic number: externalAttributes |= 16;
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,Find,The following statement contains a magic number: while ((localTag != headerID) && (CurrentReadIndex < data_.Length - 3))        {          localTag = ReadShortInternal();          localLength = ReadShortInternal();          if (localTag != headerID)          {            CurrentReadIndex += localLength;          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,AddEntry,The following statement contains a magic number: var newLength = data_.Length + addLength + 4;
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,AddEntry,The following statement contains a magic number: if (Find(headerID))        {          newLength -= (ValueLength + 4);        }
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,AddLeShort,The following statement contains a magic number: unchecked        {          newEntry_.WriteByte((byte) toAdd);          newEntry_.WriteByte((byte) (toAdd >> 8));        }
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,AddLeInt,The following statement contains a magic number: unchecked        {          AddLeShort((short) toAdd);          AddLeShort((short) (toAdd >> 16));        }
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,AddLeLong,The following statement contains a magic number: unchecked        {          AddLeInt((int) (toAdd & 0xffffffff));          AddLeInt((int) (toAdd >> 32));        }
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: if (Find(headerID))        {          result = true;          var trueStart = readValueStart_ - 4;            var newData = new byte[data_.Length - (ValueLength + 4)];          Array.Copy(data_' 0' newData' 0' trueStart);            var trueEnd = trueStart + ValueLength + 4;          Array.Copy(data_' trueEnd' newData' trueStart' data_.Length - trueEnd);          data_ = newData;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: if (Find(headerID))        {          result = true;          var trueStart = readValueStart_ - 4;            var newData = new byte[data_.Length - (ValueLength + 4)];          Array.Copy(data_' 0' newData' 0' trueStart);            var trueEnd = trueStart + ValueLength + 4;          Array.Copy(data_' trueEnd' newData' trueStart' data_.Length - trueEnd);          data_ = newData;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: if (Find(headerID))        {          result = true;          var trueStart = readValueStart_ - 4;            var newData = new byte[data_.Length - (ValueLength + 4)];          Array.Copy(data_' 0' newData' 0' trueStart);            var trueEnd = trueStart + ValueLength + 4;          Array.Copy(data_' trueEnd' newData' trueStart' data_.Length - trueEnd);          data_ = newData;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadLong,The following statement contains a magic number: ReadCheck(8);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadLong,The following statement contains a magic number: return (ReadInt() & 0xffffffff) | (((long) ReadInt()) << 32);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: ReadCheck(4);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: var result = data_[CurrentReadIndex] + (data_[CurrentReadIndex + 1] << 8) +                     (data_[CurrentReadIndex + 2] << 16) + (data_[CurrentReadIndex + 3] << 24);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: var result = data_[CurrentReadIndex] + (data_[CurrentReadIndex + 1] << 8) +                     (data_[CurrentReadIndex + 2] << 16) + (data_[CurrentReadIndex + 3] << 24);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: var result = data_[CurrentReadIndex] + (data_[CurrentReadIndex + 1] << 8) +                     (data_[CurrentReadIndex + 2] << 16) + (data_[CurrentReadIndex + 3] << 24);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: var result = data_[CurrentReadIndex] + (data_[CurrentReadIndex + 1] << 8) +                     (data_[CurrentReadIndex + 2] << 16) + (data_[CurrentReadIndex + 3] << 24);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: var result = data_[CurrentReadIndex] + (data_[CurrentReadIndex + 1] << 8) +                     (data_[CurrentReadIndex + 2] << 16) + (data_[CurrentReadIndex + 3] << 24);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: CurrentReadIndex += 4;
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: ReadCheck(2);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: var result = data_[CurrentReadIndex] + (data_[CurrentReadIndex + 1] << 8);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: CurrentReadIndex += 2;
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadCheck,The following statement contains a magic number: if ((readValueStart_ > data_.Length) ||            (readValueStart_ < 4))        {          throw new ZipException("Find must be called before calling a Read method");        }
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: if (CurrentReadIndex > data_.Length - 2)        {          throw new ZipException("End of extra data");        }
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: var result = data_[CurrentReadIndex] + (data_[CurrentReadIndex + 1] << 8);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: CurrentReadIndex += 2;
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,SetShort,The following statement contains a magic number: data_[index + 1] = (byte) (source >> 8);
Magic Number,Fomm.SharpZipLib.Zip,ZipExtraData,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipExtraData.cs,SetShort,The following statement contains a magic number: index += 2;
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock (baseStream_)        {          var testHeader = (tests & HeaderTest.Header) != 0;          var testData = (tests & HeaderTest.Extract) != 0;            baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);          if ((int) ReadLEUint() != ZipConstants.LocalHeaderSignature)          {            throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));          }            var extractVersion = (short) ReadLEUshort();          var localFlags = (short) ReadLEUshort();          var compressionMethod = (short) ReadLEUshort();          var fileTime = (short) ReadLEUshort();          var fileDate = (short) ReadLEUshort();          var crcValue = ReadLEUint();          long compressedSize = ReadLEUint();          long size = ReadLEUint();          int storedNameLength = ReadLEUshort();          int extraDataLength = ReadLEUshort();            var nameData = new byte[storedNameLength];          StreamUtils.ReadFully(baseStream_' nameData);            var extraData = new byte[extraDataLength];          StreamUtils.ReadFully(baseStream_' extraData);            var localExtraData = new ZipExtraData(extraData);            // Extra data / zip64 checks          if (localExtraData.Find(1))          {            // TODO Check for tag values being distinct..  Multiple zip64 tags means what?              // Zip64 extra data but 'extract version' is too low            if (extractVersion < ZipConstants.VersionZip64)            {              throw new ZipException(                string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'                              extractVersion/10' extractVersion%10));            }              // Zip64 extra data but size fields dont indicate its required.            if (((uint) size != uint.MaxValue) && ((uint) compressedSize != uint.MaxValue))            {              throw new ZipException("Entry sizes not correct for Zip64");            }              size = localExtraData.ReadLong();            compressedSize = localExtraData.ReadLong();              if ((localFlags & (int) GeneralBitFlags.Descriptor) != 0)            {              // These may be valid if patched later              if ((size != -1) && (size != entry.Size))              {                throw new ZipException("Size invalid for descriptor");              }                if ((compressedSize != -1) && (compressedSize != entry.CompressedSize))              {                throw new ZipException("Compressed size invalid for descriptor");              }            }          }          else          {            // No zip64 extra data but entry requires it.            if ((extractVersion >= ZipConstants.VersionZip64) &&                (((uint) size == uint.MaxValue) || ((uint) compressedSize == uint.MaxValue)))            {              throw new ZipException("Required Zip64 extended information missing");            }          }            if (testData)          {            if (entry.IsFile)            {              if (!entry.IsCompressionMethodSupported())              {                throw new ZipException("Compression method not supported");              }                if ((extractVersion > ZipConstants.VersionMadeBy)                  || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)))              {                throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"'                                                     extractVersion));              }                if ((localFlags &                   (int)                     (GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress |                      GeneralBitFlags.HeaderMasked)) != 0)              {                throw new ZipException("The library does not support the zip version required to extract this entry");              }            }          }            if (testHeader)          {            if ((extractVersion <= 63) && // Ignore later versions as we dont know about them..                (extractVersion != 10) &&                (extractVersion != 11) &&                (extractVersion != 20) &&                (extractVersion != 21) &&                (extractVersion != 25) &&                (extractVersion != 27) &&                (extractVersion != 45) &&                (extractVersion != 46) &&                (extractVersion != 50) &&                (extractVersion != 51) &&                (extractVersion != 52) &&                (extractVersion != 61) &&                (extractVersion != 62) &&                (extractVersion != 63)              )            {              throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"'                                                   extractVersion));            }              // Local entry flags dont have reserved bit set on.            if ((localFlags &                 (int)                   (GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) !=                0)            {              throw new ZipException("Reserved bit flags cannot be set.");            }              // Encryption requires extract version >= 20            if (((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))            {              throw new ZipException(                string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));            }              // Strong encryption requires encryption flag to be set and extract version >= 50.            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if ((localFlags & (int) GeneralBitFlags.Encrypted) == 0)              {                throw new ZipException("Strong encryption flag set but encryption flag is not set");              }                if (extractVersion < 50)              {                throw new ZipException(                  string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));              }            }              // Patched entries require extract version >= 27            if (((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27))            {              throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));            }              // Central header flags match local entry flags.            if (localFlags != entry.Flags)            {              throw new ZipException("Central header/local header flags mismatch");            }              // Central header compression method matches local entry            if (entry.CompressionMethod != (CompressionMethod) compressionMethod)            {              throw new ZipException("Central header/local header compression method mismatch");            }              if (entry.Version != extractVersion)            {              throw new ZipException("Extract version mismatch");            }              // Strong encryption and extract version match            if ((localFlags & (int) GeneralBitFlags.StrongEncryption) != 0)            {              if (extractVersion < 62)              {                throw new ZipException("Strong encryption flag set but version not high enough");              }            }              if ((localFlags & (int) GeneralBitFlags.HeaderMasked) != 0)            {              if ((fileTime != 0) || (fileDate != 0))              {                throw new ZipException("Header masked set but date/time values non-zero");              }            }              if ((localFlags & (int) GeneralBitFlags.Descriptor) == 0)            {              if (crcValue != (uint) entry.Crc)              {                throw new ZipException("Central header/local header crc mismatch");              }            }              // Crc valid for empty entry.            // This will also apply to streamed entries where size isnt known and the header cant be patched            if ((size == 0) && (compressedSize == 0))            {              if (crcValue != 0)              {                throw new ZipException("Invalid CRC for empty entry");              }            }              // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings            // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably            if (entry.Name.Length > storedNameLength)            {              throw new ZipException("File name length mismatch");            }              // Name data has already been read convert it and compare.            var localName = ZipConstants.ConvertToStringExt(localFlags' nameData);              // Central directory and local entry name match            if (localName != entry.Name)            {              throw new ZipException("Central header and local header file name mismatch");            }              // Directories have zero actual size but can have compressed size            if (entry.IsDirectory)            {              if (size > 0)              {                throw new ZipException("Directory cannot have size");              }                // There may be other cases where the compressed size can be greater than this?              // If so until details are known we will be strict.              if (compressedSize > 2)              {                // When not compressed the directory size can validly be 2 bytes                // if the true size wasnt known when data was originally being written.                // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                throw new ZipException("Directory compressed size invalid");              }            }              if (!ZipNameTransform.IsValidName(localName' true))            {              throw new ZipException("Name is invalid");            }          }            // Tests that apply to both data and header.            // Size can be verified only if it is known in the local header.          // it will always be known in the central header.          if (((localFlags & (int) GeneralBitFlags.Descriptor) == 0) ||              ((size > 0) || (compressedSize > 0)))          {            if (size != entry.Size)            {              throw new ZipException(                string.Format("Size mismatch between central header({0}) and local header({1})"'                              entry.Size' size));            }              if (compressedSize != entry.CompressedSize)            {              throw new ZipException(                string.Format("Compressed size mismatch between central header({0}) and local header({1})"'                              entry.CompressedSize' compressedSize));            }          }            var extraLength = storedNameLength + extraDataLength;          return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteLEShort,The following statement contains a magic number: baseStream_.WriteByte((byte) ((value >> 8) & 0xff));
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteLEUshort,The following statement contains a magic number: baseStream_.WriteByte((byte) (value >> 8));
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteLEInt,The following statement contains a magic number: WriteLEShort(value >> 16);
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteLEUint,The following statement contains a magic number: WriteLEUshort((ushort) (value >> 16));
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteLeLong,The following statement contains a magic number: WriteLEInt((int) (value >> 32));
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteCentralDirectoryHeader,The following statement contains a magic number: if (entry.ExternalFileAttributes != -1)        {          WriteLEInt(entry.ExternalFileAttributes);        }        else        {          WriteLEUint(entry.IsDirectory ? (uint) 16 : 0);        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,GetDescriptorSize,The following statement contains a magic number: if ((update.Entry.Flags & (int) GeneralBitFlags.Descriptor) != 0)        {          result = ZipConstants.DataDescriptorSize - 4;          if (update.Entry.LocalHeaderRequiresZip64)          {            result = ZipConstants.Zip64DataDescriptorSize - 4;          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,GetDescriptorSize,The following statement contains a magic number: if ((update.Entry.Flags & (int) GeneralBitFlags.Descriptor) != 0)        {          result = ZipConstants.DataDescriptorSize - 4;          if (update.Entry.LocalHeaderRequiresZip64)          {            result = ZipConstants.Zip64DataDescriptorSize - 4;          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,GetOutputStream,The following statement contains a magic number: switch (entry.CompressionMethod)        {          case CompressionMethod.Stored:            result = new UncompressedStream(result);            break;            case CompressionMethod.Deflated:            var dos = new DeflaterOutputStream(result' new Deflater(9' true));            dos.IsStreamOwner = false;            result = dos;            break;            default:            throw new ZipException("Unknown compression method " + entry.CompressionMethod);        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,CopyEntryDirect,The following statement contains a magic number: const int NameLengthOffset = 26;
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,CopyEntry,The following statement contains a magic number: if (update.Entry.CompressedSize > 0)        {          const int NameLengthOffset = 26;            var entryDataOffset = update.Entry.Offset + NameLengthOffset;            // TODO: This wont work for SFX files!          baseStream_.Seek(entryDataOffset' SeekOrigin.Begin);            uint nameLength = ReadLEUshort();          uint extraLength = ReadLEUshort();            baseStream_.Seek(nameLength + extraLength' SeekOrigin.Current);            CopyBytes(update' workFile.baseStream_' baseStream_' update.Entry.CompressedSize' false);        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,ReadLEUshort,The following statement contains a magic number: return unchecked((ushort) ((ushort) data1 | (ushort) (data2 << 8)));
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,ReadLEUint,The following statement contains a magic number: return (uint) (ReadLEUshort() | (ReadLEUshort() << 16));
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,ReadLEUlong,The following statement contains a magic number: return ReadLEUint() | ((ulong) ReadLEUint() << 32);
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: if (!isZip64 && (offsetOfCentralDir < locatedEndOfCentralDir - (4 + (long) centralDirSize)))        {          offsetOfFirstEntry = locatedEndOfCentralDir - (4 + (long) centralDirSize + offsetOfCentralDir);          if (offsetOfFirstEntry <= 0)          {            throw new ZipException("Invalid embedded zip archive");          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: if (!isZip64 && (offsetOfCentralDir < locatedEndOfCentralDir - (4 + (long) centralDirSize)))        {          offsetOfFirstEntry = locatedEndOfCentralDir - (4 + (long) centralDirSize + offsetOfCentralDir);          if (offsetOfFirstEntry <= 0)          {            throw new ZipException("Invalid embedded zip archive");          }        }
Magic Number,Fomm.SharpZipLib.Zip,MemoryArchiveStorage,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,MakeTemporaryCopy,The following statement contains a magic number: StreamUtils.Copy(stream' temporaryStream_' new byte[4096]);
Magic Number,Fomm.SharpZipLib.Zip,MemoryArchiveStorage,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,OpenForDirectUpdate,The following statement contains a magic number: if ((stream == null) || !stream.CanWrite)        {          result = new MemoryStream();            if (stream != null)          {            stream.Position = 0;            StreamUtils.Copy(stream' result' new byte[4096]);              stream.Close();          }        }        else        {          result = stream;        }
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,WriteZip64EndOfCentralDirectory,The following statement contains a magic number: WriteLELong(44);
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,ReadLEShort,The following statement contains a magic number: return byteValue1 | (byteValue2 << 8);
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,ReadLEInt,The following statement contains a magic number: return ReadLEShort() | (ReadLEShort() << 16);
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,WriteLEShort,The following statement contains a magic number: stream_.WriteByte((byte) ((value >> 8) & 0xff));
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,WriteLEUshort,The following statement contains a magic number: stream_.WriteByte((byte) (value >> 8));
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,WriteLEInt,The following statement contains a magic number: WriteLEShort(value >> 16);
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,WriteLEUint,The following statement contains a magic number: WriteLEUshort((ushort) (value >> 16));
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,WriteLELong,The following statement contains a magic number: WriteLEInt((int) (value >> 32));
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: if ((entry.Flags & (int) GeneralBitFlags.Descriptor) != 0)        {          // The signature is not PKZIP originally but is now described as optional          // in the PKZIP Appnote documenting trhe format.          WriteLEInt(ZipConstants.DataDescriptorSignature);          WriteLEInt(unchecked((int) (entry.Crc)));            result += 8;            if (entry.LocalHeaderRequiresZip64)          {            WriteLELong(entry.CompressedSize);            WriteLELong(entry.Size);            result += 16;          }          else          {            WriteLEInt((int) entry.CompressedSize);            WriteLEInt((int) entry.Size);            result += 8;          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: if ((entry.Flags & (int) GeneralBitFlags.Descriptor) != 0)        {          // The signature is not PKZIP originally but is now described as optional          // in the PKZIP Appnote documenting trhe format.          WriteLEInt(ZipConstants.DataDescriptorSignature);          WriteLEInt(unchecked((int) (entry.Crc)));            result += 8;            if (entry.LocalHeaderRequiresZip64)          {            WriteLELong(entry.CompressedSize);            WriteLELong(entry.Size);            result += 16;          }          else          {            WriteLEInt((int) entry.CompressedSize);            WriteLEInt((int) entry.Size);            result += 8;          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipHelperStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: if ((entry.Flags & (int) GeneralBitFlags.Descriptor) != 0)        {          // The signature is not PKZIP originally but is now described as optional          // in the PKZIP Appnote documenting trhe format.          WriteLEInt(ZipConstants.DataDescriptorSignature);          WriteLEInt(unchecked((int) (entry.Crc)));            result += 8;            if (entry.LocalHeaderRequiresZip64)          {            WriteLELong(entry.CompressedSize);            WriteLELong(entry.Size);            result += 16;          }          else          {            WriteLEInt((int) entry.CompressedSize);            WriteLEInt((int) entry.Size);            result += 8;          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipNameTransform,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: var howMany = invalidPathChars.Length + 2;
Magic Number,Fomm.SharpZipLib.Zip,ZipNameTransform,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryCharsRelaxed[howMany - 2] = '?';
Magic Number,Fomm.SharpZipLib.Zip,ZipNameTransform,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: howMany = invalidPathChars.Length + 4;
Magic Number,Fomm.SharpZipLib.Zip,ZipNameTransform,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 2] = '\\';
Magic Number,Fomm.SharpZipLib.Zip,ZipNameTransform,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 3] = '*';
Magic Number,Fomm.SharpZipLib.Zip,ZipNameTransform,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 4] = '?';
Magic Number,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,WriteLeShort,The following statement contains a magic number: unchecked        {          baseOutputStream_.WriteByte((byte) (value & 0xff));          baseOutputStream_.WriteByte((byte) ((value >> 8) & 0xff));        }
Magic Number,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,WriteLeInt,The following statement contains a magic number: unchecked        {          WriteLeShort(value);          WriteLeShort(value >> 16);        }
Magic Number,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,WriteLeLong,The following statement contains a magic number: unchecked        {          WriteLeInt((int) value);          WriteLeInt((int) (value >> 32));        }
Magic Number,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: if (headerInfoAvailable == false)        {          if (CanPatchEntries == false)          {            // Only way to record size and compressed size is to append a data descriptor            // after compressed data.              // Stored entries of this form have already been converted to deflating.            entry.Flags |= 8;          }          else          {            patchEntryHeader = true;          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,CloseEntry,The following statement contains a magic number: if ((curEntry.Flags & 8) != 0)        {          WriteLeInt(ZipConstants.DataDescriptorSignature);          WriteLeInt(unchecked((int) curEntry.Crc));            if (curEntry.LocalHeaderRequiresZip64)          {            WriteLeLong(curEntry.CompressedSize);            WriteLeLong(curEntry.Size);            offset += ZipConstants.Zip64DataDescriptorSize;          }          else          {            WriteLeInt((int) curEntry.CompressedSize);            WriteLeInt((int) curEntry.Size);            offset += ZipConstants.DataDescriptorSize;          }        }
Magic Number,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,Finish,The following statement contains a magic number: foreach (ZipEntry entry in entries)        {          WriteLeInt(ZipConstants.CentralHeaderSignature);          WriteLeShort(ZipConstants.VersionMadeBy);          WriteLeShort(entry.Version);          WriteLeShort(entry.Flags);          WriteLeShort((short) entry.CompressionMethod);          WriteLeInt((int) entry.DosTime);          WriteLeInt((int) entry.Crc);            if (entry.IsZip64Forced() ||              (entry.CompressedSize >= uint.MaxValue))          {            WriteLeInt(-1);          }          else          {            WriteLeInt((int) entry.CompressedSize);          }            if (entry.IsZip64Forced() ||              (entry.Size >= uint.MaxValue))          {            WriteLeInt(-1);          }          else          {            WriteLeInt((int) entry.Size);          }            var name = ZipConstants.ConvertToArray(entry.Flags' entry.Name);            if (name.Length > 0xffff)          {            throw new ZipException("Name too long.");          }            var ed = new ZipExtraData(entry.ExtraData);            if (entry.CentralHeaderRequiresZip64)          {            ed.StartNewEntry();            if (entry.IsZip64Forced() ||                (entry.Size >= 0xffffffff))            {              ed.AddLeLong(entry.Size);            }              if (entry.IsZip64Forced() ||                (entry.CompressedSize >= 0xffffffff))            {              ed.AddLeLong(entry.CompressedSize);            }              if (entry.Offset >= 0xffffffff)            {              ed.AddLeLong(entry.Offset);            }              ed.AddNewEntry(1);          }          else          {            ed.Delete(1);          }            var extra = ed.GetEntryData();            var entryComment =            (entry.Comment != null)              ? ZipConstants.ConvertToArray(entry.Flags' entry.Comment)              : new byte[0];            if (entryComment.Length > 0xffff)          {            throw new ZipException("Comment too long.");          }            WriteLeShort(name.Length);          WriteLeShort(extra.Length);          WriteLeShort(entryComment.Length);          WriteLeShort(0); // disk number          WriteLeShort(0); // internal file attributes          // external file attributes            if (entry.ExternalFileAttributes != -1)          {            WriteLeInt(entry.ExternalFileAttributes);          }          else          {            WriteLeInt(entry.IsDirectory ? 16 : 0);          }            if (entry.Offset >= uint.MaxValue)          {            WriteLeInt(-1);          }          else          {            WriteLeInt((int) entry.Offset);          }            if (name.Length > 0)          {            baseOutputStream_.Write(name' 0' name.Length);          }            if (extra.Length > 0)          {            baseOutputStream_.Write(extra' 0' extra.Length);          }            if (entryComment.Length > 0)          {            baseOutputStream_.Write(entryComment' 0' entryComment.Length);          }            sizeEntries += ZipConstants.CentralHeaderBaseSize + name.Length + extra.Length + entryComment.Length;        }
Duplicate Code,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,MatchRecordCheckCondition,The method contains a code clone-set at the following line numbers (starting from the method definition): ((32' 52)' (57' 77))
Duplicate Code,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The method contains a code clone-set at the following line numbers (starting from the method definition): ((106' 126)' (134' 154))
Missing Default,Fomm.Commands,ButtonCommandBinding<T>,C:\repos\niveuseverto_fomm\flmm\Commands\ButtonCommandBinding.cs,OnCommandPropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName)        {          case "CanExecute":            Button.Enabled = Command.CanExecute;            break;        }
Missing Default,Fomm.Commands,ToolStripMenuItemCommandBinding<T>,C:\repos\niveuseverto_fomm\flmm\Commands\ToolStripMenuItemCommandBinding.cs,OnCommandPropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName)        {          case "CanExecute":            ToolStripMenuItem.Enabled = Command.CanExecute;            break;          case "IsChecked":            if (Command is CheckedCommand<T>)            {              ToolStripMenuItem.Checked = ((CheckedCommand<T>) Command).IsChecked;            }            break;        }
Missing Default,Fomm.Controls,RichTextEditor,C:\repos\niveuseverto_fomm\flmm\Controls\RichTextEditor.cs,rtbTextbox_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode)          {            case Keys.A:              rtbTextbox.SelectAll();              e.Handled = true;              break;            case Keys.B:              tsbBold.Checked = !tsbBold.Checked;              FontStyleChanged(tsbBold' new EventArgs());              e.Handled = true;              break;            case Keys.I:              tsbItalic.Checked = !tsbItalic.Checked;              FontStyleChanged(tsbItalic' new EventArgs());              e.Handled = true;              e.SuppressKeyPress = true;              break;            case Keys.U:              tsbUnderline.Checked = !tsbUnderline.Checked;              FontStyleChanged(tsbUnderline' new EventArgs());              e.Handled = true;              break;          }
Missing Default,Fomm.Controls,XmlCompletionData,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionData.cs,InsertAction,The following switch statement is missing a default case: switch (m_actCompletionType)        {          case AutoCompleteType.Attribute:          case AutoCompleteType.AttributeValues:            textArea.InsertString(Text);            return false;          case AutoCompleteType.Element:            if (Text.EndsWith("["))            {              var crtCaret = textArea.Caret;              textArea.InsertString(String.Concat(Text' "]]>"));              crtCaret.Position = textArea.Document.OffsetToPosition(crtCaret.Offset - 3);              return false;            }            break;        }
Missing Default,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,GetAutoCompleteList,The following switch statement is missing a default case: switch (p_rtvReturnType)        {          case AutoCompleteType.Element:            if (p_xseElement.ElementSchemaType is XmlSchemaComplexType)            {              var xctElement = (XmlSchemaComplexType) p_xseElement.ElementSchemaType;              if (xctElement.ContentTypeParticle != null)              {                if (!ContainsSiblings(xctElement.ContentTypeParticle' ref lstCompleteList' p_lstSiblings))                {                  lstCompleteList = GetChildrenElements(xctElement.ContentTypeParticle);                }              }            }            else            {              var xstElement = (XmlSchemaSimpleType) p_xseElement.ElementSchemaType;              switch (xstElement.TypeCode)              {                case XmlTypeCode.String:                  lstCompleteList = new List<KeyValuePair<string' string>>();                  lstCompleteList.Add(new KeyValuePair<string' string>("![CDATA["' "Character data."));                  break;              }            }            if (lstCompleteList == null)            {              lstCompleteList = new List<KeyValuePair<string' string>>();            }            lstCompleteList.Add(new KeyValuePair<string' string>("/" + p_xseElement.Name + ">"' "Closing tag."));            break;          case AutoCompleteType.Attribute:            lstCompleteList = new List<KeyValuePair<string' string>>();            if (p_xseElement.ElementSchemaType is XmlSchemaComplexType)            {              var xctElement = (XmlSchemaComplexType) p_xseElement.ElementSchemaType;              foreach (var xsoAttribute in xctElement.Attributes)              {                if (xsoAttribute is XmlSchemaAttribute)                {                  if (!p_lstSiblings.Contains(((XmlSchemaAttribute) xsoAttribute).Name))                  {                    lstCompleteList.Add(new KeyValuePair<string' string>(((XmlSchemaAttribute) xsoAttribute).Name'                                                                         GetDocumentation(                                                                           (XmlSchemaAnnotated) xsoAttribute)));                  }                }                else if (xsoAttribute.ToString() == "System.Xml.Schema.XmlSchemaAttributeGroupRef") {}              }            }            break;          case AutoCompleteType.AttributeValues:            lstCompleteList = new List<KeyValuePair<string' string>>();            if (p_xseElement.ElementSchemaType is XmlSchemaComplexType)            {              var xctElement = (XmlSchemaComplexType) p_xseElement.ElementSchemaType;              XmlSchemaAttribute xsaAttribute = null;              foreach (var attribute in xctElement.Attributes)              {                if (attribute is XmlSchemaAttribute)                {                  xsaAttribute = (XmlSchemaAttribute) attribute;                  if (xsaAttribute.Name == p_lstSiblings[p_lstSiblings.Count - 1])                  {                    break;                  }                }                xsaAttribute = null;              }              if (xsaAttribute != null)              {                XmlSchemaSimpleType xssSimpleType;                if (xsaAttribute.SchemaType != null)                {                  xssSimpleType = xsaAttribute.SchemaType;                }                else                {                  xssSimpleType = (XmlSchemaSimpleType) m_xstSchema.GlobalTypes[xsaAttribute.SchemaTypeName];                }                if (xssSimpleType == null)                {                  switch (xsaAttribute.AttributeSchemaType.TypeCode)                  {                    case XmlTypeCode.Boolean:                      lstCompleteList.Add(new KeyValuePair<string' string>("0"' null));                      lstCompleteList.Add(new KeyValuePair<string' string>("1"' null));                      lstCompleteList.Add(new KeyValuePair<string' string>("true"' null));                      lstCompleteList.Add(new KeyValuePair<string' string>("false"' null));                      break;                  }                }                else if (xssSimpleType.Content.ToString() == "System.Xml.Schema.XmlSchemaSimpleTypeRestriction")                {                  foreach (                    XmlSchemaEnumerationFacet sefEnumValue in                      ((XmlSchemaSimpleTypeRestriction) xssSimpleType.Content).Facets)                  {                    lstCompleteList.Add(new KeyValuePair<string' string>(sefEnumValue.Value'                                                                         GetDocumentation(sefEnumValue)));                  }                }              }            }            break;        }
Missing Default,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,GetAutoCompleteList,The following switch statement is missing a default case: switch (xstElement.TypeCode)              {                case XmlTypeCode.String:                  lstCompleteList = new List<KeyValuePair<string' string>>();                  lstCompleteList.Add(new KeyValuePair<string' string>("![CDATA["' "Character data."));                  break;              }
Missing Default,Fomm.Controls,XmlCompletionProvider,C:\repos\niveuseverto_fomm\flmm\Controls\XmlCompletionProvider.cs,GetAutoCompleteList,The following switch statement is missing a default case: switch (xsaAttribute.AttributeSchemaType.TypeCode)                  {                    case XmlTypeCode.Boolean:                      lstCompleteList.Add(new KeyValuePair<string' string>("0"' null));                      lstCompleteList.Add(new KeyValuePair<string' string>("1"' null));                      lstCompleteList.Add(new KeyValuePair<string' string>("true"' null));                      lstCompleteList.Add(new KeyValuePair<string' string>("false"' null));                      break;                  }
Missing Default,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following switch statement is missing a default case: switch (p_mbiIcon)        {          case MessageBoxIcon.Information:            pbxIcon.Image = Resources.info;            break;          case MessageBoxIcon.Error:            pbxIcon.Image = Resources.error;            break;          case MessageBoxIcon.Warning:            pbxIcon.Image = Resources.Warning;            break;          case MessageBoxIcon.Question:            pbxIcon.Image = Resources.help;            break;          case MessageBoxIcon.None:            booShowIcon = false;            break;        }
Missing Default,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following switch statement is missing a default case: switch (p_mbbButtons)        {          case MessageBoxButtons.OKCancel:          case MessageBoxButtons.RetryCancel:          case MessageBoxButtons.YesNoCancel:            var butCancel = new Button();            butCancel.Text = "Cancel";            butCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butCancel.Location = new Point(intLastButtonLeft - butCancel.Width - 6' 12);            butCancel.Click += Button_Click;            butCancel.Tag = DialogResult.Cancel;            butCancel.TabIndex = 6;            pnlButtons.Controls.Add(butCancel);            intLastButtonLeft = butCancel.Left;            CancelButton = butCancel;            break;        }
Missing Default,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following switch statement is missing a default case: switch (p_mbbButtons)        {          case MessageBoxButtons.YesNo:          case MessageBoxButtons.YesNoCancel:            var butNo = new Button();            butNo.Text = "No";            butNo.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butNo.Location = new Point(intLastButtonLeft - butNo.Width - 6' 12);            butNo.Click += Button_Click;            butNo.Tag = DialogResult.No;            butNo.TabIndex = 5;            intLastButtonLeft = butNo.Left;            pnlButtons.Controls.Add(butNo);            if (p_mbbButtons == MessageBoxButtons.YesNo)            {              CancelButton = butNo;            }            break;        }
Missing Default,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following switch statement is missing a default case: switch (p_mbbButtons)        {          case MessageBoxButtons.YesNo:          case MessageBoxButtons.YesNoCancel:            var butYes = new Button();            butYes.Text = "Yes";            butYes.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butYes.Location = new Point(intLastButtonLeft - butYes.Width - 6' 12);            butYes.Click += Button_Click;            butYes.Tag = DialogResult.Yes;            butYes.TabIndex = 4;            intLastButtonLeft = butYes.Left;            pnlButtons.Controls.Add(butYes);            AcceptButton = butYes;            break;        }
Missing Default,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following switch statement is missing a default case: switch (p_mbbButtons)        {          case MessageBoxButtons.OK:          case MessageBoxButtons.OKCancel:            var butOk = new Button();            butOk.Text = "OK";            butOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butOk.Location = new Point(intLastButtonLeft - butOk.Width - 6' 12);            butOk.Click += Button_Click;            butOk.Tag = DialogResult.OK;            butOk.TabIndex = 3;            intLastButtonLeft = butOk.Left;            pnlButtons.Controls.Add(butOk);            AcceptButton = butOk;            break;        }
Missing Default,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following switch statement is missing a default case: switch (p_mbbButtons)        {          case MessageBoxButtons.AbortRetryIgnore:            var butIgnore = new Button();            butIgnore.Text = "Ignore";            butIgnore.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butIgnore.Location = new Point(intLastButtonLeft - butIgnore.Width - 6' 12);            butIgnore.Click += Button_Click;            butIgnore.Tag = DialogResult.Ignore;            butIgnore.TabIndex = 2;            intLastButtonLeft = butIgnore.Left;            pnlButtons.Controls.Add(butIgnore);            CancelButton = butIgnore;            break;        }
Missing Default,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following switch statement is missing a default case: switch (p_mbbButtons)        {          case MessageBoxButtons.AbortRetryIgnore:          case MessageBoxButtons.RetryCancel:            var butRetry = new Button();            butRetry.Text = "Retry";            butRetry.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butRetry.Location = new Point(intLastButtonLeft - butRetry.Width - 6' 12);            butRetry.Click += Button_Click;            butRetry.Tag = DialogResult.Retry;            butRetry.TabIndex = 1;            intLastButtonLeft = butRetry.Left;            pnlButtons.Controls.Add(butRetry);            AcceptButton = butRetry;            break;        }
Missing Default,Fomm,RememberSelectionMessageBox,C:\repos\niveuseverto_fomm\flmm\RememberSelectionMessageBox.cs,Init,The following switch statement is missing a default case: switch (p_mbbButtons)        {          case MessageBoxButtons.AbortRetryIgnore:            var butAbort = new Button();            butAbort.Text = "Abort";            butAbort.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;            butAbort.Location = new Point(intLastButtonLeft - butAbort.Width - 6' 12);            butAbort.Click += Button_Click;            butAbort.Tag = DialogResult.Abort;            butAbort.TabIndex = 0;            pnlButtons.Controls.Add(butAbort);            AcceptButton = butAbort;            break;        }
Missing Default,Fomm,Program,C:\repos\niveuseverto_fomm\flmm\Program.cs,Main,The following switch statement is missing a default case: switch (args[0])          {            case "-game":              try              {                sgmSelectedGame = (SupportedGameModes) Enum.Parse(typeof (SupportedGameModes)' args[1]' true);                booChooseGame = false;              }              catch {}              break;          }
Missing Default,Fomm.Games.Fallout3,Fallout3PluginManager,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3PluginManager.cs,GetPluginInfo,The following switch statement is missing a default case: switch (sr.Name)          {            case "CNAM":              name = sr.GetStrData();              break;            case "SNAM":              desc = sr.GetStrData();              break;            case "MAST":              masters.Add(sr.GetStrData());              break;            case "SCRN":              pic = sr.GetData();              break;          }
Missing Default,Fomm.Games.Fallout3,FOMMMigrator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\FOMMMigrator.cs,Migrate,The following switch statement is missing a default case: switch (MessageBox.Show(strMessage' "Migrate"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question))        {          case DialogResult.Cancel:            return false;          case DialogResult.No:            Properties.Settings.Default.migratedFromPre0130 = true;            Properties.Settings.Default.Save();            return true;        }
Missing Default,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,HandleStandaloneArguments,The following switch statement is missing a default case: switch (Path.GetExtension(p_strArgs[0]).ToLowerInvariant())          {            case ".dat":            case ".bsa":              Application.Run(new BSABrowser(p_strArgs[0]));              return true;            case ".sdp":              Application.Run(new Tools.ShaderEdit.MainForm(p_strArgs[0]));              return true;            case ".esp":            case ".esm":              Application.Run(new TESsnip(new[]              {                p_strArgs[0]              }));              return true;          }
Missing Default,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,HandleStandaloneArguments,The following switch statement is missing a default case: switch (p_strArgs[0])          {            case "-setup":              bool booNewMutex;              var mutex = new Mutex(true' "fommMainMutex"' out booNewMutex);              if (!booNewMutex)              {                MessageBox.Show("fomm is already running"' "Error");                mutex.Close();                return true;              }              Application.Run(new SettingsForm());              mutex.Close();              return true;            case "-bsa-unpacker":              Application.Run(new BSABrowser());              return true;            case "-bsa-creator":              Application.Run(new BSACreator());              return true;            case "-tessnip":              Application.Run(new TESsnip());              return true;            case "-sdp-editor":              Application.Run(new Tools.ShaderEdit.MainForm());              return true;          }
Missing Default,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following switch statement is missing a default case: switch (MessageBox.Show("You seem to have bought the DLC Anchorage.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Anchorage.esm");                    File.Move(f2[0]' "data\\Anchorage - Main.bsa");                    File.Move(f3[0]' "data\\Anchorage - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }
Missing Default,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following switch statement is missing a default case: switch (MessageBox.Show("You seem to have bought the DLC The Pitt.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\ThePitt.esm");                    File.Move(f2[0]' "data\\ThePitt - Main.bsa");                    File.Move(f3[0]' "data\\ThePitt - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }
Missing Default,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following switch statement is missing a default case: switch (MessageBox.Show("You seem to have bought the DLC Broken Steel.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    if (File.Exists("data\\video\\2 weeks later.bik"))                    {                      File.Move("data\\video\\2 weeks later.bik"' "data\\Video\\2 weeks later.bik.old");                    }                    if (File.Exists("data\\video\\b09.bik"))                    {                      File.Move("data\\video\\b09.bik"' "data\\Video\\b09.bik.old");                    }                    for (var i = 0; i < 3; i++)                    {                      File.Move(files[i][0]' Path.Combine(PluginsPath' Path.GetFileName(files[i][0])));                    }                    for (var i = 3; i < 8; i++)                    {                      File.Move(files[i][0]'                                Path.Combine(PluginsPath' Path.Combine("Video"' Path.GetFileName(files[i][0]))));                    }                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }
Missing Default,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following switch statement is missing a default case: switch (MessageBox.Show("You seem to have bought the DLC Point lookout.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\PointLookout.esm");                    File.Move(f2[0]' "data\\PointLookout - Main.bsa");                    File.Move(f3[0]' "data\\PointLookout - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }
Missing Default,Fomm.Games.Fallout3,Fallout3GameMode,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Fallout3GameMode.cs,CheckForDLCs,The following switch statement is missing a default case: switch (MessageBox.Show("You seem to have bought the DLC Mothership Zeta.\n" +                                        "Would you like to move it to fallout's data directory to allow for offline use and fose compatibility?\n" +                                        "Note that this may cause issues with any save games created after it was purchased but before it was moved.\n" +                                        "Click yes to move' cancel to ignore' and no if you don't want fomm to offer to move any DLC for you again."'                                        "Question"' MessageBoxButtons.YesNoCancel))                {                  case DialogResult.Yes:                    File.Move(f1[0]' "data\\Zeta.esm");                    File.Move(f2[0]' "data\\Zeta - Main.bsa");                    File.Move(f3[0]' "data\\Zeta - Sounds.bsa");                    break;                  case DialogResult.No:                    Properties.Settings.Default.fallout3IgnoreDLC = true;                    Properties.Settings.Default.Save();                    break;                }
Missing Default,Fomm.Games.Fallout3.Script,Fallout3ModInstallScript,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Script\Fallout3ModInstallScript.cs,UneditGameSpecificValue,The following switch statement is missing a default case: switch (strKey[0])        {          case "sdp":            var strShaderInfo = strKey[1].Split('/');            UneditShader(Int32.Parse(strShaderInfo[0])' strShaderInfo[1]);            return true;        }
Missing Default,Fomm.Games.Fallout3.Script.XmlConfiguredInstall.Parsers,Fallout3Parser20Extension,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Script\XmlConfiguredInstall\Parsers\Fallout3Parser20Extension.cs,ParseDependency,The following switch statement is missing a default case: switch (p_xndDependency.Name)        {          case "foseDependency":            var verMinFoseVersion = new Version(p_xndDependency.Attributes["version"].InnerText);            return new FoseDependency((Fallout3DependencyStateManager) p_dsmSate' verMinFoseVersion);        }
Missing Default,Fomm.Games.Fallout3.Script.XmlConfiguredInstall.Parsers,Fallout3Parser10Extension,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Script\XmlConfiguredInstall\Parsers\Fallout3Parser10Extension.cs,ParseDependency,The following switch statement is missing a default case: switch (p_xndDependency.Name)        {          case "foseDependancy":            var verMinFoseVersion = new Version(p_xndDependency.Attributes["version"].InnerText);            return new FoseDependency((Fallout3DependencyStateManager) p_dsmSate' verMinFoseVersion);        }
Missing Default,Fomm.Games.Fallout3.Tools,PluginConflictDetector,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\PluginConflictDetector.cs,cdrDetector_ConflictDetected,The following switch statement is missing a default case: switch (e.ConflictInfo.Severity)        {          case CriticalRecordInfo.ConflictSeverity.Conflict:            stbMessage.Append(@"\b \cf1 CONFLICT\cf0 :\b0  ");            intColourIndex = 2;            break;          case CriticalRecordInfo.ConflictSeverity.Warning:            stbMessage.Append(@"\b \cf2 WARNING\cf0 :\b0  ");            intColourIndex = 1;            break;          case CriticalRecordInfo.ConflictSeverity.Info:            stbMessage.Append(@"\b \cf3 INFO\cf0 :\b0  ");            intColourIndex = 0;            break;        }
Missing Default,Fomm.Games.Fallout3.Tools.AutoSorter,LoadOrderSorter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\AutoSorter\LoadOrderSorter.cs,LoadList,The following switch statement is missing a default case: switch (fileLines[j][0])                {                  case ':':                    requires.Add(fileLines[j].Substring(1).ToLowerInvariant().Trim());                    skiplines++;                    continue;                  case '"':                    conflicts.Add(fileLines[j].Substring(1).ToLowerInvariant().Trim());                    skiplines++;                    continue;                  case '*':                  case '?':                    comments.Add(fileLines[j].Substring(1).Trim());                    skiplines++;                    continue;                }
Missing Default,Fomm.Games.Fallout3.Tools.BSA,BSAArchive,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSAArchive.cs,GenHash,The following switch statement is missing a default case: switch (ext)          {            case ".nif":              i = 1;              break;              //case ".kf": i=2; break;            case ".dds":              i = 3;              break;              //case ".wav": i=4; break;          }
Missing Default,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,GenHash,The following switch statement is missing a default case: switch (ext)          {            case ".nif":              i = 1;              break;            case ".kf":              i = 2;              break;            case ".dds":              i = 3;              break;            case ".wav":              i = 4;              break;          }
Missing Default,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CheckFileTypes,The following switch statement is missing a default case: switch (Path.GetExtension(lvi.Text))          {            case ".nif":              result |= 0x001;              break;            case ".dds":              result |= 0x002;              break;            case ".xml":              result |= 0x004;              break;            case ".wav":              result |= 0x008;              break;            case ".mp3":              result |= 0x010;              break;            case ".txt":            case ".html":            case ".htm":            case ".bat":            case ".scc":              result |= 0x020;              break;            case ".spt":              result |= 0x040;              break;            case ".tex":            case ".fon":              result |= 0x080;              break;            case ".ctl":              result |= 0x100;              break;          }
Missing Default,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following switch statement is missing a default case: switch (cmbCompLevel.SelectedIndex)        {          case 0:            level = 9;            break;          case 1:            level = 7;            break;          case 2:            level = 5;            break;          case 3:            level = 3;            break;          case 4:            level = 1;            break;        }
Missing Default,Fomm.Games.Fallout3.Tools.BSA,BSACreator,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\BSA\BSACreator.cs,CompressRecord,The following switch statement is missing a default case: switch (cmbCompression.SelectedIndex)        {          case 6:          case 5:            return Out;          case 4:            mul = 0.8f;            break;          case 3:            mul = 0.6f;            break;          case 2:            mul = 0.4f;            break;          case 1:            mul = 0.2f;            break;        }
Missing Default,Fomm.Games.Fallout3.Tools.CriticalRecords,CriticalRecordPlugin,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\CriticalRecords\CriticalRecordPlugin.cs,getCriticalRecordData,The following switch statement is missing a default case: switch (srcSubRecord.Name)                {                  case "EDID":                    if (srcSubRecord.GetStrData().Equals(CRITICAL_DATA_RECORD_EDID))                    {                      recCriticalRecords = recRecord;                    }                    break;                  case "DESC":                    srcCriticalData = srcSubRecord;                    break;                }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitRefLabel,The following switch statement is missing a default case: switch (type)          {            case RefType.Standard:              Emit(0x1c);              break;            case RefType.Expression:              EmitByte(0x72);              break;            case RefType.Standalone:              EmitByte(0x5a);              break;          }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitFunctionCall,The following switch statement is missing a default case: switch (vt.type)              {                case VarType.Int:                  if (fs.args[argcount - 1] != VarType.Float && fs.args[argcount - 1] != VarType.Int)                  {                    AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                  }                  EmitByte(0x73);                  Emit((ushort) locals[smt[i].token].index);                  break;                case VarType.Float:                  if (fs.args[argcount - 1] != VarType.Float && fs.args[argcount - 1] != VarType.Int)                  {                    AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                  }                  EmitByte(0x66);                  Emit((ushort) locals[smt[i].token].index);                  break;                case VarType.Ref:                  if (fs.args[argcount - 1] != VarType.Ref)                  {                    AddError("Invalid argument " + i + " to function. Expected " + fs.args[argcount - 1]);                  }                  EmitRefLabel(smt[i]' RefType.Expression);                  break;              }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,EmitShowMessage,The following switch statement is missing a default case: switch (vt.type)                {                  case VarType.Int:                    EmitByte(0x73);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Float:                    EmitByte(0x66);                    Emit((ushort) locals[smt[i].token].index);                    break;                  case VarType.Ref:                    EmitRefLabel(smt[i]' RefType.Expression);                    break;                }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleBlock,The following switch statement is missing a default case: switch (smt[0].keyword)            {              case Keywords.If:              {                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x16);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);                break;              }              case Keywords.ElseIf:                if (flowControl.Count == 0)                {                  AddError("elseif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }              {                Emit(0x18);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);              }                break;              case Keywords.Else:                if (flowControl.Count == 0)                {                  AddError("else without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x17);                Emit(2);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                opcodecount.Add(0);                break;              case Keywords.EndIf:                Emit(0x19);                Emit(0);                if (flowControl.Count == 0)                {                  AddError("endif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;              case Keywords.Return:                Emit(0x1e);                Emit(0);                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;            }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip.ScriptCompiler,ScriptCompiler,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\ScriptCompiler\ScriptCompiler.cs,HandleResultsBlock,The following switch statement is missing a default case: switch (smt[0].keyword)            {              case Keywords.If:              {                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x16);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);                break;              }              case Keywords.ElseIf:                if (flowControl.Count == 0)                {                  AddError("elseif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }              {                Emit(0x18);                var pos2 = bw.BaseStream.Length;                Emit(0);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                EmitExpression(TrimStatement(smt' 1)' ExpressionType.If);                bw.BaseStream.Position = pos2;                Emit((ushort) (bw.BaseStream.Length - (pos2 + 2)));                bw.BaseStream.Position = bw.BaseStream.Length;                opcodecount.Add(0);              }                break;              case Keywords.Else:                if (flowControl.Count == 0)                {                  AddError("else without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                Emit(0x17);                Emit(2);                flowControl.Push(bw.BaseStream.Length);                Emit(0);                opcodecount.Add(0);                break;              case Keywords.EndIf:                Emit(0x19);                Emit(0);                if (flowControl.Count == 0)                {                  AddError("endif without matching if");                }                else                {                  bw.BaseStream.Position = flowControl.Pop();                  Emit(opcodecount[opcodecount.Count - 1]);                  opcodecount.RemoveAt(opcodecount.Count - 1);                  bw.BaseStream.Position = bw.BaseStream.Length;                }                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;              case Keywords.Return:                Emit(0x1e);                Emit(0);                for (var i = 0; i < opcodecount.Count; i++)                {                  opcodecount[i] += 1;                }                break;            }
Missing Default,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,HandleStandaloneArguments,The following switch statement is missing a default case: switch (Path.GetExtension(p_strArgs[0]).ToLowerInvariant())          {            case ".dat":            case ".bsa":              Application.Run(new BSABrowser(p_strArgs[0]));              return true;            case ".sdp":              Application.Run(new Fallout3.Tools.ShaderEdit.MainForm(p_strArgs[0]));              return true;            case ".esp":            case ".esm":              Application.Run(new TESsnip(new[]              {                p_strArgs[0]              }));              return true;          }
Missing Default,Fomm.Games.FalloutNewVegas,FalloutNewVegasGameMode,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\FalloutNewVegasGameMode.cs,HandleStandaloneArguments,The following switch statement is missing a default case: switch (p_strArgs[0])          {            case "-setup":              bool booNewMutex;              var mutex = new Mutex(true' "fommMainMutex"' out booNewMutex);              if (!booNewMutex)              {                MessageBox.Show("fomm is already running"' "Error");                mutex.Close();                return true;              }              Application.Run(new SettingsForm());              mutex.Close();              return true;            case "-bsa-unpacker":              Application.Run(new BSABrowser());              return true;            case "-bsa-creator":              Application.Run(new BSACreator());              return true;            case "-tessnip":              Application.Run(new TESsnip());              return true;            case "-sdp-editor":              Application.Run(new Fallout3.Tools.ShaderEdit.MainForm());              return true;          }
Missing Default,Fomm.Games.FalloutNewVegas.Script.XmlConfiguredInstall.Parsers,FalloutNewVegasParser50Extension,C:\repos\niveuseverto_fomm\flmm\Games\FalloutNewVegas\Script\XmlConfiguredInstall\Parsers\FalloutNewVegasParser50Extension.cs,ParseDependency,The following switch statement is missing a default case: switch (p_xndDependency.Name)        {          case "nvseDependency":            var verMinNvseVersion = new Version(p_xndDependency.Attributes["version"].InnerText);            return new NvseDependency((Fallout3DependencyStateManager) p_dsmSate' verMinNvseVersion);        }
Missing Default,Fomm.Games,GameMode,C:\repos\niveuseverto_fomm\flmm\Games\GameMode.cs,getPluginDependencyStatus,The following switch statement is missing a default case: switch (sr.Name)            {              case "MAST":                masters.Add(sr.GetStrData().ToLower());                break;            }
Missing Default,Fomm.PackageManager,ModInstaller,C:\repos\niveuseverto_fomm\flmm\PackageManager\ModInstaller.cs,DoScript,The following switch statement is missing a default case: switch (fscInstallScript.Type)            {              case FomodScriptType.CSharp:                Fomod.IsActive = RunCustomInstallScript();                break;              case FomodScriptType.XMLConfig:                Fomod.IsActive = RunXmlInstallScript();                break;            }
Missing Default,Fomm.PackageManager,TextEditor,C:\repos\niveuseverto_fomm\flmm\PackageManager\TextEditor.cs,TextEditor,The following switch statement is missing a default case: switch (type)        {          case TextEditorType.Text:            rtbEdit = new RichTextBox();            panel1.Controls.Add(rtbEdit);            rtbEdit.Text = text;            rtbEdit.Dock = DockStyle.Fill;            rtbEdit.TextChanged += textChanged;            break;        }
Missing Default,Fomm.PackageManager,fomod,C:\repos\niveuseverto_fomm\flmm\PackageManager\fomod.cs,LoadInfo,The following switch statement is missing a default case: switch (xndNode.Name)          {            case "Name":              if (p_booOverwriteExisitngValues || String.IsNullOrEmpty(p_finFomodInfo.ModName))              {                p_finFomodInfo.ModName = xndNode.InnerText;              }              break;            case "Version":              if (p_booOverwriteExisitngValues || String.IsNullOrEmpty(p_finFomodInfo.HumanReadableVersion))              {                p_finFomodInfo.HumanReadableVersion = xndNode.InnerText;              }              if (p_booOverwriteExisitngValues || (p_finFomodInfo.MachineVersion == DefaultVersion))              {                var xndMachineVersion = xndNode.Attributes.GetNamedItem("MachineVersion");                if (xndMachineVersion != null)                {                  p_finFomodInfo.MachineVersion = new Version(xndMachineVersion.Value);                }              }              break;            case "Author":              if (p_booOverwriteExisitngValues || String.IsNullOrEmpty(p_finFomodInfo.Author))              {                p_finFomodInfo.Author = xndNode.InnerText;              }              break;            case "Description":              if (p_booOverwriteExisitngValues || String.IsNullOrEmpty(p_finFomodInfo.Description))              {                p_finFomodInfo.Description = xndNode.InnerText;              }              break;            case "MinFommVersion":              if (p_booOverwriteExisitngValues || (p_finFomodInfo.MachineVersion == DefaultMinFommVersion))              {                p_finFomodInfo.MinFommVersion = new Version(xndNode.InnerText);              }              break;            case "Email":              if (p_booOverwriteExisitngValues || String.IsNullOrEmpty(p_finFomodInfo.Email))              {                p_finFomodInfo.Email = xndNode.InnerText;              }              break;            case "Website":              if (p_booOverwriteExisitngValues || String.IsNullOrEmpty(p_finFomodInfo.Website))              {                p_finFomodInfo.Website = xndNode.InnerText;              }              break;            case "Groups":              if (p_booOverwriteExisitngValues || (p_finFomodInfo.Groups.Length == 0))              {                var strGroups = new string[xndNode.ChildNodes.Count];                for (var i = 0; i < xndNode.ChildNodes.Count; i++)                {                  strGroups[i] = xndNode.ChildNodes[i].InnerText;                }                p_finFomodInfo.Groups = strGroups;              }              break;          }
Missing Default,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,ActivateFomod,The following switch statement is missing a default case: switch (              MessageBox.Show(                String.Format(strUpgradeMessage' fomodMod.ModName' fomodMod.HumanReadableVersion' mod.HumanReadableVersion)'                "Upgrade"' MessageBoxButtons.YesNo' MessageBoxIcon.Question))            {              case DialogResult.Yes:                var mduUpgrader = new ModUpgrader(mod' fomodMod.BaseName);                mduUpgrader.Upgrade();                if (mod.IsActive)                {                  fomodMod.IsActive = false;                  lviFomod.Checked = false;                }                return;              case DialogResult.No:                booFound = true;                break;            }
Missing Default,Fomm.PackageManager,PackageManager,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,lvModList_ColumnClick,The following switch statement is missing a default case: switch (e.Column)        {          case 0:            cmbSortOrder.SelectedIndex = 1;            break;          case 2:            cmbSortOrder.SelectedIndex = 2;            break;        }
Missing Default,Fomm.PackageManager,FomodSorter,C:\repos\niveuseverto_fomm\flmm\PackageManager\PackageManager.cs,Compare,The following switch statement is missing a default case: switch (Mode)          {            case 0:              return 0;            case 1:              return m1.BaseName.CompareTo(m2.BaseName);            case 2:              return m1.ModName.CompareTo(m2.ModName);            case 3:              return m1.Author.CompareTo(m2.Author);          }
Missing Default,Fomm.PackageManager,ViewReadmeForm,C:\repos\niveuseverto_fomm\flmm\PackageManager\ViewReadmeForm.cs,ViewReadmeForm,The following switch statement is missing a default case: switch (p_rmeReadme.Format)        {          case ReadmeFormat.PlainText:          case ReadmeFormat.RichText:            var rtbReadme = new RichTextBox();            rtbReadme.Multiline = true;            rtbReadme.ScrollBars = RichTextBoxScrollBars.Vertical;            rtbReadme.BorderStyle = BorderStyle.None;            rtbReadme.BackColor = SystemColors.Control;            rtbReadme.ReadOnly = true;            rtbReadme.TabStop = false;            rtbReadme.LinkClicked += rtbReadme_LinkClicked;            if (p_rmeReadme.Format == ReadmeFormat.PlainText)            {              rtbReadme.Font = new Font(FontFamily.GenericMonospace' rtbReadme.Font.Size' rtbReadme.Font.Style);              rtbReadme.Text = p_rmeReadme.Text;            }            else            {              rtbReadme.Rtf = p_rmeReadme.Text;            }            rtbReadme.Dock = DockStyle.Fill;            Controls.Add(rtbReadme);            break;          case ReadmeFormat.HTML:            var wbrBrowser = new WebBrowser();            Controls.Add(wbrBrowser);            wbrBrowser.Dock = DockStyle.Fill;            wbrBrowser.DocumentCompleted += delegate            {              Text = String.IsNullOrEmpty(wbrBrowser.DocumentTitle) ? "Readme" : wbrBrowser.DocumentTitle;            };            wbrBrowser.WebBrowserShortcutsEnabled = false;            wbrBrowser.AllowWebBrowserDrop = false;            wbrBrowser.AllowNavigation = false;            wbrBrowser.DocumentText = p_rmeReadme.Text;            break;        }
Missing Default,Fomm.PackageManager.FomodBuilder,FomodGenerator,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodGenerator.cs,CheckFileName,The following switch statement is missing a default case: switch (            MessageBox.Show(              "File '" + newpath + "' already exists. The old file can be replaced' or the new file can be named '" +              strNewPath + "'." + Environment.NewLine + "Do you want to overwrite the old file?"' "Warning"'              MessageBoxButtons.YesNoCancel))          {            case DialogResult.Yes:              return true;            case DialogResult.No:              newpath = strNewPath;              return true;            case DialogResult.Cancel:              return false;          }
Missing Default,Fomm.PackageManager.FomodBuilder,FomodGenerator,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\FomodGenerator.cs,PackFomod,The following switch statement is missing a default case: switch (szcCompressor.ArchiveFormat)        {          case OutArchiveFormat.Zip:          case OutArchiveFormat.GZip:          case OutArchiveFormat.BZip2:            szcCompressor.CustomParameters.Add("mt"' "on");            break;          case OutArchiveFormat.SevenZip:          case OutArchiveFormat.XZ:            szcCompressor.CustomParameters.Add("mt"' "on");            szcCompressor.CustomParameters.Add("s"' "off");            break;        }
Missing Default,Fomm.PackageManager.FomodBuilder,PremadeFomodPackBuilder,C:\repos\niveuseverto_fomm\flmm\PackageManager\FomodBuilder\PremadeFomodPackBuilder.cs,CreatePFPHowTo,The following switch statement is missing a default case: switch (strXMLVersion)          {            case "1.0":              strMinFOMMVersion = "0.11.5";              break;            case "2.0":              strMinFOMMVersion = "0.11.7";              break;            case "3.0":              strMinFOMMVersion = "0.11.9";              break;            case "4.0":              strMinFOMMVersion = "0.12.4";              break;            case "5.0":              strMinFOMMVersion = "0.13.0";              break;          }
Missing Default,Fomm.PackageManager.Upgrade,ModUpgrader,C:\repos\niveuseverto_fomm\flmm\PackageManager\Upgrade\ModUpgrader.cs,DoScript,The following switch statement is missing a default case: switch (fscInstallScript.Type)            {              case FomodScriptType.CSharp:                booUpgraded = RunCustomInstallScript();                break;              case FomodScriptType.XMLConfig:                booUpgraded = RunXmlInstallScript();                break;            }
Missing Default,Fomm.PackageManager.Upgrade,UpgradeScanner,C:\repos\niveuseverto_fomm\flmm\PackageManager\Upgrade\UpgradeScanner.cs,Scan,The following switch statement is missing a default case: switch (              MessageBox.Show(                String.Format(m_strUpgradeMessage' fomodMod.ModName' fifMod.Version' fomodMod.HumanReadableVersion)'                "Upgrade"' MessageBoxButtons.YesNo' MessageBoxIcon.Question))            {              case DialogResult.Yes:                lstModsToUpgrade.Add(fomodMod);                break;              case DialogResult.No:                lstModsToReplace.Add(fomodMod);                break;            }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,checkDefaults,The following switch statement is missing a default case: switch (pifPlugin.Type)                {                  case PluginType.Recommended:                    lviRecommended = lviPlugin;                    break;                  case PluginType.Required:                    lviRequired = lviPlugin;                    break;                }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,checkDefaults,The following switch statement is missing a default case: switch (pifPlugin.Type)                {                  case PluginType.Recommended:                  case PluginType.Required:                    lviPlugin.Checked = true;                    booOneSelected = true;                    break;                }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,addGroup,The following switch statement is missing a default case: switch (p_pgpGroup.Type)        {          case GroupType.SelectAll:            lvgGroup.Header = p_pgpGroup.Name + " (All Required)";            break;          case GroupType.SelectAtLeastOne:            lvgGroup.Header = p_pgpGroup.Name + " (One Required)";            break;          case GroupType.SelectAtMostOne:            lvgGroup.Header = p_pgpGroup.Name + " (Select Only One)";            break;          case GroupType.SelectExactlyOne:            lvgGroup.Header = p_pgpGroup.Name + " (Select One)";            break;          case GroupType.SelectAny:            lvgGroup.Header = p_pgpGroup.Name;            break;        }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,lvwPlugins_ItemCheck,The following switch statement is missing a default case: switch (pifPlugin.Type)        {          case PluginType.Required:            if (e.NewValue != CheckState.Checked)            {              MessageBox.Show(this' pifPlugin.Name + " is required. You cannot unselect it.");            }            e.NewValue = CheckState.Checked;            return;          case PluginType.Recommended:            if (e.NewValue != CheckState.Checked)            {              if (                MessageBox.Show(this'                                pifPlugin.Name +                                " is recommended. Disabling it may result in game instability. Are you sure you want to continue?"'                                "Warning"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.No)              {                e.NewValue = CheckState.Checked;                return;              }            }            break;          case PluginType.NotUsable:          case PluginType.CouldBeUsable:            if (e.NewValue == CheckState.Checked)            {              if (                MessageBox.Show(this'                                pifPlugin.Name +                                " is not usable with your loaded mods. Enabling it may result in game instability. Are you sure you want to continue?"'                                "Warning"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.No)              {                e.NewValue = CheckState.Unchecked;                return;              }            }            break;        }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,lvwPlugins_ItemCheck,The following switch statement is missing a default case: switch ((GroupType) lvgGroup.Tag)        {          case GroupType.SelectAll:            if (e.NewValue != CheckState.Checked)            {              MessageBox.Show(this' pifPlugin.Name + " is required. You cannot unselect it.");            }            e.NewValue = CheckState.Checked;            break;          case GroupType.SelectAtLeastOne:            if (e.NewValue != CheckState.Checked)            {              var booOtherChecked = false;              foreach (ListViewItem lviGroupItem in lvgGroup.Items)              {                if ((lviGroupItem.Index != e.Index) && (lviGroupItem.Checked))                {                  booOtherChecked = true;                  break;                }              }              if (!booOtherChecked)              {                MessageBox.Show(this' "You must select at least one plugin in this group.");                e.NewValue = CheckState.Checked;              }            }            break;          case GroupType.SelectExactlyOne:            if (e.NewValue != CheckState.Checked)            {              var booOtherChecked = false;              foreach (ListViewItem lviGroupItem in lvgGroup.Items)              {                if ((lviGroupItem.Index != e.Index) && (lviGroupItem.Checked))                {                  booOtherChecked = true;                  break;                }              }              if (!booOtherChecked)              {                MessageBox.Show(this' "You must select one plugin in this group.");                e.NewValue = CheckState.Checked;              }            }            break;        }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall,OptionFormStep,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\OptionFormStep.cs,lvwPlugins_ItemChecked,The following switch statement is missing a default case: switch ((GroupType) lvgGroup.Tag)        {          case GroupType.SelectAtMostOne:          case GroupType.SelectExactlyOne:            if (lviItem.Checked)            {              foreach (ListViewItem lviGroupItem in lvgGroup.Items)              {                if ((lviGroupItem != lviItem) && (lviGroupItem.Index > -1))                {                  lviGroupItem.Checked = false;                }              }            }            break;        }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser40,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser40.cs,GetInstallSteps,The following switch statement is missing a default case: switch (xndSteps.Attributes["order"].InnerText)          {            case "Ascending":              lstSteps.Sort((x' y) =>              {                if (String.IsNullOrEmpty(x.Name))                {                  if (String.IsNullOrEmpty(y.Name))                  {                    return 0;                  }                  return -1;                }                return x.Name.CompareTo(y.Name);              });              break;            case "Descending":              lstSteps.Sort((x' y) =>              {                if (String.IsNullOrEmpty(y.Name))                {                  if (String.IsNullOrEmpty(x.Name))                  {                    return 0;                  }                  return -1;                }                return y.Name.CompareTo(x.Name);              });              break;          }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser30,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser30.cs,loadGroupedPlugins,The following switch statement is missing a default case: switch (p_xndFileGroups.Attributes["order"].InnerText)          {            case "Ascending":              lstGroups.Sort((x' y) =>              {                if (String.IsNullOrEmpty(x.Name))                {                  if (String.IsNullOrEmpty(y.Name))                  {                    return 0;                  }                  return -1;                }                return x.Name.CompareTo(y.Name);              });              break;            case "Descending":              lstGroups.Sort((x' y) =>              {                if (String.IsNullOrEmpty(y.Name))                {                  if (String.IsNullOrEmpty(x.Name))                  {                    return 0;                  }                  return -1;                }                return y.Name.CompareTo(x.Name);              });              break;          }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser30,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser30.cs,parseGroup,The following switch statement is missing a default case: switch (p_xndGroup.FirstChild.Attributes["order"].InnerText)        {          case "Ascending":            strPluginOrder = SortOrder.Ascending;            break;          case "Descending":            strPluginOrder = SortOrder.Descending;            break;        }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser.cs,GetParser,The following switch statement is missing a default case: switch (strConfigVersion)        {          case "1.0":            return new Parser10(p_xmlConfig' p_fomodMod' p_dsmSate' pexParserExtension);          case "2.0":            return new Parser20(p_xmlConfig' p_fomodMod' p_dsmSate' pexParserExtension);          case "3.0":            return new Parser30(p_xmlConfig' p_fomodMod' p_dsmSate' pexParserExtension);          case "4.0":            return new Parser40(p_xmlConfig' p_fomodMod' p_dsmSate' pexParserExtension);          case "5.0":            return new Parser50(p_xmlConfig' p_fomodMod' p_dsmSate' pexParserExtension);        }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser10,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser10.cs,parsePlugin,The following switch statement is missing a default case: switch (xndTypeDescriptor.Name)        {          case "type":            iptType =              new StaticPluginType(                (PluginType) Enum.Parse(typeof (PluginType)' xndTypeDescriptor.Attributes["name"].InnerText));            break;          case "dependancyType":            var ptpDefaultType =              (PluginType)                Enum.Parse(typeof (PluginType)'                           xndTypeDescriptor.SelectSingleNode("defaultType").Attributes["name"].InnerText);            iptType = new DependencyPluginType(ptpDefaultType);            var dptDependentType = (DependencyPluginType) iptType;              var xnlPatterns = xndTypeDescriptor.SelectNodes("patterns/*");            foreach (XmlNode xndPattern in xnlPatterns)            {              var ptpType =                (PluginType)                  Enum.Parse(typeof (PluginType)' xndPattern.SelectSingleNode("type").Attributes["name"].InnerText);              var cdpDependency = loadDependency(xndPattern.SelectSingleNode("dependancies"));              dptDependentType.AddPattern(ptpType' cdpDependency);            }            break;        }
Missing Default,Fomm.PackageManager.XmlConfiguredInstall.Parsers,Parser10,C:\repos\niveuseverto_fomm\flmm\PackageManager\XmlConfiguredInstall\Parsers\Parser10.cs,loadDependency,The following switch statement is missing a default case: switch (xndDependency.Name)          {            case "dependancies":              cpdDependency.Dependencies.Add(loadDependency(xndDependency));              break;            case "dependancy":              var strDependency = xndDependency.Attributes["file"].InnerText.ToLower();              var mfsModState =                (ModFileState) Enum.Parse(typeof (ModFileState)' xndDependency.Attributes["state"].InnerText);              cpdDependency.Dependencies.Add(new FileDependency(strDependency' mfsModState' StateManager));              break;          }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip,GroupEditor,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following switch statement is missing a default case: switch (cmbGroupType.SelectedIndex)        {          case 0:            tbRecType.Enabled = true;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 2:          case 3:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = false;            tbBlock.Enabled = true;            break;          case 4:          case 5:            tbRecType.Enabled = false;            tbX.Enabled = true;            tbY.Enabled = true;            tbParent.Enabled = false;            tbBlock.Enabled = false;            break;          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            tbRecType.Enabled = false;            tbX.Enabled = false;            tbY.Enabled = false;            tbParent.Enabled = true;            tbBlock.Enabled = false;            break;        }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip,TESsnip,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnip.cs,generateLLXmlToolStripMenuItem_Click,The following switch statement is missing a default case: switch (r.Name)            {              case "LVLI":                for (var i = 0; i < r.SubRecords.Count; i++)                {                  if (r.SubRecords[i].Name == "LVLO")                  {                    if (r.SubRecords[i].Size != 12)                    {                      continue;                    }                    var data = r.SubRecords[i].GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.Append("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                               (formid & 0xffffff).ToString("X6") + "\" count=\"" + TypeConverter.h2ss(data[8]' data[9]) +                               "\" ");                    if (i < r.SubRecords.Count - 1 && r.SubRecords[i + 1].Name == "COED" && r.SubRecords[i + 1].Size == 12)                    {                      i++;                      data = r.SubRecords[i].GetReadonlyData();                      sb3.Append(" coed1=\"" + TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]) + "\" coed2=\"" +                                 TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]) + "\" coed3=\"" +                                 TypeConverter.h2i(data[8]' data[9]' data[10]' data[11]) + "\" ");                    }                    sb3.AppendLine("/>");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLI>");                }                sb3.Length = 0;                break;              case "LVLN":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLN>");                }                sb3.Length = 0;                break;              case "LVLC":                foreach (var sub in r.SubRecords)                {                  if (sub.Name == "LVLO")                  {                    if (sub.Size != 12)                    {                      continue;                    }                    var data = sub.GetReadonlyData();                    var formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                    if ((formid & 0xff000000) != mask)                    {                      continue;                    }                    sb3.AppendLine("      <Element level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" +                                   (formid & 0xffffff).ToString("X6") + "\" count=\"" +                                   TypeConverter.h2ss(data[8]' data[9]) + "\" />");                  }                }                if (sb3.Length > 0)                {                  sb2.AppendLine("    <LVLC formid=\"" + r.FormID.ToString("X6") + "\">");                  sb2.Append(sb3);                  sb2.AppendLine("    </LVLC>");                }                sb3.Length = 0;                break;            }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip,GroupRecord,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\TESsnipParser.cs,GetSubDesc,The following switch statement is missing a default case: switch (groupType)        {          case 0:            return "(Contains: " + (char) data[0] + (char) data[1] + (char) data[2] + (char) data[3] + ")";          case 2:          case 3:            return "(Block number: " + (data[0] + data[1]*256 + data[2]*256*256 + data[3]*256*256*256) + ")";          case 4:          case 5:            return "(Coordinates: [" + (data[0] + data[1]*256) + "' " + data[2] + data[3]*256 + "])";          case 1:          case 6:          case 7:          case 8:          case 9:          case 10:            return "(Parent FormID: 0x" + data[3].ToString("x2") + data[2].ToString("x2") + data[1].ToString("x2") +                   data[0].ToString("x2") + ")";        }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,_vScrollBar_Scroll,The following switch statement is missing a default case: switch (e.Type)        {          case ScrollEventType.Last:            break;          case ScrollEventType.EndScroll:            break;          case ScrollEventType.SmallIncrement:            PerformScrollLineDown();            break;          case ScrollEventType.SmallDecrement:            PerformScrollLineUp();            break;          case ScrollEventType.LargeIncrement:            PerformScrollPageDown();            break;          case ScrollEventType.LargeDecrement:            PerformScrollPageUp();            break;          case ScrollEventType.ThumbPosition:            var lPos = FromScrollPos(e.NewValue);            PerformScrollThumpPosition(lPos);            break;          case ScrollEventType.ThumbTrack:            // to avoid performance problems use a refresh delay implemented with a timer            if (_thumbTrackTimer.Enabled) // stop old timer            {              _thumbTrackTimer.Enabled = false;            }              // perform scroll immediately only if last refresh is very old            var currentThumbTrack = Environment.TickCount;            if (currentThumbTrack - _lastThumbtrack > THUMPTRACKDELAY)            {              PerformScrollThumbTrack(null' null);              _lastThumbtrack = currentThumbTrack;              break;            }              // start thumbtrack timer             _thumbTrackPosition = FromScrollPos(e.NewValue);            _thumbTrackTimer.Enabled = true;            break;          case ScrollEventType.First:            break;        }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,HexBox,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,OnPaintBackground,The following switch statement is missing a default case: switch (_borderStyle)        {          case BorderStyle.Fixed3D:          {            if (TextBoxRenderer.IsSupported)            {              var state = VisualStyleElement.TextBox.TextEdit.Normal;              var backColor = BackColor;                if (Enabled)              {                if (ReadOnly)                {                  state = VisualStyleElement.TextBox.TextEdit.ReadOnly;                }                else if (Focused)                {                  state = VisualStyleElement.TextBox.TextEdit.Focused;                }              }              else              {                state = VisualStyleElement.TextBox.TextEdit.Disabled;                backColor = BackColorDisabled;              }                var vsr = new VisualStyleRenderer(state);              vsr.DrawBackground(pevent.Graphics' ClientRectangle);                var rectContent = vsr.GetBackgroundContentRectangle(pevent.Graphics' ClientRectangle);              pevent.Graphics.FillRectangle(new SolidBrush(backColor)' rectContent);            }            else            {              // draw background              pevent.Graphics.FillRectangle(new SolidBrush(BackColor)' ClientRectangle);                // draw default border              ControlPaint.DrawBorder3D(pevent.Graphics' ClientRectangle' Border3DStyle.Sunken);            }              break;          }          case BorderStyle.FixedSingle:          {            // draw background            pevent.Graphics.FillRectangle(new SolidBrush(BackColor)' ClientRectangle);              // draw fixed single border            ControlPaint.DrawBorder(pevent.Graphics' ClientRectangle' Color.Black' ButtonBorderStyle.Solid);            break;          }        }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,KeyInterpreter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PreProcessWmKeyDown,The following switch statement is missing a default case: switch (keyData)          {            case Keys.Left:            case Keys.Up:            case Keys.Right:            case Keys.Down:            case Keys.PageUp:            case Keys.PageDown:            case Keys.Left | Keys.Shift:            case Keys.Up | Keys.Shift:            case Keys.Right | Keys.Shift:            case Keys.Down | Keys.Shift:            case Keys.Tab:            case Keys.Back:            case Keys.Delete:            case Keys.Home:            case Keys.End:            case Keys.ShiftKey | Keys.Shift:            case Keys.C | Keys.Control:            case Keys.X | Keys.Control:            case Keys.V | Keys.Control:              if (RaiseKeyDown(keyData))              {                return true;              }              break;          }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,KeyInterpreter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PreProcessWmKeyUp,The following switch statement is missing a default case: switch (keyData)          {            case Keys.ShiftKey:            case Keys.Insert:              if (RaiseKeyUp(keyData))              {                return true;              }              break;          }
Missing Default,Fomm.Games.Fallout3.Tools.TESsnip.HexBox,StringKeyInterpreter,C:\repos\niveuseverto_fomm\flmm\Games\Fallout3\Tools\TESsnip\HexBox\HexBox.cs,PreProcessWmKeyDown,The following switch statement is missing a default case: switch (keyData)          {            case Keys.Tab | Keys.Shift:            case Keys.Tab:              if (RaiseKeyDown(keyData))              {                return true;              }              break;          }
Missing Default,Fomm.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\DeflaterEngine.cs,SetLevel,The following switch statement is missing a default case: switch (compressionFunction)          {            case DeflaterConstants.DEFLATE_STORED:              if (strstart > blockStart)              {                huffman.FlushStoredBlock(window' blockStart'                                         strstart - blockStart' false);                blockStart = strstart;              }              UpdateHash();              break;              case DeflaterConstants.DEFLATE_FAST:              if (strstart > blockStart)              {                huffman.FlushBlock(window' blockStart' strstart - blockStart'                                   false);                blockStart = strstart;              }              break;              case DeflaterConstants.DEFLATE_SLOW:              if (prevAvailable)              {                huffman.TallyLit(window[strstart - 1] & 0xff);              }              if (strstart > blockStart)              {                huffman.FlushBlock(window' blockStart' strstart - blockStart' false);                blockStart = strstart;              }              prevAvailable = false;              matchLen = DeflaterConstants.MIN_MATCH - 1;              break;          }
Missing Default,Fomm.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following switch statement is missing a default case: switch (mode)          {            case LNUM:              lnum = input.PeekBits(5);              if (lnum < 0)              {                return false;              }              lnum += 257;              input.DropBits(5);              //        System.err.println("LNUM: "+lnum);              mode = DNUM;              goto case DNUM; // fall through            case DNUM:              dnum = input.PeekBits(5);              if (dnum < 0)              {                return false;              }              dnum++;              input.DropBits(5);              //        System.err.println("DNUM: "+dnum);              num = lnum + dnum;              litdistLens = new byte[num];              mode = BLNUM;              goto case BLNUM; // fall through            case BLNUM:              blnum = input.PeekBits(4);              if (blnum < 0)              {                return false;              }              blnum += 4;              input.DropBits(4);              blLens = new byte[19];              ptr = 0;              //        System.err.println("BLNUM: "+blnum);              mode = BLLENS;              goto case BLLENS; // fall through            case BLLENS:              while (ptr < blnum)              {                var len = input.PeekBits(3);                if (len < 0)                {                  return false;                }                input.DropBits(3);                //      System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                blLens[BL_ORDER[ptr]] = (byte) len;                ptr++;              }              blTree = new InflaterHuffmanTree(blLens);              blLens = null;              ptr = 0;              mode = LENS;              goto case LENS; // fall through            case LENS:            {              int symbol;              while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)              {                /* Normal case: symbol in [0..15] */                  //        System.err.println("litdistLens["+ptr+"]: "+symbol);                litdistLens[ptr++] = lastLen = (byte) symbol;                  if (ptr == num)                {                  /* Finished */                  return true;                }              }                /* need more input ? */              if (symbol < 0)              {                return false;              }                /* otherwise repeat code */              if (symbol >= 17)              {                /* repeat zero */                //        System.err.println("repeating zero");                lastLen = 0;              }              else              {                if (ptr == 0)                {                  throw new SharpZipBaseException();                }              }              repSymbol = symbol - 16;            }              mode = REPS;              goto case REPS; // fall through            case REPS:            {              var bits = repBits[repSymbol];              var count = input.PeekBits(bits);              if (count < 0)              {                return false;              }              input.DropBits(bits);              count += repMin[repSymbol];              //          System.err.println("litdistLens repeated: "+count);                if (ptr + count > num)              {                throw new SharpZipBaseException();              }              while (count-- > 0)              {                litdistLens[ptr++] = lastLen;              }                if (ptr == num)              {                /* Finished */                return true;              }            }              mode = LENS;              goto decode_loop;          }
Missing Default,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,WriteLocalEntryHeader,The following switch statement is missing a default case: switch (useZip64_)          {            case UseZip64.Dynamic:              if (entry.Size < 0)              {                entry.ForceZip64();              }              break;              case UseZip64.On:              entry.ForceZip64();              break;              case UseZip64.Off:              // Do nothing.  The entry itself may be using Zip64 independantly.              break;          }
Missing Default,Fomm.SharpZipLib.Zip,ZipFile,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,RunUpdates,The following switch statement is missing a default case: switch (update.Command)              {                case UpdateCommand.Copy:                  if (directUpdate)                  {                    CopyEntryDirect(workFile' update' ref destinationPosition);                  }                  else                  {                    CopyEntry(workFile' update);                  }                  break;                  case UpdateCommand.Modify:                  // TODO: Direct modifying of an entry will take some legwork.                  ModifyEntry(workFile' update);                  break;                  case UpdateCommand.Add:                  if (!IsNewArchive && directUpdate)                  {                    workFile.baseStream_.Position = destinationPosition;                  }                    AddEntry(workFile' update);                    if (directUpdate)                  {                    destinationPosition = workFile.baseStream_.Position;                  }                  break;              }
Missing Default,Fomm.SharpZipLib.Zip,PartialInputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipFile.cs,Seek,The following switch statement is missing a default case: switch (origin)          {            case SeekOrigin.Begin:              newPos = start_ + offset;              break;              case SeekOrigin.Current:              newPos = readPos_ + offset;              break;              case SeekOrigin.End:              newPos = end_ + offset;              break;          }
Missing Default,Fomm.SharpZipLib.Zip,ZipOutputStream,C:\repos\niveuseverto_fomm\flmm\SharpZipLib\Zip\ZipOutputStream.cs,Write,The following switch statement is missing a default case: switch (curMethod)        {          case CompressionMethod.Deflated:            base.Write(buffer' offset' count);            break;            case CompressionMethod.Stored:            baseOutputStream_.Write(buffer' offset' count);            break;        }
