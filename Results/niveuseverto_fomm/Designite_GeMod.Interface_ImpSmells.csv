Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,GeMod.Interface,ModInfo,C:\repos\niveuseverto_fomm\GeMod.Interface\ModInfo.cs,ModInfo,The method has 5 parameters. Parameters: p_strName' p_strAuthor' p_strVersion' p_uriURL' p_sstScreenshot
Long Statement,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,Equals,The length of the statement  "      return this._Prefix == other._Prefix && this._Major == other._Major && this._Minor == other._Minor && this._Patch == other._Patch && this._Suffix == other._Suffix; " is 163.
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,SanitizeVersionString,The following statement contains a magic number: if (rxPreMatch.Success)        {          result = string.Format("1.0-{0}.{1}"' rxPreMatch.Groups[1].Value' rxPreMatch.Groups[2].Value);        }        else if (result.StartsWith("alpha"))        {          result = string.Format("{0}{1}"' result.Substring(5' result.Length - 5)' "a");        }        else if (result.StartsWith("beta"))        {          result = string.Format("{0}{1}"' result.Substring(4' result.Length - 4)' "b");        }        else if (result.StartsWith("rc"))        {          result = string.Format("{0}{1}"' result.Substring(2' result.Length - 2)' "rc");        }        else        {          result = result.Replace("point"' ".");        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,SanitizeVersionString,The following statement contains a magic number: if (rxPreMatch.Success)        {          result = string.Format("1.0-{0}.{1}"' rxPreMatch.Groups[1].Value' rxPreMatch.Groups[2].Value);        }        else if (result.StartsWith("alpha"))        {          result = string.Format("{0}{1}"' result.Substring(5' result.Length - 5)' "a");        }        else if (result.StartsWith("beta"))        {          result = string.Format("{0}{1}"' result.Substring(4' result.Length - 4)' "b");        }        else if (result.StartsWith("rc"))        {          result = string.Format("{0}{1}"' result.Substring(2' result.Length - 2)' "rc");        }        else        {          result = result.Replace("point"' ".");        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,SanitizeVersionString,The following statement contains a magic number: if (rxPreMatch.Success)        {          result = string.Format("1.0-{0}.{1}"' rxPreMatch.Groups[1].Value' rxPreMatch.Groups[2].Value);        }        else if (result.StartsWith("alpha"))        {          result = string.Format("{0}{1}"' result.Substring(5' result.Length - 5)' "a");        }        else if (result.StartsWith("beta"))        {          result = string.Format("{0}{1}"' result.Substring(4' result.Length - 4)' "b");        }        else if (result.StartsWith("rc"))        {          result = string.Format("{0}{1}"' result.Substring(2' result.Length - 2)' "rc");        }        else        {          result = result.Replace("point"' ".");        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,SanitizeVersionString,The following statement contains a magic number: if (rxPreMatch.Success)        {          result = string.Format("1.0-{0}.{1}"' rxPreMatch.Groups[1].Value' rxPreMatch.Groups[2].Value);        }        else if (result.StartsWith("alpha"))        {          result = string.Format("{0}{1}"' result.Substring(5' result.Length - 5)' "a");        }        else if (result.StartsWith("beta"))        {          result = string.Format("{0}{1}"' result.Substring(4' result.Length - 4)' "b");        }        else if (result.StartsWith("rc"))        {          result = string.Format("{0}{1}"' result.Substring(2' result.Length - 2)' "rc");        }        else        {          result = result.Replace("point"' ".");        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,SanitizeVersionString,The following statement contains a magic number: if (rxPreMatch.Success)        {          result = string.Format("1.0-{0}.{1}"' rxPreMatch.Groups[1].Value' rxPreMatch.Groups[2].Value);        }        else if (result.StartsWith("alpha"))        {          result = string.Format("{0}{1}"' result.Substring(5' result.Length - 5)' "a");        }        else if (result.StartsWith("beta"))        {          result = string.Format("{0}{1}"' result.Substring(4' result.Length - 4)' "b");        }        else if (result.StartsWith("rc"))        {          result = string.Format("{0}{1}"' result.Substring(2' result.Length - 2)' "rc");        }        else        {          result = result.Replace("point"' ".");        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,SanitizeVersionString,The following statement contains a magic number: if (rxPreMatch.Success)        {          result = string.Format("1.0-{0}.{1}"' rxPreMatch.Groups[1].Value' rxPreMatch.Groups[2].Value);        }        else if (result.StartsWith("alpha"))        {          result = string.Format("{0}{1}"' result.Substring(5' result.Length - 5)' "a");        }        else if (result.StartsWith("beta"))        {          result = string.Format("{0}{1}"' result.Substring(4' result.Length - 4)' "b");        }        else if (result.StartsWith("rc"))        {          result = string.Format("{0}{1}"' result.Substring(2' result.Length - 2)' "rc");        }        else        {          result = result.Replace("point"' ".");        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,SanitizeVersionString,The following statement contains a magic number: if (rxPreMatch.Success)        {          result = string.Format("1.0-{0}.{1}"' rxPreMatch.Groups[1].Value' rxPreMatch.Groups[2].Value);        }        else if (result.StartsWith("alpha"))        {          result = string.Format("{0}{1}"' result.Substring(5' result.Length - 5)' "a");        }        else if (result.StartsWith("beta"))        {          result = string.Format("{0}{1}"' result.Substring(4' result.Length - 4)' "b");        }        else if (result.StartsWith("rc"))        {          result = string.Format("{0}{1}"' result.Substring(2' result.Length - 2)' "rc");        }        else        {          result = result.Replace("point"' ".");        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,ExtractSuffix,The following statement contains a magic number: if (input.Contains("-"))        {          string[] parts = input.Split('-');          suffix = parts[1];          result = parts[0];        }        else if (input.EndsWith("alpha"))        {          suffix = "alpha";          result = input.Substring(0' input.Length - 5);        }        else if (input.EndsWith("beta"))        {          suffix = "beta";          result = input.Substring(0' input.Length - 4);        }        else if (input.EndsWith("rc"))        {          suffix = "rc";          result = input.Substring(0' input.Length - 2);        }        else if (input.EndsWith("a"))        {          suffix = "alpha";          result = input.Substring(0' input.Length - 1);        }        else if (input.EndsWith("b"))        {          suffix = "beta";          result = input.Substring(0' input.Length - 1);        }        else        {          Match rxMatch = Regex.Match(input' @"([a-z]+)$");          if (rxMatch.Success)          {            suffix = rxMatch.Groups[0].Value;            result = input.Substring(0' input.Length - suffix.Length);          }        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,ExtractSuffix,The following statement contains a magic number: if (input.Contains("-"))        {          string[] parts = input.Split('-');          suffix = parts[1];          result = parts[0];        }        else if (input.EndsWith("alpha"))        {          suffix = "alpha";          result = input.Substring(0' input.Length - 5);        }        else if (input.EndsWith("beta"))        {          suffix = "beta";          result = input.Substring(0' input.Length - 4);        }        else if (input.EndsWith("rc"))        {          suffix = "rc";          result = input.Substring(0' input.Length - 2);        }        else if (input.EndsWith("a"))        {          suffix = "alpha";          result = input.Substring(0' input.Length - 1);        }        else if (input.EndsWith("b"))        {          suffix = "beta";          result = input.Substring(0' input.Length - 1);        }        else        {          Match rxMatch = Regex.Match(input' @"([a-z]+)$");          if (rxMatch.Success)          {            suffix = rxMatch.Groups[0].Value;            result = input.Substring(0' input.Length - suffix.Length);          }        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,ExtractSuffix,The following statement contains a magic number: if (input.Contains("-"))        {          string[] parts = input.Split('-');          suffix = parts[1];          result = parts[0];        }        else if (input.EndsWith("alpha"))        {          suffix = "alpha";          result = input.Substring(0' input.Length - 5);        }        else if (input.EndsWith("beta"))        {          suffix = "beta";          result = input.Substring(0' input.Length - 4);        }        else if (input.EndsWith("rc"))        {          suffix = "rc";          result = input.Substring(0' input.Length - 2);        }        else if (input.EndsWith("a"))        {          suffix = "alpha";          result = input.Substring(0' input.Length - 1);        }        else if (input.EndsWith("b"))        {          suffix = "beta";          result = input.Substring(0' input.Length - 1);        }        else        {          Match rxMatch = Regex.Match(input' @"([a-z]+)$");          if (rxMatch.Success)          {            suffix = rxMatch.Groups[0].Value;            result = input.Substring(0' input.Length - suffix.Length);          }        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,Parse,The following statement contains a magic number: if (parts.Length >= 2 && !int.TryParse(parts[1]' out version._Minor))        {          version._Minor = 0;        }        else if (parts.Length < 2)        {          version._Minor = -1;        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,Parse,The following statement contains a magic number: if (parts.Length >= 2 && !int.TryParse(parts[1]' out version._Minor))        {          version._Minor = 0;        }        else if (parts.Length < 2)        {          version._Minor = -1;        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,Parse,The following statement contains a magic number: if (parts.Length >= 3 && !int.TryParse(parts[2]' out version._Patch))        {          version._Patch = -1;        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,Parse,The following statement contains a magic number: if (parts.Length >= 3 && !int.TryParse(parts[2]' out version._Patch))        {          version._Patch = -1;        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,CompareTo,The following statement contains a magic number: if (this._Major != value._Major)        {          return (this._Major > value._Major) ? 1 : -1;        }        else        {          if (this._Minor != value._Minor)          {            return (this._Minor > value._Minor) ? 1 : -1;          }          else          {            if (this._Patch != value._Patch)            {              return (this._Patch > value._Patch) ? 1 : -1;            }            else            {              if (!value._Suffix.Contains("."))                value._Suffix += ".1";              if (!this._Suffix.Contains("."))                value._Suffix += ".1";                string[] thisSuffixParts = this._Suffix.Split('.');              string[] valueSuffixParts = value._Suffix.Split('.');                if (thisSuffixParts[0] != valueSuffixParts[0])              {                Dictionary<string' int> dict = new Dictionary<string' int>{  								{"alpha"' 1}'  								{"beta"' 2}'  								{"rc"' 3}  							};                  if (dict.ContainsKey(thisSuffixParts[0]) && dict.ContainsKey(valueSuffixParts[0]))                  return (dict[thisSuffixParts[0]] > dict[valueSuffixParts[0]]) ? 1 : -1;                if (dict.ContainsKey(thisSuffixParts[0]) && !dict.ContainsKey(valueSuffixParts[0]))                  return -1;                if (!dict.ContainsKey(thisSuffixParts[0]) && dict.ContainsKey(valueSuffixParts[0]))                  return 1;                return string.CompareOrdinal(thisSuffixParts[0]' valueSuffixParts[0]);              }              else              {                return (int.Parse(thisSuffixParts[1]) > int.Parse(valueSuffixParts[1])) ? 1 : -1;              }            }          }        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,CompareTo,The following statement contains a magic number: if (this._Major != value._Major)        {          return (this._Major > value._Major) ? 1 : -1;        }        else        {          if (this._Minor != value._Minor)          {            return (this._Minor > value._Minor) ? 1 : -1;          }          else          {            if (this._Patch != value._Patch)            {              return (this._Patch > value._Patch) ? 1 : -1;            }            else            {              if (!value._Suffix.Contains("."))                value._Suffix += ".1";              if (!this._Suffix.Contains("."))                value._Suffix += ".1";                string[] thisSuffixParts = this._Suffix.Split('.');              string[] valueSuffixParts = value._Suffix.Split('.');                if (thisSuffixParts[0] != valueSuffixParts[0])              {                Dictionary<string' int> dict = new Dictionary<string' int>{  								{"alpha"' 1}'  								{"beta"' 2}'  								{"rc"' 3}  							};                  if (dict.ContainsKey(thisSuffixParts[0]) && dict.ContainsKey(valueSuffixParts[0]))                  return (dict[thisSuffixParts[0]] > dict[valueSuffixParts[0]]) ? 1 : -1;                if (dict.ContainsKey(thisSuffixParts[0]) && !dict.ContainsKey(valueSuffixParts[0]))                  return -1;                if (!dict.ContainsKey(thisSuffixParts[0]) && dict.ContainsKey(valueSuffixParts[0]))                  return 1;                return string.CompareOrdinal(thisSuffixParts[0]' valueSuffixParts[0]);              }              else              {                return (int.Parse(thisSuffixParts[1]) > int.Parse(valueSuffixParts[1])) ? 1 : -1;              }            }          }        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,GetHashCode,The following statement contains a magic number: unchecked        {          if (_Prefix != null)            hashCode += 1000000007 * _Prefix.GetHashCode();          hashCode += 1000000009 * _Major.GetHashCode();          hashCode += 1000000021 * _Minor.GetHashCode();          hashCode += 1000000033 * _Patch.GetHashCode();          if (_Suffix != null)            hashCode += 1000000087 * _Suffix.GetHashCode();        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,GetHashCode,The following statement contains a magic number: unchecked        {          if (_Prefix != null)            hashCode += 1000000007 * _Prefix.GetHashCode();          hashCode += 1000000009 * _Major.GetHashCode();          hashCode += 1000000021 * _Minor.GetHashCode();          hashCode += 1000000033 * _Patch.GetHashCode();          if (_Suffix != null)            hashCode += 1000000087 * _Suffix.GetHashCode();        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,GetHashCode,The following statement contains a magic number: unchecked        {          if (_Prefix != null)            hashCode += 1000000007 * _Prefix.GetHashCode();          hashCode += 1000000009 * _Major.GetHashCode();          hashCode += 1000000021 * _Minor.GetHashCode();          hashCode += 1000000033 * _Patch.GetHashCode();          if (_Suffix != null)            hashCode += 1000000087 * _Suffix.GetHashCode();        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,GetHashCode,The following statement contains a magic number: unchecked        {          if (_Prefix != null)            hashCode += 1000000007 * _Prefix.GetHashCode();          hashCode += 1000000009 * _Major.GetHashCode();          hashCode += 1000000021 * _Minor.GetHashCode();          hashCode += 1000000033 * _Patch.GetHashCode();          if (_Suffix != null)            hashCode += 1000000087 * _Suffix.GetHashCode();        }
Magic Number,GeMod.Interface,ModVersion,C:\repos\niveuseverto_fomm\GeMod.Interface\ModVersion.cs,GetHashCode,The following statement contains a magic number: unchecked        {          if (_Prefix != null)            hashCode += 1000000007 * _Prefix.GetHashCode();          hashCode += 1000000009 * _Major.GetHashCode();          hashCode += 1000000021 * _Minor.GetHashCode();          hashCode += 1000000033 * _Patch.GetHashCode();          if (_Suffix != null)            hashCode += 1000000087 * _Suffix.GetHashCode();        }
