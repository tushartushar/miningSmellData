Implementation smell,Namespace,Class,File,Method,Description
Long Method,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The method has 902 lines of code.
Long Method,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,SetState,The method has 127 lines of code.
Long Method,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleReply,The method has 103 lines of code.
Long Method,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The method has 1253 lines of code.
Long Method,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The method has 238 lines of code.
Complex Method,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,ListenerHandler,Cyclomatic complexity of the method is 11
Complex Method,hobd,SensorStorage,F:\newReposMay17\cail_hobd\src\elm\SensorStorage.cs,Attach,Cyclomatic complexity of the method is 9
Complex Method,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,LoadConfig,Cyclomatic complexity of the method is 24
Complex Method,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,SetState,Cyclomatic complexity of the method is 60
Complex Method,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleReply,Cyclomatic complexity of the method is 44
Complex Method,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleState,Cyclomatic complexity of the method is 13
Complex Method,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,Cyclomatic complexity of the method is 108
Complex Method,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Open,Cyclomatic complexity of the method is 9
Complex Method,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,Open,Cyclomatic complexity of the method is 28
Complex Method,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Open,Cyclomatic complexity of the method is 29
Complex Method,hobd,Logger,F:\newReposMay17\cail_hobd\src\util\Logger.cs,log,Cyclomatic complexity of the method is 8
Complex Method,hobd,NetworkHelper,F:\newReposMay17\cail_hobd\src\NetworkHelper.cs,SendPost,Cyclomatic complexity of the method is 8
Long Parameter List,hobd,DerivedSensor,F:\newReposMay17\cail_hobd\src\elm\common\DerivedSensor.cs,DerivedSensor,The method has 5 parameters.
Long Parameter List,hobd,DerivedSensor,F:\newReposMay17\cail_hobd\src\elm\common\DerivedSensor.cs,DerivedSensor,The method has 6 parameters.
Long Parameter List,hobd,NetworkDataManager,F:\newReposMay17\cail_hobd\src\NetworkDataManager.cs,CreateNew,The method has 5 parameters.
Long Statement,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,TriggerListeners,The length of the statement  "		Logger.dump ("SensorRegistry"' "TriggerListeners " + sensor.ID + "=" + sensor.Value + " listeners:" + sl.listeners.Count + " nr=" + (sl.nextReading - DateTimeMs.Now)); " is 167.
Long Statement,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,TriggerSuspend,The length of the statement  "	// we should wait until notify queue is empty' because otherwise some sensors may receive events after they get into suspend. " is 125.
Long Statement,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,Attach,The length of the statement  "		Logger.trace ("SensorTrack"' "attach " + set.id + " period " + set.period + " length " + set.length + " gap " + set.gap); " is 121.
Long Statement,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,StoreSensor,The length of the statement  "	if (sensor is IAccumulatorSensor && set.history_t.Count > 0 && set.history_v [set.history_t.Count - 1] <= sensor.Value) { " is 121.
Long Statement,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,SetValue,The length of the statement  "	while (data_offset < dataraw.Length - 1 && !(dataraw [data_offset] == 0x41 && dataraw [data_offset + 1] == this.Command)) { " is 123.
Long Statement,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Open,The length of the statement  "		Logger.trace ("BluetoothStream"' "Open " + parsed_url [URL_ADDR] + " serviceid " + parsed_url [URL_SVC] + " pin " + parsed_url [URL_PIN]); " is 138.
Long Statement,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,ParseUrl,The length of the statement  "	Regex rx = new Regex (@"^([^;]+) (\;baud=(\d+))? (\;parity=(none|odd|even|mark|space))? (\;handshake=(none|x|rts|xrts))? $"' RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace); " is 189.
Long Statement,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,ParseUrl,The length of the statement  "	Regex rx = new Regex (@"^([^;]+) (\;baud=(\d+))? (\;parity=(none|odd|even|mark|space))? (\;handshake=(none|x|rts|xrts))? $"' RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace); " is 189.
Long Statement,hobd,Logger,F:\newReposMay17\cail_hobd\src\util\Logger.cs,log,The length of the statement  "	var ts = nowms.ToShortDateString ().PadLeft (10) + " " + nowms.ToLongTimeString ().PadLeft (8) + "." + nowms.Millisecond.ToString ().PadLeft (3' '0'); " is 150.
Long Statement,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,ConvertUnits,The length of the statement  "	var result = conversions.Keys.Where (k => k.StartsWith (fromUnits + "-")).Select (u2 => u2.Substring (u2.IndexOf ("-") + 1)).Where (u2 => UnitTypesRaw [Units].Contains (u2)).FirstOrDefault (); " is 192.
Long Statement,hobd.elm.load,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\load\LitersPerHourSensor.cs,SetRegistry,The length of the statement  "		this.engine_load_coeff = double.Parse (registry.VehicleParameters ["engine-load-coeff"]' UnitsConverter.DefaultNumberFormat); " is 125.
Long Statement,hobd.elm.load,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\load\LitersPerHourSensor.cs,OnSensorChange,The length of the statement  "	var coeff = rpm_matrix [lowidx] + (rpm_matrix [nextidx] - rpm_matrix [lowidx]) * (rpm.Value - lowidx * rpm_step) / rpm_step; " is 124.
Complex Conditional,hobd,DerivedSensor,F:\newReposMay17\cail_hobd\src\elm\common\DerivedSensor.cs,OnSensorChange,The conditional expression  "(triggerA && s == this.a) || (triggerB && s == this.b)"  is complex.
Complex Conditional,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,TriggerListeners,The conditional expression  "sl != null && triggerQueue != null && (sl.nextReading == 0 || sl.nextReading <= DateTimeMs.Now)"  is complex.
Complex Conditional,hobd,SensorStorage,F:\newReposMay17\cail_hobd\src\elm\SensorStorage.cs,Attach,The conditional expression  "sname == "DistanceRun" || sname == "FuelConsumed" || sname == "TripTime" || sname == "IdleTime""  is complex.
Empty Catch Block,hobd,IdleTime,F:\newReposMay17\cail_hobd\src\elm\common\IdleTime.cs,SetRegistry,The method has an empty catch block.
Empty Catch Block,hobd,SensorStorage,F:\newReposMay17\cail_hobd\src\elm\SensorStorage.cs,Cleanup,The method has an empty catch block.
Empty Catch Block,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,LoadConfig,The method has an empty catch block.
Empty Catch Block,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,Write,The method has an empty catch block.
Empty Catch Block,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Open,The method has an empty catch block.
Empty Catch Block,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Close,The method has an empty catch block.
Empty Catch Block,hobd,Logger,F:\newReposMay17\cail_hobd\src\util\Logger.cs,Init,The method has an empty catch block.
Empty Catch Block,hobd,Logger,F:\newReposMay17\cail_hobd\src\util\Logger.cs,log,The method has an empty catch block.
Empty Catch Block,hobd,Logger,F:\newReposMay17\cail_hobd\src\util\Logger.cs,log,The method has an empty catch block.
Empty Catch Block,hobd,TCPStream,F:\newReposMay17\cail_hobd\src\stream\TCPStream.cs,Open,The method has an empty catch block.
Empty Catch Block,hobd,TCPStream,F:\newReposMay17\cail_hobd\src\stream\TCPStream.cs,Write,The method has an empty catch block.
Empty Catch Block,hobd.elm.injector,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\injector\LitersPerHourSensor.cs,SetRegistry,The method has an empty catch block.
Empty Catch Block,hobd.elm.injector,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\injector\LitersPerHourSensor.cs,SetRegistry,The method has an empty catch block.
Magic Number,hobd,DistanceSensor,F:\newReposMay17\cail_hobd\src\elm\common\DistanceSensor.cs,DistanceSensor,The following statement contains a magic number: ListenInterval = 5000;  
Magic Number,hobd,DistanceSensor,F:\newReposMay17\cail_hobd\src\elm\common\DistanceSensor.cs,OnSpeedChange,The following statement contains a magic number: Value += speed.Value * 1000 / 3600 * ((double)(TimeStamp - PrevStamp)) / 1000 / 1000;  
Magic Number,hobd,DistanceSensor,F:\newReposMay17\cail_hobd\src\elm\common\DistanceSensor.cs,OnSpeedChange,The following statement contains a magic number: Value += speed.Value * 1000 / 3600 * ((double)(TimeStamp - PrevStamp)) / 1000 / 1000;  
Magic Number,hobd,DistanceSensor,F:\newReposMay17\cail_hobd\src\elm\common\DistanceSensor.cs,OnSpeedChange,The following statement contains a magic number: Value += speed.Value * 1000 / 3600 * ((double)(TimeStamp - PrevStamp)) / 1000 / 1000;  
Magic Number,hobd,DistanceSensor,F:\newReposMay17\cail_hobd\src\elm\common\DistanceSensor.cs,OnSpeedChange,The following statement contains a magic number: Value += speed.Value * 1000 / 3600 * ((double)(TimeStamp - PrevStamp)) / 1000 / 1000;  
Magic Number,hobd,GSensor,F:\newReposMay17\cail_hobd\src\elm\common\GSensor.cs,OnSpeedChange,The following statement contains a magic number: Value = (speed.Value - prevValue) * 1000 / 3600 / ((double)(TimeStamp - prevStamp)) * 1000;  
Magic Number,hobd,GSensor,F:\newReposMay17\cail_hobd\src\elm\common\GSensor.cs,OnSpeedChange,The following statement contains a magic number: Value = (speed.Value - prevValue) * 1000 / 3600 / ((double)(TimeStamp - prevStamp)) * 1000;  
Magic Number,hobd,GSensor,F:\newReposMay17\cail_hobd\src\elm\common\GSensor.cs,OnSpeedChange,The following statement contains a magic number: Value = (speed.Value - prevValue) * 1000 / 3600 / ((double)(TimeStamp - prevStamp)) * 1000;  
Magic Number,hobd,FuelConsumedSensor,F:\newReposMay17\cail_hobd\src\elm\common\FuelConsumedSensor.cs,FuelConsumedSensor,The following statement contains a magic number: ListenInterval = 2000;  
Magic Number,hobd,FuelConsumedSensor,F:\newReposMay17\cail_hobd\src\elm\common\FuelConsumedSensor.cs,OnChange,The following statement contains a magic number: Value += lph.Value / 3600 * ((double)(TimeStamp - PrevStamp)) / 1000;  
Magic Number,hobd,FuelConsumedSensor,F:\newReposMay17\cail_hobd\src\elm\common\FuelConsumedSensor.cs,OnChange,The following statement contains a magic number: Value += lph.Value / 3600 * ((double)(TimeStamp - PrevStamp)) / 1000;  
Magic Number,hobd,FuelEconomyTripSensor,F:\newReposMay17\cail_hobd\src\elm\common\FuelEconomyTripSensor.cs,FEValue,The following statement contains a magic number: if (distance.Value <= 0 || fuel.Value <= 0) {  	return Double.PositiveInfinity;  } else {  	return fuel.Value * 100 / distance.Value;  }  
Magic Number,hobd,FuelEconomyTripSensor,F:\newReposMay17\cail_hobd\src\elm\common\FuelEconomyTripSensor.cs,FEValue,The following statement contains a magic number: return fuel.Value * 100 / distance.Value;  
Magic Number,hobd,IdleTime,F:\newReposMay17\cail_hobd\src\elm\common\IdleTime.cs,IdleTime,The following statement contains a magic number: ListenInterval = 2000;  
Magic Number,hobd,IdleTime,F:\newReposMay17\cail_hobd\src\elm\common\IdleTime.cs,IdleTime,The following statement contains a magic number: IdleSpeed = 5;  
Magic Number,hobd,TripTime,F:\newReposMay17\cail_hobd\src\elm\common\TripTime.cs,TripTime,The following statement contains a magic number: ListenInterval = 2000;  
Magic Number,hobd,DistanceCostSensor,F:\newReposMay17\cail_hobd\src\elm\common\DistanceCostSensor.cs,DistanceCostSensor,The following statement contains a magic number: this.Interval = 10000;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelSystemStatus"'  	Name = "FuelSystemStatus"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return ((int)get (0) << 8) + (p.len () > 1 ? get (1) : 0);  	}'  	Command = 0x03'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return ((int)get (0) << 8) + (p.len () > 1 ? get (1) : 0);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.EngineLoad"'  	Name = "EngineLoad"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0) * 100 / 255;  	}'  	Command = 0x04'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.EngineLoad"'  	Name = "EngineLoad"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0) * 100 / 255;  	}'  	Command = 0x04'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0) * 100 / 255;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0) * 100 / 255;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.CoolantTemp"'  	Name = "CoolantTemp"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0) - 40;  	}'  	Command = 0x05'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0) - 40;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.STFT1"'  	Name = "STFT1"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x06'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.STFT1"'  	Name = "STFT1"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x06'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.STFT1"'  	Name = "STFT1"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x06'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.LTFT1"'  	Name = "LTFT1"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x07'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.LTFT1"'  	Name = "LTFT1"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x07'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.LTFT1"'  	Name = "LTFT1"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x07'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.STFT2"'  	Name = "STFT2"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x08'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.STFT2"'  	Name = "STFT2"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x08'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.STFT2"'  	Name = "STFT2"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x08'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.LTFT2"'  	Name = "LTFT2"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x09'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.LTFT2"'  	Name = "LTFT2"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x09'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.LTFT2"'  	Name = "LTFT2"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x09'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelPressure"'  	Name = "FuelPressure"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0) * 3;  	}'  	Command = 0x0A'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0) * 3;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.RPM"'  	Name = "RPM"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) * 256 + get (1)) / 4;  	}'  	Command = 0x0C'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.RPM"'  	Name = "RPM"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) * 256 + get (1)) / 4;  	}'  	Command = 0x0C'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) * 256 + get (1)) / 4;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) * 256 + get (1)) / 4;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.TimingAdvance"'  	Name = "TimingAdvance"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0x00) / 2 - 64;  	}'  	Command = 0x0E'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.TimingAdvance"'  	Name = "TimingAdvance"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0x00) / 2 - 64;  	}'  	Command = 0x0E'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0x00) / 2 - 64;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0x00) / 2 - 64;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.IntakeAirTemp"'  	Name = "IntakeAirTemp"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0x00) - 40;  	}'  	Command = 0x0F'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0x00) - 40;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.MAF"'  	Name = "MAF"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return ((get (0) * 256) + get (1)) / 100;  	}'  	Command = 0x10'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.MAF"'  	Name = "MAF"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return ((get (0) * 256) + get (1)) / 100;  	}'  	Command = 0x10'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return ((get (0) * 256) + get (1)) / 100;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return ((get (0) * 256) + get (1)) / 100;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.ThrottlePosition"'  	Name = "ThrottlePosition"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0) * 100 / 255;  	}'  	Command = 0x11'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.ThrottlePosition"'  	Name = "ThrottlePosition"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0) * 100 / 255;  	}'  	Command = 0x11'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0) * 100 / 255;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0) * 100 / 255;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s1"'  	Name = "Oxygen_b1s1"'  	obdValue = p => {  		return p.get (0) * 0.005;  	}'  	Command = 0x14'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 0.005;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s1_stft"'  	Name = "Oxygen_b1s1_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x14'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s1_stft"'  	Name = "Oxygen_b1s1_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x14'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s1_stft"'  	Name = "Oxygen_b1s1_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x14'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s2"'  	Name = "Oxygen_b1s2"'  	obdValue = p => {  		return p.get (0) * 0.005;  	}'  	Command = 0x15'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 0.005;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s2_stft"'  	Name = "Oxygen_b1s2_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x15'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s2_stft"'  	Name = "Oxygen_b1s2_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x15'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s2_stft"'  	Name = "Oxygen_b1s2_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x15'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s3"'  	Name = "Oxygen_b1s3"'  	obdValue = p => {  		return p.get (0) * 0.005;  	}'  	Command = 0x16'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 0.005;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s3_stft"'  	Name = "Oxygen_b1s3_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x16'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s3_stft"'  	Name = "Oxygen_b1s3_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x16'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s3_stft"'  	Name = "Oxygen_b1s3_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x16'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s4"'  	Name = "Oxygen_b1s4"'  	obdValue = p => {  		return p.get (0) * 0.005;  	}'  	Command = 0x17'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 0.005;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s4_stft"'  	Name = "Oxygen_b1s4_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x17'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s4_stft"'  	Name = "Oxygen_b1s4_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x17'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b1s4_stft"'  	Name = "Oxygen_b1s4_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x17'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s1"'  	Name = "Oxygen_b2s1"'  	obdValue = p => {  		return p.get (0) * 0.005;  	}'  	Command = 0x18'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 0.005;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s1_stft"'  	Name = "Oxygen_b2s1_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x18'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s1_stft"'  	Name = "Oxygen_b2s1_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x18'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s1_stft"'  	Name = "Oxygen_b2s1_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x18'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s2"'  	Name = "Oxygen_b2s2"'  	obdValue = p => {  		return p.get (0) * 0.005;  	}'  	Command = 0x19'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 0.005;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s2_stft"'  	Name = "Oxygen_b2s2_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x19'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s2_stft"'  	Name = "Oxygen_b2s2_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x19'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s2_stft"'  	Name = "Oxygen_b2s2_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x19'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s3"'  	Name = "Oxygen_b2s3"'  	obdValue = p => {  		return p.get (0) * 0.005;  	}'  	Command = 0x1a'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 0.005;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s3_stft"'  	Name = "Oxygen_b2s3_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x1a'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s3_stft"'  	Name = "Oxygen_b2s3_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x1a'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s3_stft"'  	Name = "Oxygen_b2s3_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x1a'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s4"'  	Name = "Oxygen_b2s4"'  	obdValue = p => {  		return p.get (0) * 0.005;  	}'  	Command = 0x1b'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 0.005;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s4_stft"'  	Name = "Oxygen_b2s4_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x1b'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s4_stft"'  	Name = "Oxygen_b2s4_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x1b'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen_b2s4_stft"'  	Name = "Oxygen_b2s4_stft"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (1) - 128) * 100 / 128;  	}'  	Command = 0x1b'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (1) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b1s1"'  	Name = "Lambda_b1s1"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x24'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b1s1"'  	Name = "Lambda_b1s1"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x24'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b1s1"'  	Name = "Oxygen2_b1s1"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x24'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b1s1"'  	Name = "Oxygen2_b1s1"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x24'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b1s2"'  	Name = "Lambda_b1s2"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x25'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b1s2"'  	Name = "Lambda_b1s2"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x25'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b1s2"'  	Name = "Oxygen2_b1s2"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x25'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b1s2"'  	Name = "Oxygen2_b1s2"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x25'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b2s1"'  	Name = "Lambda_b2s1"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x26'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b2s1"'  	Name = "Lambda_b2s1"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x26'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b2s1"'  	Name = "Oxygen2_b2s1"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x26'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b2s1"'  	Name = "Oxygen2_b2s1"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x26'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b2s2"'  	Name = "Lambda_b2s2"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x27'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b2s2"'  	Name = "Lambda_b2s2"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x27'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b2s2"'  	Name = "Oxygen2_b2s2"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x27'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b2s2"'  	Name = "Oxygen2_b2s2"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x27'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b3s1"'  	Name = "Lambda_b3s1"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x28'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b3s1"'  	Name = "Lambda_b3s1"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x28'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b3s1"'  	Name = "Oxygen2_b3s1"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x28'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b3s1"'  	Name = "Oxygen2_b3s1"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x28'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b3s2"'  	Name = "Lambda_b3s2"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x29'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b3s2"'  	Name = "Lambda_b3s2"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x29'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b3s2"'  	Name = "Oxygen2_b3s2"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x29'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b3s2"'  	Name = "Oxygen2_b3s2"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x29'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b4s1"'  	Name = "Lambda_b4s1"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x2a'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b4s1"'  	Name = "Lambda_b4s1"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x2a'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b4s1"'  	Name = "Oxygen2_b4s1"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x2a'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b4s1"'  	Name = "Oxygen2_b4s1"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x2a'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b4s2"'  	Name = "Lambda_b4s2"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x2b'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda_b4s2"'  	Name = "Lambda_b4s2"'  	obdValue = p => {  		return p.getab () * 2 / 65535;  	}'  	Command = 0x2b'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getab () * 2 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b4s2"'  	Name = "Oxygen2_b4s2"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x2b'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Oxygen2_b4s2"'  	Name = "Oxygen2_b4s2"'  	obdValue = p => {  		return p.getcd () * 8 / 65535;  	}'  	Command = 0x2b'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getcd () * 8 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.RunTime"'  	Name = "RunTime"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0) * 256 + get (1);  	}'  	Command = 0x1F'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0) * 256 + get (1);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.DistanceMIL"'  	Name = "DistanceMIL"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0) * 256 + get (1);  	}'  	Command = 0x21'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0) * 256 + get (1);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelRailPressure_rel"'  	Name = "FuelRailPressure_rel"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) * 10) / 128;  	}'  	Command = 0x22'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelRailPressure_rel"'  	Name = "FuelRailPressure_rel"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) * 10) / 128;  	}'  	Command = 0x22'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelRailPressure_rel"'  	Name = "FuelRailPressure_rel"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) * 10) / 128;  	}'  	Command = 0x22'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) * 10) / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) * 10) / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) * 10) / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelRailPressure_diesel"'  	Name = "FuelRailPressure_diesel"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) * 10);  	}'  	Command = 0x23'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelRailPressure_diesel"'  	Name = "FuelRailPressure_diesel"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) * 10);  	}'  	Command = 0x23'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) * 10);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) * 10);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.CommandedEGR"'  	Name = "CommandedEGR"'  	obdValue = p => {  		return p.get (0) * 100 / 255;  	}'  	Command = 0x2C'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.CommandedEGR"'  	Name = "CommandedEGR"'  	obdValue = p => {  		return p.get (0) * 100 / 255;  	}'  	Command = 0x2C'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 100 / 255;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 100 / 255;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.EGRError"'  	Name = "EGRError"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x2D'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.EGRError"'  	Name = "EGRError"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x2D'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.EGRError"'  	Name = "EGRError"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 128) * 100 / 128;  	}'  	Command = 0x2D'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 128) * 100 / 128;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Commanded_EVAP"'  	Name = "Commanded_EVAP"'  	obdValue = p => {  		return p.get (0) * 100 / 255;  	}'  	Command = 0x2E'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Commanded_EVAP"'  	Name = "Commanded_EVAP"'  	obdValue = p => {  		return p.get (0) * 100 / 255;  	}'  	Command = 0x2E'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 100 / 255;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (0) * 100 / 255;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelLevel"'  	Name = "FuelLevel"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return 100 * get (0) / 255;  	}'  	Command = 0x2F'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelLevel"'  	Name = "FuelLevel"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return 100 * get (0) / 255;  	}'  	Command = 0x2F'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return 100 * get (0) / 255;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return 100 * get (0) / 255;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.DistanceMILCleared"'  	Name = "DistanceMILCleared"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0) * 256 + get (1);  	}'  	Command = 0x31'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0) * 256 + get (1);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.VaporPressure"'  	Name = "VaporPressure"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) / 4);  	}'  	Command = 0x32'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.VaporPressure"'  	Name = "VaporPressure"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) / 4);  	}'  	Command = 0x32'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) / 4);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) / 4);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.ControlModuleVoltage"'  	Name = "ControlModuleVoltage"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) / 1000);  	}'  	Command = 0x42'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.ControlModuleVoltage"'  	Name = "ControlModuleVoltage"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) / 1000);  	}'  	Command = 0x42'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) / 1000);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) / 1000);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.AbsoluteLoadValue"'  	Name = "AbsoluteLoadValue"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) * 100 / 255);  	}'  	Command = 0x43'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.AbsoluteLoadValue"'  	Name = "AbsoluteLoadValue"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) * 100 / 255);  	}'  	Command = 0x43'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.AbsoluteLoadValue"'  	Name = "AbsoluteLoadValue"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) * 100 / 255);  	}'  	Command = 0x43'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) * 100 / 255);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) * 100 / 255);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) * 100 / 255);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda"'  	Name = "Lambda"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) * 256 + get (1)) * 2.0 / 65535;  	}'  	Command = 0x44'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda"'  	Name = "Lambda"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) * 256 + get (1)) * 2.0 / 65535;  	}'  	Command = 0x44'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.Lambda"'  	Name = "Lambda"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) * 256 + get (1)) * 2.0 / 65535;  	}'  	Command = 0x44'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) * 256 + get (1)) * 2.0 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) * 256 + get (1)) * 2.0 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) * 256 + get (1)) * 2.0 / 65535;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.AirTemp"'  	Name = "AirTemp"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0) - 40;  	}'  	Command = 0x46'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return get (0) - 40;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.EngineOilTemp"'  	Name = "EngineOilTemp"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0) - 40);  	}'  	Command = 0x5C'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (get (0) - 40);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelInjectionTiming"'  	Name = "FuelInjectionTiming"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1) - 26880) / 128);  	}'  	Command = 0x5D'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelInjectionTiming"'  	Name = "FuelInjectionTiming"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1) - 26880) / 128);  	}'  	Command = 0x5D'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.FuelInjectionTiming"'  	Name = "FuelInjectionTiming"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1) - 26880) / 128);  	}'  	Command = 0x5D'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1) - 26880) / 128);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1) - 26880) / 128);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1) - 26880) / 128);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.LitersPerHour"'  	Name = "LitersPerHour"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) * 0.05);  	}'  	Command = 0x5E'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.LitersPerHour"'  	Name = "LitersPerHour"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (((get (0) * 256) + get (1)) * 0.05);  	}'  	Command = 0x5E'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) * 0.05);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return (((get (0) * 256) + get (1)) * 0.05);  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.TCB_CINP"'  	Name = "TCB_CINP"'  	obdValue = p => {  		return p.get (2) * 1;  	}'  	Command = 0x6F'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.get (2) * 1;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.EP_1"'  	Name = "EP_1"'  	obdValue = p => {  		return p.getbc () * 0.01;  	}'  	Command = 0x73'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getbc () * 0.01;  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "OBD2.EP_2"'  	Name = "EP_2"'  	obdValue = p => {  		return p.getde () * 0.01;  	}'  	Command = 0x73'  };  
Magic Number,hobd,OBD2Sensors,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensors.cs,Activate,The following statement contains a magic number: return p.getde () * 0.01;  
Magic Number,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,Deactivate,The following statement contains a magic number: if (listenThread != null) {  	triggerQueue = null;  	listenThread.Join (1000);  	listenThread = null;  }  
Magic Number,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,Deactivate,The following statement contains a magic number: listenThread.Join (1000);  
Magic Number,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,ListenerHandler,The following statement contains a magic number: while (triggerQueue != null) {  	if (triggerQueue.Count == 0) {  		Thread.Sleep (10);  	} else {  		SensorListener sl = null;  		var sensor = triggerQueue.Dequeue ();  		if (sensor != null) {  			activeSensors.TryGetValue (sensor' out sl);  		}  		if (sl != null) {  			sl.nextReading = DateTimeMs.Now + sl.period;  			if (Logger.DUMP)  				Logger.dump ("SensorRegistry"' "ListenerHandler " + sensor.ID + " " + sl.nextReading);  			foreach (Action<Sensor> l in sl.listeners.ToArray ()) {  				try {  					if (Logger.DUMP)  						Logger.dump ("SensorRegistry"' "Listener: " + l);  					l (sensor);  				} catch (Exception e) {  					Logger.error ("SensorRegistry"' "Listener fail on: " + sensor.ID' e);  				}  			}  			foreach (Action<Sensor> l in PassiveListeners.ToArray ()) {  				try {  					l (sensor);  				} catch (Exception e) {  					Logger.error ("SensorRegistry"' "Passive listener fail on: " + sensor.ID' e);  				}  			}  		}  	}  }  
Magic Number,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,ListenerHandler,The following statement contains a magic number: if (triggerQueue.Count == 0) {  	Thread.Sleep (10);  } else {  	SensorListener sl = null;  	var sensor = triggerQueue.Dequeue ();  	if (sensor != null) {  		activeSensors.TryGetValue (sensor' out sl);  	}  	if (sl != null) {  		sl.nextReading = DateTimeMs.Now + sl.period;  		if (Logger.DUMP)  			Logger.dump ("SensorRegistry"' "ListenerHandler " + sensor.ID + " " + sl.nextReading);  		foreach (Action<Sensor> l in sl.listeners.ToArray ()) {  			try {  				if (Logger.DUMP)  					Logger.dump ("SensorRegistry"' "Listener: " + l);  				l (sensor);  			} catch (Exception e) {  				Logger.error ("SensorRegistry"' "Listener fail on: " + sensor.ID' e);  			}  		}  		foreach (Action<Sensor> l in PassiveListeners.ToArray ()) {  			try {  				l (sensor);  			} catch (Exception e) {  				Logger.error ("SensorRegistry"' "Passive listener fail on: " + sensor.ID' e);  			}  		}  	}  }  
Magic Number,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,ListenerHandler,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,TriggerSuspend,The following statement contains a magic number: while (triggerQueue.Count != 0 && tqTMO > 0) {  	Thread.Sleep (10);  	tqTMO--;  }  
Magic Number,hobd,SensorRegistry,F:\newReposMay17\cail_hobd\src\elm\SensorRegistry.cs,TriggerSuspend,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("sec")) {  	return int.Parse (val.Substring (0' val.Length - 3)) * 1000;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("sec")) {  	return int.Parse (val.Substring (0' val.Length - 3)) * 1000;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 3)) * 1000;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 3)) * 1000;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("min")) {  	return int.Parse (val.Substring (0' val.Length - 3)) * 1000 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("min")) {  	return int.Parse (val.Substring (0' val.Length - 3)) * 1000 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("min")) {  	return int.Parse (val.Substring (0' val.Length - 3)) * 1000 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 3)) * 1000 * 60;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 3)) * 1000 * 60;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 3)) * 1000 * 60;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("hour")) {  	return int.Parse (val.Substring (0' val.Length - 4)) * 1000 * 60 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("hour")) {  	return int.Parse (val.Substring (0' val.Length - 4)) * 1000 * 60 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("hour")) {  	return int.Parse (val.Substring (0' val.Length - 4)) * 1000 * 60 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("hour")) {  	return int.Parse (val.Substring (0' val.Length - 4)) * 1000 * 60 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 4)) * 1000 * 60 * 60;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 4)) * 1000 * 60 * 60;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 4)) * 1000 * 60 * 60;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 4)) * 1000 * 60 * 60;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("hours")) {  	return int.Parse (val.Substring (0' val.Length - 5)) * 1000 * 60 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("hours")) {  	return int.Parse (val.Substring (0' val.Length - 5)) * 1000 * 60 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("hours")) {  	return int.Parse (val.Substring (0' val.Length - 5)) * 1000 * 60 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: if (val.EndsWith ("hours")) {  	return int.Parse (val.Substring (0' val.Length - 5)) * 1000 * 60 * 60;  }  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 5)) * 1000 * 60 * 60;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 5)) * 1000 * 60 * 60;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 5)) * 1000 * 60 * 60;  
Magic Number,hobd,SensorTrack,F:\newReposMay17\cail_hobd\src\elm\SensorTrack.cs,ParseTimeSpan,The following statement contains a magic number: return int.Parse (val.Substring (0' val.Length - 5)) * 1000 * 60 * 60;  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,PurgeStream,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,SetState,The following statement contains a magic number: switch (State) {  case ST_INIT_HW:  	Error = null;  	try {  		stream.Close ();  		Logger.info ("OBD2Engine"' "Open " + url);  		Thread.Sleep (100);  		stream.Open (url);  	} catch (Exception e) {  		Error = e.Message;  		Logger.error ("OBD2Engine"' "Init Error"' e);  		SetState (ST_ERROR);  		break;  	}  	PurgeStream ();  	SetState (ST_INIT);  	break;  case ST_INIT:  	extraInitCommands.Clear ();  	extraInitIndex = 0;  	if (CriticalError) {  		CriticalError = false;  		// trigger protocol autosearch TODO: conflicts with some settings' f.e. ATFI setup  		//extraInitCommands.Add("ATSP 0");  	}  	if (initData != null) {  		initData.Split (new char[] {  			';'  		}).ToList ().ForEach (s => {  			var cmd = s.Trim ();  			if (cmd.Length > 0)  				extraInitCommands.Add (cmd);  		});  	}  	SensorInitIndex = 0;  	SetState (ST_ATZ);  	break;  case ST_ATZ:  	SendCommand ("ATZ");  	break;  case ST_ATE0:  	SendCommand ("ATE0");  	break;  case ST_ATL0:  	SendCommand ("ATL0");  	break;  case ST_EXTRAINIT:  	if (extraInitIndex >= extraInitCommands.Count ()) {  		SetState (ST_SENSOR_INIT);  	} else {  		SendCommand (extraInitCommands [extraInitIndex]);  		StateDetails = State + " " + this.extraInitCommands [this.extraInitIndex];  		extraInitIndex++;  	}  	break;  case ST_SENSOR_INIT:  	SendCommand ("01" + SensorInitIndex.ToString ("X2"));  	break;  case ST_QUERY_PROTOCOL:  	SendCommand ("ATDPN");  	break;  case ST_SENSOR:  	var sls = Registry.ActiveSensors;  	if (sls.Length == 0) {  		if (Logger.TRACE)  			Logger.trace ("OBD2Engine"' " no active sensors ");  		break;  	}  	currentSensorIndex++;  	if (currentSensorIndex >= sls.Length)  		currentSensorIndex = 0;  	int scanSensorIndex = currentSensorIndex;  	while (true) {  		currentSensorListener = sls [currentSensorIndex];  		// recreate reading timers if layout was changed!  		if (nextReadings == null || nextReadings.Length != sls.Length) {  			nextReadings = new long[sls.Length];  		}  		long nextReading = nextReadings [currentSensorIndex];  		if (nextReading == 0 || nextReading <= DateTimeMs.Now) {  			if (currentSensorListener.sensor is OBD2Sensor) {  				if (Logger.TRACE)  					Logger.trace ("OBD2Engine"' " ----> " + currentSensorListener.sensor.ID);  				var osensor = (OBD2Sensor)currentSensorListener.sensor;  				var cmd = osensor.RawCommand;  				if (cmd != null) {  					LinesSent = SendCommand (cmd);  					SetState (ST_SENSOR_ACK);  					break;  				} else {  					// move to next sensor  				}  			}  		} else {  			if (Logger.DUMP)  				Logger.dump ("OBD2Engine"' " Skipped " + currentSensorListener.sensor.ID + " with " + (nextReading - DateTimeMs.Now));  		}  		currentSensorIndex++;  		if (currentSensorIndex >= sls.Length)  			currentSensorIndex = 0;  		if (currentSensorIndex == scanSensorIndex)  			break;  	}  	break;  }  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,SetState,The following statement contains a magic number: try {  	stream.Close ();  	Logger.info ("OBD2Engine"' "Open " + url);  	Thread.Sleep (100);  	stream.Open (url);  } catch (Exception e) {  	Error = e.Message;  	Logger.error ("OBD2Engine"' "Init Error"' e);  	SetState (ST_ERROR);  	break;  }  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,SetState,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleReply,The following statement contains a magic number: switch (State) {  case ST_INIT:  	break;  case ST_ATZ:  	if (smsg.Contains ("ATZ") || smsg.Contains ("ELM")) {  		VersionInfo = smsg.Replace ("ATZ"' "").Replace ("\r"' "").Replace ("\n"' "").Trim ();  		Logger.log ("INFO"' "OBD2Engine"' "VersionInfo: " + VersionInfo' null);  		if (VersionInfo.Length > 2) {  			criticalErrors [0] = VersionInfo;  		}  		SetState (ST_ATE0);  	} else {  		SendCommand ("ATZ");  	}  	break;  case ST_ATE0:  	if (smsg.Contains ("OK")) {  		SetState (ST_ATL0);  	}  	break;  case ST_ATL0:  	if (smsg.Contains ("OK")) {  		SetState (ST_EXTRAINIT);  	}  	break;  case ST_EXTRAINIT:  	SetState (ST_EXTRAINIT);  	break;  case ST_SENSOR_INIT:  	Error = criticalErrors.FirstOrDefault (e => smsg.Contains (e));  	if (Error != null) {  		Logger.error ("OBD2Engine"' "Critical error on sensor init:" + smsg);  		// Wait and then do soft reconnect  		SetState (ST_ERROR_SOFT);  		StateDetails = State + " " + Error;  	} else {  		Logger.log ("INFO"' "OBD2Engine"' "Sensor Init:" + smsg' null);  		//PIDSupported.SetValue(msg);  		SetState (ST_QUERY_PROTOCOL);  	}  	break;  case ST_QUERY_PROTOCOL:  	try {  		var proto = smsg.Replace ("A"' "");  		ProtocolId = int.Parse (proto' NumberStyles.HexNumber);  	} catch (Exception) {  		Logger.error ("OBD2Engine"' "protocol " + smsg);  	}  	Logger.log ("INFO"' "OBD2Engine"' "ProtocolId: " + ProtocolId' null);  	Registry.ProtocolId = ProtocolId;  	SetState (ST_SENSOR);  	break;  case ST_SENSOR_ACK:  	// saving local copy  	var lsl = currentSensorListener;  	var osensor = (OBD2Sensor)lsl.sensor;  	nextReadings [currentSensorIndex] = DateTimeMs.Now + lsl.period + (1000 * Math.Min (10' lsl.failures));  	// proactively read next sensor!  	SetState (ST_SENSOR);  	// valid reply - set value' raise listeners  	if (osensor.SetRawValue (msg)) {  		subsequentErrors = 0;  		lsl.failures = 0;  		this.Error = null;  	} else {  		// search for known errors' increment counters  		string error = dataErrors.FirstOrDefault (e => smsg.Contains (e));  		if (error != null) {  			this.Error = this.Error == null ? error : this.Error + " " + error;  			// increase period for this 'bad' sensor  			if (subsequentErrors == 0) {  				Logger.info ("OBD2Engine"' "sensor not responding' increasing period: " + osensor.ID);  				// !!!! VAZ.Core fail otherwise  				lsl.failures++;  				//lsl.period = unchecked((lsl.period +100) * 2);  			}  			subsequentErrors++;  		} else {  			error = criticalErrors.FirstOrDefault (e => smsg.Contains (e));  			if (error != null) {  				this.Error = error;  				this.CriticalError = true;  				Logger.error ("OBD2Engine"' "Critical error:" + smsg);  				SetState (ST_ERROR_SOFT);  				subsequentErrors = 0;  			}  		}  	}  	// act on too much errors  	if (subsequentErrors > ErrorThreshold) {  		Logger.error ("OBD2Engine"' "Connection error threshold");  		this.Error = "Connection error threshold";  		subsequentErrors = 0;  		this.CriticalError = true;  		SetState (ST_ERROR_SOFT);  	}  	break;  }  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleReply,The following statement contains a magic number: switch (State) {  case ST_INIT:  	break;  case ST_ATZ:  	if (smsg.Contains ("ATZ") || smsg.Contains ("ELM")) {  		VersionInfo = smsg.Replace ("ATZ"' "").Replace ("\r"' "").Replace ("\n"' "").Trim ();  		Logger.log ("INFO"' "OBD2Engine"' "VersionInfo: " + VersionInfo' null);  		if (VersionInfo.Length > 2) {  			criticalErrors [0] = VersionInfo;  		}  		SetState (ST_ATE0);  	} else {  		SendCommand ("ATZ");  	}  	break;  case ST_ATE0:  	if (smsg.Contains ("OK")) {  		SetState (ST_ATL0);  	}  	break;  case ST_ATL0:  	if (smsg.Contains ("OK")) {  		SetState (ST_EXTRAINIT);  	}  	break;  case ST_EXTRAINIT:  	SetState (ST_EXTRAINIT);  	break;  case ST_SENSOR_INIT:  	Error = criticalErrors.FirstOrDefault (e => smsg.Contains (e));  	if (Error != null) {  		Logger.error ("OBD2Engine"' "Critical error on sensor init:" + smsg);  		// Wait and then do soft reconnect  		SetState (ST_ERROR_SOFT);  		StateDetails = State + " " + Error;  	} else {  		Logger.log ("INFO"' "OBD2Engine"' "Sensor Init:" + smsg' null);  		//PIDSupported.SetValue(msg);  		SetState (ST_QUERY_PROTOCOL);  	}  	break;  case ST_QUERY_PROTOCOL:  	try {  		var proto = smsg.Replace ("A"' "");  		ProtocolId = int.Parse (proto' NumberStyles.HexNumber);  	} catch (Exception) {  		Logger.error ("OBD2Engine"' "protocol " + smsg);  	}  	Logger.log ("INFO"' "OBD2Engine"' "ProtocolId: " + ProtocolId' null);  	Registry.ProtocolId = ProtocolId;  	SetState (ST_SENSOR);  	break;  case ST_SENSOR_ACK:  	// saving local copy  	var lsl = currentSensorListener;  	var osensor = (OBD2Sensor)lsl.sensor;  	nextReadings [currentSensorIndex] = DateTimeMs.Now + lsl.period + (1000 * Math.Min (10' lsl.failures));  	// proactively read next sensor!  	SetState (ST_SENSOR);  	// valid reply - set value' raise listeners  	if (osensor.SetRawValue (msg)) {  		subsequentErrors = 0;  		lsl.failures = 0;  		this.Error = null;  	} else {  		// search for known errors' increment counters  		string error = dataErrors.FirstOrDefault (e => smsg.Contains (e));  		if (error != null) {  			this.Error = this.Error == null ? error : this.Error + " " + error;  			// increase period for this 'bad' sensor  			if (subsequentErrors == 0) {  				Logger.info ("OBD2Engine"' "sensor not responding' increasing period: " + osensor.ID);  				// !!!! VAZ.Core fail otherwise  				lsl.failures++;  				//lsl.period = unchecked((lsl.period +100) * 2);  			}  			subsequentErrors++;  		} else {  			error = criticalErrors.FirstOrDefault (e => smsg.Contains (e));  			if (error != null) {  				this.Error = error;  				this.CriticalError = true;  				Logger.error ("OBD2Engine"' "Critical error:" + smsg);  				SetState (ST_ERROR_SOFT);  				subsequentErrors = 0;  			}  		}  	}  	// act on too much errors  	if (subsequentErrors > ErrorThreshold) {  		Logger.error ("OBD2Engine"' "Connection error threshold");  		this.Error = "Connection error threshold";  		subsequentErrors = 0;  		this.CriticalError = true;  		SetState (ST_ERROR_SOFT);  	}  	break;  }  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleReply,The following statement contains a magic number: switch (State) {  case ST_INIT:  	break;  case ST_ATZ:  	if (smsg.Contains ("ATZ") || smsg.Contains ("ELM")) {  		VersionInfo = smsg.Replace ("ATZ"' "").Replace ("\r"' "").Replace ("\n"' "").Trim ();  		Logger.log ("INFO"' "OBD2Engine"' "VersionInfo: " + VersionInfo' null);  		if (VersionInfo.Length > 2) {  			criticalErrors [0] = VersionInfo;  		}  		SetState (ST_ATE0);  	} else {  		SendCommand ("ATZ");  	}  	break;  case ST_ATE0:  	if (smsg.Contains ("OK")) {  		SetState (ST_ATL0);  	}  	break;  case ST_ATL0:  	if (smsg.Contains ("OK")) {  		SetState (ST_EXTRAINIT);  	}  	break;  case ST_EXTRAINIT:  	SetState (ST_EXTRAINIT);  	break;  case ST_SENSOR_INIT:  	Error = criticalErrors.FirstOrDefault (e => smsg.Contains (e));  	if (Error != null) {  		Logger.error ("OBD2Engine"' "Critical error on sensor init:" + smsg);  		// Wait and then do soft reconnect  		SetState (ST_ERROR_SOFT);  		StateDetails = State + " " + Error;  	} else {  		Logger.log ("INFO"' "OBD2Engine"' "Sensor Init:" + smsg' null);  		//PIDSupported.SetValue(msg);  		SetState (ST_QUERY_PROTOCOL);  	}  	break;  case ST_QUERY_PROTOCOL:  	try {  		var proto = smsg.Replace ("A"' "");  		ProtocolId = int.Parse (proto' NumberStyles.HexNumber);  	} catch (Exception) {  		Logger.error ("OBD2Engine"' "protocol " + smsg);  	}  	Logger.log ("INFO"' "OBD2Engine"' "ProtocolId: " + ProtocolId' null);  	Registry.ProtocolId = ProtocolId;  	SetState (ST_SENSOR);  	break;  case ST_SENSOR_ACK:  	// saving local copy  	var lsl = currentSensorListener;  	var osensor = (OBD2Sensor)lsl.sensor;  	nextReadings [currentSensorIndex] = DateTimeMs.Now + lsl.period + (1000 * Math.Min (10' lsl.failures));  	// proactively read next sensor!  	SetState (ST_SENSOR);  	// valid reply - set value' raise listeners  	if (osensor.SetRawValue (msg)) {  		subsequentErrors = 0;  		lsl.failures = 0;  		this.Error = null;  	} else {  		// search for known errors' increment counters  		string error = dataErrors.FirstOrDefault (e => smsg.Contains (e));  		if (error != null) {  			this.Error = this.Error == null ? error : this.Error + " " + error;  			// increase period for this 'bad' sensor  			if (subsequentErrors == 0) {  				Logger.info ("OBD2Engine"' "sensor not responding' increasing period: " + osensor.ID);  				// !!!! VAZ.Core fail otherwise  				lsl.failures++;  				//lsl.period = unchecked((lsl.period +100) * 2);  			}  			subsequentErrors++;  		} else {  			error = criticalErrors.FirstOrDefault (e => smsg.Contains (e));  			if (error != null) {  				this.Error = error;  				this.CriticalError = true;  				Logger.error ("OBD2Engine"' "Critical error:" + smsg);  				SetState (ST_ERROR_SOFT);  				subsequentErrors = 0;  			}  		}  	}  	// act on too much errors  	if (subsequentErrors > ErrorThreshold) {  		Logger.error ("OBD2Engine"' "Connection error threshold");  		this.Error = "Connection error threshold";  		subsequentErrors = 0;  		this.CriticalError = true;  		SetState (ST_ERROR_SOFT);  	}  	break;  }  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleReply,The following statement contains a magic number: if (smsg.Contains ("ATZ") || smsg.Contains ("ELM")) {  	VersionInfo = smsg.Replace ("ATZ"' "").Replace ("\r"' "").Replace ("\n"' "").Trim ();  	Logger.log ("INFO"' "OBD2Engine"' "VersionInfo: " + VersionInfo' null);  	if (VersionInfo.Length > 2) {  		criticalErrors [0] = VersionInfo;  	}  	SetState (ST_ATE0);  } else {  	SendCommand ("ATZ");  }  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleReply,The following statement contains a magic number: if (VersionInfo.Length > 2) {  	criticalErrors [0] = VersionInfo;  }  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleReply,The following statement contains a magic number: nextReadings [currentSensorIndex] = DateTimeMs.Now + lsl.period + (1000 * Math.Min (10' lsl.failures));  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleReply,The following statement contains a magic number: nextReadings [currentSensorIndex] = DateTimeMs.Now + lsl.period + (1000 * Math.Min (10' lsl.failures));  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleState,The following statement contains a magic number: if (State == ST_SENSOR) {  	Thread.Sleep (50);  	SetState (ST_SENSOR);  	return;  }  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleState,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleState,The following statement contains a magic number: if (position == 0) {  	Thread.Sleep (50);  	return;  }  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleState,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,Deactivate,The following statement contains a magic number: while (thread_active && counter > 0) {  	Thread.Sleep (50);  	counter--;  }  
Magic Number,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,Deactivate,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,to_h,The following statement contains a magic number: if (a >= 0x41 && a <= 0x46)  	return (byte)(a + 10 - 0x41);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,to_h,The following statement contains a magic number: return (byte)(a + 10 - 0x41);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,to_h,The following statement contains a magic number: if (a >= 0x61 && a <= 0x66)  	return (byte)(a + 10 - 0x61);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,to_h,The following statement contains a magic number: return (byte)(a + 10 - 0x61);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,to_h,The following statement contains a magic number: return 255;  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,SetRawValue,The following statement contains a magic number: for (int i = 0; i < msg.Length; i++) {  	var a = msg [i];  	if (a == ' ' || a == '\r' || a == '\n')  		continue;  	if (i + 1 >= msg.Length)  		break;  	i++;  	var b = msg [i];  	a = to_h (a);  	b = to_h (b);  	if (a > 0x10 || b > 0x10)  		continue;  	msgraw.Add ((byte)((a << 4) + b));  }  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,SetRawValue,The following statement contains a magic number: msgraw.Add ((byte)((a << 4) + b));  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,len,The following statement contains a magic number: return dataraw.Length - (data_offset + 2);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_word,The following statement contains a magic number: return (dataraw [idx] << 8) + dataraw [idx + 1];  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_wordle,The following statement contains a magic number: return (dataraw [idx]) + (dataraw [idx + 1] << 8);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_dword,The following statement contains a magic number: return (dataraw [idx + 0] << 24) + (dataraw [idx + 1] << 16) + (dataraw [idx + 2] << 8) + (dataraw [idx + 3] << 0);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_dword,The following statement contains a magic number: return (dataraw [idx + 0] << 24) + (dataraw [idx + 1] << 16) + (dataraw [idx + 2] << 8) + (dataraw [idx + 3] << 0);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_dword,The following statement contains a magic number: return (dataraw [idx + 0] << 24) + (dataraw [idx + 1] << 16) + (dataraw [idx + 2] << 8) + (dataraw [idx + 3] << 0);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_dword,The following statement contains a magic number: return (dataraw [idx + 0] << 24) + (dataraw [idx + 1] << 16) + (dataraw [idx + 2] << 8) + (dataraw [idx + 3] << 0);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_dword,The following statement contains a magic number: return (dataraw [idx + 0] << 24) + (dataraw [idx + 1] << 16) + (dataraw [idx + 2] << 8) + (dataraw [idx + 3] << 0);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_dwordle,The following statement contains a magic number: return (dataraw [idx + 0] << 0) + (dataraw [idx + 1] << 8) + (dataraw [idx + 2] << 16) + (dataraw [idx + 3] << 24);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_dwordle,The following statement contains a magic number: return (dataraw [idx + 0] << 0) + (dataraw [idx + 1] << 8) + (dataraw [idx + 2] << 16) + (dataraw [idx + 3] << 24);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_dwordle,The following statement contains a magic number: return (dataraw [idx + 0] << 0) + (dataraw [idx + 1] << 8) + (dataraw [idx + 2] << 16) + (dataraw [idx + 3] << 24);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_dwordle,The following statement contains a magic number: return (dataraw [idx + 0] << 0) + (dataraw [idx + 1] << 8) + (dataraw [idx + 2] << 16) + (dataraw [idx + 3] << 24);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getraw_dwordle,The following statement contains a magic number: return (dataraw [idx + 0] << 0) + (dataraw [idx + 1] << 8) + (dataraw [idx + 2] << 16) + (dataraw [idx + 3] << 24);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,get,The following statement contains a magic number: return getraw (data_offset + 2 + idx);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,get_word,The following statement contains a magic number: return getraw_word (data_offset + 2 + idx);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,get_bit,The following statement contains a magic number: return (dataraw [data_offset + 2 + idx] & (1 << bit)) != 0 ? 1 : 0;  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getab,The following statement contains a magic number: return getraw_word (data_offset + 2 + 0);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getbc,The following statement contains a magic number: return getraw_word (data_offset + 2 + 1);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getcd,The following statement contains a magic number: return getraw_word (data_offset + 2 + 2);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getcd,The following statement contains a magic number: return getraw_word (data_offset + 2 + 2);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getde,The following statement contains a magic number: return getraw_word (data_offset + 2 + 3);  
Magic Number,hobd,OBD2Sensor,F:\newReposMay17\cail_hobd\src\elm\OBD2Sensor.cs,getde,The following statement contains a magic number: return getraw_word (data_offset + 2 + 3);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_B3"'  	Name = "PID_B3"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 2);  	}'  	Command = 0xB3'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 2);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_B3"'  	Name = "PID_B3"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 3);  	}'  	Command = 0xB3'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 3);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_B3"'  	Name = "PID_B3"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 4);  	}'  	Command = 0xB3'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 4);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_B3"'  	Name = "PID_B3"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 5);  	}'  	Command = 0xB3'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 5);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_B3"'  	Name = "PID_B3"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 6);  	}'  	Command = 0xB3'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 6);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.ATFTemp"'  	Name = "ATFTemp"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0x0) - 40;  	}'  	Command = 0xB4'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get (0x0) - 40;  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_DA"'  	Name = "PID_DA"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0x00) * 2.5;  	}'  	Command = 0xDA'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get (0x00) * 2.5;  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_DA"'  	Name = "PID_DA"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0x02) * 2.5;  	}'  	Command = 0xDA'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get (0x02) * 2.5;  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_DA"'  	Name = "PID_DA"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0x04) * 2.5;  	}'  	Command = 0xDA'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get (0x04) * 2.5;  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.FuelPressureExt"'  	Name = "FuelPressureExt"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0x00) * 816 / 255;  	}'  	Command = 0xE3'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.FuelPressureExt"'  	Name = "FuelPressureExt"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get (0x00) * 816 / 255;  	}'  	Command = 0xE3'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get (0x00) * 816 / 255;  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get (0x00) * 816 / 255;  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.InjectorPulseWidth"'  	Name = "InjectorPulseWidth"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0x00) * (32.60 / 255));  	}'  	Command = 0xE4'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.InjectorPulseWidth"'  	Name = "InjectorPulseWidth"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0x00) * (32.60 / 255));  	}'  	Command = 0xE4'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return (get (0x00) * (32.60 / 255));  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return (get (0x00) * (32.60 / 255));  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.IdleDutyCycle"'  	Name = "IdleDutyCycle"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0x00) * (99.4 / 255));  	}'  	Command = 0xE6'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.IdleDutyCycle"'  	Name = "IdleDutyCycle"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return (get (0x00) * (99.4 / 255));  	}'  	Command = 0xE6'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return (get (0x00) * (99.4 / 255));  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return (get (0x00) * (99.4 / 255));  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_E8"'  	Name = "PID_E8"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 2);  	}'  	Command = 0xE8'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 2);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_E8"'  	Name = "PID_E8"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 3);  	}'  	Command = 0xE8'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 3);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.AT_NP"'  	Name = "AT_NP"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 4);  	}'  	Command = 0xE8'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 4);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_E8"'  	Name = "PID_E8"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 5);  	}'  	Command = 0xE8'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 5);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_E8"'  	Name = "PID_E8"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 6);  	}'  	Command = 0xE8'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 6);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_E8"'  	Name = "PID_E8"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 7);  	}'  	Command = 0xE8'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 7);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_E8"'  	Name = "PID_E8"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x02' 6);  	}'  	Command = 0xE8'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x02' 6);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_E8"'  	Name = "PID_E8"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x02' 7);  	}'  	Command = 0xE8'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x02' 7);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.AT_2"'  	Name = "AT_2"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 2 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 2 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.AT_R"'  	Name = "AT_R"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 3 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 3 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_F9"'  	Name = "PID_F9"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 4 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 4 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.AT_OD"'  	Name = "AT_OD"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 5 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 5 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.AT_Kickdown"'  	Name = "AT_Kickdown"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 6 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 6 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.StopSignals"'  	Name = "StopSignals"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 7 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 7 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_F9"'  	Name = "PID_F9"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 8 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 8 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.AT_D"'  	Name = "AT_D"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x01' 3 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x01' 3 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_F9"'  	Name = "PID_F9"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x01' 4 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x01' 4 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_F9"'  	Name = "PID_F9"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x01' 5 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x01' 5 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_F9"'  	Name = "PID_F9"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x01' 6 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x01' 6 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_F9"'  	Name = "PID_F9"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x01' 7 - 1);  	}'  	Command = 0xF9'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x01' 7 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_FB"'  	Name = "PID_FB"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 2 - 1);  	}'  	Command = 0xFB'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 2 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_FB"'  	Name = "PID_FB"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 3 - 1);  	}'  	Command = 0xFB'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 3 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_FB"'  	Name = "PID_FB"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 4 - 1);  	}'  	Command = 0xFB'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 4 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_FB"'  	Name = "PID_FB"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 5 - 1);  	}'  	Command = 0xFB'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 5 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_FB"'  	Name = "PID_FB"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 6 - 1);  	}'  	Command = 0xFB'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 6 - 1);  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: s = new OBD2Sensor () {  	ID = "Toyota.PID_FB"'  	Name = "PID_FB"'  	obdValue = p => {  		Func<int' double> get = p.get;  		Func<int' int' double> get_bit = p.get_bit;  		return get_bit (0x00' 7 - 1);  	}'  	Command = 0xFB'  };  
Magic Number,hobd,ToyotaSensors,F:\newReposMay17\cail_hobd\src\elm\ToyotaSensors.cs,Activate,The following statement contains a magic number: return get_bit (0x00' 7 - 1);  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: while (reader.NodeType == XmlNodeType.Element) {  	if (reader.Name == "include") {  		var name = reader.ReadElementString ().Trim ();  		var ecuinc = new ECUXMLSensorProvider (System.IO.Path.Combine (Path' name));  		ecuinc.init (registry);  		continue;  	}  	if (reader.Name != "parameter") {  		reader.ReadElementString ();  		continue;  	}  	var id = reader.GetAttribute ("id");  	var display = reader.GetAttribute ("display");  	reader.ReadStartElement ();  	int command = 0;  	string clazz = null;  	string rawcommand = null;  	string basename = null;  	string basenameraw = null;  	int replyoffset = 0;  	string units = null;  	string value = null;  	string word = null;  	string wordle = null;  	string dword = null;  	string dwordle = null;  	bool signed = false;  	double scale = 1;  	double offset = 0;  	int bit = -1;  	int? cutlow = null;  	int? cuthigh = null;  	while (reader.NodeType == XmlNodeType.Element) {  		try {  			switch (reader.Name) {  			case "class":  				clazz = reader.ReadElementString ().Trim ();  				break;  			case "address":  				reader.ReadStartElement ();  				var hexval = reader.ReadElementString ("byte").Trim ();  				if (hexval.StartsWith ("0x"))  					hexval = hexval.Substring (2);  				command = int.Parse (hexval' NumberStyles.HexNumber);  				reader.ReadEndElement ();  				break;  			case "raw":  				rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  				break;  			case "base":  				basename = reader.ReadElementString ().Trim ();  				break;  			case "base-raw":  				basenameraw = reader.ReadElementString ().Trim ();  				break;  			case "value":  			case "valuea":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 0;  				break;  			case "valueb":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 1;  				break;  			case "valuec":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 2;  				break;  			case "valued":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 3;  				break;  			case "valueab":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 0;  				break;  			case "valuebc":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 1;  				break;  			case "valuecd":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 2;  				break;  			case "signed":  				signed = true;  				reader.ReadElementString ();  				break;  			case "offset":  				offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  				break;  			case "bit":  				bit = int.Parse (reader.ReadElementString ());  				break;  			case "cut-low":  				cutlow = int.Parse (reader.ReadElementString ());  				break;  			case "cut-high":  				cuthigh = int.Parse (reader.ReadElementString ());  				break;  			case "description":  				reader.ReadStartElement ();  				while (reader.NodeType == XmlNodeType.Element) {  					switch (reader.Name) {  					case "unit":  						units = reader.ReadElementString ().Trim ();  						break;  					default:  						reader.ReadElementString ();  						break;  					}  				}  				reader.ReadEndElement ();  				break;  			default:  				if (reader.Name.StartsWith ("value-")) {  					replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  					value = reader.ReadElementContentAsString ();  					scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("word-")) {  					replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  					word = reader.ReadElementContentAsString ();  					scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("wordle-")) {  					replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  					wordle = reader.ReadElementContentAsString ();  					scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("dword-")) {  					replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  					dword = reader.ReadElementContentAsString ();  					scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("dwordle-")) {  					replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  					dwordle = reader.ReadElementContentAsString ();  					scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  				} else {  					throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  				}  				break;  			}  		} catch (Exception e) {  			Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  		}  	}  	Func<double' double> evaluator = v => {  		if (signed) {  			if (dword != null || dwordle != null)  				v = (double)(int)((uint)v);  			else if (word != null || wordle != null)  				v = (double)(short)((ushort)v);  			else  				v = (double)(sbyte)((byte)v);  		}  		var res = v * scale + offset;  		if (bit != -1)  			res = ((int)res >> bit) & 1;  		if (cutlow != null)  			res = res < cutlow ? 0 : res;  		if (cuthigh != null)  			res = res > cuthigh ? 0 : res;  		return res;  	};  	CoreSensor sensor = null;  	if (clazz != null) {  		sensor = (CoreSensor)registry.CreateObject (clazz);  	} // OBD2 derived sensor  	else if (basename != null) {  		// Custom derived sensor  		var s = new DerivedSensor (""' basename' null);  		if (value != null) {  			s.DerivedValue = (a' b) => evaluator (a.Value);  		}  		sensor = s;  	} // RAW data from base sensor  	else if (basenameraw != null) {  		// Custom derived sensor  		var s = new DerivedSensor (""' basenameraw' null);  		if (value != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw (replyoffset));  		}  		if (word != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_word (replyoffset));  		}  		if (wordle != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_wordle (replyoffset));  		}  		if (dword != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_dword (replyoffset));  		}  		if (dwordle != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_dwordle (replyoffset));  		}  		sensor = s;  	} // command / raw command  	else if (basename == null) {  		var s = new OBD2Sensor ();  		if (value != null) {  			s.obdValue = p => evaluator (p.get (replyoffset));  		}  		if (word != null) {  			s.obdValue = p => evaluator (p.get_word (replyoffset));  		}  		sensor = s;  	}  	if (sensor != null && sensor is OBD2Sensor) {  		if (rawcommand != null)  			(sensor as OBD2Sensor).RawCommand = rawcommand;  		else if (command != 0)  			(sensor as OBD2Sensor).Command = command;  	}  	if (sensor != null) {  		sensor.ID = this.Namespace + "." + id;  		sensor.Name = id;  		//sensor.Display = display;  		if (units != null)  			sensor.Units = units;  		registry.Add (sensor);  	}  	reader.ReadEndElement ();  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: while (reader.NodeType == XmlNodeType.Element) {  	if (reader.Name == "include") {  		var name = reader.ReadElementString ().Trim ();  		var ecuinc = new ECUXMLSensorProvider (System.IO.Path.Combine (Path' name));  		ecuinc.init (registry);  		continue;  	}  	if (reader.Name != "parameter") {  		reader.ReadElementString ();  		continue;  	}  	var id = reader.GetAttribute ("id");  	var display = reader.GetAttribute ("display");  	reader.ReadStartElement ();  	int command = 0;  	string clazz = null;  	string rawcommand = null;  	string basename = null;  	string basenameraw = null;  	int replyoffset = 0;  	string units = null;  	string value = null;  	string word = null;  	string wordle = null;  	string dword = null;  	string dwordle = null;  	bool signed = false;  	double scale = 1;  	double offset = 0;  	int bit = -1;  	int? cutlow = null;  	int? cuthigh = null;  	while (reader.NodeType == XmlNodeType.Element) {  		try {  			switch (reader.Name) {  			case "class":  				clazz = reader.ReadElementString ().Trim ();  				break;  			case "address":  				reader.ReadStartElement ();  				var hexval = reader.ReadElementString ("byte").Trim ();  				if (hexval.StartsWith ("0x"))  					hexval = hexval.Substring (2);  				command = int.Parse (hexval' NumberStyles.HexNumber);  				reader.ReadEndElement ();  				break;  			case "raw":  				rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  				break;  			case "base":  				basename = reader.ReadElementString ().Trim ();  				break;  			case "base-raw":  				basenameraw = reader.ReadElementString ().Trim ();  				break;  			case "value":  			case "valuea":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 0;  				break;  			case "valueb":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 1;  				break;  			case "valuec":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 2;  				break;  			case "valued":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 3;  				break;  			case "valueab":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 0;  				break;  			case "valuebc":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 1;  				break;  			case "valuecd":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 2;  				break;  			case "signed":  				signed = true;  				reader.ReadElementString ();  				break;  			case "offset":  				offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  				break;  			case "bit":  				bit = int.Parse (reader.ReadElementString ());  				break;  			case "cut-low":  				cutlow = int.Parse (reader.ReadElementString ());  				break;  			case "cut-high":  				cuthigh = int.Parse (reader.ReadElementString ());  				break;  			case "description":  				reader.ReadStartElement ();  				while (reader.NodeType == XmlNodeType.Element) {  					switch (reader.Name) {  					case "unit":  						units = reader.ReadElementString ().Trim ();  						break;  					default:  						reader.ReadElementString ();  						break;  					}  				}  				reader.ReadEndElement ();  				break;  			default:  				if (reader.Name.StartsWith ("value-")) {  					replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  					value = reader.ReadElementContentAsString ();  					scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("word-")) {  					replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  					word = reader.ReadElementContentAsString ();  					scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("wordle-")) {  					replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  					wordle = reader.ReadElementContentAsString ();  					scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("dword-")) {  					replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  					dword = reader.ReadElementContentAsString ();  					scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("dwordle-")) {  					replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  					dwordle = reader.ReadElementContentAsString ();  					scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  				} else {  					throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  				}  				break;  			}  		} catch (Exception e) {  			Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  		}  	}  	Func<double' double> evaluator = v => {  		if (signed) {  			if (dword != null || dwordle != null)  				v = (double)(int)((uint)v);  			else if (word != null || wordle != null)  				v = (double)(short)((ushort)v);  			else  				v = (double)(sbyte)((byte)v);  		}  		var res = v * scale + offset;  		if (bit != -1)  			res = ((int)res >> bit) & 1;  		if (cutlow != null)  			res = res < cutlow ? 0 : res;  		if (cuthigh != null)  			res = res > cuthigh ? 0 : res;  		return res;  	};  	CoreSensor sensor = null;  	if (clazz != null) {  		sensor = (CoreSensor)registry.CreateObject (clazz);  	} // OBD2 derived sensor  	else if (basename != null) {  		// Custom derived sensor  		var s = new DerivedSensor (""' basename' null);  		if (value != null) {  			s.DerivedValue = (a' b) => evaluator (a.Value);  		}  		sensor = s;  	} // RAW data from base sensor  	else if (basenameraw != null) {  		// Custom derived sensor  		var s = new DerivedSensor (""' basenameraw' null);  		if (value != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw (replyoffset));  		}  		if (word != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_word (replyoffset));  		}  		if (wordle != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_wordle (replyoffset));  		}  		if (dword != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_dword (replyoffset));  		}  		if (dwordle != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_dwordle (replyoffset));  		}  		sensor = s;  	} // command / raw command  	else if (basename == null) {  		var s = new OBD2Sensor ();  		if (value != null) {  			s.obdValue = p => evaluator (p.get (replyoffset));  		}  		if (word != null) {  			s.obdValue = p => evaluator (p.get_word (replyoffset));  		}  		sensor = s;  	}  	if (sensor != null && sensor is OBD2Sensor) {  		if (rawcommand != null)  			(sensor as OBD2Sensor).RawCommand = rawcommand;  		else if (command != 0)  			(sensor as OBD2Sensor).Command = command;  	}  	if (sensor != null) {  		sensor.ID = this.Namespace + "." + id;  		sensor.Name = id;  		//sensor.Display = display;  		if (units != null)  			sensor.Units = units;  		registry.Add (sensor);  	}  	reader.ReadEndElement ();  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: while (reader.NodeType == XmlNodeType.Element) {  	if (reader.Name == "include") {  		var name = reader.ReadElementString ().Trim ();  		var ecuinc = new ECUXMLSensorProvider (System.IO.Path.Combine (Path' name));  		ecuinc.init (registry);  		continue;  	}  	if (reader.Name != "parameter") {  		reader.ReadElementString ();  		continue;  	}  	var id = reader.GetAttribute ("id");  	var display = reader.GetAttribute ("display");  	reader.ReadStartElement ();  	int command = 0;  	string clazz = null;  	string rawcommand = null;  	string basename = null;  	string basenameraw = null;  	int replyoffset = 0;  	string units = null;  	string value = null;  	string word = null;  	string wordle = null;  	string dword = null;  	string dwordle = null;  	bool signed = false;  	double scale = 1;  	double offset = 0;  	int bit = -1;  	int? cutlow = null;  	int? cuthigh = null;  	while (reader.NodeType == XmlNodeType.Element) {  		try {  			switch (reader.Name) {  			case "class":  				clazz = reader.ReadElementString ().Trim ();  				break;  			case "address":  				reader.ReadStartElement ();  				var hexval = reader.ReadElementString ("byte").Trim ();  				if (hexval.StartsWith ("0x"))  					hexval = hexval.Substring (2);  				command = int.Parse (hexval' NumberStyles.HexNumber);  				reader.ReadEndElement ();  				break;  			case "raw":  				rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  				break;  			case "base":  				basename = reader.ReadElementString ().Trim ();  				break;  			case "base-raw":  				basenameraw = reader.ReadElementString ().Trim ();  				break;  			case "value":  			case "valuea":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 0;  				break;  			case "valueb":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 1;  				break;  			case "valuec":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 2;  				break;  			case "valued":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 3;  				break;  			case "valueab":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 0;  				break;  			case "valuebc":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 1;  				break;  			case "valuecd":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 2;  				break;  			case "signed":  				signed = true;  				reader.ReadElementString ();  				break;  			case "offset":  				offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  				break;  			case "bit":  				bit = int.Parse (reader.ReadElementString ());  				break;  			case "cut-low":  				cutlow = int.Parse (reader.ReadElementString ());  				break;  			case "cut-high":  				cuthigh = int.Parse (reader.ReadElementString ());  				break;  			case "description":  				reader.ReadStartElement ();  				while (reader.NodeType == XmlNodeType.Element) {  					switch (reader.Name) {  					case "unit":  						units = reader.ReadElementString ().Trim ();  						break;  					default:  						reader.ReadElementString ();  						break;  					}  				}  				reader.ReadEndElement ();  				break;  			default:  				if (reader.Name.StartsWith ("value-")) {  					replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  					value = reader.ReadElementContentAsString ();  					scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("word-")) {  					replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  					word = reader.ReadElementContentAsString ();  					scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("wordle-")) {  					replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  					wordle = reader.ReadElementContentAsString ();  					scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("dword-")) {  					replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  					dword = reader.ReadElementContentAsString ();  					scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("dwordle-")) {  					replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  					dwordle = reader.ReadElementContentAsString ();  					scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  				} else {  					throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  				}  				break;  			}  		} catch (Exception e) {  			Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  		}  	}  	Func<double' double> evaluator = v => {  		if (signed) {  			if (dword != null || dwordle != null)  				v = (double)(int)((uint)v);  			else if (word != null || wordle != null)  				v = (double)(short)((ushort)v);  			else  				v = (double)(sbyte)((byte)v);  		}  		var res = v * scale + offset;  		if (bit != -1)  			res = ((int)res >> bit) & 1;  		if (cutlow != null)  			res = res < cutlow ? 0 : res;  		if (cuthigh != null)  			res = res > cuthigh ? 0 : res;  		return res;  	};  	CoreSensor sensor = null;  	if (clazz != null) {  		sensor = (CoreSensor)registry.CreateObject (clazz);  	} // OBD2 derived sensor  	else if (basename != null) {  		// Custom derived sensor  		var s = new DerivedSensor (""' basename' null);  		if (value != null) {  			s.DerivedValue = (a' b) => evaluator (a.Value);  		}  		sensor = s;  	} // RAW data from base sensor  	else if (basenameraw != null) {  		// Custom derived sensor  		var s = new DerivedSensor (""' basenameraw' null);  		if (value != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw (replyoffset));  		}  		if (word != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_word (replyoffset));  		}  		if (wordle != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_wordle (replyoffset));  		}  		if (dword != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_dword (replyoffset));  		}  		if (dwordle != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_dwordle (replyoffset));  		}  		sensor = s;  	} // command / raw command  	else if (basename == null) {  		var s = new OBD2Sensor ();  		if (value != null) {  			s.obdValue = p => evaluator (p.get (replyoffset));  		}  		if (word != null) {  			s.obdValue = p => evaluator (p.get_word (replyoffset));  		}  		sensor = s;  	}  	if (sensor != null && sensor is OBD2Sensor) {  		if (rawcommand != null)  			(sensor as OBD2Sensor).RawCommand = rawcommand;  		else if (command != 0)  			(sensor as OBD2Sensor).Command = command;  	}  	if (sensor != null) {  		sensor.ID = this.Namespace + "." + id;  		sensor.Name = id;  		//sensor.Display = display;  		if (units != null)  			sensor.Units = units;  		registry.Add (sensor);  	}  	reader.ReadEndElement ();  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: while (reader.NodeType == XmlNodeType.Element) {  	if (reader.Name == "include") {  		var name = reader.ReadElementString ().Trim ();  		var ecuinc = new ECUXMLSensorProvider (System.IO.Path.Combine (Path' name));  		ecuinc.init (registry);  		continue;  	}  	if (reader.Name != "parameter") {  		reader.ReadElementString ();  		continue;  	}  	var id = reader.GetAttribute ("id");  	var display = reader.GetAttribute ("display");  	reader.ReadStartElement ();  	int command = 0;  	string clazz = null;  	string rawcommand = null;  	string basename = null;  	string basenameraw = null;  	int replyoffset = 0;  	string units = null;  	string value = null;  	string word = null;  	string wordle = null;  	string dword = null;  	string dwordle = null;  	bool signed = false;  	double scale = 1;  	double offset = 0;  	int bit = -1;  	int? cutlow = null;  	int? cuthigh = null;  	while (reader.NodeType == XmlNodeType.Element) {  		try {  			switch (reader.Name) {  			case "class":  				clazz = reader.ReadElementString ().Trim ();  				break;  			case "address":  				reader.ReadStartElement ();  				var hexval = reader.ReadElementString ("byte").Trim ();  				if (hexval.StartsWith ("0x"))  					hexval = hexval.Substring (2);  				command = int.Parse (hexval' NumberStyles.HexNumber);  				reader.ReadEndElement ();  				break;  			case "raw":  				rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  				break;  			case "base":  				basename = reader.ReadElementString ().Trim ();  				break;  			case "base-raw":  				basenameraw = reader.ReadElementString ().Trim ();  				break;  			case "value":  			case "valuea":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 0;  				break;  			case "valueb":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 1;  				break;  			case "valuec":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 2;  				break;  			case "valued":  				value = reader.ReadElementString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				replyoffset = 3;  				break;  			case "valueab":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 0;  				break;  			case "valuebc":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 1;  				break;  			case "valuecd":  				word = reader.ReadElementString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				replyoffset = 2;  				break;  			case "signed":  				signed = true;  				reader.ReadElementString ();  				break;  			case "offset":  				offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  				break;  			case "bit":  				bit = int.Parse (reader.ReadElementString ());  				break;  			case "cut-low":  				cutlow = int.Parse (reader.ReadElementString ());  				break;  			case "cut-high":  				cuthigh = int.Parse (reader.ReadElementString ());  				break;  			case "description":  				reader.ReadStartElement ();  				while (reader.NodeType == XmlNodeType.Element) {  					switch (reader.Name) {  					case "unit":  						units = reader.ReadElementString ().Trim ();  						break;  					default:  						reader.ReadElementString ();  						break;  					}  				}  				reader.ReadEndElement ();  				break;  			default:  				if (reader.Name.StartsWith ("value-")) {  					replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  					value = reader.ReadElementContentAsString ();  					scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("word-")) {  					replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  					word = reader.ReadElementContentAsString ();  					scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("wordle-")) {  					replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  					wordle = reader.ReadElementContentAsString ();  					scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("dword-")) {  					replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  					dword = reader.ReadElementContentAsString ();  					scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  				} else if (reader.Name.StartsWith ("dwordle-")) {  					replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  					dwordle = reader.ReadElementContentAsString ();  					scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  				} else {  					throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  				}  				break;  			}  		} catch (Exception e) {  			Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  		}  	}  	Func<double' double> evaluator = v => {  		if (signed) {  			if (dword != null || dwordle != null)  				v = (double)(int)((uint)v);  			else if (word != null || wordle != null)  				v = (double)(short)((ushort)v);  			else  				v = (double)(sbyte)((byte)v);  		}  		var res = v * scale + offset;  		if (bit != -1)  			res = ((int)res >> bit) & 1;  		if (cutlow != null)  			res = res < cutlow ? 0 : res;  		if (cuthigh != null)  			res = res > cuthigh ? 0 : res;  		return res;  	};  	CoreSensor sensor = null;  	if (clazz != null) {  		sensor = (CoreSensor)registry.CreateObject (clazz);  	} // OBD2 derived sensor  	else if (basename != null) {  		// Custom derived sensor  		var s = new DerivedSensor (""' basename' null);  		if (value != null) {  			s.DerivedValue = (a' b) => evaluator (a.Value);  		}  		sensor = s;  	} // RAW data from base sensor  	else if (basenameraw != null) {  		// Custom derived sensor  		var s = new DerivedSensor (""' basenameraw' null);  		if (value != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw (replyoffset));  		}  		if (word != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_word (replyoffset));  		}  		if (wordle != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_wordle (replyoffset));  		}  		if (dword != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_dword (replyoffset));  		}  		if (dwordle != null) {  			s.DerivedValue = (a' b) => evaluator ((a as OBD2Sensor).getraw_dwordle (replyoffset));  		}  		sensor = s;  	} // command / raw command  	else if (basename == null) {  		var s = new OBD2Sensor ();  		if (value != null) {  			s.obdValue = p => evaluator (p.get (replyoffset));  		}  		if (word != null) {  			s.obdValue = p => evaluator (p.get_word (replyoffset));  		}  		sensor = s;  	}  	if (sensor != null && sensor is OBD2Sensor) {  		if (rawcommand != null)  			(sensor as OBD2Sensor).RawCommand = rawcommand;  		else if (command != 0)  			(sensor as OBD2Sensor).Command = command;  	}  	if (sensor != null) {  		sensor.ID = this.Namespace + "." + id;  		sensor.Name = id;  		//sensor.Display = display;  		if (units != null)  			sensor.Units = units;  		registry.Add (sensor);  	}  	reader.ReadEndElement ();  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: while (reader.NodeType == XmlNodeType.Element) {  	try {  		switch (reader.Name) {  		case "class":  			clazz = reader.ReadElementString ().Trim ();  			break;  		case "address":  			reader.ReadStartElement ();  			var hexval = reader.ReadElementString ("byte").Trim ();  			if (hexval.StartsWith ("0x"))  				hexval = hexval.Substring (2);  			command = int.Parse (hexval' NumberStyles.HexNumber);  			reader.ReadEndElement ();  			break;  		case "raw":  			rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  			break;  		case "base":  			basename = reader.ReadElementString ().Trim ();  			break;  		case "base-raw":  			basenameraw = reader.ReadElementString ().Trim ();  			break;  		case "value":  		case "valuea":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 0;  			break;  		case "valueb":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 1;  			break;  		case "valuec":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 2;  			break;  		case "valued":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 3;  			break;  		case "valueab":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 0;  			break;  		case "valuebc":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 1;  			break;  		case "valuecd":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 2;  			break;  		case "signed":  			signed = true;  			reader.ReadElementString ();  			break;  		case "offset":  			offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  			break;  		case "bit":  			bit = int.Parse (reader.ReadElementString ());  			break;  		case "cut-low":  			cutlow = int.Parse (reader.ReadElementString ());  			break;  		case "cut-high":  			cuthigh = int.Parse (reader.ReadElementString ());  			break;  		case "description":  			reader.ReadStartElement ();  			while (reader.NodeType == XmlNodeType.Element) {  				switch (reader.Name) {  				case "unit":  					units = reader.ReadElementString ().Trim ();  					break;  				default:  					reader.ReadElementString ();  					break;  				}  			}  			reader.ReadEndElement ();  			break;  		default:  			if (reader.Name.StartsWith ("value-")) {  				replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  				value = reader.ReadElementContentAsString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("word-")) {  				replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  				word = reader.ReadElementContentAsString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("wordle-")) {  				replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  				wordle = reader.ReadElementContentAsString ();  				scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("dword-")) {  				replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  				dword = reader.ReadElementContentAsString ();  				scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("dwordle-")) {  				replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  				dwordle = reader.ReadElementContentAsString ();  				scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  			} else {  				throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  			}  			break;  		}  	} catch (Exception e) {  		Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  	}  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: while (reader.NodeType == XmlNodeType.Element) {  	try {  		switch (reader.Name) {  		case "class":  			clazz = reader.ReadElementString ().Trim ();  			break;  		case "address":  			reader.ReadStartElement ();  			var hexval = reader.ReadElementString ("byte").Trim ();  			if (hexval.StartsWith ("0x"))  				hexval = hexval.Substring (2);  			command = int.Parse (hexval' NumberStyles.HexNumber);  			reader.ReadEndElement ();  			break;  		case "raw":  			rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  			break;  		case "base":  			basename = reader.ReadElementString ().Trim ();  			break;  		case "base-raw":  			basenameraw = reader.ReadElementString ().Trim ();  			break;  		case "value":  		case "valuea":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 0;  			break;  		case "valueb":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 1;  			break;  		case "valuec":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 2;  			break;  		case "valued":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 3;  			break;  		case "valueab":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 0;  			break;  		case "valuebc":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 1;  			break;  		case "valuecd":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 2;  			break;  		case "signed":  			signed = true;  			reader.ReadElementString ();  			break;  		case "offset":  			offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  			break;  		case "bit":  			bit = int.Parse (reader.ReadElementString ());  			break;  		case "cut-low":  			cutlow = int.Parse (reader.ReadElementString ());  			break;  		case "cut-high":  			cuthigh = int.Parse (reader.ReadElementString ());  			break;  		case "description":  			reader.ReadStartElement ();  			while (reader.NodeType == XmlNodeType.Element) {  				switch (reader.Name) {  				case "unit":  					units = reader.ReadElementString ().Trim ();  					break;  				default:  					reader.ReadElementString ();  					break;  				}  			}  			reader.ReadEndElement ();  			break;  		default:  			if (reader.Name.StartsWith ("value-")) {  				replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  				value = reader.ReadElementContentAsString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("word-")) {  				replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  				word = reader.ReadElementContentAsString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("wordle-")) {  				replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  				wordle = reader.ReadElementContentAsString ();  				scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("dword-")) {  				replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  				dword = reader.ReadElementContentAsString ();  				scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("dwordle-")) {  				replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  				dwordle = reader.ReadElementContentAsString ();  				scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  			} else {  				throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  			}  			break;  		}  	} catch (Exception e) {  		Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  	}  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: while (reader.NodeType == XmlNodeType.Element) {  	try {  		switch (reader.Name) {  		case "class":  			clazz = reader.ReadElementString ().Trim ();  			break;  		case "address":  			reader.ReadStartElement ();  			var hexval = reader.ReadElementString ("byte").Trim ();  			if (hexval.StartsWith ("0x"))  				hexval = hexval.Substring (2);  			command = int.Parse (hexval' NumberStyles.HexNumber);  			reader.ReadEndElement ();  			break;  		case "raw":  			rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  			break;  		case "base":  			basename = reader.ReadElementString ().Trim ();  			break;  		case "base-raw":  			basenameraw = reader.ReadElementString ().Trim ();  			break;  		case "value":  		case "valuea":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 0;  			break;  		case "valueb":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 1;  			break;  		case "valuec":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 2;  			break;  		case "valued":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 3;  			break;  		case "valueab":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 0;  			break;  		case "valuebc":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 1;  			break;  		case "valuecd":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 2;  			break;  		case "signed":  			signed = true;  			reader.ReadElementString ();  			break;  		case "offset":  			offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  			break;  		case "bit":  			bit = int.Parse (reader.ReadElementString ());  			break;  		case "cut-low":  			cutlow = int.Parse (reader.ReadElementString ());  			break;  		case "cut-high":  			cuthigh = int.Parse (reader.ReadElementString ());  			break;  		case "description":  			reader.ReadStartElement ();  			while (reader.NodeType == XmlNodeType.Element) {  				switch (reader.Name) {  				case "unit":  					units = reader.ReadElementString ().Trim ();  					break;  				default:  					reader.ReadElementString ();  					break;  				}  			}  			reader.ReadEndElement ();  			break;  		default:  			if (reader.Name.StartsWith ("value-")) {  				replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  				value = reader.ReadElementContentAsString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("word-")) {  				replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  				word = reader.ReadElementContentAsString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("wordle-")) {  				replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  				wordle = reader.ReadElementContentAsString ();  				scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("dword-")) {  				replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  				dword = reader.ReadElementContentAsString ();  				scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("dwordle-")) {  				replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  				dwordle = reader.ReadElementContentAsString ();  				scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  			} else {  				throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  			}  			break;  		}  	} catch (Exception e) {  		Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  	}  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: while (reader.NodeType == XmlNodeType.Element) {  	try {  		switch (reader.Name) {  		case "class":  			clazz = reader.ReadElementString ().Trim ();  			break;  		case "address":  			reader.ReadStartElement ();  			var hexval = reader.ReadElementString ("byte").Trim ();  			if (hexval.StartsWith ("0x"))  				hexval = hexval.Substring (2);  			command = int.Parse (hexval' NumberStyles.HexNumber);  			reader.ReadEndElement ();  			break;  		case "raw":  			rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  			break;  		case "base":  			basename = reader.ReadElementString ().Trim ();  			break;  		case "base-raw":  			basenameraw = reader.ReadElementString ().Trim ();  			break;  		case "value":  		case "valuea":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 0;  			break;  		case "valueb":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 1;  			break;  		case "valuec":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 2;  			break;  		case "valued":  			value = reader.ReadElementString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			replyoffset = 3;  			break;  		case "valueab":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 0;  			break;  		case "valuebc":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 1;  			break;  		case "valuecd":  			word = reader.ReadElementString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			replyoffset = 2;  			break;  		case "signed":  			signed = true;  			reader.ReadElementString ();  			break;  		case "offset":  			offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  			break;  		case "bit":  			bit = int.Parse (reader.ReadElementString ());  			break;  		case "cut-low":  			cutlow = int.Parse (reader.ReadElementString ());  			break;  		case "cut-high":  			cuthigh = int.Parse (reader.ReadElementString ());  			break;  		case "description":  			reader.ReadStartElement ();  			while (reader.NodeType == XmlNodeType.Element) {  				switch (reader.Name) {  				case "unit":  					units = reader.ReadElementString ().Trim ();  					break;  				default:  					reader.ReadElementString ();  					break;  				}  			}  			reader.ReadEndElement ();  			break;  		default:  			if (reader.Name.StartsWith ("value-")) {  				replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  				value = reader.ReadElementContentAsString ();  				scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("word-")) {  				replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  				word = reader.ReadElementContentAsString ();  				scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("wordle-")) {  				replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  				wordle = reader.ReadElementContentAsString ();  				scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("dword-")) {  				replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  				dword = reader.ReadElementContentAsString ();  				scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  			} else if (reader.Name.StartsWith ("dwordle-")) {  				replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  				dwordle = reader.ReadElementContentAsString ();  				scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  			} else {  				throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  			}  			break;  		}  	} catch (Exception e) {  		Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  	}  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: try {  	switch (reader.Name) {  	case "class":  		clazz = reader.ReadElementString ().Trim ();  		break;  	case "address":  		reader.ReadStartElement ();  		var hexval = reader.ReadElementString ("byte").Trim ();  		if (hexval.StartsWith ("0x"))  			hexval = hexval.Substring (2);  		command = int.Parse (hexval' NumberStyles.HexNumber);  		reader.ReadEndElement ();  		break;  	case "raw":  		rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  		break;  	case "base":  		basename = reader.ReadElementString ().Trim ();  		break;  	case "base-raw":  		basenameraw = reader.ReadElementString ().Trim ();  		break;  	case "value":  	case "valuea":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 0;  		break;  	case "valueb":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 1;  		break;  	case "valuec":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 2;  		break;  	case "valued":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 3;  		break;  	case "valueab":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 0;  		break;  	case "valuebc":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 1;  		break;  	case "valuecd":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 2;  		break;  	case "signed":  		signed = true;  		reader.ReadElementString ();  		break;  	case "offset":  		offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  		break;  	case "bit":  		bit = int.Parse (reader.ReadElementString ());  		break;  	case "cut-low":  		cutlow = int.Parse (reader.ReadElementString ());  		break;  	case "cut-high":  		cuthigh = int.Parse (reader.ReadElementString ());  		break;  	case "description":  		reader.ReadStartElement ();  		while (reader.NodeType == XmlNodeType.Element) {  			switch (reader.Name) {  			case "unit":  				units = reader.ReadElementString ().Trim ();  				break;  			default:  				reader.ReadElementString ();  				break;  			}  		}  		reader.ReadEndElement ();  		break;  	default:  		if (reader.Name.StartsWith ("value-")) {  			replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  			value = reader.ReadElementContentAsString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("word-")) {  			replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  			word = reader.ReadElementContentAsString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("wordle-")) {  			replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  			wordle = reader.ReadElementContentAsString ();  			scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("dword-")) {  			replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  			dword = reader.ReadElementContentAsString ();  			scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("dwordle-")) {  			replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  			dwordle = reader.ReadElementContentAsString ();  			scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  		} else {  			throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  		}  		break;  	}  } catch (Exception e) {  	Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: try {  	switch (reader.Name) {  	case "class":  		clazz = reader.ReadElementString ().Trim ();  		break;  	case "address":  		reader.ReadStartElement ();  		var hexval = reader.ReadElementString ("byte").Trim ();  		if (hexval.StartsWith ("0x"))  			hexval = hexval.Substring (2);  		command = int.Parse (hexval' NumberStyles.HexNumber);  		reader.ReadEndElement ();  		break;  	case "raw":  		rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  		break;  	case "base":  		basename = reader.ReadElementString ().Trim ();  		break;  	case "base-raw":  		basenameraw = reader.ReadElementString ().Trim ();  		break;  	case "value":  	case "valuea":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 0;  		break;  	case "valueb":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 1;  		break;  	case "valuec":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 2;  		break;  	case "valued":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 3;  		break;  	case "valueab":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 0;  		break;  	case "valuebc":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 1;  		break;  	case "valuecd":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 2;  		break;  	case "signed":  		signed = true;  		reader.ReadElementString ();  		break;  	case "offset":  		offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  		break;  	case "bit":  		bit = int.Parse (reader.ReadElementString ());  		break;  	case "cut-low":  		cutlow = int.Parse (reader.ReadElementString ());  		break;  	case "cut-high":  		cuthigh = int.Parse (reader.ReadElementString ());  		break;  	case "description":  		reader.ReadStartElement ();  		while (reader.NodeType == XmlNodeType.Element) {  			switch (reader.Name) {  			case "unit":  				units = reader.ReadElementString ().Trim ();  				break;  			default:  				reader.ReadElementString ();  				break;  			}  		}  		reader.ReadEndElement ();  		break;  	default:  		if (reader.Name.StartsWith ("value-")) {  			replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  			value = reader.ReadElementContentAsString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("word-")) {  			replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  			word = reader.ReadElementContentAsString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("wordle-")) {  			replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  			wordle = reader.ReadElementContentAsString ();  			scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("dword-")) {  			replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  			dword = reader.ReadElementContentAsString ();  			scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("dwordle-")) {  			replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  			dwordle = reader.ReadElementContentAsString ();  			scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  		} else {  			throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  		}  		break;  	}  } catch (Exception e) {  	Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: try {  	switch (reader.Name) {  	case "class":  		clazz = reader.ReadElementString ().Trim ();  		break;  	case "address":  		reader.ReadStartElement ();  		var hexval = reader.ReadElementString ("byte").Trim ();  		if (hexval.StartsWith ("0x"))  			hexval = hexval.Substring (2);  		command = int.Parse (hexval' NumberStyles.HexNumber);  		reader.ReadEndElement ();  		break;  	case "raw":  		rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  		break;  	case "base":  		basename = reader.ReadElementString ().Trim ();  		break;  	case "base-raw":  		basenameraw = reader.ReadElementString ().Trim ();  		break;  	case "value":  	case "valuea":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 0;  		break;  	case "valueb":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 1;  		break;  	case "valuec":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 2;  		break;  	case "valued":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 3;  		break;  	case "valueab":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 0;  		break;  	case "valuebc":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 1;  		break;  	case "valuecd":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 2;  		break;  	case "signed":  		signed = true;  		reader.ReadElementString ();  		break;  	case "offset":  		offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  		break;  	case "bit":  		bit = int.Parse (reader.ReadElementString ());  		break;  	case "cut-low":  		cutlow = int.Parse (reader.ReadElementString ());  		break;  	case "cut-high":  		cuthigh = int.Parse (reader.ReadElementString ());  		break;  	case "description":  		reader.ReadStartElement ();  		while (reader.NodeType == XmlNodeType.Element) {  			switch (reader.Name) {  			case "unit":  				units = reader.ReadElementString ().Trim ();  				break;  			default:  				reader.ReadElementString ();  				break;  			}  		}  		reader.ReadEndElement ();  		break;  	default:  		if (reader.Name.StartsWith ("value-")) {  			replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  			value = reader.ReadElementContentAsString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("word-")) {  			replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  			word = reader.ReadElementContentAsString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("wordle-")) {  			replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  			wordle = reader.ReadElementContentAsString ();  			scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("dword-")) {  			replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  			dword = reader.ReadElementContentAsString ();  			scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("dwordle-")) {  			replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  			dwordle = reader.ReadElementContentAsString ();  			scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  		} else {  			throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  		}  		break;  	}  } catch (Exception e) {  	Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: try {  	switch (reader.Name) {  	case "class":  		clazz = reader.ReadElementString ().Trim ();  		break;  	case "address":  		reader.ReadStartElement ();  		var hexval = reader.ReadElementString ("byte").Trim ();  		if (hexval.StartsWith ("0x"))  			hexval = hexval.Substring (2);  		command = int.Parse (hexval' NumberStyles.HexNumber);  		reader.ReadEndElement ();  		break;  	case "raw":  		rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  		break;  	case "base":  		basename = reader.ReadElementString ().Trim ();  		break;  	case "base-raw":  		basenameraw = reader.ReadElementString ().Trim ();  		break;  	case "value":  	case "valuea":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 0;  		break;  	case "valueb":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 1;  		break;  	case "valuec":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 2;  		break;  	case "valued":  		value = reader.ReadElementString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		replyoffset = 3;  		break;  	case "valueab":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 0;  		break;  	case "valuebc":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 1;  		break;  	case "valuecd":  		word = reader.ReadElementString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		replyoffset = 2;  		break;  	case "signed":  		signed = true;  		reader.ReadElementString ();  		break;  	case "offset":  		offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  		break;  	case "bit":  		bit = int.Parse (reader.ReadElementString ());  		break;  	case "cut-low":  		cutlow = int.Parse (reader.ReadElementString ());  		break;  	case "cut-high":  		cuthigh = int.Parse (reader.ReadElementString ());  		break;  	case "description":  		reader.ReadStartElement ();  		while (reader.NodeType == XmlNodeType.Element) {  			switch (reader.Name) {  			case "unit":  				units = reader.ReadElementString ().Trim ();  				break;  			default:  				reader.ReadElementString ();  				break;  			}  		}  		reader.ReadEndElement ();  		break;  	default:  		if (reader.Name.StartsWith ("value-")) {  			replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  			value = reader.ReadElementContentAsString ();  			scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("word-")) {  			replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  			word = reader.ReadElementContentAsString ();  			scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("wordle-")) {  			replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  			wordle = reader.ReadElementContentAsString ();  			scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("dword-")) {  			replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  			dword = reader.ReadElementContentAsString ();  			scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  		} else if (reader.Name.StartsWith ("dwordle-")) {  			replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  			dwordle = reader.ReadElementContentAsString ();  			scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  		} else {  			throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  		}  		break;  	}  } catch (Exception e) {  	Logger.error ("ECUXMLSensorProvider"' "bad sensor param: " + id' e);  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: switch (reader.Name) {  case "class":  	clazz = reader.ReadElementString ().Trim ();  	break;  case "address":  	reader.ReadStartElement ();  	var hexval = reader.ReadElementString ("byte").Trim ();  	if (hexval.StartsWith ("0x"))  		hexval = hexval.Substring (2);  	command = int.Parse (hexval' NumberStyles.HexNumber);  	reader.ReadEndElement ();  	break;  case "raw":  	rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  	break;  case "base":  	basename = reader.ReadElementString ().Trim ();  	break;  case "base-raw":  	basenameraw = reader.ReadElementString ().Trim ();  	break;  case "value":  case "valuea":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 0;  	break;  case "valueb":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 1;  	break;  case "valuec":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 2;  	break;  case "valued":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 3;  	break;  case "valueab":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 0;  	break;  case "valuebc":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 1;  	break;  case "valuecd":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 2;  	break;  case "signed":  	signed = true;  	reader.ReadElementString ();  	break;  case "offset":  	offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  	break;  case "bit":  	bit = int.Parse (reader.ReadElementString ());  	break;  case "cut-low":  	cutlow = int.Parse (reader.ReadElementString ());  	break;  case "cut-high":  	cuthigh = int.Parse (reader.ReadElementString ());  	break;  case "description":  	reader.ReadStartElement ();  	while (reader.NodeType == XmlNodeType.Element) {  		switch (reader.Name) {  		case "unit":  			units = reader.ReadElementString ().Trim ();  			break;  		default:  			reader.ReadElementString ();  			break;  		}  	}  	reader.ReadEndElement ();  	break;  default:  	if (reader.Name.StartsWith ("value-")) {  		replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  		value = reader.ReadElementContentAsString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("word-")) {  		replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  		word = reader.ReadElementContentAsString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("wordle-")) {  		replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  		wordle = reader.ReadElementContentAsString ();  		scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("dword-")) {  		replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  		dword = reader.ReadElementContentAsString ();  		scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("dwordle-")) {  		replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  		dwordle = reader.ReadElementContentAsString ();  		scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  	} else {  		throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  	}  	break;  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: switch (reader.Name) {  case "class":  	clazz = reader.ReadElementString ().Trim ();  	break;  case "address":  	reader.ReadStartElement ();  	var hexval = reader.ReadElementString ("byte").Trim ();  	if (hexval.StartsWith ("0x"))  		hexval = hexval.Substring (2);  	command = int.Parse (hexval' NumberStyles.HexNumber);  	reader.ReadEndElement ();  	break;  case "raw":  	rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  	break;  case "base":  	basename = reader.ReadElementString ().Trim ();  	break;  case "base-raw":  	basenameraw = reader.ReadElementString ().Trim ();  	break;  case "value":  case "valuea":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 0;  	break;  case "valueb":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 1;  	break;  case "valuec":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 2;  	break;  case "valued":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 3;  	break;  case "valueab":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 0;  	break;  case "valuebc":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 1;  	break;  case "valuecd":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 2;  	break;  case "signed":  	signed = true;  	reader.ReadElementString ();  	break;  case "offset":  	offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  	break;  case "bit":  	bit = int.Parse (reader.ReadElementString ());  	break;  case "cut-low":  	cutlow = int.Parse (reader.ReadElementString ());  	break;  case "cut-high":  	cuthigh = int.Parse (reader.ReadElementString ());  	break;  case "description":  	reader.ReadStartElement ();  	while (reader.NodeType == XmlNodeType.Element) {  		switch (reader.Name) {  		case "unit":  			units = reader.ReadElementString ().Trim ();  			break;  		default:  			reader.ReadElementString ();  			break;  		}  	}  	reader.ReadEndElement ();  	break;  default:  	if (reader.Name.StartsWith ("value-")) {  		replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  		value = reader.ReadElementContentAsString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("word-")) {  		replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  		word = reader.ReadElementContentAsString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("wordle-")) {  		replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  		wordle = reader.ReadElementContentAsString ();  		scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("dword-")) {  		replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  		dword = reader.ReadElementContentAsString ();  		scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("dwordle-")) {  		replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  		dwordle = reader.ReadElementContentAsString ();  		scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  	} else {  		throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  	}  	break;  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: switch (reader.Name) {  case "class":  	clazz = reader.ReadElementString ().Trim ();  	break;  case "address":  	reader.ReadStartElement ();  	var hexval = reader.ReadElementString ("byte").Trim ();  	if (hexval.StartsWith ("0x"))  		hexval = hexval.Substring (2);  	command = int.Parse (hexval' NumberStyles.HexNumber);  	reader.ReadEndElement ();  	break;  case "raw":  	rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  	break;  case "base":  	basename = reader.ReadElementString ().Trim ();  	break;  case "base-raw":  	basenameraw = reader.ReadElementString ().Trim ();  	break;  case "value":  case "valuea":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 0;  	break;  case "valueb":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 1;  	break;  case "valuec":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 2;  	break;  case "valued":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 3;  	break;  case "valueab":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 0;  	break;  case "valuebc":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 1;  	break;  case "valuecd":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 2;  	break;  case "signed":  	signed = true;  	reader.ReadElementString ();  	break;  case "offset":  	offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  	break;  case "bit":  	bit = int.Parse (reader.ReadElementString ());  	break;  case "cut-low":  	cutlow = int.Parse (reader.ReadElementString ());  	break;  case "cut-high":  	cuthigh = int.Parse (reader.ReadElementString ());  	break;  case "description":  	reader.ReadStartElement ();  	while (reader.NodeType == XmlNodeType.Element) {  		switch (reader.Name) {  		case "unit":  			units = reader.ReadElementString ().Trim ();  			break;  		default:  			reader.ReadElementString ();  			break;  		}  	}  	reader.ReadEndElement ();  	break;  default:  	if (reader.Name.StartsWith ("value-")) {  		replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  		value = reader.ReadElementContentAsString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("word-")) {  		replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  		word = reader.ReadElementContentAsString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("wordle-")) {  		replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  		wordle = reader.ReadElementContentAsString ();  		scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("dword-")) {  		replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  		dword = reader.ReadElementContentAsString ();  		scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("dwordle-")) {  		replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  		dwordle = reader.ReadElementContentAsString ();  		scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  	} else {  		throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  	}  	break;  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: switch (reader.Name) {  case "class":  	clazz = reader.ReadElementString ().Trim ();  	break;  case "address":  	reader.ReadStartElement ();  	var hexval = reader.ReadElementString ("byte").Trim ();  	if (hexval.StartsWith ("0x"))  		hexval = hexval.Substring (2);  	command = int.Parse (hexval' NumberStyles.HexNumber);  	reader.ReadEndElement ();  	break;  case "raw":  	rawcommand = reader.ReadElementString ().Trim ().Replace (";"' "\r");  	break;  case "base":  	basename = reader.ReadElementString ().Trim ();  	break;  case "base-raw":  	basenameraw = reader.ReadElementString ().Trim ();  	break;  case "value":  case "valuea":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 0;  	break;  case "valueb":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 1;  	break;  case "valuec":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 2;  	break;  case "valued":  	value = reader.ReadElementString ();  	scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	replyoffset = 3;  	break;  case "valueab":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 0;  	break;  case "valuebc":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 1;  	break;  case "valuecd":  	word = reader.ReadElementString ();  	scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	replyoffset = 2;  	break;  case "signed":  	signed = true;  	reader.ReadElementString ();  	break;  case "offset":  	offset = double.Parse (reader.ReadElementString ()' UnitsConverter.DefaultNumberFormat);  	break;  case "bit":  	bit = int.Parse (reader.ReadElementString ());  	break;  case "cut-low":  	cutlow = int.Parse (reader.ReadElementString ());  	break;  case "cut-high":  	cuthigh = int.Parse (reader.ReadElementString ());  	break;  case "description":  	reader.ReadStartElement ();  	while (reader.NodeType == XmlNodeType.Element) {  		switch (reader.Name) {  		case "unit":  			units = reader.ReadElementString ().Trim ();  			break;  		default:  			reader.ReadElementString ();  			break;  		}  	}  	reader.ReadEndElement ();  	break;  default:  	if (reader.Name.StartsWith ("value-")) {  		replyoffset = int.Parse (reader.Name.Replace ("value-"' ""));  		value = reader.ReadElementContentAsString ();  		scale = double.Parse (value' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("word-")) {  		replyoffset = int.Parse (reader.Name.Replace ("word-"' ""));  		word = reader.ReadElementContentAsString ();  		scale = double.Parse (word' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("wordle-")) {  		replyoffset = int.Parse (reader.Name.Replace ("wordle-"' ""));  		wordle = reader.ReadElementContentAsString ();  		scale = double.Parse (wordle' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("dword-")) {  		replyoffset = int.Parse (reader.Name.Replace ("dword-"' ""));  		dword = reader.ReadElementContentAsString ();  		scale = double.Parse (dword' UnitsConverter.DefaultNumberFormat);  	} else if (reader.Name.StartsWith ("dwordle-")) {  		replyoffset = int.Parse (reader.Name.Replace ("dwordle-"' ""));  		dwordle = reader.ReadElementContentAsString ();  		scale = double.Parse (dwordle' UnitsConverter.DefaultNumberFormat);  	} else {  		throw new Exception ("unknown tag `" + reader.Name + "` while creating PID " + id);  	}  	break;  }  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: if (hexval.StartsWith ("0x"))  	hexval = hexval.Substring (2);  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: hexval = hexval.Substring (2);  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: replyoffset = 2;  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: replyoffset = 3;  
Magic Number,hobd,ECUXMLSensorProvider,F:\newReposMay17\cail_hobd\src\elm\ECUXMLSensorProvider.cs,init,The following statement contains a magic number: replyoffset = 2;  
Magic Number,hobd,Engine,F:\newReposMay17\cail_hobd\src\engine\Engine.cs,Engine,The following statement contains a magic number: this.ReconnectTimeout = 10000;  
Magic Number,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Open,The following statement contains a magic number: try {  	var parsed_url = ParseUrl (url);  	Logger.trace ("BluetoothStream"' "Open " + parsed_url [URL_ADDR] + " serviceid " + parsed_url [URL_SVC] + " pin " + parsed_url [URL_PIN]);  	try {  		BluetoothRadio.PrimaryRadio.Mode = RadioMode.Discoverable;  	} catch (Exception e) {  		Logger.error ("BluetoothStream"' "set_Mode"' e);  	}  	BluetoothAddress address = BluetoothAddress.Parse (parsed_url [URL_ADDR]);  	bluetoothClient = new BluetoothClient ();  	try {  		if (parsed_url [URL_PIN] != null) {  			bluetoothClient.SetPin (address' parsed_url [URL_PIN]);  		}  	} catch (Exception) {  		Logger.error ("BluetoothStream"' "SetPin");  	}  	#if xxBLUETOOTH_USE_PAIRREQUEST  	// advice from some user - but was useless. other user reported "unable to connecte because of this"             if (parsed_url[URL_PIN] != null)             try{                 for(var i = 0; i < 3; i++){                     var res = BluetoothSecurity.PairRequest(address' parsed_url[URL_PIN]);                     if (res)                         break;                     Logger.error("BluetoothStream"' "PairRequest failed' retry "+i);                 }             }catch(Exception){                 Logger.error("BluetoothStream"' "PairRequest");             } #endif  	BluetoothEndPoint btep;  	// force serviceid for some popular china BT adapters  	if (parsed_url [URL_SVC] == null && try_with_service) {  		parsed_url [URL_SVC] = "1";  	}  	if (parsed_url [URL_SVC] != null)  		btep = new BluetoothEndPoint (address' BluetoothService.SerialPort' int.Parse (parsed_url [URL_SVC]));  	else  		btep = new BluetoothEndPoint (address' BluetoothService.SerialPort);  	bluetoothClient.Connect (btep);  	stream = bluetoothClient.GetStream ();  	if (stream == null) {  		bluetoothClient.Close ();  		bluetoothClient = null;  	} else {  		if (stream.CanTimeout) {  			stream.WriteTimeout = 2;  			stream.ReadTimeout = 2;  		}  	}  } catch (Exception e) {  	if (bluetoothClient != null) {  		bluetoothClient.Close ();  		bluetoothClient = null;  	}  	if (!try_with_service) {  		try_with_service = true;  		Open (url);  		return;  	}  	throw;  }  
Magic Number,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Open,The following statement contains a magic number: try {  	var parsed_url = ParseUrl (url);  	Logger.trace ("BluetoothStream"' "Open " + parsed_url [URL_ADDR] + " serviceid " + parsed_url [URL_SVC] + " pin " + parsed_url [URL_PIN]);  	try {  		BluetoothRadio.PrimaryRadio.Mode = RadioMode.Discoverable;  	} catch (Exception e) {  		Logger.error ("BluetoothStream"' "set_Mode"' e);  	}  	BluetoothAddress address = BluetoothAddress.Parse (parsed_url [URL_ADDR]);  	bluetoothClient = new BluetoothClient ();  	try {  		if (parsed_url [URL_PIN] != null) {  			bluetoothClient.SetPin (address' parsed_url [URL_PIN]);  		}  	} catch (Exception) {  		Logger.error ("BluetoothStream"' "SetPin");  	}  	#if xxBLUETOOTH_USE_PAIRREQUEST  	// advice from some user - but was useless. other user reported "unable to connecte because of this"             if (parsed_url[URL_PIN] != null)             try{                 for(var i = 0; i < 3; i++){                     var res = BluetoothSecurity.PairRequest(address' parsed_url[URL_PIN]);                     if (res)                         break;                     Logger.error("BluetoothStream"' "PairRequest failed' retry "+i);                 }             }catch(Exception){                 Logger.error("BluetoothStream"' "PairRequest");             } #endif  	BluetoothEndPoint btep;  	// force serviceid for some popular china BT adapters  	if (parsed_url [URL_SVC] == null && try_with_service) {  		parsed_url [URL_SVC] = "1";  	}  	if (parsed_url [URL_SVC] != null)  		btep = new BluetoothEndPoint (address' BluetoothService.SerialPort' int.Parse (parsed_url [URL_SVC]));  	else  		btep = new BluetoothEndPoint (address' BluetoothService.SerialPort);  	bluetoothClient.Connect (btep);  	stream = bluetoothClient.GetStream ();  	if (stream == null) {  		bluetoothClient.Close ();  		bluetoothClient = null;  	} else {  		if (stream.CanTimeout) {  			stream.WriteTimeout = 2;  			stream.ReadTimeout = 2;  		}  	}  } catch (Exception e) {  	if (bluetoothClient != null) {  		bluetoothClient.Close ();  		bluetoothClient = null;  	}  	if (!try_with_service) {  		try_with_service = true;  		Open (url);  		return;  	}  	throw;  }  
Magic Number,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Open,The following statement contains a magic number: if (stream == null) {  	bluetoothClient.Close ();  	bluetoothClient = null;  } else {  	if (stream.CanTimeout) {  		stream.WriteTimeout = 2;  		stream.ReadTimeout = 2;  	}  }  
Magic Number,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Open,The following statement contains a magic number: if (stream == null) {  	bluetoothClient.Close ();  	bluetoothClient = null;  } else {  	if (stream.CanTimeout) {  		stream.WriteTimeout = 2;  		stream.ReadTimeout = 2;  	}  }  
Magic Number,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Open,The following statement contains a magic number: if (stream.CanTimeout) {  	stream.WriteTimeout = 2;  	stream.ReadTimeout = 2;  }  
Magic Number,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Open,The following statement contains a magic number: if (stream.CanTimeout) {  	stream.WriteTimeout = 2;  	stream.ReadTimeout = 2;  }  
Magic Number,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Open,The following statement contains a magic number: stream.WriteTimeout = 2;  
Magic Number,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Open,The following statement contains a magic number: stream.ReadTimeout = 2;  
Magic Number,hobd,BluetoothStream,F:\newReposMay17\cail_hobd\src\stream\BlueToothStream.cs,Read,The following statement contains a magic number: if (bluetoothClient != null) {  	byte[] buf = new byte[1024];  	int len;  	try {  		len = stream.Read (buf' 0' buf.Length);  	} catch (System.IO.IOException) {  		bluetoothClient = null;  		return null;  	}  	byte[] outputData_ = new byte[len];  	Array.Copy (buf' 0' outputData_' 0' len);  	return outputData_;  }  
Magic Number,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,Open,The following statement contains a magic number: Logger.trace ("SerialStream"' "Port " + u [0] + " baud " + u [1] + " parity " + u [2] + " hs " + u [3]);  
Magic Number,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,Open,The following statement contains a magic number: Logger.trace ("SerialStream"' "Port " + u [0] + " baud " + u [1] + " parity " + u [2] + " hs " + u [3]);  
Magic Number,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,Open,The following statement contains a magic number: port.ReadTimeout = 2000;  
Magic Number,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,Open,The following statement contains a magic number: port.WriteTimeout = 2000;  
Magic Number,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,DataReceviedHandler,The following statement contains a magic number: try {  	read = port.Read (sbuf' 0' 128);  } catch (Exception ex) {  	Logger.error ("SerialPort"' "port.Read failed"' ex);  	return;  }  
Magic Number,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,DataReceviedHandler,The following statement contains a magic number: read = port.Read (sbuf' 0' 128);  
Magic Number,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Open,The following statement contains a magic number: Logger.trace ("SerialStream"' "Port " + u [0] + " baud " + u [1] + " parity " + u [2] + " hs " + u [3]);  
Magic Number,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Open,The following statement contains a magic number: Logger.trace ("SerialStream"' "Port " + u [0] + " baud " + u [1] + " parity " + u [2] + " hs " + u [3]);  
Magic Number,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Open,The following statement contains a magic number: try {  	port = new SerialPort (u [URL_PORT]' baudRate' parity' dataBits' stopBits);  	switch (u [URL_HANDSHAKE]) {  	case "none":  		port.Handshake = Handshake.None;  		break;  	case "x":  		port.Handshake = Handshake.XOnXOff;  		break;  	case "rts":  		port.Handshake = Handshake.RequestToSend;  		break;  	case "xrts":  		port.Handshake = Handshake.RequestToSendXOnXOff;  		break;  	}  	port.ReadBufferSize = 0x40;  	port.ReceivedBytesThreshold = 1;  	port.ReadTimeout = 2000;  	port.WriteTimeout = 2000;  } catch (Exception) {  }  
Magic Number,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Open,The following statement contains a magic number: try {  	port = new SerialPort (u [URL_PORT]' baudRate' parity' dataBits' stopBits);  	switch (u [URL_HANDSHAKE]) {  	case "none":  		port.Handshake = Handshake.None;  		break;  	case "x":  		port.Handshake = Handshake.XOnXOff;  		break;  	case "rts":  		port.Handshake = Handshake.RequestToSend;  		break;  	case "xrts":  		port.Handshake = Handshake.RequestToSendXOnXOff;  		break;  	}  	port.ReadBufferSize = 0x40;  	port.ReceivedBytesThreshold = 1;  	port.ReadTimeout = 2000;  	port.WriteTimeout = 2000;  } catch (Exception) {  }  
Magic Number,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Open,The following statement contains a magic number: port.ReadTimeout = 2000;  
Magic Number,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Open,The following statement contains a magic number: port.WriteTimeout = 2000;  
Magic Number,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Read,The following statement contains a magic number: try {  	read = port.Read (sbuf' 0' 128);  } catch (Exception ex) {  	Close ();  	Logger.error ("SerialPort"' "port.Read failed"' ex);  	return null;  }  
Magic Number,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Read,The following statement contains a magic number: read = port.Read (sbuf' 0' 128);  
Magic Number,hobd,DateTimeMs,F:\newReposMay17\cail_hobd\src\util\DateTimeMs.cs,DateTimeMs,The following statement contains a magic number: DateTimeMs.TimeScaleThousands = 1000;  
Magic Number,hobd,DateTimeMs,F:\newReposMay17\cail_hobd\src\util\DateTimeMs.cs,CalculateOffset,The following statement contains a magic number: while (true) {  	int s2 = DateTime.Now.Second;  	// wait for a rollover  	if (s != s2) {  		m_offset = (int)(DateTimeMs.TickCount % 1000);  		break;  	}  }  
Magic Number,hobd,DateTimeMs,F:\newReposMay17\cail_hobd\src\util\DateTimeMs.cs,CalculateOffset,The following statement contains a magic number: if (s != s2) {  	m_offset = (int)(DateTimeMs.TickCount % 1000);  	break;  }  
Magic Number,hobd,DateTimeMs,F:\newReposMay17\cail_hobd\src\util\DateTimeMs.cs,CalculateOffset,The following statement contains a magic number: m_offset = (int)(DateTimeMs.TickCount % 1000);  
Magic Number,hobd,DateTimeMs,F:\newReposMay17\cail_hobd\src\util\DateTimeMs.cs,Reset,The following statement contains a magic number: systemStartMS = (DateTime.Now - new TimeSpan ((long)(DateTimeMs.TickCount) * 10000)).Ticks / 10000;  
Magic Number,hobd,DateTimeMs,F:\newReposMay17\cail_hobd\src\util\DateTimeMs.cs,Reset,The following statement contains a magic number: systemStartMS = (DateTime.Now - new TimeSpan ((long)(DateTimeMs.TickCount) * 10000)).Ticks / 10000;  
Magic Number,hobd,DateTimeMs,F:\newReposMay17\cail_hobd\src\util\DateTimeMs.cs,ResetTo,The following statement contains a magic number: systemStartMS = (to.Ticks / 10000 - (long)DateTimeMs.TickCount);  
Magic Number,hobd,DateTimeMs,F:\newReposMay17\cail_hobd\src\util\DateTimeMs.cs,ToDateTime,The following statement contains a magic number: return new DateTime (ts * 10000);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("fahrenheit-celsius"' v => (v - 32) * 5 / 9);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("fahrenheit-celsius"' v => (v - 32) * 5 / 9);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("fahrenheit-celsius"' v => (v - 32) * 5 / 9);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("celsius-fahrenheit"' v => v * 9 / 5 + 32);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("celsius-fahrenheit"' v => v * 9 / 5 + 32);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("celsius-fahrenheit"' v => v * 9 / 5 + 32);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("km-miles"' v => v / 1.609);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("miles-km"' v => v * 1.609);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("kw-hp"' v => v / 0.745);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("hp-kw"' v => v * 0.745);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("Nm-lbft"' v => v * 0.7375621);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("lbft-Nm"' v => v / 0.7375621);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("liters-gallons"' v => v / 3.785);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("gallons-liters"' v => v * 3.785);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("liters-ukgallons"' v => v / 4.546);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("ukgallons-liters"' v => v * 4.546);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("lph-kmpl"' v => 100 / v);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("kmpl-lph"' v => 100 / v);  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("mpg-lph"' v => 100 / (v * 1.609 / 3.785));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("mpg-lph"' v => 100 / (v * 1.609 / 3.785));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("mpg-lph"' v => 100 / (v * 1.609 / 3.785));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("lph-mpg"' v => 100 / (v * 1.609 / 3.785));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("lph-mpg"' v => 100 / (v * 1.609 / 3.785));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("lph-mpg"' v => 100 / (v * 1.609 / 3.785));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("ukmpg-lph"' v => 100 / (v * 1.609 / 4.546));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("ukmpg-lph"' v => 100 / (v * 1.609 / 4.546));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("ukmpg-lph"' v => 100 / (v * 1.609 / 4.546));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("lph-ukmpg"' v => 100 / (v * 1.609 / 4.546));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("lph-ukmpg"' v => 100 / (v * 1.609 / 4.546));  
Magic Number,hobd,UnitsConverter,F:\newReposMay17\cail_hobd\src\util\UnitsConverter.cs,UnitsConverter,The following statement contains a magic number: conversions.Add ("lph-ukmpg"' v => 100 / (v * 1.609 / 4.546));  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: try {  	Directory.GetFiles (filePath' fileMask).ToList ().ForEach (f => {  		var sr = new StreamReader (new FileStream (f' FileMode.Open));  		while (true) {  			var line = sr.ReadLine ();  			if (line == null)  				break;  			if (line.Length < 6 || line [5] != ' ')  				continue;  			var cur_dtc = line.Substring (0' 5);  			if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  				if (!result.ContainsKey (cur_dtc))  					result.Add (cur_dtc' new List<string> ());  				result [cur_dtc].Add (line.Substring (6).Trim ());  			}  		}  		sr.Close ();  	});  } catch (Exception e) {  	Logger.error ("DTCTools"' "failed"' e);  }  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: try {  	Directory.GetFiles (filePath' fileMask).ToList ().ForEach (f => {  		var sr = new StreamReader (new FileStream (f' FileMode.Open));  		while (true) {  			var line = sr.ReadLine ();  			if (line == null)  				break;  			if (line.Length < 6 || line [5] != ' ')  				continue;  			var cur_dtc = line.Substring (0' 5);  			if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  				if (!result.ContainsKey (cur_dtc))  					result.Add (cur_dtc' new List<string> ());  				result [cur_dtc].Add (line.Substring (6).Trim ());  			}  		}  		sr.Close ();  	});  } catch (Exception e) {  	Logger.error ("DTCTools"' "failed"' e);  }  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: try {  	Directory.GetFiles (filePath' fileMask).ToList ().ForEach (f => {  		var sr = new StreamReader (new FileStream (f' FileMode.Open));  		while (true) {  			var line = sr.ReadLine ();  			if (line == null)  				break;  			if (line.Length < 6 || line [5] != ' ')  				continue;  			var cur_dtc = line.Substring (0' 5);  			if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  				if (!result.ContainsKey (cur_dtc))  					result.Add (cur_dtc' new List<string> ());  				result [cur_dtc].Add (line.Substring (6).Trim ());  			}  		}  		sr.Close ();  	});  } catch (Exception e) {  	Logger.error ("DTCTools"' "failed"' e);  }  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: try {  	Directory.GetFiles (filePath' fileMask).ToList ().ForEach (f => {  		var sr = new StreamReader (new FileStream (f' FileMode.Open));  		while (true) {  			var line = sr.ReadLine ();  			if (line == null)  				break;  			if (line.Length < 6 || line [5] != ' ')  				continue;  			var cur_dtc = line.Substring (0' 5);  			if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  				if (!result.ContainsKey (cur_dtc))  					result.Add (cur_dtc' new List<string> ());  				result [cur_dtc].Add (line.Substring (6).Trim ());  			}  		}  		sr.Close ();  	});  } catch (Exception e) {  	Logger.error ("DTCTools"' "failed"' e);  }  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: Directory.GetFiles (filePath' fileMask).ToList ().ForEach (f => {  	var sr = new StreamReader (new FileStream (f' FileMode.Open));  	while (true) {  		var line = sr.ReadLine ();  		if (line == null)  			break;  		if (line.Length < 6 || line [5] != ' ')  			continue;  		var cur_dtc = line.Substring (0' 5);  		if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  			if (!result.ContainsKey (cur_dtc))  				result.Add (cur_dtc' new List<string> ());  			result [cur_dtc].Add (line.Substring (6).Trim ());  		}  	}  	sr.Close ();  });  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: Directory.GetFiles (filePath' fileMask).ToList ().ForEach (f => {  	var sr = new StreamReader (new FileStream (f' FileMode.Open));  	while (true) {  		var line = sr.ReadLine ();  		if (line == null)  			break;  		if (line.Length < 6 || line [5] != ' ')  			continue;  		var cur_dtc = line.Substring (0' 5);  		if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  			if (!result.ContainsKey (cur_dtc))  				result.Add (cur_dtc' new List<string> ());  			result [cur_dtc].Add (line.Substring (6).Trim ());  		}  	}  	sr.Close ();  });  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: Directory.GetFiles (filePath' fileMask).ToList ().ForEach (f => {  	var sr = new StreamReader (new FileStream (f' FileMode.Open));  	while (true) {  		var line = sr.ReadLine ();  		if (line == null)  			break;  		if (line.Length < 6 || line [5] != ' ')  			continue;  		var cur_dtc = line.Substring (0' 5);  		if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  			if (!result.ContainsKey (cur_dtc))  				result.Add (cur_dtc' new List<string> ());  			result [cur_dtc].Add (line.Substring (6).Trim ());  		}  	}  	sr.Close ();  });  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: Directory.GetFiles (filePath' fileMask).ToList ().ForEach (f => {  	var sr = new StreamReader (new FileStream (f' FileMode.Open));  	while (true) {  		var line = sr.ReadLine ();  		if (line == null)  			break;  		if (line.Length < 6 || line [5] != ' ')  			continue;  		var cur_dtc = line.Substring (0' 5);  		if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  			if (!result.ContainsKey (cur_dtc))  				result.Add (cur_dtc' new List<string> ());  			result [cur_dtc].Add (line.Substring (6).Trim ());  		}  	}  	sr.Close ();  });  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: while (true) {  	var line = sr.ReadLine ();  	if (line == null)  		break;  	if (line.Length < 6 || line [5] != ' ')  		continue;  	var cur_dtc = line.Substring (0' 5);  	if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  		if (!result.ContainsKey (cur_dtc))  			result.Add (cur_dtc' new List<string> ());  		result [cur_dtc].Add (line.Substring (6).Trim ());  	}  }  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: while (true) {  	var line = sr.ReadLine ();  	if (line == null)  		break;  	if (line.Length < 6 || line [5] != ' ')  		continue;  	var cur_dtc = line.Substring (0' 5);  	if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  		if (!result.ContainsKey (cur_dtc))  			result.Add (cur_dtc' new List<string> ());  		result [cur_dtc].Add (line.Substring (6).Trim ());  	}  }  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: while (true) {  	var line = sr.ReadLine ();  	if (line == null)  		break;  	if (line.Length < 6 || line [5] != ' ')  		continue;  	var cur_dtc = line.Substring (0' 5);  	if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  		if (!result.ContainsKey (cur_dtc))  			result.Add (cur_dtc' new List<string> ());  		result [cur_dtc].Add (line.Substring (6).Trim ());  	}  }  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: while (true) {  	var line = sr.ReadLine ();  	if (line == null)  		break;  	if (line.Length < 6 || line [5] != ' ')  		continue;  	var cur_dtc = line.Substring (0' 5);  	if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  		if (!result.ContainsKey (cur_dtc))  			result.Add (cur_dtc' new List<string> ());  		result [cur_dtc].Add (line.Substring (6).Trim ());  	}  }  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: if (line.Length < 6 || line [5] != ' ')  	continue;  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: if (line.Length < 6 || line [5] != ' ')  	continue;  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: if (dtcs.FirstOrDefault (dtc => dtc == cur_dtc) != null) {  	if (!result.ContainsKey (cur_dtc))  		result.Add (cur_dtc' new List<string> ());  	result [cur_dtc].Add (line.Substring (6).Trim ());  }  
Magic Number,hobd,DTCTools,F:\newReposMay17\cail_hobd\src\util\DTCTools.cs,Decode,The following statement contains a magic number: result [cur_dtc].Add (line.Substring (6).Trim ());  
Magic Number,hobd,TCPStream,F:\newReposMay17\cail_hobd\src\stream\TCPStream.cs,ParseUrl,The following statement contains a magic number: return new string[] {  	match.Groups [1].Value'  	match.Groups [2].Value  };  
Magic Number,hobd,NetworkHelper,F:\newReposMay17\cail_hobd\src\NetworkHelper.cs,SendPost,The following statement contains a magic number: using (Stream stream = wr.GetRequestStream ()) {  	int num;  	byte[] buffer = new byte[256];  	while ((num = body.Read (buffer' 0' buffer.Length)) != 0) {  		stream.Write (buffer' 0' num);  	}  }  
Magic Number,hobd.elm.injector,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\injector\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = rpm.Value / 60 * cylinders * ipw.Value * 0.001 * injectorccpm / 60 / 1000;  
Magic Number,hobd.elm.injector,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\injector\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = rpm.Value / 60 * cylinders * ipw.Value * 0.001 * injectorccpm / 60 / 1000;  
Magic Number,hobd.elm.injector,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\injector\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = rpm.Value / 60 * cylinders * ipw.Value * 0.001 * injectorccpm / 60 / 1000;  
Magic Number,hobd.elm.injector,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\injector\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = rpm.Value / 60 * cylinders * ipw.Value * 0.001 * injectorccpm / 60 / 1000;  
Magic Number,hobd.elm.injector,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\injector\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = Value * 3600;  
Magic Number,hobd.elm.maf,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\maf\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = maf.Value / (stoich * 454 * 6.17 / 3.78);  
Magic Number,hobd.elm.maf,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\maf\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = maf.Value / (stoich * 454 * 6.17 / 3.78);  
Magic Number,hobd.elm.maf,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\maf\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = maf.Value / (stoich * 454 * 6.17 / 3.78);  
Magic Number,hobd.elm.maf,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\maf\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = Value * 3600;  
Magic Number,hobd.elm.map,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\map\LitersPerHourSensor.cs,Activate,The following statement contains a magic number: registry.AddListener (iat' OnSensorChange' 3000 + ListenInterval);  
Magic Number,hobd.elm.map,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\map\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = maf / (stoich * 454 * 6.17 / 3.78) * 3600;  
Magic Number,hobd.elm.map,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\map\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = maf / (stoich * 454 * 6.17 / 3.78) * 3600;  
Magic Number,hobd.elm.map,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\map\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = maf / (stoich * 454 * 6.17 / 3.78) * 3600;  
Magic Number,hobd.elm.map,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\map\LitersPerHourSensor.cs,OnSensorChange,The following statement contains a magic number: Value = maf / (stoich * 454 * 6.17 / 3.78) * 3600;  
Magic Number,hobd.elm.load,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\load\LitersPerHourSensor.cs,SetRegistry,The following statement contains a magic number: if (default_matrix.Length > 1) {  	rpm_matrix = default_matrix.Split (new char[] {  		''''  		' '  	}).Where (v => v != "").Select (v => double.Parse (v' UnitsConverter.DefaultNumberFormat)).ToArray ();  	rpm_step = 10000 / rpm_matrix.Length;  }  
Magic Number,hobd.elm.load,LitersPerHourSensor,F:\newReposMay17\cail_hobd\src\elm\load\LitersPerHourSensor.cs,SetRegistry,The following statement contains a magic number: rpm_step = 10000 / rpm_matrix.Length;  
Missing Default,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,SetState,The following switch statement is missing a default case: switch (State) {  case ST_INIT_HW:  	Error = null;  	try {  		stream.Close ();  		Logger.info ("OBD2Engine"' "Open " + url);  		Thread.Sleep (100);  		stream.Open (url);  	} catch (Exception e) {  		Error = e.Message;  		Logger.error ("OBD2Engine"' "Init Error"' e);  		SetState (ST_ERROR);  		break;  	}  	PurgeStream ();  	SetState (ST_INIT);  	break;  case ST_INIT:  	extraInitCommands.Clear ();  	extraInitIndex = 0;  	if (CriticalError) {  		CriticalError = false;  		// trigger protocol autosearch TODO: conflicts with some settings' f.e. ATFI setup  		//extraInitCommands.Add("ATSP 0");  	}  	if (initData != null) {  		initData.Split (new char[] {  			';'  		}).ToList ().ForEach (s => {  			var cmd = s.Trim ();  			if (cmd.Length > 0)  				extraInitCommands.Add (cmd);  		});  	}  	SensorInitIndex = 0;  	SetState (ST_ATZ);  	break;  case ST_ATZ:  	SendCommand ("ATZ");  	break;  case ST_ATE0:  	SendCommand ("ATE0");  	break;  case ST_ATL0:  	SendCommand ("ATL0");  	break;  case ST_EXTRAINIT:  	if (extraInitIndex >= extraInitCommands.Count ()) {  		SetState (ST_SENSOR_INIT);  	} else {  		SendCommand (extraInitCommands [extraInitIndex]);  		StateDetails = State + " " + this.extraInitCommands [this.extraInitIndex];  		extraInitIndex++;  	}  	break;  case ST_SENSOR_INIT:  	SendCommand ("01" + SensorInitIndex.ToString ("X2"));  	break;  case ST_QUERY_PROTOCOL:  	SendCommand ("ATDPN");  	break;  case ST_SENSOR:  	var sls = Registry.ActiveSensors;  	if (sls.Length == 0) {  		if (Logger.TRACE)  			Logger.trace ("OBD2Engine"' " no active sensors ");  		break;  	}  	currentSensorIndex++;  	if (currentSensorIndex >= sls.Length)  		currentSensorIndex = 0;  	int scanSensorIndex = currentSensorIndex;  	while (true) {  		currentSensorListener = sls [currentSensorIndex];  		// recreate reading timers if layout was changed!  		if (nextReadings == null || nextReadings.Length != sls.Length) {  			nextReadings = new long[sls.Length];  		}  		long nextReading = nextReadings [currentSensorIndex];  		if (nextReading == 0 || nextReading <= DateTimeMs.Now) {  			if (currentSensorListener.sensor is OBD2Sensor) {  				if (Logger.TRACE)  					Logger.trace ("OBD2Engine"' " ----> " + currentSensorListener.sensor.ID);  				var osensor = (OBD2Sensor)currentSensorListener.sensor;  				var cmd = osensor.RawCommand;  				if (cmd != null) {  					LinesSent = SendCommand (cmd);  					SetState (ST_SENSOR_ACK);  					break;  				} else {  					// move to next sensor  				}  			}  		} else {  			if (Logger.DUMP)  				Logger.dump ("OBD2Engine"' " Skipped " + currentSensorListener.sensor.ID + " with " + (nextReading - DateTimeMs.Now));  		}  		currentSensorIndex++;  		if (currentSensorIndex >= sls.Length)  			currentSensorIndex = 0;  		if (currentSensorIndex == scanSensorIndex)  			break;  	}  	break;  }  
Missing Default,hobd,OBD2Engine,F:\newReposMay17\cail_hobd\src\elm\OBD2Engine.cs,HandleReply,The following switch statement is missing a default case: switch (State) {  case ST_INIT:  	break;  case ST_ATZ:  	if (smsg.Contains ("ATZ") || smsg.Contains ("ELM")) {  		VersionInfo = smsg.Replace ("ATZ"' "").Replace ("\r"' "").Replace ("\n"' "").Trim ();  		Logger.log ("INFO"' "OBD2Engine"' "VersionInfo: " + VersionInfo' null);  		if (VersionInfo.Length > 2) {  			criticalErrors [0] = VersionInfo;  		}  		SetState (ST_ATE0);  	} else {  		SendCommand ("ATZ");  	}  	break;  case ST_ATE0:  	if (smsg.Contains ("OK")) {  		SetState (ST_ATL0);  	}  	break;  case ST_ATL0:  	if (smsg.Contains ("OK")) {  		SetState (ST_EXTRAINIT);  	}  	break;  case ST_EXTRAINIT:  	SetState (ST_EXTRAINIT);  	break;  case ST_SENSOR_INIT:  	Error = criticalErrors.FirstOrDefault (e => smsg.Contains (e));  	if (Error != null) {  		Logger.error ("OBD2Engine"' "Critical error on sensor init:" + smsg);  		// Wait and then do soft reconnect  		SetState (ST_ERROR_SOFT);  		StateDetails = State + " " + Error;  	} else {  		Logger.log ("INFO"' "OBD2Engine"' "Sensor Init:" + smsg' null);  		//PIDSupported.SetValue(msg);  		SetState (ST_QUERY_PROTOCOL);  	}  	break;  case ST_QUERY_PROTOCOL:  	try {  		var proto = smsg.Replace ("A"' "");  		ProtocolId = int.Parse (proto' NumberStyles.HexNumber);  	} catch (Exception) {  		Logger.error ("OBD2Engine"' "protocol " + smsg);  	}  	Logger.log ("INFO"' "OBD2Engine"' "ProtocolId: " + ProtocolId' null);  	Registry.ProtocolId = ProtocolId;  	SetState (ST_SENSOR);  	break;  case ST_SENSOR_ACK:  	// saving local copy  	var lsl = currentSensorListener;  	var osensor = (OBD2Sensor)lsl.sensor;  	nextReadings [currentSensorIndex] = DateTimeMs.Now + lsl.period + (1000 * Math.Min (10' lsl.failures));  	// proactively read next sensor!  	SetState (ST_SENSOR);  	// valid reply - set value' raise listeners  	if (osensor.SetRawValue (msg)) {  		subsequentErrors = 0;  		lsl.failures = 0;  		this.Error = null;  	} else {  		// search for known errors' increment counters  		string error = dataErrors.FirstOrDefault (e => smsg.Contains (e));  		if (error != null) {  			this.Error = this.Error == null ? error : this.Error + " " + error;  			// increase period for this 'bad' sensor  			if (subsequentErrors == 0) {  				Logger.info ("OBD2Engine"' "sensor not responding' increasing period: " + osensor.ID);  				// !!!! VAZ.Core fail otherwise  				lsl.failures++;  				//lsl.period = unchecked((lsl.period +100) * 2);  			}  			subsequentErrors++;  		} else {  			error = criticalErrors.FirstOrDefault (e => smsg.Contains (e));  			if (error != null) {  				this.Error = error;  				this.CriticalError = true;  				Logger.error ("OBD2Engine"' "Critical error:" + smsg);  				SetState (ST_ERROR_SOFT);  				subsequentErrors = 0;  			}  		}  	}  	// act on too much errors  	if (subsequentErrors > ErrorThreshold) {  		Logger.error ("OBD2Engine"' "Connection error threshold");  		this.Error = "Connection error threshold";  		subsequentErrors = 0;  		this.CriticalError = true;  		SetState (ST_ERROR_SOFT);  	}  	break;  }  
Missing Default,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,Open,The following switch statement is missing a default case: switch (u [URL_PARITY]) {  case "none":  	parity = Parity.None;  	break;  case "odd":  	parity = Parity.Odd;  	break;  case "even":  	parity = Parity.Even;  	break;  case "mark":  	parity = Parity.Mark;  	break;  case "space":  	parity = Parity.Space;  	break;  }  
Missing Default,hobd,SerialStream,F:\newReposMay17\cail_hobd\src\stream\SerialStream.cs,Open,The following switch statement is missing a default case: switch (u [URL_HANDSHAKE]) {  case "none":  	port.Handshake = Handshake.None;  	break;  case "x":  	port.Handshake = Handshake.XOnXOff;  	break;  case "rts":  	port.Handshake = Handshake.RequestToSend;  	break;  case "xrts":  	port.Handshake = Handshake.RequestToSendXOnXOff;  	break;  }  
Missing Default,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Open,The following switch statement is missing a default case: switch (u [URL_PARITY]) {  case "none":  	parity = Parity.None;  	break;  case "odd":  	parity = Parity.Odd;  	break;  case "even":  	parity = Parity.Even;  	break;  case "mark":  	parity = Parity.Mark;  	break;  case "space":  	parity = Parity.Space;  	break;  }  
Missing Default,hobd,SerialRawStream,F:\newReposMay17\cail_hobd\src\stream\SerialRawStream.cs,Open,The following switch statement is missing a default case: switch (u [URL_HANDSHAKE]) {  case "none":  	port.Handshake = Handshake.None;  	break;  case "x":  	port.Handshake = Handshake.XOnXOff;  	break;  case "rts":  	port.Handshake = Handshake.RequestToSend;  	break;  case "xrts":  	port.Handshake = Handshake.RequestToSendXOnXOff;  	break;  }  
