Implementation smell,Namespace,Class,File,Method,Description
Complex Method,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,LoadSections,Cyclomatic complexity of the method is 8
Complex Method,hobd,ConfigurationSection,C:\repos\cail_hobd\src\ConfigurationSection.cs,CreateItems,Cyclomatic complexity of the method is 11
Long Identifier,hobd,HOBDTheme,C:\repos\cail_hobd\src\HOBDTheme.cs,,The length of the parameter PhoneTextPanoramaSubTitleStyle is 30.
Long Identifier,hobd,HOBDTheme,C:\repos\cail_hobd\src\HOBDTheme.cs,,The length of the parameter PhoneTextPanoramaSectionTitleStyle is 34.
Long Statement,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,InitializePanorama,The length of the statement  "            Logger.info("HomePage"' "system width: "+Screen.PrimaryScreen.Bounds.Width+"' height: "+Screen.PrimaryScreen.Bounds.Height); " is 124.
Long Statement,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The length of the statement  "            menuGrid[0' 0] = new DynamicElement(t("Reset trips")) { Style = style' HandleTapAction = (e) => { HOBD.Registry.TriggerReset(); } }; " is 132.
Long Statement,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The length of the statement  "            var moreStyle = new TextStyle(HOBD.theme.PhoneTextLargeStyle.FontFamily' HOBD.theme.PhoneFontSizeMediumLarge' HOBD.theme.PanoramaNormalBrush); " is 142.
Virtual Method Call from Constructor,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,HomePage,The constructor "HomePage" calls a virtual method "InitializePanorama".
Empty Catch Block,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The method has an empty catch block.
Empty Catch Block,hobd,HOBD,C:\repos\cail_hobd\src\HOBD.cs,Init,The method has an empty catch block.
Empty Catch Block,hobd,DynamicElement,C:\repos\cail_hobd\src\ui\DynamicElement.cs,ClickedTimer,The method has an empty catch block.
Magic Number,hobd,HOBDTheme,C:\repos\cail_hobd\src\HOBDTheme.cs,HOBDTheme,The following statement contains a magic number: PhoneTextPanoramaTitleStyle = new TextStyle(this.PhoneFontFamilyLight' 65' this.PhoneSubtleBrush);
Magic Number,hobd,HOBDTheme,C:\repos\cail_hobd\src\HOBDTheme.cs,ParseColor,The following statement contains a magic number: if (val.StartsWith("#")){              val = val.Substring(1);              uint ival = UInt32.Parse(val' NumberStyles.HexNumber);              // assume alpha 0 means FF              if (ival>>24 == 0) ival = ival | 0xFF000000;              return unchecked((int)ival);          }
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,InitializePanorama,The following statement contains a magic number: Fleux.Controls.Gestures.GestureDetectionParameters.Current.TapTimePeriod = 150;
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,InitializePanorama,The following statement contains a magic number: Fleux.Controls.Gestures.GestureDetectionParameters.Current.TapDistance = 50;
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,InitializePanorama,The following statement contains a magic number: statusField.Location = new Point(10' (layoutY-20));
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,InitializePanorama,The following statement contains a magic number: statusField.Location = new Point(10' (layoutY-20));
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,InitializePanorama,The following statement contains a magic number: statusField.Size = new Size(layoutX' 20);
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,InitializePanorama,The following statement contains a magic number: if (HOBD.config.Fullscreen){                    this.theForm.FormBorderStyle = FormBorderStyle.None;                  this.theForm.WindowState = FormWindowState.Maximized;              }else{                  this.theForm.Width = layoutX.ToPixels();                  this.theForm.Height = layoutY.ToPixels()+30;              }
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,StateChanged,The following statement contains a magic number: if (state == Engine.STATE_READ_DONE)              {                  sensorRate++;                  if (sensorRate > 10)                  {                      var time = DateTimeMs.Now;                      var ms = (time - sensorRateMS) / sensorRate;                      sensorRateMS = time;                      sensorRate = 0;                      sensorRateText = " " + (ms) + "ms";                  }              }
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,LoadSections,The following statement contains a magic number: try{                  XmlReaderSettings xrs = new XmlReaderSettings();                  xrs.IgnoreWhitespace = true;                  xrs.IgnoreComments = true;                    XmlReader reader = XmlReader.Create(Path.Combine(HOBD.AppPath' HOBD.config.Layout)' xrs);                  reader.Read();                  reader.ReadStartElement("ui");                    while( reader.IsStartElement("section") ){                        var title = t(reader.GetAttribute("name"));                      var section = CreateCommonSection(title);                        reader.ReadStartElement("section");                                            if (reader.IsStartElement("grid")){                            var rows = reader.GetAttribute("rows");                          var cols = reader.GetAttribute("cols");                            var rows_a = rows.Split(seps).Select(r => r.Trim().Length == 0 ? 0 : int.Parse(r.Trim()));                          var cols_a = cols.Split(seps).Select(r => r.Trim().Length == 0 ? 0 : int.Parse(r.Trim()));                            var converted = new IEnumerable<int>[]{rows_a' cols_a}.Select( arr => {                              var arr_s = arr.Sum();                              if (arr_s < 100){                                  var count = arr.Count(r => r == 0);                                  if (count > 0){                                      int autosize = (100-arr_s) / count;                                      arr = arr.Select( r => r == 0 ? autosize : r);                                  }                              }                              return arr;                          }).ToList();                            rows_a = converted[0].Select(r => r * this.layoutY / 100);                          cols_a = converted[1].Select(r => r * this.layoutX / 100);                                                    var grid = new Grid                             {                                 Columns = cols_a.Select(r => (MeasureDefinition)r).ToArray()'                                 Rows = rows_a.Select(r => (MeasureDefinition)r).ToArray()'                             };                                                    int crow = 0' ccol = 0;                                                    reader.ReadStartElement("grid");                          while(reader.IsStartElement("item")){                              var attrs = new Dictionary<string' string>();                              while (reader.MoveToNextAttribute())                              {                                  attrs.Add(reader.Name' reader.Value);                              }                              reader.MoveToElement();                                                            reader.ReadStartElement("item");                                                            // attrs                              var sensorItem = CreateItem(attrs' section);                                                            if (sensorItem != null)                              {                                  grid.Add(crow' ccol' sensorItem);                              }                                                            // next item in grid                              ccol++;                              if (ccol == cols_a.Count()){                                  ccol = 0;                                  crow++;                              }                              if (crow == rows_a.Count()){                                  break;                              }                                                        }                          grid.Location = new Point(10' 0);                          grid.Size = new Size(layoutX' layoutY-SectionContentDelta);                          section.AddElement(grid);                                                    reader.ReadEndElement();                      }                      this.panorama.AddSection(section);                        reader.ReadEndElement();                  }                                                }catch(XmlException e){                  Logger.error("HomePage"' "error creating layout"' e);              }
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,LoadSections,The following statement contains a magic number: try{                  XmlReaderSettings xrs = new XmlReaderSettings();                  xrs.IgnoreWhitespace = true;                  xrs.IgnoreComments = true;                    XmlReader reader = XmlReader.Create(Path.Combine(HOBD.AppPath' HOBD.config.Layout)' xrs);                  reader.Read();                  reader.ReadStartElement("ui");                    while( reader.IsStartElement("section") ){                        var title = t(reader.GetAttribute("name"));                      var section = CreateCommonSection(title);                        reader.ReadStartElement("section");                                            if (reader.IsStartElement("grid")){                            var rows = reader.GetAttribute("rows");                          var cols = reader.GetAttribute("cols");                            var rows_a = rows.Split(seps).Select(r => r.Trim().Length == 0 ? 0 : int.Parse(r.Trim()));                          var cols_a = cols.Split(seps).Select(r => r.Trim().Length == 0 ? 0 : int.Parse(r.Trim()));                            var converted = new IEnumerable<int>[]{rows_a' cols_a}.Select( arr => {                              var arr_s = arr.Sum();                              if (arr_s < 100){                                  var count = arr.Count(r => r == 0);                                  if (count > 0){                                      int autosize = (100-arr_s) / count;                                      arr = arr.Select( r => r == 0 ? autosize : r);                                  }                              }                              return arr;                          }).ToList();                            rows_a = converted[0].Select(r => r * this.layoutY / 100);                          cols_a = converted[1].Select(r => r * this.layoutX / 100);                                                    var grid = new Grid                             {                                 Columns = cols_a.Select(r => (MeasureDefinition)r).ToArray()'                                 Rows = rows_a.Select(r => (MeasureDefinition)r).ToArray()'                             };                                                    int crow = 0' ccol = 0;                                                    reader.ReadStartElement("grid");                          while(reader.IsStartElement("item")){                              var attrs = new Dictionary<string' string>();                              while (reader.MoveToNextAttribute())                              {                                  attrs.Add(reader.Name' reader.Value);                              }                              reader.MoveToElement();                                                            reader.ReadStartElement("item");                                                            // attrs                              var sensorItem = CreateItem(attrs' section);                                                            if (sensorItem != null)                              {                                  grid.Add(crow' ccol' sensorItem);                              }                                                            // next item in grid                              ccol++;                              if (ccol == cols_a.Count()){                                  ccol = 0;                                  crow++;                              }                              if (crow == rows_a.Count()){                                  break;                              }                                                        }                          grid.Location = new Point(10' 0);                          grid.Size = new Size(layoutX' layoutY-SectionContentDelta);                          section.AddElement(grid);                                                    reader.ReadEndElement();                      }                      this.panorama.AddSection(section);                        reader.ReadEndElement();                  }                                                }catch(XmlException e){                  Logger.error("HomePage"' "error creating layout"' e);              }
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,LoadSections,The following statement contains a magic number: try{                  XmlReaderSettings xrs = new XmlReaderSettings();                  xrs.IgnoreWhitespace = true;                  xrs.IgnoreComments = true;                    XmlReader reader = XmlReader.Create(Path.Combine(HOBD.AppPath' HOBD.config.Layout)' xrs);                  reader.Read();                  reader.ReadStartElement("ui");                    while( reader.IsStartElement("section") ){                        var title = t(reader.GetAttribute("name"));                      var section = CreateCommonSection(title);                        reader.ReadStartElement("section");                                            if (reader.IsStartElement("grid")){                            var rows = reader.GetAttribute("rows");                          var cols = reader.GetAttribute("cols");                            var rows_a = rows.Split(seps).Select(r => r.Trim().Length == 0 ? 0 : int.Parse(r.Trim()));                          var cols_a = cols.Split(seps).Select(r => r.Trim().Length == 0 ? 0 : int.Parse(r.Trim()));                            var converted = new IEnumerable<int>[]{rows_a' cols_a}.Select( arr => {                              var arr_s = arr.Sum();                              if (arr_s < 100){                                  var count = arr.Count(r => r == 0);                                  if (count > 0){                                      int autosize = (100-arr_s) / count;                                      arr = arr.Select( r => r == 0 ? autosize : r);                                  }                              }                              return arr;                          }).ToList();                            rows_a = converted[0].Select(r => r * this.layoutY / 100);                          cols_a = converted[1].Select(r => r * this.layoutX / 100);                                                    var grid = new Grid                             {                                 Columns = cols_a.Select(r => (MeasureDefinition)r).ToArray()'                                 Rows = rows_a.Select(r => (MeasureDefinition)r).ToArray()'                             };                                                    int crow = 0' ccol = 0;                                                    reader.ReadStartElement("grid");                          while(reader.IsStartElement("item")){                              var attrs = new Dictionary<string' string>();                              while (reader.MoveToNextAttribute())                              {                                  attrs.Add(reader.Name' reader.Value);                              }                              reader.MoveToElement();                                                            reader.ReadStartElement("item");                                                            // attrs                              var sensorItem = CreateItem(attrs' section);                                                            if (sensorItem != null)                              {                                  grid.Add(crow' ccol' sensorItem);                              }                                                            // next item in grid                              ccol++;                              if (ccol == cols_a.Count()){                                  ccol = 0;                                  crow++;                              }                              if (crow == rows_a.Count()){                                  break;                              }                                                        }                          grid.Location = new Point(10' 0);                          grid.Size = new Size(layoutX' layoutY-SectionContentDelta);                          section.AddElement(grid);                                                    reader.ReadEndElement();                      }                      this.panorama.AddSection(section);                        reader.ReadEndElement();                  }                                                }catch(XmlException e){                  Logger.error("HomePage"' "error creating layout"' e);              }
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,LoadSections,The following statement contains a magic number: try{                  XmlReaderSettings xrs = new XmlReaderSettings();                  xrs.IgnoreWhitespace = true;                  xrs.IgnoreComments = true;                    XmlReader reader = XmlReader.Create(Path.Combine(HOBD.AppPath' HOBD.config.Layout)' xrs);                  reader.Read();                  reader.ReadStartElement("ui");                    while( reader.IsStartElement("section") ){                        var title = t(reader.GetAttribute("name"));                      var section = CreateCommonSection(title);                        reader.ReadStartElement("section");                                            if (reader.IsStartElement("grid")){                            var rows = reader.GetAttribute("rows");                          var cols = reader.GetAttribute("cols");                            var rows_a = rows.Split(seps).Select(r => r.Trim().Length == 0 ? 0 : int.Parse(r.Trim()));                          var cols_a = cols.Split(seps).Select(r => r.Trim().Length == 0 ? 0 : int.Parse(r.Trim()));                            var converted = new IEnumerable<int>[]{rows_a' cols_a}.Select( arr => {                              var arr_s = arr.Sum();                              if (arr_s < 100){                                  var count = arr.Count(r => r == 0);                                  if (count > 0){                                      int autosize = (100-arr_s) / count;                                      arr = arr.Select( r => r == 0 ? autosize : r);                                  }                              }                              return arr;                          }).ToList();                            rows_a = converted[0].Select(r => r * this.layoutY / 100);                          cols_a = converted[1].Select(r => r * this.layoutX / 100);                                                    var grid = new Grid                             {                                 Columns = cols_a.Select(r => (MeasureDefinition)r).ToArray()'                                 Rows = rows_a.Select(r => (MeasureDefinition)r).ToArray()'                             };                                                    int crow = 0' ccol = 0;                                                    reader.ReadStartElement("grid");                          while(reader.IsStartElement("item")){                              var attrs = new Dictionary<string' string>();                              while (reader.MoveToNextAttribute())                              {                                  attrs.Add(reader.Name' reader.Value);                              }                              reader.MoveToElement();                                                            reader.ReadStartElement("item");                                                            // attrs                              var sensorItem = CreateItem(attrs' section);                                                            if (sensorItem != null)                              {                                  grid.Add(crow' ccol' sensorItem);                              }                                                            // next item in grid                              ccol++;                              if (ccol == cols_a.Count()){                                  ccol = 0;                                  crow++;                              }                              if (crow == rows_a.Count()){                                  break;                              }                                                        }                          grid.Location = new Point(10' 0);                          grid.Size = new Size(layoutX' layoutY-SectionContentDelta);                          section.AddElement(grid);                                                    reader.ReadEndElement();                      }                      this.panorama.AddSection(section);                        reader.ReadEndElement();                  }                                                }catch(XmlException e){                  Logger.error("HomePage"' "error creating layout"' e);              }
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,LoadSections,The following statement contains a magic number: try{                  XmlReaderSettings xrs = new XmlReaderSettings();                  xrs.IgnoreWhitespace = true;                  xrs.IgnoreComments = true;                    XmlReader reader = XmlReader.Create(Path.Combine(HOBD.AppPath' HOBD.config.Layout)' xrs);                  reader.Read();                  reader.ReadStartElement("ui");                    while( reader.IsStartElement("section") ){                        var title = t(reader.GetAttribute("name"));                      var section = CreateCommonSection(title);                        reader.ReadStartElement("section");                                            if (reader.IsStartElement("grid")){                            var rows = reader.GetAttribute("rows");                          var cols = reader.GetAttribute("cols");                            var rows_a = rows.Split(seps).Select(r => r.Trim().Length == 0 ? 0 : int.Parse(r.Trim()));                          var cols_a = cols.Split(seps).Select(r => r.Trim().Length == 0 ? 0 : int.Parse(r.Trim()));                            var converted = new IEnumerable<int>[]{rows_a' cols_a}.Select( arr => {                              var arr_s = arr.Sum();                              if (arr_s < 100){                                  var count = arr.Count(r => r == 0);                                  if (count > 0){                                      int autosize = (100-arr_s) / count;                                      arr = arr.Select( r => r == 0 ? autosize : r);                                  }                              }                              return arr;                          }).ToList();                            rows_a = converted[0].Select(r => r * this.layoutY / 100);                          cols_a = converted[1].Select(r => r * this.layoutX / 100);                                                    var grid = new Grid                             {                                 Columns = cols_a.Select(r => (MeasureDefinition)r).ToArray()'                                 Rows = rows_a.Select(r => (MeasureDefinition)r).ToArray()'                             };                                                    int crow = 0' ccol = 0;                                                    reader.ReadStartElement("grid");                          while(reader.IsStartElement("item")){                              var attrs = new Dictionary<string' string>();                              while (reader.MoveToNextAttribute())                              {                                  attrs.Add(reader.Name' reader.Value);                              }                              reader.MoveToElement();                                                            reader.ReadStartElement("item");                                                            // attrs                              var sensorItem = CreateItem(attrs' section);                                                            if (sensorItem != null)                              {                                  grid.Add(crow' ccol' sensorItem);                              }                                                            // next item in grid                              ccol++;                              if (ccol == cols_a.Count()){                                  ccol = 0;                                  crow++;                              }                              if (crow == rows_a.Count()){                                  break;                              }                                                        }                          grid.Location = new Point(10' 0);                          grid.Size = new Size(layoutX' layoutY-SectionContentDelta);                          section.AddElement(grid);                                                    reader.ReadEndElement();                      }                      this.panorama.AddSection(section);                        reader.ReadEndElement();                  }                                                }catch(XmlException e){                  Logger.error("HomePage"' "error creating layout"' e);              }
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: var height = height0/6;
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid = new Grid                             {                                 Columns = new MeasureDefinition[] { layoutX/3-20' layoutX/3-20' layoutX/3-20 }'                                 Rows = new MeasureDefinition[] { height' height' height' height' height }                             };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid = new Grid                             {                                 Columns = new MeasureDefinition[] { layoutX/3-20' layoutX/3-20' layoutX/3-20 }'                                 Rows = new MeasureDefinition[] { height' height' height' height' height }                             };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid = new Grid                             {                                 Columns = new MeasureDefinition[] { layoutX/3-20' layoutX/3-20' layoutX/3-20 }'                                 Rows = new MeasureDefinition[] { height' height' height' height' height }                             };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid = new Grid                             {                                 Columns = new MeasureDefinition[] { layoutX/3-20' layoutX/3-20' layoutX/3-20 }'                                 Rows = new MeasureDefinition[] { height' height' height' height' height }                             };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid = new Grid                             {                                 Columns = new MeasureDefinition[] { layoutX/3-20' layoutX/3-20' layoutX/3-20 }'                                 Rows = new MeasureDefinition[] { height' height' height' height' height }                             };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid = new Grid                             {                                 Columns = new MeasureDefinition[] { layoutX/3-20' layoutX/3-20' layoutX/3-20 }'                                 Rows = new MeasureDefinition[] { height' height' height' height' height }                             };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid[2' 0] = new DynamicElement(t("Exit")) {                  Style = style'                  HandleTapAction = (e) => Application.Exit()                                    };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid[2' 1] = new DynamicElement(t("Theme")) {                  Style = style'                  HandleTapAction = (e) => CreateThemeSection()              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid[3' 1] = new DynamicElement(t("Language")) {                  Style = style'                  HandleTapAction = (e) => CreateLanguageSection()              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid[4' 1] = new DynamicElement(t("Display Units")) {                  Style = style'                  HandleTapAction = (e) => this.PushVolatileSection(                      new ListSection(t("Display Units")' null' layoutX' layoutY-SectionContentDelta)                      {                          Selected = HOBD.config.Units'                          Content  = new string[]{ "metric"' "imperial" }.Select((s) => (object)s)'                          UIContent = (l) => t((string)l)'                          ChooseAction = (l) => {                              panorama.CurrentSectionIndex -= 1;                              HOBD.config.Units = (string)l;                              HOBD.config.Save();                              HOBD.ReloadUnits();                              ReloadUI();                          }                      })              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateMenuSection,The following statement contains a magic number: menuGrid[0' 2] = new DynamicElement(t("Sensor push")) {                  Style = style'                  HandleTapAction = (e) => CreateSensorPushSection()              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 120' 180 }'                  Rows = new MeasureDefinition[] { 70' 50' 70' 50' 70' 50' 75 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 120' 180 }'                  Rows = new MeasureDefinition[] { 70' 50' 70' 50' 70' 50' 75 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 120' 180 }'                  Rows = new MeasureDefinition[] { 70' 50' 70' 50' 70' 50' 75 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 120' 180 }'                  Rows = new MeasureDefinition[] { 70' 50' 70' 50' 70' 50' 75 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 120' 180 }'                  Rows = new MeasureDefinition[] { 70' 50' 70' 50' 70' 50' 75 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 120' 180 }'                  Rows = new MeasureDefinition[] { 70' 50' 70' 50' 70' 50' 75 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 120' 180 }'                  Rows = new MeasureDefinition[] { 70' 50' 70' 50' 70' 50' 75 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 120' 180 }'                  Rows = new MeasureDefinition[] { 70' 50' 70' 50' 70' 50' 75 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 120' 180 }'                  Rows = new MeasureDefinition[] { 70' 50' 70' 50' 70' 50' 75 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[0' 0] = new ImageElement(img1) { Size = new Size(100' 100) };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[0' 0] = new ImageElement(img1) { Size = new Size(100' 100) };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[2' 0] = new ImageElement(img2) { Size = new Size(100' 100) };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[2' 0] = new ImageElement(img2) { Size = new Size(100' 100) };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[2' 0] = new ImageElement(img2) { Size = new Size(100' 100) };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[2' 1] = new DynamicElement("TWO") { Style = titleStyle };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[3' 1] = new DynamicElement("LOREM IPSUM LOREM") { Style = subtitleStyle };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[4' 0] = new ImageElement(img3) { Size = new Size(100' 100) };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[4' 0] = new ImageElement(img3) { Size = new Size(100' 100) };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[4' 0] = new ImageElement(img3) { Size = new Size(100' 100) };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[4' 1] = new DynamicElement("THREE") { Style = titleStyle };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[5' 1] = new DynamicElement("LOREM IPSUM LOREM") { Style = subtitleStyle };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateFeaturedSection,The following statement contains a magic number: grid[6' 1] = new TextElement("more") { Style = moreStyle };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: var imageSize = new Size(190' 150);
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: var imageSize = new Size(190' 150);
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 200' 200' 200' 200 }'                  Rows = new MeasureDefinition[] { 160' 160 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 200' 200' 200' 200 }'                  Rows = new MeasureDefinition[] { 160' 160 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 200' 200' 200' 200 }'                  Rows = new MeasureDefinition[] { 160' 160 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 200' 200' 200' 200 }'                  Rows = new MeasureDefinition[] { 160' 160 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 200' 200' 200' 200 }'                  Rows = new MeasureDefinition[] { 160' 160 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: var grid = new Grid              {                  Columns = new MeasureDefinition[] { 200' 200' 200' 200 }'                  Rows = new MeasureDefinition[] { 160' 160 }              };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: grid[0' 2] = new ImageElement(img3) { Size = imageSize };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: grid[0' 3] = new ImageElement(img4) { Size = imageSize };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: grid[1' 2] = new ImageElement(img1) { Size = imageSize };
Magic Number,hobd,HomePage,C:\repos\cail_hobd\src\HomePage.cs,CreateHorizontalFeaturedSection,The following statement contains a magic number: grid[1' 3] = new ImageElement(img2) { Size = imageSize };
Magic Number,hobd,ConfigurationSection,C:\repos\cail_hobd\src\ConfigurationSection.cs,DiscoverBT,The following statement contains a magic number: try{                  BluetoothRadio.PrimaryRadio.Mode = RadioMode.Discoverable;                  BluetoothClient bluetoothClient = new BluetoothClient();                  UpdateBTStatus(HOBD.t("Scanning Bluetooth.."));                    bluetoothDeviceInfo = bluetoothClient.DiscoverDevices(10' true' false' true);                  foreach (var di in bluetoothDeviceInfo){                      Logger.info("ConfigurationPage"' "BT name="+di.DeviceName+"' addr="+di.DeviceAddress.ToString());                  }                }catch(Exception e){                  UpdateBTStatus(HOBD.t("Bluetooth scan failed"));                  Logger.error("ConfigurationPage"' ""' e);              }
Magic Number,hobd,ConfigurationSection,C:\repos\cail_hobd\src\ConfigurationSection.cs,CreateItems,The following statement contains a magic number: int height = LayoutY/6;
Magic Number,hobd,ConfigurationSection,C:\repos\cail_hobd\src\ConfigurationSection.cs,CreateItems,The following statement contains a magic number: grid = new Grid                  {                      Columns = new MeasureDefinition[] { LayoutX/3' LayoutX/3' LayoutX/3 }'                      Rows = new MeasureDefinition[] { height' height' height' height' height' height }                  };
Magic Number,hobd,ConfigurationSection,C:\repos\cail_hobd\src\ConfigurationSection.cs,CreateItems,The following statement contains a magic number: grid = new Grid                  {                      Columns = new MeasureDefinition[] { LayoutX/3' LayoutX/3' LayoutX/3 }'                      Rows = new MeasureDefinition[] { height' height' height' height' height' height }                  };
Magic Number,hobd,ConfigurationSection,C:\repos\cail_hobd\src\ConfigurationSection.cs,CreateItems,The following statement contains a magic number: grid = new Grid                  {                      Columns = new MeasureDefinition[] { LayoutX/3' LayoutX/3' LayoutX/3 }'                      Rows = new MeasureDefinition[] { height' height' height' height' height' height }                  };
Magic Number,hobd,ListSection,C:\repos\cail_hobd\src\ListSection.cs,CreateItems,The following statement contains a magic number: int height = LayoutY/4;
Magic Number,hobd,ListSection,C:\repos\cail_hobd\src\ListSection.cs,CreateItems,The following statement contains a magic number: grid = new Grid                  {                      Columns = new MeasureDefinition[] { LayoutX/2' LayoutX/2 }'                      Rows = new MeasureDefinition[] { height' height' height' height }                  };
Magic Number,hobd,ListSection,C:\repos\cail_hobd\src\ListSection.cs,CreateItems,The following statement contains a magic number: grid = new Grid                  {                      Columns = new MeasureDefinition[] { LayoutX/2' LayoutX/2 }'                      Rows = new MeasureDefinition[] { height' height' height' height }                  };
Magic Number,hobd,HOBD,C:\repos\cail_hobd\src\HOBD.cs,Init,The following statement contains a magic number: try{                  Logger.log("INFO"' "HOBD"' "App start"' null);                    try{                      config = new ConfigData(Path.Combine(HOBD.AppPath' "config.xml"));                  }catch(Exception e){                      Logger.error("HOBD"' "failure loading config.xml' using defaults"' e);                      config = new ConfigData();                  }                                    Logger.SetLevel(config.LogLevel);                    ReloadLang();                    ReloadUnits();                    ReloadVehicle();                                    int dpi_value;                                    var bwidth = Screen.PrimaryScreen.Bounds.Width;                  if (bwidth > 1920) bwidth = 800;                                    dpi_value = (int) (96f / bwidth * 480f);                                    Logger.trace ("HOBD"' "Bounds.Width: "+bwidth);                                    if (config.DPI != 0)                      dpi_value = config.DPI;                  FleuxApplication.TargetDesignDpi = dpi_value;                    ReloadTheme();                }catch(Exception e){                  Logger.error("HOBD"' "fatal failure' exiting"' e);                  if (engine != null && engine.IsActive()) engine.Deactivate();                  return false;              }
Magic Number,hobd,HOBD,C:\repos\cail_hobd\src\HOBD.cs,Init,The following statement contains a magic number: try{                  Logger.log("INFO"' "HOBD"' "App start"' null);                    try{                      config = new ConfigData(Path.Combine(HOBD.AppPath' "config.xml"));                  }catch(Exception e){                      Logger.error("HOBD"' "failure loading config.xml' using defaults"' e);                      config = new ConfigData();                  }                                    Logger.SetLevel(config.LogLevel);                    ReloadLang();                    ReloadUnits();                    ReloadVehicle();                                    int dpi_value;                                    var bwidth = Screen.PrimaryScreen.Bounds.Width;                  if (bwidth > 1920) bwidth = 800;                                    dpi_value = (int) (96f / bwidth * 480f);                                    Logger.trace ("HOBD"' "Bounds.Width: "+bwidth);                                    if (config.DPI != 0)                      dpi_value = config.DPI;                  FleuxApplication.TargetDesignDpi = dpi_value;                    ReloadTheme();                }catch(Exception e){                  Logger.error("HOBD"' "fatal failure' exiting"' e);                  if (engine != null && engine.IsActive()) engine.Deactivate();                  return false;              }
Magic Number,hobd,DynamicElement,C:\repos\cail_hobd\src\ui\DynamicElement.cs,HandleTap,The following statement contains a magic number: clickTimer = new System.Threading.Timer(this.ClickedTimer' null' 500' 500);
Magic Number,hobd,DynamicElement,C:\repos\cail_hobd\src\ui\DynamicElement.cs,HandleTap,The following statement contains a magic number: clickTimer = new System.Threading.Timer(this.ClickedTimer' null' 500' 500);
Magic Number,hobd,SensorTextElement,C:\repos\cail_hobd\src\ui\SensorTextElement.cs,Draw,The following statement contains a magic number: {              if (this.Name != null)                  drawingGraphics                    .MoveTo(0' 0)                    .Style(HOBD.theme.PhoneTextSensorDescrStyle)                    .DrawCenterText(this.Name' width' 20);              if (this.TUnits != null && this.TUnits.Length > 0)              {                  drawingGraphics                    .MoveTo(0' height-30)                    .Style(HOBD.theme.PhoneTextSensorDescrStyle)                    .DrawCenterText(this.TUnits' width' 20);              }          }
Magic Number,hobd,SensorTextElement,C:\repos\cail_hobd\src\ui\SensorTextElement.cs,Draw,The following statement contains a magic number: {              if (this.Name != null)                  drawingGraphics                    .MoveTo(0' 0)                    .Style(HOBD.theme.PhoneTextSensorDescrStyle)                    .DrawCenterText(this.Name' width' 20);              if (this.TUnits != null && this.TUnits.Length > 0)              {                  drawingGraphics                    .MoveTo(0' height-30)                    .Style(HOBD.theme.PhoneTextSensorDescrStyle)                    .DrawCenterText(this.TUnits' width' 20);              }          }
Magic Number,hobd,SensorTextElement,C:\repos\cail_hobd\src\ui\SensorTextElement.cs,Draw,The following statement contains a magic number: {              if (this.Name != null)                  drawingGraphics                    .MoveTo(0' 0)                    .Style(HOBD.theme.PhoneTextSensorDescrStyle)                    .DrawCenterText(this.Name' width' 20);              if (this.TUnits != null && this.TUnits.Length > 0)              {                  drawingGraphics                    .MoveTo(0' height-30)                    .Style(HOBD.theme.PhoneTextSensorDescrStyle)                    .DrawCenterText(this.TUnits' width' 20);              }          }
Missing Default,hobd,HOBDTheme,C:\repos\cail_hobd\src\HOBDTheme.cs,LoadTheme,The following switch statement is missing a default case: switch (reader.Name) {                                  case "font":                                      val = reader.ReadElementContentAsString();                                      theme.FontFamilies.TryGetValue(val' out val);                                      style.FontFamily = val;                                      break;                                  case "size":                                      val = reader.ReadElementContentAsString();                                      if (!theme.FontSizes.TryGetValue(val' out ival)){                                          ival = Int32.Parse(val);                                      }                                      style.FontSize = ival;                                      break;                                  case "color":                                      val = reader.ReadElementContentAsString();                                      Color color;                                      if (!theme.Colors.TryGetValue(val' out color)){                                          color = Color.FromArgb(ParseColor(val));                                      }                                      style.Foreground = color;                                      break;                              }
