Implementation smell,Namespace,Class,File,Method,Description
Long Method,ProtoBuf.Data.Internal,RecordWriter,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\Internal\RecordWriter.cs,WriteRecord,The method has 114 lines of code.
Complex Method,ProtoBuf.Data,ProtoDataReader,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataReader.cs,CopyArray,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Data.Internal,RecordReader,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\Internal\RecordReader.cs,ReadRecordValues,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf.Data.Internal,RecordWriter,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\Internal\RecordWriter.cs,WriteRecord,Cyclomatic complexity of the method is 20
Long Parameter List,ProtoBuf.Data,ProtoDataReader,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataReader.cs,GetBytes,The method has 5 parameters. Parameters: i' fieldOffset' buffer' bufferOffset' length
Long Parameter List,ProtoBuf.Data,ProtoDataReader,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataReader.cs,GetChars,The method has 5 parameters. Parameters: i' fieldOffset' buffer' bufferOffset' length
Long Parameter List,ProtoBuf.Data,ProtoDataReader,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataReader.cs,CopyArray,The method has 5 parameters. Parameters: source' fieldOffset' buffer' bufferOffset' length
Long Statement,ProtoBuf.Data,ProtoDataReader,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataReader.cs,CopyArray,The length of the statement  "                throw new InvalidOperationException("Invalid value for argument 'fieldOffset'. The value must be greater than or equal to 0.");" is 127.
Long Statement,ProtoBuf.Data,ProtoDataReader,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataReader.cs,CopyArray,The length of the statement  "                throw new ArgumentOutOfRangeException("bufferOffset"' $"Invalid destination buffer (size of {buffer.Length}) offset: {bufferOffset}.");" is 135.
Long Statement,ProtoBuf.Data,ProtoDataReader,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataReader.cs,CopyArray,The length of the statement  "                throw new IndexOutOfRangeException($"Buffer offset '{bufferOffset}' plus the elements available '{copyLength}' is greater than the length of the passed in buffer.");" is 165.
Long Statement,ProtoBuf.Data,ProtoDataStream,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataStream.cs,FillBuffer,The length of the statement  "            while (this.bufferStream.Length < requestedLength && this.bufferStream.Capacity - this.bufferStream.Length >= ProtoWriterBufferSize)" is 132.
Long Statement,ProtoBuf.Data.Internal,ColumnsReader,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\Internal\ColumnsReader.cs,ReadColumnsImpl,The length of the statement  "                yield return new ProtoDataColumn(name: name' dataType: TypeHelper.GetType(protoDataType)' protoBufDataType: protoDataType);" is 123.
Long Statement,ProtoBuf.Data.Internal,ProtoDataBuffer,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\Internal\ProtoDataBuffer.cs,ThrowIfInvalidBufferType,The length of the statement  "                throw new InvalidOperationException($"Invalid attempt to read data of type '{expectedBufferType}' when data is of type '{this.bufferType}'.");" is 142.
Long Statement,ProtoBuf.Data.Internal,RecordWriter,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\Internal\RecordWriter.cs,WriteRecord,The length of the statement  "                        throw new NotSupportedException($"The data type '{context.Columns[columnIndex].DataType.Name}' is not supported. The supported data types are: {TypeHelper.GetSupportedDataTypes()}.");" is 183.
Long Statement,ProtoBuf.Data.Internal,TypeHelper,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\Internal\TypeHelper.cs,GetProtoDataType,The length of the statement  "            throw new NotSupportedException($"The data type '{type.Name}' is not supported. The supported data types are: {GetSupportedDataTypes()}.");" is 139.
Magic Number,ProtoBuf.Data,ProtoDataWriterOptions,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataWriterOptions.cs,GetHashCode,The following statement contains a magic number: var hashCode = -607698572;
Magic Number,ProtoBuf.Data,ProtoDataWriterOptions,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataWriterOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * -1521134295) + this.SerializeEmptyArraysAsNull.GetHashCode();
Magic Number,ProtoBuf.Data,ProtoDataWriterOptions,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\ProtoDataWriterOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * -1521134295) + this.IncludeComputedColumns.GetHashCode();
Missing Default,ProtoBuf.Data.Internal,RecordReader,C:\research\architectureSmells\repos\rdingwall_protobuf-net-data\src\protobuf-net-data\Internal\RecordReader.cs,ReadRecordValues,The following switch statement is missing a default case: switch (context.Columns[columnIndex].ProtoDataType)                 {                     case ProtoDataType.String:                         context.Buffers[columnIndex].String = context.Reader.ReadString();                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.DateTime:                         context.Buffers[columnIndex].DateTime = BclHelpers.ReadDateTime(context.Reader);                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.Int:                         context.Buffers[columnIndex].Int32 = context.Reader.ReadInt32();                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.Long:                         context.Buffers[columnIndex].Int64 = context.Reader.ReadInt64();                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.Short:                         context.Buffers[columnIndex].Int16 = context.Reader.ReadInt16();                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.Bool:                         context.Buffers[columnIndex].Boolean = context.Reader.ReadBoolean();                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.Byte:                         context.Buffers[columnIndex].Byte = context.Reader.ReadByte();                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.Float:                         context.Buffers[columnIndex].Float = context.Reader.ReadSingle();                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.Double:                         context.Buffers[columnIndex].Double = context.Reader.ReadDouble();                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.Guid:                         context.Buffers[columnIndex].Guid = BclHelpers.ReadGuid(context.Reader);                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.Char:                         context.Buffers[columnIndex].Char = (char)context.Reader.ReadInt16();                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.Decimal:                         context.Buffers[columnIndex].Decimal = BclHelpers.ReadDecimal(context.Reader);                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.ByteArray:                         context.Buffers[columnIndex].ByteArray = ProtoReader.AppendBytes(null' context.Reader);                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.CharArray:                         context.Buffers[columnIndex].CharArray = context.Reader.ReadString().ToCharArray();                         context.Buffers[columnIndex].IsNull = false;                         break;                     case ProtoDataType.TimeSpan:                         context.Buffers[columnIndex].TimeSpan = BclHelpers.ReadTimeSpan(context.Reader);                         context.Buffers[columnIndex].IsNull = false;                         break;                 }
