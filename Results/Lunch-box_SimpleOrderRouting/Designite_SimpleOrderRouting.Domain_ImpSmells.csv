Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SimpleOrderRouting.Investors,InvestorInstruction,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Investors\InvestorInstruction.cs,InvestorInstruction,The method has 6 parameters. Parameters: investorInstructionIdentifier' way' quantity' price' allowPartialExecution' goodTill
Long Parameter List,SimpleOrderRouting.Markets.Orders,OrderDescription,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Markets\Orders\OrderDescription.cs,OrderDescription,The method has 5 parameters. Parameters: targetMarketName' orderWay' quantity' orderPrice' allowPartialExecution
Long Parameter List,SimpleOrderRouting.SolvingStrategies,MarketSweepSolver,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\SolvingStrategies\MarketSweepSolver.cs,GenerateOrdersDescription,The method has 5 parameters. Parameters: instructionExecutionContext' remainingQuantityToBeExecuted' validMarkets' requestedPrice' availableQuantityOnMarkets
Long Identifier,SimpleOrderRouting.Investors,InstructionExecutionContext,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Investors\InstructionExecutionContext.cs,RecordOrderExecution,The length of the parameter previousRemainingQuantityToBeExecuted is 37.
Long Statement,SimpleOrderRouting,SmartOrderRoutingEngine,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\SmartOrderRoutingEngine.cs,Route,The length of the statement  "            var instructionExecutionContext = new InstructionExecutionContext(investorInstruction' instructionExecutedCallback' failureCallback); " is 133.
Long Statement,SimpleOrderRouting.Investors,InstructionExecutionContext,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Investors\InstructionExecutionContext.cs,RecordOrderExecution,The length of the statement  "                throw new ApplicationException(string.Format("Executed more than the investor instruction has requested. Previous remaining quantity to be executed: {0}' latest executed quantity: {1}. New remaining quantity to be executed: {2}."' previousRemainingQuantityToBeExecuted' quantity' this.RemainingQuantityToBeExecuted)); " is 317.
Long Statement,SimpleOrderRouting.Investors,InstructionExecutionContext,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Investors\InstructionExecutionContext.cs,ShouldTheInstructionBeContinued,The length of the statement  "            return this.Instruction.GoodTill != null && this.Instruction.GoodTill > DateTime.Now && this.RemainingQuantityToBeExecuted > 0; " is 127.
Long Statement,SimpleOrderRouting.Investors,InvestorInstruction,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Investors\InvestorInstruction.cs,Equals,The length of the statement  "            return this.InvestorInstructionIdentifier == other.InvestorInstructionIdentifier && this.GoodTill.Equals(other.GoodTill) && this.AllowPartialExecution == other.AllowPartialExecution && this.Price == other.Price && this.Quantity == other.Quantity && this.Way == other.Way; " is 271.
Long Statement,SimpleOrderRouting.Markets.Orders,OrderBasket,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Markets\Orders\OrderBasket.cs,Send,The length of the statement  "                EventHandler<DealExecutedEventArgs> orderExecuted = (sender' executedEventArgs) => this.OnOrderExecuted(executedEventArgs); " is 123.
Long Statement,SimpleOrderRouting.Markets.Orders,OrderDescription,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Markets\Orders\OrderDescription.cs,ToString,The length of the statement  "            return string.Format("Order description: TargetMarketName={0} - quantity={1} - Way={2} - Price={3} - AllowPartialExecution={4}."' this.TargetMarketName' this.Quantity' this.OrderWay' this.OrderPrice' this.AllowPartialExecution); " is 228.
Long Statement,SimpleOrderRouting.Markets,MarketSnapshotProvider,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Markets\MarketSnapshotProvider.cs,InstrumentMarketDataUpdated,The length of the statement  "            this.lastMarketUpdates[marketDataUpdatedArgs.MarketName] = new MarketInfo(marketDataUpdatedArgs.MarketName' marketDataUpdatedArgs.Quantity' marketDataUpdatedArgs.Price); " is 169.
Long Statement,SimpleOrderRouting.SolvingStrategies,MarketSweepSolver,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\SolvingStrategies\MarketSweepSolver.cs,Solve,The length of the statement  "            var ordersDescription = GenerateOrdersDescription(instructionExecutionContext' remainingQuantityToBeExecuted' validMarkets' requestedPrice' availableQuantityOnMarkets); " is 168.
Long Statement,SimpleOrderRouting.SolvingStrategies,MarketSweepSolver,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\SolvingStrategies\MarketSweepSolver.cs,GenerateOrdersDescription,The length of the statement  "                ordersDescription.Add(new OrderDescription(validMarkets.First(m => m.SellQuantity >= 1).MarketName' instructionExecutionContext.Way' remainingQuantityToBeExecuted' requestedPrice' instructionExecutionContext.AllowPartialExecution)); " is 232.
Long Statement,SimpleOrderRouting.SolvingStrategies,MarketSweepSolver,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\SolvingStrategies\MarketSweepSolver.cs,GenerateOrdersDescription,The length of the statement  "                        ordersDescription.Add(new OrderDescription(marketInfo.MarketName' instructionExecutionContext.Way' quantityToExecute' requestedPrice' instructionExecutionContext.AllowPartialExecution)); " is 186.
Long Statement,SimpleOrderRouting.SolvingStrategies,MarketSweepSolver,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\SolvingStrategies\MarketSweepSolver.cs,GenerateOrdersDescription,The length of the statement  "                throw new InvalidOperationException(string.Format("No order description has been created while there is still {0} quantity to be executed (available quantity on the market is {1})."' remainingQuantityToBeExecuted' availableQuantityOnMarkets)); " is 243.
Long Statement,SimpleOrderRouting.SolvingStrategies,MarketSweepSolver,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\SolvingStrategies\MarketSweepSolver.cs,GetValidMarkets,The length of the statement  "            return allMarkets.MarketInfos.Where(m => m.OrdersFailureCount < MaxSupportedFailuresPerMarket && requestedPrice >= m.SellPrice); " is 128.
Magic Number,SimpleOrderRouting.Investors,InvestorInstruction,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Investors\InvestorInstruction.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.GoodTill.GetHashCode();
Magic Number,SimpleOrderRouting.Investors,InvestorInstruction,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Investors\InvestorInstruction.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.AllowPartialExecution.GetHashCode();
Magic Number,SimpleOrderRouting.Investors,InvestorInstruction,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Investors\InvestorInstruction.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.Price.GetHashCode();
Magic Number,SimpleOrderRouting.Investors,InvestorInstruction,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Investors\InvestorInstruction.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.Quantity;
Magic Number,SimpleOrderRouting.Investors,InvestorInstruction,D:\research\architectureSmells\repos\Lunch-box_SimpleOrderRouting\CSharp\SimpleOrderRouting.Domain\Investors\InvestorInstruction.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)this.Way;
