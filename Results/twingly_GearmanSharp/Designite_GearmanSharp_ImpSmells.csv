Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Twingly.Gearman,GearmanClient,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanClient.cs,SubmitJob,The method has 6 parameters. Parameters: functionName' functionArgument' uniqueId' priority' argumentSerializer' resultDeserializer
Long Parameter List,Twingly.Gearman,GearmanClient,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanClient.cs,SubmitBackgroundJob,The method has 5 parameters. Parameters: functionName' functionArgument' uniqueId' priority' argumentSerializer
Long Parameter List,Twingly.Gearman,GearmanClient,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanClient.cs,SubmitBackgroundJob,The method has 5 parameters. Parameters: protocol' functionName' functionArgument' uniqueId' priority
Long Parameter List,Twingly.Gearman,GearmanClientProtocol,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanClientProtocol.cs,SubmitJob,The method has 5 parameters. Parameters: functionName' functionArgument' background' uniqueId' priority
Long Parameter List,Twingly.Gearman,IGearmanClient,C:\repos\twingly_GearmanSharp\GearmanSharp\IGearmanClient.cs,SubmitJob,The method has 6 parameters. Parameters: functionName' functionArgument' uniqueId' priority' argumentSerializer' resultDeserializer
Long Parameter List,Twingly.Gearman,IGearmanClient,C:\repos\twingly_GearmanSharp\GearmanSharp\IGearmanClient.cs,SubmitBackgroundJob,The method has 5 parameters. Parameters: functionName' functionArgument' uniqueId' priority' argumentSerializer
Long Parameter List,Twingly.Gearman,GearmanJobStatus,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanJobStatus.cs,GearmanJobStatus,The method has 5 parameters. Parameters: jobHandle' isKnown' isRunning' completionNumerator' completionDenominator
Long Identifier,Twingly.Gearman,GearmanConnection,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanConnection.cs,,The length of the parameter DEFAULT_SEND_TIMEOUT_MILLISECONDS is 33.
Long Identifier,Twingly.Gearman,GearmanConnection,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanConnection.cs,,The length of the parameter DEFAULT_RECEIVE_TIMEOUT_MILLISECONDS is 36.
Long Statement,Twingly.Gearman,GearmanClient,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanClient.cs,SubmitBackgroundJob,The length of the statement  "            return SubmitBackgroundJob<byte[]>(functionName' functionArgument' uniqueId' GearmanJobPriority.Normal' data => (data)); " is 120.
Long Statement,Twingly.Gearman,GearmanClient,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanClient.cs,SubmitBackgroundJob,The length of the statement  "            return SubmitBackgroundJob<TArg>(functionName' functionArgument' CreateRandomUniqueId()' GearmanJobPriority.Normal' argumentSerializer); " is 136.
Long Statement,Twingly.Gearman,GearmanClient,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanClient.cs,SubmitBackgroundJob,The length of the statement  "            return SendClientCommand(protocol => SubmitBackgroundJob(protocol' functionName' functionArgumentBytes' uniqueId' priority)); " is 125.
Long Statement,Twingly.Gearman,GearmanConnectionManager,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanConnectionManager.cs,GetAliveConnections,The length of the statement  "                // Try to reconnect if they're not connected and not dead' or if all servers are dead' we will try to reconnect them anyway. " is 124.
Long Statement,Twingly.Gearman,GearmanProtocol,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanProtocol.cs,PackRequest,The length of the statement  "            return new RequestPacket(packetType' JoinByteArraysForData(Encoding.UTF8.GetBytes(arg1)' Encoding.UTF8.GetBytes(arg1))); " is 120.
Long Statement,Twingly.Gearman,GearmanWorker,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanWorker.cs,Work,The length of the statement  "                // We can't send Complete or Fail for the job' because that would cause the job to be "done" and the server wouldn't retry. " is 123.
Empty Catch Block,Twingly.Gearman,GearmanConnection,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanConnection.cs,Close,The method has an empty catch block.
Magic Number,Twingly.Gearman.Examples,Example,C:\repos\twingly_GearmanSharp\GearmanSharp\Examples\Example.cs,AdvancedClient,The following statement contains a magic number: client.AddServer("10.0.0.2"' 4730);
Magic Number,Twingly.Gearman.Examples,Example,C:\repos\twingly_GearmanSharp\GearmanSharp\Examples\Example.cs,AdvancedWorker,The following statement contains a magic number: worker.AddServer("10.0.0.2"' 4730);
Magic Number,Twingly.Gearman,GearmanConnection,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanConnection.cs,GetNextPacket,The following statement contains a magic number: var header = new byte[12];
Magic Number,Twingly.Gearman,GearmanConnection,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanConnection.cs,GetNextPacket,The following statement contains a magic number: var packetMagic = new byte[4];
Magic Number,Twingly.Gearman,GearmanConnection,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanConnection.cs,GetNextPacket,The following statement contains a magic number: try              {                  _socket.Receive(header' 12' SocketFlags.None);                  Array.Copy(header' 0' packetMagic' 0' 4);                    if (!packetMagic.SequenceEqual(ResponsePacket.Magic))                      throw new GearmanApiException("Response packet magic does not match");                                    var packetType = (PacketType)IPAddress.NetworkToHostOrder(BitConverter.ToInt32(header' 4));                  int packetSize = IPAddress.NetworkToHostOrder(BitConverter.ToInt32(header' 8));                    packetData = new byte[packetSize];                  if (packetSize > 0)                  {                      int bytesRead = 0;                      do                      {                          bytesRead += _socket.Receive(packetData' bytesRead' packetSize - bytesRead' SocketFlags.None);                      } while (bytesRead < packetSize);                  }                    return new ResponsePacket(packetType' packetData);              }              catch (Exception e)              {                  throw new GearmanConnectionException("Error reading data from socket"' e);              }
Magic Number,Twingly.Gearman,GearmanConnection,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanConnection.cs,GetNextPacket,The following statement contains a magic number: try              {                  _socket.Receive(header' 12' SocketFlags.None);                  Array.Copy(header' 0' packetMagic' 0' 4);                    if (!packetMagic.SequenceEqual(ResponsePacket.Magic))                      throw new GearmanApiException("Response packet magic does not match");                                    var packetType = (PacketType)IPAddress.NetworkToHostOrder(BitConverter.ToInt32(header' 4));                  int packetSize = IPAddress.NetworkToHostOrder(BitConverter.ToInt32(header' 8));                    packetData = new byte[packetSize];                  if (packetSize > 0)                  {                      int bytesRead = 0;                      do                      {                          bytesRead += _socket.Receive(packetData' bytesRead' packetSize - bytesRead' SocketFlags.None);                      } while (bytesRead < packetSize);                  }                    return new ResponsePacket(packetType' packetData);              }              catch (Exception e)              {                  throw new GearmanConnectionException("Error reading data from socket"' e);              }
Magic Number,Twingly.Gearman,GearmanConnection,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanConnection.cs,GetNextPacket,The following statement contains a magic number: try              {                  _socket.Receive(header' 12' SocketFlags.None);                  Array.Copy(header' 0' packetMagic' 0' 4);                    if (!packetMagic.SequenceEqual(ResponsePacket.Magic))                      throw new GearmanApiException("Response packet magic does not match");                                    var packetType = (PacketType)IPAddress.NetworkToHostOrder(BitConverter.ToInt32(header' 4));                  int packetSize = IPAddress.NetworkToHostOrder(BitConverter.ToInt32(header' 8));                    packetData = new byte[packetSize];                  if (packetSize > 0)                  {                      int bytesRead = 0;                      do                      {                          bytesRead += _socket.Receive(packetData' bytesRead' packetSize - bytesRead' SocketFlags.None);                      } while (bytesRead < packetSize);                  }                    return new ResponsePacket(packetType' packetData);              }              catch (Exception e)              {                  throw new GearmanConnectionException("Error reading data from socket"' e);              }
Magic Number,Twingly.Gearman,GearmanConnection,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanConnection.cs,GetNextPacket,The following statement contains a magic number: try              {                  _socket.Receive(header' 12' SocketFlags.None);                  Array.Copy(header' 0' packetMagic' 0' 4);                    if (!packetMagic.SequenceEqual(ResponsePacket.Magic))                      throw new GearmanApiException("Response packet magic does not match");                                    var packetType = (PacketType)IPAddress.NetworkToHostOrder(BitConverter.ToInt32(header' 4));                  int packetSize = IPAddress.NetworkToHostOrder(BitConverter.ToInt32(header' 8));                    packetData = new byte[packetSize];                  if (packetSize > 0)                  {                      int bytesRead = 0;                      do                      {                          bytesRead += _socket.Receive(packetData' bytesRead' packetSize - bytesRead' SocketFlags.None);                      } while (bytesRead < packetSize);                  }                    return new ResponsePacket(packetType' packetData);              }              catch (Exception e)              {                  throw new GearmanConnectionException("Error reading data from socket"' e);              }
Magic Number,Twingly.Gearman,GearmanProtocol,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanProtocol.cs,UnpackJobAssignResponse,The following statement contains a magic number: return new GearmanJobInfo                     {                         JobHandle = Encoding.UTF8.GetString(args[0])'                         FunctionName = Encoding.UTF8.GetString(args[1])'                         FunctionArgument = args[2]                     };
Magic Number,Twingly.Gearman,GearmanProtocol,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanProtocol.cs,UnpackStatusResponse,The following statement contains a magic number: return new GearmanJobStatus(                  Encoding.UTF8.GetString(args[0])'                  uint.Parse(Encoding.UTF8.GetString(args[1])) == 0 ? false : true'                  uint.Parse(Encoding.UTF8.GetString(args[2])) == 0 ? false : true'                  uint.Parse(Encoding.UTF8.GetString(args[3]))'                  uint.Parse(Encoding.UTF8.GetString(args[4])));
Magic Number,Twingly.Gearman,GearmanProtocol,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanProtocol.cs,UnpackStatusResponse,The following statement contains a magic number: return new GearmanJobStatus(                  Encoding.UTF8.GetString(args[0])'                  uint.Parse(Encoding.UTF8.GetString(args[1])) == 0 ? false : true'                  uint.Parse(Encoding.UTF8.GetString(args[2])) == 0 ? false : true'                  uint.Parse(Encoding.UTF8.GetString(args[3]))'                  uint.Parse(Encoding.UTF8.GetString(args[4])));
Magic Number,Twingly.Gearman,GearmanProtocol,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanProtocol.cs,UnpackStatusResponse,The following statement contains a magic number: return new GearmanJobStatus(                  Encoding.UTF8.GetString(args[0])'                  uint.Parse(Encoding.UTF8.GetString(args[1])) == 0 ? false : true'                  uint.Parse(Encoding.UTF8.GetString(args[2])) == 0 ? false : true'                  uint.Parse(Encoding.UTF8.GetString(args[3]))'                  uint.Parse(Encoding.UTF8.GetString(args[4])));
Magic Number,Twingly.Gearman,GearmanWorker,C:\repos\twingly_GearmanSharp\GearmanSharp\GearmanWorker.cs,AddFunction,The following statement contains a magic number: var jobConstructorTypes = new Type[4]              {                  typeof(GearmanWorkerProtocol)'                  typeof(GearmanJobInfo)'                  typeof(DataDeserializer<TArg>)'                  typeof(DataSerializer<TResult>)              };
Magic Number,Twingly.Gearman.Packets,Packet,C:\repos\twingly_GearmanSharp\GearmanSharp\Packets\Packet.cs,GetHeader,The following statement contains a magic number: var header = new byte[12];
Magic Number,Twingly.Gearman.Packets,Packet,C:\repos\twingly_GearmanSharp\GearmanSharp\Packets\Packet.cs,GetHeader,The following statement contains a magic number: Array.Copy(GetMagic()' 0' header' 0' 4);
Magic Number,Twingly.Gearman.Packets,Packet,C:\repos\twingly_GearmanSharp\GearmanSharp\Packets\Packet.cs,GetHeader,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(IPAddress.HostToNetworkOrder((int)Type))' 0' header' 4' 4);
Magic Number,Twingly.Gearman.Packets,Packet,C:\repos\twingly_GearmanSharp\GearmanSharp\Packets\Packet.cs,GetHeader,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(IPAddress.HostToNetworkOrder((int)Type))' 0' header' 4' 4);
Magic Number,Twingly.Gearman.Packets,Packet,C:\repos\twingly_GearmanSharp\GearmanSharp\Packets\Packet.cs,GetHeader,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(IPAddress.HostToNetworkOrder(dataSize))' 0' header' 8' 4);
Magic Number,Twingly.Gearman.Packets,Packet,C:\repos\twingly_GearmanSharp\GearmanSharp\Packets\Packet.cs,GetHeader,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(IPAddress.HostToNetworkOrder(dataSize))' 0' header' 8' 4);
