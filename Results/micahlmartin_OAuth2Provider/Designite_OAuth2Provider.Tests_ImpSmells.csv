Implementation smell,Namespace,Class,File,Method,Description
Long Statement,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,WhenAuthorizationCodeHasExpired_ThenThrowException,The length of the statement  "            var token = issuer.GenerateAuthorizationToken(new TokenData { ConsumerId = 1' Timestamp = DateTime.UtcNow.AddHours(-1).Ticks }); " is 128.
Long Statement,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,WhenRedirectUriDoesNotMatch_ThenExceptionIsThrown,The length of the statement  "            var token = issuer.GenerateAuthorizationToken(new TokenData { ConsumerId = 1' Timestamp = DateTime.UtcNow.Ticks' RedirectUri = "http://test.com" }); " is 148.
Long Statement,OAuth2Provider.Tests.Authorization,ClientCredentialsTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\ClientCredentialsTokenRequestAuthorizerTest.cs,WhenClientSecretIsInvalid_ThenThrowsException,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ClientId = "clientid"' Secret = "secret" }); " is 149.
Long Statement,OAuth2Provider.Tests.Authorization,ClientCredentialsTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\ClientCredentialsTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 1' ClientId = "clientid"' Secret = "clientsecret" }); " is 171.
Long Statement,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,WhenClientSecretIsInvalid_ThenThrowsException,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ClientId = "clientid"' Secret = "secret" });" is 149.
Long Statement,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,WhenUsernameIsInvalid_ThenThrowsException,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ClientId = "clientid"' Secret = "clientsecret" });" is 155.
Long Statement,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,WhenPasswordIsInvalid_ThenThrowsException,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ClientId = "clientid"' Secret = "clientsecret" });" is 155.
Long Statement,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,WhenPasswordIsInvalid_ThenThrowsException,The length of the statement  "            mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.GetByUsername(0' "username")).Returns(new ResourceOwnerImpl { Username = "username"' Password = "pass" });" is 162.
Long Statement,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,EnsureApplicationIsApproved,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 1' ClientId = "clientid"' Secret = "clientsecret" });" is 171.
Long Statement,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,EnsureApplicationIsApproved,The length of the statement  "            mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.GetByUsername(1' "username")).Returns(new ResourceOwnerImpl { ResourceOwnerId = 2' Username = "username"' Password = "password".ToHash() }); " is 196.
Long Statement,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 1' ClientId = "clientid"' Secret = "clientsecret" });" is 171.
Long Statement,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The length of the statement  "            mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.GetByUsername(1' "username")).Returns(new ResourceOwnerImpl { ResourceOwnerId = 2' Username = "username"' Password = "password".ToHash() }); " is 196.
Long Statement,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenClientSecretIsInvalid_ThenThrowsException,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ClientId = "clientid"' Secret = "secret" });" is 149.
Long Statement,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenContentTypeIsInvalid_ThenThrowsException,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ClientId = "clientid"' Secret = "clientsecret" });" is 155.
Long Statement,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenRefreshTokenIsMissing_ThenThrowsException,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 12' ClientId = "clientid"' Secret = "clientsecret" });" is 172.
Long Statement,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenRefreshTokenConsumerDoesNotMatch_ThenThrowsException,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 12' ClientId = "clientid"' Secret = "clientsecret" });" is 172.
Long Statement,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenConsumerIsNolongerApproved_ThenThrowsException,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 12' ClientId = "clientid"' Secret = "clientsecret" });" is 172.
Long Statement,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 12' ClientId = "clientid"' Secret = "clientsecret" });" is 172.
Long Statement,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The length of the statement  "            mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 1' ClientId = "clientid"' Secret = "clientsecret" });" is 171.
Long Statement,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The length of the statement  "            mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.GetByUsername(1' "username")).Returns(new ResourceOwnerImpl { ResourceOwnerId = 2' Username = "username"' Password = "password".ToHash() }); " is 196.
Long Statement,OAuth2Provider.Tests,HttpBasicAuthenticationTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\HttpBasicAuthenticationTest.cs,DecodesBasicAuthentication,The length of the statement  "            requestMock.SetupGet(x => x.Headers).Returns(new Dictionary<string' IList<string>> { {"Authorization"' new List<string> { "Basic " + header }}}); " is 145.
Long Statement,OAuth2Provider.Tests,MockHelper,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\MockHelper.cs,MockServiceLocator,The length of the statement  "            mocker.GetMock<IOAuthServiceLocator>().Setup(x => x.ConsumerRepository).Returns(mocker.GetMock<IConsumerRepository>().Object);" is 126.
Long Statement,OAuth2Provider.Tests,MockHelper,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\MockHelper.cs,MockServiceLocator,The length of the statement  "            mocker.GetMock<IOAuthServiceLocator>().Setup(x => x.ResourceOwnerRepository).Returns(mocker.GetMock<IResourceOwnerRepository>().Object); " is 136.
Long Statement,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,GenerateAuthorizationToken_GeneratesCode,The length of the statement  "            var data = new TokenData { ConsumerId = 1' ResourceOwnerId = 2' Timestamp = ticks' RedirectUri = "http://www.test.com" }; " is 121.
Long Statement,OAuth2Provider.Tests.Request,AuthorizationRequestTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Request\AuthorizationRequestTest.cs,GetRedirectUrl,The length of the statement  "            var request = new AuthorizationRequest(mocker.GetMock<IRequest>().Object' mocker.GetMock<IOAuthServiceLocator>().Object); " is 121.
Long Statement,OAuth2Provider.Tests.Request,AuthorizationRequestTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Request\AuthorizationRequestTest.cs,GetAuthorizationToken,The length of the statement  "            var request = new AuthorizationRequest(mocker.GetMock<IRequest>().Object'mocker.GetMock<IOAuthServiceLocator>().Object); " is 120.
Magic Number,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,WhenAuthorizationCodeHasExpired_ThenThrowException,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AuthorizationTokenExpirationLength).Returns(300);
Magic Number,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,WhenRedirectUriDoesNotMatch_ThenExceptionIsThrown,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AuthorizationTokenExpirationLength).Returns(300);
Magic Number,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,WhenRedirectUriDoesNotMatch_ThenExceptionIsThrown,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AccessTokenExpirationLength).Returns(500);
Magic Number,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,WhenRedirectUriDoesNotMatch_ThenExceptionIsThrown,The following statement contains a magic number: Assert.AreEqual(500' result.ExpiresIn);
Magic Number,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,ReturnsAccessToken,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AuthorizationTokenExpirationLength).Returns(300);
Magic Number,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,ReturnsAccessToken,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AccessTokenExpirationLength).Returns(500);
Magic Number,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,ReturnsAccessToken,The following statement contains a magic number: Assert.AreEqual(500' result.ExpiresIn);
Magic Number,OAuth2Provider.Tests.Authorization,ClientCredentialsTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\ClientCredentialsTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AccessTokenExpirationLength).Returns(3600);
Magic Number,OAuth2Provider.Tests.Authorization,ClientCredentialsTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\ClientCredentialsTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The following statement contains a magic number: Assert.AreEqual(3600' token.ExpiresIn);
Magic Number,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,EnsureApplicationIsApproved,The following statement contains a magic number: mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.GetByUsername(1' "username")).Returns(new ResourceOwnerImpl { ResourceOwnerId = 2' Username = "username"' Password = "password".ToHash() });
Magic Number,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,EnsureApplicationIsApproved,The following statement contains a magic number: mocker.GetMock<IResourceOwnerRepository>().Verify(x => x.ApproveConsumer(2' 1)' Times.Once());
Magic Number,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The following statement contains a magic number: mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.GetByUsername(1' "username")).Returns(new ResourceOwnerImpl { ResourceOwnerId = 2' Username = "username"' Password = "password".ToHash() });
Magic Number,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AccessTokenExpirationLength).Returns(3600);
Magic Number,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The following statement contains a magic number: mocker.GetMock<IResourceOwnerRepository>().Verify(x => x.ApproveConsumer(2' 1)' Times.Once());
Magic Number,OAuth2Provider.Tests.Authorization,PasswordTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\PasswordTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The following statement contains a magic number: Assert.AreEqual(3600' token.ExpiresIn);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenRefreshTokenIsMissing_ThenThrowsException,The following statement contains a magic number: mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 12' ClientId = "clientid"' Secret = "clientsecret" });
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenRefreshTokenConsumerDoesNotMatch_ThenThrowsException,The following statement contains a magic number: mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 12' ClientId = "clientid"' Secret = "clientsecret" });
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenRefreshTokenConsumerDoesNotMatch_ThenThrowsException,The following statement contains a magic number: var token = issuer.GenerateRefreshToken(new TokenData {ConsumerId = 11' ResourceOwnerId = 10' Timestamp = 1});
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenRefreshTokenConsumerDoesNotMatch_ThenThrowsException,The following statement contains a magic number: var token = issuer.GenerateRefreshToken(new TokenData {ConsumerId = 11' ResourceOwnerId = 10' Timestamp = 1});
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenConsumerIsNolongerApproved_ThenThrowsException,The following statement contains a magic number: mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 12' ClientId = "clientid"' Secret = "clientsecret" });
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenConsumerIsNolongerApproved_ThenThrowsException,The following statement contains a magic number: mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.IsConsumerApproved(10' 12)).Returns(false);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenConsumerIsNolongerApproved_ThenThrowsException,The following statement contains a magic number: mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.IsConsumerApproved(10' 12)).Returns(false);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenConsumerIsNolongerApproved_ThenThrowsException,The following statement contains a magic number: var token = issuer.GenerateRefreshToken(new TokenData { ConsumerId = 12' ResourceOwnerId = 10' Timestamp = 1 });
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenConsumerIsNolongerApproved_ThenThrowsException,The following statement contains a magic number: var token = issuer.GenerateRefreshToken(new TokenData { ConsumerId = 12' ResourceOwnerId = 10' Timestamp = 1 });
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The following statement contains a magic number: mocker.GetMock<IConsumerRepository>().Setup(x => x.GetByClientId("clientid")).Returns(new ConsumerImpl { ConsumerId = 12' ClientId = "clientid"' Secret = "clientsecret" });
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The following statement contains a magic number: mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.IsConsumerApproved(10' 12)).Returns(true);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The following statement contains a magic number: mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.IsConsumerApproved(10' 12)).Returns(true);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The following statement contains a magic number: var token = issuer.GenerateRefreshToken(new TokenData { ConsumerId = 12' ResourceOwnerId = 10' Timestamp = 1 });
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The following statement contains a magic number: var token = issuer.GenerateRefreshToken(new TokenData { ConsumerId = 12' ResourceOwnerId = 10' Timestamp = 1 });
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The following statement contains a magic number: Assert.AreEqual(10' accessTokenData.ResourceOwnerId);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The following statement contains a magic number: Assert.IsTrue(accessTokenData.Timestamp > DateTimeOffset.UtcNow.AddMinutes(-5).Ticks);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The following statement contains a magic number: Assert.AreEqual(12' refreshTokenData.ConsumerId);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The following statement contains a magic number: Assert.AreEqual(10' refreshTokenData.ResourceOwnerId);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,WhenDataIsValid_ThenNewTokenIsCreated,The following statement contains a magic number: Assert.IsTrue(refreshTokenData.Timestamp > DateTimeOffset.UtcNow.AddMinutes(-5).Ticks);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The following statement contains a magic number: mocker.GetMock<IResourceOwnerRepository>().Setup(x => x.GetByUsername(1' "username")).Returns(new ResourceOwnerImpl { ResourceOwnerId = 2' Username = "username"' Password = "password".ToHash() });
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AccessTokenExpirationLength).Returns(3600);
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The following statement contains a magic number: mocker.GetMock<IResourceOwnerRepository>().Verify(x => x.ApproveConsumer(2' 1)' Times.Once());
Magic Number,OAuth2Provider.Tests.Authorization,RefreshTokenRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\RefreshTokenRequestAuthorizerTest.cs,ReturnsAuthorizedToken,The following statement contains a magic number: Assert.AreEqual(3600' token.ExpiresIn);
Magic Number,OAuth2Provider.Tests.Authorization,ResourceRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\ResourceRequestAuthorizerTest.cs,WhenAccessTokenIsExpired_ThenReturnFalse,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AccessTokenExpirationLength).Returns(3600);
Magic Number,OAuth2Provider.Tests.Authorization,ResourceRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\ResourceRequestAuthorizerTest.cs,WhenAccessTokenIsExpired_ThenReturnFalse,The following statement contains a magic number: var token =                  issuer.GenerateAccessToken(new TokenData                                                 {                                                     ConsumerId = 1'                                                     ResourceOwnerId = 5'                                                     Timestamp = DateTimeOffset.UtcNow.AddMinutes(-65).Ticks                                                 });
Magic Number,OAuth2Provider.Tests.Authorization,ResourceRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\ResourceRequestAuthorizerTest.cs,WhenAccessTokenIsExpired_ThenReturnFalse,The following statement contains a magic number: var token =                  issuer.GenerateAccessToken(new TokenData                                                 {                                                     ConsumerId = 1'                                                     ResourceOwnerId = 5'                                                     Timestamp = DateTimeOffset.UtcNow.AddMinutes(-65).Ticks                                                 });
Magic Number,OAuth2Provider.Tests.Authorization,ResourceRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\ResourceRequestAuthorizerTest.cs,WhenAccessTokenIsValid_ThenReturnTrue,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AccessTokenExpirationLength).Returns(3600);
Magic Number,OAuth2Provider.Tests.Authorization,ResourceRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\ResourceRequestAuthorizerTest.cs,WhenAccessTokenIsValid_ThenReturnTrue,The following statement contains a magic number: var token =                  issuer.GenerateAccessToken(new TokenData                  {                      ConsumerId = 1'                      ResourceOwnerId = 5'                      Timestamp = DateTimeOffset.UtcNow.AddMinutes(-5).Ticks                  });
Magic Number,OAuth2Provider.Tests.Authorization,ResourceRequestAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\ResourceRequestAuthorizerTest.cs,WhenAccessTokenIsValid_ThenReturnTrue,The following statement contains a magic number: var token =                  issuer.GenerateAccessToken(new TokenData                  {                      ConsumerId = 1'                      ResourceOwnerId = 5'                      Timestamp = DateTimeOffset.UtcNow.AddMinutes(-5).Ticks                  });
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,GenerateAccessToken_GeneratesToken,The following statement contains a magic number: var data = new TokenData { ConsumerId = 1' ResourceOwnerId = 2' Timestamp = ticks };
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,GenerateAccessToken_GeneratesToken,The following statement contains a magic number: data.Timestamp = DateTime.Now.Ticks + 150;
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,AccessTokenAndRefreshTokenAreNotEqual,The following statement contains a magic number: var data = new TokenData {ConsumerId = 12345' ResourceOwnerId = 12345' Timestamp = DateTime.Now.Ticks};
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,AccessTokenAndRefreshTokenAreNotEqual,The following statement contains a magic number: var data = new TokenData {ConsumerId = 12345' ResourceOwnerId = 12345' Timestamp = DateTime.Now.Ticks};
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,DecodeAccessToken_DecodesToken,The following statement contains a magic number: var data = new TokenData { ConsumerId = 1' ResourceOwnerId = 2' Timestamp = ticks };
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,DecodeAccessToken_DecodesToken,The following statement contains a magic number: Assert.AreEqual(2' token.ResourceOwnerId);
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,GenerateRefreshToken_GeneratesToken,The following statement contains a magic number: var data = new TokenData { ConsumerId = 1' ResourceOwnerId = 2' Timestamp = ticks };
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,DecodeRefreshToken_DecodesToken,The following statement contains a magic number: var data = new TokenData { ConsumerId = 1' ResourceOwnerId = 2' Timestamp = ticks };
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,DecodeRefreshToken_DecodesToken,The following statement contains a magic number: Assert.AreEqual(2' token.ResourceOwnerId);
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,GenerateAuthorizationToken_GeneratesCode,The following statement contains a magic number: var data = new TokenData { ConsumerId = 1' ResourceOwnerId = 2' Timestamp = ticks' RedirectUri = "http://www.test.com" };
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,DecodeAuthorizationToken_DecodesToken,The following statement contains a magic number: var data = new TokenData { ConsumerId = 1' Timestamp = ticks' ResourceOwnerId = 3 };
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,DecodeAuthorizationToken_DecodesToken,The following statement contains a magic number: Assert.AreEqual(3' token.ResourceOwnerId);
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,DecodeAuthorizationToken_DecodesToken,The following statement contains a magic number: data = new TokenData { ConsumerId = 1' Timestamp = ticks' ResourceOwnerId = 3' RedirectUri = "http://test.com" };
Magic Number,OAuth2Provider.Tests.Issuer,OAuthIssuerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Issuer\OAuthIssuerTest.cs,DecodeAuthorizationToken_DecodesToken,The following statement contains a magic number: Assert.AreEqual(3' token.ResourceOwnerId);
Magic Number,OAuth2Provider.Tests.Request,AuthorizationRequestTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Request\AuthorizationRequestTest.cs,GetAuthorizationToken,The following statement contains a magic number: mocker.GetMock<IConfiguration>().Setup(x => x.AuthorizationTokenExpirationLength).Returns(500);
Magic Number,OAuth2Provider.Tests.Request,AuthorizationRequestTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Request\AuthorizationRequestTest.cs,GetAuthorizationToken,The following statement contains a magic number: var token = request.GetAuthorizationToken(1' 5' null);
Magic Number,OAuth2Provider.Tests.Request,AuthorizationRequestTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Request\AuthorizationRequestTest.cs,GetAuthorizationToken,The following statement contains a magic number: Assert.AreEqual(500' token.ExpiresIn);
Magic Number,OAuth2Provider.Tests.Response,ErrorResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ErrorResponseBuilderTest.cs,BuildJsonTest,The following statement contains a magic number: Assert.AreEqual(400' message.StatusCode);
Magic Number,OAuth2Provider.Tests.Response,ErrorResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ErrorResponseBuilderTest.cs,BuildJsonTest,The following statement contains a magic number: Assert.AreEqual(400' message.StatusCode);
Magic Number,OAuth2Provider.Tests.Response,ErrorResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ErrorResponseBuilderTest.cs,BuildQueryTest,The following statement contains a magic number: Assert.AreEqual(400' message.StatusCode);
Magic Number,OAuth2Provider.Tests.Response,ErrorResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ErrorResponseBuilderTest.cs,BuildQueryTest,The following statement contains a magic number: Assert.AreEqual(400' message.StatusCode);
Magic Number,OAuth2Provider.Tests.Response,ErrorResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ErrorResponseBuilderTest.cs,BuildBodyTest,The following statement contains a magic number: Assert.AreEqual(400' message.StatusCode);
Magic Number,OAuth2Provider.Tests.Response,ErrorResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ErrorResponseBuilderTest.cs,BuildBodyTest,The following statement contains a magic number: Assert.AreEqual(400' message.StatusCode);
Magic Number,OAuth2Provider.Tests.Response,ResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ResponseBuilderTest.cs,BuildJsonTest,The following statement contains a magic number: var message = new ResponseBuilder()                  .SetHeader("header"' "val1")                  .SetLocation("http://me.com")                  .SetParam("param1"'"val")                  .SetStatusCode(200)                  .BuildJsonMessage();
Magic Number,OAuth2Provider.Tests.Response,ResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ResponseBuilderTest.cs,BuildJsonTest,The following statement contains a magic number: Assert.AreEqual(200' message.StatusCode);
Magic Number,OAuth2Provider.Tests.Response,ResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ResponseBuilderTest.cs,BuildBodyTest,The following statement contains a magic number: var message = new ResponseBuilder()                  .SetHeader("header"' "val1")                  .SetLocation("http://me.com")                  .SetParam("param1"' "val")                  .SetStatusCode(200)                  .BuildBodyMessage();
Magic Number,OAuth2Provider.Tests.Response,ResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ResponseBuilderTest.cs,BuildBodyTest,The following statement contains a magic number: Assert.AreEqual(200' message.StatusCode);
Magic Number,OAuth2Provider.Tests.Response,ResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ResponseBuilderTest.cs,BuildQueryTest,The following statement contains a magic number: var message = new ResponseBuilder()                  .SetHeader("header"' "val1")                  .SetLocation("http://me.com")                  .SetParam("param1"' "val")                  .SetStatusCode(200)                  .BuildQueryMessage();
Magic Number,OAuth2Provider.Tests.Response,ResponseBuilderTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Response\ResponseBuilderTest.cs,BuildQueryTest,The following statement contains a magic number: Assert.AreEqual(200' message.StatusCode);
Magic Number,OAuth2Provider.Tests.MessageWriters,JsonOAuthMessageWriterTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\MessageWriters\JsonOAuthMessageWriterTest.cs,WritesBody,The following statement contains a magic number: parameters.Add("test2"' 5);
Magic Number,OAuth2Provider.Tests.MessageWriters,QueryStringOAuthMessageWriterTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\MessageWriters\QueryStringOAuthMessageWriterTest.cs,WritesLocation,The following statement contains a magic number: var parameters = new Dictionary<string' object> { { "param1"' "12345" }' { "param2"' 5678 } };
Magic Number,OAuth2Provider.Tests.MessageWriters,QueryStringOAuthMessageWriterTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\MessageWriters\QueryStringOAuthMessageWriterTest.cs,WritesLocation,The following statement contains a magic number: parameters = new Dictionary<string' object> { { "param1"' "12345" }' { "param2"' 5678 } };
Magic Number,OAuth2Provider.Tests.MessageWriters,QueryStringOAuthMessageWriterTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\MessageWriters\QueryStringOAuthMessageWriterTest.cs,WritesLocation,The following statement contains a magic number: parameters = new Dictionary<string' object> { { "p aram1"' "1 2345" }' { "p aram2"' 5678 } };
Magic Number,OAuth2Provider.Tests.MessageWriters,UrlEncodedBodyOAuthMessageWriterTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\MessageWriters\UrlEncodedBodyOAuthMessageWriterTest.cs,WritesBody,The following statement contains a magic number: var parameters = new Dictionary<string' object> { { "param1"' "12345" }' { "param2"' 5678 } };
Magic Number,OAuth2Provider.Tests.MessageWriters,UrlEncodedBodyOAuthMessageWriterTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\MessageWriters\UrlEncodedBodyOAuthMessageWriterTest.cs,WritesBody,The following statement contains a magic number: parameters = new Dictionary<string' object> { { "p aram1"' "1 2345" }' { "p aram2"' 5678 } };
Duplicate Code,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,RequiresAuthorizationCodeGrantType,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 30)' (19' 43))
Duplicate Code,OAuth2Provider.Tests.Authorization,AuthorizationCodeAuthorizerTest,D:\research\architectureSmells\repos\micahlmartin_OAuth2Provider\src\OAuth2Provider.Tests\Authorization\AuthorizationCodeAuthorizerTest.cs,RequiresAuthorizationCode,The method contains a code clone-set at the following line numbers (starting from the method definition): ((7' 30)' (20' 43))
