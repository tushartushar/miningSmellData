Implementation smell,Namespace,Class,File,Method,Description
Long Method,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The method has 116 lines of code.
Complex Method,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,Cyclomatic complexity of the method is 20
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: Tesla.x = (Console.WindowWidth / 2) - 1;  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: while (true) {  	bool Smashed = false;  	int newSpaceRiftChance = rng.Next (0' 100);  	if (newSpaceRiftChance < 10) {  		Unit newSpaceRift = new Unit ();  		newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  		newSpaceRift.y = 5;  		newSpaceRift.color = ConsoleColor.Red;  		newSpaceRift.symbol = '@';  		ObstacleList.Add (newSpaceRift);  	}  	else {  		Unit newInitObstacle = new Unit ();  		newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  		newInitObstacle.y = 5;  		newInitObstacle.color = ConsoleColor.Cyan;  		newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  		ObstacleList.Add (newInitObstacle);  	}  	if (Console.KeyAvailable) {  		ConsoleKeyInfo keyPressed = Console.ReadKey (true);  		while (Console.KeyAvailable) {  			Console.ReadKey (true);  		}  		if (keyPressed.Key == ConsoleKey.LeftArrow) {  			if (Tesla.x > 0) {  				Tesla.x--;  			}  		}  		if (keyPressed.Key == ConsoleKey.RightArrow) {  			if (Tesla.x < Console.WindowWidth - 2) {  				Tesla.x++;  			}  		}  	}  	List<Unit> newList = new List<Unit> ();  	for (int i = 0; i < ObstacleList.Count; i++) {  		Unit oldObstacle = ObstacleList [i];  		Unit NewMovedObsacle = new Unit ();  		NewMovedObsacle.x = oldObstacle.x;  		NewMovedObsacle.y = oldObstacle.y + 1;  		NewMovedObsacle.color = oldObstacle.color;  		NewMovedObsacle.symbol = oldObstacle.symbol;  		if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			score = score + 10;  			if (speed > 50) {  				speed = speed - 50;  			}  			else if (speed <= 50) {  				speed = 0;  			}  		}  		if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  			livesCount--;  			Smashed = true;  			speed = 0;  			if (livesCount <= 0) {  				PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  				PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  				PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  				Console.ReadLine ();  				livesCount = 3;  			}  		}  		if (NewMovedObsacle.y < Console.WindowHeight) {  			newList.Add (NewMovedObsacle);  		}  		else {  			score++;  		}  	}  	ObstacleList = newList;  	Console.Clear ();  	if (Smashed) {  		PrintAtPosition (Tesla.x' Tesla.y' '@'' ConsoleColor.Red);  		ObstacleList.Clear ();  	}  	else {  		PrintAtPosition (Tesla.x' Tesla.y' Tesla.symbol' Tesla.color);  	}  	foreach (Unit obstacle in ObstacleList) {  		PrintAtPosition (obstacle.x' obstacle.y' obstacle.symbol' obstacle.color);  	}  	for (int i = 0; i < Console.WindowWidth; i++) {  		PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  	}  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  	PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  	PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  	if (speed < 170) {  		speed++;  	}  	Thread.Sleep (250 - speed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (newSpaceRiftChance < 10) {  	Unit newSpaceRift = new Unit ();  	newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  	newSpaceRift.y = 5;  	newSpaceRift.color = ConsoleColor.Red;  	newSpaceRift.symbol = '@';  	ObstacleList.Add (newSpaceRift);  }  else {  	Unit newInitObstacle = new Unit ();  	newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  	newInitObstacle.y = 5;  	newInitObstacle.color = ConsoleColor.Cyan;  	newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  	ObstacleList.Add (newInitObstacle);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (newSpaceRiftChance < 10) {  	Unit newSpaceRift = new Unit ();  	newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  	newSpaceRift.y = 5;  	newSpaceRift.color = ConsoleColor.Red;  	newSpaceRift.symbol = '@';  	ObstacleList.Add (newSpaceRift);  }  else {  	Unit newInitObstacle = new Unit ();  	newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  	newInitObstacle.y = 5;  	newInitObstacle.color = ConsoleColor.Cyan;  	newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  	ObstacleList.Add (newInitObstacle);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (newSpaceRiftChance < 10) {  	Unit newSpaceRift = new Unit ();  	newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  	newSpaceRift.y = 5;  	newSpaceRift.color = ConsoleColor.Red;  	newSpaceRift.symbol = '@';  	ObstacleList.Add (newSpaceRift);  }  else {  	Unit newInitObstacle = new Unit ();  	newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  	newInitObstacle.y = 5;  	newInitObstacle.color = ConsoleColor.Cyan;  	newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  	ObstacleList.Add (newInitObstacle);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (newSpaceRiftChance < 10) {  	Unit newSpaceRift = new Unit ();  	newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  	newSpaceRift.y = 5;  	newSpaceRift.color = ConsoleColor.Red;  	newSpaceRift.symbol = '@';  	ObstacleList.Add (newSpaceRift);  }  else {  	Unit newInitObstacle = new Unit ();  	newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  	newInitObstacle.y = 5;  	newInitObstacle.color = ConsoleColor.Cyan;  	newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  	ObstacleList.Add (newInitObstacle);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (newSpaceRiftChance < 10) {  	Unit newSpaceRift = new Unit ();  	newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  	newSpaceRift.y = 5;  	newSpaceRift.color = ConsoleColor.Red;  	newSpaceRift.symbol = '@';  	ObstacleList.Add (newSpaceRift);  }  else {  	Unit newInitObstacle = new Unit ();  	newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  	newInitObstacle.y = 5;  	newInitObstacle.color = ConsoleColor.Cyan;  	newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  	ObstacleList.Add (newInitObstacle);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (newSpaceRiftChance < 10) {  	Unit newSpaceRift = new Unit ();  	newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  	newSpaceRift.y = 5;  	newSpaceRift.color = ConsoleColor.Red;  	newSpaceRift.symbol = '@';  	ObstacleList.Add (newSpaceRift);  }  else {  	Unit newInitObstacle = new Unit ();  	newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  	newInitObstacle.y = 5;  	newInitObstacle.color = ConsoleColor.Cyan;  	newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  	ObstacleList.Add (newInitObstacle);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: newSpaceRift.x = rng.Next (0' Console.WindowWidth - 2);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: newSpaceRift.y = 5;  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: newInitObstacle.x = rng.Next (0' Console.WindowWidth - 2);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: newInitObstacle.y = 5;  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: newInitObstacle.symbol = symbolList [rng.Next (0' 7)];  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (Console.KeyAvailable) {  	ConsoleKeyInfo keyPressed = Console.ReadKey (true);  	while (Console.KeyAvailable) {  		Console.ReadKey (true);  	}  	if (keyPressed.Key == ConsoleKey.LeftArrow) {  		if (Tesla.x > 0) {  			Tesla.x--;  		}  	}  	if (keyPressed.Key == ConsoleKey.RightArrow) {  		if (Tesla.x < Console.WindowWidth - 2) {  			Tesla.x++;  		}  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (keyPressed.Key == ConsoleKey.RightArrow) {  	if (Tesla.x < Console.WindowWidth - 2) {  		Tesla.x++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (Tesla.x < Console.WindowWidth - 2) {  	Tesla.x++;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < ObstacleList.Count; i++) {  	Unit oldObstacle = ObstacleList [i];  	Unit NewMovedObsacle = new Unit ();  	NewMovedObsacle.x = oldObstacle.x;  	NewMovedObsacle.y = oldObstacle.y + 1;  	NewMovedObsacle.color = oldObstacle.color;  	NewMovedObsacle.symbol = oldObstacle.symbol;  	if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		score = score + 10;  		if (speed > 50) {  			speed = speed - 50;  		}  		else if (speed <= 50) {  			speed = 0;  		}  	}  	if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  		livesCount--;  		Smashed = true;  		speed = 0;  		if (livesCount <= 0) {  			PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  			PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  			PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  			Console.ReadLine ();  			livesCount = 3;  		}  	}  	if (NewMovedObsacle.y < Console.WindowHeight) {  		newList.Add (NewMovedObsacle);  	}  	else {  		score++;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	score = score + 10;  	if (speed > 50) {  		speed = speed - 50;  	}  	else if (speed <= 50) {  		speed = 0;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	score = score + 10;  	if (speed > 50) {  		speed = speed - 50;  	}  	else if (speed <= 50) {  		speed = 0;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	score = score + 10;  	if (speed > 50) {  		speed = speed - 50;  	}  	else if (speed <= 50) {  		speed = 0;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol == '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	score = score + 10;  	if (speed > 50) {  		speed = speed - 50;  	}  	else if (speed <= 50) {  		speed = 0;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: score = score + 10;  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (speed > 50) {  	speed = speed - 50;  }  else if (speed <= 50) {  	speed = 0;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (speed > 50) {  	speed = speed - 50;  }  else if (speed <= 50) {  	speed = 0;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (speed > 50) {  	speed = speed - 50;  }  else if (speed <= 50) {  	speed = 0;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: speed = speed - 50;  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (speed <= 50) {  	speed = 0;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	livesCount--;  	Smashed = true;  	speed = 0;  	if (livesCount <= 0) {  		PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  		PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  		PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  		Console.ReadLine ();  		livesCount = 3;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	livesCount--;  	Smashed = true;  	speed = 0;  	if (livesCount <= 0) {  		PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  		PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  		PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  		Console.ReadLine ();  		livesCount = 3;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	livesCount--;  	Smashed = true;  	speed = 0;  	if (livesCount <= 0) {  		PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  		PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  		PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  		Console.ReadLine ();  		livesCount = 3;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	livesCount--;  	Smashed = true;  	speed = 0;  	if (livesCount <= 0) {  		PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  		PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  		PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  		Console.ReadLine ();  		livesCount = 3;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	livesCount--;  	Smashed = true;  	speed = 0;  	if (livesCount <= 0) {  		PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  		PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  		PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  		Console.ReadLine ();  		livesCount = 3;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	livesCount--;  	Smashed = true;  	speed = 0;  	if (livesCount <= 0) {  		PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  		PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  		PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  		Console.ReadLine ();  		livesCount = 3;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (NewMovedObsacle.symbol != '@' && NewMovedObsacle.x == Tesla.x && NewMovedObsacle.y == Tesla.y) {  	livesCount--;  	Smashed = true;  	speed = 0;  	if (livesCount <= 0) {  		PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  		PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  		PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  		Console.ReadLine ();  		livesCount = 3;  	}  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (livesCount <= 0) {  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  	PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  	Console.ReadLine ();  	livesCount = 3;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (livesCount <= 0) {  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  	PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  	Console.ReadLine ();  	livesCount = 3;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (livesCount <= 0) {  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  	PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  	Console.ReadLine ();  	livesCount = 3;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (livesCount <= 0) {  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  	PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  	Console.ReadLine ();  	livesCount = 3;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (livesCount <= 0) {  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  	PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  	Console.ReadLine ();  	livesCount = 3;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (livesCount <= 0) {  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  	PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  	Console.ReadLine ();  	livesCount = 3;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (livesCount <= 0) {  	PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  	PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  	PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  	Console.ReadLine ();  	livesCount = 3;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (42' 2' "GAME OVER"' ConsoleColor.Red);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (33' 3' "Press [enter] to continue"' ConsoleColor.Red);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: livesCount = 3;  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < Console.WindowWidth; i++) {  	PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintAtPosition (i' 5' '='' ConsoleColor.DarkRed);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (7' 2' "Lives: " + livesCount' ConsoleColor.Green);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (14' 2' string.Concat (Enumerable.Repeat ("^ "' livesCount).ToArray ())' ConsoleColor.White);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (20' 2' "Score: " + score' ConsoleColor.Green);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: PrintStringAtPosition (20' 3' "Speed: " + speed' ConsoleColor.Green);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: if (speed < 170) {  	speed++;  }  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (250 - speed);  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,ResetBuffer,The following statement contains a magic number: Console.BufferHeight = Console.WindowHeight = 30;  
Magic Number,HyperSpace,Program,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\Program.cs,ResetBuffer,The following statement contains a magic number: Console.BufferWidth = Console.WindowWidth = 60;  
Magic Number,HyperSpace,TearSound,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\TearSound.cs,sound,The following statement contains a magic number: for (int i = 0; i < Unit.rng.Next (3' 5); i++) {  	Console.Beep ((Unit.rng.Next (37' 3200))' (Unit.rng.Next (50' 500)));  }  
Magic Number,HyperSpace,TearSound,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\TearSound.cs,sound,The following statement contains a magic number: for (int i = 0; i < Unit.rng.Next (3' 5); i++) {  	Console.Beep ((Unit.rng.Next (37' 3200))' (Unit.rng.Next (50' 500)));  }  
Magic Number,HyperSpace,TearSound,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\TearSound.cs,sound,The following statement contains a magic number: for (int i = 0; i < Unit.rng.Next (3' 5); i++) {  	Console.Beep ((Unit.rng.Next (37' 3200))' (Unit.rng.Next (50' 500)));  }  
Magic Number,HyperSpace,TearSound,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\TearSound.cs,sound,The following statement contains a magic number: for (int i = 0; i < Unit.rng.Next (3' 5); i++) {  	Console.Beep ((Unit.rng.Next (37' 3200))' (Unit.rng.Next (50' 500)));  }  
Magic Number,HyperSpace,TearSound,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\TearSound.cs,sound,The following statement contains a magic number: for (int i = 0; i < Unit.rng.Next (3' 5); i++) {  	Console.Beep ((Unit.rng.Next (37' 3200))' (Unit.rng.Next (50' 500)));  }  
Magic Number,HyperSpace,TearSound,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\TearSound.cs,sound,The following statement contains a magic number: for (int i = 0; i < Unit.rng.Next (3' 5); i++) {  	Console.Beep ((Unit.rng.Next (37' 3200))' (Unit.rng.Next (50' 500)));  }  
Magic Number,HyperSpace,TearSound,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\TearSound.cs,sound,The following statement contains a magic number: Console.Beep ((Unit.rng.Next (37' 3200))' (Unit.rng.Next (50' 500)));  
Magic Number,HyperSpace,TearSound,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\TearSound.cs,sound,The following statement contains a magic number: Console.Beep ((Unit.rng.Next (37' 3200))' (Unit.rng.Next (50' 500)));  
Magic Number,HyperSpace,TearSound,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\TearSound.cs,sound,The following statement contains a magic number: Console.Beep ((Unit.rng.Next (37' 3200))' (Unit.rng.Next (50' 500)));  
Magic Number,HyperSpace,TearSound,C:\repos\Lucidpaper_Program5Solution\HyperSpace\HyperSpace\TearSound.cs,sound,The following statement contains a magic number: Console.Beep ((Unit.rng.Next (37' 3200))' (Unit.rng.Next (50' 500)));  
