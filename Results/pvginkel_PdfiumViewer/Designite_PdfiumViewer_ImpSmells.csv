Implementation smell,Namespace,Class,File,Method,Description
Long Method,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The method has 125 lines of code.
Long Method,PdfiumViewer,PdfViewer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfViewer.cs,InitializeComponent,The method has 114 lines of code.
Complex Method,PdfiumViewer,CustomScrollControl,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,ApplyScrollbarChanges,Cyclomatic complexity of the method is 10
Complex Method,PdfiumViewer,CustomScrollControl,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,SetDisplayRectLocation,Cyclomatic complexity of the method is 8
Complex Method,PdfiumViewer,CustomScrollControl,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,SetDisplayRectangleSize,Cyclomatic complexity of the method is 8
Complex Method,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,OnPaint,Cyclomatic complexity of the method is 11
Complex Method,PdfiumViewer,ShadeBorder,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\ShadeBorder.cs,Dispose,Cyclomatic complexity of the method is 10
Long Parameter List,PdfiumViewer,IPdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\IPdfDocument.cs,Render,The method has 6 parameters. Parameters: page' graphics' dpiX' dpiY' bounds' forPrinting
Long Parameter List,PdfiumViewer,IPdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\IPdfDocument.cs,Render,The method has 6 parameters. Parameters: page' graphics' dpiX' dpiY' bounds' flags
Long Parameter List,PdfiumViewer,IPdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\IPdfDocument.cs,Render,The method has 6 parameters. Parameters: page' width' height' dpiX' dpiY' forPrinting
Long Parameter List,PdfiumViewer,IPdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\IPdfDocument.cs,Render,The method has 6 parameters. Parameters: page' width' height' dpiX' dpiY' flags
Long Parameter List,PdfiumViewer,IPdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\IPdfDocument.cs,Render,The method has 7 parameters. Parameters: page' width' height' dpiX' dpiY' rotate' flags
Long Parameter List,PdfiumViewer,IPdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\IPdfDocument.cs,Search,The method has 5 parameters. Parameters: text' matchCase' wholeWord' startPage' endPage
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,CreateFileMapping,The method has 6 parameters. Parameters: hFile' lpFileMappingAttributes' flProtect' dwMaximumSizeHigh' dwMaximumSizeLow' lpName
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,MapViewOfFile,The method has 5 parameters. Parameters: hFileMappingObject' dwDesiredAccess' dwFileOffsetHigh' dwFileOffsetLow' dwNumberOfBytesToMap
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,ScrollWindowEx,The method has 8 parameters. Parameters: hWnd' dx' dy' prcScroll' prcClip' hrgnUpdate' prcUpdate' flags
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,ScrollWindowEx,The method has 8 parameters. Parameters: hWnd' dx' dy' prcScroll' prcClip' hrgnUpdate' prcUpdate' flags
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,ScrollWindowEx,The method has 8 parameters. Parameters: hWnd' dx' dy' prcScroll' prcClip' hrgnUpdate' prcUpdate' flags
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,Rectangle,The method has 5 parameters. Parameters: hdc' nLeftRect' nTopRect' nRightRect' nBottomRect
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,FPDF_RenderPage,The method has 8 parameters. Parameters: dc' page' start_x' start_y' size_x' size_y' rotate' flags
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,FPDF_RenderPageBitmap,The method has 8 parameters. Parameters: bitmapHandle' page' start_x' start_y' size_x' size_y' rotate' flags
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,FPDFBitmap_CreateEx,The method has 5 parameters. Parameters: width' height' format' first_scan' stride
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,FPDFBitmap_FillRect,The method has 6 parameters. Parameters: bitmapHandle' left' top' width' height' color
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,FPDFText_GetCharBox,The method has 6 parameters. Parameters: page' index' left' right' bottom' top
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,FPDF_DeviceToPage,The method has 10 parameters. Parameters: page' start_x' start_y' size_x' size_y' rotate' device_x' device_y' page_x' page_y
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,FPDF_PageToDevice,The method has 10 parameters. Parameters: page' start_x' start_y' size_x' size_y' rotate' page_x' page_y' device_x' device_y
Long Parameter List,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,FPDF_FFLDraw,The method has 9 parameters. Parameters: form' bitmap' page' start_x' start_y' size_x' size_y' rotate' flags
Long Parameter List,PdfiumViewer,SCROLLINFO,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,SCROLLINFO,The method has 5 parameters. Parameters: mask' min' max' page' pos
Long Parameter List,PdfiumViewer,Imports,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.Pdfium.cs,FPDF_RenderPage,The method has 8 parameters. Parameters: dc' page' start_x' start_y' size_x' size_y' rotate' flags
Long Parameter List,PdfiumViewer,Imports,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.Pdfium.cs,FPDF_RenderPageBitmap,The method has 8 parameters. Parameters: bitmapHandle' page' start_x' start_y' size_x' size_y' rotate' flags
Long Parameter List,PdfiumViewer,Imports,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.Pdfium.cs,FPDFBitmap_CreateEx,The method has 5 parameters. Parameters: width' height' format' first_scan' stride
Long Parameter List,PdfiumViewer,Imports,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.Pdfium.cs,FPDFBitmap_FillRect,The method has 6 parameters. Parameters: bitmapHandle' left' top' width' height' color
Long Parameter List,PdfiumViewer,Imports,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.Pdfium.cs,FPDFText_GetCharBox,The method has 6 parameters. Parameters: page' index' left' right' bottom' top
Long Parameter List,PdfiumViewer,Imports,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.Pdfium.cs,FPDF_DeviceToPage,The method has 10 parameters. Parameters: page' start_x' start_y' size_x' size_y' rotate' device_x' device_y' page_x' page_y
Long Parameter List,PdfiumViewer,Imports,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.Pdfium.cs,FPDF_PageToDevice,The method has 10 parameters. Parameters: page' start_x' start_y' size_x' size_y' rotate' page_x' page_y' device_x' device_y
Long Parameter List,PdfiumViewer,Imports,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.Pdfium.cs,FPDFPageObj_Transform,The method has 7 parameters. Parameters: page' a' b' c' d' e' f
Long Parameter List,PdfiumViewer,Imports,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.Pdfium.cs,FPDF_FFLDraw,The method has 9 parameters. Parameters: form' bitmap' page' start_x' start_y' size_x' size_y' rotate' flags
Long Parameter List,PdfiumViewer,PdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfDocument.cs,Render,The method has 6 parameters. Parameters: page' graphics' dpiX' dpiY' bounds' forPrinting
Long Parameter List,PdfiumViewer,PdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfDocument.cs,Render,The method has 6 parameters. Parameters: page' graphics' dpiX' dpiY' bounds' flags
Long Parameter List,PdfiumViewer,PdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfDocument.cs,Render,The method has 6 parameters. Parameters: page' width' height' dpiX' dpiY' forPrinting
Long Parameter List,PdfiumViewer,PdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfDocument.cs,Render,The method has 6 parameters. Parameters: page' width' height' dpiX' dpiY' flags
Long Parameter List,PdfiumViewer,PdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfDocument.cs,Render,The method has 7 parameters. Parameters: page' width' height' dpiX' dpiY' rotate' flags
Long Parameter List,PdfiumViewer,PdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfDocument.cs,Search,The method has 5 parameters. Parameters: text' matchCase' wholeWord' startPage' endPage
Long Parameter List,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,RenderPDFPageToDC,The method has 9 parameters. Parameters: pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' flags
Long Parameter List,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,RenderPDFPageToBitmap,The method has 11 parameters. Parameters: pageNumber' bitmapHandle' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' rotate' flags' renderFormFill
Long Parameter List,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,Search,The method has 5 parameters. Parameters: text' matchCase' wholeWord' startPage' endPage
Long Parameter List,PdfiumViewer,PdfMarker,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfMarker.cs,PdfMarker,The method has 5 parameters. Parameters: page' bounds' color' borderColor' borderWidth
Long Parameter List,PdfiumViewer,PdfPrintDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfPrintDocument.cs,RenderPage,The method has 6 parameters. Parameters: e' page' left' top' width' height
Long Statement,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,RenderPDFPageToBitmap,The length of the statement  "                NativeMethods.FPDF_RenderPageBitmap(bitmapHandle' pageData.Page' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' rotate' flags); " is 137.
Long Statement,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,RenderPDFPageToBitmap,The length of the statement  "                    NativeMethods.FPDF_FFLDraw(_form' bitmapHandle' pageData.Page' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' rotate' flags); " is 135.
Long Statement,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,GetMetaTextAsDate,The length of the statement  "                    @"(?:D:)(?<year>\d\d\d\d)(?<month>\d\d)(?<day>\d\d)(?<hour>\d\d)(?<minute>\d\d)(?<second>\d\d)(?<tz_offset>[+-zZ])?(?<tz_hour>\d\d)?'?(?<tz_minute>\d\d)?'?"); " is 158.
Long Statement,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,GetScrollClientArea,The length of the statement  "                scrollbars == ScrollBars.Vertical || scrollbars == ScrollBars.Both ? Width - SystemInformation.VerticalScrollBarWidth : Width' " is 126.
Long Statement,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,GetScrollClientArea,The length of the statement  "                scrollbars == ScrollBars.Horizontal || scrollbars == ScrollBars.Both ? Height - SystemInformation.HorizontalScrollBarHeight : Height " is 132.
Long Statement,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,DrawPageImage,The length of the statement  "                pageCache.Image = Document.Render(page' pageBounds.Width' pageBounds.Height' graphics.DpiX' graphics.DpiY' Rotation' PdfRenderFlags.Annotations); " is 145.
Long Statement,PdfiumViewer,PdfViewer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfViewer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PdfViewer)); " is 129.
Complex Conditional,PdfiumViewer,CustomScrollControl,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,SetDisplayRectLocation,The conditional expression  "(xDelta != 0 || yDelta != 0) && IsHandleCreated && preserveContents"  is complex.
Complex Conditional,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,GetTextBounds,The conditional expression  "lastBounds.HasValue &&                      AreClose(lastBounds.Value.Right' bounds.Left) &&                      AreClose(lastBounds.Value.Top' bounds.Top) &&                      AreClose(lastBounds.Value.Bottom' bounds.Bottom)"  is complex.
Empty Catch Block,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,HandleLinkClick,The method has an empty catch block.
Empty Catch Block,PdfiumViewer,PdfViewer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfViewer.cs,_printButton_Click,The method has an empty catch block.
Magic Number,PdfiumViewer,CustomScrollControl,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: if (HScroll)              {                  _horizontalScroll.Maximum = displayRect.Width - 1;                  _horizontalScroll.LargeChange = ClientRectangle.Width;                  _horizontalScroll.SmallChange = 5;                    if (-displayRect.X >= 0 && -displayRect.X < _horizontalScroll.Maximum)                      _horizontalScroll.Value = -displayRect.X;                    _horizontalScroll.UpdateScrollInfo();              }
Magic Number,PdfiumViewer,CustomScrollControl,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: if (VScroll)              {                  _verticalScroll.Maximum = displayRect.Height - 1;                  _verticalScroll.LargeChange = ClientRectangle.Height;                  _verticalScroll.SmallChange = 5;                    if (-displayRect.Y >= 0 && -displayRect.Y < _verticalScroll.Maximum)                      _verticalScroll.Value = -displayRect.Y;                    _verticalScroll.UpdateScrollInfo();              }
Magic Number,PdfiumViewer,ScrollProperties,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,ScrollProperties,The following statement contains a magic number: Maximum = 100;
Magic Number,PdfiumViewer,NativeMethods,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\NativeMethods.cs,TryLoadNativeLibrary,The following statement contains a magic number: path = Path.Combine(path' IntPtr.Size == 4 ? "x86" : "x64");
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 3;
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this._cancelButton' 2' 1);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(9' 9);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(9' 9);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 2;
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(319' 87);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(319' 87);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._acceptButton.Location = new System.Drawing.Point(160' 61);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._acceptButton.Location = new System.Drawing.Point(160' 61);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._acceptButton.Size = new System.Drawing.Size(75' 23);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._acceptButton.Size = new System.Drawing.Size(75' 23);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(241' 61);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(241' 61);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.TabIndex = 2;
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.ColumnCount = 2;
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetColumnSpan(this.tableLayoutPanel2' 3);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.RowCount = 2;
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Size = new System.Drawing.Size(319' 58);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Size = new System.Drawing.Size(319' 58);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.SetColumnSpan(this._helpLabel' 2);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._helpLabel.Location = new System.Drawing.Point(3' 3);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._helpLabel.Location = new System.Drawing.Point(3' 3);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._helpLabel.Margin = new System.Windows.Forms.Padding(3);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._helpLabel.Size = new System.Drawing.Size(283' 26);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._helpLabel.Size = new System.Drawing.Size(283' 26);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 35);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 35);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new System.Windows.Forms.Padding(3);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(56' 20);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(56' 20);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._password.Location = new System.Drawing.Point(65' 35);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._password.Location = new System.Drawing.Point(65' 35);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._password.Size = new System.Drawing.Size(251' 20);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._password.Size = new System.Drawing.Size(251' 20);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this._password.TabIndex = 2;
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(337' 105);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(337' 105);
Magic Number,PdfiumViewer,PasswordForm,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(9);
Magic Number,PdfiumViewer,PdfRectangle,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRectangle.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (Page * 397) ^ Bounds.GetHashCode();              }
Magic Number,PdfiumViewer,PdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfDocument.cs,Render,The following statement contains a magic number: if ((flags & PdfRenderFlags.CorrectFromDpi) != 0)              {                  width = width * (int)dpiX / 72;                  height = height * (int)dpiY / 72;              }
Magic Number,PdfiumViewer,PdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfDocument.cs,Render,The following statement contains a magic number: if ((flags & PdfRenderFlags.CorrectFromDpi) != 0)              {                  width = width * (int)dpiX / 72;                  height = height * (int)dpiY / 72;              }
Magic Number,PdfiumViewer,PdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfDocument.cs,Render,The following statement contains a magic number: try              {                  var handle = NativeMethods.FPDFBitmap_CreateEx(width' height' 4' data.Scan0' width * 4);                    try                  {                      uint background = (flags & PdfRenderFlags.Transparent) == 0 ? 0xFFFFFFFF : 0x00FFFFFF;                        NativeMethods.FPDFBitmap_FillRect(handle' 0' 0' width' height' background);                        bool success = _file.RenderPDFPageToBitmap(                          page'                          handle'                          (int)dpiX' (int)dpiY'                          0' 0' width' height'                          (int)rotate'                          FlagsToFPDFFlags(flags)'                          (flags & PdfRenderFlags.Annotations) != 0                      );                        if (!success)                          throw new Win32Exception();                  }                  finally                  {                      NativeMethods.FPDFBitmap_Destroy(handle);                  }              }              finally              {                  bitmap.UnlockBits(data);              }
Magic Number,PdfiumViewer,PdfDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfDocument.cs,Render,The following statement contains a magic number: try              {                  var handle = NativeMethods.FPDFBitmap_CreateEx(width' height' 4' data.Scan0' width * 4);                    try                  {                      uint background = (flags & PdfRenderFlags.Transparent) == 0 ? 0xFFFFFFFF : 0x00FFFFFF;                        NativeMethods.FPDFBitmap_FillRect(handle' 0' 0' width' height' background);                        bool success = _file.RenderPDFPageToBitmap(                          page'                          handle'                          (int)dpiX' (int)dpiY'                          0' 0' width' height'                          (int)rotate'                          FlagsToFPDFFlags(flags)'                          (flags & PdfRenderFlags.Annotations) != 0                      );                        if (!success)                          throw new Win32Exception();                  }                  finally                  {                      NativeMethods.FPDFBitmap_Destroy(handle);                  }              }              finally              {                  bitmap.UnlockBits(data);              }
Magic Number,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,GetPageLinks,The following statement contains a magic number: using (var pageData = new PageData(_document' _form' pageNumber))              {                  int link = 0;                  IntPtr annotation;                    while (NativeMethods.FPDFLink_Enumerate(pageData.Page' ref link' out annotation))                  {                      var destination = NativeMethods.FPDFLink_GetDest(_document' annotation);                      int? target = null;                      string uri = null;                        if (destination != IntPtr.Zero)                          target = (int)NativeMethods.FPDFDest_GetPageIndex(_document' destination);                        var action = NativeMethods.FPDFLink_GetAction(annotation);                      if (action != IntPtr.Zero)                      {                          const uint length = 1024;                          var sb = new StringBuilder(1024);                          NativeMethods.FPDFAction_GetURIPath(_document' action' sb' length);                            uri = sb.ToString();                      }                        var rect = new NativeMethods.FS_RECTF();                        if (NativeMethods.FPDFLink_GetAnnotRect(annotation' rect) && (target.HasValue || uri != null))                      {                          links.Add(new PdfPageLink(                              new RectangleF(rect.left' rect.top' rect.right - rect.left' rect.bottom - rect.top)'                              target'                              uri                          ));                      }                  }              }
Magic Number,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,GetPageLinks,The following statement contains a magic number: using (var pageData = new PageData(_document' _form' pageNumber))              {                  int link = 0;                  IntPtr annotation;                    while (NativeMethods.FPDFLink_Enumerate(pageData.Page' ref link' out annotation))                  {                      var destination = NativeMethods.FPDFLink_GetDest(_document' annotation);                      int? target = null;                      string uri = null;                        if (destination != IntPtr.Zero)                          target = (int)NativeMethods.FPDFDest_GetPageIndex(_document' destination);                        var action = NativeMethods.FPDFLink_GetAction(annotation);                      if (action != IntPtr.Zero)                      {                          const uint length = 1024;                          var sb = new StringBuilder(1024);                          NativeMethods.FPDFAction_GetURIPath(_document' action' sb' length);                            uri = sb.ToString();                      }                        var rect = new NativeMethods.FS_RECTF();                        if (NativeMethods.FPDFLink_GetAnnotRect(annotation' rect) && (target.HasValue || uri != null))                      {                          links.Add(new PdfPageLink(                              new RectangleF(rect.left' rect.top' rect.right - rect.left' rect.bottom - rect.top)'                              target'                              uri                          ));                      }                  }              }
Magic Number,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,LoadDocument,The following statement contains a magic number: for (int i = 1; i <= 2; i++)              {                  _formCallbacks.version = i;                    _form = NativeMethods.FPDFDOC_InitFormFillEnvironment(_document' _formCallbacks);                  if (_form != IntPtr.Zero)                      break;              }
Magic Number,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,LoadDocument,The following statement contains a magic number: NativeMethods.FPDF_SetFormFieldHighlightAlpha(_form' 100);
Magic Number,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,Search,The following statement contains a magic number: for (int page = startPage; page <= endPage; page++)              {                  using (var pageData = new PageData(_document' _form' page))                  {                      NativeMethods.FPDF_SEARCH_FLAGS flags = 0;                      if (matchCase)                          flags |= NativeMethods.FPDF_SEARCH_FLAGS.FPDF_MATCHCASE;                      if (wholeWord)                          flags |= NativeMethods.FPDF_SEARCH_FLAGS.FPDF_MATCHWHOLEWORD;                        var handle = NativeMethods.FPDFText_FindStart(pageData.TextPage' FPDFEncoding.GetBytes(text)' flags' 0);                        try                      {                          while (NativeMethods.FPDFText_FindNext(handle))                          {                              int index = NativeMethods.FPDFText_GetSchResultIndex(handle);                                int matchLength = NativeMethods.FPDFText_GetSchCount(handle);                                var result = new byte[(matchLength + 1) * 2];                              NativeMethods.FPDFText_GetText(pageData.TextPage' index' matchLength' result);                              string match = FPDFEncoding.GetString(result' 0' matchLength * 2);                                matches.Add(new PdfMatch(                                  match'                                  new PdfTextSpan(page' index' matchLength)'                                  page                              ));                          }                      }                      finally                      {                          NativeMethods.FPDFText_FindClose(handle);                      }                  }              }
Magic Number,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,Search,The following statement contains a magic number: for (int page = startPage; page <= endPage; page++)              {                  using (var pageData = new PageData(_document' _form' page))                  {                      NativeMethods.FPDF_SEARCH_FLAGS flags = 0;                      if (matchCase)                          flags |= NativeMethods.FPDF_SEARCH_FLAGS.FPDF_MATCHCASE;                      if (wholeWord)                          flags |= NativeMethods.FPDF_SEARCH_FLAGS.FPDF_MATCHWHOLEWORD;                        var handle = NativeMethods.FPDFText_FindStart(pageData.TextPage' FPDFEncoding.GetBytes(text)' flags' 0);                        try                      {                          while (NativeMethods.FPDFText_FindNext(handle))                          {                              int index = NativeMethods.FPDFText_GetSchResultIndex(handle);                                int matchLength = NativeMethods.FPDFText_GetSchCount(handle);                                var result = new byte[(matchLength + 1) * 2];                              NativeMethods.FPDFText_GetText(pageData.TextPage' index' matchLength' result);                              string match = FPDFEncoding.GetString(result' 0' matchLength * 2);                                matches.Add(new PdfMatch(                                  match'                                  new PdfTextSpan(page' index' matchLength)'                                  page                              ));                          }                      }                      finally                      {                          NativeMethods.FPDFText_FindClose(handle);                      }                  }              }
Magic Number,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,GetPdfText,The following statement contains a magic number: var result = new byte[(textSpan.Length + 1) * 2];
Magic Number,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,GetPdfText,The following statement contains a magic number: return FPDFEncoding.GetString(result' 0' textSpan.Length * 2);
Magic Number,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,GetMetaText,The following statement contains a magic number: if (length <= 2)                  return string.Empty;
Magic Number,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,GetMetaText,The following statement contains a magic number: return Encoding.Unicode.GetString(buffer' 0' (int)(length - 2));
Magic Number,PdfiumViewer,PdfPoint,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfPoint.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (Page * 397) ^ Location.GetHashCode();              }
Magic Number,PdfiumViewer,PdfSearchManager,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfSearchManager.cs,AddMatch,The following statement contains a magic number: foreach (var pdfBounds in _bounds[index])              {                  var bounds = new RectangleF(                      pdfBounds.Bounds.Left - 1'                      pdfBounds.Bounds.Top + 1'                      pdfBounds.Bounds.Width + 2'                      pdfBounds.Bounds.Height - 2                  );                    var marker = new PdfMarker(                      pdfBounds.Page'                      bounds'                      current ? CurrentMatchColor : MatchColor'                      current ? CurrentMatchBorderColor : MatchBorderColor'                      current ? CurrentMatchBorderWidth : MatchBorderWidth                  );                    Renderer.Markers.Add(marker);              }
Magic Number,PdfiumViewer,PdfSearchManager,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfSearchManager.cs,AddMatch,The following statement contains a magic number: foreach (var pdfBounds in _bounds[index])              {                  var bounds = new RectangleF(                      pdfBounds.Bounds.Left - 1'                      pdfBounds.Bounds.Top + 1'                      pdfBounds.Bounds.Width + 2'                      pdfBounds.Bounds.Height - 2                  );                    var marker = new PdfMarker(                      pdfBounds.Page'                      bounds'                      current ? CurrentMatchColor : MatchColor'                      current ? CurrentMatchBorderColor : MatchBorderColor'                      current ? CurrentMatchBorderWidth : MatchBorderWidth                  );                    Renderer.Markers.Add(marker);              }
Magic Number,PdfiumViewer,PdfTextSpan,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfTextSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = Page;                  hashCode = (hashCode * 397) ^ Offset;                  hashCode = (hashCode * 397) ^ Length;                  return hashCode;              }
Magic Number,PdfiumViewer,PdfTextSpan,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfTextSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = Page;                  hashCode = (hashCode * 397) ^ Offset;                  hashCode = (hashCode * 397) ^ Length;                  return hashCode;              }
Magic Number,PdfiumViewer,PdfPrintDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfPrintDocument.cs,PrintMultiplePages,The following statement contains a magic number: if (_currentPage < pageCount)              {                  double width = e.PageBounds.Width - e.PageSettings.HardMarginX * 2;                  double height = e.PageBounds.Height - e.PageSettings.HardMarginY * 2;                    double widthPerPage = (width - (settings.Horizontal - 1) * settings.Margin) / settings.Horizontal;                  double heightPerPage = (height - (settings.Vertical - 1) * settings.Margin) / settings.Vertical;                    for (int horizontal = 0; horizontal < settings.Horizontal; horizontal++)                  {                      for (int vertical = 0; vertical < settings.Vertical; vertical++)                      {                          int page = _currentPage * pagesPerPage;                          if (settings.Orientation == System.Windows.Forms.Orientation.Horizontal)                              page += vertical * settings.Vertical + horizontal;                          else                              page += horizontal * settings.Horizontal + vertical;                            if (page >= _document.PageCount)                              continue;                            double pageLeft = (widthPerPage + settings.Margin) * horizontal;                          double pageTop = (heightPerPage + settings.Margin) * vertical;                            RenderPage(e' page' pageLeft' pageTop' widthPerPage' heightPerPage);                      }                  }                    _currentPage++;              }
Magic Number,PdfiumViewer,PdfPrintDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfPrintDocument.cs,PrintMultiplePages,The following statement contains a magic number: if (_currentPage < pageCount)              {                  double width = e.PageBounds.Width - e.PageSettings.HardMarginX * 2;                  double height = e.PageBounds.Height - e.PageSettings.HardMarginY * 2;                    double widthPerPage = (width - (settings.Horizontal - 1) * settings.Margin) / settings.Horizontal;                  double heightPerPage = (height - (settings.Vertical - 1) * settings.Margin) / settings.Vertical;                    for (int horizontal = 0; horizontal < settings.Horizontal; horizontal++)                  {                      for (int vertical = 0; vertical < settings.Vertical; vertical++)                      {                          int page = _currentPage * pagesPerPage;                          if (settings.Orientation == System.Windows.Forms.Orientation.Horizontal)                              page += vertical * settings.Vertical + horizontal;                          else                              page += horizontal * settings.Horizontal + vertical;                            if (page >= _document.PageCount)                              continue;                            double pageLeft = (widthPerPage + settings.Margin) * horizontal;                          double pageTop = (heightPerPage + settings.Margin) * vertical;                            RenderPage(e' page' pageLeft' pageTop' widthPerPage' heightPerPage);                      }                  }                    _currentPage++;              }
Magic Number,PdfiumViewer,PdfPrintDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfPrintDocument.cs,PrintSinglePage,The following statement contains a magic number: if (_currentPage < _document.PageCount)              {                  var pageOrientation = GetOrientation(_document.PageSizes[_currentPage]);                  var printOrientation = GetOrientation(e.PageBounds.Size);                    e.PageSettings.Landscape = pageOrientation == Orientation.Landscape;                    double left;                  double top;                  double width;                  double height;                    if (_settings.Mode == PdfPrintMode.ShrinkToMargin)                  {                      left = 0;                      top = 0;                      width = e.PageBounds.Width - e.PageSettings.HardMarginX * 2;                      height = e.PageBounds.Height - e.PageSettings.HardMarginY * 2;                  }                  else                  {                      left = -e.PageSettings.HardMarginX;                      top = -e.PageSettings.HardMarginY;                      width = e.PageBounds.Width;                      height = e.PageBounds.Height;                  }                    if (pageOrientation != printOrientation)                  {                      Swap(ref height' ref width);                      Swap(ref left' ref top);                  }                    RenderPage(e' _currentPage' left' top' width' height);                  _currentPage++;              }
Magic Number,PdfiumViewer,PdfPrintDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfPrintDocument.cs,PrintSinglePage,The following statement contains a magic number: if (_currentPage < _document.PageCount)              {                  var pageOrientation = GetOrientation(_document.PageSizes[_currentPage]);                  var printOrientation = GetOrientation(e.PageBounds.Size);                    e.PageSettings.Landscape = pageOrientation == Orientation.Landscape;                    double left;                  double top;                  double width;                  double height;                    if (_settings.Mode == PdfPrintMode.ShrinkToMargin)                  {                      left = 0;                      top = 0;                      width = e.PageBounds.Width - e.PageSettings.HardMarginX * 2;                      height = e.PageBounds.Height - e.PageSettings.HardMarginY * 2;                  }                  else                  {                      left = -e.PageSettings.HardMarginX;                      top = -e.PageSettings.HardMarginY;                      width = e.PageBounds.Width;                      height = e.PageBounds.Height;                  }                    if (pageOrientation != printOrientation)                  {                      Swap(ref height' ref width);                      Swap(ref left' ref top);                  }                    RenderPage(e' _currentPage' left' top' width' height);                  _currentPage++;              }
Magic Number,PdfiumViewer,PdfPrintDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfPrintDocument.cs,RenderPage,The following statement contains a magic number: left += (width - scaledWidth) / 2;
Magic Number,PdfiumViewer,PdfPrintDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfPrintDocument.cs,RenderPage,The following statement contains a magic number: top += (height - scaledHeight) / 2;
Magic Number,PdfiumViewer,PdfPrintDocument,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfPrintDocument.cs,AdjustDpi,The following statement contains a magic number: return (int)((value / 100.0) * dpi);
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,GetScrollOffset,The following statement contains a magic number: int leftOffset = (HScroll ? DisplayRectangle.X : (bounds.Width - maxWidth) / 2) + maxWidth / 2;
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,GetScrollOffset,The following statement contains a magic number: int leftOffset = (HScroll ? DisplayRectangle.X : (bounds.Width - maxWidth) / 2) + maxWidth / 2;
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,RebuildPageCache,The following statement contains a magic number: int leftOffset = -maxWidth / 2;
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,RebuildPageCache,The following statement contains a magic number: for (int page = 0; page < Document.PageSizes.Count; page++)              {                  var size = TranslateSize(Document.PageSizes[page]);                  int height = (int)(size.Height * _scaleFactor);                  int fullHeight = height + ShadeBorder.Size.Vertical + PageMargin.Vertical;                  int width = (int)(size.Width * _scaleFactor);                  int maxFullWidth = (int)(_maxWidth * _scaleFactor) + ShadeBorder.Size.Horizontal + PageMargin.Horizontal;                  int fullWidth = width + ShadeBorder.Size.Horizontal + PageMargin.Horizontal;                  int thisLeftOffset = leftOffset + (maxFullWidth - fullWidth) / 2;                    while (_pageCache.Count <= page)                  {                      _pageCache.Add(new PageCache());                  }                    var pageCache = _pageCache[page];                    if (pageCache.Image != null)                  {                      pageCache.Image.Dispose();                      pageCache.Image = null;                  }                    pageCache.Links = null;                  pageCache.Bounds = new Rectangle(                      thisLeftOffset + ShadeBorder.Size.Left + PageMargin.Left'                      offset + ShadeBorder.Size.Top + PageMargin.Top'                      width'                      height                  );                  pageCache.OuterBounds = new Rectangle(                      thisLeftOffset'                      offset'                      width + ShadeBorder.Size.Horizontal + PageMargin.Horizontal'                      height + ShadeBorder.Size.Vertical + PageMargin.Vertical                  );                    offset += fullHeight;              }
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,GetDocumentBounds,The following statement contains a magic number: var center = new Point(                  DisplayRectangle.Width / 2'                  DisplayRectangle.Height / 2              );
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,GetDocumentBounds,The following statement contains a magic number: var center = new Point(                  DisplayRectangle.Width / 2'                  DisplayRectangle.Height / 2              );
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,GetDocumentBounds,The following statement contains a magic number: return new Rectangle(                  center.X - width / 2'                  center.Y - height / 2'                  width'                  height              );
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,GetDocumentBounds,The following statement contains a magic number: return new Rectangle(                  center.X - width / 2'                  center.Y - height / 2'                  width'                  height              );
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,RotateLeft,The following statement contains a magic number: Rotation = (PdfRotation)(((int)Rotation + 3) % 4);
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,RotateLeft,The following statement contains a magic number: Rotation = (PdfRotation)(((int)Rotation + 3) % 4);
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,RotateRight,The following statement contains a magic number: Rotation = (PdfRotation)(((int)Rotation + 1) % 4);
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,ScrollIntoView,The following statement contains a magic number: if (rectangle.Top < 0 || rectangle.Bottom > clientArea.Height)              {                  var displayRectangle = DisplayRectangle;                  int center = rectangle.Top + rectangle.Height / 2;                  int documentCenter = center - displayRectangle.Y;                  int displayCenter = clientArea.Height / 2;                  int offset = documentCenter - displayCenter;                    SetDisplayRectLocation(new Point(                      displayRectangle.X'                      -offset                  ));              }
Magic Number,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,ScrollIntoView,The following statement contains a magic number: if (rectangle.Top < 0 || rectangle.Bottom > clientArea.Height)              {                  var displayRectangle = DisplayRectangle;                  int center = rectangle.Top + rectangle.Height / 2;                  int documentCenter = center - displayRectangle.Y;                  int displayCenter = clientArea.Height / 2;                  int offset = documentCenter - displayCenter;                    SetDisplayRectLocation(new Point(                      displayRectangle.X'                      -offset                  ));              }
Magic Number,PdfiumViewer,StreamExtensions,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\StreamExtensions.cs,CopyStream,The following statement contains a magic number: var buffer = new byte[4096];
Missing Default,PdfiumViewer,CustomScrollControl,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,WmHScroll,The following switch statement is missing a default case: switch (NativeMethods.Util.LOWORD(m.WParam))              {                  case NativeMethods.SB_THUMBPOSITION:                  case NativeMethods.SB_THUMBTRACK:                      SetDisplayRectLocation(                          -ScrollThumbPosition(NativeMethods.SB_HORZ)'                          _displayRect.Y                      );                      SyncScrollbars();                      break;                    case NativeMethods.SB_LINEUP:                      PerformScroll(ScrollAction.LineUp' Orientation.Horizontal);                      break;                    case NativeMethods.SB_LINEDOWN:                      PerformScroll(ScrollAction.LineDown' Orientation.Horizontal);                      break;                    case NativeMethods.SB_PAGEUP:                      PerformScroll(ScrollAction.PageUp' Orientation.Horizontal);                      break;                    case NativeMethods.SB_PAGEDOWN:                      PerformScroll(ScrollAction.PageDown' Orientation.Horizontal);                      break;                    case NativeMethods.SB_LEFT:                      PerformScroll(ScrollAction.Home' Orientation.Horizontal);                      break;                    case NativeMethods.SB_RIGHT:                      PerformScroll(ScrollAction.End' Orientation.Horizontal);                      break;              }
Missing Default,PdfiumViewer,CustomScrollControl,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,WmVScroll,The following switch statement is missing a default case: switch (NativeMethods.Util.LOWORD(m.WParam))              {                  case NativeMethods.SB_THUMBPOSITION:                  case NativeMethods.SB_THUMBTRACK:                      SetDisplayRectLocation(                          _displayRect.X'                          -ScrollThumbPosition(NativeMethods.SB_VERT)                      );                      SyncScrollbars();                      break;                    case NativeMethods.SB_LINEUP:                      PerformScroll(ScrollAction.LineUp' Orientation.Vertical);                      break;                    case NativeMethods.SB_LINEDOWN:                      PerformScroll(ScrollAction.LineDown' Orientation.Vertical);                      break;                    case NativeMethods.SB_PAGEUP:                      PerformScroll(ScrollAction.PageUp' Orientation.Vertical);                      break;                    case NativeMethods.SB_PAGEDOWN:                      PerformScroll(ScrollAction.PageDown' Orientation.Vertical);                      break;                    case NativeMethods.SB_TOP:                      PerformScroll(ScrollAction.Home' Orientation.Vertical);                      break;                    case NativeMethods.SB_BOTTOM:                      PerformScroll(ScrollAction.End' Orientation.Vertical);                      break;              }
Missing Default,PdfiumViewer,CustomScrollControl,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,PerformScroll,The following switch statement is missing a default case: switch (action)                  {                      case ScrollAction.LineUp:                          if (pos > _horizontalScroll.SmallChange)                              pos -= _horizontalScroll.SmallChange;                          else                              pos = 0;                          break;                        case ScrollAction.LineDown:                          if (pos < maxPos - _horizontalScroll.SmallChange)                              pos += _horizontalScroll.SmallChange;                          else                              pos = maxPos;                          break;                        case ScrollAction.PageUp:                          if (pos > _horizontalScroll.LargeChange)                              pos -= _horizontalScroll.LargeChange;                          else                              pos = 0;                          break;                        case ScrollAction.PageDown:                          if (pos < maxPos - _horizontalScroll.LargeChange)                              pos += _horizontalScroll.LargeChange;                          else                              pos = maxPos;                          break;                        case ScrollAction.Home:                          pos = 0;                          break;                        case ScrollAction.End:                          pos = maxPos;                          break;                  }
Missing Default,PdfiumViewer,CustomScrollControl,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\CustomScrollControl.cs,PerformScroll,The following switch statement is missing a default case: switch (action)                  {                      case ScrollAction.LineUp:                          if (pos > 0)                              pos -= _verticalScroll.SmallChange;                          else                              pos = 0;                          break;                        case ScrollAction.LineDown:                          if (pos < maxPos - _verticalScroll.SmallChange)                              pos += _verticalScroll.SmallChange;                          else                              pos = maxPos;                          break;                        case ScrollAction.PageUp:                          if (pos > _verticalScroll.LargeChange)                              pos -= _verticalScroll.LargeChange;                          else                              pos = 0;                          break;                        case ScrollAction.PageDown:                          if (pos < maxPos - _verticalScroll.LargeChange)                              pos += _verticalScroll.LargeChange;                          else                              pos = maxPos;                          break;                        case ScrollAction.Home:                          pos = 0;                          break;                        case ScrollAction.End:                          pos = maxPos;                          break;                  }
Missing Default,PdfiumViewer,PdfFile,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfFile.cs,GetMetaTextAsDate,The following switch statement is missing a default case: switch (tzOffset)                      {                          case "Z":                          case "z":                              formattedDate += "+0";                              break;                          case "+":                          case "-":                              formattedDate += $"{tzOffset}{tzHour}:{tzMinute}";                              break;                      }
Missing Default,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,TranslatePointToPdf,The following switch statement is missing a default case: switch (Rotation)              {                  case PdfRotation.Rotate90:                      point = new Point(size.Height - point.Y' point.X);                      size = new Size(size.Height' size.Width);                      break;                  case PdfRotation.Rotate180:                      point = new Point(size.Width - point.X' size.Height - point.Y);                      break;                  case PdfRotation.Rotate270:                      point = new Point(point.Y' size.Width - point.X);                      size = new Size(size.Height' size.Width);                      break;              }
Missing Default,PdfiumViewer,PdfRenderer,C:\repos\pvginkel_PdfiumViewer\PdfiumViewer\PdfRenderer.cs,TranslatePointFromPdf,The following switch statement is missing a default case: switch (Rotation)              {                  case PdfRotation.Rotate90:                      point = new PointF(pageSize.Height - point.Y' point.X);                      pageSize = new SizeF(pageSize.Height' pageSize.Width);                      break;                  case PdfRotation.Rotate180:                      point = new PointF(pageSize.Width - point.X' pageSize.Height - point.Y);                      break;                  case PdfRotation.Rotate270:                      point = new PointF(point.Y' pageSize.Width - point.X);                      pageSize = new SizeF(pageSize.Height' pageSize.Width);                      break;              }
