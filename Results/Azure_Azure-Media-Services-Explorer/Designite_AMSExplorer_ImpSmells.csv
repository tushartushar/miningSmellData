Implementation smell,Namespace,Class,File,Method,Description
Long Method,AMSExplorer,AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig.cs,InitializeComponent,The method has 203 lines of code.
Long Method,AMSExplorer,AddDynamicEncryptionFrame3_ExistingPolicies,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_ExistingPolicies.cs,InitializeComponent,The method has 117 lines of code.
Long Method,AMSExplorer,AddDynamicEncryptionFrame3_AESDelivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_AESDelivery.cs,InitializeComponent,The method has 183 lines of code.
Long Method,AMSExplorer,AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery.cs,InitializeComponent,The method has 340 lines of code.
Long Method,AMSExplorer,AddDynamicEncryptionFrame3_CENCDelivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENCDelivery.cs,InitializeComponent,The method has 286 lines of code.
Long Method,AMSExplorer,AddDynamicEncryptionFrame4,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame4.cs,InitializeComponent,The method has 462 lines of code.
Long Method,AMSExplorer,AddDynamicEncryptionFrame2_AESKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_AESKeyConfig.cs,InitializeComponent,The method has 222 lines of code.
Long Method,AMSExplorer,AddDynamicEncryptionFrame6_WidevineLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame6_WidevineLicense.cs,InitializeComponent,The method has 256 lines of code.
Long Method,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,InitializeComponent,The method has 223 lines of code.
Long Method,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InitializeComponent,The method has 363 lines of code.
Long Method,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,InitializeComponent,The method has 313 lines of code.
Long Method,AMSExplorer,ChooseStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChooseStreamingEndpoint.cs,InitializeComponent,The method has 237 lines of code.
Long Method,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,InitializeComponent,The method has 152 lines of code.
Long Method,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,InitializeComponent,The method has 134 lines of code.
Long Method,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The method has 252 lines of code.
Long Method,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,InitializeComponent,The method has 169 lines of code.
Long Method,AMSExplorer,ConfigureTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\ConfigureTelemetry.cs,InitializeComponent,The method has 145 lines of code.
Long Method,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The method has 253 lines of code.
Long Method,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,JsonInternalConfig,The method has 105 lines of code.
Long Method,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The method has 399 lines of code.
Long Method,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The method has 331 lines of code.
Long Method,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The method has 179 lines of code.
Long Method,AMSExplorer,StreamingEndpointCDNEnable,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointCDNEnable.cs,InitializeComponent,The method has 102 lines of code.
Long Method,AMSExplorer,UploadOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\UploadOptions.cs,InitializeComponent,The method has 128 lines of code.
Long Method,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,InitializeComponent,The method has 328 lines of code.
Long Method,AMSExplorer,TimeRangeSelection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeRangeSelection.cs,InitializeComponent,The method has 138 lines of code.
Long Method,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The method has 448 lines of code.
Long Method,AMSExplorer,DownloadToLocal,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DownloadToLocal.cs,InitializeComponent,The method has 137 lines of code.
Long Method,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,InitializeComponent,The method has 186 lines of code.
Long Method,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The method has 373 lines of code.
Long Method,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The method has 335 lines of code.
Long Method,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The method has 141 lines of code.
Long Method,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The method has 141 lines of code.
Long Method,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,InitializeComponent,The method has 246 lines of code.
Long Method,AMSExplorer,CreateTestToken,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateTestToken.cs,InitializeComponent,The method has 264 lines of code.
Long Method,AMSExplorer,EditorXMLJSON,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EditorXMLJSON.cs,InitializeComponent,The method has 117 lines of code.
Long Method,AMSExplorer,StorageSettings,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StorageSettings.cs,InitializeComponent,The method has 156 lines of code.
Long Method,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,GetSubclippingInternalConfiguration,The method has 148 lines of code.
Long Method,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The method has 477 lines of code.
Long Method,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The method has 222 lines of code.
Long Method,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The method has 898 lines of code.
Long Method,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The method has 555 lines of code.
Long Method,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The method has 1746 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform,The method has 175 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The method has 111 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The method has 171 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The method has 242 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The method has 135 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The method has 191 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The method has 201 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The method has 314 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The method has 191 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The method has 149 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteChannels,The method has 102 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayChannelInfo,The method has 132 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayStreamingEndpointInfo,The method has 113 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The method has 200 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The method has 251 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The method has 188 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The method has 197 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetPrograms,The method has 112 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The method has 101 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The method has 113 lines of code.
Long Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The method has 4459 lines of code.
Long Method,AMSExplorer,JobOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobOptions.cs,InitializeComponent,The method has 180 lines of code.
Long Method,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The method has 427 lines of code.
Long Method,AMSExplorer,IndexerOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerOptions.cs,InitializeComponent,The method has 147 lines of code.
Long Method,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,InitializeComponent,The method has 394 lines of code.
Long Method,AMSExplorer,MetadataInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MetadataInformation.cs,InitializeComponent,The method has 198 lines of code.
Long Method,AMSExplorer,BatchUploadFrame2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BatchUploadFrame2.cs,InitializeComponent,The method has 157 lines of code.
Long Method,AMSExplorer,BatchUploadFrame1,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BatchUploadFrame1.cs,InitializeComponent,The method has 126 lines of code.
Long Method,AMSExplorer,AttachStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AttachStorage.cs,InitializeComponent,The method has 194 lines of code.
Long Method,AMSExplorer,ProcessFromJobTemplate,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProcessFromJobTemplate.cs,InitializeComponent,The method has 136 lines of code.
Long Method,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The method has 774 lines of code.
Long Method,AMSExplorer,AddDynamicEncryptionFrame1,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame1.cs,InitializeComponent,The method has 348 lines of code.
Long Method,AMSExplorer,CreateStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateStreamingEndpoint.cs,InitializeComponent,The method has 179 lines of code.
Long Method,AMSExplorer,AddDynamicEncryptionFrame2_CENCKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENCKeyConfig.cs,InitializeComponent,The method has 335 lines of code.
Long Method,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,StreamingEndpointInformation_Load,The method has 122 lines of code.
Long Method,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,InitializeComponent,The method has 499 lines of code.
Long Method,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,InitializeComponent,The method has 222 lines of code.
Long Method,AMSExplorer,ImportHttp,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportHttp.cs,InitializeComponent,The method has 155 lines of code.
Long Method,AMSExplorer,Thumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Thumbnails.cs,InitializeComponent,The method has 236 lines of code.
Long Method,AMSExplorer,ProgramInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProgramInformation.cs,InitializeComponent,The method has 239 lines of code.
Long Method,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The method has 230 lines of code.
Long Method,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The method has 683 lines of code.
Long Method,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The method has 476 lines of code.
Long Method,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The method has 161 lines of code.
Long Method,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The method has 984 lines of code.
Long Method,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The method has 666 lines of code.
Long Method,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshChannels,The method has 104 lines of code.
Long Method,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The method has 150 lines of code.
Long Method,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The method has 631 lines of code.
Long Method,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The method has 132 lines of code.
Long Method,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,InitializeComponent,The method has 376 lines of code.
Long Method,AMSExplorer,CreateLocator,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLocator.cs,InitializeComponent,The method has 250 lines of code.
Long Method,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,InitializeComponent,The method has 858 lines of code.
Long Method,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The method has 214 lines of code.
Long Method,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The method has 720 lines of code.
Long Method,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,InitializeComponent,The method has 204 lines of code.
Long Method,AMSExplorer,HLSAESStatic,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\HLSAESStatic.cs,InitializeComponent,The method has 189 lines of code.
Long Method,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,InitializeComponent,The method has 303 lines of code.
Long Method,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The method has 123 lines of code.
Long Method,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The method has 465 lines of code.
Long Method,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The method has 201 lines of code.
Long Method,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The method has 138 lines of code.
Long Method,AMSExplorer,PlayReadyStaticEnc,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\PlayReadyStaticEnc.cs,InitializeComponent,The method has 277 lines of code.
Long Method,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The method has 152 lines of code.
Long Method,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DoPlayBackWithStreamingEndpoint,The method has 203 lines of code.
Long Method,AMSExplorer,EncodingAMEPreset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEPreset.cs,InitializeComponent,The method has 165 lines of code.
Long Method,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,InitializeComponent,The method has 308 lines of code.
Long Method,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,InitializeComponent,The method has 279 lines of code.
Complex Method,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InsertAd,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,CopyAsset,Cyclomatic complexity of the method is 35
Complex Method,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDisplayAuthorizationPolicyOption,Cyclomatic complexity of the method is 14
Complex Method,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDeleteAutPol,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,DoDeleteDelPol,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DisplayTelemetry_Load,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,JsonInternalConfig,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ReturnOriginResolutionThumbnailsForAsset,Cyclomatic complexity of the method is 10
Complex Method,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,buttonSelectFolder_Click,Cyclomatic complexity of the method is 10
Complex Method,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetExcel,Cyclomatic complexity of the method is 11
Complex Method,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetCSVLine,Cyclomatic complexity of the method is 12
Complex Method,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,Cyclomatic complexity of the method is 15
Complex Method,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,Cyclomatic complexity of the method is 14
Complex Method,AMSExplorer,CreateTestToken,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateTestToken.cs,CreateTestToken,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,GetSubclippingInternalConfiguration,Cyclomatic complexity of the method is 10
Complex Method,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,Cyclomatic complexity of the method is 12
Complex Method,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,ConvertFilterTracksToInternalVar,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CreateFilterTracks,Cyclomatic complexity of the method is 18
Complex Method,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,Cyclomatic complexity of the method is 13
Complex Method,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,RefreshTracksConditions,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,EncodingAMEStandard_Load,Cyclomatic complexity of the method is 12
Complex Method,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,Cyclomatic complexity of the method is 115
Complex Method,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,Cyclomatic complexity of the method is 10
Complex Method,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,AddThumbnailJSON,Cyclomatic complexity of the method is 19
Complex Method,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,textBoxConfiguration_TextChanged,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform,Cyclomatic complexity of the method is 31
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,Cyclomatic complexity of the method is 13
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,Cyclomatic complexity of the method is 23
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridAssetV,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridJobV,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,Cyclomatic complexity of the method is 43
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessDownloadAsset,Cyclomatic complexity of the method is 14
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,Cyclomatic complexity of the method is 15
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,Cyclomatic complexity of the method is 22
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorage,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,Cyclomatic complexity of the method is 30
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,Cyclomatic complexity of the method is 33
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,Cyclomatic complexity of the method is 49
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,Cyclomatic complexity of the method is 36
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneProgramToAnotherAMSAccount,Cyclomatic complexity of the method is 11
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdatePlayReadyConfiguration,Cyclomatic complexity of the method is 10
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdateHLSConfiguration,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckAssetSizeRegardingMediaUnit,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,Cyclomatic complexity of the method is 10
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,Cyclomatic complexity of the method is 50
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewJobsV_CellFormatting,Cyclomatic complexity of the method is 20
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewAssetsV_CellFormatting_1,Cyclomatic complexity of the method is 17
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewTransfer_CellFormatting,Cyclomatic complexity of the method is 19
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoOpenTransferDestLocation,Cyclomatic complexity of the method is 18
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoExportAssetToAzureStorage,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,WaitForCreatingProcessToCloseFileThenDoStuff,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,Cyclomatic complexity of the method is 11
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewLiveV_CellFormatting,Cyclomatic complexity of the method is 19
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayChannelInfo,Cyclomatic complexity of the method is 37
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeletePrograms,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewProgramV_CellFormatting,Cyclomatic complexity of the method is 16
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayProgramInfo,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewOriginsV_CellFormatting,Cyclomatic complexity of the method is 19
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayStreamingEndpointInfo,Cyclomatic complexity of the method is 31
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,Cyclomatic complexity of the method is 48
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,Cyclomatic complexity of the method is 48
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,Cyclomatic complexity of the method is 41
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,Cyclomatic complexity of the method is 44
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveDynEnc,Cyclomatic complexity of the method is 12
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveKeys,Cyclomatic complexity of the method is 13
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetPrograms,Cyclomatic complexity of the method is 18
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoJobResubmit,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoPlaySelectedAssetsOrProgramsWithPlayer,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,BuildStorageKeyDictionary,Cyclomatic complexity of the method is 12
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,Cyclomatic complexity of the method is 15
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStorageVersion,Cyclomatic complexity of the method is 11
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoProcessCreateBulkIngestAndEncryptFiles,Cyclomatic complexity of the method is 10
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GenerateSigniantCommandLine,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetRadiobuttonDisplayProgram,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,Cyclomatic complexity of the method is 11
Complex Method,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonLogin_Click,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonExport_Click,Cyclomatic complexity of the method is 10
Complex Method,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonImportAll_Click,Cyclomatic complexity of the method is 13
Complex Method,AMSExplorer,BatchUploadFrame2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BatchUploadFrame2.cs,BatchUploadFrame2,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,CheckSlateFile,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,CreateMediaServiceAccountUsingXmlContentType,Cyclomatic complexity of the method is 15
Complex Method,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,AttachStorageAccountToMediaServiceAccount,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,Cyclomatic complexity of the method is 23
Complex Method,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,Cyclomatic complexity of the method is 13
Complex Method,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CopyDynamicEncryption,Cyclomatic complexity of the method is 11
Complex Method,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,StreamingEndpointInformation_Load,Cyclomatic complexity of the method is 19
Complex Method,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,Cyclomatic complexity of the method is 40
Complex Method,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,Cyclomatic complexity of the method is 10
Complex Method,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,Cyclomatic complexity of the method is 41
Complex Method,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDownloadFiles,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,TreeViewLocators_AfterSelect,Cyclomatic complexity of the method is 29
Complex Method,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoAzureMediaPlayer,Cyclomatic complexity of the method is 20
Complex Method,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveDeliveryPol,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,Cyclomatic complexity of the method is 15
Complex Method,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoEditFile,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshChannels,Cyclomatic complexity of the method is 21
Complex Method,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,Cyclomatic complexity of the method is 31
Complex Method,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,Cyclomatic complexity of the method is 32
Complex Method,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,Cyclomatic complexity of the method is 62
Complex Method,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddNamingConventionToDoc,Cyclomatic complexity of the method is 12
Complex Method,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,Cyclomatic complexity of the method is 13
Complex Method,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,Cyclomatic complexity of the method is 44
Complex Method,AMSExplorer,FilterTime,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnNumberOfDays,Cyclomatic complexity of the method is 18
Complex Method,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,Cyclomatic complexity of the method is 138
Complex Method,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,BuildBitmapPublication,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnStaticProtectedBitmap,Cyclomatic complexity of the method is 14
Complex Method,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,BuildBitmapDynEncryption,Cyclomatic complexity of the method is 31
Complex Method,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,Cyclomatic complexity of the method is 69
Complex Method,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ConnectAndGetNewContext,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DownloadVersionRequestCompleted,Cyclomatic complexity of the method is 8
Complex Method,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ReturnNameForProtocol,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,Cyclomatic complexity of the method is 17
Complex Method,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,Cyclomatic complexity of the method is 19
Complex Method,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,Cyclomatic complexity of the method is 24
Complex Method,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetDynamicEncryptionType,Cyclomatic complexity of the method is 17
Complex Method,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetManifestTimingData,Cyclomatic complexity of the method is 12
Complex Method,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetManifestSegmentsList,Cyclomatic complexity of the method is 12
Complex Method,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,Cyclomatic complexity of the method is 35
Complex Method,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,SetAFileAsPrimary,Cyclomatic complexity of the method is 9
Complex Method,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetProtection,Cyclomatic complexity of the method is 12
Complex Method,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStat,Cyclomatic complexity of the method is 10
Complex Method,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetDescriptionLocators,Cyclomatic complexity of the method is 18
Complex Method,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DoPlayBackWithStreamingEndpoint,Cyclomatic complexity of the method is 106
Complex Method,AMSExplorer,ListViewItemComparer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,Compare,Cyclomatic complexity of the method is 8
Long Parameter List,AMSExplorer,AddDynamicEncryptionFrame4,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame4.cs,AddDynamicEncryptionFrame4,The method has 6 parameters.
Long Parameter List,AMSExplorer,ChooseStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChooseStreamingEndpoint.cs,ChooseStreamingEndpoint,The method has 6 parameters.
Long Parameter List,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,RegionEditor,The method has 7 parameters.
Long Parameter List,AMSExplorer,RectangleDecimalMode,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,RectangleDecimalMode,The method has 6 parameters.
Long Parameter List,AMSExplorer,ButtonRegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,Initialize,The method has 6 parameters.
Long Parameter List,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,MediaAnalyticsGeneric,The method has 5 parameters.
Long Parameter List,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetExcel,The method has 5 parameters.
Long Parameter List,AMSExplorer,EditorXMLJSON,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EditorXMLJSON.cs,EditorXMLJSON,The method has 6 parameters.
Long Parameter List,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,EncodingMES,The method has 8 parameters.
Long Parameter List,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,AddThumbnailJSON,The method has 11 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The method has 7 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The method has 5 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFromFolder,The method has 5 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,TextBoxLogWriteLine,The method has 5 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,TextBoxLogWriteLine,The method has 6 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The method has 6 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,MyUploadFileRohzetModeProgressChanged,The method has 5 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessDownloadAsset,The method has 6 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CopyAssetToAzure,The method has 7 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The method has 6 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The method has 10 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The method has 7 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The method has 12 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneProgramToAnotherAMSAccount,The method has 7 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdatePlayReadyConfiguration,The method has 9 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdateHLSConfiguration,The method has 6 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalytics,The method has 5 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsFaceRedaction,The method has 5 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig,The method has 11 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LaunchJobs_OneJobPerInputAssetWithSpecificConfig,The method has 12 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,IObjectExecuteOperationAsync,The method has 5 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CreateLiveAssetWithOptionalpecifiedLocatorID,The method has 5 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The method has 9 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The method has 7 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The method has 7 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,BuildStorageKeyDictionary,The method has 6 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoProcessCreateBulkIngestAndEncryptFiles,The method has 11 parameters.
Long Parameter List,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GenerateSigniantCommandLine,The method has 6 parameters.
Long Parameter List,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,ConfigureKeyDeliveryServiceForPlayReady,The method has 6 parameters.
Long Parameter List,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateCommonTypeContentKeyAndAttachAsset,The method has 5 parameters.
Long Parameter List,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,AddOpenAuthorizationPolicyOption,The method has 5 parameters.
Long Parameter List,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,AddTokenRestrictedAuthorizationPolicyAES,The method has 10 parameters.
Long Parameter List,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,AddTokenRestrictedAuthorizationPolicyCENC,The method has 13 parameters.
Long Parameter List,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GenerateTokenRequirements,The method has 7 parameters.
Long Parameter List,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The method has 6 parameters.
Long Parameter List,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyAES,The method has 7 parameters.
Long Parameter List,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The method has 13 parameters.
Long Parameter List,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,LoadAndUpdateIndexerConfiguration,The method has 6 parameters.
Long Parameter List,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,ReturnFilterTextWithOffSet,The method has 5 parameters.
Long Parameter List,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The method has 6 parameters.
Long Parameter List,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The method has 9 parameters.
Long Parameter List,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The method has 8 parameters.
Long Parameter List,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The method has 11 parameters.
Long Parameter List,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,WatchFolderCallApi,The method has 9 parameters.
Long Parameter List,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetSmoothStreamingUris,The method has 6 parameters.
Long Parameter List,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetSmoothStreamingLegacyUris,The method has 6 parameters.
Long Parameter List,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetHlsUris,The method has 6 parameters.
Long Parameter List,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetHlsv3Uris,The method has 6 parameters.
Long Parameter List,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetMpegDashUris,The method has 6 parameters.
Long Parameter List,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStreamingUris,The method has 7 parameters.
Long Parameter List,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,RW,The method has 8 parameters.
Long Parameter List,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,RW,The method has 7 parameters.
Long Parameter List,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DoPlayBackWithStreamingEndpoint,The method has 13 parameters.
Long Parameter List,AMSExplorer,CredentialsEntry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CredentialsEntry,The method has 12 parameters.
Long Identifier,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessDownloadAsset,The length of the parameter ErrorCurrentAssetFolderCreation is 31.
Long Identifier,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The length of the parameter SESelectedSupportsDynPackaging is 30.
Long Identifier,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the parameter DestinationCloudStorageAccount is 30.
Long Identifier,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the parameter PlayReadyLicenseDeliveryConfig is 30.
Long Identifier,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ManageMenuOptionsAzureCDN,The length of the parameter disableAzureCDNToolStripMenuItem1 is 33.
Long Identifier,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ManageMenuOptionsAzureCDN,The length of the parameter enableAzureCDNToolStripMenuItem1 is 32.
Long Identifier,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyAES,The length of the parameter assetDeliveryPolicyConfiguration is 32.
Long Identifier,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the parameter playreadyEncodeLAURLForSilverlight is 34.
Long Identifier,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the parameter assetDeliveryPolicyConfiguration is 32.
Long Identifier,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CopyDynamicEncryption,The length of the parameter assetDeliveryPolicyConfiguration is 32.
Long Identifier,AMSExplorer,ImportHttp,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportHttp.cs,ImportHttp,The length of the parameter AzureStorageContainerSASListMode is 32.
Long Identifier,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the parameter CurrentStreamingEndpointCanDoDynPackaging is 41.
Long Identifier,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,UpdateGeneralWarning,The length of the parameter nbDecryptTaskWithOutputStoragEncrypted is 38.
Long Identifier,AMSExplorer,CredentialsEntry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetTableEndPoint,The length of the parameter mediaServicesStorageAccountName is 31.
Long Identifier,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,ExportAssetToAzureStorage,The length of the parameter MediaServicesStorageAccountKeyArg is 33.
Long Identifier,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,ImportFromAzureStorage,The length of the parameter MediaServicesStorageAccountKeyArg is 33.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig)); " is 167.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig.cs,InitializeComponent,The length of the statement  "	this.radioButtonContentKeyBase64.CheckedChanged += new System.EventHandler (this.radioButtonContentKeyBase64_CheckedChanged_1); " is 127.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig.cs,InitializeComponent,The length of the statement  "	this.radioButtonContentKeyHex.CheckedChanged += new System.EventHandler (this.radioButtonContentKeyHex_CheckedChanged_1); " is 121.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_ExistingPolicies,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_ExistingPolicies.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame3_ExistingPolicies)); " is 164.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_AESDelivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_AESDelivery.cs,ValidateButtonOk,The length of the statement  "	buttonOk.Enabled = ((errorProvider1.GetError (textBoxLAURL) == string.Empty) && (radioButtonDefineAuthPol.Checked || (radioButtonNoAuthPolicy.Checked && !string.IsNullOrWhiteSpace (textBoxLAURL.Text)))); " is 203.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_AESDelivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_AESDelivery.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame3_AESDelivery)); " is 159.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery.cs,AddDynamicEncryptionFrame3_Load,The length of the statement  "	moreinfoFairPlaylink.Links.Add (new LinkLabel.Link (0' moreinfoFairPlaylink.Text.Length' Constants.LinkMoreInfoFairPlay)); " is 122.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery.cs,ValidateButtonOk,The length of the statement  "	buttonOk.Enabled = (radioButtonDeliverFairPlayfromAMS.Checked && cert.Certificate != null && FairPlayASK != null) || (radioButtonExternalFairPlayServer.Checked && !string.IsNullOrWhiteSpace (textBoxFairPlayLAurl.Text) && errorProvider1.GetError (textBoxFairPlayLAurl) == string.Empty); " is 285.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery)); " is 166.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery.cs,InitializeComponent,The length of the statement  "	this.moreinfoFairPlaylink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoFairPlaylink_LinkClicked); " is 139.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery.cs,InitializeComponent,The length of the statement  "	this.radioButtonExternalFairPlayServer.CheckedChanged += new System.EventHandler (this.radioButtonExternalPRServer_CheckedChanged); " is 131.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_CENCDelivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENCDelivery.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame3_CENCDelivery)); " is 160.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_CENCDelivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENCDelivery.cs,InitializeComponent,The length of the statement  "	this.radioButtonExternalPRServer.CheckedChanged += new System.EventHandler (this.radioButtonExternalPRServer_CheckedChanged); " is 125.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame3_CENCDelivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENCDelivery.cs,InitializeComponent,The length of the statement  "	this.radioButtonExternalWVServer.CheckedChanged += new System.EventHandler (this.radioButtonExternalWVServer_CheckedChanged); " is 125.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame4,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame4.cs,SetupDynEnc_Load,The length of the statement  "	moreinfocGenX509.Links.Add (new LinkLabel.Link (0' moreinfocGenX509.Text.Length' "https://msdn.microsoft.com/en-us/library/azure/gg185932.aspx")); " is 146.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame4,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame4.cs,UpdateButtonOk,The length of the statement  "	buttonOk.Enabled = (!radioButtonTokenAuthPolicy.Checked || (radioButtonTokenAuthPolicy.Checked && (radioButtonSWT.Checked || radioButtonJWTSymmetric.Checked || radioButtonJWTOpenId.Checked || (radioButtonJWTX509.Checked && cert != null)))); " is 240.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame4,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame4.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame4)); " is 147.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame4,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame4.cs,InitializeComponent,The length of the statement  "	this.radioButtonContentKeyBase64.CheckedChanged += new System.EventHandler (this.radioButtonContentKeyBase64_CheckedChanged); " is 125.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame4,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame4.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTokenClaims.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 129.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_AESKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_AESKeyConfig.cs,textBox_TextChanged,The length of the statement  "                if (!string.IsNullOrEmpty(textBoxkeyid.Text) && (!string.IsNullOrEmpty(textBoxkeyseed.Text) || (!string.IsNullOrEmpty(textBoxcontentkey.Text))))" is 144.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_AESKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_AESKeyConfig.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame2_AESKeyConfig)); " is 160.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_AESKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_AESKeyConfig.cs,InitializeComponent,The length of the statement  "	this.radioButtonKeyRandomGeneration.CheckedChanged += new System.EventHandler (this.radioButtonKeyRandomGeneration_CheckedChanged); " is 131.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame6_WidevineLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame6_WidevineLicense.cs,GetWidevineConfiguration,The length of the statement  "			template.allowed_track_types = (AllowedTrackTypes)(Enum.Parse (typeof(AllowedTrackTypes)' (string)comboBoxAllowedTrackTypes.SelectedItem)); " is 139.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame6_WidevineLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame6_WidevineLicense.cs,AddDynamicEncryptionFrame6_WidevineLicense_Load,The length of the statement  "	linkLabelWidevinePolicy.Links.Add (new LinkLabel.Link (0' linkLabelWidevinePolicy.Text.Length' Constants.LinkWidevineTemplateInfo)); " is 132.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame6_WidevineLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame6_WidevineLicense.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame6_WidevineLicense)); " is 163.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame6_WidevineLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame6_WidevineLicense.cs,InitializeComponent,The length of the statement  "	this.linkLabelWidevinePolicy.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabelWidevinePolicy_LinkClicked); " is 145.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,ChannelRunLocalEncoder_Load,The length of the statement  "	labelChannel.Text = string.Format (labelChannel.Text' _channels.FirstOrDefault ().Name' _channels.FirstOrDefault ().Input.StreamingProtocol.ToString ()); " is 153.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,ChannelRunLocalEncoder_Load,The length of the statement  "	labelURL.Text = string.Format (labelURL.Text' _channels.FirstOrDefault ().Input.Endpoints.FirstOrDefault ().Url.ToString ()); " is 125.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,BuildArguments,The length of the statement  "		labelWarning.Text = (_channels.FirstOrDefault ().State != ChannelState.Running) ? AMSExplorer.Properties.Resources.ChannelRunOnPremisesEncoder_BuildArguments_ChannelIsNotRunning : ""; " is 183.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,BuildArguments,The length of the statement  "		if (SelectedEncoder.Protocol != null && ((StreamingProtocol)SelectedEncoder.Protocol != _channels.FirstOrDefault ().Input.StreamingProtocol)) { " is 143.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,BuildArguments,The length of the statement  "			labelWarning.Text += AMSExplorer.Properties.Resources.ChannelRunOnPremisesEncoder_BuildArguments_InputProtocolIsNotMatching; " is 124.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,BuildArguments,The length of the statement  "		textBoxCommand.Text = SelectedEncoder.Command.Replace ("%output%"' _channels.FirstOrDefault ().Input.Endpoints.FirstOrDefault ().Url.AbsoluteUri).Replace ("%audiodevicename%"' textBoxAudioDeviceName.Text.Trim ()).Replace ("%videodevicename%"' textBoxVideoDeviceName.Text.Trim ()).Replace ("%audiobitrate%"' textBoxAudioBitRate.Text.Trim ()).Replace ("%videobitrate%"' textBoxVideoBitRate.Text.Trim ()); " is 402.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,BuildArguments,The length of the statement  "		textBoxComment.Text = SelectedEncoder.Comment.Replace ("%output%"' _channels.FirstOrDefault ().Input.Endpoints.FirstOrDefault ().Url.AbsoluteUri); " is 146.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,BuildArguments,The length of the statement  "			textBoxFolder.Text = SelectedEncoder.Folder.Replace ("%ffmpegpath%"' Properties.Settings.Default.ffmpegPath).Replace ("%vlcpath%"' Properties.Settings.Default.VLCPath).Replace ("%programfiles32%"' Environment.GetFolderPath (Environment.Is64BitOperatingSystem ? Environment.SpecialFolder.ProgramFilesX86 : Environment.SpecialFolder.ProgramFiles)).Replace ("%programfiles64%"' System.Environment.ExpandEnvironmentVariables ("%systemdrive%\\Program Files")); " is 455.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,BuildArguments,The length of the statement  "			linkLabelInstall.Links.Add (new LinkLabel.Link (0' linkLabelInstall.Text.Length' SelectedEncoder.InstallURL.ToString ())); " is 122.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ChannelRunOnPremisesEncoder)); " is 148.
Long Statement,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,InitializeComponent,The length of the statement  "	this.linkLabelInstall.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabelInstall_LinkClicked); " is 131.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,ChannelAdSlateControl_Load,The length of the statement  "	moreinfoLiveEncodingProfilelink.Links.Add (new LinkLabel.Link (0' moreinfoLiveEncodingProfilelink.Text.Length' Constants.LinkMoreInfoLiveEncoding)); " is 148.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InsertAd,The length of the statement  "		MyMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.ChannelAdSlateControl_InsertAd_Channel0ErrorWithADDurationInput' MyChannel.Name' true); " is 152.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InsertAd,The length of the statement  "				MyMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.ChannelAdSlateControl_InsertAd_Channel0ErrorWithCueIDInput' MyChannel.Name' true); " is 147.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InsertAd,The length of the statement  "			MyMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.ChannelAdSlateControl_InsertAd_Channel0SendingADSignal' MyChannel.Name); " is 137.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InsertAd,The length of the statement  "				await Task.Run (() => ChannelInfo.ChannelExecuteOperationAsync (MyChannel.SendStartAdvertisementOperationAsync' ts' cueid' showslate' MyChannel' "advertising " + cueid.ToString () + " sent"' MyContext' MyMainForm)); " is 215.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InsertAd,The length of the statement  "				MyMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.ChannelAdSlateControl_InsertAd_Channel0ErrorWhenSendingSignal' MyChannel.Name' true); " is 150.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,ShowSlate,The length of the statement  "		MyMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.ChannelAdSlateControl_ShowSlate_Channel0ErrorWithSlateDurationInput' MyChannel.Name' true); " is 156.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,ShowSlate,The length of the statement  "		MyMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.ChannelAdSlateControl_ShowSlate_Channel0SendingShowSlateSignal' MyChannel.Name); " is 145.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,ShowSlate,The length of the statement  "			await Task.Run (() => ChannelInfo.ChannelExecuteOperationAsync (MyChannel.SendShowSlateOperationAsync' ts' jpg_id' MyChannel' AMSExplorer.Properties.Resources.ChannelAdSlateControl_ShowSlate_SlateShown' MyContext' MyMainForm)); " is 227.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,ShowSlate,The length of the statement  "			MyMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.ChannelAdSlateControl_ShowSlate_Channel0ErrorWhenShowingSlate' MyChannel.Name' true); " is 150.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,HideSlate,The length of the statement  "	MyMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.ChannelAdSlateControl_HideSlate_Channel0SendingHideSlateSignal' MyChannel.Name); " is 145.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,HideSlate,The length of the statement  "		await Task.Run (() => ChannelInfo.ChannelExecuteOperationAsync (MyChannel.SendHideSlateOperationAsync' MyChannel' AMSExplorer.Properties.Resources.ChannelAdSlateControl_HideSlate_SlateHidden' MyContext' MyMainForm)); " is 216.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,HideSlate,The length of the statement  "		MyMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.ChannelAdSlateControl_HideSlate_Channel0ErrorWhenHiddingSlate' MyChannel.Name' true); " is 150.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,checkBoxPreview_CheckedChanged,The length of the statement  "			string myurl = AssetInfo.DoPlayBackWithStreamingEndpoint (typeplayer: PlayerType.AzureMediaPlayerFrame' Urlstr: MyChannel.Preview.Endpoints.FirstOrDefault ().Url.ToString ()' DoNotRewriteURL: true' context: MyContext' formatamp: AzureMediaPlayerFormats.Smooth' technology: AzureMediaPlayerTechnologies.Silverlight' launchbrowser: false' mainForm: MyMainForm); " is 359.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,listViewJPG1_SelectedIndexChanged,The length of the statement  "					labelSlatePreviewInfo.Text = string.Format (labelSlatePreviewInfoText' fileImage.Width' fileImage.Height' aspectRatioImage); " is 124.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,listViewJPG1_SelectedIndexChanged,The length of the statement  "					if (fileImage.Width > Constants.maxSlateJPGHorizontalResolution || fileImage.Height > Constants.maxSlateJPGVerticalResolution || !ListViewSlateJPG.AreClose (aspectRatioImage' Constants.SlateJPGAspectRatio)) { " is 208.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,CreateSASLocator,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.ChannelAdSlateControl_CreateSASLocator_ErrorWhenCreatingTheTemporarySASLocator + ex.Message); " is 143.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,textBoxADSignalDuration_TextChanged,The length of the statement  "		errorProvider1.SetError (tb' AMSExplorer.Properties.Resources.ChannelAdSlateControl_textBoxADSignalDuration_TextChanged_DurationValueIsNotValid); " is 145.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,textBoxCueId_TextChanged,The length of the statement  "		errorProvider1.SetError (tb' AMSExplorer.Properties.Resources.ChannelAdSlateControl_textBoxCueId_TextChanged_AdvertisingCueIdIsNotValid); " is 137.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ChannelAdSlateControl)); " is 142.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InitializeComponent,The length of the statement  "	this.splitContainerPreviews.Panel1.Paint += new System.Windows.Forms.PaintEventHandler (this.splitContainer2_Panel1_Paint); " is 123.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InitializeComponent,The length of the statement  "	this.webBrowserPreview.DocumentCompleted += new System.Windows.Forms.WebBrowserDocumentCompletedEventHandler (this.webBrowserPreview2_DocumentCompleted); " is 153.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InitializeComponent,The length of the statement  "	this.toolStripMenuItemFilesCopyClipboard.Click += new System.EventHandler (this.toolStripMenuItemFilesCopyClipboard_Click); " is 123.
Long Statement,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,InitializeComponent,The length of the statement  "	this.moreinfoLiveEncodingProfilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoLiveEncodingProfilelink_LinkClicked); " is 161.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,CopyAsset_Load,The length of the statement  "	CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials)); " is 133.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,CopyAsset_Load,The length of the statement  "	var entryWithSameName = CredentialList.MediaServicesAccounts.Where (c => c.AccountName.ToLower ().Trim () == _context.Credentials.ClientId.ToLower ().Trim ()).FirstOrDefault (); " is 177.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,listBoxAcounts_SelectedIndexChanged,The length of the statement  "			labelWarning.Text = (string.IsNullOrEmpty (SelectedCredentials.DefaultStorageKey)) ? AMSExplorer.Properties.Resources.CopyAsset_listBoxAcounts_SelectedIndexChanged_StorageKeyIsEmpty : string.Empty; " is 197.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,listBoxAcounts_SelectedIndexChanged,The length of the statement  "				listBoxStorage.Items.Add (new Item (storage.Name + ((storage.Name == newcontext.DefaultStorageAccount.Name) ? AMSExplorer.Properties.Resources.CopyAsset_listBoxAcounts_SelectedIndexChanged_Default : string.Empty)' storage.Name)); " is 229.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,listBoxAcounts_SelectedIndexChanged,The length of the statement  "			labelWarningStorage.Text = AMSExplorer.Properties.Resources.CopyAsset_listBoxAcounts_SelectedIndexChanged_ErrorWhenConnectingToAccount; " is 135.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,radioButtonSpecify_CheckedChanged,The length of the statement  "				listBoxStorage.Items.Add (new Item (storage.Name + ((storage.Name == newcontext.DefaultStorageAccount.Name) ? AMSExplorer.Properties.Resources.CopyAsset_listBoxAcounts_SelectedIndexChanged_Default : string.Empty)' storage.Name)); " is 229.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,radioButtonSpecify_CheckedChanged,The length of the statement  "			labelWarningStorage.Text = AMSExplorer.Properties.Resources.CopyAsset_listBoxAcounts_SelectedIndexChanged_ErrorWhenConnectingToAccount; " is 135.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,checkBoxTargetSingleAsset_CheckedChanged,The length of the statement  "	checkBoxCopyDynEnc.Enabled = checkBoxRewriteURL.Enabled = checkBoxCloneAssetFilters.Enabled = checkBoxCloneLocators.Enabled = checkBoxUnPublishSourceAsset.Enabled = !checkBoxTargetSingleAsset.Checked; " is 200.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(CopyAsset)); " is 130.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.checkBoxUnPublishSourceAsset' resources.GetString ("checkBoxUnPublishSourceAsset.ToolTip")); " is 123.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,InitializeComponent,The length of the statement  "	this.checkBoxTargetSingleAsset.CheckedChanged += new System.EventHandler (this.checkBoxTargetSingleAsset_CheckedChanged); " is 121.
Long Statement,AMSExplorer,CopyAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CopyAsset.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.labelCloneLocatorForPrograms' resources.GetString ("labelCloneLocatorForPrograms.ToolTip")); " is 123.
Long Statement,AMSExplorer,ChooseStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChooseStreamingEndpoint.cs,ChooseStreamingEndpoint_Load,The length of the statement  "		listBoxSE.Items.Add (new Item (string.Format (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_012ScaleUnit' se.Name' se.State' StreamingEndpointInformation.ReturnTypeSE (se))' se.Id + "|" + se.HostName)); " is 228.
Long Statement,AMSExplorer,ChooseStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChooseStreamingEndpoint.cs,ChooseStreamingEndpoint_Load,The length of the statement  "			listBoxSE.Items.Add (new Item (string.Format (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_012ScaleUnitCustomHostname3' se.Name' se.State' StreamingEndpointInformation.ReturnTypeSE (se)' custom)' se.Id + "|" + custom)); " is 246.
Long Statement,AMSExplorer,ChooseStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChooseStreamingEndpoint.cs,ChooseStreamingEndpoint_Load,The length of the statement  "		if (_filter != null && f.Name == _filter && listViewFilters.CheckedItems.Count == 0)// only if not already selected (asset filter priority > global filter) " is 155.
Long Statement,AMSExplorer,ChooseStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChooseStreamingEndpoint.cs,ChooseStreamingEndpoint_Load,The length of the statement  "	comboBoxBrowser.Items.Add (new Item (AMSExplorer.Properties.Resources.ChooseStreamingEndpoint_ChooseStreamingEndpoint_Load_DefaultBrowser' string.Empty)); " is 154.
Long Statement,AMSExplorer,ChooseStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChooseStreamingEndpoint.cs,radioButtonHLSv3_CheckedChanged,The length of the statement  "	textBoxHLSAudioTrackName.Enabled = checkBoxNoAudioOnly.Enabled = labelaudiotrackname.Enabled = radioButtonHLSv3.Checked; " is 120.
Long Statement,AMSExplorer,ChooseStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChooseStreamingEndpoint.cs,UpdatePreviewUrl,The length of the statement  "		textBoxPreviewURL.Text = AssetInfo.RW (new Uri (_url)' SelectStreamingEndpoint' SelectedFilters' ReturnHttps' ReturnSelectCustomHostName' ReturnStreamingProtocol' ReturnHLSAudioTrackName' ReturnHLSNoAudioOnlyMode).ToString (); " is 226.
Long Statement,AMSExplorer,ChooseStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChooseStreamingEndpoint.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ChooseStreamingEndpoint)); " is 144.
Long Statement,AMSExplorer,ChooseStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChooseStreamingEndpoint.cs,InitializeComponent,The length of the statement  "	this.listViewFilters.ItemChecked += new System.Windows.Forms.ItemCheckedEventHandler (this.listViewFilters_ItemChecked); " is 120.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,EncodingAMEStandardPickOverlay_Load,The length of the statement  "	listViewPolicies.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler (ListViewItemComparerQuickNoDate.ListView_ColumnClick); " is 136.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,ListPolicies,The length of the statement  "		autPolicies = _context.ContentKeyAuthorizationPolicies.ToList ().Where (p => p.Options.Any (o => o.KeyDeliveryType == ContentKeyDeliveryType.BaselineHttp)).ToList (); " is 166.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,ListPolicies,The length of the statement  "		autPolicies = _context.ContentKeyAuthorizationPolicies.ToList ().Where (p => p.Options.Any (o => o.KeyDeliveryType == ContentKeyDeliveryType.PlayReadyLicense || o.KeyDeliveryType == ContentKeyDeliveryType.Widevine)).ToList (); " is 226.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,ListPolicies,The length of the statement  "		autPolicies = _context.ContentKeyAuthorizationPolicies.ToList ().Where (p => p.Options.Any (o => o.KeyDeliveryType == ContentKeyDeliveryType.FairPlay)).ToList (); " is 162.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,ReturnSelectedAuthPolicies,The length of the statement  "		IContentKeyAuthorizationPolicy DP = autPolicies.Where (pol => pol.Id == listViewPolicies.Items [selectedindex].SubItems [1].Text).FirstOrDefault (); " is 148.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "		IContentKeyAuthorizationPolicyOption option = SelectedPolicy.Options.Skip (listViewAutPolOptions.SelectedIndices [0]).Take (1).FirstOrDefault (); " is 145.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "				dataGridViewAutPolOption.Rows.Add ("Restriction KeyRestrictionType"' (ContentKeyRestrictionType)restriction.KeyRestrictionType); " is 128.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "							dataGridViewAutPolOption.Rows.Add ("Token Verification Key Type"' (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) ? "Symmetric" : "Asymmetric (X509)"); " is 189.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "								dataGridViewAutPolOption.Rows.Add ("Token Verification Key Type"' (verifkey.GetType () == typeof(SymmetricVerificationKey)) ? "Symmetric" : "Asymmetric (X509)"); " is 161.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "							dataGridViewAutPolOption.Rows.Add ("OpenId Connect Discovery Document Uri"' tokenTemplate.OpenIdConnectDiscoveryDocument.OpenIdDiscoveryUri); " is 141.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDeleteAutPol,The length of the statement  "			question = string.Format ("Are you sure that you want to DELETE these {0} policies from the Azure Media Services account ?"' listViewPolicies.SelectedIndices.Count); " is 165.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDeleteAutPol,The length of the statement  "				messagestr = string.Format ("Error when deleting {0} authorization policies."' nbError) + Constants.endline + messagestr; " is 121.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoMenuRenamePolicy,The length of the statement  "		if (Program.InputBox ("Policy rename"' string.Format ("Enter the new name for policy '{0}' :"' AuthPol.Name)' ref value) == DialogResult.OK) { " is 142.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,dataGridViewAutPolOption_CellContentClick,The length of the statement  "	if (e.RowIndex >= 0 && senderGrid.Rows [e.RowIndex].Cells [e.ColumnIndex].GetType () == typeof(DataGridViewButtonCell)) { " is 121.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(SelectAutPolicy)); " is 136.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAutPolOption.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 130.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAutPolOption.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewAutPolOption_CellContentClick); " is 153.
Long Statement,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,InitializeComponent,The length of the statement  "	this.listViewAutPolOptions.SelectedIndexChanged += new System.EventHandler (this.listViewAutPolOptions_SelectedIndexChanged); " is 125.
Long Statement,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,EncodingAMEStandardPickOverlay_Load,The length of the statement  "	listViewPolicies.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler (ListViewItemComparerQuickNoDate.ListView_ColumnClick); " is 136.
Long Statement,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,ListPolicies,The length of the statement  "	//  autPolicies = delPolicies = _context.AssetDeliveryPolicies.ToList().Where(p => p.AssetDeliveryPolicyType == _delpoltype).ToList(); " is 134.
Long Statement,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,ReturnSelectedDeliveryPolicies,The length of the statement  "		IAssetDeliveryPolicy DP = delPolicies.Where (pol => pol.Id == listViewPolicies.Items [selectedindex].SubItems [3].Text).FirstOrDefault (); " is 138.
Long Statement,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,DoDeleteDelPol,The length of the statement  "			question = string.Format ("Are you sure that you want to DELETE these {0} policies from the Azure Media Services account ?"' policies.Count); " is 141.
Long Statement,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,DoMenuRenamePolicy,The length of the statement  "		if (Program.InputBox ("Policy rename"' string.Format ("Enter the new name for policy '{0}' :"' DelPol.Name)' ref value) == DialogResult.OK) { " is 141.
Long Statement,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(SelectDeliveryPolicy)); " is 141.
Long Statement,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,MediaAnalyticsContentModeration_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkMoreInfoContentModeration)); " is 129.
Long Statement,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,textBoxConfiguration_TextChanged,The length of the statement  "	textBoxConfiguration.Text = textBoxConfiguration.Text.Replace ("\r\n"' "\n").Replace ("\r"' "\n").Replace ("\n"' Environment.NewLine); " is 134.
Long Statement,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MediaAnalyticsContentModeration)); " is 152.
Long Statement,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The length of the statement  "	this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 138.
Long Statement,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The length of the statement  "	this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 132.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DisplayTelemetry_Load,The length of the statement  "	moreinfoLiveEncodingProfilelink.Links.Add (new LinkLabel.Link (0' moreinfoLiveEncodingProfilelink.Text.Length' Constants.LinkMoreInfoTelemetry)); " is 145.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DisplayTelemetry_Load,The length of the statement  "	var currentConfig = _context.NotificationEndPoints.Where (n => n.Id == monitorconfig.NotificationEndPointId).FirstOrDefault (); " is 127.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DisplayTelemetry_Load,The length of the statement  "	if (_context.DefaultStorageAccount.Name == storagename && !string.IsNullOrWhiteSpace (_credentials.DefaultStorageKey)) { " is 120.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DisplayTelemetry_Load,The length of the statement  "		if (Program.InputBox ("Storage Account Key Needed"' "Please enter the Storage Account Access Key for " + storagename + ":"' ref valuekey' true) == DialogResult.OK) { " is 165.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DisplayTelemetry_Load,The length of the statement  "		if (Program.InputBox ("Account Id Needed"' "Please enter the Media Service Account ID for " + _credentials.AccountName + " :"' ref mediaServicesAccountID' false) == DialogResult.OK) { " is 183.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The length of the statement  "	labelTimeRange.Text = string.Format ("Display data from {0} to {1}"' radioButtonLocal.Checked ? _timerangeStart.ToLocalTime ().ToString ("G") : _timerangeStart.ToUniversalTime ().ToString ("G")' _timerangeEnd == null ? "now" : radioButtonLocal.Checked ? ((DateTime)_timerangeEnd).ToLocalTime ().ToString ("G") : ((DateTime)_timerangeEnd).ToUniversalTime ().ToString ("G")); " is 373.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The length of the statement  "	var currentConfig = _context.NotificationEndPoints.Where (n => n.Id == monitorconfig.NotificationEndPointId).FirstOrDefault (); " is 127.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The length of the statement  "		var res = _context.StreamingEndPointRequestLogs.GetStreamingEndPointMetrics (currentConfig.EndPointAddress' _storagePassword' new Guid (_credentials.AccountId).ToString ()' streamingEndpoint.Id' _timerangeStart' _timerangeEnd ?? DateTime.UtcNow.AddMinutes (5)); " is 261.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The length of the statement  "				dataGridViewTelemetry.Rows.Add (radioButtonLocal.Checked ? log.ObservedTime.ToLocalTime () : log.ObservedTime.ToUniversalTime ()' log.BytesSent' log.EndToEndLatency' log.HostName' log.RequestCount' log.ResultCode' log.RowKey' log.ServerLatency' log.StatusCode); " is 261.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The length of the statement  "	var currentConfig = _context.NotificationEndPoints.Where (n => n.Id == monitorconfig.NotificationEndPointId).FirstOrDefault (); " is 127.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The length of the statement  "		var channelMetrics = _context.ChannelMetrics.GetChannelMetrics (currentConfig.EndPointAddress' _storagePassword' new Guid (_credentials.AccountId).ToString ()' channel.Id' _timerangeStart' _timerangeEnd ?? DateTime.UtcNow.AddMinutes (5)); " is 238.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The length of the statement  "				dataGridViewTelemetry.Rows.Add (radioButtonLocal.Checked ? cHB.ObservedTime.ToLocalTime () : cHB.ObservedTime.ToUniversalTime ()' cHB.Healthy' cHB.TrackType' cHB.TrackName' cHB.Bitrate' cHB.IncomingBitrate' cHB.OverlapCount' cHB.DiscontinuityCount' cHB.LastTimestamp' cHB.NonincreasingCount' cHB.UnalignedKeyFrames' cHB.UnalignedPresentationTime' cHB.UnexpectedBitrate' cHB.CustomAttributes); " is 392.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,dataGridViewTelemetry_CellFormatting,The length of the statement  "		var celljobstatusvalue = dataGridViewTelemetry.Rows [e.RowIndex].Cells [dataGridViewTelemetry.Columns [statusCodeCol].Index].Value; " is 131.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,dataGridViewTelemetry_CellFormatting,The length of the statement  "		bool healthy = (bool)dataGridViewTelemetry.Rows [e.RowIndex].Cells [dataGridViewTelemetry.Columns [healthyCountCol].Index].Value; " is 129.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(DisplayTelemetry)); " is 137.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,InitializeComponent,The length of the statement  "	this.toolStripMenuItemFilesCopyClipboard.Click += new System.EventHandler (this.toolStripMenuItemFilesCopyClipboard_Click); " is 123.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,InitializeComponent,The length of the statement  "	this.moreinfoLiveEncodingProfilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoLiveEncodingProfilelink_LinkClicked); " is 161.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTelemetry.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 127.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTelemetry.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler (this.dataGridViewTelemetry_CellFormatting); " is 153.
Long Statement,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTelemetry.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler (this.dataGridViewTelemetry_RowPostPaint); " is 147.
Long Statement,AMSExplorer,ConfigureTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\ConfigureTelemetry.cs,PrepareControls,The length of the statement  "			comboBoxStorage.Items.Add (new Item (string.Format ("{0} {1}"' storage.Name' storage.IsDefault ? "(default)" : "")' storage.Name)); " is 131.
Long Statement,AMSExplorer,ConfigureTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\ConfigureTelemetry.cs,PrepareControls,The length of the statement  "		var currentConfig = _context.NotificationEndPoints.Where (n => n.Id == _monitorconfig.NotificationEndPointId).FirstOrDefault (); " is 128.
Long Statement,AMSExplorer,ConfigureTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\ConfigureTelemetry.cs,PrepareControls,The length of the statement  "		var settingCh = _monitorconfig.Settings.ToList ().Where (s => s.Component == MonitoringComponent.Channel).FirstOrDefault (); " is 124.
Long Statement,AMSExplorer,ConfigureTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\ConfigureTelemetry.cs,PrepareControls,The length of the statement  "		var settingSE = _monitorconfig.Settings.ToList ().Where (s => s.Component == MonitoringComponent.StreamingEndpoint).FirstOrDefault (); " is 134.
Long Statement,AMSExplorer,ConfigureTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\ConfigureTelemetry.cs,ConfigureTelemetry_Load,The length of the statement  "	moreinfoLiveEncodingProfilelink.Links.Add (new LinkLabel.Link (0' moreinfoLiveEncodingProfilelink.Text.Length' Constants.LinkMoreInfoTelemetry)); " is 145.
Long Statement,AMSExplorer,ConfigureTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\ConfigureTelemetry.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ConfigureTelemetry)); " is 139.
Long Statement,AMSExplorer,ConfigureTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\ConfigureTelemetry.cs,InitializeComponent,The length of the statement  "	this.moreinfoLiveEncodingProfilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoLiveEncodingProfilelink_LinkClicked); " is 161.
Long Statement,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,JsonInternalConfig,The length of the statement  "	//  @"{'Version':'1.0'' 'Options': {'AggregateEmotionWindowMs':'987'''Mode':'AggregateEmotion'''AggregateEmotionIntervalMs':'342'}}" " is 132.
Long Statement,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,MediaAnalyticsRedaction_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkMoreInfoFaceRedaction)); " is 125.
Long Statement,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,textBoxConfiguration_TextChanged,The length of the statement  "	textBoxConfiguration.Text = textBoxConfiguration.Text.Replace ("\r\n"' "\n").Replace ("\r"' "\n").Replace ("\n"' Environment.NewLine); " is 134.
Long Statement,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MediaAnalyticsRedaction)); " is 144.
Long Statement,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The length of the statement  "	this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 138.
Long Statement,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The length of the statement  "	this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 132.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,MediaAnalyticsMotionDetection_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkMoreInfoMotionDetection)); " is 127.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,JsonInternalConfig,The length of the statement  "	obj.Options.MergeTimeThreshold = new TimeSpan ((int)numericUpDownMergeTimeHours.Value' (int)numericUpDownMergeTimeMinutes.Value' (int)numericUpDownMergeTimeSeconds.Value).ToString ("c"); " is 186.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,textBoxConfiguration_TextChanged,The length of the statement  "	textBoxConfiguration.Text = textBoxConfiguration.Text.Replace ("\r\n"' "\n").Replace ("\r"' "\n").Replace ("\n"' Environment.NewLine); " is 134.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MediaAnalyticsMotionDetection)); " is 150.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The length of the statement  "	this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.numericUpDownMergeTimeHours' resources.GetString ("numericUpDownMergeTimeHours.ToolTip")); " is 121.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.numericUpDownMergeTimeMinutes' resources.GetString ("numericUpDownMergeTimeMinutes.ToolTip")); " is 125.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.numericUpDownMergeTimeSeconds' resources.GetString ("numericUpDownMergeTimeSeconds.ToolTip")); " is 125.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The length of the statement  "	this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 132.
Long Statement,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The length of the statement  "	this.checkBoxRestrictDetection.CheckedChanged += new System.EventHandler (this.checkBoxRestrictDetection_CheckedChanged); " is 121.
Long Statement,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,MediaAnalyticsVideoOCR_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkMoreInfoVideoOCR)); " is 120.
Long Statement,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,JsonInternalConfig,The length of the statement  "	if (!string.IsNullOrEmpty (language) || checkBoxTimeInterval.Checked || checkBoxRestrictDetection.Checked || !string.IsNullOrEmpty (orientation) || checkBoxAdvancedOutput.Checked) { " is 181.
Long Statement,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,JsonInternalConfig,The length of the statement  "			obj.Options.TimeInterval = TimeSpan.FromSeconds ((double)numericUpDownTimeInterval.Value).ToString (@"hh\:mm\:ss\.fff"); " is 120.
Long Statement,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,textBoxConfiguration_TextChanged,The length of the statement  "	textBoxConfiguration.Text = textBoxConfiguration.Text.Replace ("\r\n"' "\n").Replace ("\r"' "\n").Replace ("\n"' Environment.NewLine); " is 134.
Long Statement,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MediaAnalyticsVideoOCR)); " is 143.
Long Statement,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The length of the statement  "	this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The length of the statement  "	this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 132.
Long Statement,AMSExplorer,MediaAnalyticsPickVideoFileInAsset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsPickVideoFileInAsset.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MediaAnalyticsPickVideoFileInAsset)); " is 155.
Long Statement,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,IndexerV2_Load,The length of the statement  "	LanguagesIndexV2s.ForEach (c => comboBoxLanguage.Items.Add (new Item ((new CultureInfo (c.Substring (0' 2) + "-" + c.Substring (2' 2))).DisplayName' c))); " is 154.
Long Statement,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,IndexerV2_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkMoreInfoIndexerV2)); " is 121.
Long Statement,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(IndexerV2)); " is 130.
Long Statement,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The length of the statement  "	this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The length of the statement  "	this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 132.
Long Statement,AMSExplorer,StreamingEndpointCDNEnable,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointCDNEnable.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(StreamingEndpointCDNEnable)); " is 147.
Long Statement,AMSExplorer,UploadOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\UploadOptions.cs,ControlsResetToDefault,The length of the statement  "		comboBoxStorage.Items.Add (new Item (string.Format ("{0} {1}"' storage.Name' storage.IsDefault ? "(default)" : "")' storage.Name)); " is 131.
Long Statement,AMSExplorer,UploadOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\UploadOptions.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(UploadOptions)); " is 134.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ReturnOriginResolutionThumbnailsForAsset,The length of the statement  "		var policy = asset.GetMediaContext ().AccessPolicies.Create ("AP AMSE"' new TimeSpan (0' 15' 0)' AccessPermissions.Read); " is 121.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ReturnOriginResolutionThumbnailsForAsset,The length of the statement  "		saslocator = asset.GetMediaContext ().Locators.CreateLocator (LocatorType.Sas' fileJPG.Asset' policy' DateTime.UtcNow.AddMinutes (-5)); " is 135.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ReturnOriginResolutionThumbnailsForAsset,The length of the statement  "		var bodyxml = doc.Element (ns + "AssetFiles").Element (ns + "AssetFile").Element (ns + "VideoTracks").Element (ns + "VideoTrack"); " is 130.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ReturnOriginResolutionThumbnailsForAsset,The length of the statement  "		result.OriginalSize = new Size (int.Parse (bodyxml.Attribute ("Width").Value)' int.Parse (bodyxml.Attribute ("Height").Value)); " is 127.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ReturnOriginResolutionThumbnailsForAsset,The length of the statement  "		IEnumerable<IAssetFile> Thumbnails = fileJPG.Asset.AssetFiles.ToList ().Where (f => f.Name.StartsWith (asset.Id.Substring (Constants.AssetIdPrefix.Length) + "_OriginalRes_") && f.Name.EndsWith (".jpg")).OrderBy (f => f.Name); " is 225.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,pictureBox1_MouseDown,The length of the statement  "			MessageBox.Show (string.Format ("You reached the maximum number of regions allowed ({0})."' _nbOfRegionsMax)' "Limit"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 169.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,pictureBox1_MouseMove,The length of the statement  "			toolStripStatusLabelMouseInfo.Text = string.Format (infoMouse' myPictureBox1.GetOriginalXValue (e.X)' myPictureBox1.GetOriginalYValue (e.Y)); " is 141.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,pictureBox1_MouseMove,The length of the statement  "	toolStripStatusLabelMouseInfo.Text = string.Format (infoMouse' myPictureBox1.GetOriginalXValue (currentX)' myPictureBox1.GetOriginalYValue (currentY)); " is 151.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,pictureBox1_MouseMove,The length of the statement  "	toolStripStatusLabelXYRect.Text = string.Format (infoMouseDrawRectangle' myPictureBox1.GetOriginalWidthValue (width)' myPictureBox1.GetOriginalWidthValue (height)); " is 164.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,numericUpDownREct_ValueChanged,The length of the statement  "		myPictureBox1.LastRectangle = new Rectangle ((int)numericUpDownX.Value' (int)numericUpDownY.Value' (int)numericUpDownW.Value' (int)numericUpDownH.Value); " is 153.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(RegionEditor)); " is 133.
Long Statement,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,InitializeComponent,The length of the statement  "	this.labelInfoText.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128))))); " is 134.
Long Statement,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,SetScreenDrawingRectangle,The length of the statement  "	_rect = new Rectangle (GetOriginalXValue (x)' GetOriginalYValue (y)' GetOriginalWidthValue (width)' GetOriginalHeightValue (height)); " is 133.
Long Statement,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,OnPaint,The length of the statement  "	e.Graphics.DrawRectangle (new Pen (Color.Yellow' 1)' marginLeft' marginTop' VideoImageDisplayedWidth - 1' VideoImageDisplayedHeight - 1); " is 137.
Long Statement,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,OnPaint,The length of the statement  "			e.Graphics.DrawString (index.ToString ()' new Font ("Segoe UI"' 9)' new SolidBrush (Color.Green)' poly [0].X' poly [0].Y); " is 122.
Long Statement,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,GetScaledValue,The length of the statement  "	return new Rectangle (GetScaledXValue (r.X)' GetScaledYValue (r.Y)' GetScaledWidthValue (r.Width)' GetScaledHeightValue (r.Height)); " is 132.
Long Statement,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,IsInsideVideo,The length of the statement  "	return (GetOriginalXValue (x) >= 0 && GetOriginalXValue (x) < VideoImageOriginalWidth && GetOriginalYValue (y) >= 0 && GetOriginalYValue (y) < VideoImageOriginalHeight); " is 169.
Long Statement,AMSExplorer,ButtonRegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ButtonXML_Click,The length of the statement  "			MessageBox.Show ("Please wait for the analysis job to complete"' "Thumbnails"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 129.
Long Statement,AMSExplorer,ButtonRegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ButtonXML_Click,The length of the statement  "		if (MessageBox.Show ("There is no detected thumbnails for this asset.\n\nDo you want to submit an analysis job now to generate the thumbnails and metadata ?"' "No thumbnails"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 248.
Long Statement,AMSExplorer,SettingsSelection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\SettingsSelection.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(SettingsSelection)); " is 138.
Long Statement,AMSExplorer,EDL,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EDL.cs,dataGridViewEDL_SelectionChanged,The length of the statement  "	buttonDown.Enabled = dataGridViewEDL.SelectedRows.Count > 0 && dataGridViewEDL.SelectedRows [0].Index < dataGridViewEDL.Rows.Count - 1; " is 135.
Long Statement,AMSExplorer,EDL,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EDL.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(EDL)); " is 124.
Long Statement,AMSExplorer,EDL,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EDL.cs,InitializeComponent,The length of the statement  "	this.dataGridViewEDL.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 121.
Long Statement,AMSExplorer,SortableBindingList,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\SortableBindingList.cs,ApplySortCore,The length of the statement  "		throw new NotSupportedException ("Cannot sort by " + prop.Name + ". " + prop.PropertyType + " does not implement IComparable"); " is 127.
Long Statement,AMSExplorer,SortableBindingList,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\SortableBindingList.cs,ApplySortCore,The length of the statement  "	query = direction == ListSortDirection.Ascending ? query.OrderBy (i => prop.GetValue (i)) : query.OrderByDescending (i => prop.GetValue (i)); " is 141.
Long Statement,AMSExplorer,EncodingMESPickOverlay,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMESPickOverlay.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(EncodingMESPickOverlay)); " is 143.
Long Statement,AMSExplorer,TimeRangeSelection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeRangeSelection.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(TimeRangeSelection)); " is 139.
Long Statement,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,Init,The length of the statement  "	BindingList<IngestManifestEntry> MyObservJobInPage = new BindingList<IngestManifestEntry> (ingestmanifestquery.Take (0).ToList ()); " is 131.
Long Statement,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,Init,The length of the statement  "	this.Columns ["LastModified"].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DoDisplayFileProperties_LastModified; " is 130.
Long Statement,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,Init,The length of the statement  "	this.Columns ["PendingFiles"].HeaderText = AMSExplorer.Properties.Resources.DataGridViewIngestManifest_Init_PendingFiles; " is 121.
Long Statement,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,Init,The length of the statement  "	this.Columns ["FinishedFiles"].HeaderText = AMSExplorer.Properties.Resources.DataGridViewIngestManifest_Init_FinishedFiles; " is 123.
Long Statement,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,Init,The length of the statement  "	WorkerUpdateIngestManifest.DoWork += new System.ComponentModel.DoWorkEventHandler (this.WorkerUpdateIngestManifest_DoWork); " is 123.
Long Statement,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The length of the statement  "					myform.Notify (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestCompletedWith0ErrorS' im.Statistics.ErrorFilesCount)' string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_Container0' im.Name)' im.Statistics.ErrorFilesCount > 0); " is 354.
Long Statement,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The length of the statement  "					myform.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestOnContainer0CompletedWith1ErrorS' im.Name' im.Statistics.ErrorFilesCount)' im.Statistics.ErrorFilesCount > 0); " is 257.
Long Statement,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The length of the statement  "					img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100; " is 139.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,UploadBulk_Load,The length of the statement  "		var it = new Item (string.Format ("{0} {1}"' storage.Name' storage.IsDefault ? AMSExplorer.Properties.Resources.BatchUploadFrame2_BathUploadFrame2_Load_Default : "")' storage.Name); " is 181.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,UploadBulk_Load,The length of the statement  "	linkLabelSigniantRequestKey.Links.Add (new LinkLabel.Link (0' linkLabelSigniantRequestKey.Text.Length' Constants.LinkSigniantFlightRequestTrialKey)); " is 149.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,UploadBulk_Load,The length of the statement  "	linklabelSigniantMarket.Links.Add (new LinkLabel.Link (0' linklabelSigniantMarket.Text.Length' Constants.LinkSigniantFlightMarketPlace)); " is 137.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,ReindexAssetListAndDoSomeChecks,The length of the statement  "		labelWarningFiles.Text = AMSExplorer.Properties.Resources.BulkUpload_ReindexAssetListAndDoSomeChecks_WarningTwoFilesHaveTheSameFileNameThisIsNotSupportedInsideTheSameBulkIngestContainer; " is 186.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,buttonSelectFiles_Click,The length of the statement  "			MessageBox.Show (AssetInfo.FileNameProblemMessage (listpb)' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 172.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,buttonSelectFolder_Click,The length of the statement  "				MessageBox.Show (AssetInfo.FileNameProblemMessage (listpb)' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 172.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,buttonSelectFolder_Click,The length of the statement  "					MessageBox.Show (AssetInfo.FileNameProblemMessage (listpb)' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 172.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,buttonOk_Click,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.BulkUpload_buttonOk_Click_PleaseSelectASigniantServerInTheSameRegionThanTheAMSStorageAccount' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 262.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,buttonOk_Click,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.BulkUpload_buttonOk_Click_PleaseProvideAValidSigniantAPIKey' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 229.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(BulkUpload)); " is 131.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The length of the statement  "	this.dataGridAssetFiles.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 124.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The length of the statement  "	this.dataGridAssetFiles.CellEndEdit += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridAssetFiles_CellEndEdit); " is 131.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The length of the statement  "	this.radioButtonCENCEncryption.CheckedChanged += new System.EventHandler (this.radioButtonStorageEncryption_CheckedChanged); " is 124.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The length of the statement  "	this.radioButtonStorageEncryption.CheckedChanged += new System.EventHandler (this.radioButtonStorageEncryption_CheckedChanged); " is 127.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The length of the statement  "	this.radioButtonEncryptionNone.CheckedChanged += new System.EventHandler (this.radioButtonStorageEncryption_CheckedChanged); " is 124.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The length of the statement  "	this.linkLabelInfoAzCopy.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linklabel_LinkClicked); " is 127.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The length of the statement  "	this.linkLabelSigniantRequestKey.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linklabel_LinkClicked); " is 135.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The length of the statement  "	this.linklabelSigniantMarket.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linklabel_LinkClicked); " is 131.
Long Statement,AMSExplorer,BulkUpload,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkUpload.cs,InitializeComponent,The length of the statement  "	this.linkLabelAspera.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linklabel_LinkClicked); " is 123.
Long Statement,AMSExplorer,DownloadToLocal,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DownloadToLocal.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(DownloadToLocal)); " is 136.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The length of the statement  "	DGBulkManifest.Rows.Add (AMSExplorer.Properties.Resources.BulkContainerInfo_BulkContainerInfo_Load_BlobStorageURLForUpload' _manifest.BlobStorageUriForUpload); " is 159.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The length of the statement  "	DGBulkManifest.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_State' (IngestManifestState)_manifest.State); " is 142.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The length of the statement  "	DGBulkManifest.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Created' ((DateTime)_manifest.Created).ToLocalTime ().ToString ("G")); " is 167.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The length of the statement  "	DGBulkManifest.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified' ((DateTime)_manifest.LastModified).ToLocalTime ().ToString ("G")); " is 177.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The length of the statement  "	DGBulkManifest.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageAccountName' _manifest.StorageAccountName); " is 147.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The length of the statement  "	DGBulkManifest.Rows.Add (AMSExplorer.Properties.Resources.BulkContainerInfo_BulkContainerInfo_Load_PendingFilesCount' _manifest.Statistics.PendingFilesCount); " is 158.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The length of the statement  "	DGBulkManifest.Rows.Add (AMSExplorer.Properties.Resources.BulkContainerInfo_BulkContainerInfo_Load_FinishedFilesCount' _manifest.Statistics.FinishedFilesCount); " is 160.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The length of the statement  "	DGBulkManifest.Rows.Add (AMSExplorer.Properties.Resources.BulkContainerInfo_BulkContainerInfo_Load_ErrorFilesCount' _manifest.Statistics.ErrorFilesCount); " is 154.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The length of the statement  "	DGBulkManifest.Rows.Add (AMSExplorer.Properties.Resources.BulkContainerInfo_BulkContainerInfo_Load_ErrorFilesDetails' _manifest.Statistics.ErrorFilesDetails); " is 158.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,DoDisplayAssetManifest,The length of the statement  "		DGAssetManifest.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified' am.LastModified.ToLocalTime ().ToString ("G")); " is 159.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,DoDisplayAssetManifest,The length of the statement  "		DGAssetManifest.Rows.Add (AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName' am.Asset.Name); " is 126.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,DoDisplayAssetManifest,The length of the statement  "		DGAssetManifest.Rows.Add (AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetId' am.Asset.Id); " is 122.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,DoDisplayAssetManifest,The length of the statement  "			DGAssetManifest.Rows.Add (string.Format (AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_File0Name' i)' f.Name); " is 138.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,DoDisplayAssetManifest,The length of the statement  "			DGAssetManifest.Rows.Add (string.Format (AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_File0State' i)' (IngestManifestFileState)f.State); " is 165.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,DoDisplayAssetManifest,The length of the statement  "			DGAssetManifest.Rows.Add (string.Format (AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_File0Encrypted' i)' f.IsEncrypted); " is 150.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(BulkContainerInfo)); " is 138.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,InitializeComponent,The length of the statement  "	this.DGBulkManifest.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 120.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,InitializeComponent,The length of the statement  "	this.DGAssetManifest.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 121.
Long Statement,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,InitializeComponent,The length of the statement  "	this.listViewAssetManifests.SelectedIndexChanged += new System.EventHandler (this.listViewAssetManifest_SelectedIndexChanged); " is 126.
Long Statement,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,JsonInternalConfig,The length of the statement  "	// @"{'Version':'1.0'' 'Options': {'OutputType':'video'' 'MaxStaticThumbnailCount':'0'' 'MaxMotionThumbnailDurationInSecs':'0.0'' 'OutputAudio':'true'' 'FadeInFadeOut':'true'}}"  " is 177.
Long Statement,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,JsonInternalConfig,The length of the statement  "		Options.MaxMotionThumbnailDurationInSecs = checkBoxVideoDurationAuto.Checked ? "0.0" : numericUpDownVideoDuration.Value.ToString ("F1"); " is 136.
Long Statement,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,MediaAnalyticsVideoThumbnails_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkMoreInfoVideoSummarization)); " is 130.
Long Statement,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,textBoxConfiguration_TextChanged,The length of the statement  "	textBoxConfiguration.Text = textBoxConfiguration.Text.Replace ("\r\n"' "\n").Replace ("\r"' "\n").Replace ("\n"' Environment.NewLine); " is 134.
Long Statement,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MediaAnalyticsVideoThumbnails)); " is 150.
Long Statement,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The length of the statement  "	this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 138.
Long Statement,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The length of the statement  "	this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 132.
Long Statement,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The length of the statement  "	this.checkBoxVideoDurationAuto.CheckedChanged += new System.EventHandler (this.checkBoxVideoDurationAuto_CheckedChanged); " is 121.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,JsonInternalConfig,The length of the statement  "	//  @"{'Version':'1.0'' 'Options': {'AggregateEmotionWindowMs':'987'''Mode':'AggregateEmotion'''AggregateEmotionIntervalMs':'342'}}" " is 132.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,MediaAnalyticsFaceDetection_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkMoreInfoFaceDetection)); " is 125.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,textBoxConfiguration_TextChanged,The length of the statement  "	textBoxConfiguration.Text = textBoxConfiguration.Text.Replace ("\r\n"' "\n").Replace ("\r"' "\n").Replace ("\n"' Environment.NewLine); " is 134.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MediaAnalyticsFaceDetection)); " is 148.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The length of the statement  "	this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 138.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The length of the statement  "	this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 132.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.numericUpDownAggregateInterval' resources.GetString ("numericUpDownAggregateInterval.ToolTip")); " is 127.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.numericUpDownAggregateWindow' resources.GetString ("numericUpDownAggregateWindow.ToolTip")); " is 123.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.radioButtonAggregateEmotionDetection' resources.GetString ("radioButtonAggregateEmotionDetection.ToolTip")); " is 139.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The length of the statement  "	this.radioButtonAggregateEmotionDetection.CheckedChanged += new System.EventHandler (this.radioButtonDetectionMode_CheckedChanged); " is 131.
Long Statement,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The length of the statement  "	this.radioButtonPerFaceEmotion.CheckedChanged += new System.EventHandler (this.radioButtonDetectionMode_CheckedChanged); " is 120.
Long Statement,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MediaAnalyticsGeneric)); " is 142.
Long Statement,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The length of the statement  "	this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 138.
Long Statement,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The length of the statement  "	this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 132.
Long Statement,AMSExplorer,SoftwareUpdate,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\SoftwareUpdate.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(SoftwareUpdate)); " is 135.
Long Statement,AMSExplorer,SoftwareUpdate,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\SoftwareUpdate.cs,InitializeComponent,The length of the statement  "	this.linkLabelMoreInfoPrice.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabelMoreInfoPrice_LinkClicked); " is 143.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportToExcel_Load,The length of the statement  "	textBoxExcelFile.Text = string.Format ("{0}\\Export-{1}-{2}." + extension' Environment.GetFolderPath (Environment.SpecialFolder.MyDocuments)' _context.Credentials.ClientId' DateTime.Now.ToString ("dMMMyyyy")); " is 209.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,UpdateFilePathAndname,The length of the statement  "		textBoxExcelFile.Text = textBoxExcelFile.Text.Substring (0' textBoxExcelFile.Text.Length - oldExtension.Length) + extension; " is 124.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,UpdateFilePathAndname,The length of the statement  "	string filter = radioButtonFormatExcel.Checked ? "Excel files| *.xlsx | All files | *.*" : "CSV files| *.csv | All files | *.*"; " is 128.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetExcel,The length of the statement  "			xlWorkSheet.Cells [row' index++] = streamingloc.Any () ? (DateTime?)streamingloc.Min (l => l.ExpirationDateTime).ToLocalTime () : null; " is 135.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetExcel,The length of the statement  "			xlWorkSheet.Cells [row' index++] = streamingloc.Any () ? (DateTime?)streamingloc.Max (l => l.ExpirationDateTime).ToLocalTime () : null; " is 135.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetExcel,The length of the statement  "			xlWorkSheet.Cells [row' index++] = streamingloc.Any () ? (DateTime?)streamingloc.Min (l => l.ExpirationDateTime) : null; " is 120.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetExcel,The length of the statement  "			xlWorkSheet.Cells [row' index++] = streamingloc.Any () ? (DateTime?)streamingloc.Max (l => l.ExpirationDateTime) : null; " is 120.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetExcel,The length of the statement  "			xlWorkSheet.Cells [row' index++] = saslocators.Any () ? (DateTime?)saslocators.Min (l => l.ExpirationDateTime).ToLocalTime () : null; " is 133.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetExcel,The length of the statement  "			xlWorkSheet.Cells [row' index++] = saslocators.Any () ? (DateTime?)saslocators.Max (l => l.ExpirationDateTime).ToLocalTime () : null; " is 133.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetExcel,The length of the statement  "		xlWorkSheet.Cells [row' index++] = asset.GetEncryptionState (AssetDeliveryProtocol.SmoothStreaming | AssetDeliveryProtocol.HLS | AssetDeliveryProtocol.Dash).ToString (); " is 169.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,ExportAssetCSVLine,The length of the statement  "		linec.Add (asset.GetEncryptionState (AssetDeliveryProtocol.SmoothStreaming | AssetDeliveryProtocol.HLS | AssetDeliveryProtocol.Dash).ToString ()); " is 146.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,releaseObject,The length of the statement  "		MessageBox.Show (string.Format (AMSExplorer.Properties.Resources.ExportToExcel_releaseObject_ExceptionOccuredWhileReleasingObject0' ex.ToString ())); " is 149.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId); " is 178.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId); " is 183.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "		chartRange2.FormulaR1C1 = string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based"); " is 316.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified; " is 120.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "		_context.StreamingEndpoints.ToList ().ForEach (se => xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL); " is 174.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime; " is 131.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime; " is 125.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount; " is 122.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount; " is 130.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime; " is 134.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime; " is 134.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount; " is 124.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime; " is 128.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime; " is 128.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption; " is 125.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount; " is 125.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			xlWorkBook.SaveAs (filename' Excel.XlFileFormat.xlWorkbookDefault' misValue' misValue' misValue' misValue' Excel.XlSaveAsAccessMode.xlExclusive' misValue' misValue' misValue' misValue' misValue); " is 195.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The length of the statement  "			MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 230.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The length of the statement  "			csv.AppendLine (checkStringForCSV (string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId))); " is 190.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The length of the statement  "			csv.AppendLine (checkStringForCSV (string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId))); " is 195.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The length of the statement  "		csv.AppendLine (checkStringForCSV (string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based"))); " is 327.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The length of the statement  "		_context.StreamingEndpoints.ToList ().ForEach (se => linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL)); " is 151.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The length of the statement  "			MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 230.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ExportToExcel)); " is 134.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,InitializeComponent,The length of the statement  "	this.backgroundWorkerExcel.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler (this.backgroundWorker1_ProgressChanged); " is 141.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,InitializeComponent,The length of the statement  "	this.backgroundWorkerExcel.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler (this.backgroundWorker1_RunWorkerCompleted); " is 150.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,InitializeComponent,The length of the statement  "	this.backgroundWorkerCSV.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler (this.backgroundWorker1_ProgressChanged); " is 139.
Long Statement,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,InitializeComponent,The length of the statement  "	this.backgroundWorkerCSV.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler (this.backgroundWorker1_RunWorkerCompleted); " is 148.
Long Statement,AMSExplorer,CreateTestToken,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateTestToken.cs,buttonImportPFX_Click,The length of the statement  "	labelCertificateFile.Text = (cert != null) ? cert.SubjectName.Name : AMSExplorer.Properties.Resources.CreateTestToken_buttonImportPFX_Click_Error; " is 146.
Long Statement,AMSExplorer,CreateTestToken,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateTestToken.cs,UpdateButtonOk,The length of the statement  "		errorProvider1.SetError (buttonOk' AMSExplorer.Properties.Resources.CreateTestToken_UpdateButtonOk_TestTokenCannotBeGeneratedOpenIDOrNoX509CertificateLoaded); " is 158.
Long Statement,AMSExplorer,CreateTestToken,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateTestToken.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(CreateTestToken)); " is 136.
Long Statement,AMSExplorer,CreateTestToken,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateTestToken.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTokenClaims.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 129.
Long Statement,AMSExplorer,EditorXMLJSON,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EditorXMLJSON.cs,textBoxConfiguration_TextChanged,The length of the statement  "	textBoxConfiguration.Text = textBoxConfiguration.Text.Replace ("\r\n"' "\n").Replace ("\r"' "\n").Replace ("\n"' Environment.NewLine); " is 134.
Long Statement,AMSExplorer,EditorXMLJSON,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EditorXMLJSON.cs,buttonInsertSample_Click,The length of the statement  "	XDocument doc = XDocument.Load (Path.Combine (Application.StartupPath + Constants.PathConfigFiles' "SampleMPWESetRunTime.xml")); " is 128.
Long Statement,AMSExplorer,EditorXMLJSON,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EditorXMLJSON.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(EditorXMLJSON)); " is 134.
Long Statement,AMSExplorer,EditorXMLJSON,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EditorXMLJSON.cs,InitializeComponent,The length of the statement  "	this.labelInfoText.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128))))); " is 134.
Long Statement,AMSExplorer,StorageSettings,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StorageSettings.cs,StorageVersion_Load,The length of the statement  "	moreinfoLiveStreamingProfilelink.Links.Add (new LinkLabel.Link (0' moreinfoLiveStreamingProfilelink.Text.Length' Constants.LinkMoreInfoStorageVersioning)); " is 155.
Long Statement,AMSExplorer,StorageSettings,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StorageSettings.cs,StorageVersion_Load,The length of the statement  "	linkLabelStorageAnalytics.Links.Add (new LinkLabel.Link (0' linkLabelStorageAnalytics.Text.Length' Constants.LinkMoreInfoStorageAnalytics)); " is 140.
Long Statement,AMSExplorer,StorageSettings,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StorageSettings.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(StorageSettings)); " is 136.
Long Statement,AMSExplorer,StorageSettings,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StorageSettings.cs,InitializeComponent,The length of the statement  "	this.moreinfoLiveStreamingProfilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoLiveStreamingProfilelink_LinkClicked); " is 163.
Long Statement,AMSExplorer,StorageSettings,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StorageSettings.cs,InitializeComponent,The length of the statement  "	this.linkLabelStorageAnalytics.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoLiveStreamingProfilelink_LinkClicked); " is 156.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,Subclipping_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkMoreInfoSubClipAMSE)); " is 123.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,GetSubClipTrimmingDataXMLSerialized,The length of the statement  "		trimmingdata.Duration = AssetInfo.GetXMLSerializedTimeSpan (timeControlEnd.TimeStampWithOffset - timeControlStart.TimeStampWithOffset); " is 135.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,checkBoxTrimming_CheckedChanged,The length of the statement  "	timeControlStart.Enabled = timeControlEnd.Enabled = textBoxDurationTime.Enabled = checkBoxPreviewStream.Enabled = checkBoxUseEDL.Enabled = checkBoxTrimming.Checked; " is 164.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,radioButtonClipWithReencode_CheckedChanged,The length of the statement  "			labelNoJSONBecauseReencoding.Text = @"No JSON shown yet in this scenario. Click ""Subclip..."" to submit a task' and then a dialog will pop up allowing you to modify the encode settings."; " is 188.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,radioButtonClipWithReencode_CheckedChanged,The length of the statement  "			labelNoJSONBecauseReencoding.Text = @"No JSON shown in this scenario. Click ""Create filter..."" to create an asset filter' and then a dialog will pop up to create the filter with the specified start and times."; " is 212.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,radioButtonClipWithReencode_CheckedChanged,The length of the statement  "	} else if ((radioButtonArchiveAllBitrate.Checked && senderr.Name == radioButtonArchiveAllBitrate.Name) // archive all bitrate " is 125.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,PlaybackAsset,The length of the statement  "			string myurl = AssetInfo.DoPlayBackWithStreamingEndpoint (typeplayer: PlayerType.AzureMediaPlayerFrame' Urlstr: myuri.ToString ()' DoNotRewriteURL: true' context: _context' formatamp: AzureMediaPlayerFormats.Auto' technology: AzureMediaPlayerTechnologies.Auto' launchbrowser: false' UISelectSEFiltersAndProtocols: false' mainForm: _mainform); " is 342.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,DoSubClip,The length of the statement  "		EncodingMES form2 = new EncodingMES (_context' new List<IAsset> ()' processor.Version' _mainform' subclipConfig' disableOverlay: true) { " is 136.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,DoSubClip,The length of the statement  "			EncodingLabel = (_selectedAssets.Count > 1) ? string.Format ("{0} asset{1} selected. You are going to submit {0} job{1} with 1 task."' _selectedAssets.Count' Program.ReturnS (_selectedAssets.Count)' _selectedAssets.Count) : "Asset '" + _selectedAssets.FirstOrDefault ().Name + "' will be encoded (1 job with 1 task)."' " is 318.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,DoSubClip,The length of the statement  "			string taskname = "Subclipping with reencoding of " + Constants.NameconvInputasset + " with " + Constants.NameconvEncodername; " is 126.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,DoSubClip,The length of the statement  "			_mainform.LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' _selectedAssets' form2.EncodingJobName' form2.JobOptions.Priority' taskname' form2.EncodingOutputAssetName' new List<string> () { " is 200.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,DoSubClip,The length of the statement  "			}' form2.JobOptions.OutputAssetsCreationOptions' form2.JobOptions.OutputAssetsFormatOption' form2.JobOptions.TasksOptionsSetting' form2.JobOptions.StorageSelected); " is 164.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,DoSubClip,The length of the statement  "				_mainform.TextBoxLogWriteLine ("Error when creating filter '{0}'."' (filterinfo != null && filterinfo.Name != null) ? filterinfo.Name : "unknown name"' true); " is 158.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,DoSubClip,The length of the statement  "		_mainform.LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (Proc' _selectedAssets' this.EncodingJobName' this.JobOptions.Priority' taskname' this.EncodingOutputAssetName' new List<string> () { " is 192.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,DoSubClip,The length of the statement  "		}' this.JobOptions.OutputAssetsCreationOptions' this.JobOptions.OutputAssetsFormatOption' this.JobOptions.TasksOptionsSetting' this.JobOptions.StorageSelected); " is 160.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Subclipping)); " is 132.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The length of the statement  "	this.radioButtonAssetFilter.CheckedChanged += new System.EventHandler (this.radioButtonClipWithReencode_CheckedChanged); " is 120.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The length of the statement  "	this.radioButtonArchiveTopBitrate.CheckedChanged += new System.EventHandler (this.radioButtonClipWithReencode_CheckedChanged); " is 126.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The length of the statement  "	this.radioButtonArchiveAllBitrate.CheckedChanged += new System.EventHandler (this.radioButtonClipWithReencode_CheckedChanged); " is 126.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The length of the statement  "	this.radioButtonClipWithReencode.CheckedChanged += new System.EventHandler (this.radioButtonClipWithReencode_CheckedChanged); " is 125.
Long Statement,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The length of the statement  "	this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,FillComboBoxImportFilters,The length of the statement  "	comboBoxLocatorsFilters.Items.Add (new Item (AMSExplorer.Properties.Resources.DynManifestFilter_FillComboBoxImportFilters_ImportTrackFilteringFrom' null)); " is 155.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,FillComboBoxImportFilters,The length of the statement  "		asset.AssetFilters.Where (g => g.Tracks.Count > 0).ToList ().ForEach (g => comboBoxLocatorsFilters.Items.Add (new Item ("Asset filter : " + g.Name' g.Id))); " is 156.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,FillComboBoxImportFilters,The length of the statement  "	_context.Filters.ToList ().Where (g => g.Tracks.Count > 0).ToList ().ForEach (g => comboBoxLocatorsFilters.Items.Add (new Item ("Global filter : " + g.Name' g.Name))); " is 167.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filter_presentationtimerange.Timescale; " is 136.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "		textBoxFilterTimeScale.Text = (_filter_presentationtimerange.Timescale == null) ? "(default)" : _filter_presentationtimerange.Timescale.ToString (); " is 148.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "		toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules); " is 170.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "			_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale; " is 131.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "			timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset; " is 131.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "			timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive; " is 134.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "				timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration; " is 134.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "		toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules); " is 170.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale; " is 145.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "		if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match " is 181.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "			timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive; " is 134.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "			timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset; " is 131.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "	dataOperator.Rows.Add (FilterTrackCompareOperator.NotEqual.ToString ()' FilterTrackCompareOperator.NotEqual.ToString ()); " is 121.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkHowIMoreInfoDynamicManifest)); " is 131.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The length of the statement  "		DGInfo.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type' AMSExplorer.Properties.Resources.DynManifestFilter_DisplayFilterInfo_GlobalFilter); " is 178.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The length of the statement  "		DGInfo.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type' AMSExplorer.Properties.Resources.DynManifestFilter_DisplayFilterInfo_AssetFilter); " is 177.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The length of the statement  "		DGInfo.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_ParentAssetId' assetfilter.ParentAssetId); " is 131.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The length of the statement  "	DGInfo.Rows.Add (AMSExplorer.Properties.Resources.DynManifestFilter_DisplayFilterInfo_FirstQualityBitrate' _filterToDisplay.FirstQuality == null ? Constants.stringNull : _filterToDisplay.FirstQuality.Bitrate.ToString ()); " is 221.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The length of the statement  "	DGInfo.Rows.Add (AMSExplorer.Properties.Resources.DynManifestFilter_DisplayFilterInfo_Timescale' _filterToDisplay.PresentationTimeRange.Timescale == null ? Constants.stringNull : _filterToDisplay.PresentationTimeRange.Timescale.ToString ()); " is 241.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The length of the statement  "	DGInfo.Rows.Add (AMSExplorer.Properties.Resources.DynManifestFilter_DisplayFilterInfo_StartTimestamp' _filterToDisplay.PresentationTimeRange.StartTimestamp == null ? Constants.stringNull : _filterToDisplay.PresentationTimeRange.StartTimestamp.ToString ()); " is 256.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The length of the statement  "	DGInfo.Rows.Add (AMSExplorer.Properties.Resources.DynManifestFilter_DisplayFilterInfo_EndTimestamp' _filterToDisplay.PresentationTimeRange.EndTimestamp == null ? Constants.stringNull : _filterToDisplay.PresentationTimeRange.EndTimestamp.ToString ()); " is 250.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The length of the statement  "	DGInfo.Rows.Add (AMSExplorer.Properties.Resources.DynManifestFilter_DisplayFilterInfo_PresentationWindowDuration' _filterToDisplay.PresentationTimeRange.PresentationWindowDuration == null ? Constants.stringNull : _filterToDisplay.PresentationTimeRange.PresentationWindowDuration.ToString ()); " is 292.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The length of the statement  "	DGInfo.Rows.Add (AMSExplorer.Properties.Resources.DynManifestFilter_DisplayFilterInfo_LiveBackoffDuration' _filterToDisplay.PresentationTimeRange.LiveBackoffDuration == null ? Constants.stringNull : _filterToDisplay.PresentationTimeRange.LiveBackoffDuration.ToString ()); " is 271.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The length of the statement  "	DGInfo.Rows.Add (AMSExplorer.Properties.Resources.DynManifestFilter_DisplayFilterInfo_TrackCount' _filterToDisplay.Tracks.Count); " is 129.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,ConvertFilterTracksToInternalVar,The length of the statement  "			} else if (condition.GetType () == typeof(FilterTrackLanguageCondition))// property Type - we want to propose supported FourCC " is 126.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,ConvertFilterTracksToInternalVar,The length of the statement  "			} else if (condition.GetType () == typeof(FilterTrackBitrateRangeCondition))// property Bitrange - we want to propose supported FourCC " is 134.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,ConvertFilterTracksToInternalVar,The length of the statement  "			} else if (condition.GetType () == typeof(FilterTrackNameCondition))// property Name - we want to propose supported FourCC " is 122.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CreateFilterTracks,The length of the statement  "			FilterTrackCompareOperator oper = (FilterTrackCompareOperator)Enum.Parse (typeof(FilterTrackCompareOperator)' condition.oper); " is 126.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CreateFilterTracks,The length of the statement  "				filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackBitrateRangeCondition (ReturnFilterTrackBitrateRangeFromString (condition.value)' oper)); " is 155.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The length of the statement  "			filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].property = dataGridViewTracks.CurrentCell.Value.ToString (); " is 156.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The length of the statement  "			filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].oper = dataGridViewTracks.CurrentCell.Value.ToString (); " is 152.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The length of the statement  "			filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].value = dataGridViewTracks.CurrentCell.Value.ToString (); " is 153.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,buttonAddCondition_Click,The length of the statement  "		//_filter_tracks[listBoxTracks.SelectedIndex].PropertyConditions.Add(new FilterTrackTypeCondition(FilterTrackType.Video' FilterTrackCompareOperator.Equal)); " is 156.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,textBoxFilterName_Validating,The length of the statement  "		errorProvider1.SetError (tb' AMSExplorer.Properties.Resources.DynManifestFilter_textBoxFilterName_Validating_PleaseSpecifyAFilterName); " is 135.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,buttonInsertSample_Click,The length of the statement  "	// _filter.PresentationTimeRange = new IFilterPresentationTimeRange() { LiveBackoffDuration = string.Empty' StartTimestamp = string.Empty' PresentationWindowDuration = string.Empty' EndTimestamp = "300000000"' Timescale = "10000000" }; " is 235.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,buttonInsertSample_Click,The length of the statement  "	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackTypeCondition (FilterTrackType.Video' FilterTrackCompareOperator.Equal)); " is 139.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,buttonInsertSample_Click,The length of the statement  "	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackBitrateRangeCondition (new FilterTrackBitrateRange (0' 1048576)' FilterTrackCompareOperator.Equal)); " is 166.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,buttonInsertSample_Click,The length of the statement  "	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackTypeCondition (FilterTrackType.Audio' FilterTrackCompareOperator.Equal)); " is 139.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,buttonInsertSample_Click,The length of the statement  "	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackFourCCCondition (FilterPropertyFourCCValue.mp4a' FilterTrackCompareOperator.Equal)); " is 150.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,buttonInsertSample_Click,The length of the statement  "	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackTypeCondition (FilterTrackType.Text' FilterTrackCompareOperator.Equal)); " is 138.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,buttonInsertSample_Click,The length of the statement  "	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackLanguageCondition ("en"' FilterTrackCompareOperator.Equal)); " is 126.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CheckIfErrorTimeControls,The length of the statement  "		errorProvider1.SetError (timeControlStart' AMSExplorer.Properties.Resources.DynManifestFilter_CheckIfErrorTimeControls_ItIsNotRecommendedToUseAGlobalFilterToDoTimeTrimmingConsiderCreatingAnAssetFilterInstead); " is 209.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CheckIfErrorTimeControls,The length of the statement  "	} else if (checkBoxStartTime.Checked && checkBoxEndTime.Checked && timeControlStart.TimeStampWithoutOffset > timeControlEnd.TimeStampWithoutOffset) { " is 149.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CheckIfErrorTimeControls,The length of the statement  "		errorProvider1.SetError (timeControlStart' AMSExplorer.Properties.Resources.DynManifestFilter_CheckIfErrorTimeControls_StartTimeMustBeLowerThanEndTime); " is 152.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CheckIfErrorTimeControls,The length of the statement  "		errorProvider1.SetError (timeControlEnd' AMSExplorer.Properties.Resources.DynManifestFilter_CheckIfErrorTimeControls_ItIsNotRecommendedToUseAGlobalFilterToDoTimeTrimmingConsiderCreatingAnAssetFilterInstead); " is 207.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CheckIfErrorTimeControls,The length of the statement  "	} else if (checkBoxEndTime.Checked && checkBoxStartTime.Checked && timeControlEnd.TimeStampWithoutOffset < timeControlStart.TimeStampWithoutOffset) { " is 149.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CheckIfErrorTimeControls,The length of the statement  "		errorProvider1.SetError (timeControlEnd' AMSExplorer.Properties.Resources.DynManifestFilter_CheckIfErrorTimeControls_EndTimeMustBeHigherThanStartTime); " is 151.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CheckIfErrorTimeControls,The length of the statement  "		errorProvider1.SetError (timeControlDVR' AMSExplorer.Properties.Resources.DynManifestFilter_CheckIfErrorTimeControls_TheDVRWindowMustBeAtLeast2MinutesOrMore); " is 158.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,checkBoxRawMode_CheckedChanged,The length of the statement  "		textBoxRawDVR.Text = ptr.PresentationWindowDuration == null ? string.Empty : ((TimeSpan)ptr.PresentationWindowDuration).Ticks.ToString (); " is 138.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,checkBoxRawMode_CheckedChanged,The length of the statement  "		textBoxRawBackoff.Text = ptr.LiveBackoffDuration == null ? string.Empty : ((TimeSpan)ptr.LiveBackoffDuration).Ticks.ToString (); " is 128.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,textBoxRawulong_Validating,The length of the statement  "		errorProvider1.SetError (tb' AMSExplorer.Properties.Resources.DynManifestFilter_textBoxRawulong_Validating_IncorrectValue); " is 123.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,textBoxRawTimeSpan_Validating,The length of the statement  "		errorProvider1.SetError (tb' AMSExplorer.Properties.Resources.DynManifestFilter_textBoxRawulong_Validating_IncorrectValue); " is 123.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(DynManifestFilter)); " is 138.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The length of the statement  "	this.checkBoxFirstQualityBitrate.CheckedChanged += new System.EventHandler (this.checkBoxFirstQualityBitrate_CheckedChanged); " is 125.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The length of the statement  "	this.comboBoxLocatorsFilters.SelectedIndexChanged += new System.EventHandler (this.comboBoxLocatorsFilters_SelectedIndexChanged); " is 129.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The length of the statement  "	this.tableLayoutPanel1.CellPaint += new System.Windows.Forms.TableLayoutCellPaintEventHandler (this.tableLayoutPanel1_CellPaint); " is 129.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTracks.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 124.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTracks.CellValueChanged += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewTracks_CellValueChanged); " is 141.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTracks.CurrentCellDirtyStateChanged += new System.EventHandler (this.dataGridViewTracks_CurrentCellDirtyStateChanged); " is 135.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripInfo.MouseClick += new System.Windows.Forms.MouseEventHandler (this.contextMenuStripInfo_MouseClick); " is 122.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The length of the statement  "	this.toolStripMenuItemFilesCopyClipboard.Click += new System.EventHandler (this.toolStripMenuItemFilesCopyClipboard_Click); " is 123.
Long Statement,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,EncodingAMEStandard_Load,The length of the statement  "	buttonRegionEditor.Initialize (_firstAsset' _main' false' 1' true' AMSExplorer.Properties.Resources.EncodingMES_EncodingAMEStandard_Load_CroppingEditor); " is 153.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,EncodingAMEStandard_Load,The length of the statement  "	linkLabelMESFeatures.Links.Add (new LinkLabel.Link (0' linkLabelMESFeatures.Text.Length' Constants.LinkMESAdvFeatures)); " is 120.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,EncodingAMEStandard_Load,The length of the statement  "	linkLabelAdaptiveStreamingPreset.Links.Add (new LinkLabel.Link (0' linkLabelAdaptiveStreamingPreset.Text.Length' Constants.LinkMESAutoGenPreset)); " is 146.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,EncodingAMEStandard_Load,The length of the statement  "		timeControlStartTime.ScaledFirstTimestampOffset = timeControlEndTime.ScaledFirstTimestampOffset = (ulong)_subclipConfig.OffsetForReencode.Ticks; " is 144.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,EncodingAMEStandard_Load,The length of the statement  "	var filePaths = Directory.GetFiles (EncodingAMEStdPresetJSONFilesFolder' "*.json").Select (f => Path.GetFileNameWithoutExtension (f)).OrderByDescending (f => f.Contains (defaultprofile)); " is 187.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,EncodingAMEStandard_Load,The length of the statement  "		_inputAssetsForJob.ForEach (a => comboBoxSourceAsset.Items.Add (new Item (string.Format ("{0} ({1})"' a.Name' a.Id)' a.Id))); " is 125.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,buttonLoadJSON_Click,The length of the statement  "			MessageBox.Show (string.Format (AMSExplorer.Properties.Resources.EncodingMES_buttonLoadJSON_Click_ErrorCouldNotReadFileFromDiskOriginalError0' ex.Message)); " is 156.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "					if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") { " is 127.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "					if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) { " is 177.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "						if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) { " is 190.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "					if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) { " is 189.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "			} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl) " is 121.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "			} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets " is 169.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "					for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file " is 143.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "							codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo"; " is 120.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "					AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value); " is 361.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "					AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked); " is 326.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The length of the statement  "					AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked); " is 326.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,buttonSaveXML_Click,The length of the statement  "			MessageBox.Show (string.Format (AMSExplorer.Properties.Resources.EncodingAMEAdv_buttonSaveXML_Click_ErrorCouldNotSaveFileToDiskOriginalError0' ex.Message)); " is 156.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,listboxPresets_SelectedIndexChanged,The length of the statement  "			string filePath = Path.Combine (EncodingAMEStdPresetJSONFilesFolder' listboxPresets.SelectedItem.ToString () + ".json"); " is 120.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,listboxPresets_SelectedIndexChanged,The length of the statement  "			MessageBox.Show (AMSExplorer.Properties.Resources.EncodingMES_listboxPresets_SelectedIndexChanged_ErrorCouldNotReadFileFromDiskOrProcessTheJSONDataOriginalError + Constants.endline + ex.Message); " is 195.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,listboxPresets_SelectedIndexChanged,The length of the statement  "		if (listboxPresets.SelectedItem.ToString ().Contains ("4K") && _context.EncodingReservedUnits.FirstOrDefault ().ReservedUnitType != ReservedUnitType.Premium) { " is 159.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,textBoxConfiguration_TextChanged,The length of the statement  "	textBoxConfiguration.Text = textBoxConfiguration.Text.Replace ("\r\n"' "\n").Replace ("\r"' "\n").Replace ("\n"' Environment.NewLine); " is 134.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,textBoxConfiguration_TextChanged,The length of the statement  "			labelWarningJSON.Text = string.Format (AMSExplorer.Properties.Resources.EncodingMES_textBoxConfiguration_TextChanged_ErrorInXMLData0' ex.Message); " is 146.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,textBoxConfiguration_TextChanged,The length of the statement  "	((Control)this.TabPageAdvanced).Enabled = ((Control)this.tabPageOverlay).Enabled = ((Control)this.tabPageThBMP).Enabled = ((Control)this.tabPageThJPG).Enabled = ((Control)this.tabPageThPNG).Enabled = ((Control)this.tabPageTrimCrop).Enabled = type != TypeConfig.Other; " is 267.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,textBoxConfiguration_TextChanged,The length of the statement  "		labelOutputMinuteMultiplier.Text = string.Format (_multiplierlabel' multiplier' Properties.Settings.Default.Currency' multiplier * Properties.Settings.Default.MESPricePerMin); " is 175.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateDurationText,The length of the statement  "			textBoxSourceDurationTime.Text = (timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset).ToString (); " is 129.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateDurationText,The length of the statement  "		textBoxSourceDurationTime.Text = (timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ()).ToString (); " is 132.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,checkBoxSourceTrimming_CheckedChanged,The length of the statement  "	buttonAddEDLEntry.Enabled = /* checkBoxSourceTrimmingStart.Checked && checkBoxSourceTrimmingEnd.Checked && */checkBoxUseEDL.Checked; " is 132.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,checkBoxBestJPG_CheckedChanged,The length of the statement  "	textBoxThTimeStartJPG.Enabled = textBoxThTimeRangeJPG.Enabled = textBoxThTimeStepJPG.Enabled = !checkBoxBestJPG.Checked; " is 120.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,checkBoxBestPNG_CheckedChanged,The length of the statement  "	textBoxThTimeStartPNG.Enabled = textBoxThTimeRangePNG.Enabled = textBoxThTimeStepPNG.Enabled = !checkBoxBestPNG.Checked; " is 120.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,checkBoxBestBMP_CheckedChanged,The length of the statement  "	textBoxThTimeStartBMP.Enabled = textBoxThTimeRangeBMP.Enabled = textBoxThTimeStepBMP.Enabled = !checkBoxBestBMP.Checked; " is 120.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,checkBoxSourceTrimmingEnd_CheckedChanged,The length of the statement  "	buttonAddEDLEntry.Enabled = /* checkBoxSourceTrimmingStart.Checked && checkBoxSourceTrimmingEnd.Checked && */checkBoxUseEDL.Checked; " is 132.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,CheckOverlayFile,The length of the statement  "		errorProvider1.SetError (textBoxOverlayFileName' AMSExplorer.Properties.Resources.EncodingMES_CheckOverlayFile_SelectAFileInTheSourceAsset); " is 140.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,buttonAddEDLEntry_Click,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.EncodingMES_buttonAddEDLEntry_Click_YouCannotSpecifyOnlyAnEndTime' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 235.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(EncodingMES)); " is 132.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.moreinfopresetslink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabel_LinkClicked); " is 127.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.labelInfoTextNoAdvancedFeature.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128))))); " is 151.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.linkLabelMESFeatures.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabel_LinkClicked); " is 128.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.linkLabelInfoCropping.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabel_LinkClicked); " is 129.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.checkBoxSourceTrimmingEnd.CheckedChanged += new System.EventHandler (this.checkBoxSourceTrimmingEnd_CheckedChanged); " is 121.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.checkBoxSourceTrimmingStart.CheckedChanged += new System.EventHandler (this.checkBoxSourceTrimming_CheckedChanged); " is 120.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.linkLabelInfoOverlay.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabel_LinkClicked); " is 128.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.linkLabelThumbnail2.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabel_LinkClicked); " is 127.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.linkLabelThumbnail1.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabel_LinkClicked); " is 127.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.linkLabelThumbnail3.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabel_LinkClicked); " is 127.
Long Statement,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The length of the statement  "	this.linkLabelAdaptiveStreamingPreset.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabel_LinkClicked); " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The length of the statement  "	dataGridViewTransfer.Columns ["SubmitTime"].HeaderText = AMSExplorer.Properties.Resources.Mainform_DoGridTransferInit_SubmitTime; " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The length of the statement  "	dataGridViewTransfer.Columns ["StartTime"].HeaderText = AMSExplorer.Properties.Resources.Mainform_DoGridTransferInit_StartTime; " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The length of the statement  "	dataGridViewTransfer.Columns ["EndTime"].HeaderText = AMSExplorer.Properties.Resources.Mainform_DoGridTransferInit_EndTime; " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The length of the statement  "	dataGridViewTransfer.Columns ["ProgressText"].HeaderText = AMSExplorer.Properties.Resources.Mainform_DoGridTransferInit_ProgressDetail; " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The length of the statement  "	dataGridViewTransfer.Columns ["DestLocation"].HeaderText = AMSExplorer.Properties.Resources.Mainform_DoGridTransferInit_Destination; " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The length of the statement  "	tabPageTransfers.Invoke (new Action (() => tabPageTransfers.Text = string.Format (AMSExplorer.Properties.Resources.TabTransfers + " ({0})"' 0))); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferAddItem,The length of the statement  "	tabPageTransfers.Invoke (new Action (() => tabPageTransfers.Text = string.Format (AMSExplorer.Properties.Resources.TabTransfers + " ({0})"' _MyListTransfer.Count ()))); " is 168.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferDeclareCompleted,The length of the statement  "		this.Notify (AMSExplorer.Properties.Resources.Mainform_DoGridTransferDeclareCompleted_TransferCompleted' string.Format ("{0}"' transfer.Name)); " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferDeclareCompleted,The length of the statement  "		this.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.Mainform_DoGridTransferDeclareCompleted_Transfer0Completed' transfer.Name)); " is 150.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferDeclareCancelled,The length of the statement  "		this.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.Mainform_DoGridTransferDeclareCancelled_Transfer0CancelledByUser' transfer.Name)' true); " is 162.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferDeclareError,The length of the statement  "		this.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.Mainform_DoGridTransferDeclareError_Transfer0Error' transfer.Name)' true); " is 148.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferClearCompletedTransfers,The length of the statement  "	var list = _MyListTransfer.Where (l => l.State == TransferState.Cancelled || l.State == TransferState.Error || l.State == TransferState.Finished).ToList (); " is 156.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferDeclareTransferStarted,The length of the statement  "	this.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.Mainform_DoGridTransferDeclareTransferStarted_Transfer0Started' transfer.Name)); " is 154.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferWaitIfNeeded,The length of the statement  "		while (!DoGridTransferQueueOurTurn (guid) && Properties.Settings.Default.ConcurrentTransfers < Constants.MaxTransfersAsUnlimited) { " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The length of the statement  "		CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (targetStorage' targetStorageKey)' _credentials.ReturnStorageSuffix ()' true); " is 163.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The length of the statement  "		asset = _context.Assets.Create (assetname' targetStorage' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None); " is 176.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The length of the statement  "		CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (destStorage' destStorageKey)' _credentials.ReturnStorageSuffix ()' true); " is 159.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The length of the statement  "		asset = _context.Assets.Create (assetname' destStorage' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None); " is 174.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The length of the statement  "					double percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (nbtotalblobblock)) * 100d * (long)(BytesCopied + copyStatus.BytesCopied) / Length; " is 154.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The length of the statement  "					double percentComplete = 100d * (ind + Convert.ToDouble (mylistresults.Where (c => c.IsCompleted).Count ()) / Convert.ToDouble (mylistresults.Count)) / Convert.ToDouble (ListDirectories.Count); " is 193.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The length of the statement  "					DoGridTransferUpdateProgressText (string.Format ("fragblobs directory '{0}' ({1}/{2})"' dir.Prefix' mylistresults.Where (r => r.IsCompleted).Count ()' mylistresults.Count)' (int)percentComplete' response.Id); " is 208.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFromFolder,The length of the statement  "		var tasset = _context.Assets.CreateFromFolderAsync (folderPath as string' storageaccount' assetcreationoption' (af' p) => { " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GetLatestMediaProcessorByName,The length of the statement  "	var processor = _context.MediaProcessors.Where (p => p.Name == mediaProcessorName).ToList ().OrderBy (p => new Version (p.Version)).LastOrDefault (); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GetMediaProcessorsByName,The length of the statement  "	var processors = _context.MediaProcessors.Where (p => p.Name == mediaProcessorName).ToList ().OrderBy (p => new Version (p.Version)).Reverse (); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridAssetV,The length of the statement  "	dataGridViewAssetsV.Invoke (new Action (() => dataGridViewAssetsV.AssetsPerPage = Properties.Settings.Default.NbItemsDisplayedInGrid)); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridAssetV,The length of the statement  "	if ((dataGridViewAssetsV.CurrentPage <= comboBoxPageAssets.Items.Count) && (comboBoxPageAssets.Items.Count > 0))// if multiple refresh at the same time' it may happen that comboBoxPageAssets.Items.Count =0 which creates an exception " is 232.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridAssetV,The length of the statement  "	tabPageAssets.Invoke (new Action (() => tabPageAssets.Text = string.Format (AMSExplorer.Properties.Resources.TabAssets + " ({0}/{1})"' dataGridViewAssetsV.DisplayedCount' _context.Assets.Count ()))); " is 199.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridJobV,The length of the statement  "	dataGridViewJobsV.Invoke (new Action (() => dataGridViewJobsV.JobssPerPage = Properties.Settings.Default.NbItemsDisplayedInGrid)); " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridJobV,The length of the statement  "	if ((dataGridViewJobsV.CurrentPage <= comboBoxPageJobs.Items.Count) && (comboBoxPageJobs.Items.Count > 0))// if multiple refresh at the same time' it may happen that comboBoxPageJobs.Items.Count =0 which creates an exception " is 224.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridJobV,The length of the statement  "	tabPageJobs.Invoke (new Action (() => tabPageJobs.Text = string.Format (AMSExplorer.Properties.Resources.TabJobs + " ({0}/{1})"' dataGridViewJobsV.DisplayedCount' _context.Jobs.Count ()))); " is 189.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridIngestManifestV,The length of the statement  "	dataGridViewIngestManifestsV.Invoke (new Action (() => dataGridViewIngestManifestsV.RefreshIngestManifests (_context))); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuUploadFromSingleFileS_Step2,The length of the statement  "		AssetCreationOptions = Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuUploadFromSingleFileS_Step2,The length of the statement  "			var response = DoGridTransferAddItem (string.Format ("Upload of {0} files into a single asset"' FileNames.Count ())' TransferType.UploadFromFile' true); " is 152.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuUploadFromSingleFileS_Step2,The length of the statement  "			Task.Factory.StartNew (() => ProcessUploadFileAndMore (FileNames.ToList ()' response.Id' form.AssetCreationOptions' response.token' storageaccount: form.StorageSelected)' response.token); " is 187.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuUploadFromSingleFileS_Step2,The length of the statement  "				var response = DoGridTransferAddItem ("Upload of file '" + Path.GetFileName (file) + "'"' TransferType.UploadFromFile' true); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "	if (watchfoldersettings != null && filename.Count == 1 && ((watchfoldersettings.ProcessRohzetXML && (filename [0]).ToLower ().EndsWith (".xml")) || (watchfoldersettings.ProcessJSONSemaphore && (filename [0]).ToLower ().EndsWith (".json")))) { " is 242.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "			TextBoxLogWriteLine ("Starting upload of files '{0}'"' string.Join ("' "' listfiles.Select (f => f.fileName).ToList ())); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "				asset = await _context.Assets.CreateAsync (Path.GetFileName (filename [0])' storageaccount' assetcreationoptions' token); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "					UploadedAssetFile.UploadProgressChanged += (sender' e) => MyUploadFileRohzetModeProgressChanged (sender' e' guidTransfer' listfiles.IndexOf (file)' listfiles.Count); " is 165.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "					if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: upload error " + filename [0]' e.Message)) { " is 148.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "				asset = await _context.Assets.CreateAsync (Path.GetFileName (filename [0])' storageaccount' assetcreationoptions' token); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "					UploadedAssetFile.UploadProgressChanged += (sender' e) => MyUploadFileRohzetModeProgressChanged (sender' e' guidTransfer' filename.IndexOf (file)' filename.Count); " is 163.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "				if (watchfoldersettings != null && !Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: upload error " + string.Join ("' "' filename)' e.Message)) { " is 195.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "					if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: Error when deleting " + asset.Name' e.Message)) { " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "				TextBoxLogWriteLine ("Error when deleting '{0}'"' string.Join ("' "' listfiles.Select (f => f.fileName).ToList ())' true); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "					if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: Error when deleting files"' string.Join ("' "' listfiles.Select (f => f.fileName).ToList ()) + "\n\n" + e.Message)) { " is 221.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "		if (watchfoldersettings != null && watchfoldersettings.JobTemplate != null)// option with watchfolder to run a job based on a job template " is 138.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "			string jobname = string.Format ("Processing of {0} with template {1}"' asset.Name' watchfoldersettings.JobTemplate.Name); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "			IJob job = _context.Jobs.Create (jobname' watchfoldersettings.JobTemplate' assetlist' Properties.Settings.Default.DefaultJobPriority); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "					if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: Error when submitting job for asset " + asset.Name' e.Message)) { " is 169.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "				if (watchfoldersettings.PublishOutputAssets)//user wants to publish the output asset when it has been processed by the job  " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "					IAccessPolicy policy = _context.AccessPolicies.Create ("AP:" + myjob.Name' TimeSpan.FromDays (Properties.Settings.Default.DefaultLocatorDurationDaysNew)' AccessPermissions.Read); " is 178.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "							playbackurl = AssetInfo.DoPlayBackWithStreamingEndpoint (PlayerType.AzureMediaPlayer' SmoothUri.AbsoluteUri' _context' this' oasset' launchbrowser: false' UISelectSEFiltersAndProtocols: false); " is 193.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "						Program.WatchFolderCallApi (null' Path.GetFileName (filename [0])' watchfoldersettings' asset' oasset' job' MyLocator' SmoothUri' playbackurl); " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "							if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: Output asset published for asset " + asset.Name' sb.ToString ())) { " is 171.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "							if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: asset uploaded and processed " + asset.Name' sb.ToString ())) { " is 167.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "					if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: job " + job.State.ToString () + " for asset " + asset.Name' sb.ToString ())) { " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The length of the statement  "				Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: upload successful " + asset.Name' sb.ToString ()); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuUploadFileToAsset_Step2,The length of the statement  "			var response = DoGridTransferAddItem (string.Format ("Upload of {0} file{1} to asset '{2}'"' FileNames.Count ()' FileNames.Count () > 1 ? "s" : ""' asset.Name)' TransferType.UploadFromFile' true); " is 196.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuUploadFileToAsset_Step2,The length of the statement  "			Task.Factory.StartNew (() => ProcessUploadFilesToAsset (FileNames' asset' response.Id' response.token)' response.token); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessDownloadAsset,The length of the statement  "	string labeldb = (multipleassets) ? string.Format ("Starting download of files of {1} assets to {1}"' SelectedAssets.Count' folder as string) : string.Format ("Starting download of '{0}' to {1}"' SelectedAssets.FirstOrDefault ().Name' folder as string); " is 253.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDownloadFileFromAsset,The length of the statement  "	string labeldb = string.Format ("Starting download of '{0}' of asset '{1}' to {2}"' File.Name' asset.Name' folder as string); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuUploadFromFolder_Step2,The length of the statement  "				AssetCreationOptions = Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuUploadFromFolder_Step2,The length of the statement  "			var response = DoGridTransferAddItem (string.Format ("Upload of folder '{0}'"' Path.GetFileName (SelectedPath))' TransferType.UploadFromFolder' true); " is 150.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuUploadFromFolder_Step2,The length of the statement  "			var myTask = Task.Factory.StartNew (() => ProcessUploadFromFolder (SelectedPath' response.Id' form.AssetCreationOptions' //Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None' " is 240.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuUploadFromFolder_Step2,The length of the statement  "		MessageBox.Show ("Error: Could not read file from disk. Original error: " + Constants.endline + Program.GetErrorMessage (ex)); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromHttp,The length of the statement  "			if (Program.InputBox ("Storage Account Key Needed"' "Please enter the Storage Account Access Key for " + form.StorageSelected + ":"' ref valuekey2' true) == DialogResult.OK) { " is 175.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromHttp,The length of the statement  "			if (Program.InputBox ("Storage Account Key Needed"' "Please enter the Storage Account Access Key for " + _context.DefaultStorageAccount.Name + ":"' ref valuekey' true) == DialogResult.OK) { " is 189.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromHttp,The length of the statement  "		var response = DoGridTransferAddItem (string.Format ("Import from Http of '{0}'"' form.GetAssetFileName)' TransferType.ImportFromHttp' false); " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromHttp,The length of the statement  "		var myTask = Task.Factory.StartNew (() => ProcessImportFromHttp (form.GetURL' form.GetAssetName' form.GetAssetFileName' response.Id' response.token' DestStorage' passwordDestStorage)' response.token); " is 200.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorageSASContainer,The length of the statement  "			if (Program.InputBox ("Storage Account Key Needed"' "Please enter the Storage Account Access Key for " + form.StorageSelected + ":"' ref valuekey2' true) == DialogResult.OK) { " is 175.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorageSASContainer,The length of the statement  "			if (Program.InputBox ("Storage Account Key Needed"' "Please enter the Storage Account Access Key for " + _context.DefaultStorageAccount.Name + ":"' ref valuekey' true) == DialogResult.OK) { " is 189.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorageSASContainer,The length of the statement  "		var response = DoGridTransferAddItem (string.Format ("Import from SAS Container Path '{0}'"' form.GetAssetFileName)' TransferType.ImportFromHttp' false); " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorageSASContainer,The length of the statement  "		var myTask = Task.Factory.StartNew (() => ProcessImportFromStorageContainerSASUrl (form.GetURL' form.GetAssetName' response' DestStorage' passwordDestStorage)' response.token); " is 176.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshStreamingLocators,The length of the statement  "		string labelAssetName = "Streaming locators will be updated for Asset '" + SelectedAssets.FirstOrDefault ().Name + "'."; " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshStreamingLocators,The length of the statement  "			labelAssetName = "Streaming locators will be updated for the " + SelectedAssets.Count.ToString () + " selected assets."; " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshStreamingLocators,The length of the statement  "			LocWarning = _context.StreamingEndpoints.AsEnumerable ().All (o => StreamingEndpointInformation.ReturnTypeSE (o) == StreamingEndpointInformation.StreamEndpointType.Classic) ? "Dynamic packaging will not work as there are only classic streaming endpoints in this account." : string.Empty " is 286.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshStreamingLocators,The length of the statement  "					var tasks = asset.Locators.Where (locator => locator.Type == form.LocatorType).Select (locator => UpdateLocatorExpirationDate (locator' form.LocatorEndDate)); " is 158.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,UpdateLocatorExpirationDate,The length of the statement  "			TextBoxLogWriteLine ("Skipped streaming locator {1} on asset '{0}' because it already have an expiration time greater than the provided value."' locator.Asset.Name' locator.Id); " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,UpdateLocatorExpirationDate,The length of the statement  "		TextBoxLogWriteLine ("Update asset '{0}' streaming locator {1} expiration date from {2} to {3} ..."' locator.Asset.Name' locator.Id' locator.ExpirationDateTime' expirationTime); " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DisplayJobSource,The length of the statement  "		var job = _context.Jobs.AsEnumerable ().Where (j => j.OutputMediaAssets.Select (o => o.Id).ToList ().Contains (asset.Id)).FirstOrDefault (); " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CopyAssetToAzure,The length of the statement  "	ExportAssetToAzureStorage form = new ExportAssetToAzureStorage (_context' _credentials.DefaultStorageKey' sourceAsset' _credentials.ReturnStorageSuffix ()) { " is 157.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CopyAssetToAzure,The length of the statement  "		BlobLabelWarning = sourceAsset.Options == AssetCreationOptions.StorageEncrypted ? "Note: asset is storage encrypted" : "" " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuRenameAsset,The length of the statement  "			if (Program.InputBox ("Asset rename"' string.Format ("Enter the new name for asset '{0}' :"' AssetTORename.Name)' ref value) == DialogResult.OK) { " is 146.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEditAssetAltId,The length of the statement  "			if (Program.InputBox ("Asset Alternate Id"' string.Format ("Enter the new alternate Id for asset '{0}' :"' AssetToEditAltId.Name)' ref value) == DialogResult.OK) { " is 163.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEditAssetAltId,The length of the statement  "				TextBoxLogWriteLine ("Alternate Id for Asset Id '{0}' is now '{1}'."' AssetToEditAltId.Id' AssetToEditAltId.AlternateId); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The length of the statement  "			if (MessageBox.Show (string.Format ("Folder '{0}' does not exist." + Constants.endline + "Do you want to create it ?"' form.FolderPath)' "Folder does not exist"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.OK) { " is 236.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The length of the statement  "					MessageBox.Show (string.Format ("Error when creating folder '{0}'."' form.FolderPath)' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The length of the statement  "				listfiles.AddRange (asset.AssetFiles.ToList ().Where (f => File.Exists (path + @"\\" + f.Name)).Select (f => path + @"\\" + f.Name).ToList ()); " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The length of the statement  "					text = string.Format ("The following files are already in the folder(s)\n\n{0}\n\nOverwite the files ?"' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ())); " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The length of the statement  "					text = string.Format ("The following file is already in the folder\n\n{0}\n\nOverwite the file ?"' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ())); " is 176.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The length of the statement  "				if (MessageBox.Show (text' "File(s) overwrite"' MessageBoxButtons.OKCancel' MessageBoxIcon.Warning) != DialogResult.OK) { " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The length of the statement  "			var myTask = Task.Factory.StartNew (() => ProcessDownloadAsset (SelectedAssets' form.FolderPath' response.Id' form.FolderOption' form.OpenFolderAfterDownload' response.token)' response.token); " is 192.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCancelJobs,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (question' "Job(s) cancelation"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 188.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateLocator,The length of the statement  "			LocWarning = _context.StreamingEndpoints.AsEnumerable ().All (o => StreamingEndpointInformation.ReturnTypeSE (o) == StreamingEndpointInformation.StreamEndpointType.Classic) ? "Dynamic packaging will not work as there are only classic streaming endpoints in this account." : string.Empty " is 286.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateLocator,The length of the statement  "				Task.Factory.StartNew (() => ProcessCreateLocator (form.LocatorType' SelectedAssets' accessPolicyPermissions' accessPolicyDuration' form.LocatorStartDate' form.ForceLocatorGuid)); " is 179.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The length of the statement  "			if (locatorType == LocatorType.Sas || string.IsNullOrEmpty (ForceLocatorGUID))// It's a SAS locator or user does not want to force the GUID if this is a Streaming locator " is 170.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The length of the statement  "			TextBoxLogWriteLine ("Error. Could not create a locator for '{0}' (is the asset encrypted' or locators quota has been reached ?)"' AssetToP.Name' true); " is 152.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The length of the statement  "					if ((pol.AssetDeliveryProtocol & AssetDeliveryProtocol.ProgressiveDownload) == AssetDeliveryProtocol.ProgressiveDownload) { " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The length of the statement  "			if ((AssetToP.Options == AssetCreationOptions.None && AssetToP.DeliveryPolicies.Count == 0) || (AssetToP.Options == AssetCreationOptions.StorageEncrypted && protocolProgressiveDownload))// if no dynamic encryption and asset clear' or asset storage encrypted with progressive download decryption " is 294.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The length of the statement  "					sbuilderThisAsset.AppendLine (AddBracket ((new Uri (AssetInfo.RW (locator.Path' SESelected' https: true) + IAF.Name)).AbsoluteUri)); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The length of the statement  "			if (AssetToP.AssetType == AssetType.MediaServicesHLS)// It is a static HLS asset' so let's propose only the standard HLS V3 locator " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The length of the statement  "				if (!SESelectedSupportsDynPackaging && AssetToP.AssetType == AssetType.SmoothStreaming)// it's smooth streaming with no dynamic packaging " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The length of the statement  "				} else if (SESelectedSupportsDynPackaging && (AssetToP.AssetType == AssetType.SmoothStreaming || AssetToP.AssetType == AssetType.MultiBitrateMP4))// Smooth or multi MP4' SE RU so dynamic packaging is possible " is 208.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAllLocatorsOnAssets,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (question' "Locators deletion"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 187.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ReturnSelectedAssetsFromProgramsOrAssets,The length of the statement  "	} else if (tabControlMain.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabLive))// we are in the live tab " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ReturnSelectedAssets,The length of the statement  "			var asset = _context.Assets.Where (j => j.Id == Row.Cells [dataGridViewAssetsV.Columns ["Id"].Index].Value.ToString ()).FirstOrDefault (); " is 138.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ReturnSelectedIngestManifests,The length of the statement  "		SelectedIngestManifests.Add (_context.IngestManifests.Where (j => j.Id == Row.Cells ["Id"].Value.ToString ()).FirstOrDefault ()); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAssets,The length of the statement  "		string question = (SelectedAssets.Count == 1) ? "Delete " + SelectedAssets [0].Name + " ?" : "Delete these " + SelectedAssets.Count + " assets ?"; " is 146.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAssets,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (question' "Asset deletion"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 184.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAllAssets,The length of the statement  "	if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to delete ALL the assets ?"' "Asset deletion"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 231.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAllAssets,The length of the statement  "		if (Program.InputBox ("Please confirm"' string.Format ("To confirm the operation' please type the name of the media service account ({0})"' _context.Credentials.ClientId)' ref valuekey' false) == DialogResult.OK) { " is 214.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAllAssets,The length of the statement  "				MessageBox.Show ("Strings do not match. Operation is aborted"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorage,The length of the statement  "		if (Program.InputBox ("Storage Account Key Needed"' "Please enter the Storage Account Access Key for " + _context.DefaultStorageAccount.Name + ":"' ref valuekey' true) == DialogResult.OK) { " is 189.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorage,The length of the statement  "		ImportFromAzureStorage form = new ImportFromAzureStorage (_context' _credentials.DefaultStorageKey' _credentials.ReturnStorageSuffix ()) { " is 138.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorage,The length of the statement  "			if (SelectedAssets.FirstOrDefault ().Options == AssetCreationOptions.None && SelectedAssets.FirstOrDefault ().StorageAccountName == _context.DefaultStorageAccount.Name)// Ok' the selected asset is not encrypted and is in the default storage account " is 248.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorage,The length of the statement  "				form.ImportOptionToCopyFilesToExistingAssetLabel = (SelectedAssets.FirstOrDefault ().StorageAccountName != _context.DefaultStorageAccount.Name) ? "(Selected asset is not in the defaut storage)" : "(Selected asset seems to be encrypted)"; " is 237.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorage,The length of the statement  "			var response = DoGridTransferAddItem ("Import from Azure Storage " + (form.ImportCreateNewAsset ? "to a new asset" : "to an existing asset")' TransferType.ImportFromAzureStorage' false); " is 186.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuImportFromAzureStorage,The length of the statement  "			var myTask = Task.Factory.StartNew (() => ProcessImportFromAzureStorage (form.ImportUseDefaultStorage' form.SelectedBlobContainer' form.ImporOtherStorageName' form.ImportOtherStorageKey' form.SelectedBlobs' form.ImportCreateNewAsset' form.ImportNewAssetName' form.CreateOneAssetPerFile' targetAssetID' response)' response.token); " is 329.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The length of the statement  "				string currentassetname = newassetname.Replace (Constants.NameconvUploadasset' HttpUtility.UrlDecode (Path.GetFileName (file.Uri.AbsoluteUri))); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The length of the statement  "			string currentassetname = newassetname.Replace (Constants.NameconvUploadasset' HttpUtility.UrlDecode (Path.GetFileName (SelectedBlobs [0].Uri.AbsoluteUri))); " is 157.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The length of the statement  "		sourceStorageAccount = new CloudStorageAccount (new StorageCredentials (_context.DefaultStorageAccount.Name' _credentials.DefaultStorageKey)' _credentials.ReturnStorageSuffix ()' true); " is 185.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The length of the statement  "		sourceStorageAccount = new CloudStorageAccount (new StorageCredentials (otherstoragename' otherstoragekey)' _credentials.ReturnStorageSuffix ()' true); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The length of the statement  "	IAccessPolicy writePolicy = _context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromDays (1)' AccessPermissions.Write); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The length of the statement  "		var destinationStorageAccount = new CloudStorageAccount (new StorageCredentials (_context.DefaultStorageAccount.Name' _credentials.DefaultStorageKey)' _credentials.ReturnStorageSuffix ()' true); " is 194.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The length of the statement  "					string copyOperation = await destinationBlob.StartCopyAsync (new Uri (sourceBlob.Uri.AbsoluteUri + blobToken)' response.token); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The length of the statement  "						percentComplete = (Convert.ToDouble (assetindex + 1) / Convert.ToDouble (SelectedBlobs.Count)) * 100d * (long)(BytesCopied + destinationBlob.CopyState.BytesCopied) / (long)Length; " is 179.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The length of the statement  "						string copyOperation = await destinationBlob.StartCopyAsync (new Uri (sourceBlob.Uri.AbsoluteUri + blobToken)' response.token); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The length of the statement  "							percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SelectedBlobs.Count)) * 100d * (long)(BytesCopied + destinationBlob.CopyState.BytesCopied) / (long)Length; " is 171.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The length of the statement  "		CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (_context.DefaultStorageAccount.Name' _credentials.DefaultStorageKey)' _credentials.ReturnStorageSuffix ()' true); " is 199.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The length of the statement  "		IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The length of the statement  "				DoGridTransferDeclareError (response.Id' string.Format ("Failed to create container '{0}'. {1}"' TargetContainer.Name' ex.Message)); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The length of the statement  "		CloudStorageAccount SourceStorageAccount = new CloudStorageAccount (new StorageCredentials (_context.DefaultStorageAccount.Name' _credentials.DefaultStorageKey)' _credentials.ReturnStorageSuffix ()' true); " is 205.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The length of the statement  "		CloudStorageAccount TargetStorageAccount = new CloudStorageAccount (new StorageCredentials (otherstoragename' otherstoragekey)' _credentials.ReturnStorageSuffix ()' true); " is 171.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The length of the statement  "		IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The length of the statement  "						string stringOperation = await destinationBlob.StartCopyAsync (new Uri (sourceCloudBlob.Uri.AbsoluteUri + blobToken)' response.token); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "		DestinationCloudStorageAccount = (DestinationStorageAccount == null) ? new CloudStorageAccount (new StorageCredentials (DestinationContext.DefaultStorageAccount.Name' storagekeys [DestinationContext.DefaultStorageAccount.Name])' DestinationCredentialsEntry.ReturnStorageSuffix ()' true) : new CloudStorageAccount (new StorageCredentials (DestinationStorageAccount' storagekeys [DestinationStorageAccount])' DestinationCredentialsEntry.ReturnStorageSuffix ()' true); " is 465.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "	CloudBlobContainer DestinationCloudBlobContainer = DestinationCloudBlobClient.GetContainerReference (targetUri.Segments [1]); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "				SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true); " is 199.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "			// For Live archive' the folder for chunks are returned as files. So we detect this case and don't try to copy the folders as asset files " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "			if (assetFilesToCopy.Where (af => af.Name.Contains (".")).Count () == 2 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISMC")).Count () == 1 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISM")).Count () == 1)// only 2 files with extensions' and these files are ISMC and ISM " is 308.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "				// assetFilesToCopy = SourceAsset.AssetFiles.ToList().Where(af => !af.Name.StartsWith("audio_") && !af.Name.StartsWith("video_") && !af.Name.StartsWith("scte35_")); " is 164.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "				//  var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_")); " is 171.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "				var mediablobsFolders = SourceCloudBlobContainer.ListBlobs ().ToList ().Where (b => b.GetType () == typeof(CloudBlobDirectory)).Select (a => (a as CloudBlobDirectory).Prefix); " is 175.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "				assetFilesToCopy = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.None && !mediablobsFolders.Contains (af.Name + "/")).ToList (); " is 168.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "				var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.Fragmented || mediablobsFolders.Contains (af.Name + "/")).ToList (); " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "									percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SourceAsset.AssetFiles.Count ())) * 100d * (long)(BytesCopied + blob.CopyState.BytesCopied) / Length; " is 166.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "				DoGridTransferUpdateProgressText (string.Format ("fragblobs"' SourceAsset.Name' DestinationCredentialsEntry.AccountName)' 0' response.Id); " is 138.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "								if (blockblob.Name.EndsWith (".ismc") && !SourceAsset.AssetFiles.ToList ().Any (f => f.Name == blockblob.Name))// if there is a .ismc in the blov and not in the asset files' then we need to copy it " is 197.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "									mylistresults.Add (targetBlob.StartCopyAsync (new Uri (blockblob.Uri.AbsoluteUri + SourceLocator.ContentAccessComponent)' response.token)); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "							mylistresults.AddRange (AssetInfo.CopyBlobDirectory (dir' DestinationCloudBlobContainer' SourceLocator.ContentAccessComponent' response.token)); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "									percentComplete = 100d * (ind + Convert.ToDouble (mylistresults.Where (c => c.IsCompleted).Count ()) / Convert.ToDouble (mylistresults.Count)) / Convert.ToDouble (ListDirectories.Count); " is 186.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "									DoGridTransferUpdateProgressText (string.Format ("fragblobs directory '{0}' ({1}/{2})"' dir.Prefix' mylistresults.Where (r => r.IsCompleted).Count ()' mylistresults.Count)' (int)percentComplete' response.Id); " is 208.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "	if (CloneAssetFilters && !ErrorCopyAsset && SourceAssets.FirstOrDefault ().AssetFilters.Count () > 0 && !response.token.IsCancellationRequested) { " is 146.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "	if (CloneStreamingLocators && !ErrorCopyAsset && SourceAssets.FirstOrDefault ().Locators.Where (l => l.Type == LocatorType.OnDemandOrigin).Count () > 0 && !response.token.IsCancellationRequested) { " is 197.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "			var sourceLocators = SourceAssets.FirstOrDefault ().Locators.Where (l => l.Type == LocatorType.OnDemandOrigin).Select (l => new { " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "				IAccessPolicy policy = DestinationContext.AccessPolicies.Create ("AP:" + SourceAssets.FirstOrDefault ().Name' (streamLocator.ExpirationDateTime - DateTime.UtcNow)' AccessPermissions.Read); " is 188.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "				var newLoc = DestinationContext.Locators.CreateLocator (streamLocator.Id' LocatorType.OnDemandOrigin' TargetAsset' policy' streamLocator.StartTime' streamLocator.Name); " is 168.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The length of the statement  "		TextBoxLogWriteLine ("Asset copy completed. The new asset in '{0}' has the Id :"' DestinationCredentialsEntry.AccountName); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "	if (manifestdata.audioBitrates == null && manifestdata.videoBitrates.Count == 0 && manifestdata.audioSegments == null && manifestdata.videoSegments.Count == 0) { " is 161.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "		TextBoxLogWriteLine ("Error. Impossible to get manifest data for '{0}'. Is a streaming endpoint with dynamic packaging running?"' SourceAsset.Name' true); " is 154.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "					TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true); " is 156.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "			TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "						TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true); " is 210.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "				TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true); " is 175.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "		CloudStorageAccount SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true); " is 219.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "		IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "			//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_")); " is 169.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "				// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7))); " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "				var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2))); " is 221.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "					TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true); " is 165.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "					TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true); " is 170.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "					TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true); " is 162.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "					TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true); " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "							TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "						TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "						var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList (); " is 190.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "							TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true); " is 277.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "							TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true); " is 232.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "							TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true); " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "									TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true); " is 193.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The length of the statement  "									TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true); " is 196.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneProgramToAnotherAMSAccount,The length of the statement  "	IChannel clonedchannel = DestinationContext.Channels.Where (c => c.Name == sourceProgram.Channel.Name).FirstOrDefault (); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneProgramToAnotherAMSAccount,The length of the statement  "		TextBoxLogWriteLine (string.Format ("Cloned channel '{0}' not found in destination account!"' sourceProgram.Channel.Name)' true); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneProgramToAnotherAMSAccount,The length of the statement  "	if (DestinationContext.Programs.Where (p => p.Name == sourceProgram.Name && p.ChannelId == clonedchannel.Id).FirstOrDefault () != null) { " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneProgramToAnotherAMSAccount,The length of the statement  "		TextBoxLogWriteLine (string.Format ("A program '{0}' has been already found in destination account for channel '{1}'. A new one cannot be created."' sourceProgram.Name' clonedchannel.Name)' true); " is 196.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneProgramToAnotherAMSAccount,The length of the statement  "	IAsset clonedAsset = DestinationContext.Assets.Create (sourceProgram.Asset.Name' DestinationStorageAccount' AssetCreationOptions.None); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneProgramToAnotherAMSAccount,The length of the statement  "				IAccessPolicy policy = DestinationContext.AccessPolicies.Create ("AP:" + sourceProgram.Asset.Name' (streamlocator.ExpirationDateTime - DateTime.UtcNow)' AccessPermissions.Read); " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneProgramToAnotherAMSAccount,The length of the statement  "				DestinationContext.Locators.CreateLocator (streamlocator.Id' LocatorType.OnDemandOrigin' clonedAsset' policy' streamlocator.StartTime' streamlocator.Name); " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneProgramToAnotherAMSAccount,The length of the statement  "				var PTR = new PresentationTimeRange (filter.PresentationTimeRange.Timescale' null' null' filter.PresentationTimeRange.PresentationWindowDuration' filter.PresentationTimeRange.LiveBackoffDuration); " is 196.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCloneChannelToAnotherAMSAccount,The length of the statement  "	await Task.Run (() => IObjectExecuteOperationAsync (() => DestinationContext.Channels.SendCreateOperationAsync (options)' sourceChannel.Name' "Cloned channel"' "created"' DestinationContext)); " is 192.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteJobs,The length of the statement  "		string question = (SelectedJobs.Count == 1) ? "Delete " + SelectedJobs [0].Name + " ?" : "Delete these " + SelectedJobs.Count + " jobs ?"; " is 138.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteJobs,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (question' "Job deletion"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAllJobs,The length of the statement  "	if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to delete ALL the jobs ?"' "Job deletion"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 227.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCancelAllJobs,The length of the statement  "	if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to cancel ALL the jobs ?"' "Job cancelation"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 230.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCancelAllJobs,The length of the statement  "				cancelTasks.AddRange (listjobs.Where (j => j.State == JobState.Processing || j.State == JobState.Queued || j.State == JobState.Scheduled).Select (a => a.CancelAsync ()).ToArray ()); " is 181.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The length of the statement  "	string taskname = "Premium Workflow Encoding of " + Constants.NameconvInputasset + " with " + Constants.NameconvWorkflow; " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The length of the statement  "		EncodingPromptText = (SelectedAssets.Count > 1) ? "Input assets : " + SelectedAssets.Count + " assets have been selected." : "Input asset : '" + SelectedAssets.FirstOrDefault ().Name + "'"' " is 189.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The length of the statement  "		OutputAssetsCreationOptions = Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None " is 146.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The length of the statement  "				string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvWorkflow' graphAsset.Name); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The length of the statement  "				string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvWorkflow' graphAsset.Name); " is 162.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The length of the statement  "				task.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption); " is 166.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The length of the statement  "					MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 230.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMESystemPreset,The length of the statement  "		EncodingLabel1 = (SelectedAssets.Count > 1) ? SelectedAssets.Count + " assets have been selected. " + SelectedAssets.Count + " jobs will be submitted." : "Asset '" + SelectedAssets.FirstOrDefault ().Name + "' will be encoded."' " is 227.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMESystemPreset,The length of the statement  "		LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (form.EncodingProcessorSelected' SelectedAssets' form.EncodingJobName' form.JobOptions.Priority' taskname' form.EncodingOutputAssetName' form.EncodingSelectedPreset' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected); " is 372.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckQuicktimeAndDisplayMessage,The length of the statement  "		MessageBox.Show (string.Format ("Asset{0} seem{1} to be a Quicktime or ProRes file."' multi ? "s" : ""' multi ? "" : "s") + Constants.endline + "You should use Media Encoder Standard instead."' "Format issue"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 256.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,oSMFToolStripMenuItem_Click,The length of the statement  "	MessageBox.Show ("1) Set the src to MPEG-DASH or Smooth Streaming source" + Constants.endline + "2) Select 'Microsoft Adaptive Streaming Plugin'" + Constants.endline + "3) Click 'Preview and Update'"); " is 201.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdatePlayReadyConfiguration,The length of the statement  "	var keyseedEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "keySeedValue").FirstOrDefault (); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdatePlayReadyConfiguration,The length of the statement  "	var licenseAcquisitionUrlEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "licenseAcquisitionUrl").FirstOrDefault (); " is 152.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdatePlayReadyConfiguration,The length of the statement  "	var contentKeyEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "contentKey").FirstOrDefault (); " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdatePlayReadyConfiguration,The length of the statement  "	var keyIdEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "keyId").FirstOrDefault (); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdatePlayReadyConfiguration,The length of the statement  "	var useSencBoxEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "useSencBox").FirstOrDefault (); " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdatePlayReadyConfiguration,The length of the statement  "	var adjustSubSamplesEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "adjustSubSamples").FirstOrDefault (); " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdatePlayReadyConfiguration,The length of the statement  "	var serviceIdEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "serviceId").FirstOrDefault (); " is 128.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdatePlayReadyConfiguration,The length of the statement  "	var customAttributesEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "customAttributes").FirstOrDefault (); " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdateHLSConfiguration,The length of the statement  "	var encryptEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "encrypt").FirstOrDefault (); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdateHLSConfiguration,The length of the statement  "	var keyuriEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "keyuri").FirstOrDefault (); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdateHLSConfiguration,The length of the statement  "	var maxbitrateEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "maxbitrate").FirstOrDefault (); " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LoadAndUpdateHLSConfiguration,The length of the statement  "	var segmentEl = doc.Descendants (xmlns + "property").Where (p => p.Attribute ("name").Value == "segment").FirstOrDefault (); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuPackageSmoothToHLSStatic,The length of the statement  "		MessageBox.Show ("Asset(s) should be in Smooth Streaming format."' "Format"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuPackageSmoothToHLSStatic,The length of the statement  "	IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName (MediaProcessorNames.WindowsAzureMediaPackager); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuPackageSmoothToHLSStatic,The length of the statement  "		var message = string.Format ("Processor '{0}' not found in the account."' MediaProcessorNames.WindowsAzureMediaPackager); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuPackageSmoothToHLSStatic,The length of the statement  "		HLSLabel = (SelectedAssets.Count > 1) ? "Batch mode: " + SelectedAssets.Count + " assets have been selected." : "Asset '" + SelectedAssets.FirstOrDefault ().Name + "' will be packaged to HLS as a new asset"' " is 207.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuPackageSmoothToHLSStatic,The length of the statement  "		string configHLS = LoadAndUpdateHLSConfiguration (Path.Combine (_configurationXMLFiles' @"MediaPackager_SmoothToHLS.xml")' form.HLSEncrypt' form.HLSKey' form.HLSKeyURL' form.HLSMaxBitrate' form.HLSServiceSegment); " is 213.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuPackageSmoothToHLSStatic,The length of the statement  "		string outputassetname = form.HLSOutputAssetName.Replace (Constants.NameconvFormathls' form.HLSEncrypt ? "HLS/AES" : "HLS"); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuPackageSmoothToHLSStatic,The length of the statement  "		LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' jobname' Properties.Settings.Default.DefaultJobPriority' taskname' outputassetname' new List<string> { " is 179.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuPackageSmoothToHLSStatic,The length of the statement  "		}' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None' AssetFormatOption.None' Properties.Settings.Default.useProtectedConfiguration ? TaskOptions.ProtectedConfiguration : TaskOptions.None); " is 256.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuMP4ToSmoothStatic,The length of the statement  "			MessageBox.Show ("Asset(s) should be a multi bitrate or single MP4 file(s)."' "Format"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuMP4ToSmoothStatic,The length of the statement  "		string labeldb = (SelectedAssets.Count > 1) ? "Package these " + SelectedAssets.Count + " assets to Smooth Streaming ?" : "Package '" + SelectedAssets.FirstOrDefault ().Name + "' to Smooth Streaming ?"; " is 202.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuMP4ToSmoothStatic,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (labeldb' "Multi MP4 to Smooth"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 188.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuMP4ToSmoothStatic,The length of the statement  "			IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName (MediaProcessorNames.WindowsAzureMediaPackager); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuMP4ToSmoothStatic,The length of the statement  "				var message = string.Format ("Processor '{0}' not found in the account."' MediaProcessorNames.WindowsAzureMediaPackager); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuMP4ToSmoothStatic,The length of the statement  "			LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' jobname' Properties.Settings.Default.DefaultJobPriority' taskname' outputassetname' new List<string> { " is 179.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuMP4ToSmoothStatic,The length of the statement  "			}' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None' Properties.Settings.Default.OutputAssetsAdaptiveStreamingFormat ? AssetFormatOption.AdaptiveStreaming : AssetFormatOption.None' Properties.Settings.Default.useProtectedConfiguration ? TaskOptions.ProtectedConfiguration : TaskOptions.None); " is 360.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalytics,The length of the statement  "			MIInputAssetName = (SelectedAssets.Count > 1) ? string.Format ("{0} assets have been selected for processing."' SelectedAssets.Count) : string.Format ("Asset '{0}' will be processed."' SelectedAssets.FirstOrDefault ().Name) " is 223.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalytics,The length of the statement  "			LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' form.MIJobName' form.JobOptions.Priority' taskname' form.MIOutputAssetName' preset == null ? new List<string> { " is 188.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalytics,The length of the statement  "			}' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected); " is 160.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsFaceRedaction,The length of the statement  "			MIJobName = string.Format ("Redaction ({0} mode) of {1}"' Constants.NameconvRedactionMode' Constants.NameconvInputasset)' " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsFaceRedaction,The length of the statement  "			MIOutputAssetName = string.Format ("{0} - Redacted ({1} mode)"' Constants.NameconvInputasset' Constants.NameconvRedactionMode)' " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsFaceRedaction,The length of the statement  "			MIInputAssetName = (SelectedAssets.Count > 1) ? string.Format ("{0} assets have been selected for redaction."' SelectedAssets.Count) : string.Format ("Asset '{0}' will be redacted."' SelectedAssets.FirstOrDefault ().Name) " is 221.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsFaceRedaction,The length of the statement  "			LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' form.MIJobName.Replace (Constants.NameconvRedactionMode' form.RedactionMode ())' form.JobOptions.Priority' taskname' form.MIOutputAssetName.Replace (Constants.NameconvRedactionMode' form.RedactionMode ())' new List<string> { " is 301.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsFaceRedaction,The length of the statement  "			}' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected); " is 160.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsFaceDetection,The length of the statement  "			MIInputAssetName = (SelectedAssets.Count > 1) ? string.Format ("{0} assets have been selected for processing."' SelectedAssets.Count) : string.Format ("Asset '{0}' will be processed."' SelectedAssets.FirstOrDefault ().Name) " is 223.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsFaceDetection,The length of the statement  "			LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' form.MIJobName' form.JobOptions.Priority' taskname' form.MIOutputAssetName' new List<string> { " is 171.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsFaceDetection,The length of the statement  "			}' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected); " is 160.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsVideoThumbnails,The length of the statement  "			MIInputAssetName = (SelectedAssets.Count > 1) ? string.Format ("{0} assets have been selected for processing."' SelectedAssets.Count) : string.Format ("Asset '{0}' will be processed."' SelectedAssets.FirstOrDefault ().Name) " is 223.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsVideoThumbnails,The length of the statement  "			LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' form.MIJobName' form.JobOptions.Priority' taskname' form.MIOutputAssetName' new List<string> { " is 171.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsVideoThumbnails,The length of the statement  "			}' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected); " is 160.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsContentModeration,The length of the statement  "			MIJobName = string.Format ("Moderation ({0} mode) of {1}"' Constants.NameconvModerationMode' Constants.NameconvInputasset)' " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsContentModeration,The length of the statement  "			MIOutputAssetName = string.Format ("{0} - Analyzed with Content Moderation ({1} mode)"' Constants.NameconvInputasset' Constants.NameconvModerationMode)' " is 152.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsContentModeration,The length of the statement  "			MIInputAssetName = (SelectedAssets.Count > 1) ? string.Format ("{0} assets have been selected for moderation."' SelectedAssets.Count) : string.Format ("Asset '{0}' will be analyzed."' SelectedAssets.FirstOrDefault ().Name) " is 222.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsContentModeration,The length of the statement  "		string taskname = string.Format ("Moderation ({0} mode) of {1} "' form.ModerationMode ()' Constants.NameconvInputasset); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsContentModeration,The length of the statement  "			LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' form.MIJobName.Replace (Constants.NameconvModerationMode' form.ModerationMode ())' form.JobOptions.Priority' taskname' form.MIOutputAssetName.Replace (Constants.NameconvModerationMode' form.ModerationMode ())' new List<string> { " is 305.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnalyticsContentModeration,The length of the statement  "			}' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected); " is 160.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProtectWithPlayReadyStatic,The length of the statement  "		MessageBox.Show ("Asset(s) should be in Smooth Streaming format."' "Format"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProtectWithPlayReadyStatic,The length of the statement  "	IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName (MediaProcessorNames.WindowsAzureMediaEncryptor); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProtectWithPlayReadyStatic,The length of the statement  "		var message = string.Format ("Processor '{0}' not found in the account."' MediaProcessorNames.WindowsAzureMediaEncryptor); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProtectWithPlayReadyStatic,The length of the statement  "		PlayReadyAssetName = (SelectedAssets.Count > 1) ? SelectedAssets.Count + " assets have been selected as an input. " + SelectedAssets.Count + " jobs will be submitted." : "Asset '" + SelectedAssets.FirstOrDefault ().Name + "' will be encrypted with PlayReady." " is 259.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProtectWithPlayReadyStatic,The length of the statement  "		string configPlayReady = LoadAndUpdatePlayReadyConfiguration (Path.Combine (_configurationXMLFiles' @"MediaEncryptor_PlayReadyProtection.xml")' form.PlayReadyKeySeed' keyDeliveryServiceUri' form.PlayReadyKeyId' form.PlayReadyContentKey' form.PlayReadyUseSencBox' form.PlayReadyAdjustSubSamples' form.PlayReadyServiceId' form.PlayReadyCustomAttributes); " is 352.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProtectWithPlayReadyStatic,The length of the statement  "		LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' jobname' Properties.Settings.Default.DefaultJobPriority' taskname' form.PlayReadyOutputAssetName' new List<string> { " is 193.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProtectWithPlayReadyStatic,The length of the statement  "		}' AssetCreationOptions.CommonEncryptionProtected' AssetFormatOption.None' Properties.Settings.Default.useProtectedConfiguration ? TaskOptions.ProtectedConfiguration : TaskOptions.None); " is 186.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig,The length of the statement  "				string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvAMEpreset' config); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig,The length of the statement  "				string outputassetnameloc = outputassetname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvAMEpreset' config); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LaunchJobs_OneJobPerInputAssetWithSpecificConfig,The length of the statement  "			string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvAMEpreset' config); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,LaunchJobs_OneJobPerInputAssetWithSpecificConfig,The length of the statement  "			string outputassetnameloc = outputassetname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvAMEpreset' config); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuValidateMultiMP4Static,The length of the statement  "		MessageBox.Show ("Asset(s) should be in multi bitrate MP4 format."' "Format"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuValidateMultiMP4Static,The length of the statement  "	if (System.Windows.Forms.MessageBox.Show (labeldb' "Multi MP4 Validation"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 189.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuValidateMultiMP4Static,The length of the statement  "		string configMp4Validation = File.ReadAllText (Path.Combine (_configurationXMLFiles' "MediaPackager_ValidateTask.xml")); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuValidateMultiMP4Static,The length of the statement  "		IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName (MediaProcessorNames.WindowsAzureMediaPackager); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuValidateMultiMP4Static,The length of the statement  "			var message = string.Format ("Processor '{0}' not found in the account."' MediaProcessorNames.WindowsAzureMediaPackager); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuValidateMultiMP4Static,The length of the statement  "		LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' jobname' Properties.Settings.Default.DefaultJobPriority' taskname' outputassetname' new List<string> { " is 179.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuValidateMultiMP4Static,The length of the statement  "		}' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None' Properties.Settings.Default.OutputAssetsAdaptiveStreamingFormat ? AssetFormatOption.AdaptiveStreaming : AssetFormatOption.None' Properties.Settings.Default.useProtectedConfiguration ? TaskOptions.ProtectedConfiguration : TaskOptions.None); " is 360.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DisplayDeprecatedMessageStaticPackagers,The length of the statement  "	MessageBox.Show ("Windows Azure Media Packager and Windows Azure Media Encryptor will reach end of life on December 31' 2016.\n\nBefore that date' the same functionalities will be added to Media Encoder Standard.\n\nCustomers will be provided instructions on how to migrate their workflows to send Jobs to this media processor.\n\nFormat conversion and encryption capabilities may also be available through dynamic packaging and dynamic encryption."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 516.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DisplayDeprecatedMessageAME,The length of the statement  "	MessageBox.Show ("The end of life date for Azure Media Encoder is March 1' 2017.\n\nIt is now recommended to use Media Encoder Standard (MES).\nIt provides better quality and performance' and it supports more input formats."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 291.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuIndexAssets,The length of the statement  "		IndexerInputAssetName = (SelectedAssets.Count > 1) ? SelectedAssets.Count + " assets have been selected for media indexing." : "Asset '" + SelectedAssets.FirstOrDefault ().Name + "' will be indexed."' " is 200.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuIndexAssets,The length of the statement  "			ListConfig.Add (Indexer.LoadAndUpdateIndexerConfiguration (Path.Combine (_configurationXMLFiles' @"MediaIndexer.xml")' form.IndexerTitle' form.IndexerDescription' form.IndexerLanguage' form.IndexerGenerationOptions' null//proposedfiles.ContainsKey(asset.Id) ? proposedfiles[asset.Id] : null " is 290.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuIndexAssets,The length of the statement  "		LaunchJobs_OneJobPerInputAssetWithSpecificConfig (processor' SelectedAssets' form.IndexerJobName' form.JobOptions.Priority' taskname' form.IndexerOutputAssetName' ListConfig' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected' copySubtitlesToInput: form.CopySubtitlesFilesToInputAsset); " is 391.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuIndex2PreviewAssets,The length of the statement  "		IndexerInputAssetName = (SelectedAssets.Count > 1) ? SelectedAssets.Count + " assets have been selected for media indexing." : "Asset '" + SelectedAssets.FirstOrDefault ().Name + "' will be indexed."' " is 200.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuIndex2PreviewAssets,The length of the statement  "		LaunchJobs_OneJobPerInputAssetWithSpecificConfig (processor' SelectedAssets' form.IndexerJobName' form.JobOptions.Priority' taskname' form.IndexerOutputAssetName' ListConfig' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected' copySubtitlesToInput: form.CopySubtitlesFilesToInputAsset); " is 391.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoOCR,The length of the statement  "	MediaAnalyticsVideoOCR form = new MediaAnalyticsVideoOCR (_context' processor.Version' SelectedAssets.FirstOrDefault ()' this) { " is 128.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoOCR,The length of the statement  "		IndexerInputAssetName = (SelectedAssets.Count > 1) ? SelectedAssets.Count + " assets have been selected for video OCR." : "Asset '" + SelectedAssets.FirstOrDefault ().Name + "' will be processed for OCR."' " is 205.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoOCR,The length of the statement  "		LaunchJobs_OneJobPerInputAssetWithSpecificConfig (processor' SelectedAssets' form.OCRJobName' form.JobOptions.Priority' taskname' form.IndexerOutputAssetName' ListConfig' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected); " is 328.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuMotionDetection,The length of the statement  "		IndexerInputAssetName = (SelectedAssets.Count > 1) ? SelectedAssets.Count + " assets have been selected for motion detection." : "Asset '" + SelectedAssets.FirstOrDefault ().Name + "' will be processed for motion detection."' " is 225.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuMotionDetection,The length of the statement  "		LaunchJobs_OneJobPerInputAssetWithSpecificConfig (processor' SelectedAssets' form.OCRJobName' form.JobOptions.Priority' taskname' form.IndexerOutputAssetName' ListConfig' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected); " is 328.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuHyperlapseAssets,The length of the statement  "		HyperlapseInputAssetName = (SelectedAssets.Count > 1) ? SelectedAssets.Count + " assets have been selected for Hyperlapse processing." : "Asset '" + SelectedAssets.FirstOrDefault ().Name + "' will be processed by Hyperlapse."' " is 226.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuHyperlapseAssets,The length of the statement  "		LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' form.HyperlapseJobName' form.JobOptions.Priority' taskname' form.HyperlapseOutputAssetName' new List<string> { " is 187.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuHyperlapseAssets,The length of the statement  "		}' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption' form.JobOptions.TasksOptionsSetting' form.JobOptions.StorageSelected); " is 160.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckPrimaryFileExtension,The length of the statement  "		var selectableFiles = asset.AssetFiles.ToList ().Where (f => mediaFileExtensions.Contains (Path.GetExtension (f.Name).ToUpperInvariant ())).ToList (); " is 150.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckPrimaryFileExtension,The length of the statement  "		if (primary != null && !mediaFileExtensions.Contains (Path.GetExtension (primary.Name).ToUpperInvariant ()) && selectableFiles.Count > 0) { " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckPrimaryFileExtension,The length of the statement  "			MessageBox.Show ("Source asset must be a single " + string.Join ("' "' mediaFileExtensions) + " file."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 161.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckPrimaryFileExtension,The length of the statement  "	else if (SelectedAssets.Any (a => a.AssetFiles.Count () != 1) || SelectedAssets.Any (a => a.AssetFiles.Count () == 1 && (!mediaFileExtensions.Contains (Path.GetExtension (a.AssetFiles.FirstOrDefault ().Name).ToUpperInvariant ())))) { " is 233.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckPrimaryFileExtension,The length of the statement  "		MessageBox.Show ("Source asset must be a single " + string.Join ("' "' mediaFileExtensions) + " file."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 161.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckPrimaryFileExtensionRedactionMode,The length of the statement  "		var selectableFiles = asset.AssetFiles.ToList ().Where (f => mediaFileExtensions.Contains (Path.GetExtension (f.Name).ToUpperInvariant ())).ToList (); " is 150.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckPrimaryFileExtensionRedactionMode,The length of the statement  "		if (primary != null && !mediaFileExtensions.Contains (Path.GetExtension (primary.Name).ToUpperInvariant ()) && selectableFiles.Count > 0) { " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckPrimaryFileExtensionRedactionMode,The length of the statement  "		MessageBox.Show ("Source asset must contain a " + string.Join ("' "' mediaFileExtensions) + " file."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 159.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckJSONFileExtensionRedactionMode,The length of the statement  "		if (asset.AssetFiles.ToList ().Where (f => f.Name.ToLowerInvariant ().EndsWith ("_annotations.json")).FirstOrDefault () == null)// no annotations JSON file in asset " is 164.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckJSONFileExtensionRedactionMode,The length of the statement  "		MessageBox.Show ("Source asset must contain an input annotations JSON file."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckAssetSizeRegardingMediaUnit,The length of the statement  "	var unitype = SelectedAssets.FirstOrDefault ().GetMediaContext ().EncodingReservedUnits.FirstOrDefault ().ReservedUnitType; " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckAssetSizeRegardingMediaUnit,The length of the statement  "			MessageBox.Show (string.Format ("You are using {0} media unit(s).\nAt least one of the source assets has a size over {1}.\n\nLimits are :\n{2} GB with S1 media unit\n{3} GB with S2 media unit\n{4} GB with S3 media unit"' unitname' AssetInfo.FormatByteSize (limit)' S1AssetSizeLimit' S2AssetSizeLimit' S3AssetSizeLimit)' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 377.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckAssetSizeRegardingMediaUnit,The length of the statement  "			MessageBox.Show (string.Format ("At least one of the source assets has a size over {0}' which is the maximum supported by Indexer."' AssetInfo.FormatByteSize (limit))' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 225.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,The length of the statement  "	if (SelectedAssets.Any (a => a.AssetFiles.Count () == 1 && !mediaFileExtensions.Contains (Path.GetExtension (a.AssetFiles.FirstOrDefault ().Name).ToUpperInvariant ()))) { " is 170.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,The length of the statement  "		MessageBox.Show ("If the input asset contains only one file' it must be a " + string.Join ("' "' mediaFileExtensions) + " file."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 187.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,The length of the statement  "                                if (MessageBox.Show(string.Format("The asset '{0}'\nis a multi file asset and the primary file '{1}'\nis not supported as an input.\n\nConfigure Indexer to index file '{2}' ?"' asset.Name' pf.Name' proposedfile)' "Warning"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes)" is 293.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,The length of the statement  "                            */var supportedfile = asset.AssetFiles.ToList ().Where (f => mediaFileExtensions.Contains (Path.GetExtension (f.Name).ToUpperInvariant ())).ToList (); " is 150.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,The length of the statement  "		MessageBox.Show (string.Format ("Asset '{0}' is a multi file asset and the primary file is not a " + string.Join ("' "' mediaFileExtensions) + " file.\nIndexing will probably fail."' assetnamepb)' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 254.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,The length of the statement  "		MessageBox.Show (string.Format ("There are {0} assets which are multi files assets and the primary file is not a " + string.Join ("' "' mediaFileExtensions) + " file.\nIndexing will probably fail."' MultiFileAssetPb)' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 275.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDecryptAsset,The length of the statement  "	string labeldb = (SelectedAssets.Count > 1) ? "Decrypt these " + SelectedAssets.Count + " assets  ?" : "Decrypt '" + mediaAsset.Name + "'  ?"; " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDecryptAsset,The length of the statement  "	if (System.Windows.Forms.MessageBox.Show (labeldb' "Asset Decryption"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 185.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDecryptAsset,The length of the statement  "		IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName (MediaProcessorNames.StorageDecryption); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDecryptAsset,The length of the statement  "		LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig (processor' SelectedAssets' jobname' Properties.Settings.Default.DefaultJobPriority' taskname' outputassetname' new List<string> { " is 179.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDecryptAsset,The length of the statement  "		}' AssetCreationOptions.None' AssetFormatOption.None' Properties.Settings.Default.useProtectedConfiguration ? TaskOptions.ProtectedConfiguration : TaskOptions.None); " is 165.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dynamicPackagingToolStripMenuItem_Click,The length of the statement  "	MessageBox.Show ("Please create a streaming locator in the Publish menu." + Constants.endline + Constants.endline + "Check that you have' at least' one Standard or Premium Streaming endpoint" + Constants.endline + "The asset should be:" + Constants.endline + "- a Smooth Streaming asset (Clear or PlayReady protected)'" + Constants.endline + "- or a Clear Multi MP4 asset."' "Dynamic Packaging"); " is 396.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform_Load,The length of the statement  "	linkLabelMoreInfoMediaUnits.Links.Add (new LinkLabel.Link (0' linkLabelMoreInfoMediaUnits.Text.Length' Constants.LinkInfoMediaUnit)); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform_Load,The length of the statement  "	comboBoxOrderAssets.Items.AddRange (typeof(OrderAssets).GetFields ().Select (i => i.GetValue (null) as string).ToArray ()); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform_Load,The length of the statement  "	comboBoxStateAssets.Items.AddRange (typeof(StatusAssets).GetFields ().Select (i => i.GetValue (null) as string).ToArray ()); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform_Load,The length of the statement  "	comboBoxFilterAssetsTime.Items.AddRange (typeof(FilterTime).GetFields ().Select (i => i.GetValue (null) as string).ToArray ()); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform_Load,The length of the statement  "	comboBoxFilterJobsTime.Items.AddRange (typeof(FilterTime).GetFields ().Select (i => i.GetValue (null) as string).ToArray ()); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform_Load,The length of the statement  "	comboBoxFilterTimeProgram.Items.AddRange (typeof(FilterTime).GetFields ().Select (i => i.GetValue (null) as string).ToArray ()); " is 128.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform_Load,The length of the statement  "	comboBoxFilterTimeChannel.Items.AddRange (typeof(FilterTime).GetFields ().Select (i => i.GetValue (null) as string).ToArray ()); " is 128.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEAdvanced,The length of the statement  "	string taskname = "Azure Media Encoding (adv) of " + Constants.NameconvInputasset + " with " + Constants.NameconvEncodername; " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEAdvanced,The length of the statement  "		EncodingLabel = (SelectedAssets.Count > 1) ? SelectedAssets.Count + " assets have been selected. One job will be submitted." : "Asset '" + SelectedAssets.FirstOrDefault ().Name + "' will be encoded."' " is 200.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEAdvanced,The length of the statement  "		string tasknameloc = taskname.Replace (Constants.NameconvInputasset' SelectedAssets [0].Name).Replace (Constants.NameconvEncodername' form.EncodingProcessorSelected.Name + " v" + form.EncodingProcessorSelected.Version); " is 219.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEAdvanced,The length of the statement  "		string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' SelectedAssets [0].Name); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEAdvanced,The length of the statement  "		AMETask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption); " is 169.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEAdvanced,The length of the statement  "			string outputassetnamelocthumbnails = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' SelectedAssets [0].Name) + " (Thumbnails)"; " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEAdvanced,The length of the statement  "			AMETaskThumbnails.OutputAssets.AddNew (outputassetnamelocthumbnails' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption); " is 189.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEAdvanced,The length of the statement  "			MessageBox.Show ("There has been a problem when submitting the job " + jobnameloc + Constants.endline + Program.GetErrorMessage (e)); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "		EncodingProcessorsList = _context.MediaProcessors.ToList ().OrderBy (p => p.Vendor).ThenBy (p => p.Name).ThenBy (p => new Version (p.Version)).ToList ()' " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "		if (form.EncodingCreationMode == TaskJobCreationMode.OneJobPerInputAsset || form.EncodingCreationMode == TaskJobCreationMode.OneJobPerVisibleAsset)// a job for each input asset " is 176.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "				string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvProcessorname' gentasks.Count > 1 ? "multi processors" : gentasks.FirstOrDefault ().Processor.Name); " is 219.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "					string tasknameloc = taskname.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name); " is 147.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "					ITask task = job.Tasks.AddNew (tasknameloc' usertask.Processor' usertask.ProcessorConfiguration' usertask.TaskOptions.TasksOptionsSetting// form.JobOptions.TasksOptionsSetting " is 175.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "						string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name); " is 174.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "						OutputAsset = task.OutputAssets.AddNew (outputassetnameloc' usertask.TaskOptions.StorageSelected' usertask.TaskOptions.OutputAssetsCreationOptions' usertask.TaskOptions.OutputAssetsFormatOption); " is 195.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "						MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 230.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "			string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' inputasssetname).Replace (Constants.NameconvProcessorname' gentasks.Count > 1 ? "multi processors" : gentasks.FirstOrDefault ().Processor.Name); " is 224.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "				string tasknameloc = taskname.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name); " is 147.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "				ITask task = job.Tasks.AddNew (tasknameloc' usertask.Processor' usertask.ProcessorConfiguration' usertask.TaskOptions.TasksOptionsSetting); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "					string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name); " is 174.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "					OutputAsset = task.OutputAssets.AddNew (outputassetnameloc' usertask.TaskOptions.StorageSelected' usertask.TaskOptions.OutputAssetsCreationOptions' usertask.TaskOptions.OutputAssetsFormatOption); " is 195.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The length of the statement  "				MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 230.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform_FormClosing,The length of the statement  "	int TransferUncompleted = _MyListTransfer.Where (t => (t.State == TransferState.Processing) || (t.State == TransferState.Queued)).Count (); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform_FormClosing,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show ("One or several transfers are in the queue or in progress and will be interrupted." + Constants.endline + "Are you sure that you want to quit the application?"' "Caution: transfer(s) in progress"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.No) { " is 352.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewAssetsV_CellDoubleClick_1,The length of the statement  "		IAsset asset = AssetInfo.GetAsset (dataGridViewAssetsV.Rows [e.RowIndex].Cells [dataGridViewAssetsV.Columns ["Id"].Index].Value.ToString ()' _context); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewJobsV_CellDoubleClick,The length of the statement  "		IJob job = GetJob (dataGridViewJobsV.Rows [e.RowIndex].Cells [dataGridViewJobsV.Columns ["Id"].Index].Value.ToString ()); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewAssetsV_CellFormatting_1,The length of the statement  "			cell3.ToolTipText = dataGridViewAssetsV.Rows [e.RowIndex].Cells [dataGridViewAssetsV._statEncMouseOver].Value.ToString (); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewAssetsV_CellFormatting_1,The length of the statement  "			cell4.ToolTipText = dataGridViewAssetsV.Rows [e.RowIndex].Cells [dataGridViewAssetsV._dynEncMouseOver].Value.ToString (); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewAssetsV_CellFormatting_1,The length of the statement  "			cell5.ToolTipText = dataGridViewAssetsV.Rows [e.RowIndex].Cells [dataGridViewAssetsV._publicationMouseOver].Value.ToString (); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewAssetsV_CellFormatting_1,The length of the statement  "	} else if (e.ColumnIndex == dataGridViewAssetsV.Columns [dataGridViewAssetsV._filter].Index)// Mouseover for icon filter " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewAssetsV_CellFormatting_1,The length of the statement  "			cell6.ToolTipText = dataGridViewAssetsV.Rows [e.RowIndex].Cells [dataGridViewAssetsV._filterMouseOver].Value.ToString (); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,contextMenuStripAssets_Opening,The length of the statement  "	ContextMenuItemAssetDisplayInfo.Enabled = ContextMenuItemAssetRename.Enabled = editAlternateIdToolStripMenuItem.Enabled = contextMenuExportFilesToStorage.Enabled = createAnAssetFilterToolStripMenuItem.Enabled = displayParentJobToolStripMenuItem1.Enabled = singleitem; " is 267.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,toolStripMenuAsset_DropDownOpening,The length of the statement  "	informationToolStripMenuItem.Enabled = renameToolStripMenuItem.Enabled = editAlternateIdToolStripMenuItem1.Enabled = toAzureStorageToolStripMenuItem.Enabled = displayParentJobToolStripMenuItem.Enabled = singleitem; " is 214.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDisplayAssetInfoFromLocatorID,The length of the statement  "	if (Program.InputBox ("Locator ID/GUID"' "Please enter the known Locator Id or GUID :"' ref locatorID) == DialogResult.OK) { " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoOpenTransferDestLocation,The length of the statement  "		if ((TransferState)dataGridViewTransfer.SelectedRows [0].Cells [dataGridViewTransfer.Columns ["State"].Index].Value == TransferState.Finished) { " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoOpenTransferDestLocation,The length of the statement  "			string location = dataGridViewTransfer.SelectedRows [0].Cells [dataGridViewTransfer.Columns ["DestLocation"].Index].Value.ToString (); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoOpenTransferDestLocation,The length of the statement  "			switch ((TransferType)dataGridViewTransfer.SelectedRows [0].Cells [dataGridViewTransfer.Columns ["Type"].Index].Value) { " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayTransferError,The length of the statement  "		if ((TransferState)dataGridViewTransfer.SelectedRows [0].Cells [dataGridViewTransfer.Columns ["State"].Index].Value == TransferState.Error) { " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayTransferError,The length of the statement  "			string ErrorMessage = dataGridViewTransfer.SelectedRows [0].Cells [dataGridViewTransfer.Columns ["ErrorDescription"].Index].Value.ToString (); " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,contextMenuStripTransfers_Opening,The length of the statement  "		var status = (TransferState)dataGridViewTransfer.SelectedRows [0].Cells [dataGridViewTransfer.Columns ["State"].Index].Value; " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,IsThereALocatorValid,The length of the statement  "		ILocator LocatorQuery = asset.Locators.Where (l => (l.Type == mylocatortype) && ((l.StartTime < DateTime.UtcNow) || (l.StartTime == null)) && (l.ExpirationDateTime > DateTime.UtcNow)).FirstOrDefault (); " is 202.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateTestsAssets,The length of the statement  "			_context.Assets.CreateAsync ("Asset-" + string.Format ("{0:000000}"' i)' AssetCreationOptions.None' CancellationToken.None); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoExportAssetToAzureStorage,The length of the statement  "			if (Program.InputBox ("Storage Account Key Needed"' "Please enter the Storage Account Access Key for " + _context.DefaultStorageAccount.Name + ":"' ref valuekey' true) == DialogResult.OK) { " is 189.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoExportAssetToAzureStorage,The length of the statement  "			if (SelectedAssets.FirstOrDefault ().Options == AssetCreationOptions.None && SelectedAssets.FirstOrDefault ().StorageAccountName == _context.DefaultStorageAccount.Name)// Ok' the selected asset is not encrypyted " is 211.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoExportAssetToAzureStorage,The length of the statement  "				if (CopyAssetToAzure (ref UseDefaultStorage' ref containername' ref otherstoragename' ref otherstoragekey' ref SelectedFiles' ref CreateNewContainer' SelectedAssets.FirstOrDefault ()) == DialogResult.OK) { " is 205.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoExportAssetToAzureStorage,The length of the statement  "					var response = DoGridTransferAddItem ("Export to Azure Storage " + (CreateNewContainer ? "to a new container" : "to an existing container")' TransferType.ExportToAzureStorage' false); " is 183.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoExportAssetToAzureStorage,The length of the statement  "					Task.Factory.StartNew (() => ProcessExportAssetToAzureStorage (UseDefaultStorage' containername' otherstoragename' otherstoragekey' SelectedFiles' CreateNewContainer' response)' response.token); " is 194.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoExportAssetToAzureStorage,The length of the statement  "				MessageBox.Show ("Asset cannot be exported as it is not in the default storage acount. Feature not implemented yet."' "Asset storage"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 185.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoExportAssetToAzureStorage,The length of the statement  "				MessageBox.Show ("Asset cannot be exported as it is storage encrypted."' "Asset encrypted"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoWatchFolder,The length of the statement  "                        CloudStorageAccount cloudStorageAccount = new CloudStorageAccount(new StorageCredentials(_context.DefaultStorageAccount.Name' _credentials.StorageKey)' _credentials.ReturnStorageSuffix()' true);" is 194.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoWatchFolder,The length of the statement  "                           the renaming of files or directories. */MyWatchFolderSettings.Watcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName; " is 161.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,WaitForCreatingProcessToCloseFileThenDoStuff,The length of the statement  "				var response = DoGridTransferAddItem (string.Format ("Watch folder: upload of file '{0}'"' Path.GetFileName (path))' TransferType.UploadFromFile' true); " is 152.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,WaitForCreatingProcessToCloseFileThenDoStuff,The length of the statement  "				}' response.Id' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None' response.token' MyWatchFolderSettings)' response.token); " is 190.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref publishToolStripMenuItem' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabAssets) || (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabLive)))); " is 222.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref processToolStripMenuItem' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabAssets))); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref assetToolStripMenuItem' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabAssets))); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref contextMenuStripAssets' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabAssets))); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref filterToolStripMenuItem' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabFilters))); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref contextMenuStripFilters' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabFilters))); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref encodingToolStripMenuItem' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabJobs))); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref contextMenuStripJobs' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabJobs))); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref transferToolStripMenuItem' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabTransfers))); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref contextMenuStripTransfers' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabTransfers))); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref originToolStripMenuItem' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabOrigins))); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref contextMenuStripStreaminEndpoints' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabOrigins))); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref liveChannelToolStripMenuItem' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabLive))); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref contextMenuStripChannels' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabLive))); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "	EnableChildItems (ref contextMenuStripPrograms' (tabcontrol.SelectedTab.Text.StartsWith (AMSExplorer.Properties.Resources.TabLive))); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "		processAssetsWithAzureMediaOCRToolStripMenuItem.Enabled = processAssetsWithAzureMediaVideoOCRToolStripMenuItem.Enabled = false; " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "		processAssetsWithAzureMediaContentModeratorToolStripMenuItem1.Enabled = processAssetsWithAzureMediaContentModeratorToolStripMenuItem.Enabled = false; " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabControlMain_Selected,The length of the statement  "		processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem.Enabled = processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem1.Enabled = false; " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,buttonbuildchart_Click,The length of the statement  "	IEnumerable<IJob> jobs = _context.Jobs.Where (j => j.LastModified >= dateTimePickerStartDate.Value && j.LastModified <= dateTimePickerEndDate.Value); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,buttonbuildchart_Click,The length of the statement  "	var queryerror = jobs.Where (j => j.State == JobState.Error).GroupBy (j => ((DateTime)j.Created).Date).Select (j => new { " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,buttonbuildchart_Click,The length of the statement  "	var querycancel = jobs.Where (j => j.State == JobState.Canceled).GroupBy (j => ((DateTime)j.Created).Date).Select (j => new { " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,buttonbuildchart_Click,The length of the statement  "	var querysuccess = jobs.Where (j => j.State == JobState.Finished).GroupBy (j => ((DateTime)j.Created).Date).Select (j => new { " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridChannelV,The length of the statement  "	tabPageLive.Invoke (new Action (() => tabPageLive.Text = string.Format (AMSExplorer.Properties.Resources.TabLive + " ({0}/{1})"' dataGridViewChannelsV.DisplayedCount' count))); " is 176.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridChannelV,The length of the statement  "	labelChannels.Invoke (new Action (() => labelChannels.Text = string.Format (AMSExplorer.Properties.Resources.LabelChannel + " ({0}/{1})"' dataGridViewChannelsV.DisplayedCount' count))); " is 185.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProgramV,The length of the statement  "	labelPrograms.Invoke (new Action (() => labelPrograms.Text = string.Format (AMSExplorer.Properties.Resources.LabelProgram + " ({0}/{1})"' dataGridViewProgramsV.DisplayedCount' _context.Programs.Count ()))); " is 206.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStreamingEndpointV,The length of the statement  "	dataGridViewStreamingEndpointsV.Invoke (new Action (() => dataGridViewStreamingEndpointsV.RefreshStreamingEndpoints (_context))); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStreamingEndpointV,The length of the statement  "	tabPageAssets.Invoke (new Action (() => tabPageOrigins.Text = string.Format (AMSExplorer.Properties.Resources.TabOrigins + " ({0})"' dataGridViewStreamingEndpointsV.DisplayedCount))); " is 183.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The length of the statement  "	List<IMediaProcessor> Procs = _context.MediaProcessors.ToList ().OrderBy (p => p.Vendor).ThenBy (p => p.Name).ThenBy (p => new Version (p.Version)).ToList (); " is 158.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The length of the statement  "			comboBoxEncodingRU.Items.Add (new Item (Program.ReturnMediaReservedUnitName ((ReservedUnitType)unit)' unit.ToString ())); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The length of the statement  "			toolStripStatusLabelEncRU.Text = string.Format ("{0} {1} Media Reserved Unit{2}"' _context.EncodingReservedUnits.FirstOrDefault ().CurrentReservedUnits' Program.ReturnMediaReservedUnitName (_context.EncodingReservedUnits.FirstOrDefault ().ReservedUnitType)' s); " is 261.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The length of the statement  "	List<IStorageAccount> Storages = _context.StorageAccounts.ToList ().OrderByDescending (p => p.IsDefault).ThenBy (p => p.Name).ToList (); " is 136.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The length of the statement  "		int rowi = dataGridViewStorage.Rows.Add (storage.Name + (string)((storage.IsDefault) ? " (default)" : string.Empty)' displaycapacity ? AssetInfo.FormatByteSize (storage.BytesUsed) : "(are the metrics enabled ?)"' storage.Name' displaycapacity ? capacityPercentageFullTmp : null); " is 279.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The length of the statement  "			dataGridViewStorage.Rows [rowi].Cells [1].ToolTipText = "Storage Account Metrics are not enabled or no data is available"; " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The length of the statement  "	tabPageFilters.Text = string.Format (AMSExplorer.Properties.Resources.TabFilters + " ({0})"' _context.Filters.Count ()); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ReturnSelectedChannels,The length of the statement  "		var channel = _context.Channels.Where (j => j.Id == Row.Cells [dataGridViewChannelsV.Columns ["Id"].Index].Value.ToString ()).FirstOrDefault (); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ReturnSelectedStreamingEndpoints,The length of the statement  "		var se = _context.StreamingEndpoints.Where (j => j.Id == Row.Cells [dataGridViewStreamingEndpointsV.Columns ["Id"].Index].Value.ToString ()).FirstOrDefault (); " is 159.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ReturnSelectedPrograms,The length of the statement  "		var program = _context.Programs.Where (j => j.Id == Row.Cells [dataGridViewProgramsV.Columns ["Id"].Index].Value.ToString ()).FirstOrDefault (); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStopChannels,The length of the statement  "	var programquery = _context.Programs.AsEnumerable ().Where (p => ListChannelIDs.Contains (p.ChannelId) && p.State != ProgramState.Stopped); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStopChannels,The length of the statement  "	if (programquery.Where (p => p.State == ProgramState.Starting || p.State == ProgramState.Stopping).Count () > 0)// programs are starting or stopping " is 148.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStopChannels,The length of the statement  "		MessageBox.Show ("Some programs are starting or stopping. Channel(s) cannot be stopped now."' "Channel(s) stop"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 163.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStopChannels,The length of the statement  "			if (MessageBox.Show ("One or several programs are running. Do you want to stop the program(s) and then the channel(s) ?"' "Channel stop"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 210.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStopChannels,The length of the statement  "			string question = (channels.Count == 1) ? string.Format ("Stop channel '{0}' ?"' channels [0].Name) : string.Format ("Stop these {0} channels ?"' channels.Count); " is 162.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStopChannels,The length of the statement  "			if (System.Windows.Forms.MessageBox.Show (question' "Channel stop"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,StartChannelAsync,The length of the statement  "	return await ChannelInfo.ChannelExecuteOperationAsync (myC.SendStartOperationAsync' myC' "started"' _context' this' dataGridViewChannelsV); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,StopChannelAsync,The length of the statement  "	return await ChannelInfo.ChannelExecuteOperationAsync (myC.SendStopOperationAsync' myC' "stopped"' _context' this' dataGridViewChannelsV); " is 138.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ResetChannelAsync,The length of the statement  "	return await ChannelInfo.ChannelExecuteOperationAsync (myC.SendResetOperationAsync' myC' "reset"' _context' this' dataGridViewChannelsV); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DeleteChannelAsync,The length of the statement  "	return await ChannelInfo.ChannelExecuteOperationAsync (myC.SendDeleteOperationAsync' myC' "deleted"' _context' this' dataGridViewChannelsV); " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,RestoreChannelsAndProgramsStatusMonitoring,The length of the statement  "	var ProgramsToMonitor = _context.Programs.ToList ().Where (p => p.State == ProgramState.Starting || p.State == ProgramState.Stopping).ToList (); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,MonitorChannel,The length of the statement  "	if (channel.State == ChannelState.Deleting || channel.State == ChannelState.Starting || channel.State == ChannelState.Stopping) { " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ScaleStreamingEndpoint,The length of the statement  "			dataGridViewStreamingEndpointsV.BeginInvoke (new Action (() => dataGridViewStreamingEndpointsV.RefreshStreamingEndpoint (myO))' null); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ScaleStreamingEndpoint,The length of the statement  "			TextBoxLogWriteLine ("Streaming endpoint '{0}' : Error when scaling. {1}"' myO.Name' Program.GetErrorMessage (ex)' true); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProgramExecuteOperationAsync,The length of the statement  "			TextBoxLogWriteLine ("Program '{0}' : NOT {1}. (Error {2})"' program.Name' strStatusSuccess' operation.ErrorCode' true); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProgramExecuteOperationAsync,The length of the statement  "		TextBoxLogWriteLine ("Program '{0}' : Error {1}"' program != null ? program.Name : "<unknown>"' Program.GetErrorMessage (ex)' true); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,StreamingEndpointExecuteOperationAsync,The length of the statement  "				dataGridViewStreamingEndpointsV.BeginInvoke (new Action (() => dataGridViewStreamingEndpointsV.RefreshStreamingEndpoint (myOR))' null); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,StreamingEndpointExecuteOperationAsync,The length of the statement  "			TextBoxLogWriteLine ("Streaming endpoint '{0}' : NOT {1}. (Error {2})"' myO.Name' strStatusSuccess' operation.ErrorCode' true); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,StreamingEndpointExecuteOperationAsync,The length of the statement  "		dataGridViewStreamingEndpointsV.BeginInvoke (new Action (() => dataGridViewStreamingEndpointsV.RefreshStreamingEndpoint (myO))' null); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,IObjectExecuteOperationAsync,The length of the statement  "			TextBoxLogWriteLine ("{0} '{1}' : NOT {2}. (Error {3})"' objectlogname' objectname' strStatusSuccess' operation.ErrorCode' true); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteChannels,The length of the statement  "		List<IProgram> Programs = _context.Programs.AsEnumerable ().Where (p => ChannelSourceIDs.Contains (p.ChannelId)).ToList (); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteChannels,The length of the statement  "			string question = (SelectedChannels.Count == 1) ? "Delete channel " + SelectedChannels [0].Name + " ?" : "Delete these " + SelectedChannels.Count + " channels ?"; " is 162.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteChannels,The length of the statement  "			if (System.Windows.Forms.MessageBox.Show (question' "C" + hannelstr + " deletion"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 197.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteChannels,The length of the statement  "			string question = (Programs.Count == 1) ? string.Format ("There is one program associated to the c{0}.\nDelete the c{0} and program '{1}' ?"' hannelstr' Programs [0].Name) : string.Format ("There are {0} programs associated to the c{1}.\nDelete the c{1} and these programs ?"' Programs.Count' hannelstr); " is 304.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewLiveV_CellFormatting,The length of the statement  "	var cellchannelstatevalue = dataGridViewChannelsV.Rows [e.RowIndex].Cells [dataGridViewChannelsV.Columns ["State"].Index].Value; " is 128.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetChannels,The length of the statement  "	var programquery = _context.Programs.AsEnumerable ().Where (p => ListChannelIDs.Contains (p.ChannelId) && p.State != ProgramState.Stopped); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetChannels,The length of the statement  "		MessageBox.Show ("Some programs are starting or stopping. Channel(s) cannot be reset now."' "Channel(s) stop"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 161.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetChannels,The length of the statement  "			if (MessageBox.Show ("One or several programs are running which prevents the channel(s) reset. Do you want to stop the program(s) and then reset the channel(s) ?"' "Channel reset"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 253.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetChannels,The length of the statement  "					var tasks = programqueryrunning.Select (p => ProgramExecuteOperationAsync (p.SendStopOperationAsync' p' "stopped")).ToArray (); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetChannels,The length of the statement  "			string question = (channels.Count == 1) ? string.Format ("Reset channel '{0}' ?"' channels [0].Name) : string.Format ("Reset these {0} channels ?"' channels.Count); " is 164.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetChannels,The length of the statement  "			if (System.Windows.Forms.MessageBox.Show (question' "Channel reset"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 183.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateChannel,The length of the statement  "			await Task.Run (() => IObjectExecuteOperationAsync (() => _context.Channels.SendCreateOperationAsync (options)' form.ChannelName' "Channel"' "created"' _context)); " is 163.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayChannelInfo,The length of the statement  "					if (channel.EncodingType != ChannelEncodingType.None && channel.Encoding != null && channel.State == ChannelState.Stopped) { " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayChannelInfo,The length of the statement  "				await Task.Run (() => ChannelInfo.ChannelExecuteOperationAsync (channel.SendUpdateOperationAsync' channel' "updated"' _context' this' dataGridViewChannelsV)); " is 158.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeletePrograms,The length of the statement  "			string question = (SelectedPrograms.Count == 1) ? "Delete program " + SelectedPrograms [0].Name + " ?" : "Delete these " + SelectedPrograms.Count + " programs ?"; " is 162.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStopPrograms,The length of the statement  "		string question = (SelectedPrograms.Count == 1) ? string.Format ("Stop program '{0}' ?"' SelectedPrograms [0].Name) : string.Format ("Stop these {0} programs ?"' SelectedPrograms.Count); " is 186.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStopPrograms,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (question' "Program stop"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CreateLiveAssetWithOptionalpecifiedLocatorID,The length of the statement  "	if (setupdynamicencryption)// user want to enable Dynamic Encryption on the program's asset. We must do it before locator creation " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CreateLiveAssetWithOptionalpecifiedLocatorID,The length of the statement  "		// if user want to create a locator' force locator and setup dyn encryption' that means he wants to replicate the program from another dc' and so must provide the content key to have a mirror stream  " is 198.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CreateLiveAssetWithOptionalpecifiedLocatorID,The length of the statement  "				IAccessPolicy policy = _context.AccessPolicies.Create ("AP:" + assetName' TimeSpan.FromDays (Properties.Settings.Default.DefaultLocatorDurationDaysNew)' AccessPermissions.Read); " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CreateLiveAssetWithOptionalpecifiedLocatorID,The length of the statement  "				if (StreamingEndpointInformation.ReturnTypeSE (AssetInfo.GetBestStreamingEndpoint (_context)) == StreamingEndpointInformation.StreamEndpointType.Classic) { " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CreateLiveAssetWithOptionalpecifiedLocatorID,The length of the statement  "					TextBoxLogWriteLine ("There is no running Standard or Premium streaming endpoint. The locator on the program will not work."' true); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateProgram,The length of the statement  "			ProposeScaleUnit = _context.StreamingEndpoints.AsEnumerable ().All (o => StreamingEndpointInformation.ReturnTypeSE (o) == StreamingEndpointInformation.StreamEndpointType.Classic) " is 178.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateProgram,The length of the statement  "			string assetname = form.AssetName.Replace (Constants.NameconvProgram' form.ProgramName).Replace (Constants.NameconvChannel' form.ChannelName); " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateProgram,The length of the statement  "			if (form.IsReplica)// special case. We want to create a program with a specific manifest name' locator GUID and encryption key " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateProgram,The length of the statement  "				NewAsset = CreateLiveAssetWithOptionalpecifiedLocatorID (assetname' form.StorageSelected' true' form.EnableDynEnc' form.ReplicaLocatorID); " is 138.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateProgram,The length of the statement  "				NewAsset = CreateLiveAssetWithOptionalpecifiedLocatorID (assetname' form.StorageSelected' form.CreateLocator' form.EnableDynEnc); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateProgram,The length of the statement  "						IProgram program = _context.Programs.Where (p => p.Name == form.ProgramName && p.ChannelId == channel.Id).FirstOrDefault (); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewProgramV_CellFormatting,The length of the statement  "	var cellprogramstatevalue = dataGridViewProgramsV.Rows [e.RowIndex].Cells [dataGridViewProgramsV.Columns ["State"].Index].Value; " is 128.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The length of the statement  "	string taskname = "Media Encoder Standard Thumbnails generation from " + Constants.NameconvInputasset + " with " + Constants.NameconvEncodername; " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The length of the statement  "	EncodingMES form = new EncodingMES (_context' new List<IAsset> ()' processor.Version' ThumbnailsModeOnly: true' main: this) { " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The length of the statement  "		EncodingLabel = (SelectedAssets.Count > 1) ? string.Format ("{0} asset{1} selected. You are going to submit {0} job{1} with 1 task."' SelectedAssets.Count' Program.ReturnS (SelectedAssets.Count)' SelectedAssets.Count) : "Asset '" + SelectedAssets.FirstOrDefault ().Name + "' will be encoded (1 job with 1 task)."' " is 313.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The length of the statement  "			string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version); " is 164.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The length of the statement  "			ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The length of the statement  "			AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption); " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The length of the statement  "					MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 230.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewOriginsV_CellFormatting,The length of the statement  "	var cellSEstatevalue = dataGridViewStreamingEndpointsV.Rows [e.RowIndex].Cells [dataGridViewStreamingEndpointsV.Columns ["State"].Index].Value; " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayStreamingEndpointInfo,The length of the statement  "				} else if (new Version (streamingendpoint.StreamingEndpointVersion) == new Version ("2.0") && form.GetScaleUnits == 0) { " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayStreamingEndpointInfo,The length of the statement  "					await StreamingEndpointExecuteOperationAsync (streamingendpoint.SendUpdateOperationAsync' streamingendpoint' "updated"); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDisplayStreamingEndpointInfo,The length of the statement  "					await StreamingEndpointExecuteOperationAsync (streamingendpoint.SendUpdateOperationAsync' streamingendpoint' "updated"); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteStreamingEndpoints,The length of the statement  "		string question = (SelectedOrigins.Count == 1) ? "Delete streaming endpoint " + SelectedOrigins [0].Name + " ?" : "Delete these " + SelectedOrigins.Count + " streaming endpoints ?"; " is 181.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteStreamingEndpoints,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (question' "Streaming endpoint(s) deletion"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 200.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateStreamingEndpoint,The length of the statement  "		await Task.Run (() => IObjectExecuteOperationAsync (() => _context.StreamingEndpoints.SendCreateOperationAsync (options)' form.StreamingEndpointName' "Streaming Endpoint"' "created"' _context)); " is 194.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewLiveV_CellDoubleClick,The length of the statement  "		IChannel channel = GetChannel (dataGridViewChannelsV.Rows [e.RowIndex].Cells [dataGridViewChannelsV.Columns ["Id"].Index].Value.ToString ()); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewProgramV_CellDoubleClick,The length of the statement  "		IProgram program = GetProgram (dataGridViewProgramsV.Rows [e.RowIndex].Cells [dataGridViewProgramsV.Columns ["Id"].Index].Value.ToString ()); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewOriginsV_CellDoubleClick,The length of the statement  "		IStreamingEndpoint se = GetStreamingEndpoint (dataGridViewStreamingEndpointsV.Rows [e.RowIndex].Cells [dataGridViewStreamingEndpointsV.Columns ["Id"].Index].Value.ToString ()); " is 176.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoPlaybackChannelPreview,The length of the statement  "				AssetInfo.DoPlayBackWithStreamingEndpoint (typeplayer: ptype' Urlstr: channel.Preview.Endpoints.FirstOrDefault ().Url.AbsoluteUri' DoNotRewriteURL: true' context: _context' formatamp: AzureMediaPlayerFormats.Smooth' UISelectSEFiltersAndProtocols: false' mainForm: this' selectedBrowser: Constants.BrowserIE [1]' launchbrowser: true); " is 333.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoBatchUpload,The length of the statement  "		BatchUploadFrame2 form2 = new BatchUploadFrame2 (form.BatchFolder' form.BatchProcessFiles' form.BatchProcessSubFolders' _context) { " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoBatchUpload,The length of the statement  "					var response = DoGridTransferAddItem (string.Format ("Upload of folder '{0}'"' Path.GetFileName (folder))' TransferType.UploadFromFolder' true); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoBatchUpload,The length of the statement  "					var myTask = Task.Factory.StartNew (() => ProcessUploadFromFolder (folder' response.Id' form.EncryptionOption' response.token' form2.StorageSelected)' response.token); " is 167.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoBatchUpload,The length of the statement  "					var response = DoGridTransferAddItem ("Upload of file '" + Path.GetFileName (file) + "'"' TransferType.UploadFromFile' true); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoBatchUpload,The length of the statement  "					}' response.Id' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None' response.token' null' form2.StorageSelected)' response.token); " is 196.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "		if (MessageBox.Show ("Some selected asset(s) are published.\nYou need to unpublish them before doing any dynamic encryption change.\n\nOk to unpublish (delete locators) ?"' "Published assets"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 265.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "			AddDynamicEncryptionFrame2_CENCKeyConfig form2_CENC = new AddDynamicEncryptionFrame2_CENCKeyConfig (forceusertoprovidekey) { " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "				var form3_CENC = new AddDynamicEncryptionFrame3_CENCDelivery (_context' form1.PlayReadyPackaging' form1.WidevinePackaging); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "				AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "				if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) { " is 178.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "							AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "PlayReady"' tokensymmetrickey' false) { " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "								AddDynamicEncryptionFrame5_PlayReadyLicense form5_PlayReadyLicense = new AddDynamicEncryptionFrame5_PlayReadyLicense (step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady - 1)) { " is 202.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "								if (NeedToDisplayPlayReadyLicense)// it's a PlayReady license and user wants to deliver the license from Azure Media Services " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "									string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : ""; " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "									form5_PlayReadyLicense.PlayReadOptionName = string.Format ("{0}{1} PlayReady Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "									if (form5_PlayReadyLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "							AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "Widevine"' tokensymmetrickey' false) { " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "								AddDynamicEncryptionFrame6_WidevineLicense form6_WidevineLicense = new AddDynamicEncryptionFrame6_WidevineLicense (Constants.TemporaryWidevineLicenseServer' step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine - 1)) { " is 240.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "								string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : ""; " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "								form6_WidevineLicense.WidevinePolicyName = string.Format ("{0}{1} Widevine Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1); " is 147.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "								if (form6_WidevineLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "						DoDynamicEncryptionAndKeyDeliveryWithCENC (SelectedAssets' form1' form2_CENC' form3_ExistingPolicies' form3_CENC' form4list' form5list' form6list' true); " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "				AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "				if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) { " is 178.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "							AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "FairPlay"' tokensymmetrickey' false) { " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "						DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs (SelectedAssets' form1' form2_CENC_Cbcs' form3_ExistingPolicies' form3_CENC' form4list' true); " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "			AddDynamicEncryptionFrame2_AESKeyConfig form2_AES = new AddDynamicEncryptionFrame2_AESKeyConfig (forceusertoprovidekey) { " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "				AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "				if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_AES.ShowDialog () == DialogResult.OK)) { " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The length of the statement  "							AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) { " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "		formerkey = SelectedAssets.FirstOrDefault ().GetMediaContext ().ContentKeys.Where (c => c.Id == Constants.ContentKeyIdPrefix + form2_CENC.KeyId.ToString ()).FirstOrDefault (); " is 175.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "			if (DisplayUI && MessageBox.Show ("A Content key with the same Key Id exists already in the account.\nDo you want to try to replace it?\n(If not' the existing key will be used)"' "Content key Id"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 269.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "				//    if ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 && form2_CENC.ContentKeyRandomGeneration) " is 174.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "				//// Azure will deliver the PR or WV license and user wants to auto generate the key' so we can create a key with a random content key " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "				if (!reusekey && ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 && form2_CENC.ContentKeyRandomGeneration))// Azure will deliver the PR or WV license or user wants to auto generate the key' so we can create a key with a random content key " is 314.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "				} else// user wants to deliver with an external PlayReady or Widevine server or want to provide the key' so let's create the key based on what the user input " is 157.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "							byte[] bytecontentkey = CommonEncryption.GeneratePlayReadyContentKey (Convert.FromBase64String (form2_CENC.KeySeed)' keyid); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "								contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "							byte[] bytecontentkey = (string.IsNullOrWhiteSpace (form2_CENC.CENCContentKey)) ? DynamicEncryption.GetRandomBuffer (16) : Convert.FromBase64String (form2_CENC.CENCContentKey); " is 176.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "								contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "			if ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 // PlayReady/Widevine license and delivery from Azure Media Services " is 195.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "			&& (!ManualForceKeyData || (ManualForceKeyData && contentKeyAuthorizationPolicy == null))// If the user want to reuse the key' then no need to recreate the Aut Policy if already created " is 185.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "						TextBoxLogWriteLine ("Attached authorization policy to key '{0}' for asset '{1}'."' contentKey.Id' AssetToProcess.Name); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "						TextBoxLogWriteLine ("There is a proble when attaching authorization policy to key '{0}' for asset '{1}'."' contentKey.Id' AssetToProcess.Name' true); " is 150.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "				} else if (!form1.SelectExistingPolicies)// authorization policy to create (policy==null and user did not select the option to choose an existing policy) " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "							WidevineLicenseDeliveryConfig = form6WidevineLicenseList [form4list.IndexOf (form4) - form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady].GetWidevineConfiguration (contentKey.GetKeyDeliveryUrl (ContentKeyDeliveryType.Widevine).ToString ()); " is 247.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "							WidevineLicenseOptionName = form6WidevineLicenseList [form4list.IndexOf (form4) - form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady].WidevinePolicyName; " is 160.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "										policyOption = DynamicEncryption.AddOpenAuthorizationPolicyOption (PlayReadyLicenseOptionName' contentKey' ContentKeyDeliveryType.PlayReadyLicense' PlayReadyLicenseDeliveryConfig' _context); " is 190.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "										policyOption = DynamicEncryption.AddOpenAuthorizationPolicyOption (WidevineLicenseOptionName' contentKey' ContentKeyDeliveryType.Widevine' WidevineLicenseDeliveryConfig' _context); " is 180.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "										policyOption = DynamicEncryption.AddTokenRestrictedAuthorizationPolicyCENC (PlayReadyLicenseOptionName' ContentKeyDeliveryType.PlayReadyLicense' contentKey' form4.GetAudience' form4.GetIssuer' form4.GetTokenRequiredClaims' form4.AddContentKeyIdentifierClaim' form4.GetTokenType' form4.GetDetailedTokenType' mytokenverifkey' _context' PlayReadyLicenseDeliveryConfig' OpenIdDoc); " is 377.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "										policyOption = DynamicEncryption.AddTokenRestrictedAuthorizationPolicyCENC (WidevineLicenseOptionName' ContentKeyDeliveryType.Widevine' contentKey' form4.GetAudience' form4.GetIssuer' form4.GetTokenRequiredClaims' form4.AddContentKeyIdentifierClaim' form4.GetTokenType' form4.GetDetailedTokenType' mytokenverifkey' _context' WidevineLicenseDeliveryConfig' OpenIdDoc); " is 367.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "										DynamicEncryption.TokenResult testToken = DynamicEncryption.GetTestToken (AssetToProcess' _context' form1.GetContentKeyType' signingcred' policyOption.Id); " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "										TextBoxLogWriteLine ("The authorization test token for option #{0} ({1} with Bearer) is:\n{2}"' form4list.IndexOf (form4)' form4.GetTokenType.ToString ()' Constants.Bearer + testToken.TokenString); " is 197.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "								TextBoxLogWriteLine ("There is a problem when creating the authorization policy for '{0}'."' AssetToProcess.Name' true); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "						TextBoxLogWriteLine ("Attached asset delivery policy '{0}' to asset '{1}'."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name); " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "				} else if (!form1.SelectExistingPolicies)// delivery policy to create (policy==null and user did not select the option to choose an existing policy) " is 148.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "					string name = string.Format ("AssetDeliveryPolicy {0} ({1})"' form1.GetContentKeyType.ToString ()' assetDeliveryProtocol.ToString ()); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "						DelPol = DynamicEncryption.CreateAssetDeliveryPolicyCENC (AssetToProcess' contentKey' form1' name' _context' playreadyAcquisitionUrl: form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0 ? null : form3_CENC.PlayReadyLAurl' playreadyEncodeLAURLForSilverlight: form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0 ? false : form3_CENC.PlayReadyLAurlEncodeForSL' widevineAcquisitionUrl: form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0 ? null : form3_CENC.WidevineLAurl' widevineAcquisitionURLFinal: form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0 ? false : form3_CENC.WidevineFinalLAurl); " is 629.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The length of the statement  "						TextBoxLogWriteLine ("Created asset delivery policy '{0}' for asset '{1}'."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name); " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "	formerkey = SelectedAssets.FirstOrDefault ().GetMediaContext ().ContentKeys.Where (c => c.Id == Constants.ContentKeyIdPrefix + form2_CENC_cbcs.KeyId.ToString ()).FirstOrDefault (); " is 180.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "			message = "A Content key with the same Key Id exists already in the account but it is not a FairPlay cbcs key.\nDo you want to try to replace it?\n(If not' the existing key will be used which is not going to work)"; " is 215.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "			TextBoxLogWriteLine ("A Content key with the same Key Id exists already in the account but it is not a FairPlay cbcs key."); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "			message = "A FairPlay cbcs content key with the same Key Id exists already in the account.\nDo you want to try to replace it?\n(If not' the existing key will be used)"; " is 168.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "		if (DisplayUI && MessageBox.Show (message' "Content key Id"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "			contentKey = DynamicEncryption.CreateCommonTypeContentKey (_context' form2_CENC_cbcs.KeyId' form2_CENC_cbcs.FairPlayContentKey' ContentKeyType.CommonEncryptionCbcs); " is 165.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "				TextBoxLogWriteLine ("Existing FairPlay cbcs key '{0}' will be used for asset '{1}'. It is recommended to delete the key before to create a new authorization policy"' currentAssetKey.Id' AssetToProcess.Name' true); " is 214.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "			if (form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay > 0 // FairPlay license and delivery from Azure Media Services " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "			&& (currentAssetKey.AuthorizationPolicyId == null/*contentKeyAuthorizationPolicy == null*/)// If the user want to reuse the key' then no need to recreate the Aut Policy if already created " is 187.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "						TextBoxLogWriteLine ("Attached authorization policy to key '{0}' for asset '{1}'."' currentAssetKey.Id' AssetToProcess.Name); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "						TextBoxLogWriteLine ("There is a proble when attaching authorization policy to key '{0}' for asset '{1}'."' currentAssetKey.Id' AssetToProcess.Name' true); " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "				} else if (!form1.SelectExistingPolicies)// authorization policy to create (policy==null and user did not select the option to choose an existing policy) " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "					string FairPlayLicenseDeliveryConfig = DynamicEncryption.ConfigureFairPlayPolicyOptions (_context' form3_CENC.FairPlayASK' form3_CENC.FairPlayIV' form3_CENC.FairPlayCertificate); " is 178.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "							string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : ""; " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "							string FairPlayPolicyName = string.Format ("{0}{1} FairPlay Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' form4list.IndexOf (form4) + 1); " is 156.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "								policyOption = DynamicEncryption.AddOpenAuthorizationPolicyOption (FairPlayPolicyName' currentAssetKey' ContentKeyDeliveryType.FairPlay' FairPlayLicenseDeliveryConfig' _context); " is 178.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "								policyOption = DynamicEncryption.AddTokenRestrictedAuthorizationPolicyCENC (FairPlayPolicyName' ContentKeyDeliveryType.FairPlay' currentAssetKey' form4.GetAudience' form4.GetIssuer' form4.GetTokenRequiredClaims' form4.AddContentKeyIdentifierClaim' form4.GetTokenType' form4.GetDetailedTokenType' mytokenverifkey' _context' FairPlayLicenseDeliveryConfig' OpenIdDoc); " is 365.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "									DynamicEncryption.TokenResult testToken = DynamicEncryption.GetTestToken (AssetToProcess' _context' form1.GetContentKeyType' signingcred' policyOption.Id); " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "									TextBoxLogWriteLine ("The authorization test token for option #{0} ({1} with Bearer) is:\n{2}"' form4list.IndexOf (form4)' form4.GetTokenType.ToString ()' Constants.Bearer + testToken.TokenString); " is 197.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "							TextBoxLogWriteLine ("There is a problem when creating the authorization policy for key '{0}'."' currentAssetKey.Id' true); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "						TextBoxLogWriteLine ("Attached asset delivery policy '{0}' to asset '{1}'."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name); " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "				} else if (!form1.SelectExistingPolicies)// delivery policy to create (policy==null and user did not select the option to choose an existing policy) " is 148.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "					string name = string.Format ("AssetDeliveryPolicy {0} ({1})"' form1.GetContentKeyType.ToString ()' assetDeliveryProtocol.ToString ()); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "						DelPol = DynamicEncryption.CreateAssetDeliveryPolicyCENC (AssetToProcess' currentAssetKey' form1' name' _context' fairplayAcquisitionUrl: form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay > 0 ? null : form3_CENC.FairPlayLAurl' fairplayAcquisitionURLFinal: form3_CENC.FairPlayFinalLAurl' iv_if_externalserver: myIV' UseSKDForAMSLAURL: form3_CENC.AMSLAURLSchemeSKD); " is 371.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The length of the statement  "						TextBoxLogWriteLine ("Created asset delivery policy '{0}' for asset '{1}'."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name); " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "	if (!form2.ContentKeyRandomGeneration && (form2.AESKeyId != null))// user want to manually enter the cryptography data and key if providedd  " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "		formerkey = SelectedAssets.FirstOrDefault ().GetMediaContext ().ContentKeys.Where (c => c.Id == Constants.ContentKeyIdPrefix + form2.AESKeyId.ToString ()).FirstOrDefault (); " is 173.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "			if (DisplayUI && MessageBox.Show ("A Content key with the same Key Id exists already in the account.\nDo you want to try to replace it?\n(If not' the existing key will be used)"' "Content key Id"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 269.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "				if (form3_AES.GetNumberOfAuthorizationPolicyOptions > 0 && (form2.ContentKeyRandomGeneration))// Azure will deliver the license and user want to auto generate the key' so we can create a key with a random content key " is 216.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "				} else// user wants to deliver with an external key server or want to provide some cryptography' so let's create the key based on what the user input " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "							if ((!form2.ContentKeyRandomGeneration) && !string.IsNullOrEmpty (aeskey))// user provides custom crypto (key' or key id) " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "								contentKey = DynamicEncryption.CreateEnvelopeTypeContentKey (AssetToProcess' Convert.FromBase64String (aeskey)' form2.AESKeyId); " is 128.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "			} else if (form3_AES.GetNumberOfAuthorizationPolicyOptions == 0)// user wants to deliver with an external key server but the key exists already ! " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "				TextBoxLogWriteLine ("Warning for asset '{0}'. A AES key already exists. You need to make sure that your external key server can deliver the key for this asset."' AssetToProcess.Name' true); " is 190.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "			if (form3_AES.GetNumberOfAuthorizationPolicyOptions > 0 && (!ManualForceKeyData || (ManualForceKeyData && contentKeyAuthorizationPolicy == null))// If the user want to reuse the key' then no need to recreate the Aut Policy if already created " is 241.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "						TextBoxLogWriteLine ("Attached authorization policy to key '{0}' for asset '{1}'."' contentKey.Id' AssetToProcess.Name); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "						TextBoxLogWriteLine ("There is a proble when attaching authorization policy to key '{0}' for asset '{1}'."' contentKey.Id' AssetToProcess.Name' true); " is 150.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "				} else if (!form1.SelectExistingPolicies)// authorization policy to create (policy==null and user did not select the option to choose an existing policy) " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "								policyOption = DynamicEncryption.AddOpenAuthorizationPolicyOption ("Open Mode AES"' contentKey' ContentKeyDeliveryType.BaselineHttp' null' _context); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "								policyOption = DynamicEncryption.AddTokenRestrictedAuthorizationPolicyAES (contentKey' form3.GetAudience' form3.GetIssuer' form3.GetTokenRequiredClaims' form3.AddContentKeyIdentifierClaim' form3.GetTokenType' form3.GetDetailedTokenType' mytokenverifkey' _context' OpenIdDoc); " is 275.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "									DynamicEncryption.TokenResult testToken = DynamicEncryption.GetTestToken (AssetToProcess' _context' form1.GetContentKeyType' signingcred' policyOption.Id); " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "									TextBoxLogWriteLine ("The authorization test token for option #{0} ({1} with Bearer) is:\n{2}"' form4list.IndexOf (form3)' form3.GetTokenType.ToString ()' Constants.Bearer + testToken.TokenString); " is 197.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "							TextBoxLogWriteLine ("There is a problem when creating the authorization policy for '{0}'."' AssetToProcess.Name' true); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "					TextBoxLogWriteLine ("Attached asset delivery policy '{0}' to asset '{1}'."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name); " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "			} else if (!form1.SelectExistingPolicies)// delivery policy to create (policy==null and user did not select the option to choose an existing policy) " is 148.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "				string name = string.Format ("AssetDeliveryPolicy {0} ({1})"' form1.GetContentKeyType.ToString ()' form1.GetAssetDeliveryProtocol.ToString ()); " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "					DelPol = DynamicEncryption.CreateAssetDeliveryPolicyAES (AssetToProcess' contentKey' form1.GetAssetDeliveryProtocol' name' _context' aeslaurl' aesFinalUrl); " is 156.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The length of the statement  "					TextBoxLogWriteLine ("Created asset delivery policy {0} for asset {1}."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddDynDecryption,The length of the statement  "			var DelPols = _context.AssetDeliveryPolicies.Where (p => (p.AssetDeliveryProtocol == form1.GetAssetDeliveryProtocol) && (p.AssetDeliveryPolicyType == AssetDeliveryPolicyType.NoDynamicEncryption)); " is 196.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddDynDecryption,The length of the statement  "					DelPol = DynamicEncryption.CreateAssetDeliveryPolicyNoDynEnc (AssetToProcess' form1.GetAssetDeliveryProtocol' _context); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddDynDecryption,The length of the statement  "					TextBoxLogWriteLine ("Created asset delivery policy {0} for asset {1}."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddDynDecryption,The length of the statement  "					TextBoxLogWriteLine ("Binded existing asset delivery policy {0} for asset {1}."' DelPols.FirstOrDefault ().Id' AssetToProcess.Name); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddDynDecryption,The length of the statement  "					TextBoxLogWriteLine ("There is a problem when using the delivery policy {0} for '{1}'."' DelPols.FirstOrDefault ().Id' AssetToProcess.Name' true); " is 146.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveDynEnc,The length of the statement  "		labelAssetName = string.Format ("Locators' dynamic encryption policies and key authorization policies will be removed for asset '{0}'."' SelectedAssets.FirstOrDefault ().Name); " is 176.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveDynEnc,The length of the statement  "			labelAssetName = string.Format ("Locators' dynamic encryption policies and key authorization policies will removed for these {0} selected assets."' SelectedAssets.Count.ToString ()); " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveDynEnc,The length of the statement  "						var tasks = _context.Locators.Where (c => c.AssetId == AssetToProcess.Id && c.Type == LocatorType.OnDemandOrigin).ToList ().Select (locator => locator.DeleteAsync ()).ToArray (); " is 178.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveDynEnc,The length of the statement  "						TextBoxLogWriteLine ("There is a problem when removing the delivery policy or locator for '{0}'."' AssetToProcess.Name' true); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveDynEnc,The length of the statement  "								Task<IMediaDataServiceResponse>[] deleteTasks = _context.ContentKeyAuthorizationPolicyOptions.ToList ().Where (p => AutPolOptionListIDs.Contains (p.Id)).ToList ().Select (o => o.DeleteAsync ()).ToArray (); " is 205.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveDynEnc,The length of the statement  "							TextBoxLogWriteLine ("There is a problem when deleting the delivery policy or locator for '{0}'."' AssetToProcess.Name' true); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveDynEnc,The length of the statement  "						TextBoxLogWriteLine ("Removed{0} asset delivery policies' key authorization policies and locator(s) for asset {1}."' (myDialogResult == DialogResult.Yes) ? " and deleted" : string.Empty' AssetToProcess.Name); " is 208.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveKeys,The length of the statement  "		labelAssetName = string.Format ("CENC' FairPlay and Envelope keys will be removed for asset '{0}'."' SelectedAssets.FirstOrDefault ().Name); " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveKeys,The length of the statement  "			labelAssetName = string.Format ("CENC' FairPlay and Envelope keys will removed for these {0} selected assets."' SelectedAssets.Count.ToString ()); " is 146.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveKeys,The length of the statement  "		DialogResult myDialogResult = MessageBox.Show (labelAssetName' "Dynamic encryption"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Warning); " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveKeys,The length of the statement  "						IList<IContentKey> CENCAESkeys = AssetToProcess.ContentKeys.Where (k => k.ContentKeyType == ContentKeyType.CommonEncryption || k.ContentKeyType == ContentKeyType.CommonEncryptionCbcs || k.ContentKeyType == ContentKeyType.EnvelopeEncryption).ToList (); " is 251.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveKeys,The length of the statement  "						TextBoxLogWriteLine ("Removed {0} key{1} for asset {0}."' KeysListIDs.Count' KeysListIDs.Count > 1 ? "s" : ""' AssetToProcess.Name); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveKeys,The length of the statement  "						//var deleteTasks = _context.ContentKeys.ToList().Where(k => KeysListIDs.Contains(k.Id)).ToList().Select(k => k.DeleteAsync()).ToArray(); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveKeys,The length of the statement  "								TextBoxLogWriteLine ("There is a problem when deleting the key {0} which was attached to '{1}'."' key.Id' AssetToProcess.Name' true); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRemoveKeys,The length of the statement  "							TextBoxLogWriteLine ("Deleted {0} key{1} for asset {0}."' KeysListIDs.Count' KeysListIDs.Count > 1 ? "s" : ""' AssetToProcess.Name); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyOutputURLAssetOrProgramToClipboard,The length of the statement  "			if (true)//_context.StreamingEndpoints.Count() > 1 || (_context.StreamingEndpoints.FirstOrDefault() != null && _context.StreamingEndpoints.FirstOrDefault().CustomHostNames.Count > 0) || _context.Filters.Count() > 0 || (asset.AssetFilters.Count() > 0)) " is 251.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyOutputURLAssetOrProgramToClipboard,The length of the statement  "					url = AssetInfo.RW (new Uri (url)' form.SelectStreamingEndpoint' form.SelectedFilters' form.ReturnHttps' form.ReturnSelectCustomHostName' form.ReturnStreamingProtocol' form.ReturnHLSAudioTrackName' form.ReturnHLSNoAudioOnlyMode).ToString (); " is 241.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyOutputURLAssetOrProgramToClipboard,The length of the statement  "			MessageBox.Show (string.Format ("No valid URL is available for asset '{0}'."' asset.Name)' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 150.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetPrograms,The length of the statement  "			string question = (SelectedPrograms.Count == 1) ? string.Format ("Reset program '{0}' ?"' SelectedPrograms [0].Name) : string.Format ("Reset these {0} programs ?"' SelectedPrograms.Count); " is 188.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetPrograms,The length of the statement  "			question += Constants.endline + Constants.endline + "This will delete the program' the related asset and locator and will re-create them with the same ISM file name' locator ID' keys' delivery policies and filters."; " is 216.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetPrograms,The length of the statement  "			question += Constants.endline + Constants.endline + "WARNING: As the new asset will use the same locator ID' this can create issues. Notes:"; " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetPrograms,The length of the statement  "			if (MessageBox.Show (question' "Program(s) reset"' MessageBoxButtons.OKCancel' MessageBoxIcon.Warning) == DialogResult.OK) { " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetPrograms,The length of the statement  "						var ismAssetFiles = asset.AssetFiles.ToList ().Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoResetPrograms,The length of the statement  "							IAccessPolicy policy = _context.AccessPolicies.Create ("AP:" + assetName' locatorExpDateTime.Subtract (DateTime.UtcNow)' AccessPermissions.Read); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAttachAnotherStorageAccount,The length of the statement  "		ManagementRESTAPIHelper helper = new ManagementRESTAPIHelper (form.GetAzureServiceManagementURL' form.GetCertBody' form.GetAzureSubscriptionID); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAttachAnotherStorageAccount,The length of the statement  "			TextBoxLogWriteLine ("Storage account '{0}' attached to '{1}' account."' form.GetStorageName' _context.Credentials.ClientId); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoJobResubmit,The length of the statement  "		EncodingProcessorsList = _context.MediaProcessors.ToList ().OrderBy (p => p.Vendor).ThenBy (p => p.Name).ThenBy (p => new Version (p.Version)).ToList ()' " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoJobResubmit,The length of the statement  "		EncodingOutputAssetName = string.Format ("{0} (resubmitted on {1})"' myJob.OutputMediaAssets.FirstOrDefault ().Name' DateTime.Now.ToString ())' " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoJobResubmit,The length of the statement  "		string inputasssetname = SelectedJobs.FirstOrDefault ().InputMediaAssets.Count == 1 ? SelectedJobs.FirstOrDefault ().InputMediaAssets.FirstOrDefault ().Name : "multiple assets"; " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoJobResubmit,The length of the statement  "		string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' inputasssetname).Replace (Constants.NameconvProcessorname' form.SingleEncodingProcessorSelected.Name); " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoJobResubmit,The length of the statement  "		//.Replace(Constants.NameconvInputasset' inputasssetname).Replace(Constants.NameconvProcessorname' form.SingleEncodingProcessorSelected.Name); " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoJobResubmit,The length of the statement  "		ITask task = job.Tasks.AddNew (tasknameloc' form.SingleEncodingProcessorSelected' form.SingleEncodingConfiguration' form.SingleTaskOptions.TasksOptionsSetting); " is 160.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoJobResubmit,The length of the statement  "		string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' inputasssetname).Replace (Constants.NameconvProcessorname' form.SingleEncodingProcessorSelected.Name); " is 198.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoJobResubmit,The length of the statement  "		task.OutputAssets.AddNew (outputassetnameloc' form.SingleTaskOptions.StorageSelected' form.SingleTaskOptions.OutputAssetsCreationOptions' form.SingleTaskOptions.OutputAssetsFormatOption); " is 187.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoJobResubmit,The length of the statement  "			MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 230.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoSubmitFromTemplate,The length of the statement  "		ProcessingPromptText = (SelectedAssets.Count > 1) ? string.Format ("{0} assets have been selected. 1 job will be submitted."' SelectedAssets.Count) : string.Format ("Asset '{0}' will be encoded."' SelectedAssets.FirstOrDefault ().Name)' " is 236.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoSubmitFromTemplate,The length of the statement  "		ProcessingJobName = string.Format ("Processing of {0} with template {1}"' Constants.NameconvInputasset' Constants.NameconvTemplate)' " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoSubmitFromTemplate,The length of the statement  "			MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobname) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 227.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoUpdateMediaRU,The length of the statement  "	if (trackBarEncodingRU.Value == 0 && (((Item)comboBoxEncodingRU.SelectedItem).Value != Enum.GetName (typeof(ReservedUnitType)' ReservedUnitType.Basic)))// user selected 0 with a non S1 hardware... " is 196.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoUpdateMediaRU,The length of the statement  "		if (MessageBox.Show ("You selected 0 unit but the encoding type is not S1. Are you sure you want to continue ?"' "Warning"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.No) { " is 215.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoUpdateMediaRU,The length of the statement  "		TextBoxLogWriteLine (string.Format ("Updating to {0} {1} Media Reserved Unit{2}..."' (int)trackBarEncodingRU.Value' ((Item)comboBoxEncodingRU.SelectedItem).Name' (int)trackBarEncodingRU.Value > 1 ? "s" : string.Empty)); " is 219.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoUpdateMediaRU,The length of the statement  "		EncResUnit.ReservedUnitType = (ReservedUnitType)(Enum.Parse (typeof(ReservedUnitType)' ((Item)comboBoxEncodingRU.SelectedItem).Value)); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,UpdateLabelProcessorUnits,The length of the statement  "	labelnbunits.Text = string.Format (Constants.strUnits' trackBarEncodingRU.Value' trackBarEncodingRU.Value > 1 ? "s" : string.Empty); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoPlaySelectedAssetsOrProgramsWithPlayer,The length of the statement  "			if (MessageBox.Show (string.Format ("There is no valid streaming locator for asset '{0}'.\nDo you want to create one ?"' myAsset.Name)' "Streaming locator"' MessageBoxButtons.YesNo' MessageBoxIcon.Asterisk) == DialogResult.Yes) { " is 229.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoPlaySelectedAssetsOrProgramsWithPlayer,The length of the statement  "					IAccessPolicy policy = _context.AccessPolicies.Create ("AP:" + myAsset.Name' TimeSpan.FromDays (Properties.Settings.Default.DefaultLocatorDurationDaysNew)' AccessPermissions.Read); " is 180.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoPlaySelectedAssetsOrProgramsWithPlayer,The length of the statement  "		if (!Error && IsThereALocatorValid (myAsset' ref PlayBackLocator' LocatorType.OnDemandOrigin))// There is a streaming locator valid " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoPlaySelectedAssetsOrProgramsWithPlayer,The length of the statement  "				// there is a streaming locator but the asset cannot be played back with adaptive streaming. It could be a single file in the asset. " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoPlaySelectedAssetsOrProgramsWithPlayer,The length of the statement  "				if (myAsset.AssetFiles.Count () == 1 && myAsset.AssetFiles.FirstOrDefault ().Name.ToLower ().EndsWith (".mp4") && (playertype == PlayerType.AzureMediaPlayer)) { " is 160.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoPlaySelectedAssetsOrProgramsWithPlayer,The length of the statement  "					MessageBox.Show (string.Format ("The asset '{0}' in a single MP4 file and cannot be played with adaptive streaming as there is no manifest file.\nThe MP4 file will be played through progressive download."' myAsset.Name)' "Single MP4 file"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 290.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoPlaySelectedAssetsOrProgramsWithPlayer,The length of the statement  "					AssetInfo.DoPlayBackWithStreamingEndpoint (PlayerType.AzureMediaPlayer' PlayBackLocator.Path + myAsset.AssetFiles.FirstOrDefault ().Name' _context' this' myAsset' formatamp: AzureMediaPlayerFormats.VideoMP4' UISelectSEFiltersAndProtocols: false); " is 246.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoPlaySelectedAssetsOrProgramsWithPlayer,The length of the statement  "					MessageBox.Show (string.Format ("The asset '{0}' does not seem to be playable with adaptive streaming."' myAsset.Name)' "Adaptive streaming"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 192.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGetTestToken,The length of the statement  "				var tokenDisplayForm = new EditorXMLJSON ("Authorization test token"' Constants.Bearer + testToken.TokenString' false' false); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGetTestToken,The length of the statement  "			MessageBox.Show ("There is no policy defined using the token mode"' "No token"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyAssetToAnotherAMSAccount,The length of the statement  "	if (SelectedAssets.Any (a => AssetInfo.GetAssetType (a).StartsWith (AssetInfo.Type_LiveArchive) || AssetInfo.GetAssetType (a).StartsWith (AssetInfo.Type_Fragmented))) { " is 168.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyAssetToAnotherAMSAccount,The length of the statement  "		MessageBox.Show ("One of the source asset is fragmented (live stream' live archive or pre-fragmented asset)." + Constants.endline + "It is not recommended to copy such asset with this command. While the copied asset will be streamable' you could have issues to download it or run a processor on it because some asset files will not be tagged as fragments containers." + Constants.endline + Constants.endline + "It is recommended to use subclipping (all bitrates) and then to copy the multiple MP4 files asset with this command." + Constants.endline' "Fragmented asset"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 616.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyAssetToAnotherAMSAccount,The length of the statement  "		var storagekeys = BuildStorageKeyDictionary (SelectedAssets' form.DestinationLoginCredentials' ref usercanceled' _context.DefaultStorageAccount.Name' _credentials.DefaultStorageKey' form.DestinationStorageAccount); " is 214.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyAssetToAnotherAMSAccount,The length of the statement  "					var response = DoGridTransferAddItem (string.Format ("Copy asset '{0}' to account '{1}'"' asset.Name' form.DestinationLoginCredentials.AccountName)' TransferType.ExportToOtherAMSAccount' false); " is 194.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyAssetToAnotherAMSAccount,The length of the statement  "					Task.Factory.StartNew (() => ProcessExportAssetToAnotherAMSAccount (form.DestinationLoginCredentials' form.DestinationStorageAccount' storagekeys' new List<IAsset> () { " is 168.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyAssetToAnotherAMSAccount,The length of the statement  "					}' form.CopyAssetName.Replace (Constants.NameconvAsset' asset.Name)' response' form.DeleteSourceAsset' form.CopyDynEnc' form.RewriteLAURL' form.CloneAssetFilters' form.CloneLocators' form.UnpublishSourceAsset)' response.token); " is 227.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyAssetToAnotherAMSAccount,The length of the statement  "					MessageBox.Show ("Assets cannot be merged as at least one asset is encrypted."' "Asset encrypted"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyAssetToAnotherAMSAccount,The length of the statement  "					var response = DoGridTransferAddItem (string.Format ("Copy several assets to account '{0}'"' form.DestinationLoginCredentials.AccountName)' TransferType.ExportToOtherAMSAccount' false); " is 185.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyAssetToAnotherAMSAccount,The length of the statement  "					Task.Factory.StartNew (() => ProcessExportAssetToAnotherAMSAccount (form.DestinationLoginCredentials' form.DestinationStorageAccount' storagekeys' SelectedAssets' form.CopyAssetName.Replace (Constants.NameconvAsset' SelectedAssets.FirstOrDefault ().Name)' response' form.DeleteSourceAsset)' response.token); " is 307.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,BuildStorageKeyDictionary,The length of the statement  "			if (Program.InputBox ("Source Storage Account Key Needed"' string.Format ("Please enter the Storage Account Access Key for '{0}' : "' asset.StorageAccountName)' ref valuekey' true) == DialogResult.OK) { " is 202.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,BuildStorageKeyDictionary,The length of the statement  "		if (Program.InputBox ("Destination Storage Account Key Needed"' string.Format ("Please enter the Storage Account Access Key for '{0}' : "' DestinationOtherStorage)' ref valuekey' true) == DialogResult.OK) { " is 206.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,BuildStorageKeyDictionary,The length of the statement  "				if (Program.InputBox ("Destination Storage Account Key Needed"' string.Format ("Please enter the Storage Account Access Key of the destination storage account ('{0}') : "' newcontext.DefaultStorageAccount.Name)' ref valuekey' true) == DialogResult.OK) { " is 253.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ChangeAzureCDN,The length of the statement  "	if (StreamingEndpointInformation.ReturnTypeSE (streamingendpoint) == StreamingEndpointInformation.StreamEndpointType.Classic) { " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ChangeAzureCDN,The length of the statement  "		MessageBox.Show (string.Format ("Streaming endpoint must be Standard or Premium in order to {0} CDN."' enable ? "enable" : "disable")' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 192.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ChangeAzureCDN,The length of the statement  "		MessageBox.Show (string.Format ("Streaming endpoint must be stopped in order to {0} CDN."' enable ? "enable" : "disable")' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 180.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ChangeAzureCDN,The length of the statement  "		if (MessageBox.Show (string.Format ("Are you sure you want to disable CDN on Streaming Endpoint '{0}' ?"' streamingendpoint.Name)' "Azure CDN"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 237.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ChangeAzureCDN,The length of the statement  "				await StreamingEndpointExecuteOperationAsync (streamingendpoint.SendUpdateOperationAsync' streamingendpoint' "updated"); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ChangeAzureCDN,The length of the statement  "				await StreamingEndpointExecuteOperationAsync (streamingendpoint.SendUpdateOperationAsync' streamingendpoint' "updated"); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,OptinToStandardSE,The length of the statement  "		MessageBox.Show ("Streaming endpoint must be stopped in order to migrate it to Standard."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 148.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,OptinToStandardSE,The length of the statement  "		MessageBox.Show ("Only Classic Streaming Endpoint can be migrated to Standard"' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,OptinToStandardSE,The length of the statement  "		MessageBox.Show ("Streaming endpoint must be classic (0 unit) to migrate it to Standard"' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 147.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,OptinToStandardSE,The length of the statement  "	if (MessageBox.Show (string.Format ("Do you confirm the migration from Classic to Standard of the Streaming Endpoint '{0}' ?\n\nMigrating from classic to standard endpoint cannot be rolled back and has a pricing impact. Please check Azure Media Services pricing page. After migration' it can take up to 30 minutes for full propagation and dynamic packaging and streaming requests might fail during this period."' streamingendpoint.Name)' "Migrating from classic to standard"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 569.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,OptinToStandardSE,The length of the statement  "			await StreamingEndpointExecuteOperationAsync (streamingendpoint.SendUpdateOperationAsync' streamingendpoint' "migrated"); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ManageMenuOptionsOptinStandard,The length of the statement  "		bool classic = StreamingEndpointInformation.ReturnTypeSE (streamingendpoints.FirstOrDefault ()) == StreamingEndpointInformation.StreamEndpointType.Classic; " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ManageMenuOptionsOptinStandard,The length of the statement  "	} else if (streamingendpoints.Any (se => StreamingEndpointInformation.ReturnTypeSE (se) == StreamingEndpointInformation.StreamEndpointType.Classic))// so the user can see the feature " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCopyChannelInputURLToClipboard,The length of the statement  "			MessageBox.Show ("SSL is only possible for Smooth Streaming input."' "SSL"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateFilter,The length of the statement  "			_context.Filters.Create (filterinfo.Name' filterinfo.Presentationtimerange' filterinfo.Trackconditions' filterinfo.Firstquality); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateFilter,The length of the statement  "			TextBoxLogWriteLine ("Error when creating filter '{0}'."' (filterinfo != null && filterinfo.Name != null) ? filterinfo.Name : "unknown name"' true); " is 148.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "		MessageBox.Show ("One of the source asset is a Live stream or archive." + Constants.endline + "You should use the subclipping UI if you plan to trim the source to make sure that that timestamps are correctly managed." + Constants.endline + "Overlay is also disabled."' "Live archive asset"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 337.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "		MessageBox.Show ("One of the source asset is a fragmented asset." + Constants.endline + "Overlay is disabled."' "Fragmented asset"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 178.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "		if (MessageBox.Show ("You selected several assets." + Constants.endline + "Do you want to use them as multiple input assets to one single task (to do stitching)' or generate one task per input asset." + Constants.endline + Constants.endline + "Yes : Multiple input assets to one task (for stitching)" + Constants.endline + "No : One task/job per input asset"' "Multiple input assets"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) " is 455.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "	string taskname = string.Format ("Media Encoder Standard processing of {0} with {1}"' Constants.NameconvInputasset' Constants.NameconvEncodername); " is 147.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "		label = string.Format ("{0} asset{1} selected. You are going to submit {0} job{1} with 1 task."' SelectedAssets.Count' Program.ReturnS (SelectedAssets.Count)); " is 159.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "		label = string.Format ("{0} assets selected. You are going to submit 1 job with 1 task and multiple input assets."' SelectedAssets.Count); " is 138.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "	EncodingMES form = new EncodingMES (_context' MultipleInputAssets ? SelectedAssets : new List<IAsset> ()' processor.Version' disableOverlay: SelectedAssets.Count > 1 ? true : (bLiveArchiveAsset || bFragmented)' // as only single asset overlay is supported for now " is 263.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "			string tasknameloc = taskname.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version); " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "			ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "			string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "			AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption); " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "					MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 230.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "				string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version); " is 164.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "				ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "				AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption); " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The length of the statement  "						MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 230.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,publishToolStripMenuItem_DropDownOpening,The length of the statement  "	getATestTokenToolStripMenuItem.Enabled = createAnAssetFilterToolStripMenuItem1.Enabled = toolStripMenuItemPublishCopyPubURLToClipb.Enabled = assets.Count == 1; " is 159.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateAssetFilter,The length of the statement  "			TextBoxLogWriteLine ("Error when creating filter '{0}'."' (filterinfo != null && filterinfo.Name != null) ? filterinfo.Name : "unknown name"' true); " is 148.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDuplicateFilter,The length of the statement  "		if (Program.InputBox ("New name"' "Enter the name of the new duplicate filter:"' ref newfiltername) == DialogResult.OK) { " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDuplicateFilter,The length of the statement  "				_context.Filters.Create (newfiltername' sourcefilter.PresentationTimeRange' sourcefilter.Tracks' sourcefilter.FirstQuality); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDuplicateFilter,The length of the statement  "				MessageBox.Show ("Error when duplicating asset filter." + Constants.endline + e.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoClonePrograms,The length of the statement  "				Task.Factory.StartNew (() => ProcessCloneProgramToAnotherAMSAccount (form.DestinationLoginCredentials' form.DestinationStorageAccount' program' form.CopyDynEnc' form.RewriteLAURL' form.CloneLocators' form.CloneAssetFilters)); " is 225.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCloneChannels,The length of the statement  "				Task.Factory.StartNew (() => ProcessCloneChannelToAnotherAMSAccount (form.DestinationLoginCredentials' form.DestinationStorageAccount' channel)); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoSubClip,The length of the statement  "		if (!selectedAssets.All (a => AssetInfo.GetAssetType (a).StartsWith (AssetInfo.Type_LiveArchive) || AssetInfo.GetAssetType (a).StartsWith (AssetInfo.Type_Fragmented))) { " is 169.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoSubClip,The length of the statement  "			MessageBox.Show ("Asset(s) should be a live' live archive or pre-fragmented asset." + Constants.endline + "Subclipping other types of assets is unpredictable."' "Format issue"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 223.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStorageVersion,The length of the statement  "	if ((!havestoragecredentials && storageName == _context.DefaultStorageAccount.Name) || (storageName != _context.DefaultStorageAccount.Name)) { " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStorageVersion,The length of the statement  "		if (Program.InputBox ("Storage Account Key Needed"' "Please enter the Storage Account Access Key for " + storageName + ":"' ref valuekey' true) == DialogResult.OK) { " is 165.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStorageVersion,The length of the statement  "			var storageAccount = new CloudStorageAccount (new StorageCredentials (storageName' valuekey)' _credentials.ReturnStorageSuffix ()' true); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStorageVersion,The length of the statement  "			MessageBox.Show ("Error when accessing the storage account.\nIs the key correct ?\n\n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 154.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoStorageVersion,The length of the statement  "					TextBoxLogWriteLine ("Setting storage version to '{0}'' Metrics to level '{1}' and {2} days retention  ..."' form.RequestedStorageVersion ?? StorageSettings.noversion' form.RequestedMetricsLevel.ToString ()' form.RequestedMetricsRetention ?? 0); " is 245.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewStorage_CellDoubleClick,The length of the statement  "		string storagename = dataGridViewStorage.Rows [e.RowIndex].Cells [dataGridViewStorage.Columns ["StrictName"].Index].Value.ToString (); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DeleteIngestManifests,The length of the statement  "		string question = (ims.Count == 1) ? "Delete bulk container " + ims [0].Name + " ?" : "Delete these " + ims.Count + " bulk containers ?"; " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DeleteIngestManifests,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (question' "Bulk container deletion"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 193.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateNewBulkUpload,The length of the statement  "					if (MessageBox.Show (string.Format ("Folder '{0}' does not exist." + Constants.endline + "Do you want to create it ?"' form.EncryptToFolder)' "Folder does not exist"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.OK) { " is 241.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateNewBulkUpload,The length of the statement  "							MessageBox.Show (string.Format ("Error when creating folder '{0}'."' form.EncryptToFolder)' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateNewBulkUpload,The length of the statement  "					DoProcessCreateBulkIngestAndEncryptFiles (form.IngestName' form.IngestStorageSelected' form.AssetFiles' form.AssetStorageSelected' form.AssetCreationOption' form.EncryptToFolder' form.GenerateAzCopy' form.GenerateSigniant' form.SigniantServersSelected' form.SigniantAPIKey' form.GenerateAspera); " is 295.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoProcessCreateBulkIngestAndEncryptFiles,The length of the statement  "	TextBoxLogWriteLine ("Bulk: {0} asset(s) / {1} file(s) declared for bulk ingest container '{2}'."' assetFiles.Count' manifest.Statistics.PendingFilesCount' manifest.Name); " is 171.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoProcessCreateBulkIngestAndEncryptFiles,The length of the statement  "			string commandline = GenerateSigniantCommandLine (manifest' assetFiles' creationoption == AssetCreationOptions.StorageEncrypted' encryptToFolder' SigniantServers' SigniantAPIKey); " is 179.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoProcessCreateBulkIngestAndEncryptFiles,The length of the statement  "			string commandline = GenerateAzCopyCommandLine (manifest' assetFiles' creationoption == AssetCreationOptions.StorageEncrypted' encryptToFolder); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GenerateAsperaUrl,The length of the statement  "	if (im.StorageAccountName == _context.DefaultStorageAccount.Name && !string.IsNullOrEmpty (_credentials.DefaultStorageKey)) { " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GenerateAsperaUrl,The length of the statement  "	return "azu://" + im.StorageAccountName + ":" + storKey + "@" + im.BlobStorageUriForUpload.Substring (im.BlobStorageUriForUpload.IndexOf (".") + 1); " is 148.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GenerateSigniantCommandLine,The length of the statement  "	if (im.StorageAccountName == _context.DefaultStorageAccount.Name && !string.IsNullOrEmpty (_credentials.DefaultStorageKey)) { " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GenerateSigniantCommandLine,The length of the statement  "	var command = string.Format (@"sigcli --apikey {0} --direction upload --server {1} --account-name {2} --access-key {3} --container {4}"' APIKey' server' im.StorageAccountName' storKey' (new Uri (im.BlobStorageUriForUpload)).PathAndQuery.Substring (1)); " is 252.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GenerateAzCopyCommandLine,The length of the statement  "	if (im.StorageAccountName == _context.DefaultStorageAccount.Name && !string.IsNullOrEmpty (_credentials.DefaultStorageKey)) { " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GenerateAzCopyCommandLine,The length of the statement  "				command.AppendLine (string.Format (@"AzCopy /Source:""{0}"" /Dest:{1} /DestKey:{2} /Pattern:""{3}"""' Path.GetDirectoryName (file)' im.BlobStorageUriForUpload' storKey' Path.GetFileName (file))); " is 195.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GenerateAzCopyCommandLine,The length of the statement  "				command.AppendLine (string.Format (@"AzCopy /Source:""{0}"" /Dest:{1} /DestKey:{2} /Pattern:""{3}"""' encryptedfilefolder' im.BlobStorageUriForUpload' storKey' im.StorageAccountName' file.Name)); " is 195.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewIngestManifestsV_CellDoubleClick,The length of the statement  "		var manifestId = dataGridViewIngestManifestsV.Rows [e.RowIndex].Cells [dataGridViewIngestManifestsV.Columns ["Id"].Index].Value.ToString (); " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,toolStripMenuItemRedactor_Click,The length of the statement  "	DoMenuVideoAnalyticsFaceRedaction (Constants.AzureMediaRedactor' Bitmaps.media_redactor' Constants.LinkMoreYammerAMSPreview); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCheckIntegrityLiveArchive,The length of the statement  "	string question = (assets.Count == 1) ? string.Format ("Check the integrity of '{0}' ?"' assets [0].Name) : string.Format ("Check the integrity of these {0} archives ?"' assets.Count); " is 184.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCheckIntegrityLiveArchive,The length of the statement  "	if (System.Windows.Forms.MessageBox.Show (question' "Integrity check"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 185.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCheckIntegrityLiveArchive,The length of the statement  "		var storagekeys = BuildStorageKeyDictionary (assets' null' ref usercanceled' _context.DefaultStorageAccount.Name' _credentials.DefaultStorageKey' null); " is 152.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The length of the statement  "	var dialogResult = System.Windows.Forms.MessageBox.Show ("AMS Explorer will check all manifest files (.ism) modified after Jan 20' 2016.\n\nDo you want to fix the ones with a wrong (too low) systemBitrate attribute ?\n(Yes: fix issues' No: only list issues)"' "Manifest check"' System.Windows.Forms.MessageBoxButtons.YesNoCancel' MessageBoxIcon.Information); " is 358.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The length of the statement  "	if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to test the query of all asset files ?"' "Files query"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 240.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The length of the statement  "		if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each file tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) { " is 265.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The length of the statement  "							TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The length of the statement  "	if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to test the query of all assets  ?"' "Assets query"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 237.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The length of the statement  "		if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each asset tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) { " is 266.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The length of the statement  "							TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessRedactortoolStripMenuItem_Click_1,The length of the statement  "	DoMenuVideoAnalyticsFaceRedaction (Constants.AzureMediaRedactor' Bitmaps.media_redactor' Constants.LinkMoreYammerAMSPreview); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuVideoAnnotator,The length of the statement  "	DoMenuVideoAnalytics (Constants.AzureMediaVideoAnnotator' Bitmaps.contentmoderation' Constants.LinkMoreInfoContentModeration); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,UpdateLabelConcurrentTransfers,The length of the statement  "	labelConcurrentTransfers.Text = string.Format (Constants.strTransfers' trackBarConcurrentTransfers.Value == Constants.MaxTransfersAsUnlimited ? "Unlimited" : "Limited to " + trackBarConcurrentTransfers.Value.ToString ()' trackBarConcurrentTransfers.Value > 1 ? "s" : string.Empty); " is 281.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAnalyzeAssets,The length of the statement  "	if (displayMessage && MessageBox.Show ("A thumbnails creation job will be created for each asset.\nThumbnails are used to setup regions with Media OCR' Motion Detector and MES Video Cropping.\nMetadata file provides technical information on the source.\n\nDo you want to submit the job(s) ?"' "Asset(s) Analysis"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.Cancel) { " is 392.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAnalyzeAssets,The length of the statement  "	StreamReader r = new StreamReader (Path.Combine (Application.StartupPath + Constants.PathConfigFiles' "AssetAnalysis.json")); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAnalyzeAssets,The length of the statement  "	json = json.Replace ("{AssetAnalysisStart}"' Properties.Settings.Default.AssetAnalysisStart.ToString ()).Replace ("{AssetAnalysisStep}"' Properties.Settings.Default.AssetAnalysisStep.ToString ()); " is 196.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAnalyzeAssets,The length of the statement  "		ITask AnalyzeTask = job.Tasks.AddNew (taskname' processor' jsonwithid' Properties.Settings.Default.useProtectedConfiguration ? TaskOptions.ProtectedConfiguration : TaskOptions.None); " is 182.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAnalyzeAssets,The length of the statement  "		AnalyzeTask.OutputAssets.AddNew (outputname' _context.DefaultStorageAccount.Name' AssetCreationOptions.None' AssetFormatOption.None); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAnalyzeAssets,The length of the statement  "				MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobname) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 227.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoConfigureTelemetry,The length of the statement  "		list.Add (new ComponentMonitoringSetting (MonitoringComponent.StreamingEndpoint' config.MonitorLevelStreamingEndpoint)); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoConfigureTelemetry,The length of the statement  "					INotificationEndPoint notificationEndPoint = _context.NotificationEndPoints.Create ("monitoring"' NotificationEndPointType.AzureTable' _credentials.GetTableEndPoint (config.StorageSelected)); " is 191.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoConfigureTelemetry,The length of the statement  "					IMonitoringConfiguration monitoringConfiguration = _context.MonitoringConfigurations.Create (notificationEndPoint.Id' list); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Mainform)); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea2 = new System.Windows.Forms.DataVisualization.Charting.ChartArea (); " is 136.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	System.Windows.Forms.DataVisualization.Charting.Legend legend2 = new System.Windows.Forms.DataVisualization.Charting.Legend (); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.encryptTheSmoothStreamingAssetsWithPlayReadystaticToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem (); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.comboBoxFilterAssetsTime.SelectedIndexChanged += new System.EventHandler (this.comboBoxFilterTime_SelectedIndexChanged); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.comboBoxStateAssets.SelectedIndexChanged += new System.EventHandler (this.comboBoxStateAssets_SelectedIndexChanged); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAssetsV.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAssetsV.CellDoubleClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewAssetsV_CellDoubleClick_1); " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAssetsV.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler (this.dataGridViewAssetsV_CellFormatting_1); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAssetsV.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler (this.dataGridViewV_RowPostPaint); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripAssets.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripAssets_Opening); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.displayParentJobToolStripMenuItem1.Click += new System.EventHandler (this.displayParentJobToolStripMenuItem1_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.ContextMenuItemAssetCreateOutlookReportEmail' "ContextMenuItemAssetCreateOutlookReportEmail"); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemAssetCreateOutlookReportEmail.Click += new System.EventHandler (this.createOutlookReportEmailToolStripMenuItem2_Click); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.deleteVisibleAssetsInGridToolStripMenuItem' "deleteVisibleAssetsInGridToolStripMenuItem"); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.deleteVisibleAssetsInGridToolStripMenuItem.Click += new System.EventHandler (this.deleteVisibleAssetsInGridToolStripMenuItem_Click); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.filesToSelectedAssetsToolStripMenuItem1.Click += new System.EventHandler (this.filesToSelectedAssetsToolStripMenuItem1_Click); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.fromAzureStorageSASContainerPathToolStripMenuItem' "fromAzureStorageSASContainerPathToolStripMenuItem"); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.fromAzureStorageSASContainerPathToolStripMenuItem.Click += new System.EventHandler (this.fromAzureStorageSASContainerPathToolStripMenuItem_Click); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.exportAssetsInformationToExcelToolStripMenuItem' "exportAssetsInformationToExcelToolStripMenuItem"); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.exportAssetsInformationToExcelToolStripMenuItem.Click += new System.EventHandler (this.exportAssetsInformationToExcelToolStripMenuItem_Click); " is 147.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.contextMenuExportToAnotherMediaServicesAccount' "contextMenuExportToAnotherMediaServicesAccount"); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.contextMenuExportToAnotherMediaServicesAccount.Click += new System.EventHandler (this.toAnotherAzureMediaServicesAccountToolStripMenuItem1_Click_1); " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.encodeAssetsWithAMEStandardToolStripMenuItem' "encodeAssetsWithAMEStandardToolStripMenuItem"); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.encodeAssetsWithAMEStandardToolStripMenuItem.Click += new System.EventHandler (this.encodeAssetsWithAMEStandardToolStripMenuItem_Click); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemPremiumWorkflow.Click += new System.EventHandler (this.encodeAssetsWithPremiumWorkflowToolStripMenuItem_Click); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.processAssetsWithAzureMediaOCRToolStripMenuItem' "processAssetsWithAzureMediaOCRToolStripMenuItem"); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaOCRToolStripMenuItem.Click += new System.EventHandler (this.processAssetsWithAzureMediaOCRToolStripMenuItem_Click); " is 147.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaContentModeratorToolStripMenuItem1.Image = global::AMSExplorer.Bitmaps.contentmoderation; " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaContentModeratorToolStripMenuItem1.Name = "processAssetsWithAzureMediaContentModeratorToolStripMenuItem1"; " is 138.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.processAssetsWithAzureMediaContentModeratorToolStripMenuItem1' "processAssetsWithAzureMediaContentModeratorToolStripMenuItem1"); " is 159.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaContentModeratorToolStripMenuItem1.Click += new System.EventHandler (this.DoMenuContentModerator_Click); " is 136.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem1.Name = "processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem1"; " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem1' "processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem1"); " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem1.Click += new System.EventHandler (this.DoMenuVideoAnnotator_Click); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.extendExistingLocatorsToolStripMenuItem.Click += new System.EventHandler (this.extendExistingLocatorsToolStripMenuItem_Click); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.deleteAllLocatorsToolStripMenuItem.Click += new System.EventHandler (this.deleteAllLocatorsToolStripMenuItem_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.findTheAssetFromTheLocatorIdGUIDToolStripMenuItem' "findTheAssetFromTheLocatorIdGUIDToolStripMenuItem"); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.findTheAssetFromTheLocatorIdGUIDToolStripMenuItem.Click += new System.EventHandler (this.findTheAssetFromTheLocatorIdGUIDToolStripMenuItem_Click); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.createAnAssetFilterToolStripMenuItem.Click += new System.EventHandler (this.createAnAssetFilterToolStripMenuItem_Click); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withAzureMediaPlayerToolStripMenuItem.DropDownOpening += new System.EventHandler (this.withAzureMediaPlayerToolStripMenuItem_DropDownOpening); " is 147.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withAzureMediaPlayerToolStripMenuItem.Click += new System.EventHandler (this.withAzureMediaPlayerToolStripMenuItem_Click); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.ContextMenuItemPlaybackWithMPEGDASHIFReference' "ContextMenuItemPlaybackWithMPEGDASHIFReference"); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemPlaybackWithMPEGDASHIFReference.Click += new System.EventHandler (this.withMPEGDASHIFReferencePlayerToolStripMenuItem_Click); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withCustomPlayerToolStripMenuItem1.Click += new System.EventHandler (this.withCustomPlayerToolStripMenuItem1_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.comboBoxOrderAssets.SelectedIndexChanged += new System.EventHandler (this.comboBoxOrderAssets_SelectedIndexChanged); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewFilters.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewFilters.CellDoubleClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewFilters_CellDoubleClick); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewFilters.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler (this.dataGridViewV_RowPostPaint); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripFilters.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripFilters_Opening); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTransfer.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTransfer.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewTransfer_CellContentClick); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTransfer.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler (this.dataGridViewTransfer_CellFormatting); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewTransfer.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler (this.dataGridViewV_RowPostPaint); " is 138.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripTransfers.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripTransfers_Opening); " is 128.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewIngestManifestsV.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewIngestManifestsV.CellDoubleClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewIngestManifestsV_CellDoubleClick); " is 159.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripIngestManifests.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripIngestManifests_Opening); " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.copyIngestURLToClipboardToolStripMenuItem.Click += new System.EventHandler (this.copyIngestURLToClipboardToolStripMenuItem_Click); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.linkLabelMoreInfoMediaUnits' resources.GetString ("linkLabelMoreInfoMediaUnits.ToolTip")); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.linkLabelMoreInfoMediaUnits.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabelMoreInfoMediaUnits_LinkClicked); " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.comboBoxFilterJobsTime.SelectedIndexChanged += new System.EventHandler (this.comboBoxFilterJobsTime_SelectedIndexChanged); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewJobsV.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewJobsV.CellDoubleClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewJobsV_CellDoubleClick); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewJobsV.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler (this.dataGridViewJobsV_CellFormatting); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewJobsV.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler (this.dataGridViewV_RowPostPaint); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemJobInputAssetInformation.Click += new System.EventHandler (this.inputAssetInformationToolStripMenuItem1_Click); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.ContextMenuItemJobCreateOutlookReportEmail' "ContextMenuItemJobCreateOutlookReportEmail"); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.copyReportToClipboardToolStripMenuItem.Click += new System.EventHandler (this.copyReportToClipboardToolStripMenuItem_Click); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.visibleJobsInGridToolStripMenuItem1.Click += new System.EventHandler (this.visibleJobsInGridToolStripMenuItem1_Click); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewProgramsV.ChannelSourceIDs = ((System.Collections.Generic.List<string>)(resources.GetObject ("dataGridViewProgramsV.ChannelSourceIDs"))); " is 154.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewProgramsV.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewProgramsV.CellDoubleClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewProgramV_CellDoubleClick); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewProgramsV.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler (this.dataGridViewProgramV_CellFormatting); " is 152.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewProgramsV.ColumnSortModeChanged += new System.Windows.Forms.DataGridViewColumnEventHandler (this.dataGridViewV_ColumnSortModeChanged); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewProgramsV.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler (this.dataGridViewV_RowPostPaint); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripPrograms.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripPrograms_Opening); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemProgramDisplayInformation.Click += new System.EventHandler (this.displayProgramInformationToolStripMenuItem1_Click); " is 136.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemProgramDisplayRelatedAssetInformation.Name = "ContextMenuItemProgramDisplayRelatedAssetInformation"; " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.ContextMenuItemProgramDisplayRelatedAssetInformation' "ContextMenuItemProgramDisplayRelatedAssetInformation"); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemProgramDisplayRelatedAssetInformation.Click += new System.EventHandler (this.displayRelatedAssetInformationToolStripMenuItem_Click); " is 152.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.deleteAllLocatorsToolStripMenuItem1.Click += new System.EventHandler (this.deleteAllLocatorsToolStripMenuItem1_Click); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.ContextMenuItemProgramCopyTheOutputURLToClipboard' "ContextMenuItemProgramCopyTheOutputURLToClipboard"); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemProgramCopyTheOutputURLToClipboard.Click += new System.EventHandler (this.ContextMenuItemProgramCopyTheOutputURLToClipboard_Click); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withAzureMediaPlayerToolStripMenuItem2.DropDownOpening += new System.EventHandler (this.withAzureMediaPlayerToolStripMenuItem2_DropDownOpening); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withAzureMediaPlayerToolStripMenuItem2.Click += new System.EventHandler (this.withAzureMediaPlayerToolStripMenuItem2_Click); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withCustomPlayerToolStripMenuItem2.Click += new System.EventHandler (this.withCustomPlayerToolStripMenuItem2_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.comboBoxStatusProgram.SelectedIndexChanged += new System.EventHandler (this.comboBoxStatusProgram_SelectedIndexChanged); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.comboBoxFilterTimeProgram.SelectedIndexChanged += new System.EventHandler (this.comboBoxTimeProgram_SelectedIndexChanged); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewChannelsV.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewChannelsV.CellDoubleClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewLiveV_CellDoubleClick); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewChannelsV.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler (this.dataGridViewLiveV_CellFormatting); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewChannelsV.ColumnSortModeChanged += new System.Windows.Forms.DataGridViewColumnEventHandler (this.dataGridViewV_ColumnSortModeChanged); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewChannelsV.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler (this.dataGridViewV_RowPostPaint); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripChannels.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripChannels_Opening); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemChannelDisplayInfomation.Click += new System.EventHandler (this.displayChannelInfomationToolStripMenuItem_Click); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemChannelAdAndSlateControl.Click += new System.EventHandler (this.adAndSlateControlToolStripMenuItem_Click); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.ContextMenuItemChannelCopyIngestURLToClipboard' "ContextMenuItemChannelCopyIngestURLToClipboard"); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemChannelCopyIngestURLToClipboard.DropDownOpening += new System.EventHandler (this.ContextMenuItemChannelCopyIngestURLToClipboard_DropDownOpening); " is 165.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.secondaryInputURLToolStripMenuItem.Click += new System.EventHandler (this.secondaryInputURLToolStripMenuItem_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.ContextMenuItemChannelRunOnPremisesLiveEncoder' "ContextMenuItemChannelRunOnPremisesLiveEncoder"); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemChannelRunOnPremisesLiveEncoder.Click += new System.EventHandler (this.runALocalEncoderToolStripMenuItem_Click); " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.ContextMenuItemChannelCopyPreviewURLToClipboard' "ContextMenuItemChannelCopyPreviewURLToClipboard"); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemChannelCopyPreviewURLToClipboard.Click += new System.EventHandler (this.copyPreviewURLToClipboard_Click); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withAzureMediaPlayerToolStripMenuItem4.Click += new System.EventHandler (this.withAzureMediaPlayerToolStripMenuItem4_Click); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.comboBoxStatusChannel.SelectedIndexChanged += new System.EventHandler (this.comboBoxStatusChannel_SelectedIndexChanged); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.comboBoxFilterTimeChannel.SelectedIndexChanged += new System.EventHandler (this.comboBoxFilterTimeChannel_SelectedIndexChanged); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewProcessors.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 128.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewProcessors.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler (this.dataGridViewV_RowPostPaint); " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewStreamingEndpointsV.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewStreamingEndpointsV.CellDoubleClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewOriginsV_CellDoubleClick); " is 154.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewStreamingEndpointsV.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler (this.dataGridViewOriginsV_CellFormatting); " is 162.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewStreamingEndpointsV.ColumnSortModeChanged += new System.Windows.Forms.DataGridViewColumnEventHandler (this.dataGridViewV_ColumnSortModeChanged); " is 161.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewStreamingEndpointsV.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler (this.dataGridViewV_RowPostPaint); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripStreaminEndpoints.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripStreaminEndpoints_Opening); " is 144.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ContextMenuItemOriginDisplayInformation.Click += new System.EventHandler (this.displayOriginInformationToolStripMenuItem1_Click); " is 134.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.createStreamingEndpointToolStripMenuItem.Click += new System.EventHandler (this.createStreamingEndpointToolStripMenuItem_Click); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewStorage.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewStorage.CellDoubleClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewStorage_CellDoubleClick); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dataGridViewStorage.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler (this.dataGridViewV_RowPostPaint); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripStorage.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripStorage_Opening); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.attachAnotherStorageAccountToolStripMenuItem' "attachAnotherStorageAccountToolStripMenuItem"); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.attachAnotherStorageAccountToolStripMenuItem.Click += new System.EventHandler (this.attachAnotherStorageAccountToolStripMenuItem_Click); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.label5.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(39))))' ((int)(((byte)(167))))' ((int)(((byte)(223))))); " is 126.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.menuStripMain.ItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.menuStrip1_ItemClicked); " is 122.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.createOutlookReportEmailToolStripMenuItem1' "createOutlookReportEmailToolStripMenuItem1"); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.visibleAssetsInGridToolStripMenuItem.Click += new System.EventHandler (this.visibleAssetsInGridToolStripMenuItem_Click); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.mergeSelectedAssetsToolStripMenuItem.Click += new System.EventHandler (this.mergeSelectedAssetsToolStripMenuItem_Click_1); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.checkIntegrityOfLiveArchiveToolStripMenuItem1' "checkIntegrityOfLiveArchiveToolStripMenuItem1"); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.checkIntegrityOfLiveArchiveToolStripMenuItem1.Click += new System.EventHandler (this.checkIntegrityOfLiveArchiveToolStripMenuItem1_Click_1); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.fixSystemBitrateInManifestjan15FixToolStripMenuItem' "fixSystemBitrateInManifestjan15FixToolStripMenuItem"); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.fixSystemBitrateInManifestjan15FixToolStripMenuItem.Click += new System.EventHandler (this.fixSystemBitrateInManifestjan15FixToolStripMenuItem_Click_1); " is 157.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.filesToSelectedAssetsToolStripMenuItem.Click += new System.EventHandler (this.filesToSelectedAssetsToolStripMenuItem_Click); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.fromMultipleFilesToolStripMenuItem.Click += new System.EventHandler (this.fromMultipleFilesToolStripMenuItem_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.setupAWatchFolderToolStripMenuItem.Click += new System.EventHandler (this.setupAWatchFolderToolStripMenuItem_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.withAnExternalAsperaSignantAzCopyToolStripMenuItem' "withAnExternalAsperaSignantAzCopyToolStripMenuItem"); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withAnExternalAsperaSignantAzCopyToolStripMenuItem.Click += new System.EventHandler (this.withAnExternalAsperaSignantAzCopyToolStripMenuItem_Click); " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.fromAzureStoragecontainerSASUrlToolStripMenuItem' "fromAzureStoragecontainerSASUrlToolStripMenuItem"); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.fromAzureStoragecontainerSASUrlToolStripMenuItem.Click += new System.EventHandler (this.fromAzureStoragecontainerSASUrlToolStripMenuItem_Click); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.fromASingleHTTPURLAmazonS3EtcToolStripMenuItem' "fromASingleHTTPURLAmazonS3EtcToolStripMenuItem"); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.fromASingleHTTPURLAmazonS3EtcToolStripMenuItem.Click += new System.EventHandler (this.fromASingleHTTPURLAmazonS3EtcToolStripMenuItem_Click); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.copyAssetFilesToAzureStorageToolStripMenuItem' "copyAssetFilesToAzureStorageToolStripMenuItem"); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.informationToExcelToolStripMenuItem.Click += new System.EventHandler (this.informationToExcelToolStripMenuItem_Click); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.toAnotherAzureMediaServicesAccountToolStripMenuItem' "toAnotherAzureMediaServicesAccountToolStripMenuItem"); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.toAnotherAzureMediaServicesAccountToolStripMenuItem.Click += new System.EventHandler (this.toAnotherAzureMediaServicesAccountToolStripMenuItem_Click); " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.testQueryAllAssetFilesToolStripMenuItem1.Click += new System.EventHandler (this.testQueryAllAssetFilesToolStripMenuItem1_Click); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.testQueryAllFilesToolStripMenuItem.Click += new System.EventHandler (this.testQueryAllFilesToolStripMenuItem_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.transferToolStripMenuItem.DropDownOpening += new System.EventHandler (this.transferToolStripMenuItem_DropDownOpening); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.toolStripMenuItem38CopyBulkURL.Click += new System.EventHandler (this.copyIngestURLToClipboardToolStripMenuItem_Click); " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.clearCompletedTransfersToolStripMenuItem.Click += new System.EventHandler (this.clearCompletedTransfersToolStripMenuItem_Click); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.encodeAssetWithAMEStandardToolStripMenuItem' "encodeAssetWithAMEStandardToolStripMenuItem"); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.generateThumbnailsForTheAssetsToolStripMenuItem' "generateThumbnailsForTheAssetsToolStripMenuItem"); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.generateThumbnailsForTheAssetsToolStripMenuItem.Click += new System.EventHandler (this.generateThumbnailsForTheAssetsToolStripMenuItem_Click); " is 147.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.encodeAssetWithPremiumWorkflowToolStripMenuItem' "encodeAssetWithPremiumWorkflowToolStripMenuItem"); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.encodeAssetWithPremiumWorkflowToolStripMenuItem.Click += new System.EventHandler (this.encodeAssetWithDigitalRapidsKayakCloudEngineToolStripMenuItem_Click); " is 161.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.subclipLiveStreamsarchivesToolStripMenuItem' "subclipLiveStreamsarchivesToolStripMenuItem"); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.subclipLiveStreamsarchivesToolStripMenuItem.Click += new System.EventHandler (this.subclipLiveStreamsarchivesToolStripMenuItem_Click); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.processAssetsWithHyperlapseToolStripMenuItem' "processAssetsWithHyperlapseToolStripMenuItem"); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithHyperlapseToolStripMenuItem.Click += new System.EventHandler (this.processAssetsWithHyperlapseToolStripMenuItem_Click_1); " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ProcessFaceDetectortoolStripMenuItem.Click += new System.EventHandler (this.ProcessFaceDetectortoolStripMenuItem_Click_1); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ProcessMotionDetectortoolStripMenuItem.Click += new System.EventHandler (this.ProcessMotionDetectortoolStripMenuItem_Click_1); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ProcessStabilizertoolStripMenuItem.Click += new System.EventHandler (this.ProcessStabilizertoolStripMenuItem_Click_1); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ProcessVideoThumbnailstoolStripMenuItem.Click += new System.EventHandler (this.ProcessVideoThumbnailstoolStripMenuItem_Click_1); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaVideoOCRToolStripMenuItem.Name = "processAssetsWithAzureMediaVideoOCRToolStripMenuItem"; " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.processAssetsWithAzureMediaVideoOCRToolStripMenuItem' "processAssetsWithAzureMediaVideoOCRToolStripMenuItem"); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaVideoOCRToolStripMenuItem.Click += new System.EventHandler (this.processAssetsWithAzureMediaVideoOCRToolStripMenuItem_Click); " is 157.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaContentModeratorToolStripMenuItem.Image = global::AMSExplorer.Bitmaps.contentmoderation; " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaContentModeratorToolStripMenuItem.Name = "processAssetsWithAzureMediaContentModeratorToolStripMenuItem"; " is 136.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.processAssetsWithAzureMediaContentModeratorToolStripMenuItem' "processAssetsWithAzureMediaContentModeratorToolStripMenuItem"); " is 157.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaContentModeratorToolStripMenuItem.Click += new System.EventHandler (this.DoMenuContentModerator_Click); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem.Name = "processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem"; " is 132.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem' "processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem"); " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAzureMediaVideoAnnotatorToolStripMenuItem.Click += new System.EventHandler (this.DoMenuVideoAnnotator_Click); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.processAssetsWithAJobTemplateToolStripMenuItem' "processAssetsWithAJobTemplateToolStripMenuItem"); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsWithAJobTemplateToolStripMenuItem.Click += new System.EventHandler (this.processAssetsWithAJobTemplateToolStripMenuItem_Click); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.processAssetsadvancedModeWithToolStripMenuItem' "processAssetsadvancedModeWithToolStripMenuItem"); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.processAssetsadvancedModeWithToolStripMenuItem.Click += new System.EventHandler (this.processAssetsadvancedModeWithToolStripMenuItem_Click); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.encodeAssetsWithMediaEncodersystemPresetToolStripMenuItem.DropDownItems.AddRange (new System.Windows.Forms.ToolStripItem[] { " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.encodeAssetsWithMediaEncodersystemPresetToolStripMenuItem.Name = "encodeAssetsWithMediaEncodersystemPresetToolStripMenuItem"; " is 130.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.encodeAssetsWithMediaEncodersystemPresetToolStripMenuItem' "encodeAssetsWithMediaEncodersystemPresetToolStripMenuItem"); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.validateTheMultiMP4AssetsToolStripMenuItem1' "validateTheMultiMP4AssetsToolStripMenuItem1"); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.validateTheMultiMP4AssetsToolStripMenuItem1.Click += new System.EventHandler (this.validateTheMultiMP4AssetsToolStripMenuItem1_Click); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.packageTheMultiMP4AssetsToSmoothStreamingstaticToolStripMenuItem1.Name = "packageTheMultiMP4AssetsToSmoothStreamingstaticToolStripMenuItem1"; " is 146.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.packageTheMultiMP4AssetsToSmoothStreamingstaticToolStripMenuItem1' "packageTheMultiMP4AssetsToSmoothStreamingstaticToolStripMenuItem1"); " is 167.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.packageTheMultiMP4AssetsToSmoothStreamingstaticToolStripMenuItem1.Click += new System.EventHandler (this.packageTheMultiMP4AssetsToSmoothStreamingstaticToolStripMenuItem1_Click); " is 183.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.encryptTheSmoothStreamingAssetsWithPlayReadystaticToolStripMenuItem1.Image = global::AMSExplorer.Bitmaps.DRM_protection; " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.encryptTheSmoothStreamingAssetsWithPlayReadystaticToolStripMenuItem1.Name = "encryptTheSmoothStreamingAssetsWithPlayReadystaticToolStripMenuItem1"; " is 152.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.encryptTheSmoothStreamingAssetsWithPlayReadystaticToolStripMenuItem1' "encryptTheSmoothStreamingAssetsWithPlayReadystaticToolStripMenuItem1"); " is 173.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.encryptTheSmoothStreamingAssetsWithPlayReadystaticToolStripMenuItem1.Click += new System.EventHandler (this.encryptTheSmoothStreamingAssetsWithPlayReadystaticToolStripMenuItem1_Click); " is 189.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.packageTheSmoothStreamingAssetsToHLSV3staticToolStripMenuItem1.Name = "packageTheSmoothStreamingAssetsToHLSV3staticToolStripMenuItem1"; " is 140.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.packageTheSmoothStreamingAssetsToHLSV3staticToolStripMenuItem1' "packageTheSmoothStreamingAssetsToHLSV3staticToolStripMenuItem1"); " is 161.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.packageTheSmoothStreamingAssetsToHLSV3staticToolStripMenuItem1.Click += new System.EventHandler (this.packageTheSmoothStreamingAssetsToHLSV3staticToolStripMenuItem1_Click); " is 177.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.displayJobInformationToolStripMenuItem.Click += new System.EventHandler (this.displayJobInformationToolStripMenuItem_Click); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.inputAssetInformationToolStripMenuItem.Click += new System.EventHandler (this.inputAssetInformationToolStripMenuItem_Click); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.outputAssetInformationToolStripMenuItem.Click += new System.EventHandler (this.outputAssetInformationToolStripMenuItem_Click); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.visibleJobsInGridToolStripMenuItem.Click += new System.EventHandler (this.visibleJobsInGridToolStripMenuItem_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.publishToolStripMenuItem.DropDownOpening += new System.EventHandler (this.publishToolStripMenuItem_DropDownOpening); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.setupDynamicEncryptionForTheAssetsToolStripMenuItem' "setupDynamicEncryptionForTheAssetsToolStripMenuItem"); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.setupDynamicEncryptionForTheAssetsToolStripMenuItem.Click += new System.EventHandler (this.setupDynamicEncryptionForTheAssetsToolStripMenuItem_Click); " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.removeDynamicEncryptionForTheAssetsToolStripMenuItem.Name = "removeDynamicEncryptionForTheAssetsToolStripMenuItem"; " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.removeDynamicEncryptionForTheAssetsToolStripMenuItem' "removeDynamicEncryptionForTheAssetsToolStripMenuItem"); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.removeDynamicEncryptionForTheAssetsToolStripMenuItem.Click += new System.EventHandler (this.removeDynamicEncryptionForTheAssetsToolStripMenuItem_Click); " is 157.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.removeKeysForTheAssetsToolStripMenuItem1.Click += new System.EventHandler (this.removeKeysForTheAssetsToolStripMenuItem1_Click); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.createALocatorForTheAssetToolStripMenuItem' "createALocatorForTheAssetToolStripMenuItem"); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.createALocatorForTheAssetToolStripMenuItem.Click += new System.EventHandler (this.createALocatorForTheAssetToolStripMenuItem_Click); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.extendExistingStreamingLocatorsToolStripMenuItem' "extendExistingStreamingLocatorsToolStripMenuItem"); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.extendExistingStreamingLocatorsToolStripMenuItem.Click += new System.EventHandler (this.extendExistingStreamingLocatorsToolStripMenuItem_Click); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.deleteAllLocatorsOfTheAssetToolStripMenuItem' "deleteAllLocatorsOfTheAssetToolStripMenuItem"); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.deleteAllLocatorsOfTheAssetToolStripMenuItem.Click += new System.EventHandler (this.deleteAllLocatorsOfTheAssetToolStripMenuItem_Click); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.findTheAssetFromTheLocatorToolStripMenuItem' "findTheAssetFromTheLocatorToolStripMenuItem"); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.findTheAssetFromTheLocatorToolStripMenuItem.Click += new System.EventHandler (this.findTheAssetFromTheLocatorToolStripMenuItem_Click); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.createAnAssetFilterToolStripMenuItem1.Click += new System.EventHandler (this.createAnAssetFilterToolStripMenuItem1_Click); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.playbackToolStripMenuItem.DropDownOpening += new System.EventHandler (this.playbackToolStripMenuItem_DropDownOpening); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withAzureMediaPlayerToolStripMenuItem1.DropDownOpening += new System.EventHandler (this.withAzureMediaPlayerToolStripMenuItem1_DropDownOpening); " is 149.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withAzureMediaPlayerToolStripMenuItem1.Click += new System.EventHandler (this.withAzureMediaPlayerToolStripMenuItem1_Click); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withMPEGDASHIFRefPlayerToolStripMenuItem.Click += new System.EventHandler (this.withMPEGDASHIFRefPlayerToolStripMenuItem_Click); " is 133.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.liveChannelToolStripMenuItem.DropDownOpening += new System.EventHandler (this.liveChannelToolStripMenuItem_DropDownOpening); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.channelsAdAndSlateControlToolStripMenuItem' "channelsAdAndSlateControlToolStripMenuItem"); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.channelsAdAndSlateControlToolStripMenuItem.Click += new System.EventHandler (this.channelsAdAndSlateControlToolStripMenuItem_Click); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.copyInputURLToClipboardToolStripMenuItem.DropDownOpening += new System.EventHandler (this.copyInputURLToClipboardToolStripMenuItem_DropDownOpening); " is 153.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.secondaryInputURLToolStripMenuItem1.Click += new System.EventHandler (this.secondaryInputURLToolStripMenuItem1_Click); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.runAnOnpremisesLiveEncoderToolStripMenuItem' "runAnOnpremisesLiveEncoderToolStripMenuItem"); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.runAnOnpremisesLiveEncoderToolStripMenuItem.Click += new System.EventHandler (this.runAnOnpremisesLiveEncoderToolStripMenuItem_Click); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.copyPreviewURLToClipboardToolStripMenuItem' "copyPreviewURLToClipboardToolStripMenuItem"); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.copyPreviewURLToClipboardToolStripMenuItem.Click += new System.EventHandler (this.copyPreviewURLToClipboard_Click); " is 120.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.withAzureMediaPlayerToolStripMenuItem3.Click += new System.EventHandler (this.withAzureMediaPlayerToolStripMenuItem3_Click); " is 129.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.displayProgramInformationToolStripMenuItem' "displayProgramInformationToolStripMenuItem"); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.displayProgramInformationToolStripMenuItem.Click += new System.EventHandler (this.displayProgramInformationToolStripMenuItem_Click); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ProgramDisplayRelatedAssetInformationToolStripMenuItem.Name = "ProgramDisplayRelatedAssetInformationToolStripMenuItem"; " is 124.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.ProgramDisplayRelatedAssetInformationToolStripMenuItem' "ProgramDisplayRelatedAssetInformationToolStripMenuItem"); " is 145.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.ProgramDisplayRelatedAssetInformationToolStripMenuItem.Click += new System.EventHandler (this.displayRelatedAssetInformationToolStripMenuItem1_Click); " is 155.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.subclipLiveStreamsarchivesToolStripMenuItem1' "subclipLiveStreamsarchivesToolStripMenuItem1"); " is 125.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.subclipLiveStreamsarchivesToolStripMenuItem1.Click += new System.EventHandler (this.subclipLiveStreamsarchivesToolStripMenuItem1_Click); " is 141.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.displayOriginInformationToolStripMenuItem.Click += new System.EventHandler (this.displayOriginInformationToolStripMenuItem_Click); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.optinToStandardStreamingEndpointToolStripMenuItem' "optinToStandardStreamingEndpointToolStripMenuItem"); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.optinToStandardStreamingEndpointToolStripMenuItem.Click += new System.EventHandler (this.optinToStandardStreamingEndpointToolStripMenuItem_Click); " is 151.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.azureManagementPortalToolStripMenuItem1.Click += new System.EventHandler (this.azureManagementPortalToolStripMenuItem1_Click); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.attachAnotherStoragheAccountToolStripMenuItem' "attachAnotherStoragheAccountToolStripMenuItem"); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.attachAnotherStoragheAccountToolStripMenuItem.Click += new System.EventHandler (this.attachAnotherStoragheAccountToolStripMenuItem_Click); " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.configureTelemetryToolStripMenuItem.Click += new System.EventHandler (this.configureTelemetryToolStripMenuItem_Click); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.azureMediaServicesSamplesToolStripMenuItem' "azureMediaServicesSamplesToolStripMenuItem"); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.azureMediaServicesSamplesToolStripMenuItem.Click += new System.EventHandler (this.azureMediaServicesSamplesToolStripMenuItem_Click); " is 137.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.azureMediaServicesPlayerPageToolStripMenuItem' "azureMediaServicesPlayerPageToolStripMenuItem"); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.azureMediaServicesPlayerPageToolStripMenuItem.Click += new System.EventHandler (this.azureMediaServicesPlayerPageToolStripMenuItem_Click); " is 143.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.dASHIFHTML5ReferencePlayerToolStripMenuItem' "dASHIFHTML5ReferencePlayerToolStripMenuItem"); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.dASHIFHTML5ReferencePlayerToolStripMenuItem.Click += new System.EventHandler (this.dASHIFHTML5ReferencePlayerToolStripMenuItem_Click); " is 139.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.hTML5VideoElementToolStripMenuItem.Click += new System.EventHandler (this.hTML5VideoElementToolStripMenuItem_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.hTML5CaptionMakerToolStripMenuItem.Click += new System.EventHandler (this.hTML5CaptionMakerToolStripMenuItem_Click); " is 121.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.azureMediaHelpFileToolStripMenuItem.Click += new System.EventHandler (this.azureMediaHelpFileToolStripMenuItem_Click); " is 123.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.azureMediaServicesReleaseNotesToolStripMenuItem' "azureMediaServicesReleaseNotesToolStripMenuItem"); " is 131.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.azureMediaServicesReleaseNotesToolStripMenuItem.Click += new System.EventHandler (this.azureMediaServicesReleaseNotesToolStripMenuItem_Click); " is 147.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.azureMediaServicesMSDNToolStripMenuItem.Click += new System.EventHandler (this.azureMediaServicesDocumentationToolStripMenuItem_Click_1); " is 142.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.azureMediaServicesForumToolStripMenuItem.Click += new System.EventHandler (this.azureMediaServicesForumToolStripMenuItem_Click_1); " is 135.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.explorerReleaseNotesToolStripMenuItem.Click += new System.EventHandler (this.explorerReleaseNotesToolStripMenuItem_Click); " is 127.
Long Statement,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The length of the statement  "	this.linkLabelFeedbackAMS.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabelFeedbackAMS_LinkClicked); " is 139.
Long Statement,AMSExplorer,JobOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobOptions.cs,ControlsResetToDefault,The length of the statement  "		comboBoxStorage.Items.Add (new Item (string.Format ("{0} {1}"' storage.Name' storage.IsDefault ? "(default)" : "")' storage.Name)); " is 131.
Long Statement,AMSExplorer,JobOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobOptions.cs,ControlsResetToDefault,The length of the statement  "	checkBoxUseStorageEncryption.Checked = defaultSettings.OutputAssetsCreationOptions == AssetCreationOptions.StorageEncrypted; " is 124.
Long Statement,AMSExplorer,JobOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobOptions.cs,Display,The length of the statement  "		savedSettings.TasksOptionsSetting = checkBoxUseProtectedConfig.Checked ? TaskOptions.ProtectedConfiguration : TaskOptions.None; " is 127.
Long Statement,AMSExplorer,JobOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobOptions.cs,Display,The length of the statement  "		savedSettings.OutputAssetsCreationOptions = checkBoxUseStorageEncryption.Checked ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None; " is 149.
Long Statement,AMSExplorer,JobOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobOptions.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(JobOptions)); " is 131.
Long Statement,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,Hyperlapse_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkMoreInfoHyperlapse)); " is 122.
Long Statement,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,Hyperlapse_Load,The length of the statement  "	linkLabelHowItWorks.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkHowItWorksHyperlapse)); " is 124.
Long Statement,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,textBoxConfiguration_TextChanged,The length of the statement  "	textBoxConfiguration.Text = textBoxConfiguration.Text.Replace ("\r\n"' "\n").Replace ("\r"' "\n").Replace ("\n"' Environment.NewLine); " is 134.
Long Statement,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,textBoxConfiguration_TextChanged,The length of the statement  "			labelWarningJSON.Text = string.Format (AMSExplorer.Properties.Resources.EncodingMES_textBoxConfiguration_TextChanged_ErrorInXMLData0' ex.Message); " is 146.
Long Statement,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Hyperlapse)); " is 131.
Long Statement,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The length of the statement  "	this.linkLabelHowItWorks.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabelHowItWorks_LinkClicked); " is 137.
Long Statement,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The length of the statement  "	this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,IndexerOptions,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerOptions.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(IndexerOptions)); " is 135.
Long Statement,AMSExplorer,Splash,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Splash.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Splash)); " is 127.
Long Statement,AMSExplorer,AboutBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AboutBox.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AboutBox)); " is 129.
Long Statement,AMSExplorer,AboutBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AboutBox.cs,InitializeComponent,The length of the statement  "	this.linkLabelWebSite.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabelWebSite_LinkClicked); " is 131.
Long Statement,AMSExplorer,AboutBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AboutBox.cs,InitializeComponent,The length of the statement  "	this.linkLabelContact.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabelContact_LinkClicked); " is 131.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The length of the statement  "			MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_AMSLogin_Load_ErrorReadingCredentialsSettingsHaveBeenDeleted); " is 121.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The length of the statement  "			CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9]))); " is 819.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The length of the statement  "			CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials)); " is 133.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonSaveToList_Click,The length of the statement  "            CredentialsEntry myCredentials = new CredentialsEntry(textBoxAccountName.Text' textBoxAccountKey.Text' textBoxBlobKey.Text' textBoxDescription.Text' radioButtonPartner.Checked.ToString()' radioButtonOther.Checked.ToString()' textBoxAPIServer.Text' textBoxScope.Text' textBoxACSBaseAddress.Text' textBoxAzureEndpoint.Text' textBoxManagementPortal.Text);" is 352.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonSaveToList_Click,The length of the statement  "                for (int i = 0; i < CredentialsEntry.StringsCount; i++) CredentialsList.Insert(foundindex + i' myCredentials.ToArray().Skip(i).Take(1).FirstOrDefault());" is 153.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonSaveToList_Click,The length of the statement  "	CredentialsEntry myCredentials = new CredentialsEntry (textBoxAccountName.Text' textBoxAccountKey.Text' textBoxBlobKey.Text' textBoxAccountID.Text' textBoxDescription.Text' radioButtonPartner.Checked' radioButtonOther.Checked' textBoxAPIServer.Text' textBoxScope.Text' textBoxACSBaseAddress.Text' textBoxAzureEndpoint.Text' textBoxManagementPortal.Text); " is 354.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonSaveToList_Click,The length of the statement  "	var entryWithSameName = CredentialList.MediaServicesAccounts.Where (c => c.AccountName.ToLower ().Trim () == textBoxAccountName.Text.ToLower ().Trim ()).FirstOrDefault (); " is 171.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonSaveToList_Click,The length of the statement  "		CredentialList.MediaServicesAccounts [CredentialList.MediaServicesAccounts.IndexOf (entryWithSameName)] = myCredentials; " is 120.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonDeleteAccount_Click,The length of the statement  "                for (int i = 0; i < CredentialsEntry.StringsCount; i++) CredentialsList.RemoveAt(index * CredentialsEntry.StringsCount);" is 120.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonLogin_Click,The length of the statement  "	CredentialsEntry myCredentials = new CredentialsEntry (textBoxAccountName.Text' textBoxAccountKey.Text' textBoxBlobKey.Text' textBoxAccountID.Text' textBoxDescription.Text' radioButtonPartner.Checked' radioButtonOther.Checked' textBoxAPIServer.Text' textBoxScope.Text' textBoxACSBaseAddress.Text' textBoxAzureEndpoint.Text' textBoxManagementPortal.Text); " is 354.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonLogin_Click,The length of the statement  "	var entryWithSameName = CredentialList.MediaServicesAccounts.Where (c => c.AccountName.ToLower ().Trim () == textBoxAccountName.Text.ToLower ().Trim ()).FirstOrDefault (); " is 171.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonLogin_Click,The length of the statement  "		//CredentialList.MediaServicesAccounts[CredentialList.MediaServicesAccounts.IndexOf(entryWithSameName)] = myCredentials; " is 120.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonLogin_Click,The length of the statement  "		var result = MessageBox.Show (string.Format (AMSExplorer.Properties.Resources.AMSLogin_buttonLogin_Click_DoYouWantToSaveTheCredentialsFor0' textBoxAccountName.Text)' AMSExplorer.Properties.Resources.AMSLogin_buttonLogin_Click_SaveCredentials' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 299.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonLogin_Click,The length of the statement  "			var result = MessageBox.Show (string.Format (AMSExplorer.Properties.Resources.AMSLogin_buttonLogin_Click_DoYouWantToUpdateTheCredentialsFor0' myCredentials.AccountName)' AMSExplorer.Properties.Resources.AMSLogin_listBoxAccounts_SelectedIndexChanged_UpdateCredentials' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 324.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonLogin_Click,The length of the statement  "				CredentialList.MediaServicesAccounts [CredentialList.MediaServicesAccounts.IndexOf (entryWithSameName)] = LoginCredentials; " is 123.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,listBoxAccounts_SelectedIndexChanged,The length of the statement  "                radioButtonPartner.Checked = CredentialsList[listBoxAcounts.SelectedIndex * CredentialsEntry.StringsCount + 4] == true.ToString() ? true : false;" is 145.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,listBoxAccounts_SelectedIndexChanged,The length of the statement  "                radioButtonOther.Checked = CredentialsList[listBoxAcounts.SelectedIndex * CredentialsEntry.StringsCount + 5] == true.ToString() ? true : false;" is 143.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,listBoxAccounts_SelectedIndexChanged,The length of the statement  "                textBoxAzureEndpoint.Text = ReturnAzureEndpoint(CredentialsList[listBoxAcounts.SelectedIndex * CredentialsEntry.StringsCount + 9]);" is 131.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,listBoxAccounts_SelectedIndexChanged,The length of the statement  "                textBoxManagementPortal.Text = ReturnManagementPortal(CredentialsList[listBoxAcounts.SelectedIndex * CredentialsEntry.StringsCount + 9]);" is 137.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,listBoxAccounts_SelectedIndexChanged,The length of the statement  "			var entryWithSameName = CredentialList.MediaServicesAccounts.Where (c => c.AccountName.ToLower ().Trim () == CurrentCredential.AccountName.ToLower ().Trim ()).FirstOrDefault (); " is 177.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,listBoxAccounts_SelectedIndexChanged,The length of the statement  "				var result = MessageBox.Show (string.Format (AMSExplorer.Properties.Resources.AMSLogin_buttonLogin_Click_DoYouWantToUpdateTheCredentialsFor0' CurrentCredential.AccountName)' AMSExplorer.Properties.Resources.AMSLogin_listBoxAccounts_SelectedIndexChanged_UpdateCredentials' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 328.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,listBoxAccounts_SelectedIndexChanged,The length of the statement  "					CredentialList.MediaServicesAccounts [CredentialList.MediaServicesAccounts.IndexOf (entryWithSameName)] = LoginCredentials; " is 123.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,radioButtonOther_CheckedChanged,The length of the statement  "	textBoxACSBaseAddress.Enabled = textBoxAPIServer.Enabled = textBoxScope.Enabled = textBoxAzureEndpoint.Enabled = textBoxManagementPortal.Enabled = buttonAddMapping.Enabled = comboBoxMappingList.Enabled = radioButtonOther.Checked; " is 229.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonExport_Click,The length of the statement  "	if (CredentialList.MediaServicesAccounts.Count > 1 && listBoxAcounts.SelectedIndex > -1)// There are more than one entry and one has been selected. Let's ask if user want to export all or not " is 191.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonExport_Click,The length of the statement  "		var diag = System.Windows.Forms.MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_DoYouWantToExportAllEntriesNNSelectYesToExportAllNoToExportTheSelection' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_ExportAllEntries' System.Windows.Forms.MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 339.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonExport_Click,The length of the statement  "				System.IO.File.WriteAllText (saveFileDialog1.FileName' JsonConvert.SerializeObject (CredentialList' Newtonsoft.Json.Formatting.Indented)); " is 138.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonExport_Click,The length of the statement  "				System.IO.File.WriteAllText (saveFileDialog1.FileName' JsonConvert.SerializeObject (copyEntry' Newtonsoft.Json.Formatting.Indented)); " is 133.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonExport_Click,The length of the statement  "			MessageBox.Show (ex.Message' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 141.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonImportAll_Click,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_buttonImportAll_Click_ThereAreCurrentEntriesInTheListNDoYouWantReplaceThemWithTheNewOnesOrDoAMergeNNSelectYesToReplaceThemNoToMergeThem' AMSExplorer.Properties.Resources.AMSLogin_buttonImportAll_Click_ImportAndReplace' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.No) { " is 416.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonImportAll_Click,The length of the statement  "			Version version = new Version (xmlimport.Descendants ("Credentials").Attributes ("Version").FirstOrDefault ().Value.ToString ()); " is 129.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonImportAll_Click,The length of the statement  "						CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (att.Attribute ("AccountName").Value.ToString ()' att.Attribute ("AccountKey").Value.ToString ()' att.Attribute ("StorageKey").Value.ToString ()' string.Empty' // media services id not stored in XML " is 261.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonImportAll_Click,The length of the statement  "						att.Attribute ("Description").Value.ToString ()' att.Attribute ("UsePartnerAPI").Value.ToString () == true.ToString () ? true : false' att.Attribute ("UseOtherAPI").Value.ToString () == true.ToString () ? true : false' att.Attribute ("OtherAPIServer").Value.ToString ()' att.Attribute ("OtherScope").Value.ToString ()' att.Attribute ("OtherACSBaseAddress").Value.ToString ()' OtherAzureEndpoint' OtherManagementPortal)); " is 420.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AMSLogin)); " is 129.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,InitializeComponent,The length of the statement  "	this.textBoxAccountName.Validating += new System.ComponentModel.CancelEventHandler (this.textBoxAccountName_Validating); " is 120.
Long Statement,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,InitializeComponent,The length of the statement  "	this.accountmgtlink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.accountmgtlink_LinkClicked); " is 127.
Long Statement,AMSExplorer,MetadataInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MetadataInformation.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MetadataInformation)); " is 140.
Long Statement,AMSExplorer,MetadataInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MetadataInformation.cs,InitializeComponent,The length of the statement  "	this.DGMetadataVideo.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 121.
Long Statement,AMSExplorer,MetadataInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MetadataInformation.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripGrid.MouseClick += new System.Windows.Forms.MouseEventHandler (this.contextMenuStripGrid_MouseClick); " is 122.
Long Statement,AMSExplorer,MetadataInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MetadataInformation.cs,InitializeComponent,The length of the statement  "	this.DGMetadataAudio.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 121.
Long Statement,AMSExplorer,BatchUploadFrame2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BatchUploadFrame2.cs,BathUploadFrame2_Load,The length of the statement  "		comboBoxStorage.Items.Add (new Item (string.Format ("{0} {1}"' storage.Name' storage.IsDefault ? AMSExplorer.Properties.Resources.BatchUploadFrame2_BathUploadFrame2_Load_Default : "")' storage.Name)); " is 200.
Long Statement,AMSExplorer,BatchUploadFrame2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BatchUploadFrame2.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(BatchUploadFrame2)); " is 138.
Long Statement,AMSExplorer,BatchUploadFrame1,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BatchUploadFrame1.cs,BathUploadFrame1_Load,The length of the statement  "	comboBoxEncryption.Items.Add (new Item (AMSExplorer.Properties.Resources.BatchUploadFrame1_BathUploadFrame1_Load_NoneNoEncryptionBeforeUpload' AssetCreationOptions.None.ToString ())); " is 183.
Long Statement,AMSExplorer,BatchUploadFrame1,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BatchUploadFrame1.cs,BathUploadFrame1_Load,The length of the statement  "	comboBoxEncryption.Items.Add (new Item (AMSExplorer.Properties.Resources.BatchUploadFrame1_BathUploadFrame1_Load_StorageEncryptionContentWillBeEncryptedLocallyToAES256BeforeUpload' AssetCreationOptions.StorageEncrypted.ToString ())); " is 233.
Long Statement,AMSExplorer,BatchUploadFrame1,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BatchUploadFrame1.cs,BathUploadFrame1_Load,The length of the statement  "	comboBoxEncryption.Items.Add (new Item (AMSExplorer.Properties.Resources.BatchUploadFrame1_BathUploadFrame1_Load_CommonEncryptionContentIsAlreadyEncryptedWithPlayReady' AssetCreationOptions.CommonEncryptionProtected.ToString ())); " is 230.
Long Statement,AMSExplorer,BatchUploadFrame1,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BatchUploadFrame1.cs,buttonNext_Click,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.BatchUploadFrame1_buttonNext_Click_FolderDoesNotExist' AMSExplorer.Properties.Resources.BatchUploadFrame1_buttonNext_Click_Folder' MessageBoxButtons.OK' MessageBoxIcon.Stop); " is 224.
Long Statement,AMSExplorer,BatchUploadFrame1,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BatchUploadFrame1.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(BatchUploadFrame1)); " is 138.
Long Statement,AMSExplorer,DeleteProgramChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DeleteProgramChannel.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(DeleteProgramChannel)); " is 141.
Long Statement,AMSExplorer,AttachStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AttachStorage.cs,AttachStorage_Load,The length of the statement  "	SampleStorageURLTemplate = (_credentials.UseOtherAPI) ? CredentialsEntry.CoreAttachStorageURL + _credentials.OtherAzureEndpoint : // "https://{0}.blob.core.chinacloudapi.cn/" " is 174.
Long Statement,AMSExplorer,AttachStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AttachStorage.cs,AttachStorage_Load,The length of the statement  "		textBoxServiceManagement.Text = AMSExplorer.Properties.Resources.AttachStorage_AttachStorage_Load_PleaseInsertAzureServiceManagementURLHere; " is 140.
Long Statement,AMSExplorer,AttachStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AttachStorage.cs,LoadSubscriptionFile,The length of the statement  "				MessageBox.Show (AMSExplorer.Properties.Resources.AttachStorage_LoadSubscriptionFile_NoSubscriptionDataInTheFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 226.
Long Statement,AMSExplorer,AttachStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AttachStorage.cs,LoadSubscriptionFile,The length of the statement  "					MessageBox.Show (string.Format (AMSExplorer.Properties.Resources.AttachStorage_LoadSubscriptionFile_ThereAreSeveralSubscriptionsDataInTheFileNNTheFirstEntry0WillBeUsed' subscription.Attribute ("Name").Value)' AMSExplorer.Properties.Resources.AttachStorage_LoadSubscriptionFile_SeveralSubscriptions' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 349.
Long Statement,AMSExplorer,AttachStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AttachStorage.cs,LoadSubscriptionFile,The length of the statement  "			MessageBox.Show (AMSExplorer.Properties.Resources.AttachStorage_LoadSubscriptionFile_ErrorWhenReadingTheFileOriginalError + ex.Message' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 248.
Long Statement,AMSExplorer,AttachStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AttachStorage.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AttachStorage)); " is 134.
Long Statement,AMSExplorer,AttachStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AttachStorage.cs,InitializeComponent,The length of the statement  "	this.linkLabelAttach.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.linkLabelAttach_LinkClicked); " is 129.
Long Statement,AMSExplorer,ListViewTemplates,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,DeleteSelectedTemplate,The length of the statement  "		if (MessageBox.Show (string.Format ("Do you want to delete the job template '{0}' ?"' jobtemp.Name)' "Job template deletion"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 198.
Long Statement,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,LoadJPGs,The length of the statement  "	var query = _context.Files.Where (f => f.Name.EndsWith (Constants.SlateJPGExtension) && f.IsPrimary && f.ContentFileSize <= Constants.maxSlateJPGFileSize && (bsearchempty || f.Name.Contains (searchlower))).AsEnumerable (); " is 222.
Long Statement,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,LoadJPGs,The length of the statement  "	query = query.Where (f => bsearchempty || (f.Id.ToLower ().Contains (searchlower) || f.Asset.Name.ToLower ().Contains (searchlower) || f.Asset.Id.ToLower ().Contains (searchlower))); " is 182.
Long Statement,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,LoadJPGs,The length of the statement  "			ListViewItem item = new ListViewItem (file.Name + ((bdefaultchannelslate) ? " (default channel slate)" : string.Empty)' 0); " is 123.
Long Statement,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,CheckSlateFile,The length of the statement  "			returnString = string.Format ("The file\n'{0}'\nhas a size of {1} which is larger than {2}"' file' AssetInfo.FormatByteSize (fileInfo.Length)' AssetInfo.FormatByteSize (Constants.maxSlateJPGFileSize)); " is 201.
Long Statement,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,CheckSlateFile,The length of the statement  "		} else if (fileImage.Size.Width > Constants.maxSlateJPGHorizontalResolution || fileImage.Size.Height > Constants.maxSlateJPGVerticalResolution) { " is 145.
Long Statement,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,CheckSlateFile,The length of the statement  "			returnString = string.Format ("The file\n'{0}'\nhas a resolution  of {1}x{2} which is larger than {3}x{4}"' file' fileImage.Size.Width' fileImage.Size.Height' Constants.maxSlateJPGHorizontalResolution' Constants.maxSlateJPGVerticalResolution); " is 243.
Long Statement,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,CheckSlateFile,The length of the statement  "			returnString = string.Format ("The file\n'{0}'\nhas an aspect ratio of {1:0.000} which is different from {2:0.000} (16:9)"' file' aspectRatioImage' Constants.SlateJPGAspectRatio); " is 179.
Long Statement,AMSExplorer,ProcessFromJobTemplate,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProcessFromJobTemplate.cs,listbox_SelectedIndexChanged,The length of the statement  "		labelWarning.Text = (jtemp.NumberofInputAssets == _numberselectedassets) ? string.Empty : "Warning: the number of selected assets is different from the number expected by the template."; " is 186.
Long Statement,AMSExplorer,ProcessFromJobTemplate,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProcessFromJobTemplate.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ProcessFromJobTemplate)); " is 143.
Long Statement,AMSExplorer,ProcessFromJobTemplate,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProcessFromJobTemplate.cs,InitializeComponent,The length of the statement  "	this.label31.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,CreateMediaServiceAccountUsingXmlContentType,The length of the statement  "	HttpWebRequest request = (HttpWebRequest)WebRequest.Create (string.Format ("{0}/{1}/services/mediaservices/Accounts"' Endpoint' SubscriptionId)); " is 145.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,CreateMediaServiceAccountUsingXmlContentType,The length of the statement  "	XDocument requestBody = new XDocument (new XElement (ns + "AccountCreationRequest"' new XElement (ns + "AccountName"' accountInfo.AccountName)' new XElement (ns + "BlobStorageEndpointUri"' accountInfo.BlobStorageEndpointUri)' new XElement (ns + "Region"' accountInfo.Region)' new XElement (ns + "StorageAccountKey"' accountInfo.StorageAccountKey)' new XElement (ns + "StorageAccountName"' accountInfo.StorageAccountName))); " is 423.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,CreateMediaServiceAccountUsingXmlContentType,The length of the statement  "		throw new ApplicationException (string.Format ("Call to CreateAccount returned an error. Status Code: {0}"' statusCode)); " is 121.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,AttachStorageAccountToMediaServiceAccount,The length of the statement  "		HttpWebRequest request = (HttpWebRequest)WebRequest.Create (string.Format ("{0}/{1}/services/mediaservices/Accounts/{2}/StorageAccounts"' Endpoint' SubscriptionId' accountInfo.AccountName)); " is 190.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,DeleteAccount,The length of the statement  "	HttpWebRequest request = (HttpWebRequest)WebRequest.Create (string.Format ("{0}/{1}/services/mediaservices/Accounts/{2}"' Endpoint' SubscriptionId' accountInfo.AccountName)); " is 174.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,ListAvailableRegions,The length of the statement  "	HttpWebRequest request = (HttpWebRequest)WebRequest.Create (string.Format ("{0}/{1}/services/mediaservices/SupportedRegions"' Endpoint' SubscriptionId)); " is 153.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,GetAccountDetails,The length of the statement  "	HttpWebRequest request = (HttpWebRequest)WebRequest.Create (string.Format ("{0}/{1}/services/mediaservices/Accounts/{2}"' Endpoint' SubscriptionId' accountInfo.AccountName)); " is 174.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,SynchronizeStorageAccountKey,The length of the statement  "	HttpWebRequest request = (HttpWebRequest)WebRequest.Create (string.Format ("{0}/{1}/services/mediaservices/Accounts/{2}/StorageAccounts/{3}/Key"' Endpoint' SubscriptionId' accountInfo.AccountName' accountInfo.StorageAccountName)); " is 230.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,ListStorageAccountDetails,The length of the statement  "	HttpWebRequest request = (HttpWebRequest)WebRequest.Create (string.Format ("{0}/{1}/services/mediaservices/Accounts/{2}/StorageAccounts"' Endpoint' SubscriptionId' accountInfo.AccountName)); " is 190.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,ListSubscriptionAccounts,The length of the statement  "	HttpWebRequest request = (HttpWebRequest)WebRequest.Create (string.Format ("{0}/{1}/services/mediaservices/Accounts"' Endpoint' SubscriptionId)); " is 145.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,RegeneratePrimaryAccountKey,The length of the statement  "	HttpWebRequest request = (HttpWebRequest)WebRequest.Create (string.Format ("{0}/{1}/services/mediaservices/Accounts/{2}/AccountKeys/Primary/Regenerate"' Endpoint' SubscriptionId' accountInfo.AccountName)); " is 205.
Long Statement,AMSExplorer,ManagementRESTAPIHelper,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ManagementREST.cs,RegenerateSecondaryAccountKey,The length of the statement  "	HttpWebRequest request = (HttpWebRequest)WebRequest.Create (string.Format ("{0}/{1}/services/mediaservices/Accounts/{2}/AccountKeys/Secondary/Regenerate"' Endpoint' SubscriptionId' accountInfo.AccountName)); " is 207.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,PlayReadyLicense_Load,The length of the statement  "	moreinfocompliance.Links.Add (new LinkLabel.Link (0' moreinfocompliance.Text.Length' Constants.LinkPlayReadyCompliance)); " is 121.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,PlayReadyLicense_Load,The length of the statement  "	linkLabelPlayReadyPolicy.Links.Add (new LinkLabel.Link (0' linkLabelPlayReadyPolicy.Text.Length' Constants.LinkPlayReadyTemplateInfo)); " is 135.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,PlayReadyLicense_Load,The length of the statement  "	comboBoxAllowPassingVideoContentUnknownOutput.Items.AddRange (Enum.GetNames (typeof(UnknownOutputPassingOption)).ToArray ()); " is 125.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,PlayReadyLicense_Load,The length of the statement  "	comboBoxAllowPassingVideoContentUnknownOutput.SelectedItem = Enum.GetName (typeof(UnknownOutputPassingOption)' UnknownOutputPassingOption.NotAllowed); " is 150.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,comboBoxType_SelectedIndexChanged,The length of the statement  "	if ((string)comboBoxType.SelectedItem == Enum.GetName (typeof(PlayReadyLicenseType)' PlayReadyLicenseType.Nonpersistent))// Non persistent " is 138.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame5_PlayReadyLicense)); " is 164.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.moreinfocompliance.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.action_LinkClicked); " is 123.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.radioButtonStartDateAbsolute.CheckedChanged += new System.EventHandler (this.radioButtonsStartDate_CheckedChanged); " is 120.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.radioButtonStartDateRelative.CheckedChanged += new System.EventHandler (this.radioButtonsStartDate_CheckedChanged); " is 120.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.numericUpDownUncompressedDigitalVideoOPL.ValueChanged += new System.EventHandler (this.value_SelectedIndexChanged); " is 120.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.numericUpDownUncompressedDigitalAudioOPL.ValueChanged += new System.EventHandler (this.value_SelectedIndexChanged); " is 120.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.checkBoxUncompressedDigitalVideoOPL.CheckedChanged += new System.EventHandler (this.checkBoxUncompressedDigitalVideoOPL_CheckedChanged); " is 141.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.checkBoxUncompressedDigitalAudioOPL.CheckedChanged += new System.EventHandler (this.checkBoxUncompressedDigitalAudioOPL_CheckedChanged); " is 141.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.checkBoxCompressedDigitalVideoOPL.CheckedChanged += new System.EventHandler (this.checkBoxCompressedDigitalVideoOPL_CheckedChanged); " is 137.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.checkBoxCompressedDigitalAudioOPL.CheckedChanged += new System.EventHandler (this.checkBoxCompressedDigitalAudioOPL_CheckedChanged); " is 137.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.checkBoxImageConstraintForAnalogComputerMonitorRestriction' "checkBoxImageConstraintForAnalogComputerMonitorRestriction"); " is 153.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.checkBoxImageConstraintForAnalogComputerMonitorRestriction.Name = "checkBoxImageConstraintForAnalogComputerMonitorRestriction"; " is 132.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.checkBoxImageConstraintForAnalogComputerMonitorRestriction.CheckedChanged += new System.EventHandler (this.value_SelectedIndexChanged); " is 140.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.checkBoxImageConstraintForAnalogComponentVideoRestriction' "checkBoxImageConstraintForAnalogComponentVideoRestriction"); " is 151.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.checkBoxImageConstraintForAnalogComponentVideoRestriction.Name = "checkBoxImageConstraintForAnalogComponentVideoRestriction"; " is 130.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.checkBoxImageConstraintForAnalogComponentVideoRestriction.CheckedChanged += new System.EventHandler (this.value_SelectedIndexChanged); " is 139.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.checkBoxDigitalVideoOnlyContentRestriction' "checkBoxDigitalVideoOnlyContentRestriction"); " is 121.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.checkBoxDigitalVideoOnlyContentRestriction.CheckedChanged += new System.EventHandler (this.value_SelectedIndexChanged); " is 124.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.labelAllowPassingVideoContentToUnknownOuput' "labelAllowPassingVideoContentToUnknownOuput"); " is 123.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.comboBoxAllowPassingVideoContentUnknownOutput' "comboBoxAllowPassingVideoContentUnknownOutput"); " is 127.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.comboBoxAllowPassingVideoContentUnknownOutput.SelectedIndexChanged += new System.EventHandler (this.value_SelectedIndexChanged); " is 133.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The length of the statement  "	this.linkLabelPlayReadyPolicy.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.action_LinkClicked); " is 129.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame1,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame1.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame1)); " is 147.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame1,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame1.cs,InitializeComponent,The length of the statement  "	this.checkBoxPlayReadyPackaging.CheckedChanged += new System.EventHandler (this.checkBoxPlayReadyPackaging_CheckedChanged); " is 123.
Long Statement,AMSExplorer,CreateStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateStreamingEndpoint.cs,checkSEName,The length of the statement  "		errorProvider1.SetError (tb' AMSExplorer.Properties.Resources.CreateStreamingEndpoint_checkSEName_StreamingEndpointNameIsNotValid); " is 131.
Long Statement,AMSExplorer,CreateStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateStreamingEndpoint.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(CreateStreamingEndpoint)); " is 144.
Long Statement,AMSExplorer,CreateStreamingEndpoint,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateStreamingEndpoint.cs,InitializeComponent,The length of the statement  "	this.moreinfoSE.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoame_LinkClicked); " is 120.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,ConfigureKeyDeliveryServiceForPlayReady,The length of the statement  "	IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.ContentKeyAuthorizationPolicies.CreateAsync ("Deliver Common Content Key with no restrictions").Result; " is 175.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,ConfigureKeyDeliveryServiceForPlayReady,The length of the statement  "	IContentKeyAuthorizationPolicyOption policyOption = _context.ContentKeyAuthorizationPolicyOptions.Create (PlayReadyPolicyName' ContentKeyDeliveryType.PlayReadyLicense' restrictions' newLicenseTemplate); " is 202.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateCommonTypeContentKeyAndAttachAsset,The length of the statement  "	IContentKey key = _context.ContentKeys.Create (keyId' contentKey' "ContentKey CENC" + (keyType == ContentKeyType.CommonEncryptionCbcs ? " cbcs" : "")' keyType); " is 160.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateCommonTypeContentKeyAndAttachAsset,The length of the statement  "	IContentKey key = _context.ContentKeys.Create (keyId' contentKey' "ContentKey CENC" + (keyType == ContentKeyType.CommonEncryptionCbcs ? " cbcs" : "")' keyType); " is 160.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateCommonTypeContentKey,The length of the statement  "	IContentKey key = _context.ContentKeys.Create (keyId' contentKey' "ContentKey CENC" + (keyType == ContentKeyType.CommonEncryptionCbcs ? " cbcs" : "")' keyType); " is 160.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateEnvelopeTypeContentKey,The length of the statement  "	IContentKey key = asset.GetMediaContext ().ContentKeys.Create ((Guid)keyId' contentKey' AMSExplorer.Properties.Resources.DynamicEncryption_CreateEnvelopeTypeContentKey_ContentKeyEnvelope' ContentKeyType.EnvelopeEncryption); " is 223.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,AddOpenAuthorizationPolicyOption,The length of the statement  "	IContentKeyAuthorizationPolicyOption policyOption = _context.ContentKeyAuthorizationPolicyOptions.Create (optionName' contentkeydeliverytype' restrictions' keydeliveryconfig); " is 175.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,AddTokenRestrictedAuthorizationPolicyAES,The length of the statement  "	string tokenTemplateString = GenerateTokenRequirements (tokentype' Audience' Issuer' tokenclaimslist' AddContentKeyIdentifierClaim' mytokenverificationkey' openIdDiscoveryPath); " is 177.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,AddTokenRestrictedAuthorizationPolicyAES,The length of the statement  "		Name = string.Format (AMSExplorer.Properties.Resources.DynamicEncryption_AddTokenRestrictedAuthorizationPolicyAES_0TokenAuthorizationPolicy' tname)' " is 148.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,AddTokenRestrictedAuthorizationPolicyAES,The length of the statement  "	IContentKeyAuthorizationPolicyOption policyOption = _context.ContentKeyAuthorizationPolicyOptions.Create ("Token option"' ContentKeyDeliveryType.BaselineHttp' restrictions' null// no key delivery data is needed for HLS " is 218.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,AddTokenRestrictedAuthorizationPolicyCENC,The length of the statement  "	string tokenTemplateString = GenerateTokenRequirements (tokentype' Audience' Issuer' tokenclaimslist' AddContentKeyIdentifierClaim' mytokenverificationkey' openIdDiscoveryPath); " is 177.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,AddTokenRestrictedAuthorizationPolicyCENC,The length of the statement  "			Name = string.Format (AMSExplorer.Properties.Resources.DynamicEncryption_AddTokenRestrictedAuthorizationPolicyAES_0TokenAuthorizationPolicy' tname)' " is 148.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,AddTokenRestrictedAuthorizationPolicyCENC,The length of the statement  "	IContentKeyAuthorizationPolicyOption policyOption = _context.ContentKeyAuthorizationPolicyOptions.Create (optionName' deliveryType' restrictions' newLicenseTemplate); " is 166.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetCertificateFromFile,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.DynamicEncryption_GetCertificateFromFile_PleaseSelectACertificateFilePFXThatContainsBothPublicAndPrivateKeysPrivateKeyIsNeededToSignTheJWTTokenItIsRecommendedToUseTheSameCertifcateThatTheOneUsedDuringTheSetupOfDynamicEncryptionForThisAsset' AMSExplorer.Properties.Resources.DynamicEncryption_GetCertificateFromFile_CertificateRequired' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 436.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetCertificateFromFile,The length of the statement  "		if (Program.InputBox (AMSExplorer.Properties.Resources.DynamicEncryption_GetCertificateFromFile_PFXPassword' AMSExplorer.Properties.Resources.DynamicEncryption_GetCertificateFromFile_PleaseEnterThePasswordForThePFXFile' ref password' true) == DialogResult.OK) { " is 261.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetCertificateFromFile,The length of the statement  "				MessageBox.Show (string.Format (AMSExplorer.Properties.Resources.DynamicEncryption_GetCertificateFromFile_ThereIsAnErrorWhenOpeningTheCertificateFileN0' e.Message)' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 218.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetCertificateFromFile,The length of the statement  "					MessageBox.Show (AMSExplorer.Properties.Resources.DynamicEncryption_GetCertificateFromFile_TheCertificateDoesNotContainAPrivateKey' AMSExplorer.Properties.Resources.DynamicEncryption_GetCertificateFromFile_NoPrivateKey' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 264.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "							MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' form.EndDate); " is 120.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "								InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue); " is 158.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "								signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest); " is 135.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "							JwtSecurityToken token = new JwtSecurityToken (issuer: form.GetIssuerUri' audience: form.GetAudienceUri' notBefore: form.StartDate' expires: form.EndDate' signingCredentials: signingcredentials' claims: myclaims); " is 213.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "			IContentKeyAuthorizationPolicy policy = _context.ContentKeyAuthorizationPolicies.Where (p => p.Id == key.AuthorizationPolicyId).FirstOrDefault (); " is 146.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "					option = policy.Options.Where (o => (ContentKeyRestrictionType)o.Restrictions.FirstOrDefault ().KeyRestrictionType == ContentKeyRestrictionType.TokenRestricted).FirstOrDefault (); " is 179.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "				if (option != null)// && option.Restrictions.FirstOrDefault() != null && option.Restrictions.FirstOrDefault().KeyRestrictionType == (int)ContentKeyRestrictionType.TokenRestricted) " is 179.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "								MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)); " is 182.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "									InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue); " is 158.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "									signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest); " is 135.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The length of the statement  "								JwtSecurityToken token = new JwtSecurityToken (issuer: tokenTemplate.Issuer' audience: tokenTemplate.Audience' notBefore: DateTime.Now.AddMinutes (-5)' expires: DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)' signingCredentials: signingcredentials' claims: myclaims); " is 295.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyAES,The length of the statement  "	Dictionary<AssetDeliveryPolicyConfigurationKey' string> assetDeliveryPolicyConfiguration = new Dictionary<AssetDeliveryPolicyConfigurationKey' string> (); " is 154.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyAES,The length of the statement  "		assetDeliveryPolicyConfiguration.Add (AssetDeliveryPolicyConfigurationKey.EnvelopeKeyAcquisitionUrl' keyAcquisitionUri.ToString ()); " is 132.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyAES,The length of the statement  "		assetDeliveryPolicyConfiguration.Add (AssetDeliveryPolicyConfigurationKey.EnvelopeBaseKeyAcquisitionUrl' keyAcquisitionUri.ToString ()); " is 136.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyAES,The length of the statement  "	IAssetDeliveryPolicy assetDeliveryPolicy = _context.AssetDeliveryPolicies.Create (name' AssetDeliveryPolicyType.DynamicEnvelopeEncryption' assetdeliveryprotocol' assetDeliveryPolicyConfiguration); " is 196.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyNoDynEnc,The length of the statement  "	IAssetDeliveryPolicy assetDeliveryPolicy = _context.AssetDeliveryPolicies.Create (AMSExplorer.Properties.Resources.DynamicEncryption_CreateAssetDeliveryPolicyNoDynEnc_AssetDeliveryPolicyNoDynEnc' AssetDeliveryPolicyType.NoDynamicEncryption' assetdeliveryprotocol' null); " is 270.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "	Dictionary<AssetDeliveryPolicyConfigurationKey' string> assetDeliveryPolicyConfiguration = new Dictionary<AssetDeliveryPolicyConfigurationKey' string> (); " is 154.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "		assetDeliveryPolicyConfiguration.Add (AssetDeliveryPolicyConfigurationKey.PlayReadyLicenseAcquisitionUrl' stringPRacquisitionUrl); " is 130.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "			assetDeliveryPolicyConfiguration.Add (AssetDeliveryPolicyConfigurationKey.PlayReadyCustomAttributes' form1.PlayReadyCustomAttributes); " is 134.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "		assetDeliveryPolicyConfiguration.Add (finalUrl ? AssetDeliveryPolicyConfigurationKey.WidevineLicenseAcquisitionUrl : AssetDeliveryPolicyConfigurationKey.WidevineBaseLicenseAcquisitionUrl' widevineAcquisitionUrl); " is 212.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "			var kdPolicy = _context.ContentKeyAuthorizationPolicies.Where (p => p.Id == key.AuthorizationPolicyId).SingleOrDefault (); " is 122.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "				FairPlayConfiguration configFP = JsonConvert.DeserializeObject<FairPlayConfiguration> (kdOption.KeyDeliveryConfiguration); " is 122.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "				assetDeliveryPolicyConfiguration.Add (AssetDeliveryPolicyConfigurationKey.FairPlayBaseLicenseAcquisitionUrl' UseSKDForAMSLAURL ? fairplayAcquisitionUrl.Replace ("https://"' "skd://") : fairplayAcquisitionUrl); " is 209.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "				assetDeliveryPolicyConfiguration.Add (AssetDeliveryPolicyConfigurationKey.CommonEncryptionIVForCbcs' configFP.ContentEncryptionIV); " is 131.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "			assetDeliveryPolicyConfiguration.Add (fairplayAcquisitionURLFinal ? AssetDeliveryPolicyConfigurationKey.FairPlayLicenseAcquisitionUrl : AssetDeliveryPolicyConfigurationKey.FairPlayBaseLicenseAcquisitionUrl' fairplayAcquisitionUrl); " is 231.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "			assetDeliveryPolicyConfiguration.Add (AssetDeliveryPolicyConfigurationKey.CommonEncryptionIVForCbcs' iv_if_externalserver); " is 123.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CreateAssetDeliveryPolicyCENC,The length of the statement  "	var assetDeliveryPolicy = _context.AssetDeliveryPolicies.Create (name' form1.FairPlayPackaging ? AssetDeliveryPolicyType.DynamicCommonEncryptionCbcs : AssetDeliveryPolicyType.DynamicCommonEncryption' protocol' assetDeliveryPolicyConfiguration); " is 244.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,ConfigureFairPlayPolicyOptions,The length of the statement  "	IContentKey pfxPasswordKey = _context.ContentKeys.Create (pfxPasswordId' pfxPasswordBytes' AMSExplorer.Properties.Resources.DynamicEncryption_ConfigureFairPlayPolicyOptions_PfxPasswordKey' ContentKeyType.FairPlayPfxPassword); " is 225.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,ConfigureFairPlayPolicyOptions,The length of the statement  "	string FairPlayConfiguration = Microsoft.WindowsAzure.MediaServices.Client.FairPlay.FairPlayConfiguration.CreateSerializedFairPlayOptionConfiguration (certificate.Certificate' certificate.Password' pfxPasswordId' askId' iv); " is 224.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CleanupKey,The length of the statement  "		policy = mediaContext.ContentKeyAuthorizationPolicies.Where (o => o.Id == key.AuthorizationPolicyId).SingleOrDefault (); " is 120.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CleanupKey,The length of the statement  "			IContentKey ask = mediaContext.ContentKeys.Where (k => k.Id == Constants.ContentKeyIdPrefix + config.ASkId.ToString ()).SingleOrDefault (); " is 139.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CleanupKey,The length of the statement  "			IContentKey pfxPassword = mediaContext.ContentKeys.Where (k => k.Id == Constants.ContentKeyIdPrefix + config.FairPlayPfxPasswordId.ToString ()).SingleOrDefault (); " is 163.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,DeleteKey,The length of the statement  "		policy = mediaContext.ContentKeyAuthorizationPolicies.Where (o => o.Id == key.AuthorizationPolicyId).SingleOrDefault (); " is 120.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,DeleteKey,The length of the statement  "			IContentKey ask = mediaContext.ContentKeys.Where (k => k.Id == Constants.ContentKeyIdPrefix + config.ASkId.ToString ()).SingleOrDefault (); " is 139.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,DeleteKey,The length of the statement  "			IContentKey pfxPassword = mediaContext.ContentKeys.Where (k => k.Id == Constants.ContentKeyIdPrefix + config.FairPlayPfxPasswordId.ToString ()).SingleOrDefault (); " is 163.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,HexStringToByteArray,The length of the statement  "	return Enumerable.Range (0' hex.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (hex.Substring (x' 2)' 16)).ToArray (); " is 131.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GeneratePlayReadyContentKey,The length of the statement  "		contentKey [i] = Convert.ToByte (sha_A_Output [i] ^ sha_A_Output [i + DRM_AES_KEYSIZE_128] ^ sha_B_Output [i] ^ sha_B_Output [i + DRM_AES_KEYSIZE_128] ^ sha_C_Output [i] ^ sha_C_Output [i + DRM_AES_KEYSIZE_128]); " is 212.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CopyDynamicEncryption,The length of the statement  "				clonedkey = DestinationContext.ContentKeys.Create (new Guid (key.Id.Replace (Constants.ContentKeyIdPrefix' ""))' key.GetClearKeyValue ()' key.Name' key.ContentKeyType); " is 168.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CopyDynamicEncryption,The length of the statement  "				throw new Exception (String.Format (AMSExplorer.Properties.Resources.DynamicEncryption_CopyDynamicEncryption_Key0IsNotInTheAccountButItCannotBeCreatedSameKeyIdAlreadyExistsInTheDatacenter' key.Id)); " is 198.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CopyDynamicEncryption,The length of the statement  "			IContentKeyAuthorizationPolicy sourcepolicy = SourceContext.ContentKeyAuthorizationPolicies.Where (ap => ap.Id == key.AuthorizationPolicyId).FirstOrDefault (); " is 159.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CopyDynamicEncryption,The length of the statement  "				IContentKeyAuthorizationPolicy clonedpolicy = (clonedkey.AuthorizationPolicyId != null) ? DestinationContext.ContentKeyAuthorizationPolicies.Where (ap => ap.Id == clonedkey.AuthorizationPolicyId).FirstOrDefault () : null; " is 221.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CopyDynamicEncryption,The length of the statement  "						IContentKeyAuthorizationPolicyOption policyOption = DestinationContext.ContentKeyAuthorizationPolicyOptions.Create (opt.Name' opt.KeyDeliveryType' opt.Restrictions' opt.KeyDeliveryConfiguration); " is 195.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CopyDynamicEncryption,The length of the statement  "		Dictionary<AssetDeliveryPolicyConfigurationKey' string> assetDeliveryPolicyConfiguration = new Dictionary<AssetDeliveryPolicyConfigurationKey' string> (); " is 154.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CopyDynamicEncryption,The length of the statement  "			if (RewriteLAURL && (s.Key.ToString ().Equals (AssetDeliveryPolicyConfigurationKey.PlayReadyLicenseAcquisitionUrl.ToString ()) || s.Key.ToString ().Equals (AssetDeliveryPolicyConfigurationKey.EnvelopeKeyAcquisitionUrl.ToString ()))) { " is 234.
Long Statement,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,CopyDynamicEncryption,The length of the statement  "		var clonetargetpolicy = DestinationContext.AssetDeliveryPolicies.Create (delpol.Name' delpol.AssetDeliveryPolicyType' delpol.AssetDeliveryProtocol' assetDeliveryPolicyConfiguration); " is 182.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_CENCKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENCKeyConfig.cs,PlayReadyExternalServer_Load,The length of the statement  "	moreinfotestserver.Links.Add (new LinkLabel.Link (0' moreinfotestserver.Text.Length' "http://playready.azurewebsites.net/")); " is 125.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_CENCKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENCKeyConfig.cs,ValidateDataForButtonOk,The length of the statement  "	if (radioButtonKeyRandomGeneration.Checked || !string.IsNullOrEmpty (textBoxkeyseed.Text) || (string.IsNullOrEmpty (textBoxkeyseed.Text) && !string.IsNullOrEmpty (textBoxkeyid.Text) && !string.IsNullOrEmpty (textBoxcontentkey.Text))) { " is 235.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_CENCKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENCKeyConfig.cs,UpdateCalculatedContentKey,The length of the statement  "				byte[] bytecontentkey = DynamicEncryption.GeneratePlayReadyContentKey (Convert.FromBase64String (this.KeySeed)' (Guid)this.KeyId); " is 130.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_CENCKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENCKeyConfig.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddDynamicEncryptionFrame2_CENCKeyConfig)); " is 161.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_CENCKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENCKeyConfig.cs,InitializeComponent,The length of the statement  "	this.moreinfotestserver.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfotestserver_LinkClicked); " is 135.
Long Statement,AMSExplorer,AddDynamicEncryptionFrame2_CENCKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENCKeyConfig.cs,InitializeComponent,The length of the statement  "	this.radioButtonKeySpecifiedByUser.CheckedChanged += new System.EventHandler (this.radioButtonKeySpecifiedByUser_CheckedChanged); " is 129.
Long Statement,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,StreamingEndpointInformation_Load,The length of the statement  "		hostnamelink.Links.Add (new LinkLabel.Link (0' hostnamelink.Text.Length' "http://msdn.microsoft.com/en-us/library/azure/dn783468.aspx")); " is 137.
Long Statement,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,buttonAddExampleClientPolicy_Click,The length of the statement  "	textBoxClientPolicy.Text = File.ReadAllText (Path.Combine (Mainform._configurationXMLFiles' @"ClientAccessPolicy.xml")); " is 120.
Long Statement,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,buttonAddExampleCrossDomainPolicy_Click,The length of the statement  "	textBoxCrossDomPolicy.Text = File.ReadAllText (Path.Combine (Mainform._configurationXMLFiles' @"CrossDomainPolicy.xml")); " is 121.
Long Statement,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(StreamingEndpointInformation)); " is 149.
Long Statement,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAkamai.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 124.
Long Statement,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewIP.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 120.
Long Statement,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,InitializeComponent,The length of the statement  "	this.checkBoxStreamingIPlistSet.CheckedChanged += new System.EventHandler (this.checkBoxStreamingIPlistSet_CheckedChanged); " is 123.
Long Statement,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewCustomHostname.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 132.
Long Statement,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,InitializeComponent,The length of the statement  "	this.hostnamelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.hostnamelink_LinkClicked); " is 123.
Long Statement,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,Init,The length of the statement  "		ScaleUnits = StreamingEndpointInformation.ReturnTypeSE (o) != StreamingEndpointInformation.StreamEndpointType.Premium ? "" : ((int)o.ScaleUnits).ToString ()' " is 157.
Long Statement,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,Init,The length of the statement  "	SortableBindingList<StreamingEndpointEntry> MyObservOriginInPage = new SortableBindingList<StreamingEndpointEntry> (originquery.Take (0).ToList ()); " is 148.
Long Statement,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,Init,The length of the statement  "	WorkerRefreshStreamingEndpoints.DoWork += new System.ComponentModel.DoWorkEventHandler (this.WorkerRefreshStreamingEndpoints_DoWork); " is 133.
Long Statement,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,RefreshStreamingEndpoint,The length of the statement  "			_MyObservStreamingEndpoints [index].CDN = origin.CdnEnabled ? StreamingEndpointInformation.ReturnDisplayedProvider (origin.CdnProvider) ?? "CDN" : string.Empty; " is 160.
Long Statement,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,RefreshStreamingEndpoint,The length of the statement  "			_MyObservStreamingEndpoints [index].ScaleUnits = StreamingEndpointInformation.ReturnTypeSE (origin) != StreamingEndpointInformation.StreamEndpointType.Premium ? "" : ((int)origin.ScaleUnits).ToString (); " is 203.
Long Statement,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,RefreshStreamingEndpoints,The length of the statement  "		ScaleUnits = StreamingEndpointInformation.ReturnTypeSE (c) != StreamingEndpointInformation.StreamEndpointType.Premium ? "" : ((int)c.ScaleUnits).ToString ()' " is 157.
Long Statement,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,LoadAndUpdateIndexerConfiguration,The length of the statement  "		inputxml.Add (new XElement ("metadata"' new XAttribute ("key"' "description")' new XAttribute ("value"' AssetDescription))); " is 124.
Long Statement,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,LoadAndUpdateIndexerConfiguration,The length of the statement  "	settings.Add (new XElement ("add"' new XAttribute ("key"' "GenerateAIB")' new XAttribute ("value"' optionsVar.AIB.ToString ()))); " is 129.
Long Statement,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,LoadAndUpdateIndexerConfiguration,The length of the statement  "	settings.Add (new XElement ("add"' new XAttribute ("key"' "GenerateKeywords")' new XAttribute ("value"' optionsVar.Keywords.ToString ()))); " is 139.
Long Statement,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,LoadAndUpdateIndexerConfiguration,The length of the statement  "	settings.Add (new XElement ("add"' new XAttribute ("key"' "ForceFullCaption")' new XAttribute ("value"' optionsVar.ForFullCaptions.ToString ()))); " is 146.
Long Statement,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Indexer)); " is 128.
Long Statement,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,InitializeComponent,The length of the statement  "	this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,ImportHttp,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportHttp.cs,ImportHttp_Load,The length of the statement  "		comboBoxStorage.Items.Add (new Item (string.Format ("{0} {1}"' storage.Name' storage.IsDefault ? AMSExplorer.Properties.Resources.BatchUploadFrame2_BathUploadFrame2_Load_Default : "")' storage.Name)); " is 200.
Long Statement,AMSExplorer,ImportHttp,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportHttp.cs,textBoxURL_TextChanged,The length of the statement  "		labelURLFileNameWarning.Text = AMSExplorer.Properties.Resources.ImportHttp_textBoxURL_TextChanged_ErrorDetectedInTheURL; " is 120.
Long Statement,AMSExplorer,ImportHttp,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportHttp.cs,textBoxURL_TextChanged,The length of the statement  "			labelURLFileNameWarning.Text = AMSExplorer.Properties.Resources.ImportHttp_textBoxURL_TextChanged_FileNameNotFoundInTheURL; " is 123.
Long Statement,AMSExplorer,ImportHttp,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportHttp.cs,textBoxAssetFileName_TextChanged,The length of the statement  "		errorProvider1.SetError (tb' AMSExplorer.Properties.Resources.ImportHttp_textBoxAssetFileName_TextChanged_AssetFileNameIsNotCompatibleWithMediaServices); " is 153.
Long Statement,AMSExplorer,ImportHttp,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportHttp.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ImportHttp)); " is 131.
Long Statement,AMSExplorer,Thumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Thumbnails.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Thumbnails)); " is 131.
Long Statement,AMSExplorer,Thumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Thumbnails.cs,InitializeComponent,The length of the statement  "	this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,ProgramInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProgramInformation.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ProgramInformation)); " is 139.
Long Statement,AMSExplorer,ProgramInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProgramInformation.cs,InitializeComponent,The length of the statement  "	this.numericUpDownArchiveMinutes.ValueChanged += new System.EventHandler (this.numericUpDownArchiveMinutes_ValueChanged); " is 121.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_State' (ChannelState)MyChannel.State); " is 130.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Created' ((DateTime)MyChannel.Created).ToLocalTime ().ToString ("G")); " is 162.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified' ((DateTime)MyChannel.LastModified).ToLocalTime ().ToString ("G")); " is 172.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_Description' MyChannel.Description); " is 132.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_InputProtocol' MyChannel.Input.StreamingProtocol); " is 146.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingType' MyChannel.EncodingType); " is 134.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingSystemPreset' MyChannel.Encoding.SystemPreset); " is 151.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingIgnoreCEA708' MyChannel.Encoding.IgnoreCea708ClosedCaptions); " is 165.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingVideoStreamsCount' MyChannel.Encoding.VideoStreams.Count); " is 162.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingAudioStreamsCount' MyChannel.Encoding.AudioStreams.Count); " is 162.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingAdMarkerSource' (AdMarkerSource)MyChannel.Encoding.AdMarkerSource); " is 171.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "				DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_DefaultSlateAssetId' MyChannel.Slate.DefaultSlateAssetId); " is 154.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "				DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_AutomaticSlateInsertionOnADSignal' MyChannel.Slate.InsertSlateOnAdMarker); " is 170.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "				DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_SlateSettings' AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_None); " is 193.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_InputKeyFrameIntervalS' ((TimeSpan)MyChannel.Input.KeyFrameInterval).TotalSeconds); " is 179.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "			DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url); " is 220.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "				DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1SSL' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url.ToString ().Replace ("http://"' "https://")); " is 267.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "				DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_PreviewURL0' endpoint.Protocol)' endpoint.Url); " is 158.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "					DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_OutputHLSFragmentsPerSegment' MyChannel.Output.Hls.FragmentsPerSegment); " is 168.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "		labelChannelName.Text = AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_MultipleChannelsHaveBeenSelected; " is 133.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "		var profileliveselected = AMSEXPlorerLiveProfile.Profiles.Where (p => p.Type == MyChannel.EncodingType).FirstOrDefault (); " is 122.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "			numericUpDownVideoStreamIndex.Value = MyChannel.Encoding.VideoStreams != null && MyChannel.Encoding.VideoStreams.FirstOrDefault () != null ? MyChannel.Encoding.VideoStreams.FirstOrDefault ().Index : 0; " is 201.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "				if (MyChannel.Encoding.AudioStreams.Count > 0 && MyChannel.Encoding.AudioStreams [0].Language == ci.ThreeLetterISOLanguageName) { " is 129.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "							var language = CultureInfo.GetCultures (CultureTypes.NeutralCultures).Where (c => c.ThreeLetterISOLanguageName == audiostream.Language).FirstOrDefault (); " is 154.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The length of the statement  "	if (MyChannel.Preview != null && MyChannel.Preview.AccessControl != null && MyChannel.Preview.AccessControl.IPAllowList != null) { " is 130.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,tabPage4_Enter,The length of the statement  "	if (MyChannel.State == ChannelState.Running && MyChannel.Preview != null && MyChannel.Preview.Endpoints.FirstOrDefault ().Url.AbsoluteUri != null) { " is 148.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,tabPage4_Enter,The length of the statement  "		string myurl = AssetInfo.DoPlayBackWithStreamingEndpoint (typeplayer: PlayerType.AzureMediaPlayerFrame' Urlstr: MyChannel.Preview.Endpoints.FirstOrDefault ().Url.ToString ()' DoNotRewriteURL: true' context: MyContext' formatamp: AzureMediaPlayerFormats.Smooth' technology: AzureMediaPlayerTechnologies.Silverlight' launchbrowser: false' mainForm: MyMainForm); " is 359.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,checkKeyFrameValue,The length of the statement  "		errorProvider1.SetError (textBoxKeyFrame' AMSExplorer.Properties.Resources.ChannelInformation_checkKeyFrameValue_ValueIsNotValid); " is 130.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,buttonAddAudioStream_Click,The length of the statement  "	if (numericUpDownAudioIndexMain.Value != numericUpDownAudioIndexAddition.Value && !audiostreams.Select (a => a.Index).ToList ().Contains ((int)numericUpDownAudioIndexAddition.Value) && audiostreams.Count < 7 && ((Item)comboBoxAudioLanguageMain.SelectedItem).Value != null// if list does not exist' the user must select a valid default index " is 340.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,comboBoxAudioLanguageMain_SelectedIndexChanged,The length of the statement  "	var culture = CultureInfo.GetCultures (CultureTypes.NeutralCultures).Where (c => c.DisplayName == lang).FirstOrDefault (); " is 122.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,numericUpDownAudioIndexMain_ValueChanged,The length of the statement  "		errorProvider1.SetError (numericUpDownAudioIndexMain' string.Format (AMSExplorer.Properties.Resources.ChannelInformation_numericUpDownAudioIndexMain_ValueChanged_TheAudioStreamIndex0IsRepeated' defaultaudiostream.Index)); " is 221.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,numericUpDownAudioIndexAddition_ValueChanged,The length of the statement  "	if (numericUpDownAudioIndexMain.Value == numericUpDownAudioIndexAddition.Value || audiostreams.Select (a => a.Index).ToList ().Contains ((int)numericUpDownAudioIndexAddition.Value)) { " is 183.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,numericUpDownAudioIndexAddition_ValueChanged,The length of the statement  "		errorProvider1.SetError (numericUpDownAudioIndexAddition' string.Format (AMSExplorer.Properties.Resources.ChannelInformation_numericUpDownAudioIndexMain_ValueChanged_TheAudioStreamIndex0IsRepeated' numericUpDownAudioIndexAddition.Value)); " is 238.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ChannelInformation)); " is 139.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.toolStripMenuItemFilesCopyClipboard.Click += new System.EventHandler (this.toolStripMenuItemFilesCopyClipboard_Click); " is 123.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.checkBoxKeyFrameIntDefined.CheckedChanged += new System.EventHandler (this.checkBoxKeyFrameIntDefined_CheckedChanged); " is 123.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewInputIP.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 125.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewInputIP.CellValidating += new System.Windows.Forms.DataGridViewCellValidatingEventHandler (this.dataGridViewInputIP_CellValidating); " is 149.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewPreviewIP.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 127.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.numericUpDownVideoStreamIndex.ValueChanged += new System.EventHandler (this.numericUpDownVideoStreamIndex_ValueChanged); " is 125.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewVideoProf.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 127.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAudioProf.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 127.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.numericUpDownAudioIndexMain.ValueChanged += new System.EventHandler (this.numericUpDownAudioIndexMain_ValueChanged); " is 121.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.comboBoxAudioLanguageMain.SelectedIndexChanged += new System.EventHandler (this.comboBoxAudioLanguageMain_SelectedIndexChanged); " is 133.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAudioStreams.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 130.
Long Statement,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The length of the statement  "	this.numericUpDownAudioIndexAddition.ValueChanged += new System.EventHandler (this.numericUpDownAudioIndexAddition_ValueChanged); " is 129.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,CreateLocator_Load,The length of the statement  "	checkBoxCreateLocator.Text = string.Format (checkBoxCreateLocator.Text' Properties.Settings.Default.DefaultLocatorDurationDaysNew); " is 131.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,CreateLocator_Load,The length of the statement  "		comboBoxStorage.Items.Add (new Item (string.Format ("{0} {1}"' storage.Name' storage.IsDefault ? AMSExplorer.Properties.Resources.BatchUploadFrame2_BathUploadFrame2_Load_Default : "")' storage.Name)); " is 200.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,textBoxIProgramSourceURL_TextChanged,The length of the statement  "		labelURLFileNameWarning.Text = AMSExplorer.Properties.Resources.CreateProgram_textBoxIProgramSourceURL_TextChanged_URLCannotBeAnalyzed; " is 135.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(CreateProgram)); " is 134.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.buttonOk' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("buttonOk.IconAlignment")))); " is 146.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.buttonCancel' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("buttonCancel.IconAlignment")))); " is 154.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.textBoxAssetName' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("textBoxAssetName.IconAlignment")))); " is 162.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.textBoxAssetName' ((int)(resources.GetObject ("textBoxAssetName.IconPadding")))); " is 122.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label4' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label4.IconAlignment")))); " is 142.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label2' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label2.IconAlignment")))); " is 142.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label3' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label3.IconAlignment")))); " is 142.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.textboxprogramname' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("textboxprogramname.IconAlignment")))); " is 166.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.textboxprogramname' ((int)(resources.GetObject ("textboxprogramname.IconPadding")))); " is 126.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label1' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label1.IconAlignment")))); " is 142.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.textBoxDescription' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("textBoxDescription.IconAlignment")))); " is 166.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.textBoxDescription' ((int)(resources.GetObject ("textBoxDescription.IconPadding")))); " is 126.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.checkBoxCreateLocator' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("checkBoxCreateLocator.IconAlignment")))); " is 172.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.checkBoxCreateLocator' ((int)(resources.GetObject ("checkBoxCreateLocator.IconPadding")))); " is 132.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label5' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label5.IconAlignment")))); " is 142.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.checkBoxAddScaleUnit' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("checkBoxAddScaleUnit.IconAlignment")))); " is 170.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.checkBoxAddScaleUnit' ((int)(resources.GetObject ("checkBoxAddScaleUnit.IconPadding")))); " is 130.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.tabControl1' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("tabControl1.IconAlignment")))); " is 152.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.tabPage1' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("tabPage1.IconAlignment")))); " is 146.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label9' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label9.IconAlignment")))); " is 142.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label33' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label33.IconAlignment")))); " is 144.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.comboBoxStorage' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("comboBoxStorage.IconAlignment")))); " is 160.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.comboBoxStorage' ((int)(resources.GetObject ("comboBoxStorage.IconPadding")))); " is 120.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetError (this.numericUpDownArchiveMinutes' resources.GetString ("numericUpDownArchiveMinutes.Error")); " is 123.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.numericUpDownArchiveMinutes' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("numericUpDownArchiveMinutes.IconAlignment")))); " is 184.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.numericUpDownArchiveMinutes' ((int)(resources.GetObject ("numericUpDownArchiveMinutes.IconPadding")))); " is 144.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label11' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label11.IconAlignment")))); " is 144.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.pictureBox1' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("pictureBox1.IconAlignment")))); " is 152.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label10' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label10.IconAlignment")))); " is 144.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.numericUpDownArchiveHours' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("numericUpDownArchiveHours.IconAlignment")))); " is 180.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.numericUpDownArchiveHours' ((int)(resources.GetObject ("numericUpDownArchiveHours.IconPadding")))); " is 140.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.tabPage3' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("tabPage3.IconAlignment")))); " is 146.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.labelCloneLocators' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("labelCloneLocators.IconAlignment")))); " is 166.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.labelCloneLocators' ((int)(resources.GetObject ("labelCloneLocators.IconPadding")))); " is 126.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.textBoxManifestName' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("textBoxManifestName.IconAlignment")))); " is 168.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.textBoxManifestName' ((int)(resources.GetObject ("textBoxManifestName.IconPadding")))); " is 128.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label13' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label13.IconAlignment")))); " is 144.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.tabPage2' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("tabPage2.IconAlignment")))); " is 146.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.labelURLFileNameWarning' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("labelURLFileNameWarning.IconAlignment")))); " is 176.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.labelURLFileNameWarning' ((int)(resources.GetObject ("labelURLFileNameWarning.IconPadding")))); " is 136.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.labelManifestFile' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("labelManifestFile.IconAlignment")))); " is 164.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.labelManifestFile' ((int)(resources.GetObject ("labelManifestFile.IconPadding")))); " is 124.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.labelLocatorID' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("labelLocatorID.IconAlignment")))); " is 158.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label12' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label12.IconAlignment")))); " is 144.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label8' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label8.IconAlignment")))); " is 142.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label7' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label7.IconAlignment")))); " is 142.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.textBoxProgramSourceURL' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("textBoxProgramSourceURL.IconAlignment")))); " is 176.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.textBoxProgramSourceURL' ((int)(resources.GetObject ("textBoxProgramSourceURL.IconPadding")))); " is 136.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.label6' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("label6.IconAlignment")))); " is 142.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.checkBoxReplica' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("checkBoxReplica.IconAlignment")))); " is 160.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.checkBoxReplica' ((int)(resources.GetObject ("checkBoxReplica.IconPadding")))); " is 120.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.checkBoxDynEnc' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("checkBoxDynEnc.IconAlignment")))); " is 158.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.panel1' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("panel1.IconAlignment")))); " is 142.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconAlignment (this.checkBoxStartProgramNow' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("checkBoxStartProgramNow.IconAlignment")))); " is 176.
Long Statement,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The length of the statement  "	this.errorProvider1.SetIconPadding (this.checkBoxStartProgramNow' ((int)(resources.GetObject ("checkBoxStartProgramNow.IconPadding")))); " is 136.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDASHIFPlayer,The length of the statement  "				AssetInfo.DoPlayBackWithStreamingEndpoint (typeplayer: PlayerType.DASHIFRefPlayer' Urlstr: TreeViewLocators.SelectedNode.Text' DoNotRewriteURL: true' context: myContext' mainForm: myMainForm); " is 192.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,contextMenuStripLocators_Opening,The length of the statement  "			if (TreeViewLocators.SelectedNode.Parent.Text.Equals (AssetInfo._smooth) | TreeViewLocators.SelectedNode.Parent.Text.Contains (AssetInfo._smooth_legacy)) { " is 155.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoHTMLPlayer,The length of the statement  "			AssetInfo.DoPlayBackWithStreamingEndpoint (typeplayer: PlayerType.MP4AzurePage' Urlstr: TreeViewLocators.SelectedNode.Text' DoNotRewriteURL: true' context: myContext' mainForm: myMainForm); " is 189.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,ListAssetFiles,The length of the statement  "	var mp4AssetFiles = myAsset.AssetFiles.ToList ().Where (f => f.Name.EndsWith (".mp4"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".m4a"' StringComparison.OrdinalIgnoreCase)); " is 187.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,ListAssetFiles,The length of the statement  "	var ismAssetFiles = myAsset.AssetFiles.ToList ().Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase)); " is 123.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "	DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_AssetType' myAsset.AssetType); " is 120.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "	DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_State' (AssetState)myAsset.State); " is 124.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "	DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Created' ((DateTime)myAsset.Created).ToLocalTime ().ToString ("G")); " is 158.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "	DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified' ((DateTime)myAsset.LastModified).ToLocalTime ().ToString ("G")); " is 168.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "	DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_CreationOptions' (AssetCreationOptions)myAsset.Options); " is 146.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "	DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_FormatOption' (AssetFormatOption)myAsset.FormatOption); " is 145.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "		DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_IsStreamable' myAsset.IsStreamable); " is 126.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "		DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_SupportsDynamicEncryption' myAsset.SupportsDynamicEncryption); " is 152.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "		DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageAccountName' myAsset.StorageAccount.Name); " is 139.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "		DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageAccountByteUsed' AssetInfo.FormatByteSize (myAsset.StorageAccount.BytesUsed)); " is 175.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "		DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageAccountIsDefault' myAsset.StorageAccount.IsDefault); " is 149.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "			DGAsset.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_ParentAssetS' AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_ErrorDeleted); " is 190.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "			comboBoxStreamingEndpoint.Items.Add (new Item (string.Format (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_012ScaleUnit' se.Name' se.State' StreamingEndpointInformation.ReturnTypeSE (se))' se.HostName)); " is 230.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "				comboBoxStreamingEndpoint.Items.Add (new Item (string.Format (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_012ScaleUnitCustomHostname3' se.Name' se.State' StreamingEndpointInformation.ReturnTypeSE (se)' custom)' custom)); " is 248.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The length of the statement  "	listViewFiles.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler (ListViewItemComparerQuickNoDate.ListView_ColumnClick); " is 133.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "	dataGridViewFilters.Columns [0].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Name; " is 122.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "	dataGridViewFilters.Columns [2].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_TrackRules; " is 126.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "	dataGridViewFilters.Columns [3].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_StartDHMS; " is 125.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "	dataGridViewFilters.Columns [4].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_EndDHMS; " is 123.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "	dataGridViewFilters.Columns [5].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_DVRDHMS; " is 123.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "	dataGridViewFilters.Columns [6].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_LiveBackoffDHMS; " is 131.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "	dataGridViewFilters.Columns [6].Name = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_LiveBackoff; " is 121.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "			double dscale = (filter.PresentationTimeRange.Timescale != null) ? (double)filter.PresentationTimeRange.Timescale : (double)TimeSpan.TicksPerSecond; " is 148.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "			double dscaleoffset = (myassetmanifesttimingdata.TimeScale != null) ? (double)myassetmanifesttimingdata.TimeScale : (double)TimeSpan.TicksPerSecond; " is 148.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "		comboBoxLocatorsFilters.Items.Add (new Item (AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_AssetFilter + filter.Name' filter.Name)); " is 156.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The length of the statement  "	myContext.Filters.ToList ().ForEach (g => comboBoxLocatorsFilters.Items.Add (new Item (AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_GlobalFilter + g.Name' g.Name))); " is 190.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "			if ((pol.AssetDeliveryProtocol & AssetDeliveryProtocol.ProgressiveDownload) == AssetDeliveryProtocol.ProgressiveDownload) { " is 123.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "			TreeNode myLocNode = new TreeNode (string.Format ("{0} ({1}{2}) {3}"' locator.Type.ToString ()' locatorstatus' (SelectedSE.State != StreamingEndpointState.Running) ? "' Endpoint Stopped" : string.Empty' locator.Name)); " is 218.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "			TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_LocatorInformation)); " is 148.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "			TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_Name0' locator.Name))); " is 175.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "			TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_Type0' locator.Type.ToString ()))); " is 187.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "				TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_StartTime0' (((DateTime)locator.StartTime).ToLocalTime ().ToString ("G"))))); " is 229.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "				TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_ExpirationDateTime0' (((DateTime)locator.ExpirationDateTime).ToLocalTime ().ToString ("G"))))); " is 247.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "				TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_Path0' AssetInfo.RW (locator.Path' SelectedSE' null' false' SelectedSEHostName)))); " is 235.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "				if ((myAsset.Options == AssetCreationOptions.None && myAsset.DeliveryPolicies.Count == 0) || (myAsset.Options == AssetCreationOptions.StorageEncrypted && protocolProgressiveDownload))// if no dynamic encryption and asset clear' or asset storage encrypted with progressive download decryption " is 291.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "						TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode ((new Uri (AssetInfo.RW (locator.Path' SelectedSE' null' checkBoxHttps.Checked' SelectedSEHostName) + IAF.Name)).AbsoluteUri) { " is 200.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "				if (myAsset.AssetType == AssetType.MediaServicesHLS)// It is a static HLS asset' so let's propose only the standard HLS V3 locator " is 130.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "				} else if (myAsset.AssetType == AssetType.SmoothStreaming || myAsset.AssetType == AssetType.MultiBitrateMP4 || myAsset.AssetType == AssetType.Unknown)//later to change Unknown to live archive " is 191.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "						Color ColorSmooth = ((myAsset.AssetType == AssetType.SmoothStreaming) && !checkBoxHttps.Checked) ? Color.Black : colornodeRU; " is 125.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "						foreach (var uri in AssetInfo.GetSmoothStreamingUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) { " is 128.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "						foreach (var uri in AssetInfo.GetSmoothStreamingLegacyUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) { " is 134.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "						foreach (var uri in AssetInfo.GetMpegDashUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) { " is 121.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "				TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format ("Container Path: {0}"' locator.Path.Replace ("http://"' "https://")))); " is 155.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The length of the statement  "				ProgressiveDownloadUris.ForEach (uri => TreeViewLocators.Nodes [indexloc].Nodes [1].Nodes.Add (new TreeNode (uri.AbsoluteUri))); " is 128.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayFileProperties,The length of the statement  "		DGFiles.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayFileProperties_FileSize' AssetInfo.FormatByteSize (AF.ContentFileSize)); " is 149.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayFileProperties,The length of the statement  "		DGFiles.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Created' AF.Created.ToLocalTime ().ToString ("G")); " is 141.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayFileProperties,The length of the statement  "		DGFiles.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayFileProperties_LastModified' AF.LastModified.ToLocalTime ().ToString ("G")); " is 153.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayFileProperties,The length of the statement  "		DGFiles.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayFileProperties_Options' AF.AssetFileOptions); " is 122.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayFileProperties,The length of the statement  "		DGFiles.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayFileProperties_EncryptionScheme' AF.EncryptionScheme); " is 131.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayFileProperties,The length of the statement  "		DGFiles.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayFileProperties_EncryptionVersion' AF.EncryptionVersion); " is 133.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayFileProperties,The length of the statement  "		DGFiles.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayFileProperties_EncryptionKeyId' AF.EncryptionKeyId); " is 129.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayFileProperties,The length of the statement  "		DGFiles.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_ParentAssetId' AF.ParentAssetId); " is 123.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayDeliveryPolicyProperties,The length of the statement  "		IAssetDeliveryPolicy ADP = myAsset.DeliveryPolicies.Skip (listViewDelPol.SelectedIndices [0]).Take (1).FirstOrDefault (); " is 121.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayDeliveryPolicyProperties,The length of the statement  "		DGDelPol.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type' ADP.AssetDeliveryPolicyType); " is 126.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayDeliveryPolicyProperties,The length of the statement  "		DGDelPol.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayDeliveryPolicyProperties_Protocol' ADP.AssetDeliveryProtocol); " is 140.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "		dataGridViewKeys.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Name' key.Name != null ? key.Name : "<no name>"); " is 148.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "		dataGridViewKeys.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_ContentKeyType' key.ContentKeyType); " is 149.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "		dataGridViewKeys.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_Checksum' key.Checksum); " is 137.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "		dataGridViewKeys.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Created' key.Created.ToLocalTime ().ToString ("G")); " is 151.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "		dataGridViewKeys.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayFileProperties_LastModified' key.LastModified.ToLocalTime ().ToString ("G")); " is 163.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "		dataGridViewKeys.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_ProtectionKeyId' key.ProtectionKeyId); " is 151.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "		dataGridViewKeys.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_ProtectionKeyType' key.ProtectionKeyType); " is 155.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "		int i = dataGridViewKeys.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_ClearKeyValue' AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_SeeClearKey); " is 235.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "		dataGridViewKeys.Rows [i].Cells [1].Value = AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_SeeClearKey2; " is 143.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "			dataGridViewKeys.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_AuthorizationPolicyId' key.AuthorizationPolicyId); " is 163.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "			myAuthPolicy = myContext.ContentKeyAuthorizationPolicies.Where (p => p.Id == key.AuthorizationPolicyId).FirstOrDefault (); " is 122.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "				dataGridViewKeys.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_AuthorizationPolicyName' myAuthPolicy.Name); " is 157.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayKeyPropertiesAndAutOptions,The length of the statement  "					ListViewItem item = new ListViewItem ((string.IsNullOrEmpty (option.Name) ? AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_NoName : option.Name)' 0); " is 188.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDownloadFiles,The length of the statement  "			var listfiles = SelectedAssetFiles.ToList ().Where (f => File.Exists (openFolderDialog.FileName + @"\\" + f.Name)).Select (f => openFolderDialog.FileName + @"\\" + f.Name).ToList (); " is 182.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDownloadFiles,The length of the statement  "					text = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoDownloadFiles_TheFollowingFilesAreAlreadyInTheFolderSNN0NNOverwiteTheFiles' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ())); " is 227.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDownloadFiles,The length of the statement  "					text = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoDownloadFiles_TheFollowingFileIsAlreadyInTheFolderNN0NNOverwiteTheFile' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ())); " is 223.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDownloadFiles,The length of the statement  "				if (MessageBox.Show (text' AMSExplorer.Properties.Resources.AssetInformation_DoDownloadFiles_FileSOverwrite' MessageBoxButtons.OKCancel' MessageBoxIcon.Warning) != DialogResult.OK) { " is 182.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDownloadFiles,The length of the statement  "					MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoDownloadFiles_ErrorWhenDeletingFiles' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 219.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDownloadFiles,The length of the statement  "					var response = myMainForm.DoGridTransferAddItem (string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoDownloadFiles_DownloadOfFile0FromAsset1' assetfile.Name' myAsset.Name)' TransferType.DownloadToLocal' true); " is 224.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDownloadFiles,The length of the statement  "				MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoDownloadFiles_DownloadProcessHasBeenInitiatedSeeTheTransfersTabToCheckTheProgress); " is 152.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAssetStats,The length of the statement  "	var tokenDisplayForm = new EditorXMLJSON (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAssetStats_AssetReport' SB.ToString ()' false' false' false); " is 162.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDeleteFiles,The length of the statement  "		string question = SelectedAssetFiles.Count == 1 ? string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoDeleteFiles_DeleteTheFile0' SelectedAssetFiles.FirstOrDefault ().Name) : string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoDeleteFiles_DeleteThese0Files' SelectedAssetFiles.Count); " is 314.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDeleteFiles,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (question' AMSExplorer.Properties.Resources.AssetInformation_DoDeleteFiles_FileDeletion' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 244.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,listViewFiles_SelectedIndexChanged,The length of the statement  "	bool NonEncrypted = (myAsset.Options == AssetCreationOptions.None || myAsset.Options == AssetCreationOptions.CommonEncryptionProtected); " is 136.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoAzureMediaPlayer,The length of the statement  "				AssetInfo.DoPlayBackWithStreamingEndpoint (typeplayer: PlayerType.AzureMediaPlayer' Urlstr: TreeViewLocators.SelectedNode.Text' DoNotRewriteURL: true' context: myContext' formatamp: AzureMediaPlayerFormats.Dash' mainForm: myMainForm); " is 234.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoAzureMediaPlayer,The length of the statement  "				AssetInfo.DoPlayBackWithStreamingEndpoint (typeplayer: PlayerType.AzureMediaPlayer' Urlstr: TreeViewLocators.SelectedNode.Text' DoNotRewriteURL: true' context: myContext' formatamp: AzureMediaPlayerFormats.Smooth' mainForm: myMainForm); " is 236.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoAzureMediaPlayer,The length of the statement  "				AssetInfo.DoPlayBackWithStreamingEndpoint (typeplayer: PlayerType.AzureMediaPlayer' Urlstr: TreeViewLocators.SelectedNode.Text' DoNotRewriteURL: true' context: myContext' formatamp: AzureMediaPlayerFormats.HLS' mainForm: myMainForm); " is 233.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoAzureMediaPlayer,The length of the statement  "				AssetInfo.DoPlayBackWithStreamingEndpoint (typeplayer: PlayerType.AzureMediaPlayer' Urlstr: TreeViewLocators.SelectedNode.Text' DoNotRewriteURL: true' context: myContext' formatamp: AzureMediaPlayerFormats.VideoMP4' mainForm: myMainForm); " is 238.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDuplicate,The length of the statement  "				MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoDuplicate_PleaseSpecifyTheAccountStorageKeyInTheLoginWindow); " is 130.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDuplicate,The length of the statement  "				string newfilename = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoDuplicate_CopyOf0' SelectedAssetFile.Name); " is 131.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDuplicate,The length of the statement  "				if (Program.InputBox (AMSExplorer.Properties.Resources.AssetInformation_DoDuplicate_NewName' AMSExplorer.Properties.Resources.AssetInformation_DoDuplicate_EnterTheNameOfTheNewDuplicateFile' ref newfilename) == DialogResult.OK) { " is 228.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDuplicate,The length of the statement  "					storageAccount = new CloudStorageAccount (new StorageCredentials (_context.DefaultStorageAccount.Name' Mainform._credentials.DefaultStorageKey)' Mainform._credentials.ReturnStorageSuffix ()' true); " is 197.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDuplicate,The length of the statement  "					IAccessPolicy writePolicy = _context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromDays (1)' AccessPermissions.Write); " is 123.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,ProcessUploadFileToAsset,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_ProcessUploadFileToAsset_ErrorWhenUploadingTheFile + Constants.endline + Program.GetErrorMessage (ex)); " is 170.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDelLocator,The length of the statement  "			if (System.Windows.Forms.MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoDelLocator_AreYouSureThatYouWantToDeleteThisLocator' AMSExplorer.Properties.Resources.AssetInformation_DoDelLocator_LocatorDeletion' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 341.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveDeliveryPol,The length of the statement  "			IAssetDeliveryPolicy DP = myAsset.DeliveryPolicies.Skip (listViewDelPol.SelectedIndices [0]).Take (1).FirstOrDefault (); " is 120.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveDeliveryPol,The length of the statement  "				string question = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoRemoveDeliveryPol_ThisWillRemoveThePolicy0FromTheAssetNDoYouWantToAlsoDELETEThePolicyFromTheAzureMediaServicesAccount' DP.Name); " is 213.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveDeliveryPol,The length of the statement  "				DialogResult DR = MessageBox.Show (question' AMSExplorer.Properties.Resources.AssetInformation_DoRemoveDeliveryPol_DeliveryPolicyRemoval' MessageBoxButtons.YesNoCancel); " is 169.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveDeliveryPol,The length of the statement  "						string messagestr = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoRemoveDeliveryPol_ErrorWhen0TheDeliveryPolicy' step); " is 140.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "		IContentKeyAuthorizationPolicyOption option = myAuthPolicy.Options.Skip (listViewAutPolOptions.SelectedIndices [0]).Take (1).FirstOrDefault (); " is 143.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "			dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Name' option.Name != null ? option.Name : AMSExplorer.Properties.Resources.AssetInformation_DoDisplayKeyPropertiesAndAutOptions_NoName); " is 243.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "			int i = dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_KeyDeliveryConfiguration' AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_Null); " is 245.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "				dataGridViewAutPolOption.Rows [i].Cells [1].Value = AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_SeeValue; " is 146.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "			dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_KeyDeliveryType' option.KeyDeliveryType); " is 161.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "				dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_RestrictionName' restriction.Name); " is 155.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "				dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_RestrictionKeyRestrictionType' (ContentKeyRestrictionType)restriction.KeyRestrictionType); " is 210.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "					i = dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_RestrictionRequirements' AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_Null); " is 240.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "						dataGridViewAutPolOption.Rows [i].Cells [1].Value = AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_SeeValue; " is 146.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "						dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_TokenType' tokenTemplate.TokenType); " is 156.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "						i = dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_PrimaryVerificationKey' AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_Null); " is 239.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "							dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_TokenVerificationKeyType' (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) ? "Symmetric" : "Asymmetric (X509)"); " is 269.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "								dataGridViewAutPolOption.Rows [i].Cells [1].Value = AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_SeeKeyValue; " is 149.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "							i = dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_AlternateVerificationKey' AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_Null); " is 241.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "								dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_TokenVerificationKeyType' (verifkey.GetType () == typeof(SymmetricVerificationKey)) ? AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_Symmetric : AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_AsymmetricX509); " is 404.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "									dataGridViewAutPolOption.Rows [i].Cells [1].Value = AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_SeeKeyValue; " is 149.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "							dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_OpenIdConnectDiscoveryDocumentUri' tokenTemplate.OpenIdConnectDiscoveryDocument.OpenIdDiscoveryUri); " is 220.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "						dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_TokenAudience' tokenTemplate.Audience); " is 159.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "						dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_TokenIssuer' tokenTemplate.Issuer); " is 155.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "							dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_RequiredClaimType' claim.ClaimType); " is 156.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDisplayAuthorizationPolicyOption,The length of the statement  "							dataGridViewAutPolOption.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_RequiredClaimValue' claim.ClaimValue); " is 158.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoGetTestToken,The length of the statement  "			IContentKeyAuthorizationPolicy AutPol = myContext.ContentKeyAuthorizationPolicies.Where (a => a.Id == key.AuthorizationPolicyId).FirstOrDefault (); " is 147.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoGetTestToken,The length of the statement  "				IContentKeyAuthorizationPolicyOption AutPolOption = AutPol.Options.Skip (listViewAutPolOptions.SelectedIndices [0]).FirstOrDefault (); " is 134.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoGetTestToken,The length of the statement  "					DynamicEncryption.TokenResult testToken = DynamicEncryption.GetTestToken (myAsset' myContext' key.ContentKeyType' displayUI: true' optionid: AutPolOption.Id); " is 158.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoGetTestToken,The length of the statement  "						myMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.AssetInformation_DoGetTestToken_TheAuthorizationTestTokenWithoutBearerIsN0' testToken); " is 152.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoGetTestToken,The length of the statement  "						myMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.AssetInformation_DoGetTestToken_TheAuthorizationTestTokenWithBearerIsN0' Constants.Bearer + testToken); " is 168.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoGetTestToken,The length of the statement  "						MessageBox.Show (string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoGetTestToken_TheTestTokenBelowHasBeenBeCopiedToTheLogWindowAndClipboardNN0' Constants.Bearer + testToken.TokenString)' "Test token copied"); " is 224.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,buttonAudioVideoAnalysis_Click,The length of the statement  "	IAssetFile metadatafile = myContext.Files.Where (f => f.Name == myAsset.Id.Replace (Constants.AssetIdPrefix' string.Empty) + "_metadata.xml").OrderBy (f => f.LastModified).FirstOrDefault (); " is 190.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,buttonAudioVideoAnalysis_Click,The length of the statement  "					tempMetadaLocator = myContext.Locators.Create (LocatorType.Sas' metadatafile.Asset' AccessPermissions.Read' TimeSpan.FromHours (1)); " is 132.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,buttonAudioVideoAnalysis_Click,The length of the statement  "				MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_buttonAudioVideoAnalysis_Click_ErrorWhenCreatingTheTemporarySASLocatorToTheMetadataFile); " is 156.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,GetTemporaryLocator,The length of the statement  "			MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_GetTemporaryLocator_ErrorWhenCreatingTheTemporarySASLocatorN + ex.Message); " is 142.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDemoveKey,The length of the statement  "		string question = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoDemoveKey_ThisWillRemoveTheKey0FromTheAssetNDoYouWantToAlsoDELETETheKeyFromTheAzureMediaServicesAccount' key.Name); " is 200.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDemoveKey,The length of the statement  "		DialogResult DR = MessageBox.Show (question' AMSExplorer.Properties.Resources.AssetInformation_DoDemoveKey_KeyRemoval' MessageBoxButtons.YesNoCancel); " is 150.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDemoveKey,The length of the statement  "				string messagestr = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoDemoveKey_ErrorWhen0TheKey' step); " is 121.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,contextMenuStripFiles_Opening,The length of the statement  "	bool NonEncrypted = (myAsset.Options == AssetCreationOptions.None || myAsset.Options == AssetCreationOptions.CommonEncryptionProtected); " is 136.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveAuthPol,The length of the statement  "			IContentKeyAuthorizationPolicy AuthPol = myContext.ContentKeyAuthorizationPolicies.Where (p => p.Id == key.AuthorizationPolicyId).FirstOrDefault (); " is 148.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveAuthPol,The length of the statement  "				string question = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoRemoveAuthPol_ThisWillRemoveTheAuthorizationPolicy0FromTheKeyNDoYouWantToAlsoDELETEThePolicyFromTheAzureMediaServicesAccount' AuthPol.Name); " is 225.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveAuthPol,The length of the statement  "				DialogResult DR = MessageBox.Show (question' AMSExplorer.Properties.Resources.AssetInformation_DoRemoveAuthPol_AuthorizationPolicyRemoval' MessageBoxButtons.YesNoCancel); " is 170.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveAuthPol,The length of the statement  "						string messagestr = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoRemoveAuthPol_ErrorWhen0TheAuthorizationPolicy' step); " is 141.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveAuthPolOption,The length of the statement  "			IContentKeyAuthorizationPolicy AuthPol = myContext.ContentKeyAuthorizationPolicies.Where (p => p.Id == key.AuthorizationPolicyId).FirstOrDefault (); " is 148.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveAuthPolOption,The length of the statement  "				string question = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoRemoveAuthPolOption_ThisWillRemoveTheOption0FromTheAuthorizationPolicyNDoYouWantToAlsoDELETETheOptionFromTheAzureMediaServicesAccount' AuthPol.Name); " is 234.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveAuthPolOption,The length of the statement  "				DialogResult DR = MessageBox.Show (question' AMSExplorer.Properties.Resources.AssetInformation_DoRemoveAuthPolOption_OptionRemoval' MessageBoxButtons.YesNoCancel); " is 163.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoRemoveAuthPolOption,The length of the statement  "						string messagestr = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoRemoveAuthPolOption_ErrorWhen0TheAuthorizationPolicyOption' step); " is 153.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoFilterInfo,The length of the statement  "				myMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.AssetInformation_DoFilterInfo_AssetFilter0HasBeenUpdated' filtertoupdate.Name); " is 144.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoFilterInfo,The length of the statement  "				MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoFilterInfo_ErrorWhenUpdatingAssetFilter + Constants.endline + Program.GetErrorMessage (e)' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 272.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoFilterInfo,The length of the statement  "				myMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.AssetInformation_DoFilterInfo_ErrorWhenUpdatingAssetFilter0' filter.Name' true); " is 145.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoCreateAssetFilter,The length of the statement  "			myMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.AssetInformation_DoCreateAssetFilter_AssetFilter0HasBeenCreated' filterinfo.Name); " is 147.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoCreateAssetFilter,The length of the statement  "			MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoCreateAssetFilter_ErrorWhenCreatingAssetFilter + Constants.endline + Program.GetErrorMessage (e)' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 220.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoCreateAssetFilter,The length of the statement  "			myMainForm.TextBoxLogWriteLine (AMSExplorer.Properties.Resources.AssetInformation_DoCreateAssetFilter_ErrorWhenCreatingAssetFilter0' (filterinfo != null && filterinfo.Name != null) ? filterinfo.Name : AMSExplorer.Properties.Resources.AssetInformation_DoCreateAssetFilter_UnknownName' true); " is 290.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDeleteAssetFilter,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoDeleteAssetFilter_ErrorWhenDeletingAssetFilterS' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 230.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDuplicateFilter,The length of the statement  "		if (Program.InputBox (AMSExplorer.Properties.Resources.AssetInformation_DoDuplicate_NewName' AMSExplorer.Properties.Resources.AssetInformation_DoDuplicateFilter_EnterTheNameOfTheNewDuplicateFilter' ref newfiltername) == DialogResult.OK) { " is 238.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDuplicateFilter,The length of the statement  "				MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoDuplicateFilter_ErrorWhenDuplicatingAssetFilter + Constants.endline + Program.GetErrorMessage (e)' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 280.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoDeleteAllFiles,The length of the statement  "		if (System.Windows.Forms.MessageBox.Show (question' AMSExplorer.Properties.Resources.AssetInformation_DoDeleteFiles_FileDeletion' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) { " is 244.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoEditFile,The length of the statement  "			var editform = new EditorXMLJSON (string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_OnlineEditOf0' assetFileToEdit.Name)' datastring' true' false); " is 173.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,SeeClearKey,The length of the statement  "	var editform = new EditorXMLJSON (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_Value' key.ToString ()' false' false); " is 133.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,dataGridViewKeys_CellContentClick,The length of the statement  "	if (e.RowIndex >= 0 && senderGrid.Rows [e.RowIndex].Cells [e.ColumnIndex].GetType () == typeof(DataGridViewButtonCell)) { " is 121.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,dataGridViewAutPolOption_CellContentClick,The length of the statement  "	if (e.RowIndex >= 0 && senderGrid.Rows [e.RowIndex].Cells [e.ColumnIndex].GetType () == typeof(DataGridViewButtonCell)) { " is 121.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,dataGridViewAutPolOption_CellContentClick,The length of the statement  "		SeeValueInEditor (senderGrid.Rows [e.RowIndex].Cells [0].Value.ToString ()' senderGrid.Rows [e.RowIndex].Cells [e.ColumnIndex].Tag.ToString ()); " is 144.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoGenerateManifest,The length of the statement  "		var editform = new EditorXMLJSON (string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_OnlineEditOf0' smildata.FileName)' smildata.Content' true' false' true' AMSExplorer.Properties.Resources.AssetInformation_DoGenerateManifest_PleaseCheckCarefullyTheContentOfTheGeneratedManifestAsTheToolMakesGuesses); " is 326.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoAddExistingDelPol,The length of the statement  "				string messagestr = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoAddExistingDelPol_ErrorWhenAttachingTheDeliveryPolicy); " is 142.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoAddExistingAutPol,The length of the statement  "						string messagestr = string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoAddExistingAutPol_ErrorWhenAttachingAnExistingAuthorizationPolicy); " is 154.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AssetInformation)); " is 137.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripDG.MouseClick += new System.Windows.Forms.MouseEventHandler (this.contextMenuStripDG_MouseClick_1); " is 120.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.toolStripMenuItemFilesCopyClipboard.Click += new System.EventHandler (this.toolStripMenuItemFilesCopyClipboard_Click); " is 123.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripLocators.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripLocators_Opening); " is 126.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripFiles.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripFiles_Opening); " is 120.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.uploadASmallFileInTheAssetToolStripMenuItem' "uploadASmallFileInTheAssetToolStripMenuItem"); " is 123.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.uploadASmallFileInTheAssetToolStripMenuItem.Click += new System.EventHandler (this.uploadASmallFileInTheAssetToolStripMenuItem_Click); " is 139.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewFilters.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 125.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewFilters.CellContentDoubleClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewFilters_CellContentDoubleClick); " is 155.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.createAnAssetFilterToolStripMenuItem.Click += new System.EventHandler (this.createAnAssetFilterToolStripMenuItem_Click); " is 125.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.playWithThisFilterToolStripMenuItem.Click += new System.EventHandler (this.playWithThisFilterToolStripMenuItem_Click); " is 123.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAutPolOption.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 130.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAutPolOption.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewAutPolOption_CellContentClick); " is 153.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.listViewAutPolOptions.SelectedIndexChanged += new System.EventHandler (this.listViewAutPolOption_SelectedIndexChanged); " is 124.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripAuthPol.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripAuthPol_Opening); " is 124.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.removeAuthorizationPolicyToolStripMenuItem' "removeAuthorizationPolicyToolStripMenuItem"); " is 121.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.removeAuthorizationPolicyToolStripMenuItem.Click += new System.EventHandler (this.removeAuthorizationPolicyToolStripMenuItem_Click_1); " is 139.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewKeys.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 122.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.dataGridViewKeys.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridViewKeys_CellContentClick); " is 137.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.DGDelPol.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler (this.dataGridView1_CellContentClick); " is 126.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripDelPol.Opening += new System.ComponentModel.CancelEventHandler (this.contextMenuStripDelPol_Opening); " is 122.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.removeDeliveryPolicyToolStripMenuItem.Click += new System.EventHandler (this.removeDeliveryPolicyToolStripMenuItem_Click); " is 127.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.comboBoxLocatorsFilters.SelectedIndexChanged += new System.EventHandler (this.comboBoxLocatorsFilters_SelectedIndexChanged); " is 129.
Long Statement,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The length of the statement  "	this.comboBoxStreamingEndpoint.SelectedIndexChanged += new System.EventHandler (this.comboBoxStreamingEndpoint_SelectedIndexChanged); " is 133.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,CreateLiveChannel_Load,The length of the statement  "	comboBoxEncodingType.Items.Add (new Item (AMSExplorer.Properties.Resources.CreateLiveChannel_CreateLiveChannel_Load_None' Enum.GetName (typeof(ChannelEncodingType)' ChannelEncodingType.None))); " is 193.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,CreateLiveChannel_Load,The length of the statement  "	comboBoxEncodingType.Items.Add (new Item (AMSExplorer.Properties.Resources.CreateLiveChannel_CreateLiveChannel_Load_Standard' Enum.GetName (typeof(ChannelEncodingType)' ChannelEncodingType.Standard))); " is 201.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,CreateLiveChannel_Load,The length of the statement  "		comboBoxEncodingType.Items.Add (new Item (AMSExplorer.Properties.Resources.CreateLiveChannel_CreateLiveChannel_Load_PremiumPreview' Enum.GetName (typeof(ChannelEncodingType)' ChannelEncodingType.Premium))); " is 206.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,CreateLiveChannel_Load,The length of the statement  "	Item myitem = new Item (AMSExplorer.Properties.Resources.CreateLiveChannel_CreateLiveChannel_Load_Undefined' defaultLanguageString); " is 132.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,CreateLiveChannel_Load,The length of the statement  "	moreinfoLiveEncodingProfilelink.Links.Add (new LinkLabel.Link (0' moreinfoLiveEncodingProfilelink.Text.Length' Constants.LinkMoreInfoLiveEncoding)); " is 148.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,CreateLiveChannel_Load,The length of the statement  "	moreinfoLiveStreamingProfilelink.Links.Add (new LinkLabel.Link (0' moreinfoLiveStreamingProfilelink.Text.Length' Constants.LinkMoreInfoLiveStreaming)); " is 151.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,CreateLiveChannel_Load,The length of the statement  "	linkLabelMoreInfoPrice.Links.Add (new LinkLabel.Link (0' linkLabelMoreInfoPrice.Text.Length' Constants.LinkMoreInfoPricing)); " is 125.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,comboBoxProtocolInput_SelectedIndexChanged,The length of the statement  "	comboBoxAdMarkerSource.Items.Add (new Item (AMSExplorer.Properties.Resources.CreateLiveChannel_comboBoxProtocolInput_SelectedIndexChanged_APIDefault' Enum.GetName (typeof(AdMarkerSource)' AdMarkerSource.Api))); " is 210.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,comboBoxProtocolInput_SelectedIndexChanged,The length of the statement  "		comboBoxAdMarkerSource.Items.Add (new Item (AMSExplorer.Properties.Resources.CreateLiveChannel_comboBoxProtocolInput_SelectedIndexChanged_SCTE35CueMessages' Enum.GetName (typeof(AdMarkerSource)' AdMarkerSource.Scte35))); " is 220.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,FillComboProtocols,The length of the statement  "	comboBoxProtocolInput.Items.Add (new Item (Program.ReturnNameForProtocol (StreamingProtocol.FragmentedMP4)' Enum.GetName (typeof(StreamingProtocol)' StreamingProtocol.FragmentedMP4))); " is 184.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,FillComboProtocols,The length of the statement  "	comboBoxProtocolInput.Items.Add (new Item (Program.ReturnNameForProtocol (StreamingProtocol.RTMP)' Enum.GetName (typeof(StreamingProtocol)' StreamingProtocol.RTMP))); " is 166.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,FillComboProtocols,The length of the statement  "		comboBoxProtocolInput.Items.Add (new Item (Program.ReturnNameForProtocol (StreamingProtocol.RTPMPEG2TS)' Enum.GetName (typeof(StreamingProtocol)' StreamingProtocol.RTPMPEG2TS))); " is 178.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,buttonAddAudioStream_Click,The length of the statement  "	if (numericUpDownAudioIndexMain.Value != numericUpDownAudioIndexAddition.Value && !audiostreams.Select (a => a.Index).ToList ().Contains ((int)numericUpDownAudioIndexAddition.Value) && audiostreams.Count < 7//8 max audio streams " is 228.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,buttonUploadSlate_Click,The length of the statement  "			MessageBox.Show (errorString' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 142.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,ProcessUploadFile,The length of the statement  "		policy = MyContext.AccessPolicies.Create (SafeFileName' TimeSpan.FromDays (30)' AccessPermissions.Write | AccessPermissions.List); " is 130.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,checkBoxAdInsertSlate_Validating,The length of the statement  "		errorProvider1.SetError (checkBoxInsertSlateOnAdMarker' AMSExplorer.Properties.Resources.CreateLiveChannel_checkBoxAdInsertSlate_Validating_NoJPGSelected); " is 155.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,checkChannelName,The length of the statement  "		errorProvider1.SetError (tb' AMSExplorer.Properties.Resources.CreateLiveChannel_checkChannelName_ChannelNameIsNotValid); " is 120.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,checkKeyFrameValue,The length of the statement  "		errorProvider1.SetError (textBoxKeyFrame' AMSExplorer.Properties.Resources.ChannelInformation_checkKeyFrameValue_ValueIsNotValid); " is 130.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,numericUpDownAudioIndexMain_ValueChanged,The length of the statement  "		errorProvider1.SetError (numericUpDownAudioIndexMain' string.Format (AMSExplorer.Properties.Resources.ChannelInformation_numericUpDownAudioIndexMain_ValueChanged_TheAudioStreamIndex0IsRepeated' defaultaudiostream.Index)); " is 221.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,numericUpDownAudioIndexAddition_ValueChanged,The length of the statement  "	if (numericUpDownAudioIndexMain.Value == numericUpDownAudioIndexAddition.Value || audiostreams.Select (a => a.Index).ToList ().Contains ((int)numericUpDownAudioIndexAddition.Value)) { " is 183.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,numericUpDownAudioIndexAddition_ValueChanged,The length of the statement  "		errorProvider1.SetError (numericUpDownAudioIndexAddition' string.Format (AMSExplorer.Properties.Resources.ChannelInformation_numericUpDownAudioIndexMain_ValueChanged_TheAudioStreamIndex0IsRepeated' numericUpDownAudioIndexAddition.Value)); " is 238.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(CreateLiveChannel)); " is 138.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.comboBoxProtocolInput.SelectedIndexChanged += new System.EventHandler (this.comboBoxProtocolInput_SelectedIndexChanged); " is 125.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.checkBoxKeyFrameIntDefined.CheckedChanged += new System.EventHandler (this.checkBoxKeyFrameIntDefined_CheckedChanged); " is 123.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.checkBoxHLSFragPerSegDefined.CheckedChanged += new System.EventHandler (this.checkBoxHLSFragPerSegDefined_CheckedChanged); " is 127.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.moreinfoLiveStreamingProfilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoLiveEncodingProfilelink_LinkClicked); " is 162.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.moreinfoLiveEncodingProfilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoLiveEncodingProfilelink_LinkClicked); " is 161.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.checkBoxRestrictPreviewIP.CheckedChanged += new System.EventHandler (this.checkBoxRestrictPreviewIP_CheckedChanged); " is 121.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.comboBoxEncodingType.SelectedIndexChanged += new System.EventHandler (this.comboBoxEncodingType_SelectedIndexChanged); " is 123.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.dataGridViewVideoProf.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 127.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAudioProf.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 127.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.numericUpDownVideoStreamIndex' resources.GetString ("numericUpDownVideoStreamIndex.ToolTip")); " is 125.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.numericUpDownAudioIndexAddition' resources.GetString ("numericUpDownAudioIndexAddition.ToolTip")); " is 129.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.numericUpDownAudioIndexAddition.ValueChanged += new System.EventHandler (this.numericUpDownAudioIndexAddition_ValueChanged); " is 129.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.dataGridViewAudioStreams.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 130.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.comboBoxAudioLanguageMain.SelectedIndexChanged += new System.EventHandler (this.comboBoxAudioLanguageMain_SelectedIndexChanged); " is 133.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.toolTip1.SetToolTip (this.numericUpDownAudioIndexMain' resources.GetString ("numericUpDownAudioIndexMain.ToolTip")); " is 121.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.numericUpDownAudioIndexMain.ValueChanged += new System.EventHandler (this.numericUpDownAudioIndexMain_ValueChanged); " is 121.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.checkBoxInsertSlateOnAdMarker.CheckedChanged += new System.EventHandler (this.checkBoxAdInsertSlate_CheckedChanged); " is 121.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.checkBoxInsertSlateOnAdMarker.Validating += new System.ComponentModel.CancelEventHandler (this.checkBoxAdInsertSlate_Validating); " is 134.
Long Statement,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,InitializeComponent,The length of the statement  "	this.linkLabelMoreInfoPrice.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoLiveEncodingProfilelink_LinkClicked); " is 152.
Long Statement,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The length of the statement  "		InputProtocol = string.Format ("{0} ({1})"' Program.ReturnNameForProtocol (c.Input.StreamingProtocol)' c.Input.Endpoints.Count)' " is 128.
Long Statement,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The length of the statement  "		EncodingPreset = (c.EncodingType != ChannelEncodingType.None && c.Encoding != null) ? c.Encoding.SystemPreset : string.Empty' " is 125.
Long Statement,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The length of the statement  "	SortableBindingList<ChannelEntry> MyObservChannelsInPage = new SortableBindingList<ChannelEntry> (channelquery.Take (0).ToList ()); " is 131.
Long Statement,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,DisplayPage,The length of the statement  "		this.DataSource = new BindingList<ChannelEntry> (_MyObservChannels.Skip (_channelsperpage * (page - 1)).Take (_channelsperpage).ToList ()); " is 139.
Long Statement,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshChannels,The length of the statement  "			channelssrv = context.Channels.Where (c => (c.Name.ToLower ().Contains (_searchinname.Text.ToLower ())) && (!filterStartDate || c.LastModified > dateTimeStart) && (!filterEndDate || c.LastModified < dateTimeRangeEnd)); " is 218.
Long Statement,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshChannels,The length of the statement  "				MessageBox.Show ("Error with channel Id. Is it a valid GUID or channel Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 131.
Long Statement,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshChannels,The length of the statement  "				channelssrv = context.Channels.Where (c => (c.Id == Constants.ChannelIdPrefix + channelguid) && (!filterStartDate || c.LastModified > dateTimeStart) && (!filterEndDate || c.LastModified < dateTimeRangeEnd)); " is 207.
Long Statement,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshChannels,The length of the statement  "		channelssrv = context.Channels.Where (c => (!filterStartDate || c.LastModified > dateTimeStart) && (!filterEndDate || c.LastModified < dateTimeRangeEnd)); " is 154.
Long Statement,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshChannels,The length of the statement  "		InputProtocol = string.Format ("{0} ({1})"' Program.ReturnNameForProtocol (c.Input.StreamingProtocol)' c.Input.Endpoints.Count)' " is 128.
Long Statement,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshChannels,The length of the statement  "		EncodingPreset = (c.EncodingType != ChannelEncodingType.None && c.Encoding != null) ? c.Encoding.SystemPreset : string.Empty' " is 125.
Long Statement,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The length of the statement  "	SortableBindingList<ProgramEntry> MyObservProgramInPage = new SortableBindingList<ProgramEntry> (programquery.Take (0).ToList ()); " is 130.
Long Statement,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,DisplayPage,The length of the statement  "		this.DataSource = new BindingList<ProgramEntry> (_MyObservPrograms.Skip (_itemssperpage * (page - 1)).Take (_itemssperpage).ToList ()); " is 135.
Long Statement,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The length of the statement  "				programssrv = context.Programs.Where (p => (p.Name.ToLower ().Contains (_searchinname.Text.ToLower ())) && (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd)); " is 218.
Long Statement,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The length of the statement  "					MessageBox.Show ("Error with program Id. Is it a valid GUID or program Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 131.
Long Statement,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The length of the statement  "					programssrv = context.Programs.Where (p => (p.Id == Constants.ProgramIdPrefix + programguid)// no need to filter the date or ID as user request a specific ID " is 157.
Long Statement,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The length of the statement  "			programssrv = context.Programs.Where (p => (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd)); " is 154.
Long Statement,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The length of the statement  "					// ***** Where(p => p.ChannelId == "nb:chid:UUID:29aae99e-66d9-4a54-8cf0-8f652fd0f0ff" || p.ChannelId == "nb:chid:UUID:....)) ***** " is 131.
Long Statement,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The length of the statement  "		Published = p.Asset.Locators.Where (l => l.Type == LocatorType.OnDemandOrigin).Count () > 0 ? Streaminglocatorimage : null' " is 123.
Long Statement,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The length of the statement  "				mainform.TextBoxLogWriteLine ("Channel '{0}' NOT {1}. (Error {2})"' channel.Name' strStatusSuccess' operation.ErrorCode' true); " is 127.
Long Statement,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The length of the statement  "			mainform.TextBoxLogWriteLine ("Channel '{0}' NOT {1}. (Error {2})"' channel.Name' strStatusSuccess' operation.ErrorCode' true); " is 127.
Long Statement,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The length of the statement  "			mainform.TextBoxLogWriteLine ("Channel '{0}' NOT {1}. (Error {2})"' channel.Name' strStatusSuccess' operation.ErrorCode' true); " is 127.
Long Statement,AMSExplorer,ProgramInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,GetValidURIs,The length of the statement  "		ValidURIs = locators.SelectMany (l => _context.StreamingEndpoints.AsEnumerable ().Where (o => (o.State == StreamingEndpointState.Running) && (StreamingEndpointInformation.CanDoDynPackaging (o))).OrderByDescending (o => o.CdnEnabled).Select (o => template.BindByPosition (new Uri ("http://" + o.HostName)' l.ContentAccessComponent' ismFile.Name))).ToArray (); " is 358.
Long Statement,AMSExplorer,ProgramInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,GetNotValidURIs,The length of the statement  "		NotValidURIs = locators.SelectMany (l => _context.StreamingEndpoints.AsEnumerable ().Where (o => (o.State != StreamingEndpointState.Running) || (!StreamingEndpointInformation.CanDoDynPackaging (o))).Select (o => template.BindByPosition (new Uri ("http://" + o.HostName)' l.ContentAccessComponent' ismFile.Name))).ToArray (); " is 324.
Long Statement,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,buttonReset_Click,The length of the statement  "	Properties.Settings.Default.PremiumWorkflowPresetXMLFilesCurrentFolder = Application.StartupPath + Constants.PathPremiumWorkflowFiles; " is 134.
Long Statement,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,options_Load,The length of the statement  "	amspriceslink.Links.Add (new LinkLabel.Link (0' amspriceslink.Text.Length' "http://azure.microsoft.com/en-us/pricing/details/media-services/")); " is 144.
Long Statement,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Options)); " is 128.
Long Statement,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The length of the statement  "	this.checkBoxEnableCustomPlayer.CheckedChanged += new System.EventHandler (this.checkBoxEnableCustomPlayer_CheckedChanged); " is 123.
Long Statement,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The length of the statement  "	this.amspriceslink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.amspriceslink_LinkClicked); " is 125.
Long Statement,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(TimeControl)); " is 132.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,WatchFolder_Load,The length of the statement  "	checkBoxPublishOAssets.Text = string.Format (checkBoxPublishOAssets.Text' Properties.Settings.Default.DefaultLocatorDurationDaysNew); " is 133.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,WatchFolder_Load,The length of the statement  "			StreamReader streamReader = new StreamReader (Path.Combine (Application.StartupPath + Constants.PathConfigFiles' "SampleWatchFolderJSONCall.json")); " is 148.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,CheckCompatibilityTemplate,The length of the statement  "	int numberofinputassets = checkBoAddAssetsToInput.Checked ? (radioButtonInsertSelectedAssets.Checked ? selectedassetcount + 1 : 2) : 1; " is 135.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,CheckCompatibilityTemplate,The length of the statement  "	if (listViewTemplates.GetSelectedJobTemplate != null && listViewTemplates.GetSelectedJobTemplate.NumberofInputAssets != numberofinputassets) { " is 142.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,CheckCompatibilityTemplate,The length of the statement  "		labelWarning.Text = string.Format ("The number of input assets in the template ({0}) is incompatible with the input assets ({1})"' listViewTemplates.GetSelectedJobTemplate.NumberofInputAssets' numberofinputassets); " is 214.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,radioButtonInsertWorkflowAsset_CheckedChanged,The length of the statement  "		listViewWorkflows1.LoadWorkflows (_context' _WatchFolderSettings.TypeInputExtraInput == TypeInputExtraInput.SelectedWorkflow ? _WatchFolderSettings.ExtraInputAssets.FirstOrDefault () : null); " is 191.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,GetListFilesFromRohzetXML,The length of the statement  "		var assets = doc.Element ("TemplateExXML").Element ("WorkflowParams").Element ("Source").Element ("AssetGroup").Element ("Location").Elements ("AssetItem"); " is 156.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,GetListFilesFromRohzetXML,The length of the statement  "				string filename = relative ? Path.Combine (Path.GetDirectoryName (filenameWithPath)' a.Element ("URI").Value) : a.Element ("URI").Value; " is 136.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,SeeRhozetExample,The length of the statement  "		XDocument doc = XDocument.Load (Path.Combine (Application.StartupPath + Constants.PathConfigFiles' "SampleSemaphoreRhozet.xml")); " is 129.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,SeeRhozetExample,The length of the statement  "		var tokenDisplayForm = new EditorXMLJSON ("Sample Semaphore XML file"' doc.Declaration.ToString () + Environment.NewLine + doc.ToString ()' false' false' false); " is 161.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(WatchFolder)); " is 132.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,InitializeComponent,The length of the statement  "	this.radioButtonInsertWorkflowAsset.CheckedChanged += new System.EventHandler (this.radioButtonInsertWorkflowAsset_CheckedChanged); " is 131.
Long Statement,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,InitializeComponent,The length of the statement  "	this.radioButtonInsertSelectedAssets.CheckedChanged += new System.EventHandler (this.radioButtonInsertSelectedAssets_CheckedChanged); " is 133.
Long Statement,AMSExplorer,CreateLocator,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLocator.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(CreateLocator)); " is 134.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,listViewProcessors_SelectedIndexChanged,The length of the statement  "					MessageBox.Show ("You must at least have two input assets : the workflow file and the video file."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 159.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,UpdateJobSummary,The length of the statement  "	labelsummaryjob.Text = string.Format (_labelsummaryjob' nbjobs' nbjobs > 1 ? "s" : ""' numberoftasks' numberoftasks > 1 ? "s" : ""); " is 132.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,UpdateGeneralWarning,The length of the statement  "		string processorname = processorcontrol.SelectedIndices.Count > 0 ? Procs [processorcontrol.SelectedIndices [0]].Name : string.Empty; " is 133.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,UpdateGeneralWarning,The length of the statement  "		if (string.IsNullOrEmpty (mytextboxconfig.Text) && processorname != Constants.AzureMediaEncoderPremiumWorkflow && processorname != MediaProcessorNames.StorageDecryption) { " is 171.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,UpdateGeneralWarning,The length of the statement  "		if (ReturnTaskConfiguration (index_task).GetSettings ().OutputAssetsCreationOptions == AssetCreationOptions.StorageEncrypted && processorname == MediaProcessorNames.StorageDecryption) { " is 185.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MultipleProcessor)); " is 138.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,InitializeComponent,The length of the statement  "	this.listViewProcessors1.SelectedIndexChanged += new System.EventHandler (this.listViewProcessors_SelectedIndexChanged); " is 120.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,InitializeComponent,The length of the statement  "	this.listViewProcessors2.SelectedIndexChanged += new System.EventHandler (this.listViewProcessors_SelectedIndexChanged); " is 120.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,InitializeComponent,The length of the statement  "	this.listViewProcessors3.SelectedIndexChanged += new System.EventHandler (this.listViewProcessors_SelectedIndexChanged); " is 120.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,InitializeComponent,The length of the statement  "	this.listViewProcessors4.SelectedIndexChanged += new System.EventHandler (this.listViewProcessors_SelectedIndexChanged); " is 120.
Long Statement,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,InitializeComponent,The length of the statement  "	this.listViewProcessors5.SelectedIndexChanged += new System.EventHandler (this.listViewProcessors_SelectedIndexChanged); " is 120.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The length of the statement  "				tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked; " is 138.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The length of the statement  "				tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked; " is 138.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,checkBoxStitch_CheckedChanged,The length of the statement  "			this.tableLayoutPanelIAssets.Controls [this.tableLayoutPanelIAssets.Controls.IndexOf (c) + 1].Enabled = cbEditTime.Checked; " is 123.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,checkBoxStitch_CheckedChanged,The length of the statement  "			this.tableLayoutPanelIAssets.Controls [this.tableLayoutPanelIAssets.Controls.IndexOf (c) + 2].Enabled = cbEditTime.Checked; " is 123.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The length of the statement  "	if (stich_on || voverlay_on || aoverlay_on || !xmlOpenedNotYetStiched)// on stich checkbox is checked' or checkbox as been selected in the past for this file' so let's modify the xml doc " is 186.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The length of the statement  "										preset.Descendants ("Sources").FirstOrDefault ().Add (new XElement ("Source"' new XAttribute ("AudioStreamIndex"' 0)' new XAttribute ("MediaFile"' f))); " is 152.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The length of the statement  "										preset.Descendants ("Clips").LastOrDefault ().Add (new XElement ("Clip"' new XAttribute ("StartTime"' startime.Text)' new XAttribute ("EndTime"' endtime.Text))); " is 161.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The length of the statement  "											preset.Descendants ("Sources").FirstOrDefault ().Add (new XElement ("Source"' new XAttribute ("AudioStreamIndex"' 0)' new XAttribute ("MediaFile"' f))); " is 152.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The length of the statement  "											preset.Descendants ("Sources").FirstOrDefault ().Add (new XElement ("Source"' new XAttribute ("AudioStreamIndex"' 0)' new XAttribute ("MediaFile"' SelectedAssets.FirstOrDefault ().AssetFiles.Skip ((int)c.Tag).Take (1).FirstOrDefault ().Name))); " is 244.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The length of the statement  "										preset.Descendants ("Clips").LastOrDefault ().Add (new XElement ("Clip"' new XAttribute ("StartTime"' startime.Text)' new XAttribute ("EndTime"' endtime.Text))); " is 161.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The length of the statement  "										mediafile.FirstOrDefault ().Add (new XAttribute ("OverlayFileName"' SelectedAssets.FirstOrDefault ().AssetFiles.Skip ((int)c.Tag).Take (1).FirstOrDefault ().Name)); " is 164.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The length of the statement  "									mediafile.FirstOrDefault ().Add (new XAttribute ("OverlayRect"' string.Format ("{0}' {1}' {2}' {3}"' numericUpDownVOverlayRectX.Value' numericUpDownVOverlayRectY.Value' numericUpDownVOverlayRectW.Value' numericUpDownVOverlayRectH.Value))); " is 239.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The length of the statement  "										mediafile.FirstOrDefault ().Add (new XAttribute ("AudioOverlayFileName"' SelectedAssets.FirstOrDefault ().AssetFiles.Skip ((int)c.Tag).Take (1).FirstOrDefault ().Name)); " is 169.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The length of the statement  "			MessageBox.Show (AMSExplorer.Properties.Resources.EncodingAMEAdv_UpdateStitchAndOverlaysInDoc_ErrorWhenProcessingTheXMLPresetIsItAAMEPreset); " is 141.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddNamingConventionToDoc,The length of the statement  "	if (checkBoxNamingConvention.Checked || !xmlOpenedNotYetNamedConvention)// name convention checkbox is checked' or checkbox as been selected in the past for this file' so let's modify the xml doc " is 195.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddNamingConventionToDoc,The length of the statement  "				var namingconvention = doc.Element ("Preset").Attributes ().Where (p => p.Name == "DefaultMediaOutputFileName").FirstOrDefault (); " is 130.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddNamingConventionToDoc,The length of the statement  "			MessageBox.Show (AMSExplorer.Properties.Resources.EncodingAMEAdv_UpdateStitchAndOverlaysInDoc_ErrorWhenProcessingTheXMLPresetIsItAAMEPreset); " is 141.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddVSSRotationToDoc,The length of the statement  "	if (checkBoxVSS.Checked || !xmlOpenedNotYetVSSRotation)// VSS checkbox is checked' or checkbox as been selected in the past for this file' so let's modify the xml doc " is 166.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,buttonSaveXML_Click,The length of the statement  "			MessageBox.Show (string.Format (AMSExplorer.Properties.Resources.EncodingAMEAdv_buttonSaveXML_Click_ErrorCouldNotSaveFileToDiskOriginalError0' ex.Message)); " is 156.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,textBoxConfiguration_TextChanged,The length of the statement  "	textBoxConfiguration.Text = textBoxConfiguration.Text.Replace ("\r\n"' "\n").Replace ("\r"' "\n").Replace ("\n"' Environment.NewLine); " is 134.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(EncodingAMEAdv)); " is 135.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The length of the statement  "	this.comboBoxVOverlayMode.SelectedIndexChanged += new System.EventHandler (this.comboBoxVOverlayMode_SelectedIndexChanged); " is 123.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The length of the statement  "	this.comboBoxAOverlayMode.SelectedIndexChanged += new System.EventHandler (this.comboBoxAOverlayMode_SelectedIndexChanged); " is 123.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The length of the statement  "	this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The length of the statement  "	this.moreinfoame.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoame_LinkClicked); " is 121.
Long Statement,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,UpdateJobSummary,The length of the statement  "		labelsummaryjob.Text = string.Format (AMSExplorer.Properties.Resources.EncodingPremium_UpdateJobSummary_YouAreGoingToSubmit0JobSWith1TaskS' EncodingNumberOfInputAssets' listViewWorkflows.SelectedIndices.Count); " is 210.
Long Statement,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,EncodingPremiumWorkflow_Load,The length of the statement  "	moreinfoprofilelink.Links.Add (new LinkLabel.Link (0' moreinfoprofilelink.Text.Length' Constants.LinkMoreInfoPremiumEncoder)); " is 126.
Long Statement,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,ProcessUploadFile,The length of the statement  "		asset = _context.Assets.CreateFromFile (fileName as string' storageaccount' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None' (af' p) => { " is 206.
Long Statement,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(EncodingPremium)); " is 136.
Long Statement,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,InitializeComponent,The length of the statement  "	this.moreinfoprofilelink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,InitializeComponent,The length of the statement  "	this.label31.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,HLSAESStatic,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\HLSAESStatic.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(HLSAESStatic)); " is 133.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,DoJobStats,The length of the statement  "	var tokenDisplayForm = new EditorXMLJSON (AMSExplorer.Properties.Resources.JobInformation_DoJobStats_JobReport' SB.ToString ()' false' false' false); " is 149.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "	DGJob.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_OverallProgress' MyJob.GetOverallProgress ()); " is 130.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "		DGJob.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_StartTime' ((DateTime)MyJob.StartTime).ToLocalTime ().ToString ("G")); " is 154.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "		DGJob.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_EndTime' ((DateTime)MyJob.EndTime).ToLocalTime ().ToString ("G")); " is 150.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "		DGJob.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_JobDuration' ((DateTime)MyJob.EndTime).Subtract ((DateTime)MyJob.StartTime)); " is 161.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "	DGJob.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_CPUDuration' MyJob.RunningDuration); " is 120.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "	DGJob.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Created' ((DateTime)MyJob.Created).ToLocalTime ().ToString ("G")); " is 154.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "	DGJob.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified' ((DateTime)MyJob.LastModified).ToLocalTime ().ToString ("G")); " is 164.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "		DGJob.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_InputSize' AssetInfo.FormatByteSize (jobSizePrice.InputSize)); " is 146.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "		DGJob.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_OutputSize' AssetInfo.FormatByteSize (jobSizePrice.OutputSize)); " is 148.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "		DGJob.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_ProcessedSize' AssetInfo.FormatByteSize (jobSizePrice.InputSize + jobSizePrice.OutputSize)); " is 176.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "		//if (jobSizePrice.Price != -1) DGJob.Rows.Add(AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_EstimatedPrice' string.Format("{0} {1:0.00}"' Properties.Settings.Default.Currency' jobSizePrice.Price)); " is 220.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The length of the statement  "		DGJob.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_InputOutputSize' AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_UndefinedTaskDidNotFinishOrOneOfTheAssetsHasBeenDeleted); " is 226.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,ListJobAssets,The length of the statement  "		ListViewItem item = new ListViewItem (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_ErrorDeleted' 0); " is 127.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,ListJobAssets,The length of the statement  "		ListViewItem item = new ListViewItem (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_ErrorDeleted' 0); " is 127.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "	int i = DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_listBoxTasks_SelectedIndexChanged_Configuration' ""); " is 127.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "	DGTasks.Rows [i].Cells [1].Value = AMSExplorer.Properties.Resources.JobInformation_listBoxTasks_SelectedIndexChanged_SeeClearValue; " is 131.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "	DGTasks.Rows [i].Cells [1].Value = AMSExplorer.Properties.Resources.AssetInformation_DoDisplayAuthorizationPolicyOption_SeeValue; " is 129.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "		DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_StartTime' ((DateTime)task.StartTime).ToLocalTime ().ToString ("G")); " is 155.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "		DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_EndTime' ((DateTime)task.EndTime).ToLocalTime ().ToString ("G")); " is 151.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "	DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_listBoxTasks_SelectedIndexChanged_Duration' task.RunningDuration); " is 132.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "	DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_listBoxTasks_SelectedIndexChanged_PerfMessage' task.PerfMessage); " is 131.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "	DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_listBoxTasks_SelectedIndexChanged_EncryptionKeyId' task.EncryptionKeyId); " is 139.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "	DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_listBoxTasks_SelectedIndexChanged_EncryptionScheme' task.EncryptionScheme); " is 141.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "	DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_listBoxTasks_SelectedIndexChanged_EncryptionVersion' task.EncryptionVersion); " is 143.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "	DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_listBoxTasks_SelectedIndexChanged_MediaprocessorId' task.MediaProcessorId); " is 141.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "		DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_listBoxTasks_SelectedIndexChanged_MediaprocessorName' processor.Name); " is 136.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "	DGTasks.Rows.Add (AMSExplorer.Properties.Resources.JobInformation_listBoxTasks_SelectedIndexChanged_InitializationVector' task.InitializationVector); " is 149.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,listBoxTasks_SelectedIndexChanged,The length of the statement  "			DGTasks.Rows.Add ("Estimated price"' string.Format ("{0} {1:0.00}"' Properties.Settings.Default.Currency' taskSizePrice.Price)); " is 128.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,DGTasks_CellContentClick,The length of the statement  "	if (e.RowIndex >= 0 && senderGrid.Rows [e.RowIndex].Cells [e.ColumnIndex].GetType () == typeof(DataGridViewButtonCell)) { " is 121.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,DGTasks_CellContentClick,The length of the statement  "		SeeValueInEditor (senderGrid.Rows [e.RowIndex].Cells [0].Value.ToString ()' senderGrid.Rows [e.RowIndex].Cells [e.ColumnIndex].Tag.ToString ()); " is 144.
Long Statement,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(JobInformation)); " is 135.
Long Statement,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The length of the statement  "	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground)); " is 184.
Long Statement,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The length of the statement  "	if (progressVal <= 100)// because when job is done or in error' we set progress > 100 % to avoid displaying the progress bar " is 124.
Long Statement,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The length of the statement  "		System.Drawing.Rectangle backRectangle = new System.Drawing.Rectangle (cellBounds.X + leftMargin' cellBounds.Y + topMargin' imgWidth' imgHeight); " is 145.
Long Statement,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The length of the statement  "			System.Drawing.Rectangle progressRectangle = new System.Drawing.Rectangle (cellBounds.X + leftMargin' cellBounds.Y + topMargin' progressWidth' imgHeight); " is 154.
Long Statement,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The length of the statement  "			using (LinearGradientBrush progressGradientBrush = new LinearGradientBrush (progressRectangle' Color.LightGreen' Color.MediumSeaGreen' LinearGradientMode.Vertical)) { " is 166.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The length of the statement  "	int lastColumn_sIndex = this.Columns.GetLastColumn (DataGridViewElementStates.Visible' DataGridViewElementStates.None).DisplayIndex; " is 132.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,WorkerAnalyzeAssets_DoWork,The length of the statement  "				DateTime? LocDate = asset.Locators.Any () ? (DateTime?)asset.Locators.Min (l => l.ExpirationDateTime).ToLocalTime () : null; " is 124.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DisplayPage,The length of the statement  "		BindingList<AssetEntry> MyObservAssethisPage = new BindingList<AssetEntry> (_MyObservAsset.Skip (_assetsperpage * (page - 1)).Take (_assetsperpage).ToList ()); " is 159.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "			assetsServerQuery = context.Assets.Where (a => (a.Name.Contains (_searchinname.Text)) && (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd)); " is 200.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "			assetsServerQuery = context.Assets.Where (a => (a.AlternateId.Contains (_searchinname.Text)) && (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd)); " is 207.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "				MessageBox.Show ("Error with asset Id. Is it a valid GUID or asset Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 127.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "				assetsServerQuery = context.Assets.Where (a => (a.Id == Constants.AssetIdPrefix + assetguid) && (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd)); " is 207.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "			assets = assetlist.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd)); " is 142.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "				MessageBox.Show ("Error with file asset Id. Is it a valid GUID or asset Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 132.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "					assetsServerQuery = context.Assets.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd) && myfile.Asset.Id == a.Id); " is 185.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "				MessageBox.Show ("Error with locator Id. Is it a valid GUID or locator Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 131.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "					assetsServerQuery = context.Assets.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd) && a.Id == myloc.AssetId); " is 183.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "					MessageBox.Show ("No locator was found using this locator Id."' "Not found"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 127.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "				MessageBox.Show ("Error with program Id. Is it a valid GUID or program Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 131.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "					assetsServerQuery = context.Assets.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd) && queryprog.AssetId == a.Id); " is 187.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "			assets = assetlist2.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd)); " is 143.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "		assetsServerQuery = context.Assets.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd)); " is 158.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "	if (!SwitchedToLocalQuery && assetsServerQuery == null)// teh current query did not find asset (locator id search for example) " is 126.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "	if (!SwitchedToLocalQuery && (_statefilter == StatusAssets.All || _statefilter == "") && _orderassets == OrderAssets.LastModifiedDescending) { " is 142.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "					var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList (); " is 184.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "					var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList (); " is 158.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "                            // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be" is 133.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "		IEnumerable<AssetEntry> assetquery = assets.AsEnumerable ().Select (a => // let's return the data cached in memory of it exists and last modified time is the same " is 162.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "		(cacheAssetentries.ContainsKey (a.Id) && cacheAssetentries [a.Id].LastModified != null && (cacheAssetentries [a.Id].LastModified == a.LastModified.ToLocalTime ().ToString ("G")) ? cacheAssetentries [a.Id] : new AssetEntry { " is 223.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "		MessageBox.Show ("There is a problem when connecting to Azure Media Services. Application will close. " + Constants.endline + Program.GetErrorMessage (e)); " is 155.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The length of the statement  "	BindingList<AssetEntry> MyObservAssethisPage = new BindingList<AssetEntry> (_MyObservAsset.Skip (_assetsperpage * (_currentpage - 1)).Take (_assetsperpage).ToList ()); " is 167.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,BuildBitmapDynEncryption,The length of the statement  "	AssetEncryptionState assetEncryptionState = asset.GetEncryptionState (AssetDeliveryProtocol.SmoothStreaming | AssetDeliveryProtocol.HLS | AssetDeliveryProtocol.Dash); " is 166.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,BuildBitmapDynEncryption,The length of the statement  "		bool CENCEnable = (assetEncryptionStateHLS == AssetEncryptionState.DynamicCommonEncryption || assetEncryptionStateSmooth == AssetEncryptionState.DynamicCommonEncryption || assetEncryptionStateDash == AssetEncryptionState.DynamicCommonEncryption); " is 246.
Long Statement,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,BuildBitmapDynEncryption,The length of the statement  "		bool EnvelopeEnable = (assetEncryptionStateHLS == AssetEncryptionState.DynamicEnvelopeEncryption || assetEncryptionStateSmooth == AssetEncryptionState.DynamicEnvelopeEncryption || assetEncryptionStateDash == AssetEncryptionState.DynamicEnvelopeEncryption); " is 256.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The length of the statement  "		Duration = (j.StartTime.HasValue && j.EndTime.HasValue) ? ((DateTime)j.EndTime).Subtract ((DateTime)j.StartTime).ToString (@"d\.hh\:mm\:ss") : string.Empty' " is 156.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The length of the statement  "		Progress = (j.State == JobState.Scheduled || j.State == JobState.Processing || j.State == JobState.Queued) ? j.GetOverallProgress () : 101d " is 139.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DisplayPage,The length of the statement  "		this.DataSource = new BindingList<JobEntry> (_MyObservJob.Skip (_jobsperpage * (page - 1)).Take (_jobsperpage).ToList ()); " is 122.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The length of the statement  "			jobsServerQuery = context.Jobs.Where (j => (j.Name.Contains (_searchinname.Text)) && (!filterStartDate || j.LastModified > dateTimeStart) && (!filterEndDate || j.LastModified < dateTimeRangeEnd) && (!filterstate || j.State == jobstate)); " is 237.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The length of the statement  "				MessageBox.Show ("Error with job Id. Is it a valid GUID or asset Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 125.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The length of the statement  "				jobsServerQuery = context.Jobs.Where (j => (j.Id == Constants.JobIdPrefix + jobguid) && (!filterStartDate || j.LastModified > dateTimeStart) && (!filterEndDate || j.LastModified < dateTimeRangeEnd) && (!filterstate || j.State == jobstate)); " is 240.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The length of the statement  "		jobsServerQuery = context.Jobs.Where (j => (!filterStartDate || j.LastModified > dateTimeStart) && (!filterEndDate || j.LastModified < dateTimeRangeEnd) && (!filterstate || j.State == jobstate)); " is 195.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The length of the statement  "	if (_orderjobs == OrderJobs.LastModifiedDescending && (_timefilter == FilterTime.First50Items || _timefilter == FilterTime.First1000Items)) { " is 141.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The length of the statement  "			Duration = (j.StartTime.HasValue && j.EndTime.HasValue) ? ((DateTime)j.EndTime).Subtract ((DateTime)j.StartTime).ToString (@"d\.hh\:mm\:ss") : string.Empty' " is 156.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The length of the statement  "			Progress = (j.State == JobState.Scheduled || j.State == JobState.Processing || j.State == JobState.Queued) ? j.GetOverallProgress () : 101d " is 139.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The length of the statement  "		MessageBox.Show ("There is a problem when connecting to Azure Media Services. Application will close. " + Constants.endline + Program.GetErrorMessage (e)); " is 155.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The length of the statement  "	_MyObservAssethisPage = new BindingList<JobEntry> (_MyObservJob.Skip (_jobsperpage * (_currentpage - 1)).Take (_jobsperpage).ToList ()); " is 136.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RestoreJobProgress,The length of the statement  "		IEnumerable<IJob> ActiveAndVisibleJobs = jobs.Where (j => (j.State == JobState.Queued) || (j.State == JobState.Scheduled) || (j.State == JobState.Processing)); " is 159.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RestoreJobProgress,The length of the statement  "			JobRefreshIntervalInMilliseconds = Math.Max (DefaultJobRefreshIntervalInMilliseconds' Convert.ToInt32 (DefaultJobRefreshIntervalInMilliseconds * ActiveAndVisibleJobs.Count () / 5d)); " is 182.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "					if (JobRefreshed.State == JobState.Scheduled || JobRefreshed.State == JobState.Processing || JobRefreshed.State == JobState.Queued || JobRefreshed.State == JobState.Canceling)// in progress " is 189.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "						_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null; " is 139.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "						_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null; " is 133.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "							_MyObservJob [index].Duration = JobRefreshed.EndTime.HasValue ? ((TimeSpan)((DateTime)JobRefreshed.EndTime - (DateTime)JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : estimatedduration.ToString (@"d\.hh\:mm\:ss") + " ?"; " is 227.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "						_MyObservJob [index].Duration = JobRefreshed.StartTime.HasValue ? ((TimeSpan)(DateTime.UtcNow - JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : null; " is 156.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "						_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null; " is 139.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "						_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null; " is 133.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "								var subtitlesFiles = JobRefreshed.Tasks.FirstOrDefault ().OutputAssets.FirstOrDefault ().AssetFiles.ToList ().Where (f => f.Name.EndsWith (".vtt"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ttml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".smi"' StringComparison.OrdinalIgnoreCase)); " is 313.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "								myform.Notify (string.Format ("Job {0}"' status)' string.Format ("Job {0}"' _MyObservJob [index].Name)' JobRefreshed.State == JobState.Error); " is 142.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "								myform.TextBoxLogWriteLine (string.Format ("Job '{0}' : {1}."' _MyObservJob [index].Name' status)' JobRefreshed.State == JobState.Error); " is 137.
Long Statement,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The length of the statement  "											myform.TextBoxLogWriteLine (string.Format ("Task '{0}'' Error : {1}"' task.Name' error.Code + " : " + error.Message)' true); " is 124.
Long Statement,AMSExplorer,PlayReadyStaticEnc,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\PlayReadyStaticEnc.cs,PlayReadyStaticEnc_Load,The length of the statement  "	moreinfotestserver.Links.Add (new LinkLabel.Link (0' moreinfotestserver.Text.Length' "http://playready.azurewebsites.net/")); " is 125.
Long Statement,AMSExplorer,PlayReadyStaticEnc,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\PlayReadyStaticEnc.cs,textBox_TextChanged,The length of the statement  "	if ((textBoxkeyid.Text != string.Empty) && ((textBoxkeyseed.Text != string.Empty) || (textBoxcontentkey.Text != string.Empty))) { " is 129.
Long Statement,AMSExplorer,PlayReadyStaticEnc,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\PlayReadyStaticEnc.cs,buttonAzureSettings_Click,The length of the statement  "	IContentKey key = _context.ContentKeys.Where (k => k.ContentKeyType == ContentKeyType.CommonEncryption).FirstOrDefault (); " is 122.
Long Statement,AMSExplorer,PlayReadyStaticEnc,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\PlayReadyStaticEnc.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(PlayReadyStaticEnc)); " is 139.
Long Statement,AMSExplorer,PlayReadyStaticEnc,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\PlayReadyStaticEnc.cs,InitializeComponent,The length of the statement  "	this.moreinfotestserver.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfotestserver_LinkClicked); " is 135.
Long Statement,AMSExplorer,Priority,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Priority.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Priority)); " is 129.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ConnectAndGetNewContext,The length of the statement  "			myContext = new CloudMediaContext (partnerAPIServer' credentials.AccountName' credentials.AccountKey' CredentialsEntry.PartnerScope' CredentialsEntry.PartnerACSBaseAddress); " is 173.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ConnectAndGetNewContext,The length of the statement  "				MessageBox.Show ("There is a credentials problem when connecting to Azure Media Services (custom API)." + Constants.endline + "Application will close. " + Constants.endline + e.Message); " is 186.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ConnectAndGetNewContext,The length of the statement  "			myContext = new CloudMediaContext (otherAPIServer' credentials.AccountName' credentials.AccountKey' credentials.OtherScope' credentials.OtherACSBaseAddress); " is 157.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ConnectAndGetNewContext,The length of the statement  "				MessageBox.Show ("There is a credentials problem when connecting to Azure Media Services (Partner API)." + Constants.endline + "Application will close." + Constants.endline + e.Message); " is 186.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ConnectAndGetNewContext,The length of the statement  "				MessageBox.Show ("There is a credentials problem when connecting to Azure Media Services." + Constants.endline + "Application will close." + Constants.endline + e.Message); " is 172.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ConnectAndGetNewContext,The length of the statement  "				MessageBox.Show ("There is a credentials problem when connecting to Azure Media Services." + Constants.endline + "Application will close." + Constants.endline + e.Message); " is 172.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ConnectToStorage,The length of the statement  "		CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (context.DefaultStorageAccount.Name' credentials.DefaultStorageKey)' credentials.ReturnStorageSuffix ()' true); " is 196.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ConnectToStorage,The length of the statement  "		MessageBox.Show (string.Format ("There is a problem when connecting to the Azure storage account.\r\nIs the storage key correct ?\r\n{0}"' e.Message)' "Storage Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 212.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ParseXml,The length of the statement  "		var message = XDocument.Parse (strXml).Descendants ().Where (d => d.Name.LocalName == "message").Select (d => d.Value).SingleOrDefault (); " is 138.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,LoadAndUpdateManifestTemplate,The length of the statement  "	var mp4AssetFiles = asset.AssetFiles.ToList ().Where (f => f.Name.EndsWith (".mp4"' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 132.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,LoadAndUpdateManifestTemplate,The length of the statement  "	var m4aAssetFiles = asset.AssetFiles.ToList ().Where (f => f.Name.EndsWith (".m4a"' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 132.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,LoadAndUpdateManifestTemplate,The length of the statement  "	var mediaAssetFiles = asset.AssetFiles.ToList ().Where (f => f.Name.EndsWith (".mp4"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".m4a"' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 198.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,LoadAndUpdateManifestTemplate,The length of the statement  "			switchxml.Add (new XElement (ns + "audio"' new XAttribute ("src"' file.Name)' new XAttribute ("title"' Path.GetFileNameWithoutExtension (file.Name)))); " is 151.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,LoadAndUpdateManifestTemplate,The length of the statement  "			var mp4AudioAssetFilesName = mp4AssetFiles.Where (f => (f.Name.ToLower ().Contains ("audio") && !f.Name.ToLower ().Contains ("video")) || (f.Name.ToLower ().Contains ("aac") && !f.Name.ToLower ().Contains ("h264"))); " is 216.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,LoadAndUpdateManifestTemplate,The length of the statement  "			string mp4fileaudio = (mp4AudioAssetFilesName.Count () == 1) ? mp4AudioAssetFilesName.FirstOrDefault ().Name : mp4AudioAssetFilesSize.FirstOrDefault ().Name; " is 157.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,LoadAndUpdateManifestTemplate,The length of the statement  "			switchxml.Add (new XElement (ns + "audio"' new XAttribute ("src"' mp4fileaudio)' new XAttribute ("title"' "audioname"))); " is 121.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DownloadVersionRequestCompleted,The length of the statement  "			Version versionAMSEGitHub = new Version (xmlversion.Descendants ("Versions").Descendants ("Production").Attributes ("Version").FirstOrDefault ().Value.ToString ()); " is 164.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DownloadVersionRequestCompleted,The length of the statement  "			var RelNotesUrlXML = xmlversion.Descendants ("Versions").Descendants ("Production").Attributes ("ReleaseNotesUrl").FirstOrDefault (); " is 133.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DownloadVersionRequestCompleted,The length of the statement  "			var AllRelNotesUrlXML = xmlversion.Descendants ("Versions").Descendants ("Production").Attributes ("AllReleaseNotesUrl").FirstOrDefault (); " is 139.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DownloadVersionRequestCompleted,The length of the statement  "			var BinaryUrlXML = xmlversion.Descendants ("Versions").Descendants ("Production").Attributes ("BinaryUrl").FirstOrDefault (); " is 125.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DownloadVersionRequestCompleted,The length of the statement  "				MessageNewVersion = string.Format ("A new version ({0}) is available on GitHub: {1}"' versionAMSEGitHub' Constants.GitHubAMSEReleases); " is 135.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,SaveAndProtectUserConfig,The length of the statement  "                System.Configuration.Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.PerUserRoamingAndLocal);" is 133.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,SaveAndProtectUserConfig,The length of the statement  "		System.Configuration.Configuration config = ConfigurationManager.OpenExeConfiguration (ConfigurationUserLevel.PerUserRoamingAndLocal); " is 134.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,WatchFolderCallApi,The length of the statement  "	body = body.Replace ("\"{Source Asset Id}\""' sourceAsset != null ? JsonConvert.ToString (sourceAsset.Id) : "").Replace ("\"{Source Asset Name}\""' sourceAsset != null ? JsonConvert.ToString (sourceAsset.Name) : ""); " is 216.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,WatchFolderCallApi,The length of the statement  "	body = body.Replace ("\"{Output Asset Id}\""' outputAsset != null ? JsonConvert.ToString (outputAsset.Id) : "").Replace ("\"{Output Asset Name}\""' outputAsset != null ? JsonConvert.ToString (outputAsset.Name) : ""); " is 216.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,WatchFolderCallApi,The length of the statement  "	body = body.Replace ("\"{Job Id}\""' job != null ? JsonConvert.ToString (job.Id) : "").Replace ("\"{Job State}\""' job != null ? JsonConvert.ToString (job.State.ToString ()) : ""); " is 180.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,WatchFolderCallApi,The length of the statement  "	body = body.Replace ("\"{Locator Id}\""' locator != null ? JsonConvert.ToString (locator.Id) : "").Replace ("\"{Publish Url}\""' publishUrl != null ? JsonConvert.ToString (publishUrl.ToString ()) : "").Replace ("\"{Playback Url}\""' publishUrl != null ? JsonConvert.ToString (playbackUrl) : ""); " is 295.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,SetWebBrowserFeatures,The length of the statement  "	Registry.SetValue (featureControlRegKey + "FEATURE_BROWSER_EMULATION"' appName' GetBrowserEmulationMode ()' RegistryValueKind.DWord); " is 133.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,SetWebBrowserFeatures,The length of the statement  "	Registry.SetValue (featureControlRegKey + "FEATURE_ENABLE_CLIPCHILDREN_OPTIMIZATION"' appName' 1' RegistryValueKind.DWord); " is 123.
Long Statement,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The length of the statement  "	using (var ieKey = Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\Internet Explorer"' RegistryKeyPermissionCheck.ReadSubTree' System.Security.AccessControl.RegistryRights.QueryValues)) { " is 194.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CreateOutlookMail,The length of the statement  "			string title = (SelectedJobs.FirstOrDefault ().State == JobState.Error) ? "ERROR Report: Job '{0}'" : "Report: Job '{0}'"; " is 122.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CreateOutlookMail,The length of the statement  "			mailItem.Subject = string.Format ("Report: {0} jobs' {1} Error(s)"' SelectedJobs.Count ()' SelectedJobs.Where (j => j.State == JobState.Error).Count ()); " is 153.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CreateOutlookMail,The length of the statement  "			MessageBox.Show ("Please install Office Outlook to use this functionality."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 142.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CreateOutlookMail,The length of the statement  "		MessageBox.Show ("Exception while trying to compose the email." + exception' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 130.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetInputFilesSize,The length of the statement  "	// Task.State only has the Conpleted State and based on that it is not possible to know whether the task had an error or did it finish successfully " is 147.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetOutputFilesSize,The length of the statement  "	// Task.State only has the Conpleted State and based on that it is not possible to know whether the task had an error or did it finish successfully " is 147.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "			sb.AppendLine ("Job Created (UTC)   : " + theJob.Created.ToLongDateString () + " " + theJob.Created.ToLongTimeString ()); " is 121.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "				sb.AppendLine ("Job StartTime (UTC) : " + theJob.StartTime.Value.ToLongDateString () + " " + theJob.StartTime.Value.ToLongTimeString ()); " is 137.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "				sb.AppendLine ("Job EndTime (UTC)   : " + theJob.EndTime.Value.ToLongDateString () + " " + theJob.EndTime.Value.ToLongTimeString ()); " is 133.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "			string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10); " is 139.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "				elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10); " is 132.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "				IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ()); " is 130.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "					sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ()); " is 133.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "					sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ()); " is 129.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "				elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10); " is 132.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "					elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10); " is 132.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "					sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)"); " is 123.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "						sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc)); " is 161.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "						sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc)); " is 163.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "						//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc)); " is 226.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "							sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price)); " is 144.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "			sb.AppendLine ("Input size processed by the job  : " + ((MyJobSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize) : cannotcalc)); " is 158.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "			sb.AppendLine ("Output size processed by the job : " + ((MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.OutputSize) : cannotcalc)); " is 160.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "			sb.AppendLine ("Total size processed by the job  : " + ((MyJobSizePrice.InputSize != -1 && MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize + MyJobSizePrice.OutputSize) : cannotcalc)); " is 221.
Long Statement,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The length of the statement  "                        sb.AppendLine(string.Format("Estimated cost of the job        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyJobSizePrice.Price));" is 140.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetValidURIs,The length of the statement  "	var ismFile = asset.AssetFiles.AsEnumerable ().Where (f => f.Name.EndsWith (".ism")).OrderByDescending (f => f.IsPrimary).FirstOrDefault (); " is 140.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetValidURIs,The length of the statement  "		var locators = asset.Locators.Where (l => l.Type == LocatorType.OnDemandOrigin && l.ExpirationDateTime > DateTime.UtcNow).OrderByDescending (l => l.ExpirationDateTime); " is 168.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetValidURIs,The length of the statement  "		ValidURIs = locators.SelectMany (l => _context.StreamingEndpoints.AsEnumerable ().Where (o => (o.State == StreamingEndpointState.Running) && (StreamingEndpointInformation.CanDoDynPackaging (o))).OrderByDescending (o => o.CdnEnabled).Select (o => template.BindByPosition (new Uri ("http://" + o.HostName)' l.ContentAccessComponent' ismFile.Name))).ToArray (); " is 358.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetURIs,The length of the statement  "	var ismFile = asset.AssetFiles.AsEnumerable ().Where (f => f.Name.EndsWith (".ism")).OrderByDescending (f => f.IsPrimary).FirstOrDefault (); " is 140.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetURIs,The length of the statement  "		var locators = asset.Locators.Where (l => l.Type == LocatorType.OnDemandOrigin && l.ExpirationDateTime > DateTime.UtcNow).OrderByDescending (l => l.ExpirationDateTime); " is 168.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetURIs,The length of the statement  "		ValidURIs = locators.SelectMany (l => _context.StreamingEndpoints.AsEnumerable ().OrderByDescending (o => o.CdnEnabled).Select (o => template.BindByPosition (new Uri ("http://" + o.HostName)' l.ContentAccessComponent' ismFile.Name))).ToArray (); " is 245.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CreatedTemporaryOnDemandLocator,The length of the statement  "				tempLocator = asset.GetMediaContext ().Locators.Create (LocatorType.OnDemandOrigin' asset' AccessPermissions.Read' TimeSpan.FromHours (1)); " is 139.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetSmoothStreamingUris,The length of the statement  "	return GetStreamingUris (originLocator' se' filter' https' customhostname' AMSOutputProtocols.NotSpecified' audiotrack); " is 120.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetSmoothStreamingLegacyUris,The length of the statement  "	return GetStreamingUris (originLocator' se' filter' https' customhostname' AMSOutputProtocols.SmoothLegacy' audiotrack); " is 120.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetManifestAssetFiles,The length of the statement  "	return asset.AssetFiles.ToList ().Where (af => af.Name.EndsWith (ILocatorExtensions.ManifestFileExtension' StringComparison.OrdinalIgnoreCase)).ToList (); " is 154.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStreamingUris,The length of the statement  "		smoothStreamingUri = manifestAssetFiles.Select (f => new Uri (string.Format (CultureInfo.InvariantCulture' BaseStreamingUrlTemplate' originLocator.Path.TrimEnd ('/')' f.Name)' UriKind.Absolute)); " is 195.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStreamingUris,The length of the statement  "			Path = AssetInfo.AddAudioTrackToUrlString (AssetInfo.AddProtocolFormatInUrlString (AssetInfo.AddFilterToUrlString (u.AbsolutePath' filter)' outputprotocol)' audiotrack) " is 168.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetPublishedStatus,The length of the statement  "		if (!SelectedAssets.FirstOrDefault ().Locators.Where (l => (l.Type == LocType)).All (l => (l.ExpirationDateTime < DateTime.UtcNow))) { " is 134.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetPublishedStatus,The length of the statement  "			var query = SelectedAssets.FirstOrDefault ().Locators.Where (l => ((l.Type == LocType) && (l.ExpirationDateTime > DateTime.UtcNow) && (l.StartTime != null))); " is 158.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetPublishedStatus,The length of the statement  "				LocPubStatus = (query.All (l => (l.StartTime > DateTime.UtcNow))) ? PublishStatus.PublishedFuture : PublishStatus.PublishedActive; " is 130.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetManifestTimingData,The length of the statement  "			if (videotrack.FirstOrDefault ().Attribute ("TimeScale") != null)// there is timescale value in the video track. Let's take this one. " is 133.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetManifestTimingData,The length of the statement  "					//totalduration = ulong.Parse(chunk.Attribute("t").Value) - response.TimestampOffset; // new timestamp' perhaps gap in live stream.... " is 134.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetManifestSegmentsList,The length of the statement  "			var videotrack = smoothmedia.Elements ("StreamIndex").Where (a => a.Attribute ("Type").Value == "video").FirstOrDefault (); " is 123.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetManifestSegmentsList,The length of the statement  "			response.videoBitrates = videotrack.Elements ("QualityLevel").Select (e => int.Parse (e.Attribute ("Bitrate").Value)).ToList (); " is 128.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetManifestSegmentsList,The length of the statement  "				response.audioBitrates [a_index] = audiotrack.Elements ("QualityLevel").Select (e => int.Parse (e.Attribute ("Bitrate").Value)).ToArray (); " is 139.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The length of the statement  "		var cfffiles = AssetFiles.Where (f => f.Name.EndsWith (".ismv"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".isma"' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 177.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The length of the statement  "		if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) { " is 185.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The length of the statement  "			} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) { " is 244.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The length of the statement  "			var ThumbnailsAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".jpg"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".png"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".bmp"' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 251.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,SetISMFileAsPrimary,The length of the statement  "	var ismAssetFiles = asset.AssetFiles.ToList ().Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 132.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,SetFileAsPrimary,The length of the statement  "	var ismAssetFiles = asset.AssetFiles.ToList ().Where (f => f.Name.Equals (assetfilename' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 137.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CreateOutlookMail,The length of the statement  "			MessageBox.Show ("Please install Office Outlook to use this functionality."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 142.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CreateOutlookMail,The length of the statement  "		MessageBox.Show ("Exception while trying to compose the email." + exception' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 130.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetProtection,The length of the statement  "			if (policy.AssetDeliveryConfiguration.ContainsKey (AssetDeliveryPolicyConfigurationKey.PlayReadyLicenseAcquisitionUrl) && (policy.AssetDeliveryConfiguration.ContainsKey (AssetDeliveryPolicyConfigurationKey.WidevineLicenseAcquisitionUrl) || policy.AssetDeliveryConfiguration.ContainsKey (AssetDeliveryPolicyConfigurationKey.WidevineBaseLicenseAcquisitionUrl))) { " is 361.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetProtection,The length of the statement  "			} else if (policy.AssetDeliveryConfiguration.ContainsKey (AssetDeliveryPolicyConfigurationKey.WidevineLicenseAcquisitionUrl) || policy.AssetDeliveryConfiguration.ContainsKey (AssetDeliveryPolicyConfigurationKey.WidevineBaseLicenseAcquisitionUrl)) { " is 248.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStat,The length of the statement  "	sb.AppendLine ("Created (UTC)       : " + MyAsset.Created.ToLongDateString () + " " + MyAsset.Created.ToLongTimeString ()); " is 123.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStat,The length of the statement  "	sb.AppendLine ("Last Modified (UTC) : " + MyAsset.LastModified.ToLongDateString () + " " + MyAsset.LastModified.ToLongTimeString ()); " is 133.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetDescriptionLocators,The length of the statement  "			sb.AppendLine ("Start Time        : " + ((DateTime)locator.StartTime).ToLongDateString () + " " + ((DateTime)locator.StartTime).ToLongTimeString ()); " is 149.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetDescriptionLocators,The length of the statement  "			sb.AppendLine ("Expiration Time   : " + ((DateTime)locator.ExpirationDateTime).ToLongDateString () + " " + ((DateTime)locator.ExpirationDateTime).ToLongTimeString ()); " is 167.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetDescriptionLocators,The length of the statement  "			if (MyAsset.AssetType == AssetType.MediaServicesHLS)// It is a static HLS asset' so let's propose only the standard HLS V3 locator " is 130.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetDescriptionLocators,The length of the statement  "			} else if (MyAsset.AssetType == AssetType.SmoothStreaming || MyAsset.AssetType == AssetType.MultiBitrateMP4 || MyAsset.AssetType == AssetType.Unknown)//later to change Unknown to live archive " is 191.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DoPlayBackWithStreamingEndpoint,The length of the statement  "			if ((myasset != null && UISelectSEFiltersAndProtocols) && (context.StreamingEndpoints.Count () > 1 || (context.StreamingEndpoints.FirstOrDefault () != null && context.StreamingEndpoints.FirstOrDefault ().CustomHostNames.Count > 0) || context.Filters.Count () > 0 || (myasset.AssetFilters.Count () > 0))) { " is 305.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DoPlayBackWithStreamingEndpoint,The length of the statement  "					Urlstr = AssetInfo.RW (new Uri (Urlstr)' form.SelectStreamingEndpoint' form.SelectedFilters' form.ReturnHttps' form.ReturnSelectCustomHostName' form.ReturnStreamingProtocol' form.ReturnHLSAudioTrackName' form.ReturnHLSNoAudioOnlyMode).ToString (); " is 247.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DoPlayBackWithStreamingEndpoint,The length of the statement  "			} else// format auto. If classic se' and asset is smooth' let's force to smooth (player cannot get the dash stream for example) " is 127.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DoPlayBackWithStreamingEndpoint,The length of the statement  "				if (!StreamingEndpointInformation.CanDoDynPackaging (choosenSE) && myasset != null && myasset.AssetType == AssetType.SmoothStreaming) " is 133.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DoPlayBackWithStreamingEndpoint,The length of the statement  "			FullPlayBackLink = myurl.Replace (Constants.NameconvManifestURL' HttpUtility.UrlEncode (Urlstr)).Replace (Constants.NameconvToken' tokenresult.TokenString); " is 156.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBestStreamingEndpoint,The length of the statement  "	IStreamingEndpoint SESelected = _context.StreamingEndpoints.AsEnumerable ().Where (se => se.State == StreamingEndpointState.Running && StreamingEndpointInformation.CanDoDynPackaging (se)).OrderBy (se => se.CdnEnabled).OrderBy (se => se.ScaleUnits).LastOrDefault (); " is 265.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CopyBlobDirectory,The length of the statement  "	var srcBlobList = srcDirectory.ListBlobs (useFlatBlobListing: true' blobListingDetails: BlobListingDetails.None).ToList (); " is 123.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetXMLSerializedTimeSpan,The length of the statement  "		// serialization is : <duration xmlns="http://schemas.microsoft.com/2003/10/Serialization/">P28DT15H50M58.348S</duration> " is 121.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,AssetFileNameIsOk,The length of the statement  "	// An AssetFileName constructed using the above mentioned criteria shall be encoded' streamed and played back successfully. " is 123.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,AssetFileNameIsOk,The length of the statement  "	if (InvalidFileNamePrefixList.Any (x => filename.StartsWith (x + "."' StringComparison.OrdinalIgnoreCase)) || InvalidFileNamePrefixList.Any (x => filename.Equals (x' StringComparison.OrdinalIgnoreCase))) { " is 205.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,FileNameProblemMessage,The length of the statement  "		return "This file name is not compatible with Media Services :\n\n" + listpb.FirstOrDefault () + "\n\nFile name is restricted to 248 characters and should not contain the characters " + @"<>:""/\|?*+%#" + "\n\nOperation aborted."; " is 230.
Long Statement,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,FileNameProblemMessage,The length of the statement  "		return "These file names are not compatible with Media Services :\n\n" + string.Join ("\n"' listpb) + "\n\nFile name is restricted to 248 characters and should not contain the characters " + @"<>:""/\|?*+%#" + "\n\nOperation aborted."; " is 235.
Long Statement,AMSExplorer,CredentialsEntry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,Equals,The length of the statement  "	return this.AccountId == other.AccountId && this.AccountKey == other.AccountKey && this.AccountName == other.AccountName && this.Description == other.Description && this.OtherACSBaseAddress == other.OtherACSBaseAddress && this.OtherAPIServer == other.OtherAPIServer && this.OtherAzureEndpoint == other.OtherAzureEndpoint && this.OtherManagementPortal == other.OtherManagementPortal && this.OtherScope == other.OtherScope && this.DefaultStorageKey == other.DefaultStorageKey; " is 474.
Long Statement,AMSExplorer,CredentialsEntry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetTableEndPoint,The length of the statement  "	string SampleStorageURLTemplate = UseOtherAPI ? CredentialsEntry.TableStorage + OtherAzureEndpoint : // ".table.core.chinacloudapi.cn/" " is 135.
Long Statement,AMSExplorer,EncodingAMEPreset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEPreset.cs,EncodingPreset_Load,The length of the statement  "	listbox.SelectedItem = listbox.Items.Cast<string> ().SingleOrDefault (i => i == MediaEncoderTaskPresetStrings.H264AdaptiveBitrateMP4Set720p); " is 141.
Long Statement,AMSExplorer,EncodingAMEPreset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEPreset.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(EncodingAMEPreset)); " is 138.
Long Statement,AMSExplorer,EncodingAMEPreset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEPreset.cs,InitializeComponent,The length of the statement  "	this.moreinfopresetslink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoprofilelink_LinkClicked); " is 137.
Long Statement,AMSExplorer,EncodingAMEPreset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEPreset.cs,InitializeComponent,The length of the statement  "	this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171))))); " is 127.
Long Statement,AMSExplorer,EncodingAMEPreset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEPreset.cs,InitializeComponent,The length of the statement  "	this.moreinfoame.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.moreinfoame_LinkClicked); " is 121.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,UploadFromBlob_Load,The length of the statement  "	listViewAssetFiles.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler (ListViewItemComparer.ListView_ColumnClick); " is 127.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,UploadFromBlob_Load,The length of the statement  "	listViewBlobs.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler (ListViewItemComparer.ListView_ColumnClick); " is 122.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,ConnectToStorage,The length of the statement  "			storageAccount = new CloudStorageAccount (new StorageCredentials (contextUpload.DefaultStorageAccount.Name' MediaServicesStorageAccountKey)' myStorageSuffix' true); " is 164.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,ConnectToStorage,The length of the statement  "			storageAccount = new CloudStorageAccount (new StorageCredentials (textBoxStorageName.Text' textBoxStorageKey.Text)' myStorageSuffix' true); " is 139.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,ConnectToStorage,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.ExportAssetToAzureStorage_ConnectToStorage_ThereIsAProblemWhenConnectingToTheStorageAccount); " is 143.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,DoListBlobs,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.ExportAssetToAzureStorage_ConnectToStorage_ThereIsAProblemWhenConnectingToTheStorageAccount); " is 143.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,DisplayFilesOfContainer,The length of the statement  "	CloudBlobContainer Container = cloudBlobClient.ListContainers ().Where (n => n.Name == containerName).FirstOrDefault (); " is 120.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,UpdateButtonUploadEnable,The length of the statement  "				labelContName.Text = AMSExplorer.Properties.Resources.ExportAssetToAzureStorage_UpdateButtonUploadEnable_ContainerNameIsNotValid; " is 129.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ExportAssetToAzureStorage)); " is 146.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,InitializeComponent,The length of the statement  "	this.radioButtonSelectedContainer.CheckedChanged += new System.EventHandler (this.radioButtonSelectedContainer_CheckedChanged); " is 127.
Long Statement,AMSExplorer,ExportAssetToAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportAssetToAzureStorage.cs,InitializeComponent,The length of the statement  "	this.radioButtonStorageDefault.CheckedChanged += new System.EventHandler (this.radioButtonStorageDefault_CheckedChanged); " is 121.
Long Statement,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,UploadFromBlob_Load,The length of the statement  "	listViewBlobs.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler (ListViewItemComparer.ListView_ColumnClick); " is 122.
Long Statement,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,UploadFromBlob_Load,The length of the statement  "	listViewFiles.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler (ListViewItemComparer.ListView_ColumnClick); " is 122.
Long Statement,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,ConnectToStorage,The length of the statement  "			storageAccount = new CloudStorageAccount (new StorageCredentials (contextUpload.DefaultStorageAccount.Name' MediaServicesStorageAccountKey)' mystoragesuffix' true); " is 164.
Long Statement,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,ConnectToStorage,The length of the statement  "			storageAccount = new CloudStorageAccount (new StorageCredentials (textBoxStorageName.Text' textBoxStorageKey.Text)' mystoragesuffix' true); " is 139.
Long Statement,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,ConnectToStorage,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.ExportAssetToAzureStorage_ConnectToStorage_ThereIsAProblemWhenConnectingToTheStorageAccount); " is 143.
Long Statement,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,DoListBlobs,The length of the statement  "		MessageBox.Show (AMSExplorer.Properties.Resources.ExportAssetToAzureStorage_ConnectToStorage_ThereIsAProblemWhenConnectingToTheStorageAccount); " is 143.
Long Statement,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,DisplayFilesOfContainer,The length of the statement  "	CloudBlobContainer Container = cloudBlobClient.ListContainers ().Where (n => n.Name == containerName).FirstOrDefault (); " is 120.
Long Statement,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ImportFromAzureStorage)); " is 143.
Long Statement,AMSExplorer,ImportFromAzureStorage,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ImportFromAzureStorage.cs,InitializeComponent,The length of the statement  "	this.radioButtonStorageDefault.CheckedChanged += new System.EventHandler (this.radioButtonStorageDefault_CheckedChanged); " is 121.
Complex Conditional,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,JsonInternalConfig,The conditional expression  "!string.IsNullOrEmpty (language) || checkBoxTimeInterval.Checked || checkBoxRestrictDetection.Checked || !string.IsNullOrEmpty (orientation) || checkBoxAdvancedOutput.Checked"  is complex.
Complex Conditional,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,radioButtonClipWithReencode_CheckedChanged,The conditional expression  "(radioButtonClipWithReencode.Checked && senderr.Name == radioButtonClipWithReencode.Name) // reencoding  || (radioButtonAssetFilter.Checked && senderr.Name == radioButtonAssetFilter.Name)"  is complex.
Complex Conditional,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,radioButtonClipWithReencode_CheckedChanged,The conditional expression  "(radioButtonArchiveAllBitrate.Checked && senderr.Name == radioButtonArchiveAllBitrate.Name) // archive all bitrate  || (radioButtonArchiveTopBitrate.Checked && senderr.Name == radioButtonArchiveTopBitrate.Name)"  is complex.
Complex Conditional,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The conditional expression  "codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio""  is complex.
Complex Conditional,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The conditional expression  "nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")"  is complex.
Complex Conditional,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The conditional expression  "codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")"  is complex.
Complex Conditional,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The conditional expression  "codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null"  is complex.
Complex Conditional,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The conditional expression  "watchfoldersettings != null && filename.Count == 1 && ((watchfoldersettings.ProcessRohzetXML && (filename [0]).ToLower ().EndsWith (".xml")) || (watchfoldersettings.ProcessJSONSemaphore && (filename [0]).ToLower ().EndsWith (".json")))"  is complex.
Complex Conditional,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessCreateLocator,The conditional expression  "(AssetToP.Options == AssetCreationOptions.None && AssetToP.DeliveryPolicies.Count == 0) || (AssetToP.Options == AssetCreationOptions.StorageEncrypted && protocolProgressiveDownload)"  is complex.
Complex Conditional,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The conditional expression  "CloneAssetFilters && !ErrorCopyAsset && SourceAssets.FirstOrDefault ().AssetFilters.Count () > 0 && !response.token.IsCancellationRequested"  is complex.
Complex Conditional,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The conditional expression  "CloneStreamingLocators && !ErrorCopyAsset && SourceAssets.FirstOrDefault ().Locators.Where (l => l.Type == LocatorType.OnDemandOrigin).Count () > 0 && !response.token.IsCancellationRequested"  is complex.
Complex Conditional,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The conditional expression  "manifestdata.audioBitrates == null && manifestdata.videoBitrates.Count == 0 && manifestdata.audioSegments == null && manifestdata.videoSegments.Count == 0"  is complex.
Complex Conditional,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The conditional expression  "(form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)"  is complex.
Complex Conditional,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The conditional expression  "(form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)"  is complex.
Complex Conditional,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The conditional expression  "(form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_AES.ShowDialog () == DialogResult.OK)"  is complex.
Complex Conditional,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The conditional expression  "(form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 // PlayReady/Widevine license and delivery from Azure Media Services  && (!ManualForceKeyData || (ManualForceKeyData && contentKeyAuthorizationPolicy == null))"  is complex.
Complex Conditional,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The conditional expression  "form3_AES.GetNumberOfAuthorizationPolicyOptions > 0 && (!ManualForceKeyData || (ManualForceKeyData && contentKeyAuthorizationPolicy == null))"  is complex.
Complex Conditional,AMSExplorer,AddDynamicEncryptionFrame2_CENCKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENCKeyConfig.cs,ValidateDataForButtonOk,The conditional expression  "radioButtonKeyRandomGeneration.Checked || !string.IsNullOrEmpty (textBoxkeyseed.Text) || (string.IsNullOrEmpty (textBoxkeyseed.Text) && !string.IsNullOrEmpty (textBoxkeyid.Text) && !string.IsNullOrEmpty (textBoxcontentkey.Text))"  is complex.
Complex Conditional,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,buttonAddAudioStream_Click,The conditional expression  "numericUpDownAudioIndexMain.Value != numericUpDownAudioIndexAddition.Value && !audiostreams.Select (a => a.Index).ToList ().Contains ((int)numericUpDownAudioIndexAddition.Value) && audiostreams.Count < 7 && ((Item)comboBoxAudioLanguageMain.SelectedItem).Value != null"  is complex.
Complex Conditional,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The conditional expression  "(myAsset.Options == AssetCreationOptions.None && myAsset.DeliveryPolicies.Count == 0) || (myAsset.Options == AssetCreationOptions.StorageEncrypted && protocolProgressiveDownload)"  is complex.
Complex Conditional,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateStitchAndOverlaysInDoc,The conditional expression  "stich_on || voverlay_on || aoverlay_on || !xmlOpenedNotYetStiched"  is complex.
Complex Conditional,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateCheckboxOverlay,The conditional expression  "i != position.Row && ((!bMultiAssetMode) || (bMultiAssetMode && i != 0))"  is complex.
Complex Conditional,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The conditional expression  "!SwitchedToLocalQuery && (_statefilter == StatusAssets.All || _statefilter == "") && _orderassets == OrderAssets.LastModifiedDescending"  is complex.
Complex Conditional,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The conditional expression  "JobRefreshed.State == JobState.Scheduled || JobRefreshed.State == JobState.Processing || JobRefreshed.State == JobState.Queued || JobRefreshed.State == JobState.Canceling"  is complex.
Complex Conditional,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DoPlayBackWithStreamingEndpoint,The conditional expression  "(myasset != null && UISelectSEFiltersAndProtocols) && (context.StreamingEndpoints.Count () > 1 || (context.StreamingEndpoints.FirstOrDefault () != null && context.StreamingEndpoints.FirstOrDefault ().CustomHostNames.Count > 0) || context.Filters.Count () > 0 || (myasset.AssetFilters.Count () > 0))"  is complex.
Empty Catch Block,AMSExplorer,AddDynamicEncryptionFrame6_WidevineLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame6_WidevineLicense.cs,GetWidevineConfiguration,The method has an empty catch block.
Empty Catch Block,AMSExplorer,ChannelRunOnPremisesEncoder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelRunOnPremisesEncoder.cs,buttonOk_Click,The method has an empty catch block.
Empty Catch Block,AMSExplorer,ChannelAdSlateControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelAdSlateControl.cs,DeleteSASLocator,The method has an empty catch block.
Empty Catch Block,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ReturnOriginResolutionThumbnailsForAsset,The method has an empty catch block.
Empty Catch Block,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,Display,The method has an empty catch block.
Empty Catch Block,AMSExplorer,EncodingMESPickOverlay,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMESPickOverlay.cs,MyUploadProgressChanged,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,AnalyzeItemsInBackground,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,Subclipping_FormClosed,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,PlaybackAsset,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,ReturnFilterTrackBitrateRangeFromString,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,ReturnFilterTrackBitrateRangeFromString,The method has an empty catch block.
Empty Catch Block,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,textBoxConfiguration_TextChanged,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DeleteLocatorsForAsset,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,WaitForCreatingProcessToCloseFileThenDoStuff,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,DeleteAssetAsync,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,WorkerRefreshStreamingEndpoints_DoWork,The method has an empty catch block.
Empty Catch Block,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_FormClosed,The method has an empty catch block.
Empty Catch Block,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_FormClosed,The method has an empty catch block.
Empty Catch Block,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,MyUploadProgressChanged,The method has an empty catch block.
Empty Catch Block,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoGenerateManifest,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,WorkerRefreshChannels_DoWork,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshProgram,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,WorkerRefreshChannels_DoWork,The method has an empty catch block.
Empty Catch Block,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,WatchFolder_Load,The method has an empty catch block.
Empty Catch Block,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,SeeRhozetExample,The method has an empty catch block.
Empty Catch Block,AMSExplorer,WatchFolder,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\WatchFolder.cs,SeeJSONExample,The method has an empty catch block.
Empty Catch Block,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,ProcessUploadFile,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,WorkerAnalyzeAssets_DoWork,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,AnalyzeItemsInBackground,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RestoreJobProgress,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The method has an empty catch block.
Empty Catch Block,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The method has an empty catch block.
Empty Catch Block,AMSExplorer,PlayReadyStaticEnc,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\PlayReadyStaticEnc.cs,buttonAzureSettings_Click,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,AnalyzeAndIndentXMLJSON,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,AnalyzeAndIndentXMLJSON,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DownloadVersionRequestCompleted,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,SaveAndProtectUserConfig,The method has an empty catch block.
Empty Catch Block,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,WatchFolderCallApi,The method has an empty catch block.
Empty Catch Block,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetManifestSegmentsList,The method has an empty catch block.
Magic Number,AMSExplorer,AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig.cs,buttongenerateContentKey_Click,The following statement contains a magic number: textBoxContentKey.Text = Convert.ToBase64String (DynamicEncryption.GetRandomBuffer (16));  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame3_AESDelivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_AESDelivery.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownNbOptions.Maximum = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownNbOptionsFairPlay.Maximum = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame3_CENCDelivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENCDelivery.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownNbOptionsPlayReady.Maximum = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame3_CENCDelivery,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame3_CENCDelivery.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownNbOptionsWidevine.Maximum = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame2_AESKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_AESKeyConfig.cs,buttongenerateContentKey_Click,The following statement contains a magic number: textBoxcontentkey.Text = Convert.ToBase64String (DynamicEncryption.GetRandomBuffer (16));  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame6_WidevineLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame6_WidevineLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownSecLevel.Maximum = new decimal (new int[] {  	5'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDisplayAuthorizationPolicyOption,The following statement contains a magic number: if (listViewAutPolOptions.SelectedItems.Count > 0 && SelectedPolicy != null) {  	dataGridViewAutPolOption.Rows.Clear ();  	dataGridViewAutPolOption.ColumnCount = 2;  	dataGridViewAutPolOption.Columns [0].DefaultCellStyle.BackColor = Color.Gainsboro;  	IContentKeyAuthorizationPolicyOption option = SelectedPolicy.Options.Skip (listViewAutPolOptions.SelectedIndices [0]).Take (1).FirstOrDefault ();  	if (option != null)// Token option  	 {  		dataGridViewAutPolOption.Rows.Add ("Name"' option.Name != null ? option.Name : "<no name>");  		dataGridViewAutPolOption.Rows.Add ("Id"' option.Id);  		// Key delivery configuration  		int i = dataGridViewAutPolOption.Rows.Add ("KeyDeliveryConfiguration"' "<null>");  		if (option.KeyDeliveryConfiguration != null) {  			DataGridViewButtonCell btn = new DataGridViewButtonCell ();  			dataGridViewAutPolOption.Rows [i].Cells [1] = btn;  			dataGridViewAutPolOption.Rows [i].Cells [1].Value = "See value";  			dataGridViewAutPolOption.Rows [i].Cells [1].Tag = option.KeyDeliveryConfiguration;  		}  		dataGridViewAutPolOption.Rows.Add ("KeyDeliveryType"' option.KeyDeliveryType);  		List<ContentKeyAuthorizationPolicyRestriction> objList_restriction = option.Restrictions;  		foreach (var restriction in objList_restriction) {  			dataGridViewAutPolOption.Rows.Add ("Restriction Name"' restriction.Name);  			dataGridViewAutPolOption.Rows.Add ("Restriction KeyRestrictionType"' (ContentKeyRestrictionType)restriction.KeyRestrictionType);  			if (restriction.Requirements != null) {  				// Restriction Requirements  				i = dataGridViewAutPolOption.Rows.Add ("Restriction Requirements"' "<null>");  				if (restriction.Requirements != null) {  					DataGridViewButtonCell btn2 = new DataGridViewButtonCell ();  					dataGridViewAutPolOption.Rows [i].Cells [1] = btn2;  					dataGridViewAutPolOption.Rows [i].Cells [1].Value = "See value";  					dataGridViewAutPolOption.Rows [i].Cells [1].Tag = restriction.Requirements;  					TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (restriction.Requirements);  					dataGridViewAutPolOption.Rows.Add ("Token Type"' tokenTemplate.TokenType);  					i = dataGridViewAutPolOption.Rows.Add ("Primary Verification Key"' "<null>");  					if (tokenTemplate.PrimaryVerificationKey != null) {  						dataGridViewAutPolOption.Rows.Add ("Token Verification Key Type"' (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) ? "Symmetric" : "Asymmetric (X509)");  						if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  							var verifkey = (SymmetricVerificationKey)tokenTemplate.PrimaryVerificationKey;  							btn2 = new DataGridViewButtonCell ();  							dataGridViewAutPolOption.Rows [i].Cells [1] = btn2;  							dataGridViewAutPolOption.Rows [i].Cells [1].Value = "See key value";  							dataGridViewAutPolOption.Rows [i].Cells [1].Tag = Convert.ToBase64String (verifkey.KeyValue);  						}  					}  					foreach (var verifkey in tokenTemplate.AlternateVerificationKeys) {  						i = dataGridViewAutPolOption.Rows.Add ("Alternate Verification Key"' "<null>");  						if (verifkey != null) {  							dataGridViewAutPolOption.Rows.Add ("Token Verification Key Type"' (verifkey.GetType () == typeof(SymmetricVerificationKey)) ? "Symmetric" : "Asymmetric (X509)");  							if (verifkey.GetType () == typeof(SymmetricVerificationKey)) {  								var verifkeySym = (SymmetricVerificationKey)verifkey;  								btn2 = new DataGridViewButtonCell ();  								dataGridViewAutPolOption.Rows [i].Cells [1] = btn2;  								dataGridViewAutPolOption.Rows [i].Cells [1].Value = "See key value";  								dataGridViewAutPolOption.Rows [i].Cells [1].Tag = Convert.ToBase64String (verifkeySym.KeyValue);  							}  						}  					}  					if (tokenTemplate.OpenIdConnectDiscoveryDocument != null) {  						dataGridViewAutPolOption.Rows.Add ("OpenId Connect Discovery Document Uri"' tokenTemplate.OpenIdConnectDiscoveryDocument.OpenIdDiscoveryUri);  					}  					dataGridViewAutPolOption.Rows.Add ("Token Audience"' tokenTemplate.Audience);  					dataGridViewAutPolOption.Rows.Add ("Token Issuer"' tokenTemplate.Issuer);  					foreach (var claim in tokenTemplate.RequiredClaims) {  						dataGridViewAutPolOption.Rows.Add ("Required Claim' Type"' claim.ClaimType);  						dataGridViewAutPolOption.Rows.Add ("Required Claim' Value"' claim.ClaimValue);  					}  				}  			}  		}  	}  }  
Magic Number,AMSExplorer,SelectAutPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectAutPolicy.cs,DoDisplayAuthorizationPolicyOption,The following statement contains a magic number: dataGridViewAutPolOption.ColumnCount = 2;  
Magic Number,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,DoDisplayDeliveryPolicyProperties,The following statement contains a magic number: if (selection.Count > 0) {  	var policy = selection.FirstOrDefault ();  	DGDelPol.Rows.Clear ();  	DGDelPol.ColumnCount = 2;  	DGDelPol.Columns [0].DefaultCellStyle.BackColor = Color.Gainsboro;  	DGDelPol.Rows.Add ("Name"' policy.Name);  	DGDelPol.Rows.Add ("Id"' policy.Id);  	DGDelPol.Rows.Add ("Type"' policy.AssetDeliveryPolicyType);  	DGDelPol.Rows.Add ("Protocol"' policy.AssetDeliveryProtocol);  	if (policy.AssetDeliveryConfiguration != null) {  		int i = 0;  		foreach (var conf in policy.AssetDeliveryConfiguration) {  			DGDelPol.Rows.Add (string.Format ("Config #{0}' \"{1}\""' i' conf.Key)' conf.Value);  			i++;  		}  	}  }  
Magic Number,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,DoDisplayDeliveryPolicyProperties,The following statement contains a magic number: DGDelPol.ColumnCount = 2;  
Magic Number,AMSExplorer,SelectDeliveryPolicy,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\SelectDeliveryPolicy.cs,ReturnSelectedDeliveryPolicies,The following statement contains a magic number: foreach (int selectedindex in listViewPolicies.SelectedIndices) {  	IAssetDeliveryPolicy DP = delPolicies.Where (pol => pol.Id == listViewPolicies.Items [selectedindex].SubItems [3].Text).FirstOrDefault ();  	if (DP != null) {  		Selection.Add (DP);  	}  }  
Magic Number,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsContentModeration,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsContentModeration.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 9;  	dataGridViewTelemetry.Columns [0].HeaderText = "ObservedTime";  	dataGridViewTelemetry.Columns [1].HeaderText = "BytesSent";  	dataGridViewTelemetry.Columns [2].HeaderText = "EndToEndLatency";  	dataGridViewTelemetry.Columns [3].HeaderText = "HostName";  	dataGridViewTelemetry.Columns [4].HeaderText = "RequestCount";  	dataGridViewTelemetry.Columns [5].HeaderText = "ResultCode";  	dataGridViewTelemetry.Columns [6].HeaderText = "RowKey";  	dataGridViewTelemetry.Columns [7].HeaderText = "ServerLatency";  	dataGridViewTelemetry.Columns [8].HeaderText = "StatusCode";  	statusCodeCol = 8;  	labelTelemetryUI.Text = string.Format ("Telemetry for Streaming Endpoint '{0}'"' streamingEndpoint.Name);  	dataGridViewTelemetry.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 9;  	dataGridViewTelemetry.Columns [0].HeaderText = "ObservedTime";  	dataGridViewTelemetry.Columns [1].HeaderText = "BytesSent";  	dataGridViewTelemetry.Columns [2].HeaderText = "EndToEndLatency";  	dataGridViewTelemetry.Columns [3].HeaderText = "HostName";  	dataGridViewTelemetry.Columns [4].HeaderText = "RequestCount";  	dataGridViewTelemetry.Columns [5].HeaderText = "ResultCode";  	dataGridViewTelemetry.Columns [6].HeaderText = "RowKey";  	dataGridViewTelemetry.Columns [7].HeaderText = "ServerLatency";  	dataGridViewTelemetry.Columns [8].HeaderText = "StatusCode";  	statusCodeCol = 8;  	labelTelemetryUI.Text = string.Format ("Telemetry for Streaming Endpoint '{0}'"' streamingEndpoint.Name);  	dataGridViewTelemetry.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 9;  	dataGridViewTelemetry.Columns [0].HeaderText = "ObservedTime";  	dataGridViewTelemetry.Columns [1].HeaderText = "BytesSent";  	dataGridViewTelemetry.Columns [2].HeaderText = "EndToEndLatency";  	dataGridViewTelemetry.Columns [3].HeaderText = "HostName";  	dataGridViewTelemetry.Columns [4].HeaderText = "RequestCount";  	dataGridViewTelemetry.Columns [5].HeaderText = "ResultCode";  	dataGridViewTelemetry.Columns [6].HeaderText = "RowKey";  	dataGridViewTelemetry.Columns [7].HeaderText = "ServerLatency";  	dataGridViewTelemetry.Columns [8].HeaderText = "StatusCode";  	statusCodeCol = 8;  	labelTelemetryUI.Text = string.Format ("Telemetry for Streaming Endpoint '{0}'"' streamingEndpoint.Name);  	dataGridViewTelemetry.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 9;  	dataGridViewTelemetry.Columns [0].HeaderText = "ObservedTime";  	dataGridViewTelemetry.Columns [1].HeaderText = "BytesSent";  	dataGridViewTelemetry.Columns [2].HeaderText = "EndToEndLatency";  	dataGridViewTelemetry.Columns [3].HeaderText = "HostName";  	dataGridViewTelemetry.Columns [4].HeaderText = "RequestCount";  	dataGridViewTelemetry.Columns [5].HeaderText = "ResultCode";  	dataGridViewTelemetry.Columns [6].HeaderText = "RowKey";  	dataGridViewTelemetry.Columns [7].HeaderText = "ServerLatency";  	dataGridViewTelemetry.Columns [8].HeaderText = "StatusCode";  	statusCodeCol = 8;  	labelTelemetryUI.Text = string.Format ("Telemetry for Streaming Endpoint '{0}'"' streamingEndpoint.Name);  	dataGridViewTelemetry.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 9;  	dataGridViewTelemetry.Columns [0].HeaderText = "ObservedTime";  	dataGridViewTelemetry.Columns [1].HeaderText = "BytesSent";  	dataGridViewTelemetry.Columns [2].HeaderText = "EndToEndLatency";  	dataGridViewTelemetry.Columns [3].HeaderText = "HostName";  	dataGridViewTelemetry.Columns [4].HeaderText = "RequestCount";  	dataGridViewTelemetry.Columns [5].HeaderText = "ResultCode";  	dataGridViewTelemetry.Columns [6].HeaderText = "RowKey";  	dataGridViewTelemetry.Columns [7].HeaderText = "ServerLatency";  	dataGridViewTelemetry.Columns [8].HeaderText = "StatusCode";  	statusCodeCol = 8;  	labelTelemetryUI.Text = string.Format ("Telemetry for Streaming Endpoint '{0}'"' streamingEndpoint.Name);  	dataGridViewTelemetry.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 9;  	dataGridViewTelemetry.Columns [0].HeaderText = "ObservedTime";  	dataGridViewTelemetry.Columns [1].HeaderText = "BytesSent";  	dataGridViewTelemetry.Columns [2].HeaderText = "EndToEndLatency";  	dataGridViewTelemetry.Columns [3].HeaderText = "HostName";  	dataGridViewTelemetry.Columns [4].HeaderText = "RequestCount";  	dataGridViewTelemetry.Columns [5].HeaderText = "ResultCode";  	dataGridViewTelemetry.Columns [6].HeaderText = "RowKey";  	dataGridViewTelemetry.Columns [7].HeaderText = "ServerLatency";  	dataGridViewTelemetry.Columns [8].HeaderText = "StatusCode";  	statusCodeCol = 8;  	labelTelemetryUI.Text = string.Format ("Telemetry for Streaming Endpoint '{0}'"' streamingEndpoint.Name);  	dataGridViewTelemetry.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 9;  	dataGridViewTelemetry.Columns [0].HeaderText = "ObservedTime";  	dataGridViewTelemetry.Columns [1].HeaderText = "BytesSent";  	dataGridViewTelemetry.Columns [2].HeaderText = "EndToEndLatency";  	dataGridViewTelemetry.Columns [3].HeaderText = "HostName";  	dataGridViewTelemetry.Columns [4].HeaderText = "RequestCount";  	dataGridViewTelemetry.Columns [5].HeaderText = "ResultCode";  	dataGridViewTelemetry.Columns [6].HeaderText = "RowKey";  	dataGridViewTelemetry.Columns [7].HeaderText = "ServerLatency";  	dataGridViewTelemetry.Columns [8].HeaderText = "StatusCode";  	statusCodeCol = 8;  	labelTelemetryUI.Text = string.Format ("Telemetry for Streaming Endpoint '{0}'"' streamingEndpoint.Name);  	dataGridViewTelemetry.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 9;  	dataGridViewTelemetry.Columns [0].HeaderText = "ObservedTime";  	dataGridViewTelemetry.Columns [1].HeaderText = "BytesSent";  	dataGridViewTelemetry.Columns [2].HeaderText = "EndToEndLatency";  	dataGridViewTelemetry.Columns [3].HeaderText = "HostName";  	dataGridViewTelemetry.Columns [4].HeaderText = "RequestCount";  	dataGridViewTelemetry.Columns [5].HeaderText = "ResultCode";  	dataGridViewTelemetry.Columns [6].HeaderText = "RowKey";  	dataGridViewTelemetry.Columns [7].HeaderText = "ServerLatency";  	dataGridViewTelemetry.Columns [8].HeaderText = "StatusCode";  	statusCodeCol = 8;  	labelTelemetryUI.Text = string.Format ("Telemetry for Streaming Endpoint '{0}'"' streamingEndpoint.Name);  	dataGridViewTelemetry.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 9;  	dataGridViewTelemetry.Columns [0].HeaderText = "ObservedTime";  	dataGridViewTelemetry.Columns [1].HeaderText = "BytesSent";  	dataGridViewTelemetry.Columns [2].HeaderText = "EndToEndLatency";  	dataGridViewTelemetry.Columns [3].HeaderText = "HostName";  	dataGridViewTelemetry.Columns [4].HeaderText = "RequestCount";  	dataGridViewTelemetry.Columns [5].HeaderText = "ResultCode";  	dataGridViewTelemetry.Columns [6].HeaderText = "RowKey";  	dataGridViewTelemetry.Columns [7].HeaderText = "ServerLatency";  	dataGridViewTelemetry.Columns [8].HeaderText = "StatusCode";  	statusCodeCol = 8;  	labelTelemetryUI.Text = string.Format ("Telemetry for Streaming Endpoint '{0}'"' streamingEndpoint.Name);  	dataGridViewTelemetry.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.ColumnCount = 9;  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [2].HeaderText = "EndToEndLatency";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [3].HeaderText = "HostName";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [4].HeaderText = "RequestCount";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [5].HeaderText = "ResultCode";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [6].HeaderText = "RowKey";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [7].HeaderText = "ServerLatency";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [8].HeaderText = "StatusCode";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: statusCodeCol = 8;  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: try {  	// Get some streaming endpoint metrics.  	var res = _context.StreamingEndPointRequestLogs.GetStreamingEndPointMetrics (currentConfig.EndPointAddress' _storagePassword' new Guid (_credentials.AccountId).ToString ()' streamingEndpoint.Id' _timerangeStart' _timerangeEnd ?? DateTime.UtcNow.AddMinutes (5));  	foreach (var log in res.OrderByDescending (l => l.ObservedTime)) {  		if (!showErrors || (showErrors && (log.StatusCode >= 400))) {  			dataGridViewTelemetry.Rows.Add (radioButtonLocal.Checked ? log.ObservedTime.ToLocalTime () : log.ObservedTime.ToUniversalTime ()' log.BytesSent' log.EndToEndLatency' log.HostName' log.RequestCount' log.ResultCode' log.RowKey' log.ServerLatency' log.StatusCode);  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("Error when accessing to telemetry.\n\n" + ex.Message);  	_storagePassword = "";  	_credentials.AccountId = "";  	if (boolSavedStoragePassword)  		_credentials.DefaultStorageKey = "";  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: try {  	// Get some streaming endpoint metrics.  	var res = _context.StreamingEndPointRequestLogs.GetStreamingEndPointMetrics (currentConfig.EndPointAddress' _storagePassword' new Guid (_credentials.AccountId).ToString ()' streamingEndpoint.Id' _timerangeStart' _timerangeEnd ?? DateTime.UtcNow.AddMinutes (5));  	foreach (var log in res.OrderByDescending (l => l.ObservedTime)) {  		if (!showErrors || (showErrors && (log.StatusCode >= 400))) {  			dataGridViewTelemetry.Rows.Add (radioButtonLocal.Checked ? log.ObservedTime.ToLocalTime () : log.ObservedTime.ToUniversalTime ()' log.BytesSent' log.EndToEndLatency' log.HostName' log.RequestCount' log.ResultCode' log.RowKey' log.ServerLatency' log.StatusCode);  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("Error when accessing to telemetry.\n\n" + ex.Message);  	_storagePassword = "";  	_credentials.AccountId = "";  	if (boolSavedStoragePassword)  		_credentials.DefaultStorageKey = "";  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: foreach (var log in res.OrderByDescending (l => l.ObservedTime)) {  	if (!showErrors || (showErrors && (log.StatusCode >= 400))) {  		dataGridViewTelemetry.Rows.Add (radioButtonLocal.Checked ? log.ObservedTime.ToLocalTime () : log.ObservedTime.ToUniversalTime ()' log.BytesSent' log.EndToEndLatency' log.HostName' log.RequestCount' log.ResultCode' log.RowKey' log.ServerLatency' log.StatusCode);  	}  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (!showErrors || (showErrors && (log.StatusCode >= 400))) {  	dataGridViewTelemetry.Rows.Add (radioButtonLocal.Checked ? log.ObservedTime.ToLocalTime () : log.ObservedTime.ToUniversalTime ()' log.BytesSent' log.EndToEndLatency' log.HostName' log.RequestCount' log.ResultCode' log.RowKey' log.ServerLatency' log.StatusCode);  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: if (_firsttime) {  	dataGridViewTelemetry.ColumnCount = 14;  	dataGridViewTelemetry.Columns [0].HeaderText = "Observed time";  	dataGridViewTelemetry.Columns [1].HeaderText = "Healthy";  	dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  	dataGridViewTelemetry.Columns [3].HeaderText = "track name";  	dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  	dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  	dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  	dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  	dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  	dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  	dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  	dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  	dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  	dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  	healthyCountCol = 1;  	//   overlapCountCol = 6;  	//   discontCountCol = 7;  	labelTelemetryUI.Text = string.Format ("Telemetry for channel '{0}'"' channel.Name);  	_firsttime = false;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.ColumnCount = 14;  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [2].HeaderText = "Track type";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [3].HeaderText = "track name";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [4].HeaderText = "Bitrate";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [5].HeaderText = "Incoming bitrate";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [6].HeaderText = "Overlap count";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [7].HeaderText = "Discontinuity count";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [8].HeaderText = "Last timestamp";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [9].HeaderText = "Non increasing Count";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [10].HeaderText = "Unaligned Key Frames";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [11].HeaderText = "Unaligned Presentation Time";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [12].HeaderText = "Unexpected Bitrate";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: dataGridViewTelemetry.Columns [13].HeaderText = "Custom attributes";  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,DoLoadTelemetry,The following statement contains a magic number: try {  	var channelMetrics = _context.ChannelMetrics.GetChannelMetrics (currentConfig.EndPointAddress' _storagePassword' new Guid (_credentials.AccountId).ToString ()' channel.Id' _timerangeStart' _timerangeEnd ?? DateTime.UtcNow.AddMinutes (5));  	foreach (var cHB in channelMetrics.OrderByDescending (x => x.ObservedTime)) {  		if (!showErrors || (showErrors && !cHB.Healthy)) {  			dataGridViewTelemetry.Rows.Add (radioButtonLocal.Checked ? cHB.ObservedTime.ToLocalTime () : cHB.ObservedTime.ToUniversalTime ()' cHB.Healthy' cHB.TrackType' cHB.TrackName' cHB.Bitrate' cHB.IncomingBitrate' cHB.OverlapCount' cHB.DiscontinuityCount' cHB.LastTimestamp' cHB.NonincreasingCount' cHB.UnalignedKeyFrames' cHB.UnalignedPresentationTime' cHB.UnexpectedBitrate' cHB.CustomAttributes);  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("Error when accessing to telemetry.\n\n" + ex.Message);  	_storagePassword = "";  	_credentials.AccountId = "";  	if (boolSavedStoragePassword)  		_credentials.DefaultStorageKey = "";  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,dataGridViewTelemetry_RowPostPaint,The following statement contains a magic number: if (e.RowIndex % 2 == 0) {  	foreach (DataGridViewCell c in ((DataGridView)sender).Rows [e.RowIndex].Cells)  		c.Style.BackColor = Color.AliceBlue;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,dataGridViewTelemetry_CellFormatting,The following statement contains a magic number: if (!channelMode) {  	var celljobstatusvalue = dataGridViewTelemetry.Rows [e.RowIndex].Cells [dataGridViewTelemetry.Columns [statusCodeCol].Index].Value;  	if (celljobstatusvalue != null) {  		int status = (int)celljobstatusvalue;  		Color mycolor;  		if (status < 400) {  			mycolor = Color.DarkGreen;  		} else if (status < 500) {  			mycolor = Color.DarkOrange;  		} else {  			mycolor = Color.Red;  		}  		/*   case JobState.Canceled:                            mycolor = Color.Blue;                            break;                        case JobState.Canceling:                            mycolor = Color.Blue;                            break;                        case JobState.Processing:                            mycolor = Color.DarkGreen;                            break;                        case JobState.Queued:                            mycolor = Color.Green;                            break;*/e.CellStyle.ForeColor = mycolor;  	}  } else {  	bool healthy = (bool)dataGridViewTelemetry.Rows [e.RowIndex].Cells [dataGridViewTelemetry.Columns [healthyCountCol].Index].Value;  	e.CellStyle.ForeColor = healthy ? Color.DarkGreen : Color.Red;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,dataGridViewTelemetry_CellFormatting,The following statement contains a magic number: if (!channelMode) {  	var celljobstatusvalue = dataGridViewTelemetry.Rows [e.RowIndex].Cells [dataGridViewTelemetry.Columns [statusCodeCol].Index].Value;  	if (celljobstatusvalue != null) {  		int status = (int)celljobstatusvalue;  		Color mycolor;  		if (status < 400) {  			mycolor = Color.DarkGreen;  		} else if (status < 500) {  			mycolor = Color.DarkOrange;  		} else {  			mycolor = Color.Red;  		}  		/*   case JobState.Canceled:                            mycolor = Color.Blue;                            break;                        case JobState.Canceling:                            mycolor = Color.Blue;                            break;                        case JobState.Processing:                            mycolor = Color.DarkGreen;                            break;                        case JobState.Queued:                            mycolor = Color.Green;                            break;*/e.CellStyle.ForeColor = mycolor;  	}  } else {  	bool healthy = (bool)dataGridViewTelemetry.Rows [e.RowIndex].Cells [dataGridViewTelemetry.Columns [healthyCountCol].Index].Value;  	e.CellStyle.ForeColor = healthy ? Color.DarkGreen : Color.Red;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,dataGridViewTelemetry_CellFormatting,The following statement contains a magic number: if (celljobstatusvalue != null) {  	int status = (int)celljobstatusvalue;  	Color mycolor;  	if (status < 400) {  		mycolor = Color.DarkGreen;  	} else if (status < 500) {  		mycolor = Color.DarkOrange;  	} else {  		mycolor = Color.Red;  	}  	/*   case JobState.Canceled:                            mycolor = Color.Blue;                            break;                        case JobState.Canceling:                            mycolor = Color.Blue;                            break;                        case JobState.Processing:                            mycolor = Color.DarkGreen;                            break;                        case JobState.Queued:                            mycolor = Color.Green;                            break;*/e.CellStyle.ForeColor = mycolor;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,dataGridViewTelemetry_CellFormatting,The following statement contains a magic number: if (celljobstatusvalue != null) {  	int status = (int)celljobstatusvalue;  	Color mycolor;  	if (status < 400) {  		mycolor = Color.DarkGreen;  	} else if (status < 500) {  		mycolor = Color.DarkOrange;  	} else {  		mycolor = Color.Red;  	}  	/*   case JobState.Canceled:                            mycolor = Color.Blue;                            break;                        case JobState.Canceling:                            mycolor = Color.Blue;                            break;                        case JobState.Processing:                            mycolor = Color.DarkGreen;                            break;                        case JobState.Queued:                            mycolor = Color.Green;                            break;*/e.CellStyle.ForeColor = mycolor;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,dataGridViewTelemetry_CellFormatting,The following statement contains a magic number: if (status < 400) {  	mycolor = Color.DarkGreen;  } else if (status < 500) {  	mycolor = Color.DarkOrange;  } else {  	mycolor = Color.Red;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,dataGridViewTelemetry_CellFormatting,The following statement contains a magic number: if (status < 400) {  	mycolor = Color.DarkGreen;  } else if (status < 500) {  	mycolor = Color.DarkOrange;  } else {  	mycolor = Color.Red;  }  
Magic Number,AMSExplorer,DisplayTelemetry,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-Telemetry\DisplayTelemetry.cs,dataGridViewTelemetry_CellFormatting,The following statement contains a magic number: if (status < 500) {  	mycolor = Color.DarkOrange;  } else {  	mycolor = Color.Red;  }  
Magic Number,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsRedaction,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsRedaction.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,MediaAnalyticsMotionDetection,The following statement contains a magic number: buttonRegionEditor.Initialize (_firstAsset' main' true' 8' false);  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMergeTimeHours.Maximum = new decimal (new int[] {  	25'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFrameSampling.Increment = new decimal (new int[] {  	1'  	0'  	0'  	65536  });  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFrameSampling.Maximum = new decimal (new int[] {  	200'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMergeTimeMinutes.Maximum = new decimal (new int[] {  	59'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMergeTimeSeconds.Maximum = new decimal (new int[] {  	59'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsMotionDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsMotionDetection.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,MediaAnalyticsVideoOCR,The following statement contains a magic number: buttonRegionEditor.Initialize (_firstAsset' main' false' 8' false);  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownTimeInterval.Increment = new decimal (new int[] {  	1'  	0'  	0'  	65536  });  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownTimeInterval.Maximum = new decimal (new int[] {  	200'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownTimeInterval.Value = new decimal (new int[] {  	15'  	0'  	0'  	65536  });  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownTimeInterval.Value = new decimal (new int[] {  	15'  	0'  	0'  	65536  });  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoOCR,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoOCR.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,IndexerV2_Load,The following statement contains a magic number: LanguagesIndexV2s.ForEach (c => comboBoxLanguage.Items.Add (new Item ((new CultureInfo (c.Substring (0' 2) + "-" + c.Substring (2' 2))).DisplayName' c)));  
Magic Number,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,IndexerV2_Load,The following statement contains a magic number: LanguagesIndexV2s.ForEach (c => comboBoxLanguage.Items.Add (new Item ((new CultureInfo (c.Substring (0' 2) + "-" + c.Substring (2' 2))).DisplayName' c)));  
Magic Number,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,IndexerV2_Load,The following statement contains a magic number: LanguagesIndexV2s.ForEach (c => comboBoxLanguage.Items.Add (new Item ((new CultureInfo (c.Substring (0' 2) + "-" + c.Substring (2' 2))).DisplayName' c)));  
Magic Number,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,IndexerV2,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\IndexerV2.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ReturnOriginResolutionThumbnailsForAsset,The following statement contains a magic number: try {  	// The duration for the locator's access policy.  	var policy = asset.GetMediaContext ().AccessPolicies.Create ("AP AMSE"' new TimeSpan (0' 15' 0)' AccessPermissions.Read);  	saslocator = asset.GetMediaContext ().Locators.CreateLocator (LocatorType.Sas' fileJPG.Asset' policy' DateTime.UtcNow.AddMinutes (-5));  	// Get original video size from metadata  	XDocument doc = XDocument.Load (metadataFile.GetSasUri ().ToString ());  	XNamespace ns = "http://schemas.microsoft.com/windowsazure/mediaservices/2014/07/mediaencoder/inputmetadata";  	var bodyxml = doc.Element (ns + "AssetFiles").Element (ns + "AssetFile").Element (ns + "VideoTracks").Element (ns + "VideoTrack");  	result.OriginalSize = new Size (int.Parse (bodyxml.Attribute ("Width").Value)' int.Parse (bodyxml.Attribute ("Height").Value));  	// Thumbnails  	IEnumerable<IAssetFile> Thumbnails = fileJPG.Asset.AssetFiles.ToList ().Where (f => f.Name.StartsWith (asset.Id.Substring (Constants.AssetIdPrefix.Length) + "_OriginalRes_") && f.Name.EndsWith (".jpg")).OrderBy (f => f.Name);  	// Generate the Progressive Download URLs for each file.   	List<Uri> ProgressiveDownloadUris = Thumbnails.Select (af => af.GetSasUri ()).ToList ();  	foreach (var urli in ProgressiveDownloadUris) {  		var request = WebRequest.Create (urli.AbsoluteUri);  		using (var response = request.GetResponse ())  			using (var stream = response.GetResponseStream ()) {  				result.Images.Add (Bitmap.FromStream (stream));  			}  	}  } catch {  	result.Error = true;  }  
Magic Number,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ReturnOriginResolutionThumbnailsForAsset,The following statement contains a magic number: try {  	// The duration for the locator's access policy.  	var policy = asset.GetMediaContext ().AccessPolicies.Create ("AP AMSE"' new TimeSpan (0' 15' 0)' AccessPermissions.Read);  	saslocator = asset.GetMediaContext ().Locators.CreateLocator (LocatorType.Sas' fileJPG.Asset' policy' DateTime.UtcNow.AddMinutes (-5));  	// Get original video size from metadata  	XDocument doc = XDocument.Load (metadataFile.GetSasUri ().ToString ());  	XNamespace ns = "http://schemas.microsoft.com/windowsazure/mediaservices/2014/07/mediaencoder/inputmetadata";  	var bodyxml = doc.Element (ns + "AssetFiles").Element (ns + "AssetFile").Element (ns + "VideoTracks").Element (ns + "VideoTrack");  	result.OriginalSize = new Size (int.Parse (bodyxml.Attribute ("Width").Value)' int.Parse (bodyxml.Attribute ("Height").Value));  	// Thumbnails  	IEnumerable<IAssetFile> Thumbnails = fileJPG.Asset.AssetFiles.ToList ().Where (f => f.Name.StartsWith (asset.Id.Substring (Constants.AssetIdPrefix.Length) + "_OriginalRes_") && f.Name.EndsWith (".jpg")).OrderBy (f => f.Name);  	// Generate the Progressive Download URLs for each file.   	List<Uri> ProgressiveDownloadUris = Thumbnails.Select (af => af.GetSasUri ()).ToList ();  	foreach (var urli in ProgressiveDownloadUris) {  		var request = WebRequest.Create (urli.AbsoluteUri);  		using (var response = request.GetResponse ())  			using (var stream = response.GetResponseStream ()) {  				result.Images.Add (Bitmap.FromStream (stream));  			}  	}  } catch {  	result.Error = true;  }  
Magic Number,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ReturnOriginResolutionThumbnailsForAsset,The following statement contains a magic number: saslocator = asset.GetMediaContext ().Locators.CreateLocator (LocatorType.Sas' fileJPG.Asset' policy' DateTime.UtcNow.AddMinutes (-5));  
Magic Number,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,InitializeComponent,The following statement contains a magic number: this.labelInfoText.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));  
Magic Number,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,InitializeComponent,The following statement contains a magic number: this.labelInfoText.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));  
Magic Number,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,InitializeComponent,The following statement contains a magic number: this.labelInfoText.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));  
Magic Number,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownH.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownW.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownY.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,RegionEditor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownX.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Polygon,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ToRectangle,The following statement contains a magic number: if (_points.Count == 4) {  	var xmin = Math.Min (Math.Min (_points [0].X' _points [1].X)' Math.Min (_points [2].X' _points [3].X));  	var xmax = Math.Max (Math.Max (_points [0].X' _points [1].X)' Math.Max (_points [2].X' _points [3].X));  	var ymin = Math.Min (Math.Min (_points [0].Y' _points [1].Y)' Math.Min (_points [2].Y' _points [3].Y));  	var ymax = Math.Max (Math.Max (_points [0].Y' _points [1].Y)' Math.Max (_points [2].Y' _points [3].Y));  	return new Rectangle (xmin' ymin' xmax - xmin' ymax - ymin);  } else {  	return new Rectangle ();  }  
Magic Number,AMSExplorer,Polygon,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ToRectangle,The following statement contains a magic number: if (_points.Count == 4) {  	var xmin = Math.Min (Math.Min (_points [0].X' _points [1].X)' Math.Min (_points [2].X' _points [3].X));  	var xmax = Math.Max (Math.Max (_points [0].X' _points [1].X)' Math.Max (_points [2].X' _points [3].X));  	var ymin = Math.Min (Math.Min (_points [0].Y' _points [1].Y)' Math.Min (_points [2].Y' _points [3].Y));  	var ymax = Math.Max (Math.Max (_points [0].Y' _points [1].Y)' Math.Max (_points [2].Y' _points [3].Y));  	return new Rectangle (xmin' ymin' xmax - xmin' ymax - ymin);  } else {  	return new Rectangle ();  }  
Magic Number,AMSExplorer,Polygon,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ToRectangle,The following statement contains a magic number: if (_points.Count == 4) {  	var xmin = Math.Min (Math.Min (_points [0].X' _points [1].X)' Math.Min (_points [2].X' _points [3].X));  	var xmax = Math.Max (Math.Max (_points [0].X' _points [1].X)' Math.Max (_points [2].X' _points [3].X));  	var ymin = Math.Min (Math.Min (_points [0].Y' _points [1].Y)' Math.Min (_points [2].Y' _points [3].Y));  	var ymax = Math.Max (Math.Max (_points [0].Y' _points [1].Y)' Math.Max (_points [2].Y' _points [3].Y));  	return new Rectangle (xmin' ymin' xmax - xmin' ymax - ymin);  } else {  	return new Rectangle ();  }  
Magic Number,AMSExplorer,Polygon,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ToRectangle,The following statement contains a magic number: if (_points.Count == 4) {  	var xmin = Math.Min (Math.Min (_points [0].X' _points [1].X)' Math.Min (_points [2].X' _points [3].X));  	var xmax = Math.Max (Math.Max (_points [0].X' _points [1].X)' Math.Max (_points [2].X' _points [3].X));  	var ymin = Math.Min (Math.Min (_points [0].Y' _points [1].Y)' Math.Min (_points [2].Y' _points [3].Y));  	var ymax = Math.Max (Math.Max (_points [0].Y' _points [1].Y)' Math.Max (_points [2].Y' _points [3].Y));  	return new Rectangle (xmin' ymin' xmax - xmin' ymax - ymin);  } else {  	return new Rectangle ();  }  
Magic Number,AMSExplorer,Polygon,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ToRectangle,The following statement contains a magic number: if (_points.Count == 4) {  	var xmin = Math.Min (Math.Min (_points [0].X' _points [1].X)' Math.Min (_points [2].X' _points [3].X));  	var xmax = Math.Max (Math.Max (_points [0].X' _points [1].X)' Math.Max (_points [2].X' _points [3].X));  	var ymin = Math.Min (Math.Min (_points [0].Y' _points [1].Y)' Math.Min (_points [2].Y' _points [3].Y));  	var ymax = Math.Max (Math.Max (_points [0].Y' _points [1].Y)' Math.Max (_points [2].Y' _points [3].Y));  	return new Rectangle (xmin' ymin' xmax - xmin' ymax - ymin);  } else {  	return new Rectangle ();  }  
Magic Number,AMSExplorer,Polygon,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ToRectangle,The following statement contains a magic number: if (_points.Count == 4) {  	var xmin = Math.Min (Math.Min (_points [0].X' _points [1].X)' Math.Min (_points [2].X' _points [3].X));  	var xmax = Math.Max (Math.Max (_points [0].X' _points [1].X)' Math.Max (_points [2].X' _points [3].X));  	var ymin = Math.Min (Math.Min (_points [0].Y' _points [1].Y)' Math.Min (_points [2].Y' _points [3].Y));  	var ymax = Math.Max (Math.Max (_points [0].Y' _points [1].Y)' Math.Max (_points [2].Y' _points [3].Y));  	return new Rectangle (xmin' ymin' xmax - xmin' ymax - ymin);  } else {  	return new Rectangle ();  }  
Magic Number,AMSExplorer,Polygon,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ToRectangle,The following statement contains a magic number: if (_points.Count == 4) {  	var xmin = Math.Min (Math.Min (_points [0].X' _points [1].X)' Math.Min (_points [2].X' _points [3].X));  	var xmax = Math.Max (Math.Max (_points [0].X' _points [1].X)' Math.Max (_points [2].X' _points [3].X));  	var ymin = Math.Min (Math.Min (_points [0].Y' _points [1].Y)' Math.Min (_points [2].Y' _points [3].Y));  	var ymax = Math.Max (Math.Max (_points [0].Y' _points [1].Y)' Math.Max (_points [2].Y' _points [3].Y));  	return new Rectangle (xmin' ymin' xmax - xmin' ymax - ymin);  } else {  	return new Rectangle ();  }  
Magic Number,AMSExplorer,Polygon,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ToRectangle,The following statement contains a magic number: if (_points.Count == 4) {  	var xmin = Math.Min (Math.Min (_points [0].X' _points [1].X)' Math.Min (_points [2].X' _points [3].X));  	var xmax = Math.Max (Math.Max (_points [0].X' _points [1].X)' Math.Max (_points [2].X' _points [3].X));  	var ymin = Math.Min (Math.Min (_points [0].Y' _points [1].Y)' Math.Min (_points [2].Y' _points [3].Y));  	var ymax = Math.Max (Math.Max (_points [0].Y' _points [1].Y)' Math.Max (_points [2].Y' _points [3].Y));  	return new Rectangle (xmin' ymin' xmax - xmin' ymax - ymin);  } else {  	return new Rectangle ();  }  
Magic Number,AMSExplorer,Polygon,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,ToRectangle,The following statement contains a magic number: if (_points.Count == 4) {  	var xmin = Math.Min (Math.Min (_points [0].X' _points [1].X)' Math.Min (_points [2].X' _points [3].X));  	var xmax = Math.Max (Math.Max (_points [0].X' _points [1].X)' Math.Max (_points [2].X' _points [3].X));  	var ymin = Math.Min (Math.Min (_points [0].Y' _points [1].Y)' Math.Min (_points [2].Y' _points [3].Y));  	var ymax = Math.Max (Math.Max (_points [0].Y' _points [1].Y)' Math.Max (_points [2].Y' _points [3].Y));  	return new Rectangle (xmin' ymin' xmax - xmin' ymax - ymin);  } else {  	return new Rectangle ();  }  
Magic Number,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,OnPaint,The following statement contains a magic number: if (ratioImage < ratioPictureBox)// bar on the side   {  	VideoImageDisplayedHeight = this.Height;  	VideoImageDisplayedWidth = (int)(ratioImage * this.Height);  	marginLeft = (this.Width - VideoImageDisplayedWidth) / 2;  	marginTop = 0;  } else// bar on top   {  	VideoImageDisplayedWidth = this.Width;  	VideoImageDisplayedHeight = (int)(this.Width / ratioImage);  	marginTop = (this.Height - VideoImageDisplayedHeight) / 2;  	marginLeft = 0;  }  
Magic Number,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,OnPaint,The following statement contains a magic number: if (ratioImage < ratioPictureBox)// bar on the side   {  	VideoImageDisplayedHeight = this.Height;  	VideoImageDisplayedWidth = (int)(ratioImage * this.Height);  	marginLeft = (this.Width - VideoImageDisplayedWidth) / 2;  	marginTop = 0;  } else// bar on top   {  	VideoImageDisplayedWidth = this.Width;  	VideoImageDisplayedHeight = (int)(this.Width / ratioImage);  	marginTop = (this.Height - VideoImageDisplayedHeight) / 2;  	marginLeft = 0;  }  
Magic Number,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,OnPaint,The following statement contains a magic number: marginLeft = (this.Width - VideoImageDisplayedWidth) / 2;  
Magic Number,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,OnPaint,The following statement contains a magic number: marginTop = (this.Height - VideoImageDisplayedHeight) / 2;  
Magic Number,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,OnPaint,The following statement contains a magic number: foreach (var polyg in _polygons) {  	var poly = GetScaledValue (polyg);  	e.Graphics.DrawPolygon (penGreen' poly);  	if (!CroppingMode)  		e.Graphics.DrawString (index.ToString ()' new Font ("Segoe UI"' 9)' new SolidBrush (Color.Green)' poly [0].X' poly [0].Y);  	index++;  }  
Magic Number,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,OnPaint,The following statement contains a magic number: if (!CroppingMode)  	e.Graphics.DrawString (index.ToString ()' new Font ("Segoe UI"' 9)' new SolidBrush (Color.Green)' poly [0].X' poly [0].Y);  
Magic Number,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString (index.ToString ()' new Font ("Segoe UI"' 9)' new SolidBrush (Color.Green)' poly [0].X' poly [0].Y);  
Magic Number,AMSExplorer,myPictureBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\RegionEditor\RegionEditor.cs,DrawingPolygoneIsFinal,The following statement contains a magic number: if (_poly != null && _poly.PointsCount > 3) {  	_poly.RemoveLastPoint ();  	_polygons.Add (_poly);  }  
Magic Number,AMSExplorer,EncodingMESPickOverlay,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMESPickOverlay.cs,DoUpload,The following statement contains a magic number: if (Dialog.ShowDialog () == DialogResult.OK) {  	progressBarUpload.Maximum = 100 * Dialog.FileNames.Count ();  	progressBarUpload.Visible = true;  	buttonSelect.Enabled = false;  	buttonUpload.Enabled = false;  	foreach (string file in Dialog.FileNames) {  		await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (file)' file' myAsset));  	}  	// Refresh the asset.  	myAsset = Mainform._context.Assets.Where (a => a.Id == myAsset.Id).FirstOrDefault ();  	progressBarUpload.Visible = false;  	buttonSelect.Enabled = true;  	buttonUpload.Enabled = true;  	ListAssetFiles ();  }  
Magic Number,AMSExplorer,EncodingMESPickOverlay,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMESPickOverlay.cs,DoUpload,The following statement contains a magic number: progressBarUpload.Maximum = 100 * Dialog.FileNames.Count ();  
Magic Number,AMSExplorer,TimeRangeSelection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeRangeSelection.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerEndTime.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,TimeRangeSelection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeRangeSelection.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerEndDate.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,TimeRangeSelection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeRangeSelection.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerStartTime.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,Init,The following statement contains a magic number: this.Columns ["Progress"].DisplayIndex = 6;  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,Init,The following statement contains a magic number: this.Columns ["Progress"].Width = 150;  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,Init,The following statement contains a magic number: this.Columns ["URLForUpload"].Width = 200;  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,Init,The following statement contains a magic number: this.Columns ["LastModified"].Width = 140;  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,Init,The following statement contains a magic number: this.Columns ["Storage"].Width = 140;  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,AnalyzeItemsInBackground,The following statement contains a magic number: Task.Run (() => {  	WorkerUpdateIngestManifest.CancelAsync ();  	// let's wait a little for the previous worker to cancel if needed  	System.Threading.Thread.Sleep (2000);  	if (WorkerUpdateIngestManifest.IsBusy != true) {  		// Start the asynchronous operation.  		try {  			WorkerUpdateIngestManifest.RunWorkerAsync ();  		} catch {  		}  	}  });  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,AnalyzeItemsInBackground,The following statement contains a magic number: System.Threading.Thread.Sleep (2000);  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: while (true) {  	var manifestsupdated = _context.IngestManifests.ToList ();  	foreach (var im in _context.IngestManifests.AsEnumerable ()) {  		var img = _MyObservIngestManifest.Where (i => i.Id == im.Id).FirstOrDefault ();  		if (img != null) {  			if (im.Statistics.PendingFilesCount == 0 && img.PendingFiles != im.Statistics.PendingFilesCount) {  				// Notify if upload completed for one bulk ingest container  				myform.Notify (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestCompletedWith0ErrorS' im.Statistics.ErrorFilesCount)' string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_Container0' im.Name)' im.Statistics.ErrorFilesCount > 0);  				myform.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestOnContainer0CompletedWith1ErrorS' im.Name' im.Statistics.ErrorFilesCount)' im.Statistics.ErrorFilesCount > 0);  				myform.DoRefreshGridAssetV (false);  			}  			img.State = im.State;  			img.LastModified = im.LastModified.ToLocalTime ().ToString ("G");  			img.PendingFiles = im.Statistics.PendingFilesCount;  			img.FinishedFiles = im.Statistics.FinishedFilesCount;  			if (im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount == 0) {  				img.Progress = 101;  			} else {  				img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100;  			}  		}  	}  	System.Threading.Thread.Sleep (10000);  	// 10s  	if (worker.CancellationPending == true) {  		e.Cancel = true;  		return;  	}  }  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: while (true) {  	var manifestsupdated = _context.IngestManifests.ToList ();  	foreach (var im in _context.IngestManifests.AsEnumerable ()) {  		var img = _MyObservIngestManifest.Where (i => i.Id == im.Id).FirstOrDefault ();  		if (img != null) {  			if (im.Statistics.PendingFilesCount == 0 && img.PendingFiles != im.Statistics.PendingFilesCount) {  				// Notify if upload completed for one bulk ingest container  				myform.Notify (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestCompletedWith0ErrorS' im.Statistics.ErrorFilesCount)' string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_Container0' im.Name)' im.Statistics.ErrorFilesCount > 0);  				myform.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestOnContainer0CompletedWith1ErrorS' im.Name' im.Statistics.ErrorFilesCount)' im.Statistics.ErrorFilesCount > 0);  				myform.DoRefreshGridAssetV (false);  			}  			img.State = im.State;  			img.LastModified = im.LastModified.ToLocalTime ().ToString ("G");  			img.PendingFiles = im.Statistics.PendingFilesCount;  			img.FinishedFiles = im.Statistics.FinishedFilesCount;  			if (im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount == 0) {  				img.Progress = 101;  			} else {  				img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100;  			}  		}  	}  	System.Threading.Thread.Sleep (10000);  	// 10s  	if (worker.CancellationPending == true) {  		e.Cancel = true;  		return;  	}  }  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: while (true) {  	var manifestsupdated = _context.IngestManifests.ToList ();  	foreach (var im in _context.IngestManifests.AsEnumerable ()) {  		var img = _MyObservIngestManifest.Where (i => i.Id == im.Id).FirstOrDefault ();  		if (img != null) {  			if (im.Statistics.PendingFilesCount == 0 && img.PendingFiles != im.Statistics.PendingFilesCount) {  				// Notify if upload completed for one bulk ingest container  				myform.Notify (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestCompletedWith0ErrorS' im.Statistics.ErrorFilesCount)' string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_Container0' im.Name)' im.Statistics.ErrorFilesCount > 0);  				myform.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestOnContainer0CompletedWith1ErrorS' im.Name' im.Statistics.ErrorFilesCount)' im.Statistics.ErrorFilesCount > 0);  				myform.DoRefreshGridAssetV (false);  			}  			img.State = im.State;  			img.LastModified = im.LastModified.ToLocalTime ().ToString ("G");  			img.PendingFiles = im.Statistics.PendingFilesCount;  			img.FinishedFiles = im.Statistics.FinishedFilesCount;  			if (im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount == 0) {  				img.Progress = 101;  			} else {  				img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100;  			}  		}  	}  	System.Threading.Thread.Sleep (10000);  	// 10s  	if (worker.CancellationPending == true) {  		e.Cancel = true;  		return;  	}  }  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: foreach (var im in _context.IngestManifests.AsEnumerable ()) {  	var img = _MyObservIngestManifest.Where (i => i.Id == im.Id).FirstOrDefault ();  	if (img != null) {  		if (im.Statistics.PendingFilesCount == 0 && img.PendingFiles != im.Statistics.PendingFilesCount) {  			// Notify if upload completed for one bulk ingest container  			myform.Notify (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestCompletedWith0ErrorS' im.Statistics.ErrorFilesCount)' string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_Container0' im.Name)' im.Statistics.ErrorFilesCount > 0);  			myform.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestOnContainer0CompletedWith1ErrorS' im.Name' im.Statistics.ErrorFilesCount)' im.Statistics.ErrorFilesCount > 0);  			myform.DoRefreshGridAssetV (false);  		}  		img.State = im.State;  		img.LastModified = im.LastModified.ToLocalTime ().ToString ("G");  		img.PendingFiles = im.Statistics.PendingFilesCount;  		img.FinishedFiles = im.Statistics.FinishedFilesCount;  		if (im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount == 0) {  			img.Progress = 101;  		} else {  			img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100;  		}  	}  }  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: foreach (var im in _context.IngestManifests.AsEnumerable ()) {  	var img = _MyObservIngestManifest.Where (i => i.Id == im.Id).FirstOrDefault ();  	if (img != null) {  		if (im.Statistics.PendingFilesCount == 0 && img.PendingFiles != im.Statistics.PendingFilesCount) {  			// Notify if upload completed for one bulk ingest container  			myform.Notify (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestCompletedWith0ErrorS' im.Statistics.ErrorFilesCount)' string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_Container0' im.Name)' im.Statistics.ErrorFilesCount > 0);  			myform.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestOnContainer0CompletedWith1ErrorS' im.Name' im.Statistics.ErrorFilesCount)' im.Statistics.ErrorFilesCount > 0);  			myform.DoRefreshGridAssetV (false);  		}  		img.State = im.State;  		img.LastModified = im.LastModified.ToLocalTime ().ToString ("G");  		img.PendingFiles = im.Statistics.PendingFilesCount;  		img.FinishedFiles = im.Statistics.FinishedFilesCount;  		if (im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount == 0) {  			img.Progress = 101;  		} else {  			img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100;  		}  	}  }  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: if (img != null) {  	if (im.Statistics.PendingFilesCount == 0 && img.PendingFiles != im.Statistics.PendingFilesCount) {  		// Notify if upload completed for one bulk ingest container  		myform.Notify (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestCompletedWith0ErrorS' im.Statistics.ErrorFilesCount)' string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_Container0' im.Name)' im.Statistics.ErrorFilesCount > 0);  		myform.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestOnContainer0CompletedWith1ErrorS' im.Name' im.Statistics.ErrorFilesCount)' im.Statistics.ErrorFilesCount > 0);  		myform.DoRefreshGridAssetV (false);  	}  	img.State = im.State;  	img.LastModified = im.LastModified.ToLocalTime ().ToString ("G");  	img.PendingFiles = im.Statistics.PendingFilesCount;  	img.FinishedFiles = im.Statistics.FinishedFilesCount;  	if (im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount == 0) {  		img.Progress = 101;  	} else {  		img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100;  	}  }  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: if (img != null) {  	if (im.Statistics.PendingFilesCount == 0 && img.PendingFiles != im.Statistics.PendingFilesCount) {  		// Notify if upload completed for one bulk ingest container  		myform.Notify (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestCompletedWith0ErrorS' im.Statistics.ErrorFilesCount)' string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_Container0' im.Name)' im.Statistics.ErrorFilesCount > 0);  		myform.TextBoxLogWriteLine (string.Format (AMSExplorer.Properties.Resources.DataGridViewIngestManifest_WorkerUpdateIngestManifest_DoWork_BulkIngestOnContainer0CompletedWith1ErrorS' im.Name' im.Statistics.ErrorFilesCount)' im.Statistics.ErrorFilesCount > 0);  		myform.DoRefreshGridAssetV (false);  	}  	img.State = im.State;  	img.LastModified = im.LastModified.ToLocalTime ().ToString ("G");  	img.PendingFiles = im.Statistics.PendingFilesCount;  	img.FinishedFiles = im.Statistics.FinishedFilesCount;  	if (im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount == 0) {  		img.Progress = 101;  	} else {  		img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100;  	}  }  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: if (im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount == 0) {  	img.Progress = 101;  } else {  	img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100;  }  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: if (im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount == 0) {  	img.Progress = 101;  } else {  	img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100;  }  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: img.Progress = 101;  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: img.Progress = (float)im.Statistics.FinishedFilesCount / (float)(im.Statistics.FinishedFilesCount + im.Statistics.PendingFilesCount) * 100;  
Magic Number,AMSExplorer,DataGridViewIngestManifest,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DataGridViewIngestManifest.cs,WorkerUpdateIngestManifest_DoWork,The following statement contains a magic number: System.Threading.Thread.Sleep (10000);  
Magic Number,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The following statement contains a magic number: DGBulkManifest.ColumnCount = 2;  
Magic Number,AMSExplorer,BulkContainerInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\BulkContainerInfo.cs,BulkContainerInfo_Load,The following statement contains a magic number: DGAssetManifest.ColumnCount = 2;  
Magic Number,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVideoDuration.Maximum = new decimal (new int[] {  	100000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVideoDuration.Value = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownImageCount.Maximum = new decimal (new int[] {  	100000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsVideoThumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsVideoThumbnails.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownImageCount.Value = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAggregateInterval.Maximum = new decimal (new int[] {  	1000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAggregateInterval.Minimum = new decimal (new int[] {  	250'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAggregateInterval.Value = new decimal (new int[] {  	500'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAggregateWindow.Maximum = new decimal (new int[] {  	2000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAggregateWindow.Minimum = new decimal (new int[] {  	250'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsFaceDetection,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsFaceDetection.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAggregateWindow.Value = new decimal (new int[] {  	500'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The following statement contains a magic number: this.labelProcessorName.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,MediaAnalyticsGeneric,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-MediaAnalytics\MediaAnalyticsGeneric.cs,InitializeComponent,The following statement contains a magic number: this.labelPreview.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application ();  	if (xlApp == null) {  		MessageBox.Show ("Excel is not properly installed!!");  		return;  	}  	Excel.Workbook xlWorkBook;  	Excel.Worksheet xlWorkSheet;  	object misValue = System.Reflection.Missing.Value;  	xlWorkBook = xlApp.Workbooks.Add (misValue);  	xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item (1);  	xlWorkSheet.get_Range ("a1"' "f1").Merge (false);  	Excel.Range chartRange = xlWorkSheet.get_Range ("a1"' "f1");  	if (radioButtonAllAssets.Checked) {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	} else {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	}  	chartRange.VerticalAlignment = 3;  	chartRange.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange.Font.Size = 20;  	xlWorkSheet.get_Range ("a2"' "f2").Merge (false);  	Excel.Range chartRange2 = xlWorkSheet.get_Range ("a2"' "f2");  	chartRange2.FormulaR1C1 = string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based");  	chartRange2.VerticalAlignment = 3;  	chartRange2.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange2.Font.Size = 12;  	int row = 4;  	int index = 1;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName;  	xlWorkSheet.Cells [row' index++] = "Id";  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size;  	int backindex = index;  	_context.StreamingEndpoints.ToList ().ForEach (se => xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL);  	index = backindex + _context.StreamingEndpoints.Count ();  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime;  	if (detailed) {  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount;  	}  	Excel.Range formatRange;  	formatRange = xlWorkSheet.get_Range ("a4");  	formatRange.EntireRow.Font.Bold = true;  	formatRange.EntireRow.Interior.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.LightBlue);  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				row++;  				currentBatch++;  				ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  				backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerExcel.CancellationPending) {  					xlApp.DisplayAlerts = false;  					xlWorkBook.Close ();  					xlApp.Quit ();  					releaseObject (xlWorkSheet);  					releaseObject (xlWorkBook);  					releaseObject (xlApp);  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible asets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			row++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	// Set the range to fill.  	var aRange = xlWorkSheet.get_Range ("A4"' "Z100");  	aRange.EntireColumn.AutoFit ();  	try {  		xlWorkBook.SaveAs (filename' Excel.XlFileFormat.xlWorkbookDefault' misValue' misValue' misValue' misValue' Excel.XlSaveAsAccessMode.xlExclusive' misValue' misValue' misValue' misValue' misValue);  		xlWorkBook.Close (true' misValue' misValue);  		xlApp.Quit ();  		releaseObject (xlWorkSheet);  		releaseObject (xlWorkBook);  		releaseObject (xlApp);  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application ();  	if (xlApp == null) {  		MessageBox.Show ("Excel is not properly installed!!");  		return;  	}  	Excel.Workbook xlWorkBook;  	Excel.Worksheet xlWorkSheet;  	object misValue = System.Reflection.Missing.Value;  	xlWorkBook = xlApp.Workbooks.Add (misValue);  	xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item (1);  	xlWorkSheet.get_Range ("a1"' "f1").Merge (false);  	Excel.Range chartRange = xlWorkSheet.get_Range ("a1"' "f1");  	if (radioButtonAllAssets.Checked) {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	} else {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	}  	chartRange.VerticalAlignment = 3;  	chartRange.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange.Font.Size = 20;  	xlWorkSheet.get_Range ("a2"' "f2").Merge (false);  	Excel.Range chartRange2 = xlWorkSheet.get_Range ("a2"' "f2");  	chartRange2.FormulaR1C1 = string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based");  	chartRange2.VerticalAlignment = 3;  	chartRange2.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange2.Font.Size = 12;  	int row = 4;  	int index = 1;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName;  	xlWorkSheet.Cells [row' index++] = "Id";  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size;  	int backindex = index;  	_context.StreamingEndpoints.ToList ().ForEach (se => xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL);  	index = backindex + _context.StreamingEndpoints.Count ();  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime;  	if (detailed) {  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount;  	}  	Excel.Range formatRange;  	formatRange = xlWorkSheet.get_Range ("a4");  	formatRange.EntireRow.Font.Bold = true;  	formatRange.EntireRow.Interior.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.LightBlue);  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				row++;  				currentBatch++;  				ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  				backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerExcel.CancellationPending) {  					xlApp.DisplayAlerts = false;  					xlWorkBook.Close ();  					xlApp.Quit ();  					releaseObject (xlWorkSheet);  					releaseObject (xlWorkBook);  					releaseObject (xlApp);  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible asets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			row++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	// Set the range to fill.  	var aRange = xlWorkSheet.get_Range ("A4"' "Z100");  	aRange.EntireColumn.AutoFit ();  	try {  		xlWorkBook.SaveAs (filename' Excel.XlFileFormat.xlWorkbookDefault' misValue' misValue' misValue' misValue' Excel.XlSaveAsAccessMode.xlExclusive' misValue' misValue' misValue' misValue' misValue);  		xlWorkBook.Close (true' misValue' misValue);  		xlApp.Quit ();  		releaseObject (xlWorkSheet);  		releaseObject (xlWorkBook);  		releaseObject (xlApp);  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application ();  	if (xlApp == null) {  		MessageBox.Show ("Excel is not properly installed!!");  		return;  	}  	Excel.Workbook xlWorkBook;  	Excel.Worksheet xlWorkSheet;  	object misValue = System.Reflection.Missing.Value;  	xlWorkBook = xlApp.Workbooks.Add (misValue);  	xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item (1);  	xlWorkSheet.get_Range ("a1"' "f1").Merge (false);  	Excel.Range chartRange = xlWorkSheet.get_Range ("a1"' "f1");  	if (radioButtonAllAssets.Checked) {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	} else {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	}  	chartRange.VerticalAlignment = 3;  	chartRange.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange.Font.Size = 20;  	xlWorkSheet.get_Range ("a2"' "f2").Merge (false);  	Excel.Range chartRange2 = xlWorkSheet.get_Range ("a2"' "f2");  	chartRange2.FormulaR1C1 = string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based");  	chartRange2.VerticalAlignment = 3;  	chartRange2.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange2.Font.Size = 12;  	int row = 4;  	int index = 1;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName;  	xlWorkSheet.Cells [row' index++] = "Id";  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size;  	int backindex = index;  	_context.StreamingEndpoints.ToList ().ForEach (se => xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL);  	index = backindex + _context.StreamingEndpoints.Count ();  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime;  	if (detailed) {  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount;  	}  	Excel.Range formatRange;  	formatRange = xlWorkSheet.get_Range ("a4");  	formatRange.EntireRow.Font.Bold = true;  	formatRange.EntireRow.Interior.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.LightBlue);  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				row++;  				currentBatch++;  				ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  				backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerExcel.CancellationPending) {  					xlApp.DisplayAlerts = false;  					xlWorkBook.Close ();  					xlApp.Quit ();  					releaseObject (xlWorkSheet);  					releaseObject (xlWorkBook);  					releaseObject (xlApp);  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible asets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			row++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	// Set the range to fill.  	var aRange = xlWorkSheet.get_Range ("A4"' "Z100");  	aRange.EntireColumn.AutoFit ();  	try {  		xlWorkBook.SaveAs (filename' Excel.XlFileFormat.xlWorkbookDefault' misValue' misValue' misValue' misValue' Excel.XlSaveAsAccessMode.xlExclusive' misValue' misValue' misValue' misValue' misValue);  		xlWorkBook.Close (true' misValue' misValue);  		xlApp.Quit ();  		releaseObject (xlWorkSheet);  		releaseObject (xlWorkBook);  		releaseObject (xlApp);  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application ();  	if (xlApp == null) {  		MessageBox.Show ("Excel is not properly installed!!");  		return;  	}  	Excel.Workbook xlWorkBook;  	Excel.Worksheet xlWorkSheet;  	object misValue = System.Reflection.Missing.Value;  	xlWorkBook = xlApp.Workbooks.Add (misValue);  	xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item (1);  	xlWorkSheet.get_Range ("a1"' "f1").Merge (false);  	Excel.Range chartRange = xlWorkSheet.get_Range ("a1"' "f1");  	if (radioButtonAllAssets.Checked) {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	} else {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	}  	chartRange.VerticalAlignment = 3;  	chartRange.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange.Font.Size = 20;  	xlWorkSheet.get_Range ("a2"' "f2").Merge (false);  	Excel.Range chartRange2 = xlWorkSheet.get_Range ("a2"' "f2");  	chartRange2.FormulaR1C1 = string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based");  	chartRange2.VerticalAlignment = 3;  	chartRange2.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange2.Font.Size = 12;  	int row = 4;  	int index = 1;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName;  	xlWorkSheet.Cells [row' index++] = "Id";  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size;  	int backindex = index;  	_context.StreamingEndpoints.ToList ().ForEach (se => xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL);  	index = backindex + _context.StreamingEndpoints.Count ();  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime;  	if (detailed) {  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount;  	}  	Excel.Range formatRange;  	formatRange = xlWorkSheet.get_Range ("a4");  	formatRange.EntireRow.Font.Bold = true;  	formatRange.EntireRow.Interior.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.LightBlue);  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				row++;  				currentBatch++;  				ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  				backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerExcel.CancellationPending) {  					xlApp.DisplayAlerts = false;  					xlWorkBook.Close ();  					xlApp.Quit ();  					releaseObject (xlWorkSheet);  					releaseObject (xlWorkBook);  					releaseObject (xlApp);  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible asets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			row++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	// Set the range to fill.  	var aRange = xlWorkSheet.get_Range ("A4"' "Z100");  	aRange.EntireColumn.AutoFit ();  	try {  		xlWorkBook.SaveAs (filename' Excel.XlFileFormat.xlWorkbookDefault' misValue' misValue' misValue' misValue' Excel.XlSaveAsAccessMode.xlExclusive' misValue' misValue' misValue' misValue' misValue);  		xlWorkBook.Close (true' misValue' misValue);  		xlApp.Quit ();  		releaseObject (xlWorkSheet);  		releaseObject (xlWorkBook);  		releaseObject (xlApp);  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application ();  	if (xlApp == null) {  		MessageBox.Show ("Excel is not properly installed!!");  		return;  	}  	Excel.Workbook xlWorkBook;  	Excel.Worksheet xlWorkSheet;  	object misValue = System.Reflection.Missing.Value;  	xlWorkBook = xlApp.Workbooks.Add (misValue);  	xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item (1);  	xlWorkSheet.get_Range ("a1"' "f1").Merge (false);  	Excel.Range chartRange = xlWorkSheet.get_Range ("a1"' "f1");  	if (radioButtonAllAssets.Checked) {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	} else {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	}  	chartRange.VerticalAlignment = 3;  	chartRange.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange.Font.Size = 20;  	xlWorkSheet.get_Range ("a2"' "f2").Merge (false);  	Excel.Range chartRange2 = xlWorkSheet.get_Range ("a2"' "f2");  	chartRange2.FormulaR1C1 = string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based");  	chartRange2.VerticalAlignment = 3;  	chartRange2.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange2.Font.Size = 12;  	int row = 4;  	int index = 1;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName;  	xlWorkSheet.Cells [row' index++] = "Id";  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size;  	int backindex = index;  	_context.StreamingEndpoints.ToList ().ForEach (se => xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL);  	index = backindex + _context.StreamingEndpoints.Count ();  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime;  	if (detailed) {  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount;  	}  	Excel.Range formatRange;  	formatRange = xlWorkSheet.get_Range ("a4");  	formatRange.EntireRow.Font.Bold = true;  	formatRange.EntireRow.Interior.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.LightBlue);  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				row++;  				currentBatch++;  				ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  				backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerExcel.CancellationPending) {  					xlApp.DisplayAlerts = false;  					xlWorkBook.Close ();  					xlApp.Quit ();  					releaseObject (xlWorkSheet);  					releaseObject (xlWorkBook);  					releaseObject (xlApp);  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible asets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			row++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	// Set the range to fill.  	var aRange = xlWorkSheet.get_Range ("A4"' "Z100");  	aRange.EntireColumn.AutoFit ();  	try {  		xlWorkBook.SaveAs (filename' Excel.XlFileFormat.xlWorkbookDefault' misValue' misValue' misValue' misValue' Excel.XlSaveAsAccessMode.xlExclusive' misValue' misValue' misValue' misValue' misValue);  		xlWorkBook.Close (true' misValue' misValue);  		xlApp.Quit ();  		releaseObject (xlWorkSheet);  		releaseObject (xlWorkBook);  		releaseObject (xlApp);  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application ();  	if (xlApp == null) {  		MessageBox.Show ("Excel is not properly installed!!");  		return;  	}  	Excel.Workbook xlWorkBook;  	Excel.Worksheet xlWorkSheet;  	object misValue = System.Reflection.Missing.Value;  	xlWorkBook = xlApp.Workbooks.Add (misValue);  	xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item (1);  	xlWorkSheet.get_Range ("a1"' "f1").Merge (false);  	Excel.Range chartRange = xlWorkSheet.get_Range ("a1"' "f1");  	if (radioButtonAllAssets.Checked) {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	} else {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	}  	chartRange.VerticalAlignment = 3;  	chartRange.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange.Font.Size = 20;  	xlWorkSheet.get_Range ("a2"' "f2").Merge (false);  	Excel.Range chartRange2 = xlWorkSheet.get_Range ("a2"' "f2");  	chartRange2.FormulaR1C1 = string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based");  	chartRange2.VerticalAlignment = 3;  	chartRange2.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange2.Font.Size = 12;  	int row = 4;  	int index = 1;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName;  	xlWorkSheet.Cells [row' index++] = "Id";  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size;  	int backindex = index;  	_context.StreamingEndpoints.ToList ().ForEach (se => xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL);  	index = backindex + _context.StreamingEndpoints.Count ();  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime;  	if (detailed) {  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount;  	}  	Excel.Range formatRange;  	formatRange = xlWorkSheet.get_Range ("a4");  	formatRange.EntireRow.Font.Bold = true;  	formatRange.EntireRow.Interior.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.LightBlue);  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				row++;  				currentBatch++;  				ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  				backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerExcel.CancellationPending) {  					xlApp.DisplayAlerts = false;  					xlWorkBook.Close ();  					xlApp.Quit ();  					releaseObject (xlWorkSheet);  					releaseObject (xlWorkBook);  					releaseObject (xlApp);  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible asets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			row++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	// Set the range to fill.  	var aRange = xlWorkSheet.get_Range ("A4"' "Z100");  	aRange.EntireColumn.AutoFit ();  	try {  		xlWorkBook.SaveAs (filename' Excel.XlFileFormat.xlWorkbookDefault' misValue' misValue' misValue' misValue' Excel.XlSaveAsAccessMode.xlExclusive' misValue' misValue' misValue' misValue' misValue);  		xlWorkBook.Close (true' misValue' misValue);  		xlApp.Quit ();  		releaseObject (xlWorkSheet);  		releaseObject (xlWorkBook);  		releaseObject (xlApp);  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application ();  	if (xlApp == null) {  		MessageBox.Show ("Excel is not properly installed!!");  		return;  	}  	Excel.Workbook xlWorkBook;  	Excel.Worksheet xlWorkSheet;  	object misValue = System.Reflection.Missing.Value;  	xlWorkBook = xlApp.Workbooks.Add (misValue);  	xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item (1);  	xlWorkSheet.get_Range ("a1"' "f1").Merge (false);  	Excel.Range chartRange = xlWorkSheet.get_Range ("a1"' "f1");  	if (radioButtonAllAssets.Checked) {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	} else {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	}  	chartRange.VerticalAlignment = 3;  	chartRange.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange.Font.Size = 20;  	xlWorkSheet.get_Range ("a2"' "f2").Merge (false);  	Excel.Range chartRange2 = xlWorkSheet.get_Range ("a2"' "f2");  	chartRange2.FormulaR1C1 = string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based");  	chartRange2.VerticalAlignment = 3;  	chartRange2.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange2.Font.Size = 12;  	int row = 4;  	int index = 1;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName;  	xlWorkSheet.Cells [row' index++] = "Id";  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size;  	int backindex = index;  	_context.StreamingEndpoints.ToList ().ForEach (se => xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL);  	index = backindex + _context.StreamingEndpoints.Count ();  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime;  	if (detailed) {  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount;  	}  	Excel.Range formatRange;  	formatRange = xlWorkSheet.get_Range ("a4");  	formatRange.EntireRow.Font.Bold = true;  	formatRange.EntireRow.Interior.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.LightBlue);  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				row++;  				currentBatch++;  				ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  				backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerExcel.CancellationPending) {  					xlApp.DisplayAlerts = false;  					xlWorkBook.Close ();  					xlApp.Quit ();  					releaseObject (xlWorkSheet);  					releaseObject (xlWorkBook);  					releaseObject (xlApp);  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible asets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			row++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	// Set the range to fill.  	var aRange = xlWorkSheet.get_Range ("A4"' "Z100");  	aRange.EntireColumn.AutoFit ();  	try {  		xlWorkBook.SaveAs (filename' Excel.XlFileFormat.xlWorkbookDefault' misValue' misValue' misValue' misValue' Excel.XlSaveAsAccessMode.xlExclusive' misValue' misValue' misValue' misValue' misValue);  		xlWorkBook.Close (true' misValue' misValue);  		xlApp.Quit ();  		releaseObject (xlWorkSheet);  		releaseObject (xlWorkBook);  		releaseObject (xlApp);  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application ();  	if (xlApp == null) {  		MessageBox.Show ("Excel is not properly installed!!");  		return;  	}  	Excel.Workbook xlWorkBook;  	Excel.Worksheet xlWorkSheet;  	object misValue = System.Reflection.Missing.Value;  	xlWorkBook = xlApp.Workbooks.Add (misValue);  	xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item (1);  	xlWorkSheet.get_Range ("a1"' "f1").Merge (false);  	Excel.Range chartRange = xlWorkSheet.get_Range ("a1"' "f1");  	if (radioButtonAllAssets.Checked) {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	} else {  		chartRange.FormulaR1C1 = string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId);  	}  	chartRange.VerticalAlignment = 3;  	chartRange.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange.Font.Size = 20;  	xlWorkSheet.get_Range ("a2"' "f2").Merge (false);  	Excel.Range chartRange2 = xlWorkSheet.get_Range ("a2"' "f2");  	chartRange2.FormulaR1C1 = string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based");  	chartRange2.VerticalAlignment = 3;  	chartRange2.Font.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.DarkBlue);  	chartRange2.Font.Size = 12;  	int row = 4;  	int index = 1;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName;  	xlWorkSheet.Cells [row' index++] = "Id";  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size;  	int backindex = index;  	_context.StreamingEndpoints.ToList ().ForEach (se => xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL);  	index = backindex + _context.StreamingEndpoints.Count ();  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL;  	xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime;  	if (detailed) {  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption;  		xlWorkSheet.Cells [row' index++] = AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount;  	}  	Excel.Range formatRange;  	formatRange = xlWorkSheet.get_Range ("a4");  	formatRange.EntireRow.Font.Bold = true;  	formatRange.EntireRow.Interior.Color = System.Drawing.ColorTranslator.ToOle (System.Drawing.Color.LightBlue);  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				row++;  				currentBatch++;  				ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  				backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerExcel.CancellationPending) {  					xlApp.DisplayAlerts = false;  					xlWorkBook.Close ();  					xlApp.Quit ();  					releaseObject (xlWorkSheet);  					releaseObject (xlWorkBook);  					releaseObject (xlApp);  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible asets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			row++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	// Set the range to fill.  	var aRange = xlWorkSheet.get_Range ("A4"' "Z100");  	aRange.EntireColumn.AutoFit ();  	try {  		xlWorkBook.SaveAs (filename' Excel.XlFileFormat.xlWorkbookDefault' misValue' misValue' misValue' misValue' Excel.XlSaveAsAccessMode.xlExclusive' misValue' misValue' misValue' misValue' misValue);  		xlWorkBook.Close (true' misValue' misValue);  		xlApp.Quit ();  		releaseObject (xlWorkSheet);  		releaseObject (xlWorkBook);  		releaseObject (xlApp);  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: chartRange.VerticalAlignment = 3;  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: chartRange.Font.Size = 20;  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: chartRange2.VerticalAlignment = 3;  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: chartRange2.Font.Size = 12;  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: if (radioButtonAllAssets.Checked) {  	int skipSize = 0;  	int batchSize = 1000;  	int currentBatch = 0;  	int total = _context.Assets.Count ();  	int index2 = 1;  	while (true) {  		IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  		foreach (IAsset asset in _assetsCollectionQuery) {  			row++;  			currentBatch++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index2++;  		}  		if (currentBatch == batchSize) {  			skipSize += batchSize;  			currentBatch = 0;  		} else {  			break;  		}  	}  } else// Selected or visible asets   {  	IEnumerable<IAsset> myassets;  	if (radioButtonSelectedAssets.Checked) {  		myassets = _selassets;  	} else {  		myassets = _visibleassets;  	}  	int total = myassets.Count ();  	int index3 = 1;  	foreach (IAsset asset in myassets) {  		row++;  		ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  		backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  		//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    		//if cancellation is pending' cancel work.    		if (backgroundWorkerExcel.CancellationPending) {  			xlApp.DisplayAlerts = false;  			xlWorkBook.Close ();  			xlApp.Quit ();  			releaseObject (xlWorkSheet);  			releaseObject (xlWorkBook);  			releaseObject (xlApp);  			e.Cancel = true;  			return;  		}  		index3++;  	}  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: if (radioButtonAllAssets.Checked) {  	int skipSize = 0;  	int batchSize = 1000;  	int currentBatch = 0;  	int total = _context.Assets.Count ();  	int index2 = 1;  	while (true) {  		IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  		foreach (IAsset asset in _assetsCollectionQuery) {  			row++;  			currentBatch++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index2++;  		}  		if (currentBatch == batchSize) {  			skipSize += batchSize;  			currentBatch = 0;  		} else {  			break;  		}  	}  } else// Selected or visible asets   {  	IEnumerable<IAsset> myassets;  	if (radioButtonSelectedAssets.Checked) {  		myassets = _selassets;  	} else {  		myassets = _visibleassets;  	}  	int total = myassets.Count ();  	int index3 = 1;  	foreach (IAsset asset in myassets) {  		row++;  		ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  		backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  		//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    		//if cancellation is pending' cancel work.    		if (backgroundWorkerExcel.CancellationPending) {  			xlApp.DisplayAlerts = false;  			xlWorkBook.Close ();  			xlApp.Quit ();  			releaseObject (xlWorkSheet);  			releaseObject (xlWorkBook);  			releaseObject (xlApp);  			e.Cancel = true;  			return;  		}  		index3++;  	}  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: if (radioButtonAllAssets.Checked) {  	int skipSize = 0;  	int batchSize = 1000;  	int currentBatch = 0;  	int total = _context.Assets.Count ();  	int index2 = 1;  	while (true) {  		IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  		foreach (IAsset asset in _assetsCollectionQuery) {  			row++;  			currentBatch++;  			ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  			backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerExcel.CancellationPending) {  				xlApp.DisplayAlerts = false;  				xlWorkBook.Close ();  				xlApp.Quit ();  				releaseObject (xlWorkSheet);  				releaseObject (xlWorkBook);  				releaseObject (xlApp);  				e.Cancel = true;  				return;  			}  			index2++;  		}  		if (currentBatch == batchSize) {  			skipSize += batchSize;  			currentBatch = 0;  		} else {  			break;  		}  	}  } else// Selected or visible asets   {  	IEnumerable<IAsset> myassets;  	if (radioButtonSelectedAssets.Checked) {  		myassets = _selassets;  	} else {  		myassets = _visibleassets;  	}  	int total = myassets.Count ();  	int index3 = 1;  	foreach (IAsset asset in myassets) {  		row++;  		ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  		backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  		//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    		//if cancellation is pending' cancel work.    		if (backgroundWorkerExcel.CancellationPending) {  			xlApp.DisplayAlerts = false;  			xlWorkBook.Close ();  			xlApp.Quit ();  			releaseObject (xlWorkSheet);  			releaseObject (xlWorkBook);  			releaseObject (xlApp);  			e.Cancel = true;  			return;  		}  		index3++;  	}  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: while (true) {  	IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  	foreach (IAsset asset in _assetsCollectionQuery) {  		row++;  		currentBatch++;  		ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  		backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  		//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    		//if cancellation is pending' cancel work.    		if (backgroundWorkerExcel.CancellationPending) {  			xlApp.DisplayAlerts = false;  			xlWorkBook.Close ();  			xlApp.Quit ();  			releaseObject (xlWorkSheet);  			releaseObject (xlWorkBook);  			releaseObject (xlApp);  			e.Cancel = true;  			return;  		}  		index2++;  	}  	if (currentBatch == batchSize) {  		skipSize += batchSize;  		currentBatch = 0;  	} else {  		break;  	}  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: foreach (IAsset asset in _assetsCollectionQuery) {  	row++;  	currentBatch++;  	ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  	backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  	//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    	//if cancellation is pending' cancel work.    	if (backgroundWorkerExcel.CancellationPending) {  		xlApp.DisplayAlerts = false;  		xlWorkBook.Close ();  		xlApp.Quit ();  		releaseObject (xlWorkSheet);  		releaseObject (xlWorkBook);  		releaseObject (xlApp);  		e.Cancel = true;  		return;  	}  	index2++;  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: backgroundWorkerExcel.ReportProgress (100 * index2 / total' DateTime.Now);  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: foreach (IAsset asset in myassets) {  	row++;  	ExportAssetExcel (asset' xlWorkSheet' row' detailed' checkBoxLocalTime.Checked);  	backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  	//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    	//if cancellation is pending' cancel work.    	if (backgroundWorkerExcel.CancellationPending) {  		xlApp.DisplayAlerts = false;  		xlWorkBook.Close ();  		xlApp.Quit ();  		releaseObject (xlWorkSheet);  		releaseObject (xlWorkBook);  		releaseObject (xlApp);  		e.Cancel = true;  		return;  	}  	index3++;  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerExcel_DoWork,The following statement contains a magic number: backgroundWorkerExcel.ReportProgress (100 * index3 / total' DateTime.Now);  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	var csv = new StringBuilder ();  	if (radioButtonAllAssets.Checked) {  		csv.AppendLine (checkStringForCSV (string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId)));  	} else {  		csv.AppendLine (checkStringForCSV (string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId)));  	}  	csv.AppendLine (checkStringForCSV (string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based")));  	List<string> linec = new List<string> ();  	linec.Add (AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName);  	linec.Add ("Id");  	linec.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified);  	linec.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type);  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size);  	_context.StreamingEndpoints.ToList ().ForEach (se => linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL));  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime);  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL);  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime);  	if (detailed) {  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount);  		linec.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount);  	}  	csv.AppendLine (convertCSVLine (linec));  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				currentBatch++;  				csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  				backgroundWorkerCSV.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerCSV.CancellationPending) {  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible assets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  			backgroundWorkerCSV.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerCSV.CancellationPending) {  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	try {  		File.WriteAllText (filename' csv.ToString ());  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	var csv = new StringBuilder ();  	if (radioButtonAllAssets.Checked) {  		csv.AppendLine (checkStringForCSV (string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId)));  	} else {  		csv.AppendLine (checkStringForCSV (string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId)));  	}  	csv.AppendLine (checkStringForCSV (string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based")));  	List<string> linec = new List<string> ();  	linec.Add (AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName);  	linec.Add ("Id");  	linec.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified);  	linec.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type);  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size);  	_context.StreamingEndpoints.ToList ().ForEach (se => linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL));  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime);  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL);  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime);  	if (detailed) {  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount);  		linec.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount);  	}  	csv.AppendLine (convertCSVLine (linec));  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				currentBatch++;  				csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  				backgroundWorkerCSV.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerCSV.CancellationPending) {  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible assets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  			backgroundWorkerCSV.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerCSV.CancellationPending) {  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	try {  		File.WriteAllText (filename' csv.ToString ());  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: try {  	bool detailed = radioButtonDetailledMode.Checked;  	var csv = new StringBuilder ();  	if (radioButtonAllAssets.Checked) {  		csv.AppendLine (checkStringForCSV (string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AllAssetsInformationMediaAccount0' _context.Credentials.ClientId)));  	} else {  		csv.AppendLine (checkStringForCSV (string.Format (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SelectedAssetsInformationMediaAccount0' _context.Credentials.ClientId)));  	}  	csv.AppendLine (checkStringForCSV (string.Format ("Exported with Azure Media Services Explorer v{0} on {1}. Dates are {2}."' Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()' checkBoxLocalTime.Checked ? DateTime.Now.ToString () : DateTime.UtcNow.ToString ()' checkBoxLocalTime.Checked ? "local" : "UTC based")));  	List<string> linec = new List<string> ();  	linec.Add (AMSExplorer.Properties.Resources.BulkContainerInfo_DoDisplayAssetManifest_AssetName);  	linec.Add ("Id");  	linec.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified);  	linec.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Type);  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Size);  	_context.StreamingEndpoints.ToList ().ForEach (se => linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingURL));  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingExpirationTime);  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASURL);  	linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASExpirationTime);  	if (detailed) {  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AlternateId);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StorageAccount);  		linec.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_StorageUrl);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingLocatorsCount);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMinExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_StreamingMaxExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASLocatorsCount);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMinExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_SASMaxExpirationTime);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_DynamicEncryption);  		linec.Add (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_AssetFiltersCount);  	}  	csv.AppendLine (convertCSVLine (linec));  	if (radioButtonAllAssets.Checked) {  		int skipSize = 0;  		int batchSize = 1000;  		int currentBatch = 0;  		int total = _context.Assets.Count ();  		int index2 = 1;  		while (true) {  			IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  			foreach (IAsset asset in _assetsCollectionQuery) {  				currentBatch++;  				csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  				backgroundWorkerCSV.ReportProgress (100 * index2 / total' DateTime.Now);  				//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    				//if cancellation is pending' cancel work.    				if (backgroundWorkerCSV.CancellationPending) {  					e.Cancel = true;  					return;  				}  				index2++;  			}  			if (currentBatch == batchSize) {  				skipSize += batchSize;  				currentBatch = 0;  			} else {  				break;  			}  		}  	} else// Selected or visible assets  	 {  		IEnumerable<IAsset> myassets;  		if (radioButtonSelectedAssets.Checked) {  			myassets = _selassets;  		} else {  			myassets = _visibleassets;  		}  		int total = myassets.Count ();  		int index3 = 1;  		foreach (IAsset asset in myassets) {  			csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  			backgroundWorkerCSV.ReportProgress (100 * index3 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerCSV.CancellationPending) {  				e.Cancel = true;  				return;  			}  			index3++;  		}  	}  	try {  		File.WriteAllText (filename' csv.ToString ());  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_ErrorWhenSavingTheExcelFile' AMSExplorer.Properties.Resources.AMSLogin_buttonExport_Click_Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	if (checkBoxOpenFileAfterExport.Checked)  		System.Diagnostics.Process.Start (filename);  } catch (Exception ex) {  	MessageBox.Show (AMSExplorer.Properties.Resources.ExportToExcel_backgroundWorker1_DoWork_Error + ex.Message);  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: if (radioButtonAllAssets.Checked) {  	int skipSize = 0;  	int batchSize = 1000;  	int currentBatch = 0;  	int total = _context.Assets.Count ();  	int index2 = 1;  	while (true) {  		IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  		foreach (IAsset asset in _assetsCollectionQuery) {  			currentBatch++;  			csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  			backgroundWorkerCSV.ReportProgress (100 * index2 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerCSV.CancellationPending) {  				e.Cancel = true;  				return;  			}  			index2++;  		}  		if (currentBatch == batchSize) {  			skipSize += batchSize;  			currentBatch = 0;  		} else {  			break;  		}  	}  } else// Selected or visible assets   {  	IEnumerable<IAsset> myassets;  	if (radioButtonSelectedAssets.Checked) {  		myassets = _selassets;  	} else {  		myassets = _visibleassets;  	}  	int total = myassets.Count ();  	int index3 = 1;  	foreach (IAsset asset in myassets) {  		csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  		backgroundWorkerCSV.ReportProgress (100 * index3 / total' DateTime.Now);  		//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    		//if cancellation is pending' cancel work.    		if (backgroundWorkerCSV.CancellationPending) {  			e.Cancel = true;  			return;  		}  		index3++;  	}  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: if (radioButtonAllAssets.Checked) {  	int skipSize = 0;  	int batchSize = 1000;  	int currentBatch = 0;  	int total = _context.Assets.Count ();  	int index2 = 1;  	while (true) {  		IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  		foreach (IAsset asset in _assetsCollectionQuery) {  			currentBatch++;  			csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  			backgroundWorkerCSV.ReportProgress (100 * index2 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerCSV.CancellationPending) {  				e.Cancel = true;  				return;  			}  			index2++;  		}  		if (currentBatch == batchSize) {  			skipSize += batchSize;  			currentBatch = 0;  		} else {  			break;  		}  	}  } else// Selected or visible assets   {  	IEnumerable<IAsset> myassets;  	if (radioButtonSelectedAssets.Checked) {  		myassets = _selassets;  	} else {  		myassets = _visibleassets;  	}  	int total = myassets.Count ();  	int index3 = 1;  	foreach (IAsset asset in myassets) {  		csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  		backgroundWorkerCSV.ReportProgress (100 * index3 / total' DateTime.Now);  		//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    		//if cancellation is pending' cancel work.    		if (backgroundWorkerCSV.CancellationPending) {  			e.Cancel = true;  			return;  		}  		index3++;  	}  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: if (radioButtonAllAssets.Checked) {  	int skipSize = 0;  	int batchSize = 1000;  	int currentBatch = 0;  	int total = _context.Assets.Count ();  	int index2 = 1;  	while (true) {  		IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  		foreach (IAsset asset in _assetsCollectionQuery) {  			currentBatch++;  			csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  			backgroundWorkerCSV.ReportProgress (100 * index2 / total' DateTime.Now);  			//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    			//if cancellation is pending' cancel work.    			if (backgroundWorkerCSV.CancellationPending) {  				e.Cancel = true;  				return;  			}  			index2++;  		}  		if (currentBatch == batchSize) {  			skipSize += batchSize;  			currentBatch = 0;  		} else {  			break;  		}  	}  } else// Selected or visible assets   {  	IEnumerable<IAsset> myassets;  	if (radioButtonSelectedAssets.Checked) {  		myassets = _selassets;  	} else {  		myassets = _visibleassets;  	}  	int total = myassets.Count ();  	int index3 = 1;  	foreach (IAsset asset in myassets) {  		csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  		backgroundWorkerCSV.ReportProgress (100 * index3 / total' DateTime.Now);  		//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    		//if cancellation is pending' cancel work.    		if (backgroundWorkerCSV.CancellationPending) {  			e.Cancel = true;  			return;  		}  		index3++;  	}  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: while (true) {  	IQueryable _assetsCollectionQuery = _context.Assets.Skip (skipSize).Take (batchSize);  	foreach (IAsset asset in _assetsCollectionQuery) {  		currentBatch++;  		csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  		backgroundWorkerCSV.ReportProgress (100 * index2 / total' DateTime.Now);  		//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    		//if cancellation is pending' cancel work.    		if (backgroundWorkerCSV.CancellationPending) {  			e.Cancel = true;  			return;  		}  		index2++;  	}  	if (currentBatch == batchSize) {  		skipSize += batchSize;  		currentBatch = 0;  	} else {  		break;  	}  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: foreach (IAsset asset in _assetsCollectionQuery) {  	currentBatch++;  	csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  	backgroundWorkerCSV.ReportProgress (100 * index2 / total' DateTime.Now);  	//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    	//if cancellation is pending' cancel work.    	if (backgroundWorkerCSV.CancellationPending) {  		e.Cancel = true;  		return;  	}  	index2++;  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: backgroundWorkerCSV.ReportProgress (100 * index2 / total' DateTime.Now);  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: foreach (IAsset asset in myassets) {  	csv.AppendLine (ExportAssetCSVLine (asset' detailed' checkBoxLocalTime.Checked));  	backgroundWorkerCSV.ReportProgress (100 * index3 / total' DateTime.Now);  	//notify progress to main thread. We also pass time information in UserState to cover this property in the example.    	//if cancellation is pending' cancel work.    	if (backgroundWorkerCSV.CancellationPending) {  		e.Cancel = true;  		return;  	}  	index3++;  }  
Magic Number,AMSExplorer,ExportToExcel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ExportToExcel.cs,backgroundWorkerCSV_DoWork,The following statement contains a magic number: backgroundWorkerCSV.ReportProgress (100 * index3 / total' DateTime.Now);  
Magic Number,AMSExplorer,CreateTestToken,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateTestToken.cs,listViewAutOptions_SelectedIndexChanged,The following statement contains a magic number: if (listViewAutOptions.SelectedIndices.Count > 0) {  	var it = listViewAutOptions.SelectedItems [0];  	string stringoptionid = it.SubItems [2].Text;  	SelectedOption = mycontext.ContentKeyAuthorizationPolicyOptions.Where (p => p.Id == stringoptionid).FirstOrDefault ();  	KeyFromSelectedOption = ContentKeyDisplayed [listViewAutOptions.SelectedItems [0].Index];  	string tokenTemplateString = SelectedOption.Restrictions.FirstOrDefault ().Requirements;  	if (!string.IsNullOrEmpty (tokenTemplateString)) {  		TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (tokenTemplateString);  		textBoxAudience.Text = tokenTemplate.Audience.ToString ();  		textBoxIssuer.Text = tokenTemplate.Issuer.ToString ();  		checkBoxAddContentKeyIdentifierClaim.Checked = false;  		groupBoxStartDate.Enabled = (tokenTemplate.TokenType == TokenType.JWT);  		if (tokenTemplate.PrimaryVerificationKey != null) {  			panelJWTX509Cert.Enabled = !(tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  		} else {  			NoVerifKey = true;  			// Case for OpenId for example. No way to create a test token....  		}  		TokenClaimsList.Clear ();  		foreach (var claim in tokenTemplate.RequiredClaims) {  			if (claim.ClaimType == TokenClaim.ContentKeyIdentifierClaimType) {  				checkBoxAddContentKeyIdentifierClaim.Checked = true;  			} else {  				TokenClaimsList.Add (new MyTokenClaim () {  					Type = claim.ClaimType'  					Value = claim.ClaimValue  				});  			}  		}  	}  	UpdateButtonOk (NoVerifKey);  }  
Magic Number,AMSExplorer,CreateTestToken,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateTestToken.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerEndTime.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,CreateTestToken,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateTestToken.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerEndDate.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,CreateTestToken,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateTestToken.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerStartTime.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,EditorXMLJSON,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EditorXMLJSON.cs,InitializeComponent,The following statement contains a magic number: this.labelInfoText.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));  
Magic Number,AMSExplorer,EditorXMLJSON,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EditorXMLJSON.cs,InitializeComponent,The following statement contains a magic number: this.labelInfoText.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));  
Magic Number,AMSExplorer,EditorXMLJSON,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EditorXMLJSON.cs,InitializeComponent,The following statement contains a magic number: this.labelInfoText.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));  
Magic Number,AMSExplorer,StorageSettings,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StorageSettings.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownRetention.Maximum = new decimal (new int[] {  	365'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,StorageSettings,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StorageSettings.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownRetention.Value = new decimal (new int[] {  	5'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,Subclipping,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Subclipping.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: timeControlDVR.Max = TimeSpan.FromHours (24);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay == null && _parentAsset == null) {  	newfilter = true;  	isGlobalFilter = true;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filter_presentationtimerange.Timescale;  	textBoxFilterTimeScale.Text = (_filter_presentationtimerange.Timescale == null) ? "(default)" : _filter_presentationtimerange.Timescale.ToString ();  } /////////////////////////////////////////////  // Existing Global Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset == null) {  	newfilter = false;  	isGlobalFilter = true;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  } /////////////////////////////////////////////  // New Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay == null && _parentAsset == null) {  	newfilter = true;  	isGlobalFilter = true;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filter_presentationtimerange.Timescale;  	textBoxFilterTimeScale.Text = (_filter_presentationtimerange.Timescale == null) ? "(default)" : _filter_presentationtimerange.Timescale.ToString ();  } /////////////////////////////////////////////  // Existing Global Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset == null) {  	newfilter = false;  	isGlobalFilter = true;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  } /////////////////////////////////////////////  // New Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay == null && _parentAsset == null) {  	newfilter = true;  	isGlobalFilter = true;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filter_presentationtimerange.Timescale;  	textBoxFilterTimeScale.Text = (_filter_presentationtimerange.Timescale == null) ? "(default)" : _filter_presentationtimerange.Timescale.ToString ();  } /////////////////////////////////////////////  // Existing Global Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset == null) {  	newfilter = false;  	isGlobalFilter = true;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  } /////////////////////////////////////////////  // New Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay == null && _parentAsset == null) {  	newfilter = true;  	isGlobalFilter = true;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filter_presentationtimerange.Timescale;  	textBoxFilterTimeScale.Text = (_filter_presentationtimerange.Timescale == null) ? "(default)" : _filter_presentationtimerange.Timescale.ToString ();  } /////////////////////////////////////////////  // Existing Global Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset == null) {  	newfilter = false;  	isGlobalFilter = true;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  } /////////////////////////////////////////////  // New Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay == null && _parentAsset == null) {  	newfilter = true;  	isGlobalFilter = true;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filter_presentationtimerange.Timescale;  	textBoxFilterTimeScale.Text = (_filter_presentationtimerange.Timescale == null) ? "(default)" : _filter_presentationtimerange.Timescale.ToString ();  } /////////////////////////////////////////////  // Existing Global Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset == null) {  	newfilter = false;  	isGlobalFilter = true;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  } /////////////////////////////////////////////  // New Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay != null && _parentAsset == null) {  	newfilter = false;  	isGlobalFilter = true;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  } /////////////////////////////////////////////  // New Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay != null && _parentAsset == null) {  	newfilter = false;  	isGlobalFilter = true;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  } /////////////////////////////////////////////  // New Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay != null && _parentAsset == null) {  	newfilter = false;  	isGlobalFilter = true;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  } /////////////////////////////////////////////  // New Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay != null && _parentAsset == null) {  	newfilter = false;  	isGlobalFilter = true;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  } /////////////////////////////////////////////  // New Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay != null && _parentAsset == null) {  	newfilter = false;  	isGlobalFilter = true;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  } /////////////////////////////////////////////  // New Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay == null && _parentAsset != null) {  	newfilter = true;  	isGlobalFilter = false;  	tabControl1.TabPages.Remove (tabPageInformation);  	_filter_presentationtimerange = new PresentationTimeRange ();  	filtertracks = new List<ExFilterTrack> ();  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live  	 {  		// timescale  		_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  		if (!_parentassetmanifestdata.IsLive)// Not a live content  		 {  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  			timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  			timeControlStart.Max = timeControlEnd.Max = duration;  			timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  		if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  		 {  			timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  			checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  			textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  		}  	} else// not able to read asset timings  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  		timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  } /////////////////////////////////////////////  // Existing Asset Filter  /////////////////////////////////////////////  else if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live   {  	// timescale  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  	timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  	textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  	labelOffset.Visible = textBoxOffset.Visible = true;  	// let's disable trackbars if this is live (duration is not fixed)  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  	TimeSpan duration = _parentassetmanifestdata.AssetDuration;  	textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  	labelassetduration.Visible = textBoxAssetDuration.Visible = true;  	textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  	if (!_parentassetmanifestdata.IsLive)// Not a live content  	 {  		// let set duration and active track bat  		timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  		timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  		timeControlStart.Max = timeControlEnd.Max = duration;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  	} else {  		textBoxAssetDuration.Text += " (LIVE)";  	}  	if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  	 {  		timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  		timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  		checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  		textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  	}  } else// not able to read asset timings   {  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  	timeControlEnd.SetTimeStamp (timeControlEnd.Max);  	labelassetduration.Visible = textBoxAssetDuration.Visible = false;  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live   {  	// timescale  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  	timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  	textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  	labelOffset.Visible = textBoxOffset.Visible = true;  	// let's disable trackbars if this is live (duration is not fixed)  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  	TimeSpan duration = _parentassetmanifestdata.AssetDuration;  	textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  	labelassetduration.Visible = textBoxAssetDuration.Visible = true;  	textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  	if (!_parentassetmanifestdata.IsLive)// Not a live content  	 {  		// let set duration and active track bat  		timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  		timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  		timeControlStart.Max = timeControlEnd.Max = duration;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  	} else {  		textBoxAssetDuration.Text += " (LIVE)";  	}  	if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  	 {  		timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  		timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  		checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  		textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  	}  } else// not able to read asset timings   {  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  	timeControlEnd.SetTimeStamp (timeControlEnd.Max);  	labelassetduration.Visible = textBoxAssetDuration.Visible = false;  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (!_parentassetmanifestdata.Error)// we were able to read asset timings and not live   {  	// timescale  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _parentassetmanifestdata.TimeScale;  	timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  	textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  	labelOffset.Visible = textBoxOffset.Visible = true;  	// let's disable trackbars if this is live (duration is not fixed)  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  	TimeSpan duration = _parentassetmanifestdata.AssetDuration;  	textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  	labelassetduration.Visible = textBoxAssetDuration.Visible = true;  	textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  	if (!_parentassetmanifestdata.IsLive)// Not a live content  	 {  		// let set duration and active track bat  		timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  		timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  		timeControlStart.Max = timeControlEnd.Max = duration;  		timeControlEnd.SetTimeStamp (timeControlEnd.Max);  	} else {  		textBoxAssetDuration.Text += " (LIVE)";  	}  	if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed  	 {  		timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  		timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  		checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  		textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  	}  } else// not able to read asset timings   {  	timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  	timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _timescale;  	timeControlStart.Max = timeControlEnd.Max = timeControlDVR.Max = TimeSpan.MaxValue;  	timeControlEnd.SetTimeStamp (timeControlEnd.Max);  	labelassetduration.Visible = textBoxAssetDuration.Visible = false;  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: textBoxFilterName.Text = "filter" + new Random ().Next (9999).ToString ();  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (!_parentassetmanifestdata.IsLive)// Not a live content   {  	// let set duration and active track bat  	timeControlStart.TotalDuration = timeControlEnd.TotalDuration = timeControlDVR.TotalDuration = _parentassetmanifestdata.AssetDuration;  	timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  	timeControlStart.Max = timeControlEnd.Max = duration;  	timeControlEnd.SetTimeStamp (timeControlEnd.Max);  } else {  	textBoxAssetDuration.Text += " (LIVE)";  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: timeControlDVR.TotalDuration = TimeSpan.FromHours (24);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_subclipconfig != null && _subclipconfig.Trimming)// user used the subclip UI before and timings are passed   {  	timeControlStart.SetTimeStamp (_subclipconfig.StartTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  	timeControlEnd.SetTimeStamp (_subclipconfig.EndTimeForAssetFilter - timeControlStart.GetOffSetAsTimeSpan ());  	checkBoxStartTime.Checked = checkBoxEndTime.Checked = true;  	textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: textBoxFilterName.Text = "subclip" + new Random ().Next (9999).ToString ();  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: if (_filterToDisplay != null && _parentAsset != null) {  	newfilter = false;  	isGlobalFilter = false;  	DisplayFilterInfo ();  	_filter_name = _filterToDisplay.Name;  	_filter_presentationtimerange = _filterToDisplay.PresentationTimeRange;  	filtertracks = ConvertFilterTracksToInternalVar (_filterToDisplay.Tracks);  	_timescale = _filterToDisplay.PresentationTimeRange.Timescale;  	buttonOk.Text = "Update Filter";  	buttonOk.Enabled = true;  	// we can enable the button  	toolTip1.SetToolTip (this.buttonOk' AMSExplorer.Properties.Resources.DynManifestFilter_DynManifestFilter_Load_ItCanTakeUpTo2MinutesForStreamingEndpointToRefreshTheRules);  	labelFilterTitle.Text = "Asset Filter";  	textBoxAssetName.Visible = true;  	labelassetname.Visible = true;  	textBoxAssetName.Text = _parentAsset != null ? _parentAsset.Name : string.Empty;  	textBoxFilterName.Enabled = false;  	// no way to change the filter name  	textBoxFilterName.Text = _filter_name;  	// let's try to read asset timing  	_parentassetmanifestdata = AssetInfo.GetManifestTimingData (_parentAsset);  	_timescale = timeControlStart.TimeScale = timeControlEnd.TimeScale = timeControlDVR.TimeScale = _filterToDisplay.PresentationTimeRange.Timescale;  	if (!_parentassetmanifestdata.Error && _timescale == _parentassetmanifestdata.TimeScale)// we were able to read asset timings and timescale between manifest and existing asset match  	 {  		// let's disable trackbars if this is live (duration is not fixed)  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = !_parentassetmanifestdata.IsLive;  		timeControlStart.ScaledFirstTimestampOffset = timeControlEnd.ScaledFirstTimestampOffset = _parentassetmanifestdata.TimestampOffset;  		textBoxOffset.Text = _parentassetmanifestdata.TimestampOffset.ToString ();  		labelOffset.Visible = textBoxOffset.Visible = true;  		TimeSpan duration = _parentassetmanifestdata.AssetDuration;  		textBoxAssetDuration.Text = duration.ToString (@"d\.hh\:mm\:ss");  		labelassetduration.Visible = textBoxAssetDuration.Visible = true;  		if (!_parentassetmanifestdata.IsLive) {  			timeControlStart.Max = timeControlEnd.Max = duration;  			// let set duration and active track bat  			timeControlStart.TotalDuration = timeControlEnd.TotalDuration = duration;  		} else {  			textBoxAssetDuration.Text += " (LIVE)";  		}  	} else// not able to read asset timings or mismatch in timescale  	 {  		timeControlStart.DisplayTrackBar = timeControlEnd.DisplayTrackBar = timeControlDVR.DisplayTrackBar = false;  		timeControlStart.Max = timeControlEnd.Max = TimeSpan.MaxValue;  		labelassetduration.Visible = textBoxAssetDuration.Visible = false;  	}  	checkBoxStartTime.Checked = _filter_presentationtimerange.StartTimestamp != null;  	checkBoxEndTime.Checked = _filter_presentationtimerange.EndTimestamp != null;  	checkBoxDVRWindow.Checked = _filter_presentationtimerange.PresentationWindowDuration != null;  	checkBoxLiveBackoff.Checked = _filter_presentationtimerange.LiveBackoffDuration != null;  	timeControlStart.SetScaledTimeStamp (_filter_presentationtimerange.StartTimestamp);  	timeControlEnd.SetScaledTimeStamp (_filter_presentationtimerange.EndTimestamp);  	// we don't want to pass the max value to the control (overflow)  	timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  	// we don't want to pass the max value to the control (overflow)  	TimeSpan backoff = _filter_presentationtimerange.LiveBackoffDuration ?? new TimeSpan (0);  	numericUpDownBackoffSeconds.Value = Convert.ToDecimal (backoff.TotalSeconds);  	if (_filterToDisplay.FirstQuality != null) {  		checkBoxFirstQualityBitrate.Checked = true;  		numericUpDownFirstQualityBitrate.Value = _filterToDisplay.FirstQuality.Bitrate;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DynManifestFilter_Load,The following statement contains a magic number: timeControlDVR.SetTimeStamp (_filter_presentationtimerange.PresentationWindowDuration ?? TimeSpan.FromMinutes (2));  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,DisplayFilterInfo,The following statement contains a magic number: DGInfo.ColumnCount = 2;  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (dataGridViewTracks.CurrentCell.Value != null) {  	if (dataGridViewTracks.CurrentCell.ColumnIndex == 0)// if first column  	 {  		string pstring = dataGridViewTracks.CurrentCell.Value.ToString ();  		if (pstring == FilterProperty.Type)// property type  		 {  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyType;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		} else if (pstring == FilterProperty.FourCC)// property FourCC  		 {  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyFourCC;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		} else {  			var cellValue = new DataGridViewTextBoxCell ();  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		}  	}  	// let's update the internal var  	switch (dataGridViewTracks.CurrentCell.ColumnIndex) {  	case 0:  		// property  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].property = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	case 1:  		// operator  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].oper = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	case 2:  		// value  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].value = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (dataGridViewTracks.CurrentCell.Value != null) {  	if (dataGridViewTracks.CurrentCell.ColumnIndex == 0)// if first column  	 {  		string pstring = dataGridViewTracks.CurrentCell.Value.ToString ();  		if (pstring == FilterProperty.Type)// property type  		 {  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyType;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		} else if (pstring == FilterProperty.FourCC)// property FourCC  		 {  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyFourCC;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		} else {  			var cellValue = new DataGridViewTextBoxCell ();  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		}  	}  	// let's update the internal var  	switch (dataGridViewTracks.CurrentCell.ColumnIndex) {  	case 0:  		// property  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].property = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	case 1:  		// operator  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].oper = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	case 2:  		// value  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].value = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (dataGridViewTracks.CurrentCell.Value != null) {  	if (dataGridViewTracks.CurrentCell.ColumnIndex == 0)// if first column  	 {  		string pstring = dataGridViewTracks.CurrentCell.Value.ToString ();  		if (pstring == FilterProperty.Type)// property type  		 {  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyType;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		} else if (pstring == FilterProperty.FourCC)// property FourCC  		 {  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyFourCC;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		} else {  			var cellValue = new DataGridViewTextBoxCell ();  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		}  	}  	// let's update the internal var  	switch (dataGridViewTracks.CurrentCell.ColumnIndex) {  	case 0:  		// property  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].property = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	case 1:  		// operator  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].oper = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	case 2:  		// value  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].value = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (dataGridViewTracks.CurrentCell.Value != null) {  	if (dataGridViewTracks.CurrentCell.ColumnIndex == 0)// if first column  	 {  		string pstring = dataGridViewTracks.CurrentCell.Value.ToString ();  		if (pstring == FilterProperty.Type)// property type  		 {  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyType;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		} else if (pstring == FilterProperty.FourCC)// property FourCC  		 {  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyFourCC;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		} else {  			var cellValue = new DataGridViewTextBoxCell ();  			dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  			dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  		}  	}  	// let's update the internal var  	switch (dataGridViewTracks.CurrentCell.ColumnIndex) {  	case 0:  		// property  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].property = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	case 1:  		// operator  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].oper = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	case 2:  		// value  		filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].value = dataGridViewTracks.CurrentCell.Value.ToString ();  		break;  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (dataGridViewTracks.CurrentCell.ColumnIndex == 0)// if first column   {  	string pstring = dataGridViewTracks.CurrentCell.Value.ToString ();  	if (pstring == FilterProperty.Type)// property type  	 {  		var cellValue = new DataGridViewComboBoxCell ();  		cellValue.DataSource = dataPropertyType;  		cellValue.ValueMember = "Value";  		cellValue.DisplayMember = "Description";  		dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  		dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  	} else if (pstring == FilterProperty.FourCC)// property FourCC  	 {  		var cellValue = new DataGridViewComboBoxCell ();  		cellValue.DataSource = dataPropertyFourCC;  		cellValue.ValueMember = "Value";  		cellValue.DisplayMember = "Description";  		dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  		dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  	} else {  		var cellValue = new DataGridViewTextBoxCell ();  		dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  		dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (dataGridViewTracks.CurrentCell.ColumnIndex == 0)// if first column   {  	string pstring = dataGridViewTracks.CurrentCell.Value.ToString ();  	if (pstring == FilterProperty.Type)// property type  	 {  		var cellValue = new DataGridViewComboBoxCell ();  		cellValue.DataSource = dataPropertyType;  		cellValue.ValueMember = "Value";  		cellValue.DisplayMember = "Description";  		dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  		dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  	} else if (pstring == FilterProperty.FourCC)// property FourCC  	 {  		var cellValue = new DataGridViewComboBoxCell ();  		cellValue.DataSource = dataPropertyFourCC;  		cellValue.ValueMember = "Value";  		cellValue.DisplayMember = "Description";  		dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  		dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  	} else {  		var cellValue = new DataGridViewTextBoxCell ();  		dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  		dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (dataGridViewTracks.CurrentCell.ColumnIndex == 0)// if first column   {  	string pstring = dataGridViewTracks.CurrentCell.Value.ToString ();  	if (pstring == FilterProperty.Type)// property type  	 {  		var cellValue = new DataGridViewComboBoxCell ();  		cellValue.DataSource = dataPropertyType;  		cellValue.ValueMember = "Value";  		cellValue.DisplayMember = "Description";  		dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  		dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  	} else if (pstring == FilterProperty.FourCC)// property FourCC  	 {  		var cellValue = new DataGridViewComboBoxCell ();  		cellValue.DataSource = dataPropertyFourCC;  		cellValue.ValueMember = "Value";  		cellValue.DisplayMember = "Description";  		dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  		dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  	} else {  		var cellValue = new DataGridViewTextBoxCell ();  		dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  		dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (pstring == FilterProperty.Type)// property type   {  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyType;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  } else if (pstring == FilterProperty.FourCC)// property FourCC   {  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyFourCC;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  } else {  	var cellValue = new DataGridViewTextBoxCell ();  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (pstring == FilterProperty.Type)// property type   {  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyType;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  } else if (pstring == FilterProperty.FourCC)// property FourCC   {  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyFourCC;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  } else {  	var cellValue = new DataGridViewTextBoxCell ();  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (pstring == FilterProperty.Type)// property type   {  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyType;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  } else if (pstring == FilterProperty.FourCC)// property FourCC   {  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyFourCC;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  } else {  	var cellValue = new DataGridViewTextBoxCell ();  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (pstring == FilterProperty.FourCC)// property FourCC   {  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyFourCC;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  } else {  	var cellValue = new DataGridViewTextBoxCell ();  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: if (pstring == FilterProperty.FourCC)// property FourCC   {  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyFourCC;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  } else {  	var cellValue = new DataGridViewTextBoxCell ();  	dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  	dataGridViewTracks.CommitEdit (DataGridViewDataErrorContexts.Commit);  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: dataGridViewTracks [2' dataGridViewTracks.CurrentCell.RowIndex] = cellValue;  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following statement contains a magic number: switch (dataGridViewTracks.CurrentCell.ColumnIndex) {  case 0:  	// property  	filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].property = dataGridViewTracks.CurrentCell.Value.ToString ();  	break;  case 1:  	// operator  	filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].oper = dataGridViewTracks.CurrentCell.Value.ToString ();  	break;  case 2:  	// value  	filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].value = dataGridViewTracks.CurrentCell.Value.ToString ();  	break;  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,RefreshTracksConditions,The following statement contains a magic number: if (listBoxTracks.SelectedIndex > -1) {  	var track = filtertracks [listBoxTracks.SelectedIndex];  	foreach (var condition in track.conditions) {  		if (condition.property == FilterProperty.Type)// property type - we want to propose audio' video or text dropbox  		 {  			int index = dataGridViewTracks.Rows.Add (FilterProperty.Type' condition.oper' condition.value);  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyType;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			cellValue.Value = condition.value;  			dataGridViewTracks [2' index] = cellValue;  		} else if (condition.property == FilterProperty.FourCC)// property FourCC - we want to propose supported FourCC  		 {  			int index = dataGridViewTracks.Rows.Add (FilterProperty.FourCC' condition.oper' condition.value);  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyFourCC;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			cellValue.Value = condition.value;  			dataGridViewTracks [2' index] = cellValue;  		} else if (condition.property == FilterProperty.Language)// property language  		 {  			int index = dataGridViewTracks.Rows.Add (FilterProperty.Language' condition.oper' condition.value);  		} else if (condition.property == FilterProperty.Bitrate)// property bitrate  		 {  			int index = dataGridViewTracks.Rows.Add (FilterProperty.Bitrate' condition.oper' condition.value);  		} else if (condition.property == FilterProperty.Name)// property Name - we want to propose supported FourCC  		 {  			int index = dataGridViewTracks.Rows.Add (FilterProperty.Name' condition.oper' condition.value);  		} else {  			int index = dataGridViewTracks.Rows.Add (condition.property' condition.oper' condition.value);  		}  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,RefreshTracksConditions,The following statement contains a magic number: if (listBoxTracks.SelectedIndex > -1) {  	var track = filtertracks [listBoxTracks.SelectedIndex];  	foreach (var condition in track.conditions) {  		if (condition.property == FilterProperty.Type)// property type - we want to propose audio' video or text dropbox  		 {  			int index = dataGridViewTracks.Rows.Add (FilterProperty.Type' condition.oper' condition.value);  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyType;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			cellValue.Value = condition.value;  			dataGridViewTracks [2' index] = cellValue;  		} else if (condition.property == FilterProperty.FourCC)// property FourCC - we want to propose supported FourCC  		 {  			int index = dataGridViewTracks.Rows.Add (FilterProperty.FourCC' condition.oper' condition.value);  			var cellValue = new DataGridViewComboBoxCell ();  			cellValue.DataSource = dataPropertyFourCC;  			cellValue.ValueMember = "Value";  			cellValue.DisplayMember = "Description";  			cellValue.Value = condition.value;  			dataGridViewTracks [2' index] = cellValue;  		} else if (condition.property == FilterProperty.Language)// property language  		 {  			int index = dataGridViewTracks.Rows.Add (FilterProperty.Language' condition.oper' condition.value);  		} else if (condition.property == FilterProperty.Bitrate)// property bitrate  		 {  			int index = dataGridViewTracks.Rows.Add (FilterProperty.Bitrate' condition.oper' condition.value);  		} else if (condition.property == FilterProperty.Name)// property Name - we want to propose supported FourCC  		 {  			int index = dataGridViewTracks.Rows.Add (FilterProperty.Name' condition.oper' condition.value);  		} else {  			int index = dataGridViewTracks.Rows.Add (condition.property' condition.oper' condition.value);  		}  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,RefreshTracksConditions,The following statement contains a magic number: foreach (var condition in track.conditions) {  	if (condition.property == FilterProperty.Type)// property type - we want to propose audio' video or text dropbox  	 {  		int index = dataGridViewTracks.Rows.Add (FilterProperty.Type' condition.oper' condition.value);  		var cellValue = new DataGridViewComboBoxCell ();  		cellValue.DataSource = dataPropertyType;  		cellValue.ValueMember = "Value";  		cellValue.DisplayMember = "Description";  		cellValue.Value = condition.value;  		dataGridViewTracks [2' index] = cellValue;  	} else if (condition.property == FilterProperty.FourCC)// property FourCC - we want to propose supported FourCC  	 {  		int index = dataGridViewTracks.Rows.Add (FilterProperty.FourCC' condition.oper' condition.value);  		var cellValue = new DataGridViewComboBoxCell ();  		cellValue.DataSource = dataPropertyFourCC;  		cellValue.ValueMember = "Value";  		cellValue.DisplayMember = "Description";  		cellValue.Value = condition.value;  		dataGridViewTracks [2' index] = cellValue;  	} else if (condition.property == FilterProperty.Language)// property language  	 {  		int index = dataGridViewTracks.Rows.Add (FilterProperty.Language' condition.oper' condition.value);  	} else if (condition.property == FilterProperty.Bitrate)// property bitrate  	 {  		int index = dataGridViewTracks.Rows.Add (FilterProperty.Bitrate' condition.oper' condition.value);  	} else if (condition.property == FilterProperty.Name)// property Name - we want to propose supported FourCC  	 {  		int index = dataGridViewTracks.Rows.Add (FilterProperty.Name' condition.oper' condition.value);  	} else {  		int index = dataGridViewTracks.Rows.Add (condition.property' condition.oper' condition.value);  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,RefreshTracksConditions,The following statement contains a magic number: foreach (var condition in track.conditions) {  	if (condition.property == FilterProperty.Type)// property type - we want to propose audio' video or text dropbox  	 {  		int index = dataGridViewTracks.Rows.Add (FilterProperty.Type' condition.oper' condition.value);  		var cellValue = new DataGridViewComboBoxCell ();  		cellValue.DataSource = dataPropertyType;  		cellValue.ValueMember = "Value";  		cellValue.DisplayMember = "Description";  		cellValue.Value = condition.value;  		dataGridViewTracks [2' index] = cellValue;  	} else if (condition.property == FilterProperty.FourCC)// property FourCC - we want to propose supported FourCC  	 {  		int index = dataGridViewTracks.Rows.Add (FilterProperty.FourCC' condition.oper' condition.value);  		var cellValue = new DataGridViewComboBoxCell ();  		cellValue.DataSource = dataPropertyFourCC;  		cellValue.ValueMember = "Value";  		cellValue.DisplayMember = "Description";  		cellValue.Value = condition.value;  		dataGridViewTracks [2' index] = cellValue;  	} else if (condition.property == FilterProperty.Language)// property language  	 {  		int index = dataGridViewTracks.Rows.Add (FilterProperty.Language' condition.oper' condition.value);  	} else if (condition.property == FilterProperty.Bitrate)// property bitrate  	 {  		int index = dataGridViewTracks.Rows.Add (FilterProperty.Bitrate' condition.oper' condition.value);  	} else if (condition.property == FilterProperty.Name)// property Name - we want to propose supported FourCC  	 {  		int index = dataGridViewTracks.Rows.Add (FilterProperty.Name' condition.oper' condition.value);  	} else {  		int index = dataGridViewTracks.Rows.Add (condition.property' condition.oper' condition.value);  	}  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,RefreshTracksConditions,The following statement contains a magic number: if (condition.property == FilterProperty.Type)// property type - we want to propose audio' video or text dropbox   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Type' condition.oper' condition.value);  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyType;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	cellValue.Value = condition.value;  	dataGridViewTracks [2' index] = cellValue;  } else if (condition.property == FilterProperty.FourCC)// property FourCC - we want to propose supported FourCC   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.FourCC' condition.oper' condition.value);  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyFourCC;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	cellValue.Value = condition.value;  	dataGridViewTracks [2' index] = cellValue;  } else if (condition.property == FilterProperty.Language)// property language   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Language' condition.oper' condition.value);  } else if (condition.property == FilterProperty.Bitrate)// property bitrate   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Bitrate' condition.oper' condition.value);  } else if (condition.property == FilterProperty.Name)// property Name - we want to propose supported FourCC   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Name' condition.oper' condition.value);  } else {  	int index = dataGridViewTracks.Rows.Add (condition.property' condition.oper' condition.value);  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,RefreshTracksConditions,The following statement contains a magic number: if (condition.property == FilterProperty.Type)// property type - we want to propose audio' video or text dropbox   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Type' condition.oper' condition.value);  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyType;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	cellValue.Value = condition.value;  	dataGridViewTracks [2' index] = cellValue;  } else if (condition.property == FilterProperty.FourCC)// property FourCC - we want to propose supported FourCC   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.FourCC' condition.oper' condition.value);  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyFourCC;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	cellValue.Value = condition.value;  	dataGridViewTracks [2' index] = cellValue;  } else if (condition.property == FilterProperty.Language)// property language   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Language' condition.oper' condition.value);  } else if (condition.property == FilterProperty.Bitrate)// property bitrate   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Bitrate' condition.oper' condition.value);  } else if (condition.property == FilterProperty.Name)// property Name - we want to propose supported FourCC   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Name' condition.oper' condition.value);  } else {  	int index = dataGridViewTracks.Rows.Add (condition.property' condition.oper' condition.value);  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,RefreshTracksConditions,The following statement contains a magic number: dataGridViewTracks [2' index] = cellValue;  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,RefreshTracksConditions,The following statement contains a magic number: if (condition.property == FilterProperty.FourCC)// property FourCC - we want to propose supported FourCC   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.FourCC' condition.oper' condition.value);  	var cellValue = new DataGridViewComboBoxCell ();  	cellValue.DataSource = dataPropertyFourCC;  	cellValue.ValueMember = "Value";  	cellValue.DisplayMember = "Description";  	cellValue.Value = condition.value;  	dataGridViewTracks [2' index] = cellValue;  } else if (condition.property == FilterProperty.Language)// property language   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Language' condition.oper' condition.value);  } else if (condition.property == FilterProperty.Bitrate)// property bitrate   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Bitrate' condition.oper' condition.value);  } else if (condition.property == FilterProperty.Name)// property Name - we want to propose supported FourCC   {  	int index = dataGridViewTracks.Rows.Add (FilterProperty.Name' condition.oper' condition.value);  } else {  	int index = dataGridViewTracks.Rows.Add (condition.property' condition.oper' condition.value);  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,RefreshTracksConditions,The following statement contains a magic number: dataGridViewTracks [2' index] = cellValue;  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,buttonInsertSample_Click,The following statement contains a magic number: filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackBitrateRangeCondition (new FilterTrackBitrateRange (0' 1048576)' FilterTrackCompareOperator.Equal));  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CheckIfErrorTimeControls,The following statement contains a magic number: if (checkBoxDVRWindow.Checked && timeControlDVR.TimeStampWithoutOffset < TimeSpan.FromMinutes (2)) {  	errorProvider1.SetError (timeControlDVR' AMSExplorer.Properties.Resources.DynManifestFilter_CheckIfErrorTimeControls_TheDVRWindowMustBeAtLeast2MinutesOrMore);  } else {  	errorProvider1.SetError (timeControlDVR' String.Empty);  }  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownBackoffSeconds.DecimalPlaces = 2;  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownBackoffSeconds.Maximum = new decimal (new int[] {  	60'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFirstQualityBitrate.Maximum = new decimal (new int[] {  	100000000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label12' 2' 0);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label14' 0' 2);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label15' 0' 3);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label20' 0' 4);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label23' 3' 0);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label25' 1' 2);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label26' 1' 3);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label27' 1' 4);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label22' 1' 5);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label29' 2' 1);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label30' 2' 2);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label30' 2' 2);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label31' 2' 3);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label31' 2' 3);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label32' 2' 4);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label32' 2' 4);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label33' 2' 5);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label33' 2' 5);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label34' 3' 1);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label35' 3' 2);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label35' 3' 2);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label36' 3' 3);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label36' 3' 3);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label37' 3' 4);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label37' 3' 4);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label38' 3' 5);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label38' 3' 5);  
Magic Number,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.label28' 0' 5);  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.XML)// XML data   {  	textBoxConfiguration.Text = jsondata;  } else if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.XML)// XML data   {  	textBoxConfiguration.Text = jsondata;  } else if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.XML)// XML data   {  	textBoxConfiguration.Text = jsondata;  } else if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.XML)// XML data   {  	textBoxConfiguration.Text = jsondata;  } else if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.XML)// XML data   {  	textBoxConfiguration.Text = jsondata;  } else if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.XML)// XML data   {  	textBoxConfiguration.Text = jsondata;  } else if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.XML)// XML data   {  	textBoxConfiguration.Text = jsondata;  } else if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (mode == TypeConfig.JSON || mode == TypeConfig.Empty)// JSON   {  	if (checkBoxAddAutomatic.Checked) {  		if (mode == TypeConfig.Empty) {  			jsondata = @"{""Version"": 1.0}";  		}  		dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  		////////////////////////////  		// Cleaning of JSON  		////////////////////////////  		// clean auto deinterlaing  		// clean all sources  		//if (obj.Sources != null) obj.Sources.Parent.Remove();  		// clean trimming  		// clean deinterlace filter  		// clean overlay  		// clean cropping  		// clean rotation  		if (obj.Sources != null) {  			var listDelete = new List<dynamic> ();  			foreach (var source in obj.Sources) {  				listDelete.Add (source);  			}  			listDelete.ForEach (c => c.Remove ());  			if (obj.Sources.Count == 0) {  				obj.Sources.Parent.Remove ();  			}  		}  		// Clean Insert silent audio track  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  					codec.Condition.Parent.Remove ();  				}  			}  		}  		// Clean InsertBlackvideo flag  		if (obj.Codecs != null) {  			if (_videostreaminsertedforblackvideo) {  				int nbvideo = 0;  				dynamic codecselected = null;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						nbvideo++;  						codecselected = codec;  					}  				}  				if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  					codecselected.Remove ();  				}  			} else {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  						codec.Condition.Parent.Remove ();  					}  				}  			}  		}  		// Clean PreserveResolutionAfterRotation  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  					codec.PreserveResolutionAfterRotation.Parent.Remove ();  				}  			}  		}  		// Clean StretchMode  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  					codec.StretchMode.Parent.Remove ();  				}  			}  		}  		if (obj.Codecs != null)// clean thumbnail entry in Codecs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var codec in obj.Codecs) {  				if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  					listDelete.Add (codec);  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  		 {  			var listDelete = new List<dynamic> ();  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  						output.Condition.Parent.Remove ();  					}  					if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  						listDelete.Add (output);  					}  				}  			}  			listDelete.ForEach (c => c.Remove ());  		}  		////////////////////////////  		// End of Cleaning  		////////////////////////////  		// Trimming  		if (checkBoxUseEDL.Checked)// EDL MODE  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  				dynamic time = new JObject ();  				bool insert = false;  				if (entry.AssetID != null) {  					time.AssetID = entry.AssetID;  					insert = true;  				}  				if (entry.Start != null) {  					time.StartTime = entry.Start + buttonShowEDL.Offset;  					insert = true;  				}  				if (entry.Duration != null) {  					time.Duration = entry.Duration;  					insert = true;  				}  				if (insert) {  					obj.Sources.Add (time);  				}  			}  		} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			if (comboBoxSourceAsset.Items.Count > 1) {  				time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			}  			if (checkBoxSourceTrimmingStart.Checked) {  				time.StartTime = timeControlStartTime.TimeStampWithOffset;  				if (checkBoxSourceTrimmingEnd.Checked) {  					time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  				}  			} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  			 {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  			}  			obj.Sources.Add (time);  		} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic time = new JObject ();  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  			obj.Sources.Add (time);  		}  		// Subcliping - we need to add top bitrate values  		if (_subclipConfig != null)// subclipping. we need to add top bitrate values  		 {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic streamA = new JObject ();  			streamA.Type = "AudioStream";  			streamA.Value = "TopBitrate";  			dynamic streamV = new JObject ();  			streamV.Type = "VideoStream";  			streamV.Value = "TopBitrate";  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					entry.Streams = new JArray () as dynamic;  					entry.Streams.Add (streamA);  					entry.Streams.Add (streamV);  				}  			} else {  				dynamic entry = new JObject () as dynamic;  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  				obj.Sources.Add (entry);  			}  		}  		// Overlay  		if (checkBoxOverlay.Checked) {  			/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic VideoOverlayEntry = new JObject ();  			dynamic VideoOverlay = new JObject ();  			VideoOverlayEntry.VideoOverlay = VideoOverlay;  			dynamic Position = new JObject ();  			Position.X = (int)numericUpDownVOverlayRectX.Value;  			Position.Y = (int)numericUpDownVOverlayRectY.Value;  			if (checkBoxOverlayResize.Checked) {  				Position.Width = (int)numericUpDownVOverlayRectW.Value;  				Position.Height = (int)numericUpDownVOverlayRectH.Value;  			}  			VideoOverlay.Position = Position;  			VideoOverlay.AudioGainLevel = (decimal)0;  			// Mediaparams  			dynamic MediaParams = new JArray () as dynamic;  			VideoOverlay.MediaParams = MediaParams;  			dynamic OverlayParamVideo = new JObject ();  			MediaParams.Add (OverlayParamVideo);  			OverlayParamVideo.IsOverlay = false;  			OverlayParamVideo.OverlayLoopCount = 1;  			dynamic OverlayParamImage = new JObject ();  			MediaParams.Add (OverlayParamImage);  			OverlayParamImage.IsOverlay = true;  			if (checkBoxOverlayLoop.Checked)// loop checked  			 {  				OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  			} else {  				OverlayParamImage.OverlayLoopCount = 1;  			}  			if (_firstAsset != null) {  				for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  				 {  					dynamic OverlayParam = new JObject ();  					OverlayParam.IsOverlay = false;  					OverlayParam.OverlayLoopCount = 1;  					MediaParams.Add (OverlayParam);  				}  			}  			VideoOverlay.Source = textBoxOverlayFileName.Text;  			if (checkBoxOverlayDuration.Checked)// duration specified  			 {  				dynamic Clip = new JObject ();  				VideoOverlay.Clip = Clip;  				Clip.Duration = textBoxOverlayDuration.Text;  			}  			if (checkBoxOverlayFade.Checked)// fade in and out  			 {  				dynamic FadeInDuration = new JObject ();  				VideoOverlay.FadeInDuration = FadeInDuration;  				FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  				FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  				dynamic FadeOutDuration = new JObject ();  				VideoOverlay.FadeOutDuration = FadeOutDuration;  				FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  				FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  				OverlayParamImage.InputLoop = true;  				// needed for fade in out  			}  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Add (VideoOverlayEntry);  					} else {  						entry.Filters = VideoOverlayEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (VideoOverlayEntry);  				} else {  					Source.Filters = VideoOverlayEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Video Cropping  		if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  			/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic CropEntry = new JObject ();  			dynamic Crop = new JObject ();  			CropEntry.Crop = Crop;  			var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  			Crop.X = CroppingRectangle.X;  			Crop.Y = CroppingRectangle.Y;  			Crop.Width = CroppingRectangle.Width;  			Crop.Height = CroppingRectangle.Height;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Crop = Crop;  						// Add(CropEntry);  					} else {  						entry.Filters = CropEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				if (Source.Filters != null) {  					Source.Filters.Add (CropEntry);  				} else {  					Source.Filters = CropEntry;  				}  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Auto rotation  		if (comboBoxRotation.SelectedIndex > 0) {  			/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			// let's prepare objects  			dynamic RotEntry = new JObject ();  			RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  			// now we put these objects in the preset  			if (obj.Sources.Count > 0) {  				foreach (dynamic entry in obj.Sources) {  					if (entry.Filters != null) {  						entry.Filters.Rotation = comboBoxRotation.SelectedText;  					} else {  						entry.Filters = RotEntry;  					}  					if (entry.Streams == null) {  						entry.Streams = new JArray () as dynamic;  					}  				}  			} else {  				dynamic Source = new JObject ();  				obj.Sources.Add (Source);  				Source.Filters = RotEntry;  				if (Source.Streams == null) {  					Source.Streams = new JArray () as dynamic;  				}  			}  		}  		// Insert silent audio track  		if (checkBoxInsertSilentAudioTrack.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "AACAudio") {  						codec.Condition = "InsertSilenceIfNoAudio";  					}  				}  			}  		}  		// Insert PreserveResolutionAfterRotation for video track  		if (checkBoxPreserveResAfterRotation.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.PreserveResolutionAfterRotation = true;  					}  				}  			}  		}  		// Insert video at only the lowest bitrate  		_videostreaminsertedforblackvideo = false;  		if (checkBoxInsertVideo.Checked) {  			if (obj.Codecs != null) {  				bool h264found = false;  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						h264found = true;  						codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					}  				}  				if (!h264found) {  					// no h264 data found. Let's insert a low res stream  					dynamic h264 = new JObject () as dynamic;  					h264.KeyFrameInterval = "00:00:02";  					h264.SceneChangeDetection = true;  					h264.Type = "H264Video";  					h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  					dynamic h264layer = new JObject () as dynamic;  					h264layer.Profile = "Auto";  					h264layer.Level = "auto";  					h264layer.Bitrate = 10;  					h264layer.MaxBitrate = 10;  					h264layer.BufferWindow = "00:00:05";  					h264layer.Width = 64;  					h264layer.Height = 64;  					h264layer.BFrames = 3;  					h264layer.ReferenceFrames = 3;  					h264layer.AdaptiveBFrame = true;  					h264layer.Type = "H264Layer";  					h264layer.FrameRate = "0/1";  					h264.H264Layers = new JArray () as dynamic;  					h264.H264Layers.Add (h264layer);  					obj.Codecs.Add (h264);  					_videostreaminsertedforblackvideo = true;  				}  			}  		}  		// Autostrech mode to none ?  		if (checkBoxDisableAutoStretchMode.Checked) {  			if (obj.Codecs != null) {  				foreach (var codec in obj.Codecs) {  					if (codec.Type != null && codec.Type == "H264Video") {  						codec.StretchMode = "None";  					}  				}  			}  		}  		// Insert disable auto deinterlacing  		if (checkBoxDisableAutoDeinterlacing.Checked) {  			if (obj.Sources == null) {  				obj.Sources = new JArray () as dynamic;  			}  			dynamic modeeentry = new JObject () as dynamic;  			modeeentry.Mode = "Off";  			dynamic deinterlaceentry = new JObject () as dynamic;  			deinterlaceentry.Deinterlace = modeeentry;  			if (obj.Sources.Count > 0) {  				foreach (dynamic source in obj.Sources) {  					bool DeinterModeSet = false;  					if (source.Filters != null) {  						if (source.Filters.Deinterlace != null) {  							source.Filters.Deinterlace.Mode = "Off";  						} else {  							source.Filters.Deinterlace = modeeentry;  						}  						DeinterModeSet = true;  					}  					if (!DeinterModeSet) {  						source.Filters = deinterlaceentry;  					}  				}  			} else// no source  			 {  				dynamic sourceentry = new JObject () as dynamic;  				sourceentry.Filters = deinterlaceentry;  				obj.Sources.Add (sourceentry);  			}  		}  		// non interleave audio and video  		if (checkBoxDoNotInterleave.Checked) {  			if (obj.Outputs != null) {  				foreach (var output in obj.Outputs) {  					if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  						string valuestr = (string)output.Format.Type;  						if (valuestr == "MP4Format") {  							output.Condition = "NonInterleaved";  						}  					}  				}  			}  		}  		// Thumbnails settings  		if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  			if (obj.Codecs == null) {  				obj.Codecs = new JArray () as dynamic;  			}  			if (obj.Outputs == null) {  				obj.Outputs = new JArray () as dynamic;  			}  			if (checkBoxGenThumbnailsJPG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  			}  			if (checkBoxGenThumbnailsPNG.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  			}  			if (checkBoxGenThumbnailsBMP.Checked) {  				AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  			}  		}  		textBoxConfiguration.Text = obj.ToString ();  	}  } else// no xml and no Json !   {  	textBoxConfiguration.Text = jsondata;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxAddAutomatic.Checked) {  	if (mode == TypeConfig.Empty) {  		jsondata = @"{""Version"": 1.0}";  	}  	dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  	////////////////////////////  	// Cleaning of JSON  	////////////////////////////  	// clean auto deinterlaing  	// clean all sources  	//if (obj.Sources != null) obj.Sources.Parent.Remove();  	// clean trimming  	// clean deinterlace filter  	// clean overlay  	// clean cropping  	// clean rotation  	if (obj.Sources != null) {  		var listDelete = new List<dynamic> ();  		foreach (var source in obj.Sources) {  			listDelete.Add (source);  		}  		listDelete.ForEach (c => c.Remove ());  		if (obj.Sources.Count == 0) {  			obj.Sources.Parent.Remove ();  		}  	}  	// Clean Insert silent audio track  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  				codec.Condition.Parent.Remove ();  			}  		}  	}  	// Clean InsertBlackvideo flag  	if (obj.Codecs != null) {  		if (_videostreaminsertedforblackvideo) {  			int nbvideo = 0;  			dynamic codecselected = null;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					nbvideo++;  					codecselected = codec;  				}  			}  			if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  				codecselected.Remove ();  			}  		} else {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  					codec.Condition.Parent.Remove ();  				}  			}  		}  	}  	// Clean PreserveResolutionAfterRotation  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  				codec.PreserveResolutionAfterRotation.Parent.Remove ();  			}  		}  	}  	// Clean StretchMode  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  				codec.StretchMode.Parent.Remove ();  			}  		}  	}  	if (obj.Codecs != null)// clean thumbnail entry in Codecs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var codec in obj.Codecs) {  			if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  				listDelete.Add (codec);  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var output in obj.Outputs) {  			if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  				string valuestr = (string)output.Format.Type;  				if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  					output.Condition.Parent.Remove ();  				}  				if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  					listDelete.Add (output);  				}  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	////////////////////////////  	// End of Cleaning  	////////////////////////////  	// Trimming  	if (checkBoxUseEDL.Checked)// EDL MODE  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  			dynamic time = new JObject ();  			bool insert = false;  			if (entry.AssetID != null) {  				time.AssetID = entry.AssetID;  				insert = true;  			}  			if (entry.Start != null) {  				time.StartTime = entry.Start + buttonShowEDL.Offset;  				insert = true;  			}  			if (entry.Duration != null) {  				time.Duration = entry.Duration;  				insert = true;  			}  			if (insert) {  				obj.Sources.Add (time);  			}  		}  	} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		if (comboBoxSourceAsset.Items.Count > 1) {  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		}  		if (checkBoxSourceTrimmingStart.Checked) {  			time.StartTime = timeControlStartTime.TimeStampWithOffset;  			if (checkBoxSourceTrimmingEnd.Checked) {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  			}  		} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  		 {  			time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  		}  		obj.Sources.Add (time);  	} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		obj.Sources.Add (time);  	}  	// Subcliping - we need to add top bitrate values  	if (_subclipConfig != null)// subclipping. we need to add top bitrate values  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic streamA = new JObject ();  		streamA.Type = "AudioStream";  		streamA.Value = "TopBitrate";  		dynamic streamV = new JObject ();  		streamV.Type = "VideoStream";  		streamV.Value = "TopBitrate";  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  			}  		} else {  			dynamic entry = new JObject () as dynamic;  			entry.Streams = new JArray () as dynamic;  			entry.Streams.Add (streamA);  			entry.Streams.Add (streamV);  			obj.Sources.Add (entry);  		}  	}  	// Overlay  	if (checkBoxOverlay.Checked) {  		/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic VideoOverlayEntry = new JObject ();  		dynamic VideoOverlay = new JObject ();  		VideoOverlayEntry.VideoOverlay = VideoOverlay;  		dynamic Position = new JObject ();  		Position.X = (int)numericUpDownVOverlayRectX.Value;  		Position.Y = (int)numericUpDownVOverlayRectY.Value;  		if (checkBoxOverlayResize.Checked) {  			Position.Width = (int)numericUpDownVOverlayRectW.Value;  			Position.Height = (int)numericUpDownVOverlayRectH.Value;  		}  		VideoOverlay.Position = Position;  		VideoOverlay.AudioGainLevel = (decimal)0;  		// Mediaparams  		dynamic MediaParams = new JArray () as dynamic;  		VideoOverlay.MediaParams = MediaParams;  		dynamic OverlayParamVideo = new JObject ();  		MediaParams.Add (OverlayParamVideo);  		OverlayParamVideo.IsOverlay = false;  		OverlayParamVideo.OverlayLoopCount = 1;  		dynamic OverlayParamImage = new JObject ();  		MediaParams.Add (OverlayParamImage);  		OverlayParamImage.IsOverlay = true;  		if (checkBoxOverlayLoop.Checked)// loop checked  		 {  			OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  		} else {  			OverlayParamImage.OverlayLoopCount = 1;  		}  		if (_firstAsset != null) {  			for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  			 {  				dynamic OverlayParam = new JObject ();  				OverlayParam.IsOverlay = false;  				OverlayParam.OverlayLoopCount = 1;  				MediaParams.Add (OverlayParam);  			}  		}  		VideoOverlay.Source = textBoxOverlayFileName.Text;  		if (checkBoxOverlayDuration.Checked)// duration specified  		 {  			dynamic Clip = new JObject ();  			VideoOverlay.Clip = Clip;  			Clip.Duration = textBoxOverlayDuration.Text;  		}  		if (checkBoxOverlayFade.Checked)// fade in and out  		 {  			dynamic FadeInDuration = new JObject ();  			VideoOverlay.FadeInDuration = FadeInDuration;  			FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  			FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  			dynamic FadeOutDuration = new JObject ();  			VideoOverlay.FadeOutDuration = FadeOutDuration;  			FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  			FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  			OverlayParamImage.InputLoop = true;  			// needed for fade in out  		}  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Add (VideoOverlayEntry);  				} else {  					entry.Filters = VideoOverlayEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (VideoOverlayEntry);  			} else {  				Source.Filters = VideoOverlayEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Video Cropping  	if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  		/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic CropEntry = new JObject ();  		dynamic Crop = new JObject ();  		CropEntry.Crop = Crop;  		var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  		Crop.X = CroppingRectangle.X;  		Crop.Y = CroppingRectangle.Y;  		Crop.Width = CroppingRectangle.Width;  		Crop.Height = CroppingRectangle.Height;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Crop = Crop;  					// Add(CropEntry);  				} else {  					entry.Filters = CropEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (CropEntry);  			} else {  				Source.Filters = CropEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Auto rotation  	if (comboBoxRotation.SelectedIndex > 0) {  		/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic RotEntry = new JObject ();  		RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Rotation = comboBoxRotation.SelectedText;  				} else {  					entry.Filters = RotEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			Source.Filters = RotEntry;  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Insert silent audio track  	if (checkBoxInsertSilentAudioTrack.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio") {  					codec.Condition = "InsertSilenceIfNoAudio";  				}  			}  		}  	}  	// Insert PreserveResolutionAfterRotation for video track  	if (checkBoxPreserveResAfterRotation.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.PreserveResolutionAfterRotation = true;  				}  			}  		}  	}  	// Insert video at only the lowest bitrate  	_videostreaminsertedforblackvideo = false;  	if (checkBoxInsertVideo.Checked) {  		if (obj.Codecs != null) {  			bool h264found = false;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					h264found = true;  					codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				}  			}  			if (!h264found) {  				// no h264 data found. Let's insert a low res stream  				dynamic h264 = new JObject () as dynamic;  				h264.KeyFrameInterval = "00:00:02";  				h264.SceneChangeDetection = true;  				h264.Type = "H264Video";  				h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				dynamic h264layer = new JObject () as dynamic;  				h264layer.Profile = "Auto";  				h264layer.Level = "auto";  				h264layer.Bitrate = 10;  				h264layer.MaxBitrate = 10;  				h264layer.BufferWindow = "00:00:05";  				h264layer.Width = 64;  				h264layer.Height = 64;  				h264layer.BFrames = 3;  				h264layer.ReferenceFrames = 3;  				h264layer.AdaptiveBFrame = true;  				h264layer.Type = "H264Layer";  				h264layer.FrameRate = "0/1";  				h264.H264Layers = new JArray () as dynamic;  				h264.H264Layers.Add (h264layer);  				obj.Codecs.Add (h264);  				_videostreaminsertedforblackvideo = true;  			}  		}  	}  	// Autostrech mode to none ?  	if (checkBoxDisableAutoStretchMode.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.StretchMode = "None";  				}  			}  		}  	}  	// Insert disable auto deinterlacing  	if (checkBoxDisableAutoDeinterlacing.Checked) {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic modeeentry = new JObject () as dynamic;  		modeeentry.Mode = "Off";  		dynamic deinterlaceentry = new JObject () as dynamic;  		deinterlaceentry.Deinterlace = modeeentry;  		if (obj.Sources.Count > 0) {  			foreach (dynamic source in obj.Sources) {  				bool DeinterModeSet = false;  				if (source.Filters != null) {  					if (source.Filters.Deinterlace != null) {  						source.Filters.Deinterlace.Mode = "Off";  					} else {  						source.Filters.Deinterlace = modeeentry;  					}  					DeinterModeSet = true;  				}  				if (!DeinterModeSet) {  					source.Filters = deinterlaceentry;  				}  			}  		} else// no source  		 {  			dynamic sourceentry = new JObject () as dynamic;  			sourceentry.Filters = deinterlaceentry;  			obj.Sources.Add (sourceentry);  		}  	}  	// non interleave audio and video  	if (checkBoxDoNotInterleave.Checked) {  		if (obj.Outputs != null) {  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format") {  						output.Condition = "NonInterleaved";  					}  				}  			}  		}  	}  	// Thumbnails settings  	if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  		if (obj.Codecs == null) {  			obj.Codecs = new JArray () as dynamic;  		}  		if (obj.Outputs == null) {  			obj.Outputs = new JArray () as dynamic;  		}  		if (checkBoxGenThumbnailsJPG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  		}  		if (checkBoxGenThumbnailsPNG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  		}  		if (checkBoxGenThumbnailsBMP.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  		}  	}  	textBoxConfiguration.Text = obj.ToString ();  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxAddAutomatic.Checked) {  	if (mode == TypeConfig.Empty) {  		jsondata = @"{""Version"": 1.0}";  	}  	dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  	////////////////////////////  	// Cleaning of JSON  	////////////////////////////  	// clean auto deinterlaing  	// clean all sources  	//if (obj.Sources != null) obj.Sources.Parent.Remove();  	// clean trimming  	// clean deinterlace filter  	// clean overlay  	// clean cropping  	// clean rotation  	if (obj.Sources != null) {  		var listDelete = new List<dynamic> ();  		foreach (var source in obj.Sources) {  			listDelete.Add (source);  		}  		listDelete.ForEach (c => c.Remove ());  		if (obj.Sources.Count == 0) {  			obj.Sources.Parent.Remove ();  		}  	}  	// Clean Insert silent audio track  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  				codec.Condition.Parent.Remove ();  			}  		}  	}  	// Clean InsertBlackvideo flag  	if (obj.Codecs != null) {  		if (_videostreaminsertedforblackvideo) {  			int nbvideo = 0;  			dynamic codecselected = null;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					nbvideo++;  					codecselected = codec;  				}  			}  			if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  				codecselected.Remove ();  			}  		} else {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  					codec.Condition.Parent.Remove ();  				}  			}  		}  	}  	// Clean PreserveResolutionAfterRotation  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  				codec.PreserveResolutionAfterRotation.Parent.Remove ();  			}  		}  	}  	// Clean StretchMode  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  				codec.StretchMode.Parent.Remove ();  			}  		}  	}  	if (obj.Codecs != null)// clean thumbnail entry in Codecs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var codec in obj.Codecs) {  			if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  				listDelete.Add (codec);  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var output in obj.Outputs) {  			if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  				string valuestr = (string)output.Format.Type;  				if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  					output.Condition.Parent.Remove ();  				}  				if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  					listDelete.Add (output);  				}  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	////////////////////////////  	// End of Cleaning  	////////////////////////////  	// Trimming  	if (checkBoxUseEDL.Checked)// EDL MODE  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  			dynamic time = new JObject ();  			bool insert = false;  			if (entry.AssetID != null) {  				time.AssetID = entry.AssetID;  				insert = true;  			}  			if (entry.Start != null) {  				time.StartTime = entry.Start + buttonShowEDL.Offset;  				insert = true;  			}  			if (entry.Duration != null) {  				time.Duration = entry.Duration;  				insert = true;  			}  			if (insert) {  				obj.Sources.Add (time);  			}  		}  	} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		if (comboBoxSourceAsset.Items.Count > 1) {  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		}  		if (checkBoxSourceTrimmingStart.Checked) {  			time.StartTime = timeControlStartTime.TimeStampWithOffset;  			if (checkBoxSourceTrimmingEnd.Checked) {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  			}  		} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  		 {  			time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  		}  		obj.Sources.Add (time);  	} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		obj.Sources.Add (time);  	}  	// Subcliping - we need to add top bitrate values  	if (_subclipConfig != null)// subclipping. we need to add top bitrate values  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic streamA = new JObject ();  		streamA.Type = "AudioStream";  		streamA.Value = "TopBitrate";  		dynamic streamV = new JObject ();  		streamV.Type = "VideoStream";  		streamV.Value = "TopBitrate";  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  			}  		} else {  			dynamic entry = new JObject () as dynamic;  			entry.Streams = new JArray () as dynamic;  			entry.Streams.Add (streamA);  			entry.Streams.Add (streamV);  			obj.Sources.Add (entry);  		}  	}  	// Overlay  	if (checkBoxOverlay.Checked) {  		/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic VideoOverlayEntry = new JObject ();  		dynamic VideoOverlay = new JObject ();  		VideoOverlayEntry.VideoOverlay = VideoOverlay;  		dynamic Position = new JObject ();  		Position.X = (int)numericUpDownVOverlayRectX.Value;  		Position.Y = (int)numericUpDownVOverlayRectY.Value;  		if (checkBoxOverlayResize.Checked) {  			Position.Width = (int)numericUpDownVOverlayRectW.Value;  			Position.Height = (int)numericUpDownVOverlayRectH.Value;  		}  		VideoOverlay.Position = Position;  		VideoOverlay.AudioGainLevel = (decimal)0;  		// Mediaparams  		dynamic MediaParams = new JArray () as dynamic;  		VideoOverlay.MediaParams = MediaParams;  		dynamic OverlayParamVideo = new JObject ();  		MediaParams.Add (OverlayParamVideo);  		OverlayParamVideo.IsOverlay = false;  		OverlayParamVideo.OverlayLoopCount = 1;  		dynamic OverlayParamImage = new JObject ();  		MediaParams.Add (OverlayParamImage);  		OverlayParamImage.IsOverlay = true;  		if (checkBoxOverlayLoop.Checked)// loop checked  		 {  			OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  		} else {  			OverlayParamImage.OverlayLoopCount = 1;  		}  		if (_firstAsset != null) {  			for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  			 {  				dynamic OverlayParam = new JObject ();  				OverlayParam.IsOverlay = false;  				OverlayParam.OverlayLoopCount = 1;  				MediaParams.Add (OverlayParam);  			}  		}  		VideoOverlay.Source = textBoxOverlayFileName.Text;  		if (checkBoxOverlayDuration.Checked)// duration specified  		 {  			dynamic Clip = new JObject ();  			VideoOverlay.Clip = Clip;  			Clip.Duration = textBoxOverlayDuration.Text;  		}  		if (checkBoxOverlayFade.Checked)// fade in and out  		 {  			dynamic FadeInDuration = new JObject ();  			VideoOverlay.FadeInDuration = FadeInDuration;  			FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  			FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  			dynamic FadeOutDuration = new JObject ();  			VideoOverlay.FadeOutDuration = FadeOutDuration;  			FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  			FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  			OverlayParamImage.InputLoop = true;  			// needed for fade in out  		}  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Add (VideoOverlayEntry);  				} else {  					entry.Filters = VideoOverlayEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (VideoOverlayEntry);  			} else {  				Source.Filters = VideoOverlayEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Video Cropping  	if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  		/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic CropEntry = new JObject ();  		dynamic Crop = new JObject ();  		CropEntry.Crop = Crop;  		var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  		Crop.X = CroppingRectangle.X;  		Crop.Y = CroppingRectangle.Y;  		Crop.Width = CroppingRectangle.Width;  		Crop.Height = CroppingRectangle.Height;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Crop = Crop;  					// Add(CropEntry);  				} else {  					entry.Filters = CropEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (CropEntry);  			} else {  				Source.Filters = CropEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Auto rotation  	if (comboBoxRotation.SelectedIndex > 0) {  		/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic RotEntry = new JObject ();  		RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Rotation = comboBoxRotation.SelectedText;  				} else {  					entry.Filters = RotEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			Source.Filters = RotEntry;  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Insert silent audio track  	if (checkBoxInsertSilentAudioTrack.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio") {  					codec.Condition = "InsertSilenceIfNoAudio";  				}  			}  		}  	}  	// Insert PreserveResolutionAfterRotation for video track  	if (checkBoxPreserveResAfterRotation.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.PreserveResolutionAfterRotation = true;  				}  			}  		}  	}  	// Insert video at only the lowest bitrate  	_videostreaminsertedforblackvideo = false;  	if (checkBoxInsertVideo.Checked) {  		if (obj.Codecs != null) {  			bool h264found = false;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					h264found = true;  					codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				}  			}  			if (!h264found) {  				// no h264 data found. Let's insert a low res stream  				dynamic h264 = new JObject () as dynamic;  				h264.KeyFrameInterval = "00:00:02";  				h264.SceneChangeDetection = true;  				h264.Type = "H264Video";  				h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				dynamic h264layer = new JObject () as dynamic;  				h264layer.Profile = "Auto";  				h264layer.Level = "auto";  				h264layer.Bitrate = 10;  				h264layer.MaxBitrate = 10;  				h264layer.BufferWindow = "00:00:05";  				h264layer.Width = 64;  				h264layer.Height = 64;  				h264layer.BFrames = 3;  				h264layer.ReferenceFrames = 3;  				h264layer.AdaptiveBFrame = true;  				h264layer.Type = "H264Layer";  				h264layer.FrameRate = "0/1";  				h264.H264Layers = new JArray () as dynamic;  				h264.H264Layers.Add (h264layer);  				obj.Codecs.Add (h264);  				_videostreaminsertedforblackvideo = true;  			}  		}  	}  	// Autostrech mode to none ?  	if (checkBoxDisableAutoStretchMode.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.StretchMode = "None";  				}  			}  		}  	}  	// Insert disable auto deinterlacing  	if (checkBoxDisableAutoDeinterlacing.Checked) {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic modeeentry = new JObject () as dynamic;  		modeeentry.Mode = "Off";  		dynamic deinterlaceentry = new JObject () as dynamic;  		deinterlaceentry.Deinterlace = modeeentry;  		if (obj.Sources.Count > 0) {  			foreach (dynamic source in obj.Sources) {  				bool DeinterModeSet = false;  				if (source.Filters != null) {  					if (source.Filters.Deinterlace != null) {  						source.Filters.Deinterlace.Mode = "Off";  					} else {  						source.Filters.Deinterlace = modeeentry;  					}  					DeinterModeSet = true;  				}  				if (!DeinterModeSet) {  					source.Filters = deinterlaceentry;  				}  			}  		} else// no source  		 {  			dynamic sourceentry = new JObject () as dynamic;  			sourceentry.Filters = deinterlaceentry;  			obj.Sources.Add (sourceentry);  		}  	}  	// non interleave audio and video  	if (checkBoxDoNotInterleave.Checked) {  		if (obj.Outputs != null) {  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format") {  						output.Condition = "NonInterleaved";  					}  				}  			}  		}  	}  	// Thumbnails settings  	if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  		if (obj.Codecs == null) {  			obj.Codecs = new JArray () as dynamic;  		}  		if (obj.Outputs == null) {  			obj.Outputs = new JArray () as dynamic;  		}  		if (checkBoxGenThumbnailsJPG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  		}  		if (checkBoxGenThumbnailsPNG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  		}  		if (checkBoxGenThumbnailsBMP.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  		}  	}  	textBoxConfiguration.Text = obj.ToString ();  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxAddAutomatic.Checked) {  	if (mode == TypeConfig.Empty) {  		jsondata = @"{""Version"": 1.0}";  	}  	dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  	////////////////////////////  	// Cleaning of JSON  	////////////////////////////  	// clean auto deinterlaing  	// clean all sources  	//if (obj.Sources != null) obj.Sources.Parent.Remove();  	// clean trimming  	// clean deinterlace filter  	// clean overlay  	// clean cropping  	// clean rotation  	if (obj.Sources != null) {  		var listDelete = new List<dynamic> ();  		foreach (var source in obj.Sources) {  			listDelete.Add (source);  		}  		listDelete.ForEach (c => c.Remove ());  		if (obj.Sources.Count == 0) {  			obj.Sources.Parent.Remove ();  		}  	}  	// Clean Insert silent audio track  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  				codec.Condition.Parent.Remove ();  			}  		}  	}  	// Clean InsertBlackvideo flag  	if (obj.Codecs != null) {  		if (_videostreaminsertedforblackvideo) {  			int nbvideo = 0;  			dynamic codecselected = null;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					nbvideo++;  					codecselected = codec;  				}  			}  			if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  				codecselected.Remove ();  			}  		} else {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  					codec.Condition.Parent.Remove ();  				}  			}  		}  	}  	// Clean PreserveResolutionAfterRotation  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  				codec.PreserveResolutionAfterRotation.Parent.Remove ();  			}  		}  	}  	// Clean StretchMode  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  				codec.StretchMode.Parent.Remove ();  			}  		}  	}  	if (obj.Codecs != null)// clean thumbnail entry in Codecs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var codec in obj.Codecs) {  			if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  				listDelete.Add (codec);  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var output in obj.Outputs) {  			if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  				string valuestr = (string)output.Format.Type;  				if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  					output.Condition.Parent.Remove ();  				}  				if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  					listDelete.Add (output);  				}  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	////////////////////////////  	// End of Cleaning  	////////////////////////////  	// Trimming  	if (checkBoxUseEDL.Checked)// EDL MODE  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  			dynamic time = new JObject ();  			bool insert = false;  			if (entry.AssetID != null) {  				time.AssetID = entry.AssetID;  				insert = true;  			}  			if (entry.Start != null) {  				time.StartTime = entry.Start + buttonShowEDL.Offset;  				insert = true;  			}  			if (entry.Duration != null) {  				time.Duration = entry.Duration;  				insert = true;  			}  			if (insert) {  				obj.Sources.Add (time);  			}  		}  	} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		if (comboBoxSourceAsset.Items.Count > 1) {  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		}  		if (checkBoxSourceTrimmingStart.Checked) {  			time.StartTime = timeControlStartTime.TimeStampWithOffset;  			if (checkBoxSourceTrimmingEnd.Checked) {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  			}  		} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  		 {  			time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  		}  		obj.Sources.Add (time);  	} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		obj.Sources.Add (time);  	}  	// Subcliping - we need to add top bitrate values  	if (_subclipConfig != null)// subclipping. we need to add top bitrate values  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic streamA = new JObject ();  		streamA.Type = "AudioStream";  		streamA.Value = "TopBitrate";  		dynamic streamV = new JObject ();  		streamV.Type = "VideoStream";  		streamV.Value = "TopBitrate";  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  			}  		} else {  			dynamic entry = new JObject () as dynamic;  			entry.Streams = new JArray () as dynamic;  			entry.Streams.Add (streamA);  			entry.Streams.Add (streamV);  			obj.Sources.Add (entry);  		}  	}  	// Overlay  	if (checkBoxOverlay.Checked) {  		/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic VideoOverlayEntry = new JObject ();  		dynamic VideoOverlay = new JObject ();  		VideoOverlayEntry.VideoOverlay = VideoOverlay;  		dynamic Position = new JObject ();  		Position.X = (int)numericUpDownVOverlayRectX.Value;  		Position.Y = (int)numericUpDownVOverlayRectY.Value;  		if (checkBoxOverlayResize.Checked) {  			Position.Width = (int)numericUpDownVOverlayRectW.Value;  			Position.Height = (int)numericUpDownVOverlayRectH.Value;  		}  		VideoOverlay.Position = Position;  		VideoOverlay.AudioGainLevel = (decimal)0;  		// Mediaparams  		dynamic MediaParams = new JArray () as dynamic;  		VideoOverlay.MediaParams = MediaParams;  		dynamic OverlayParamVideo = new JObject ();  		MediaParams.Add (OverlayParamVideo);  		OverlayParamVideo.IsOverlay = false;  		OverlayParamVideo.OverlayLoopCount = 1;  		dynamic OverlayParamImage = new JObject ();  		MediaParams.Add (OverlayParamImage);  		OverlayParamImage.IsOverlay = true;  		if (checkBoxOverlayLoop.Checked)// loop checked  		 {  			OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  		} else {  			OverlayParamImage.OverlayLoopCount = 1;  		}  		if (_firstAsset != null) {  			for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  			 {  				dynamic OverlayParam = new JObject ();  				OverlayParam.IsOverlay = false;  				OverlayParam.OverlayLoopCount = 1;  				MediaParams.Add (OverlayParam);  			}  		}  		VideoOverlay.Source = textBoxOverlayFileName.Text;  		if (checkBoxOverlayDuration.Checked)// duration specified  		 {  			dynamic Clip = new JObject ();  			VideoOverlay.Clip = Clip;  			Clip.Duration = textBoxOverlayDuration.Text;  		}  		if (checkBoxOverlayFade.Checked)// fade in and out  		 {  			dynamic FadeInDuration = new JObject ();  			VideoOverlay.FadeInDuration = FadeInDuration;  			FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  			FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  			dynamic FadeOutDuration = new JObject ();  			VideoOverlay.FadeOutDuration = FadeOutDuration;  			FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  			FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  			OverlayParamImage.InputLoop = true;  			// needed for fade in out  		}  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Add (VideoOverlayEntry);  				} else {  					entry.Filters = VideoOverlayEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (VideoOverlayEntry);  			} else {  				Source.Filters = VideoOverlayEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Video Cropping  	if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  		/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic CropEntry = new JObject ();  		dynamic Crop = new JObject ();  		CropEntry.Crop = Crop;  		var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  		Crop.X = CroppingRectangle.X;  		Crop.Y = CroppingRectangle.Y;  		Crop.Width = CroppingRectangle.Width;  		Crop.Height = CroppingRectangle.Height;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Crop = Crop;  					// Add(CropEntry);  				} else {  					entry.Filters = CropEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (CropEntry);  			} else {  				Source.Filters = CropEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Auto rotation  	if (comboBoxRotation.SelectedIndex > 0) {  		/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic RotEntry = new JObject ();  		RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Rotation = comboBoxRotation.SelectedText;  				} else {  					entry.Filters = RotEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			Source.Filters = RotEntry;  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Insert silent audio track  	if (checkBoxInsertSilentAudioTrack.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio") {  					codec.Condition = "InsertSilenceIfNoAudio";  				}  			}  		}  	}  	// Insert PreserveResolutionAfterRotation for video track  	if (checkBoxPreserveResAfterRotation.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.PreserveResolutionAfterRotation = true;  				}  			}  		}  	}  	// Insert video at only the lowest bitrate  	_videostreaminsertedforblackvideo = false;  	if (checkBoxInsertVideo.Checked) {  		if (obj.Codecs != null) {  			bool h264found = false;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					h264found = true;  					codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				}  			}  			if (!h264found) {  				// no h264 data found. Let's insert a low res stream  				dynamic h264 = new JObject () as dynamic;  				h264.KeyFrameInterval = "00:00:02";  				h264.SceneChangeDetection = true;  				h264.Type = "H264Video";  				h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				dynamic h264layer = new JObject () as dynamic;  				h264layer.Profile = "Auto";  				h264layer.Level = "auto";  				h264layer.Bitrate = 10;  				h264layer.MaxBitrate = 10;  				h264layer.BufferWindow = "00:00:05";  				h264layer.Width = 64;  				h264layer.Height = 64;  				h264layer.BFrames = 3;  				h264layer.ReferenceFrames = 3;  				h264layer.AdaptiveBFrame = true;  				h264layer.Type = "H264Layer";  				h264layer.FrameRate = "0/1";  				h264.H264Layers = new JArray () as dynamic;  				h264.H264Layers.Add (h264layer);  				obj.Codecs.Add (h264);  				_videostreaminsertedforblackvideo = true;  			}  		}  	}  	// Autostrech mode to none ?  	if (checkBoxDisableAutoStretchMode.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.StretchMode = "None";  				}  			}  		}  	}  	// Insert disable auto deinterlacing  	if (checkBoxDisableAutoDeinterlacing.Checked) {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic modeeentry = new JObject () as dynamic;  		modeeentry.Mode = "Off";  		dynamic deinterlaceentry = new JObject () as dynamic;  		deinterlaceentry.Deinterlace = modeeentry;  		if (obj.Sources.Count > 0) {  			foreach (dynamic source in obj.Sources) {  				bool DeinterModeSet = false;  				if (source.Filters != null) {  					if (source.Filters.Deinterlace != null) {  						source.Filters.Deinterlace.Mode = "Off";  					} else {  						source.Filters.Deinterlace = modeeentry;  					}  					DeinterModeSet = true;  				}  				if (!DeinterModeSet) {  					source.Filters = deinterlaceentry;  				}  			}  		} else// no source  		 {  			dynamic sourceentry = new JObject () as dynamic;  			sourceentry.Filters = deinterlaceentry;  			obj.Sources.Add (sourceentry);  		}  	}  	// non interleave audio and video  	if (checkBoxDoNotInterleave.Checked) {  		if (obj.Outputs != null) {  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format") {  						output.Condition = "NonInterleaved";  					}  				}  			}  		}  	}  	// Thumbnails settings  	if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  		if (obj.Codecs == null) {  			obj.Codecs = new JArray () as dynamic;  		}  		if (obj.Outputs == null) {  			obj.Outputs = new JArray () as dynamic;  		}  		if (checkBoxGenThumbnailsJPG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  		}  		if (checkBoxGenThumbnailsPNG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  		}  		if (checkBoxGenThumbnailsBMP.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  		}  	}  	textBoxConfiguration.Text = obj.ToString ();  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxAddAutomatic.Checked) {  	if (mode == TypeConfig.Empty) {  		jsondata = @"{""Version"": 1.0}";  	}  	dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  	////////////////////////////  	// Cleaning of JSON  	////////////////////////////  	// clean auto deinterlaing  	// clean all sources  	//if (obj.Sources != null) obj.Sources.Parent.Remove();  	// clean trimming  	// clean deinterlace filter  	// clean overlay  	// clean cropping  	// clean rotation  	if (obj.Sources != null) {  		var listDelete = new List<dynamic> ();  		foreach (var source in obj.Sources) {  			listDelete.Add (source);  		}  		listDelete.ForEach (c => c.Remove ());  		if (obj.Sources.Count == 0) {  			obj.Sources.Parent.Remove ();  		}  	}  	// Clean Insert silent audio track  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  				codec.Condition.Parent.Remove ();  			}  		}  	}  	// Clean InsertBlackvideo flag  	if (obj.Codecs != null) {  		if (_videostreaminsertedforblackvideo) {  			int nbvideo = 0;  			dynamic codecselected = null;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					nbvideo++;  					codecselected = codec;  				}  			}  			if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  				codecselected.Remove ();  			}  		} else {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  					codec.Condition.Parent.Remove ();  				}  			}  		}  	}  	// Clean PreserveResolutionAfterRotation  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  				codec.PreserveResolutionAfterRotation.Parent.Remove ();  			}  		}  	}  	// Clean StretchMode  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  				codec.StretchMode.Parent.Remove ();  			}  		}  	}  	if (obj.Codecs != null)// clean thumbnail entry in Codecs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var codec in obj.Codecs) {  			if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  				listDelete.Add (codec);  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var output in obj.Outputs) {  			if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  				string valuestr = (string)output.Format.Type;  				if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  					output.Condition.Parent.Remove ();  				}  				if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  					listDelete.Add (output);  				}  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	////////////////////////////  	// End of Cleaning  	////////////////////////////  	// Trimming  	if (checkBoxUseEDL.Checked)// EDL MODE  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  			dynamic time = new JObject ();  			bool insert = false;  			if (entry.AssetID != null) {  				time.AssetID = entry.AssetID;  				insert = true;  			}  			if (entry.Start != null) {  				time.StartTime = entry.Start + buttonShowEDL.Offset;  				insert = true;  			}  			if (entry.Duration != null) {  				time.Duration = entry.Duration;  				insert = true;  			}  			if (insert) {  				obj.Sources.Add (time);  			}  		}  	} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		if (comboBoxSourceAsset.Items.Count > 1) {  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		}  		if (checkBoxSourceTrimmingStart.Checked) {  			time.StartTime = timeControlStartTime.TimeStampWithOffset;  			if (checkBoxSourceTrimmingEnd.Checked) {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  			}  		} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  		 {  			time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  		}  		obj.Sources.Add (time);  	} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		obj.Sources.Add (time);  	}  	// Subcliping - we need to add top bitrate values  	if (_subclipConfig != null)// subclipping. we need to add top bitrate values  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic streamA = new JObject ();  		streamA.Type = "AudioStream";  		streamA.Value = "TopBitrate";  		dynamic streamV = new JObject ();  		streamV.Type = "VideoStream";  		streamV.Value = "TopBitrate";  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  			}  		} else {  			dynamic entry = new JObject () as dynamic;  			entry.Streams = new JArray () as dynamic;  			entry.Streams.Add (streamA);  			entry.Streams.Add (streamV);  			obj.Sources.Add (entry);  		}  	}  	// Overlay  	if (checkBoxOverlay.Checked) {  		/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic VideoOverlayEntry = new JObject ();  		dynamic VideoOverlay = new JObject ();  		VideoOverlayEntry.VideoOverlay = VideoOverlay;  		dynamic Position = new JObject ();  		Position.X = (int)numericUpDownVOverlayRectX.Value;  		Position.Y = (int)numericUpDownVOverlayRectY.Value;  		if (checkBoxOverlayResize.Checked) {  			Position.Width = (int)numericUpDownVOverlayRectW.Value;  			Position.Height = (int)numericUpDownVOverlayRectH.Value;  		}  		VideoOverlay.Position = Position;  		VideoOverlay.AudioGainLevel = (decimal)0;  		// Mediaparams  		dynamic MediaParams = new JArray () as dynamic;  		VideoOverlay.MediaParams = MediaParams;  		dynamic OverlayParamVideo = new JObject ();  		MediaParams.Add (OverlayParamVideo);  		OverlayParamVideo.IsOverlay = false;  		OverlayParamVideo.OverlayLoopCount = 1;  		dynamic OverlayParamImage = new JObject ();  		MediaParams.Add (OverlayParamImage);  		OverlayParamImage.IsOverlay = true;  		if (checkBoxOverlayLoop.Checked)// loop checked  		 {  			OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  		} else {  			OverlayParamImage.OverlayLoopCount = 1;  		}  		if (_firstAsset != null) {  			for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  			 {  				dynamic OverlayParam = new JObject ();  				OverlayParam.IsOverlay = false;  				OverlayParam.OverlayLoopCount = 1;  				MediaParams.Add (OverlayParam);  			}  		}  		VideoOverlay.Source = textBoxOverlayFileName.Text;  		if (checkBoxOverlayDuration.Checked)// duration specified  		 {  			dynamic Clip = new JObject ();  			VideoOverlay.Clip = Clip;  			Clip.Duration = textBoxOverlayDuration.Text;  		}  		if (checkBoxOverlayFade.Checked)// fade in and out  		 {  			dynamic FadeInDuration = new JObject ();  			VideoOverlay.FadeInDuration = FadeInDuration;  			FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  			FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  			dynamic FadeOutDuration = new JObject ();  			VideoOverlay.FadeOutDuration = FadeOutDuration;  			FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  			FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  			OverlayParamImage.InputLoop = true;  			// needed for fade in out  		}  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Add (VideoOverlayEntry);  				} else {  					entry.Filters = VideoOverlayEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (VideoOverlayEntry);  			} else {  				Source.Filters = VideoOverlayEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Video Cropping  	if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  		/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic CropEntry = new JObject ();  		dynamic Crop = new JObject ();  		CropEntry.Crop = Crop;  		var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  		Crop.X = CroppingRectangle.X;  		Crop.Y = CroppingRectangle.Y;  		Crop.Width = CroppingRectangle.Width;  		Crop.Height = CroppingRectangle.Height;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Crop = Crop;  					// Add(CropEntry);  				} else {  					entry.Filters = CropEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (CropEntry);  			} else {  				Source.Filters = CropEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Auto rotation  	if (comboBoxRotation.SelectedIndex > 0) {  		/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic RotEntry = new JObject ();  		RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Rotation = comboBoxRotation.SelectedText;  				} else {  					entry.Filters = RotEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			Source.Filters = RotEntry;  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Insert silent audio track  	if (checkBoxInsertSilentAudioTrack.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio") {  					codec.Condition = "InsertSilenceIfNoAudio";  				}  			}  		}  	}  	// Insert PreserveResolutionAfterRotation for video track  	if (checkBoxPreserveResAfterRotation.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.PreserveResolutionAfterRotation = true;  				}  			}  		}  	}  	// Insert video at only the lowest bitrate  	_videostreaminsertedforblackvideo = false;  	if (checkBoxInsertVideo.Checked) {  		if (obj.Codecs != null) {  			bool h264found = false;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					h264found = true;  					codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				}  			}  			if (!h264found) {  				// no h264 data found. Let's insert a low res stream  				dynamic h264 = new JObject () as dynamic;  				h264.KeyFrameInterval = "00:00:02";  				h264.SceneChangeDetection = true;  				h264.Type = "H264Video";  				h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				dynamic h264layer = new JObject () as dynamic;  				h264layer.Profile = "Auto";  				h264layer.Level = "auto";  				h264layer.Bitrate = 10;  				h264layer.MaxBitrate = 10;  				h264layer.BufferWindow = "00:00:05";  				h264layer.Width = 64;  				h264layer.Height = 64;  				h264layer.BFrames = 3;  				h264layer.ReferenceFrames = 3;  				h264layer.AdaptiveBFrame = true;  				h264layer.Type = "H264Layer";  				h264layer.FrameRate = "0/1";  				h264.H264Layers = new JArray () as dynamic;  				h264.H264Layers.Add (h264layer);  				obj.Codecs.Add (h264);  				_videostreaminsertedforblackvideo = true;  			}  		}  	}  	// Autostrech mode to none ?  	if (checkBoxDisableAutoStretchMode.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.StretchMode = "None";  				}  			}  		}  	}  	// Insert disable auto deinterlacing  	if (checkBoxDisableAutoDeinterlacing.Checked) {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic modeeentry = new JObject () as dynamic;  		modeeentry.Mode = "Off";  		dynamic deinterlaceentry = new JObject () as dynamic;  		deinterlaceentry.Deinterlace = modeeentry;  		if (obj.Sources.Count > 0) {  			foreach (dynamic source in obj.Sources) {  				bool DeinterModeSet = false;  				if (source.Filters != null) {  					if (source.Filters.Deinterlace != null) {  						source.Filters.Deinterlace.Mode = "Off";  					} else {  						source.Filters.Deinterlace = modeeentry;  					}  					DeinterModeSet = true;  				}  				if (!DeinterModeSet) {  					source.Filters = deinterlaceentry;  				}  			}  		} else// no source  		 {  			dynamic sourceentry = new JObject () as dynamic;  			sourceentry.Filters = deinterlaceentry;  			obj.Sources.Add (sourceentry);  		}  	}  	// non interleave audio and video  	if (checkBoxDoNotInterleave.Checked) {  		if (obj.Outputs != null) {  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format") {  						output.Condition = "NonInterleaved";  					}  				}  			}  		}  	}  	// Thumbnails settings  	if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  		if (obj.Codecs == null) {  			obj.Codecs = new JArray () as dynamic;  		}  		if (obj.Outputs == null) {  			obj.Outputs = new JArray () as dynamic;  		}  		if (checkBoxGenThumbnailsJPG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  		}  		if (checkBoxGenThumbnailsPNG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  		}  		if (checkBoxGenThumbnailsBMP.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  		}  	}  	textBoxConfiguration.Text = obj.ToString ();  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxAddAutomatic.Checked) {  	if (mode == TypeConfig.Empty) {  		jsondata = @"{""Version"": 1.0}";  	}  	dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  	////////////////////////////  	// Cleaning of JSON  	////////////////////////////  	// clean auto deinterlaing  	// clean all sources  	//if (obj.Sources != null) obj.Sources.Parent.Remove();  	// clean trimming  	// clean deinterlace filter  	// clean overlay  	// clean cropping  	// clean rotation  	if (obj.Sources != null) {  		var listDelete = new List<dynamic> ();  		foreach (var source in obj.Sources) {  			listDelete.Add (source);  		}  		listDelete.ForEach (c => c.Remove ());  		if (obj.Sources.Count == 0) {  			obj.Sources.Parent.Remove ();  		}  	}  	// Clean Insert silent audio track  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  				codec.Condition.Parent.Remove ();  			}  		}  	}  	// Clean InsertBlackvideo flag  	if (obj.Codecs != null) {  		if (_videostreaminsertedforblackvideo) {  			int nbvideo = 0;  			dynamic codecselected = null;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					nbvideo++;  					codecselected = codec;  				}  			}  			if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  				codecselected.Remove ();  			}  		} else {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  					codec.Condition.Parent.Remove ();  				}  			}  		}  	}  	// Clean PreserveResolutionAfterRotation  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  				codec.PreserveResolutionAfterRotation.Parent.Remove ();  			}  		}  	}  	// Clean StretchMode  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  				codec.StretchMode.Parent.Remove ();  			}  		}  	}  	if (obj.Codecs != null)// clean thumbnail entry in Codecs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var codec in obj.Codecs) {  			if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  				listDelete.Add (codec);  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var output in obj.Outputs) {  			if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  				string valuestr = (string)output.Format.Type;  				if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  					output.Condition.Parent.Remove ();  				}  				if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  					listDelete.Add (output);  				}  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	////////////////////////////  	// End of Cleaning  	////////////////////////////  	// Trimming  	if (checkBoxUseEDL.Checked)// EDL MODE  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  			dynamic time = new JObject ();  			bool insert = false;  			if (entry.AssetID != null) {  				time.AssetID = entry.AssetID;  				insert = true;  			}  			if (entry.Start != null) {  				time.StartTime = entry.Start + buttonShowEDL.Offset;  				insert = true;  			}  			if (entry.Duration != null) {  				time.Duration = entry.Duration;  				insert = true;  			}  			if (insert) {  				obj.Sources.Add (time);  			}  		}  	} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		if (comboBoxSourceAsset.Items.Count > 1) {  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		}  		if (checkBoxSourceTrimmingStart.Checked) {  			time.StartTime = timeControlStartTime.TimeStampWithOffset;  			if (checkBoxSourceTrimmingEnd.Checked) {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  			}  		} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  		 {  			time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  		}  		obj.Sources.Add (time);  	} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		obj.Sources.Add (time);  	}  	// Subcliping - we need to add top bitrate values  	if (_subclipConfig != null)// subclipping. we need to add top bitrate values  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic streamA = new JObject ();  		streamA.Type = "AudioStream";  		streamA.Value = "TopBitrate";  		dynamic streamV = new JObject ();  		streamV.Type = "VideoStream";  		streamV.Value = "TopBitrate";  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  			}  		} else {  			dynamic entry = new JObject () as dynamic;  			entry.Streams = new JArray () as dynamic;  			entry.Streams.Add (streamA);  			entry.Streams.Add (streamV);  			obj.Sources.Add (entry);  		}  	}  	// Overlay  	if (checkBoxOverlay.Checked) {  		/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic VideoOverlayEntry = new JObject ();  		dynamic VideoOverlay = new JObject ();  		VideoOverlayEntry.VideoOverlay = VideoOverlay;  		dynamic Position = new JObject ();  		Position.X = (int)numericUpDownVOverlayRectX.Value;  		Position.Y = (int)numericUpDownVOverlayRectY.Value;  		if (checkBoxOverlayResize.Checked) {  			Position.Width = (int)numericUpDownVOverlayRectW.Value;  			Position.Height = (int)numericUpDownVOverlayRectH.Value;  		}  		VideoOverlay.Position = Position;  		VideoOverlay.AudioGainLevel = (decimal)0;  		// Mediaparams  		dynamic MediaParams = new JArray () as dynamic;  		VideoOverlay.MediaParams = MediaParams;  		dynamic OverlayParamVideo = new JObject ();  		MediaParams.Add (OverlayParamVideo);  		OverlayParamVideo.IsOverlay = false;  		OverlayParamVideo.OverlayLoopCount = 1;  		dynamic OverlayParamImage = new JObject ();  		MediaParams.Add (OverlayParamImage);  		OverlayParamImage.IsOverlay = true;  		if (checkBoxOverlayLoop.Checked)// loop checked  		 {  			OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  		} else {  			OverlayParamImage.OverlayLoopCount = 1;  		}  		if (_firstAsset != null) {  			for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  			 {  				dynamic OverlayParam = new JObject ();  				OverlayParam.IsOverlay = false;  				OverlayParam.OverlayLoopCount = 1;  				MediaParams.Add (OverlayParam);  			}  		}  		VideoOverlay.Source = textBoxOverlayFileName.Text;  		if (checkBoxOverlayDuration.Checked)// duration specified  		 {  			dynamic Clip = new JObject ();  			VideoOverlay.Clip = Clip;  			Clip.Duration = textBoxOverlayDuration.Text;  		}  		if (checkBoxOverlayFade.Checked)// fade in and out  		 {  			dynamic FadeInDuration = new JObject ();  			VideoOverlay.FadeInDuration = FadeInDuration;  			FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  			FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  			dynamic FadeOutDuration = new JObject ();  			VideoOverlay.FadeOutDuration = FadeOutDuration;  			FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  			FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  			OverlayParamImage.InputLoop = true;  			// needed for fade in out  		}  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Add (VideoOverlayEntry);  				} else {  					entry.Filters = VideoOverlayEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (VideoOverlayEntry);  			} else {  				Source.Filters = VideoOverlayEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Video Cropping  	if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  		/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic CropEntry = new JObject ();  		dynamic Crop = new JObject ();  		CropEntry.Crop = Crop;  		var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  		Crop.X = CroppingRectangle.X;  		Crop.Y = CroppingRectangle.Y;  		Crop.Width = CroppingRectangle.Width;  		Crop.Height = CroppingRectangle.Height;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Crop = Crop;  					// Add(CropEntry);  				} else {  					entry.Filters = CropEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (CropEntry);  			} else {  				Source.Filters = CropEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Auto rotation  	if (comboBoxRotation.SelectedIndex > 0) {  		/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic RotEntry = new JObject ();  		RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Rotation = comboBoxRotation.SelectedText;  				} else {  					entry.Filters = RotEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			Source.Filters = RotEntry;  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Insert silent audio track  	if (checkBoxInsertSilentAudioTrack.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio") {  					codec.Condition = "InsertSilenceIfNoAudio";  				}  			}  		}  	}  	// Insert PreserveResolutionAfterRotation for video track  	if (checkBoxPreserveResAfterRotation.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.PreserveResolutionAfterRotation = true;  				}  			}  		}  	}  	// Insert video at only the lowest bitrate  	_videostreaminsertedforblackvideo = false;  	if (checkBoxInsertVideo.Checked) {  		if (obj.Codecs != null) {  			bool h264found = false;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					h264found = true;  					codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				}  			}  			if (!h264found) {  				// no h264 data found. Let's insert a low res stream  				dynamic h264 = new JObject () as dynamic;  				h264.KeyFrameInterval = "00:00:02";  				h264.SceneChangeDetection = true;  				h264.Type = "H264Video";  				h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				dynamic h264layer = new JObject () as dynamic;  				h264layer.Profile = "Auto";  				h264layer.Level = "auto";  				h264layer.Bitrate = 10;  				h264layer.MaxBitrate = 10;  				h264layer.BufferWindow = "00:00:05";  				h264layer.Width = 64;  				h264layer.Height = 64;  				h264layer.BFrames = 3;  				h264layer.ReferenceFrames = 3;  				h264layer.AdaptiveBFrame = true;  				h264layer.Type = "H264Layer";  				h264layer.FrameRate = "0/1";  				h264.H264Layers = new JArray () as dynamic;  				h264.H264Layers.Add (h264layer);  				obj.Codecs.Add (h264);  				_videostreaminsertedforblackvideo = true;  			}  		}  	}  	// Autostrech mode to none ?  	if (checkBoxDisableAutoStretchMode.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.StretchMode = "None";  				}  			}  		}  	}  	// Insert disable auto deinterlacing  	if (checkBoxDisableAutoDeinterlacing.Checked) {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic modeeentry = new JObject () as dynamic;  		modeeentry.Mode = "Off";  		dynamic deinterlaceentry = new JObject () as dynamic;  		deinterlaceentry.Deinterlace = modeeentry;  		if (obj.Sources.Count > 0) {  			foreach (dynamic source in obj.Sources) {  				bool DeinterModeSet = false;  				if (source.Filters != null) {  					if (source.Filters.Deinterlace != null) {  						source.Filters.Deinterlace.Mode = "Off";  					} else {  						source.Filters.Deinterlace = modeeentry;  					}  					DeinterModeSet = true;  				}  				if (!DeinterModeSet) {  					source.Filters = deinterlaceentry;  				}  			}  		} else// no source  		 {  			dynamic sourceentry = new JObject () as dynamic;  			sourceentry.Filters = deinterlaceentry;  			obj.Sources.Add (sourceentry);  		}  	}  	// non interleave audio and video  	if (checkBoxDoNotInterleave.Checked) {  		if (obj.Outputs != null) {  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format") {  						output.Condition = "NonInterleaved";  					}  				}  			}  		}  	}  	// Thumbnails settings  	if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  		if (obj.Codecs == null) {  			obj.Codecs = new JArray () as dynamic;  		}  		if (obj.Outputs == null) {  			obj.Outputs = new JArray () as dynamic;  		}  		if (checkBoxGenThumbnailsJPG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  		}  		if (checkBoxGenThumbnailsPNG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  		}  		if (checkBoxGenThumbnailsBMP.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  		}  	}  	textBoxConfiguration.Text = obj.ToString ();  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxAddAutomatic.Checked) {  	if (mode == TypeConfig.Empty) {  		jsondata = @"{""Version"": 1.0}";  	}  	dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  	////////////////////////////  	// Cleaning of JSON  	////////////////////////////  	// clean auto deinterlaing  	// clean all sources  	//if (obj.Sources != null) obj.Sources.Parent.Remove();  	// clean trimming  	// clean deinterlace filter  	// clean overlay  	// clean cropping  	// clean rotation  	if (obj.Sources != null) {  		var listDelete = new List<dynamic> ();  		foreach (var source in obj.Sources) {  			listDelete.Add (source);  		}  		listDelete.ForEach (c => c.Remove ());  		if (obj.Sources.Count == 0) {  			obj.Sources.Parent.Remove ();  		}  	}  	// Clean Insert silent audio track  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  				codec.Condition.Parent.Remove ();  			}  		}  	}  	// Clean InsertBlackvideo flag  	if (obj.Codecs != null) {  		if (_videostreaminsertedforblackvideo) {  			int nbvideo = 0;  			dynamic codecselected = null;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					nbvideo++;  					codecselected = codec;  				}  			}  			if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  				codecselected.Remove ();  			}  		} else {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  					codec.Condition.Parent.Remove ();  				}  			}  		}  	}  	// Clean PreserveResolutionAfterRotation  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  				codec.PreserveResolutionAfterRotation.Parent.Remove ();  			}  		}  	}  	// Clean StretchMode  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  				codec.StretchMode.Parent.Remove ();  			}  		}  	}  	if (obj.Codecs != null)// clean thumbnail entry in Codecs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var codec in obj.Codecs) {  			if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  				listDelete.Add (codec);  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var output in obj.Outputs) {  			if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  				string valuestr = (string)output.Format.Type;  				if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  					output.Condition.Parent.Remove ();  				}  				if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  					listDelete.Add (output);  				}  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	////////////////////////////  	// End of Cleaning  	////////////////////////////  	// Trimming  	if (checkBoxUseEDL.Checked)// EDL MODE  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  			dynamic time = new JObject ();  			bool insert = false;  			if (entry.AssetID != null) {  				time.AssetID = entry.AssetID;  				insert = true;  			}  			if (entry.Start != null) {  				time.StartTime = entry.Start + buttonShowEDL.Offset;  				insert = true;  			}  			if (entry.Duration != null) {  				time.Duration = entry.Duration;  				insert = true;  			}  			if (insert) {  				obj.Sources.Add (time);  			}  		}  	} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		if (comboBoxSourceAsset.Items.Count > 1) {  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		}  		if (checkBoxSourceTrimmingStart.Checked) {  			time.StartTime = timeControlStartTime.TimeStampWithOffset;  			if (checkBoxSourceTrimmingEnd.Checked) {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  			}  		} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  		 {  			time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  		}  		obj.Sources.Add (time);  	} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		obj.Sources.Add (time);  	}  	// Subcliping - we need to add top bitrate values  	if (_subclipConfig != null)// subclipping. we need to add top bitrate values  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic streamA = new JObject ();  		streamA.Type = "AudioStream";  		streamA.Value = "TopBitrate";  		dynamic streamV = new JObject ();  		streamV.Type = "VideoStream";  		streamV.Value = "TopBitrate";  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  			}  		} else {  			dynamic entry = new JObject () as dynamic;  			entry.Streams = new JArray () as dynamic;  			entry.Streams.Add (streamA);  			entry.Streams.Add (streamV);  			obj.Sources.Add (entry);  		}  	}  	// Overlay  	if (checkBoxOverlay.Checked) {  		/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic VideoOverlayEntry = new JObject ();  		dynamic VideoOverlay = new JObject ();  		VideoOverlayEntry.VideoOverlay = VideoOverlay;  		dynamic Position = new JObject ();  		Position.X = (int)numericUpDownVOverlayRectX.Value;  		Position.Y = (int)numericUpDownVOverlayRectY.Value;  		if (checkBoxOverlayResize.Checked) {  			Position.Width = (int)numericUpDownVOverlayRectW.Value;  			Position.Height = (int)numericUpDownVOverlayRectH.Value;  		}  		VideoOverlay.Position = Position;  		VideoOverlay.AudioGainLevel = (decimal)0;  		// Mediaparams  		dynamic MediaParams = new JArray () as dynamic;  		VideoOverlay.MediaParams = MediaParams;  		dynamic OverlayParamVideo = new JObject ();  		MediaParams.Add (OverlayParamVideo);  		OverlayParamVideo.IsOverlay = false;  		OverlayParamVideo.OverlayLoopCount = 1;  		dynamic OverlayParamImage = new JObject ();  		MediaParams.Add (OverlayParamImage);  		OverlayParamImage.IsOverlay = true;  		if (checkBoxOverlayLoop.Checked)// loop checked  		 {  			OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  		} else {  			OverlayParamImage.OverlayLoopCount = 1;  		}  		if (_firstAsset != null) {  			for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  			 {  				dynamic OverlayParam = new JObject ();  				OverlayParam.IsOverlay = false;  				OverlayParam.OverlayLoopCount = 1;  				MediaParams.Add (OverlayParam);  			}  		}  		VideoOverlay.Source = textBoxOverlayFileName.Text;  		if (checkBoxOverlayDuration.Checked)// duration specified  		 {  			dynamic Clip = new JObject ();  			VideoOverlay.Clip = Clip;  			Clip.Duration = textBoxOverlayDuration.Text;  		}  		if (checkBoxOverlayFade.Checked)// fade in and out  		 {  			dynamic FadeInDuration = new JObject ();  			VideoOverlay.FadeInDuration = FadeInDuration;  			FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  			FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  			dynamic FadeOutDuration = new JObject ();  			VideoOverlay.FadeOutDuration = FadeOutDuration;  			FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  			FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  			OverlayParamImage.InputLoop = true;  			// needed for fade in out  		}  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Add (VideoOverlayEntry);  				} else {  					entry.Filters = VideoOverlayEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (VideoOverlayEntry);  			} else {  				Source.Filters = VideoOverlayEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Video Cropping  	if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  		/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic CropEntry = new JObject ();  		dynamic Crop = new JObject ();  		CropEntry.Crop = Crop;  		var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  		Crop.X = CroppingRectangle.X;  		Crop.Y = CroppingRectangle.Y;  		Crop.Width = CroppingRectangle.Width;  		Crop.Height = CroppingRectangle.Height;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Crop = Crop;  					// Add(CropEntry);  				} else {  					entry.Filters = CropEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (CropEntry);  			} else {  				Source.Filters = CropEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Auto rotation  	if (comboBoxRotation.SelectedIndex > 0) {  		/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic RotEntry = new JObject ();  		RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Rotation = comboBoxRotation.SelectedText;  				} else {  					entry.Filters = RotEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			Source.Filters = RotEntry;  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Insert silent audio track  	if (checkBoxInsertSilentAudioTrack.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio") {  					codec.Condition = "InsertSilenceIfNoAudio";  				}  			}  		}  	}  	// Insert PreserveResolutionAfterRotation for video track  	if (checkBoxPreserveResAfterRotation.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.PreserveResolutionAfterRotation = true;  				}  			}  		}  	}  	// Insert video at only the lowest bitrate  	_videostreaminsertedforblackvideo = false;  	if (checkBoxInsertVideo.Checked) {  		if (obj.Codecs != null) {  			bool h264found = false;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					h264found = true;  					codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				}  			}  			if (!h264found) {  				// no h264 data found. Let's insert a low res stream  				dynamic h264 = new JObject () as dynamic;  				h264.KeyFrameInterval = "00:00:02";  				h264.SceneChangeDetection = true;  				h264.Type = "H264Video";  				h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				dynamic h264layer = new JObject () as dynamic;  				h264layer.Profile = "Auto";  				h264layer.Level = "auto";  				h264layer.Bitrate = 10;  				h264layer.MaxBitrate = 10;  				h264layer.BufferWindow = "00:00:05";  				h264layer.Width = 64;  				h264layer.Height = 64;  				h264layer.BFrames = 3;  				h264layer.ReferenceFrames = 3;  				h264layer.AdaptiveBFrame = true;  				h264layer.Type = "H264Layer";  				h264layer.FrameRate = "0/1";  				h264.H264Layers = new JArray () as dynamic;  				h264.H264Layers.Add (h264layer);  				obj.Codecs.Add (h264);  				_videostreaminsertedforblackvideo = true;  			}  		}  	}  	// Autostrech mode to none ?  	if (checkBoxDisableAutoStretchMode.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.StretchMode = "None";  				}  			}  		}  	}  	// Insert disable auto deinterlacing  	if (checkBoxDisableAutoDeinterlacing.Checked) {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic modeeentry = new JObject () as dynamic;  		modeeentry.Mode = "Off";  		dynamic deinterlaceentry = new JObject () as dynamic;  		deinterlaceentry.Deinterlace = modeeentry;  		if (obj.Sources.Count > 0) {  			foreach (dynamic source in obj.Sources) {  				bool DeinterModeSet = false;  				if (source.Filters != null) {  					if (source.Filters.Deinterlace != null) {  						source.Filters.Deinterlace.Mode = "Off";  					} else {  						source.Filters.Deinterlace = modeeentry;  					}  					DeinterModeSet = true;  				}  				if (!DeinterModeSet) {  					source.Filters = deinterlaceentry;  				}  			}  		} else// no source  		 {  			dynamic sourceentry = new JObject () as dynamic;  			sourceentry.Filters = deinterlaceentry;  			obj.Sources.Add (sourceentry);  		}  	}  	// non interleave audio and video  	if (checkBoxDoNotInterleave.Checked) {  		if (obj.Outputs != null) {  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format") {  						output.Condition = "NonInterleaved";  					}  				}  			}  		}  	}  	// Thumbnails settings  	if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  		if (obj.Codecs == null) {  			obj.Codecs = new JArray () as dynamic;  		}  		if (obj.Outputs == null) {  			obj.Outputs = new JArray () as dynamic;  		}  		if (checkBoxGenThumbnailsJPG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  		}  		if (checkBoxGenThumbnailsPNG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  		}  		if (checkBoxGenThumbnailsBMP.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  		}  	}  	textBoxConfiguration.Text = obj.ToString ();  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxAddAutomatic.Checked) {  	if (mode == TypeConfig.Empty) {  		jsondata = @"{""Version"": 1.0}";  	}  	dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject (jsondata);  	////////////////////////////  	// Cleaning of JSON  	////////////////////////////  	// clean auto deinterlaing  	// clean all sources  	//if (obj.Sources != null) obj.Sources.Parent.Remove();  	// clean trimming  	// clean deinterlace filter  	// clean overlay  	// clean cropping  	// clean rotation  	if (obj.Sources != null) {  		var listDelete = new List<dynamic> ();  		foreach (var source in obj.Sources) {  			listDelete.Add (source);  		}  		listDelete.ForEach (c => c.Remove ());  		if (obj.Sources.Count == 0) {  			obj.Sources.Parent.Remove ();  		}  	}  	// Clean Insert silent audio track  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "AACAudio" && codec.Condition != null && codec.Condition == "InsertSilenceIfNoAudio") {  				codec.Condition.Parent.Remove ();  			}  		}  	}  	// Clean InsertBlackvideo flag  	if (obj.Codecs != null) {  		if (_videostreaminsertedforblackvideo) {  			int nbvideo = 0;  			dynamic codecselected = null;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					nbvideo++;  					codecselected = codec;  				}  			}  			if (nbvideo == 1 && codecselected.Condition != null && (codecselected.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codecselected.Condition == "InsertBlackIfNoVideo")) {  				codecselected.Remove ();  			}  		} else {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && (codec.Type == "H264Video") && codec.Condition != null && (codec.Condition == "InsertBlackIfNoVideoBottomLayerOnly" || codec.Condition == "InsertBlackIfNoVideo")) {  					codec.Condition.Parent.Remove ();  				}  			}  		}  	}  	// Clean PreserveResolutionAfterRotation  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video" || codec.Type == "BmpImage" || codec.Type == "JpgImage" || codec.Type == "PngImage") && codec.PreserveResolutionAfterRotation != null) {  				codec.PreserveResolutionAfterRotation.Parent.Remove ();  			}  		}  	}  	// Clean StretchMode  	if (obj.Codecs != null) {  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && (codec.Type == "H264Video") && codec.StretchMode != null) {  				codec.StretchMode.Parent.Remove ();  			}  		}  	}  	if (obj.Codecs != null)// clean thumbnail entry in Codecs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var codec in obj.Codecs) {  			if (codec.JpgLayers != null || codec.PngLayers != null || codec.BmpLayers != null) {  				listDelete.Add (codec);  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	if (obj.Outputs != null)// clean noninterleave and thumbnail entry in Outputs  	 {  		var listDelete = new List<dynamic> ();  		foreach (var output in obj.Outputs) {  			if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  				string valuestr = (string)output.Format.Type;  				if (valuestr == "MP4Format" && output.Condition != null && output.Condition == "NonInterleaved") {  					output.Condition.Parent.Remove ();  				}  				if (valuestr == "JpgFormat" || valuestr == "PngFormat" || valuestr == "BmpFormat") {  					listDelete.Add (output);  				}  			}  		}  		listDelete.ForEach (c => c.Remove ());  	}  	////////////////////////////  	// End of Cleaning  	////////////////////////////  	// Trimming  	if (checkBoxUseEDL.Checked)// EDL MODE  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		foreach (var entry in buttonShowEDL.GetEDLEntries ()) {  			dynamic time = new JObject ();  			bool insert = false;  			if (entry.AssetID != null) {  				time.AssetID = entry.AssetID;  				insert = true;  			}  			if (entry.Start != null) {  				time.StartTime = entry.Start + buttonShowEDL.Offset;  				insert = true;  			}  			if (entry.Duration != null) {  				time.Duration = entry.Duration;  				insert = true;  			}  			if (insert) {  				obj.Sources.Add (time);  			}  		}  	} else if (checkBoxSourceTrimmingStart.Checked || checkBoxSourceTrimmingEnd.Checked)// Only start or end or both (no edl)  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		if (comboBoxSourceAsset.Items.Count > 1) {  			time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		}  		if (checkBoxSourceTrimmingStart.Checked) {  			time.StartTime = timeControlStartTime.TimeStampWithOffset;  			if (checkBoxSourceTrimmingEnd.Checked) {  				time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.TimeStampWithOffset;  			}  		} else if (checkBoxSourceTrimmingEnd.Checked)// only end time specified  		 {  			time.Duration = timeControlEndTime.TimeStampWithOffset - timeControlStartTime.GetOffSetAsTimeSpan ();  		}  		obj.Sources.Add (time);  	} else if (!checkBoxSourceTrimmingStart.Checked && !checkBoxSourceTrimmingEnd.Checked && comboBoxSourceAsset.Items.Count > 1)// No time selected but several input assets  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic time = new JObject ();  		time.AssetId = ((Item)comboBoxSourceAsset.SelectedItem).Value;  		obj.Sources.Add (time);  	}  	// Subcliping - we need to add top bitrate values  	if (_subclipConfig != null)// subclipping. we need to add top bitrate values  	 {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic streamA = new JObject ();  		streamA.Type = "AudioStream";  		streamA.Value = "TopBitrate";  		dynamic streamV = new JObject ();  		streamV.Type = "VideoStream";  		streamV.Value = "TopBitrate";  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				entry.Streams = new JArray () as dynamic;  				entry.Streams.Add (streamA);  				entry.Streams.Add (streamV);  			}  		} else {  			dynamic entry = new JObject () as dynamic;  			entry.Streams = new JArray () as dynamic;  			entry.Streams.Add (streamA);  			entry.Streams.Add (streamV);  			obj.Sources.Add (entry);  		}  	}  	// Overlay  	if (checkBoxOverlay.Checked) {  		/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic VideoOverlayEntry = new JObject ();  		dynamic VideoOverlay = new JObject ();  		VideoOverlayEntry.VideoOverlay = VideoOverlay;  		dynamic Position = new JObject ();  		Position.X = (int)numericUpDownVOverlayRectX.Value;  		Position.Y = (int)numericUpDownVOverlayRectY.Value;  		if (checkBoxOverlayResize.Checked) {  			Position.Width = (int)numericUpDownVOverlayRectW.Value;  			Position.Height = (int)numericUpDownVOverlayRectH.Value;  		}  		VideoOverlay.Position = Position;  		VideoOverlay.AudioGainLevel = (decimal)0;  		// Mediaparams  		dynamic MediaParams = new JArray () as dynamic;  		VideoOverlay.MediaParams = MediaParams;  		dynamic OverlayParamVideo = new JObject ();  		MediaParams.Add (OverlayParamVideo);  		OverlayParamVideo.IsOverlay = false;  		OverlayParamVideo.OverlayLoopCount = 1;  		dynamic OverlayParamImage = new JObject ();  		MediaParams.Add (OverlayParamImage);  		OverlayParamImage.IsOverlay = true;  		if (checkBoxOverlayLoop.Checked)// loop checked  		 {  			OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  		} else {  			OverlayParamImage.OverlayLoopCount = 1;  		}  		if (_firstAsset != null) {  			for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  			 {  				dynamic OverlayParam = new JObject ();  				OverlayParam.IsOverlay = false;  				OverlayParam.OverlayLoopCount = 1;  				MediaParams.Add (OverlayParam);  			}  		}  		VideoOverlay.Source = textBoxOverlayFileName.Text;  		if (checkBoxOverlayDuration.Checked)// duration specified  		 {  			dynamic Clip = new JObject ();  			VideoOverlay.Clip = Clip;  			Clip.Duration = textBoxOverlayDuration.Text;  		}  		if (checkBoxOverlayFade.Checked)// fade in and out  		 {  			dynamic FadeInDuration = new JObject ();  			VideoOverlay.FadeInDuration = FadeInDuration;  			FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  			FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  			dynamic FadeOutDuration = new JObject ();  			VideoOverlay.FadeOutDuration = FadeOutDuration;  			FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  			FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  			OverlayParamImage.InputLoop = true;  			// needed for fade in out  		}  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Add (VideoOverlayEntry);  				} else {  					entry.Filters = VideoOverlayEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (VideoOverlayEntry);  			} else {  				Source.Filters = VideoOverlayEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Video Cropping  	if (checkBoxCropVideo.Checked && buttonRegionEditor.GetSavedPolygonesDecimalMode ().Count > 0) {  		/*                        { "Version": 1.0' "Sources": [ {   "Streams": []'   "Filters": {     "Crop": {         "X": 240'         "Y": 0'         "Width": 1440'         "Height": 1080     }   }'   "Pad": true } ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic CropEntry = new JObject ();  		dynamic Crop = new JObject ();  		CropEntry.Crop = Crop;  		var CroppingRectangle = buttonRegionEditor.GetSavedPolygonesAsRectangleResolutionMode ().FirstOrDefault ();  		Crop.X = CroppingRectangle.X;  		Crop.Y = CroppingRectangle.Y;  		Crop.Width = CroppingRectangle.Width;  		Crop.Height = CroppingRectangle.Height;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Crop = Crop;  					// Add(CropEntry);  				} else {  					entry.Filters = CropEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			if (Source.Filters != null) {  				Source.Filters.Add (CropEntry);  			} else {  				Source.Filters = CropEntry;  			}  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Auto rotation  	if (comboBoxRotation.SelectedIndex > 0) {  		/*                        { "Version": 1.0'   "Sources": [     {       "Filters": {         "Rotation": "90"       }     }   ] ]' "Codecs": [ {      */if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		// let's prepare objects  		dynamic RotEntry = new JObject ();  		RotEntry.Rotation = (string)comboBoxRotation.SelectedItem;  		// now we put these objects in the preset  		if (obj.Sources.Count > 0) {  			foreach (dynamic entry in obj.Sources) {  				if (entry.Filters != null) {  					entry.Filters.Rotation = comboBoxRotation.SelectedText;  				} else {  					entry.Filters = RotEntry;  				}  				if (entry.Streams == null) {  					entry.Streams = new JArray () as dynamic;  				}  			}  		} else {  			dynamic Source = new JObject ();  			obj.Sources.Add (Source);  			Source.Filters = RotEntry;  			if (Source.Streams == null) {  				Source.Streams = new JArray () as dynamic;  			}  		}  	}  	// Insert silent audio track  	if (checkBoxInsertSilentAudioTrack.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "AACAudio") {  					codec.Condition = "InsertSilenceIfNoAudio";  				}  			}  		}  	}  	// Insert PreserveResolutionAfterRotation for video track  	if (checkBoxPreserveResAfterRotation.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.PreserveResolutionAfterRotation = true;  				}  			}  		}  	}  	// Insert video at only the lowest bitrate  	_videostreaminsertedforblackvideo = false;  	if (checkBoxInsertVideo.Checked) {  		if (obj.Codecs != null) {  			bool h264found = false;  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					h264found = true;  					codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				}  			}  			if (!h264found) {  				// no h264 data found. Let's insert a low res stream  				dynamic h264 = new JObject () as dynamic;  				h264.KeyFrameInterval = "00:00:02";  				h264.SceneChangeDetection = true;  				h264.Type = "H264Video";  				h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  				dynamic h264layer = new JObject () as dynamic;  				h264layer.Profile = "Auto";  				h264layer.Level = "auto";  				h264layer.Bitrate = 10;  				h264layer.MaxBitrate = 10;  				h264layer.BufferWindow = "00:00:05";  				h264layer.Width = 64;  				h264layer.Height = 64;  				h264layer.BFrames = 3;  				h264layer.ReferenceFrames = 3;  				h264layer.AdaptiveBFrame = true;  				h264layer.Type = "H264Layer";  				h264layer.FrameRate = "0/1";  				h264.H264Layers = new JArray () as dynamic;  				h264.H264Layers.Add (h264layer);  				obj.Codecs.Add (h264);  				_videostreaminsertedforblackvideo = true;  			}  		}  	}  	// Autostrech mode to none ?  	if (checkBoxDisableAutoStretchMode.Checked) {  		if (obj.Codecs != null) {  			foreach (var codec in obj.Codecs) {  				if (codec.Type != null && codec.Type == "H264Video") {  					codec.StretchMode = "None";  				}  			}  		}  	}  	// Insert disable auto deinterlacing  	if (checkBoxDisableAutoDeinterlacing.Checked) {  		if (obj.Sources == null) {  			obj.Sources = new JArray () as dynamic;  		}  		dynamic modeeentry = new JObject () as dynamic;  		modeeentry.Mode = "Off";  		dynamic deinterlaceentry = new JObject () as dynamic;  		deinterlaceentry.Deinterlace = modeeentry;  		if (obj.Sources.Count > 0) {  			foreach (dynamic source in obj.Sources) {  				bool DeinterModeSet = false;  				if (source.Filters != null) {  					if (source.Filters.Deinterlace != null) {  						source.Filters.Deinterlace.Mode = "Off";  					} else {  						source.Filters.Deinterlace = modeeentry;  					}  					DeinterModeSet = true;  				}  				if (!DeinterModeSet) {  					source.Filters = deinterlaceentry;  				}  			}  		} else// no source  		 {  			dynamic sourceentry = new JObject () as dynamic;  			sourceentry.Filters = deinterlaceentry;  			obj.Sources.Add (sourceentry);  		}  	}  	// non interleave audio and video  	if (checkBoxDoNotInterleave.Checked) {  		if (obj.Outputs != null) {  			foreach (var output in obj.Outputs) {  				if (output.Format != null && output.Format.Type != null && output.Format.Type.Type == JTokenType.String) {  					string valuestr = (string)output.Format.Type;  					if (valuestr == "MP4Format") {  						output.Condition = "NonInterleaved";  					}  				}  			}  		}  	}  	// Thumbnails settings  	if (checkBoxGenThumbnailsJPG.Checked || checkBoxGenThumbnailsPNG.Checked || checkBoxGenThumbnailsBMP.Checked) {  		if (obj.Codecs == null) {  			obj.Codecs = new JArray () as dynamic;  		}  		if (obj.Outputs == null) {  			obj.Outputs = new JArray () as dynamic;  		}  		if (checkBoxGenThumbnailsJPG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Jpg' textBoxThFileNameJPG.Text' checkBoxBestJPG.Checked ? strBest : textBoxThTimeStartJPG.Text' textBoxThTimeStepJPG.Text' textBoxThTimeRangeJPG.Text' (int)numericUpDownThWidthJPG.Value' (int)numericUpDownThHeightJPG.Value' checkBoxPresResRotJPG.Checked' radioButtonPixelsJPG.Checked' (int)numericUpDownThQuality.Value);  		}  		if (checkBoxGenThumbnailsPNG.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Png' textBoxThFileNamePNG.Text' checkBoxBestPNG.Checked ? strBest : textBoxThTimeStartPNG.Text' textBoxThTimeStepPNG.Text' textBoxThTimeRangePNG.Text' (int)numericUpDownThWidthPNG.Value' (int)numericUpDownThHeightPNG.Value' checkBoxPresResRotPNG.Checked' radioButtonPixelsPNG.Checked);  		}  		if (checkBoxGenThumbnailsBMP.Checked) {  			AddThumbnailJSON (ref obj' ThumbnailType.Bmp' textBoxThFileNameBMP.Text' checkBoxBestBMP.Checked ? strBest : textBoxThTimeStartBMP.Text' textBoxThTimeStepBMP.Text' textBoxThTimeRangeBMP.Text' (int)numericUpDownThWidthBMP.Value' (int)numericUpDownThHeightBMP.Value' checkBoxPresResRotBMP.Checked' radioButtonPixelsBMP.Checked);  		}  	}  	textBoxConfiguration.Text = obj.ToString ();  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxOverlay.Checked) {  	/*                         "Sources": [                             {                               "Streams": []'                               "Filters": {                                 "VideoOverlay": {                                   "Position": {                                     "X": 0'                                     "Y": 0'                                     "Width": 100'                                     "Height": 100                                   }'                                   "AudioGainLevel": 0.0'                                   "MediaParams": [                                     {                                       "OverlayLoopCount": 1                                     }'                                     {                                       "IsOverlay": true'                                       "OverlayLoopCount": 1'                                       "InputLoop": true                                     }                                   ]'                                   "Source": "OverlayImage.png"'                                   "Clip": {                                     "Duration": "00:00:05"                                   }'                                   "FadeInDuration": {                                     "StartTime": "00:00:00"'                                     "Duration": "00:00:01"                                   }'                                   "FadeOutDuration": {                                     "StartTime": "00:00:03"'                                     "Duration": "00:00:04"                                   }                                 }                               }'                               "Pad": true                             }                           ]'     */if (obj.Sources == null) {  		obj.Sources = new JArray () as dynamic;  	}  	// let's prepare objects  	dynamic VideoOverlayEntry = new JObject ();  	dynamic VideoOverlay = new JObject ();  	VideoOverlayEntry.VideoOverlay = VideoOverlay;  	dynamic Position = new JObject ();  	Position.X = (int)numericUpDownVOverlayRectX.Value;  	Position.Y = (int)numericUpDownVOverlayRectY.Value;  	if (checkBoxOverlayResize.Checked) {  		Position.Width = (int)numericUpDownVOverlayRectW.Value;  		Position.Height = (int)numericUpDownVOverlayRectH.Value;  	}  	VideoOverlay.Position = Position;  	VideoOverlay.AudioGainLevel = (decimal)0;  	// Mediaparams  	dynamic MediaParams = new JArray () as dynamic;  	VideoOverlay.MediaParams = MediaParams;  	dynamic OverlayParamVideo = new JObject ();  	MediaParams.Add (OverlayParamVideo);  	OverlayParamVideo.IsOverlay = false;  	OverlayParamVideo.OverlayLoopCount = 1;  	dynamic OverlayParamImage = new JObject ();  	MediaParams.Add (OverlayParamImage);  	OverlayParamImage.IsOverlay = true;  	if (checkBoxOverlayLoop.Checked)// loop checked  	 {  		OverlayParamImage.OverlayLoopCount = (int)numericUpDownOverlayLoop.Value;  	} else {  		OverlayParamImage.OverlayLoopCount = 1;  	}  	if (_firstAsset != null) {  		for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  		 {  			dynamic OverlayParam = new JObject ();  			OverlayParam.IsOverlay = false;  			OverlayParam.OverlayLoopCount = 1;  			MediaParams.Add (OverlayParam);  		}  	}  	VideoOverlay.Source = textBoxOverlayFileName.Text;  	if (checkBoxOverlayDuration.Checked)// duration specified  	 {  		dynamic Clip = new JObject ();  		VideoOverlay.Clip = Clip;  		Clip.Duration = textBoxOverlayDuration.Text;  	}  	if (checkBoxOverlayFade.Checked)// fade in and out  	 {  		dynamic FadeInDuration = new JObject ();  		VideoOverlay.FadeInDuration = FadeInDuration;  		FadeInDuration.StartTime = textBoxVOverlayFadeInStartTime.Text;  		FadeInDuration.Duration = textBoxVOverlayFadeInDuration.Text;  		dynamic FadeOutDuration = new JObject ();  		VideoOverlay.FadeOutDuration = FadeOutDuration;  		FadeOutDuration.StartTime = textBoxVOverlayFadeOutStartTime.Text;  		FadeOutDuration.Duration = textBoxVOverlayFadeOutDuration.Text;  		OverlayParamImage.InputLoop = true;  		// needed for fade in out  	}  	// now we put these objects in the preset  	if (obj.Sources.Count > 0) {  		foreach (dynamic entry in obj.Sources) {  			if (entry.Filters != null) {  				entry.Filters.Add (VideoOverlayEntry);  			} else {  				entry.Filters = VideoOverlayEntry;  			}  			if (entry.Streams == null) {  				entry.Streams = new JArray () as dynamic;  			}  		}  	} else {  		dynamic Source = new JObject ();  		obj.Sources.Add (Source);  		if (Source.Filters != null) {  			Source.Filters.Add (VideoOverlayEntry);  		} else {  			Source.Filters = VideoOverlayEntry;  		}  		if (Source.Streams == null) {  			Source.Streams = new JArray () as dynamic;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (_firstAsset != null) {  	for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file  	 {  		dynamic OverlayParam = new JObject ();  		OverlayParam.IsOverlay = false;  		OverlayParam.OverlayLoopCount = 1;  		MediaParams.Add (OverlayParam);  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: for (int i = 2; i < _firstAsset.AssetFiles.Count (); i++)// if more than two files in the asset' we need to add Mediaparams for each extra file   {  	dynamic OverlayParam = new JObject ();  	OverlayParam.IsOverlay = false;  	OverlayParam.OverlayLoopCount = 1;  	MediaParams.Add (OverlayParam);  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxInsertVideo.Checked) {  	if (obj.Codecs != null) {  		bool h264found = false;  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "H264Video") {  				h264found = true;  				codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			}  		}  		if (!h264found) {  			// no h264 data found. Let's insert a low res stream  			dynamic h264 = new JObject () as dynamic;  			h264.KeyFrameInterval = "00:00:02";  			h264.SceneChangeDetection = true;  			h264.Type = "H264Video";  			h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			dynamic h264layer = new JObject () as dynamic;  			h264layer.Profile = "Auto";  			h264layer.Level = "auto";  			h264layer.Bitrate = 10;  			h264layer.MaxBitrate = 10;  			h264layer.BufferWindow = "00:00:05";  			h264layer.Width = 64;  			h264layer.Height = 64;  			h264layer.BFrames = 3;  			h264layer.ReferenceFrames = 3;  			h264layer.AdaptiveBFrame = true;  			h264layer.Type = "H264Layer";  			h264layer.FrameRate = "0/1";  			h264.H264Layers = new JArray () as dynamic;  			h264.H264Layers.Add (h264layer);  			obj.Codecs.Add (h264);  			_videostreaminsertedforblackvideo = true;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxInsertVideo.Checked) {  	if (obj.Codecs != null) {  		bool h264found = false;  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "H264Video") {  				h264found = true;  				codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			}  		}  		if (!h264found) {  			// no h264 data found. Let's insert a low res stream  			dynamic h264 = new JObject () as dynamic;  			h264.KeyFrameInterval = "00:00:02";  			h264.SceneChangeDetection = true;  			h264.Type = "H264Video";  			h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			dynamic h264layer = new JObject () as dynamic;  			h264layer.Profile = "Auto";  			h264layer.Level = "auto";  			h264layer.Bitrate = 10;  			h264layer.MaxBitrate = 10;  			h264layer.BufferWindow = "00:00:05";  			h264layer.Width = 64;  			h264layer.Height = 64;  			h264layer.BFrames = 3;  			h264layer.ReferenceFrames = 3;  			h264layer.AdaptiveBFrame = true;  			h264layer.Type = "H264Layer";  			h264layer.FrameRate = "0/1";  			h264.H264Layers = new JArray () as dynamic;  			h264.H264Layers.Add (h264layer);  			obj.Codecs.Add (h264);  			_videostreaminsertedforblackvideo = true;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxInsertVideo.Checked) {  	if (obj.Codecs != null) {  		bool h264found = false;  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "H264Video") {  				h264found = true;  				codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			}  		}  		if (!h264found) {  			// no h264 data found. Let's insert a low res stream  			dynamic h264 = new JObject () as dynamic;  			h264.KeyFrameInterval = "00:00:02";  			h264.SceneChangeDetection = true;  			h264.Type = "H264Video";  			h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			dynamic h264layer = new JObject () as dynamic;  			h264layer.Profile = "Auto";  			h264layer.Level = "auto";  			h264layer.Bitrate = 10;  			h264layer.MaxBitrate = 10;  			h264layer.BufferWindow = "00:00:05";  			h264layer.Width = 64;  			h264layer.Height = 64;  			h264layer.BFrames = 3;  			h264layer.ReferenceFrames = 3;  			h264layer.AdaptiveBFrame = true;  			h264layer.Type = "H264Layer";  			h264layer.FrameRate = "0/1";  			h264.H264Layers = new JArray () as dynamic;  			h264.H264Layers.Add (h264layer);  			obj.Codecs.Add (h264);  			_videostreaminsertedforblackvideo = true;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxInsertVideo.Checked) {  	if (obj.Codecs != null) {  		bool h264found = false;  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "H264Video") {  				h264found = true;  				codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			}  		}  		if (!h264found) {  			// no h264 data found. Let's insert a low res stream  			dynamic h264 = new JObject () as dynamic;  			h264.KeyFrameInterval = "00:00:02";  			h264.SceneChangeDetection = true;  			h264.Type = "H264Video";  			h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			dynamic h264layer = new JObject () as dynamic;  			h264layer.Profile = "Auto";  			h264layer.Level = "auto";  			h264layer.Bitrate = 10;  			h264layer.MaxBitrate = 10;  			h264layer.BufferWindow = "00:00:05";  			h264layer.Width = 64;  			h264layer.Height = 64;  			h264layer.BFrames = 3;  			h264layer.ReferenceFrames = 3;  			h264layer.AdaptiveBFrame = true;  			h264layer.Type = "H264Layer";  			h264layer.FrameRate = "0/1";  			h264.H264Layers = new JArray () as dynamic;  			h264.H264Layers.Add (h264layer);  			obj.Codecs.Add (h264);  			_videostreaminsertedforblackvideo = true;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxInsertVideo.Checked) {  	if (obj.Codecs != null) {  		bool h264found = false;  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "H264Video") {  				h264found = true;  				codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			}  		}  		if (!h264found) {  			// no h264 data found. Let's insert a low res stream  			dynamic h264 = new JObject () as dynamic;  			h264.KeyFrameInterval = "00:00:02";  			h264.SceneChangeDetection = true;  			h264.Type = "H264Video";  			h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			dynamic h264layer = new JObject () as dynamic;  			h264layer.Profile = "Auto";  			h264layer.Level = "auto";  			h264layer.Bitrate = 10;  			h264layer.MaxBitrate = 10;  			h264layer.BufferWindow = "00:00:05";  			h264layer.Width = 64;  			h264layer.Height = 64;  			h264layer.BFrames = 3;  			h264layer.ReferenceFrames = 3;  			h264layer.AdaptiveBFrame = true;  			h264layer.Type = "H264Layer";  			h264layer.FrameRate = "0/1";  			h264.H264Layers = new JArray () as dynamic;  			h264.H264Layers.Add (h264layer);  			obj.Codecs.Add (h264);  			_videostreaminsertedforblackvideo = true;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (checkBoxInsertVideo.Checked) {  	if (obj.Codecs != null) {  		bool h264found = false;  		foreach (var codec in obj.Codecs) {  			if (codec.Type != null && codec.Type == "H264Video") {  				h264found = true;  				codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			}  		}  		if (!h264found) {  			// no h264 data found. Let's insert a low res stream  			dynamic h264 = new JObject () as dynamic;  			h264.KeyFrameInterval = "00:00:02";  			h264.SceneChangeDetection = true;  			h264.Type = "H264Video";  			h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  			dynamic h264layer = new JObject () as dynamic;  			h264layer.Profile = "Auto";  			h264layer.Level = "auto";  			h264layer.Bitrate = 10;  			h264layer.MaxBitrate = 10;  			h264layer.BufferWindow = "00:00:05";  			h264layer.Width = 64;  			h264layer.Height = 64;  			h264layer.BFrames = 3;  			h264layer.ReferenceFrames = 3;  			h264layer.AdaptiveBFrame = true;  			h264layer.Type = "H264Layer";  			h264layer.FrameRate = "0/1";  			h264.H264Layers = new JArray () as dynamic;  			h264.H264Layers.Add (h264layer);  			obj.Codecs.Add (h264);  			_videostreaminsertedforblackvideo = true;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (obj.Codecs != null) {  	bool h264found = false;  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video") {  			h264found = true;  			codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		}  	}  	if (!h264found) {  		// no h264 data found. Let's insert a low res stream  		dynamic h264 = new JObject () as dynamic;  		h264.KeyFrameInterval = "00:00:02";  		h264.SceneChangeDetection = true;  		h264.Type = "H264Video";  		h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		dynamic h264layer = new JObject () as dynamic;  		h264layer.Profile = "Auto";  		h264layer.Level = "auto";  		h264layer.Bitrate = 10;  		h264layer.MaxBitrate = 10;  		h264layer.BufferWindow = "00:00:05";  		h264layer.Width = 64;  		h264layer.Height = 64;  		h264layer.BFrames = 3;  		h264layer.ReferenceFrames = 3;  		h264layer.AdaptiveBFrame = true;  		h264layer.Type = "H264Layer";  		h264layer.FrameRate = "0/1";  		h264.H264Layers = new JArray () as dynamic;  		h264.H264Layers.Add (h264layer);  		obj.Codecs.Add (h264);  		_videostreaminsertedforblackvideo = true;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (obj.Codecs != null) {  	bool h264found = false;  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video") {  			h264found = true;  			codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		}  	}  	if (!h264found) {  		// no h264 data found. Let's insert a low res stream  		dynamic h264 = new JObject () as dynamic;  		h264.KeyFrameInterval = "00:00:02";  		h264.SceneChangeDetection = true;  		h264.Type = "H264Video";  		h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		dynamic h264layer = new JObject () as dynamic;  		h264layer.Profile = "Auto";  		h264layer.Level = "auto";  		h264layer.Bitrate = 10;  		h264layer.MaxBitrate = 10;  		h264layer.BufferWindow = "00:00:05";  		h264layer.Width = 64;  		h264layer.Height = 64;  		h264layer.BFrames = 3;  		h264layer.ReferenceFrames = 3;  		h264layer.AdaptiveBFrame = true;  		h264layer.Type = "H264Layer";  		h264layer.FrameRate = "0/1";  		h264.H264Layers = new JArray () as dynamic;  		h264.H264Layers.Add (h264layer);  		obj.Codecs.Add (h264);  		_videostreaminsertedforblackvideo = true;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (obj.Codecs != null) {  	bool h264found = false;  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video") {  			h264found = true;  			codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		}  	}  	if (!h264found) {  		// no h264 data found. Let's insert a low res stream  		dynamic h264 = new JObject () as dynamic;  		h264.KeyFrameInterval = "00:00:02";  		h264.SceneChangeDetection = true;  		h264.Type = "H264Video";  		h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		dynamic h264layer = new JObject () as dynamic;  		h264layer.Profile = "Auto";  		h264layer.Level = "auto";  		h264layer.Bitrate = 10;  		h264layer.MaxBitrate = 10;  		h264layer.BufferWindow = "00:00:05";  		h264layer.Width = 64;  		h264layer.Height = 64;  		h264layer.BFrames = 3;  		h264layer.ReferenceFrames = 3;  		h264layer.AdaptiveBFrame = true;  		h264layer.Type = "H264Layer";  		h264layer.FrameRate = "0/1";  		h264.H264Layers = new JArray () as dynamic;  		h264.H264Layers.Add (h264layer);  		obj.Codecs.Add (h264);  		_videostreaminsertedforblackvideo = true;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (obj.Codecs != null) {  	bool h264found = false;  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video") {  			h264found = true;  			codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		}  	}  	if (!h264found) {  		// no h264 data found. Let's insert a low res stream  		dynamic h264 = new JObject () as dynamic;  		h264.KeyFrameInterval = "00:00:02";  		h264.SceneChangeDetection = true;  		h264.Type = "H264Video";  		h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		dynamic h264layer = new JObject () as dynamic;  		h264layer.Profile = "Auto";  		h264layer.Level = "auto";  		h264layer.Bitrate = 10;  		h264layer.MaxBitrate = 10;  		h264layer.BufferWindow = "00:00:05";  		h264layer.Width = 64;  		h264layer.Height = 64;  		h264layer.BFrames = 3;  		h264layer.ReferenceFrames = 3;  		h264layer.AdaptiveBFrame = true;  		h264layer.Type = "H264Layer";  		h264layer.FrameRate = "0/1";  		h264.H264Layers = new JArray () as dynamic;  		h264.H264Layers.Add (h264layer);  		obj.Codecs.Add (h264);  		_videostreaminsertedforblackvideo = true;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (obj.Codecs != null) {  	bool h264found = false;  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video") {  			h264found = true;  			codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		}  	}  	if (!h264found) {  		// no h264 data found. Let's insert a low res stream  		dynamic h264 = new JObject () as dynamic;  		h264.KeyFrameInterval = "00:00:02";  		h264.SceneChangeDetection = true;  		h264.Type = "H264Video";  		h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		dynamic h264layer = new JObject () as dynamic;  		h264layer.Profile = "Auto";  		h264layer.Level = "auto";  		h264layer.Bitrate = 10;  		h264layer.MaxBitrate = 10;  		h264layer.BufferWindow = "00:00:05";  		h264layer.Width = 64;  		h264layer.Height = 64;  		h264layer.BFrames = 3;  		h264layer.ReferenceFrames = 3;  		h264layer.AdaptiveBFrame = true;  		h264layer.Type = "H264Layer";  		h264layer.FrameRate = "0/1";  		h264.H264Layers = new JArray () as dynamic;  		h264.H264Layers.Add (h264layer);  		obj.Codecs.Add (h264);  		_videostreaminsertedforblackvideo = true;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (obj.Codecs != null) {  	bool h264found = false;  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video") {  			h264found = true;  			codec.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		}  	}  	if (!h264found) {  		// no h264 data found. Let's insert a low res stream  		dynamic h264 = new JObject () as dynamic;  		h264.KeyFrameInterval = "00:00:02";  		h264.SceneChangeDetection = true;  		h264.Type = "H264Video";  		h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  		dynamic h264layer = new JObject () as dynamic;  		h264layer.Profile = "Auto";  		h264layer.Level = "auto";  		h264layer.Bitrate = 10;  		h264layer.MaxBitrate = 10;  		h264layer.BufferWindow = "00:00:05";  		h264layer.Width = 64;  		h264layer.Height = 64;  		h264layer.BFrames = 3;  		h264layer.ReferenceFrames = 3;  		h264layer.AdaptiveBFrame = true;  		h264layer.Type = "H264Layer";  		h264layer.FrameRate = "0/1";  		h264.H264Layers = new JArray () as dynamic;  		h264.H264Layers.Add (h264layer);  		obj.Codecs.Add (h264);  		_videostreaminsertedforblackvideo = true;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (!h264found) {  	// no h264 data found. Let's insert a low res stream  	dynamic h264 = new JObject () as dynamic;  	h264.KeyFrameInterval = "00:00:02";  	h264.SceneChangeDetection = true;  	h264.Type = "H264Video";  	h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  	dynamic h264layer = new JObject () as dynamic;  	h264layer.Profile = "Auto";  	h264layer.Level = "auto";  	h264layer.Bitrate = 10;  	h264layer.MaxBitrate = 10;  	h264layer.BufferWindow = "00:00:05";  	h264layer.Width = 64;  	h264layer.Height = 64;  	h264layer.BFrames = 3;  	h264layer.ReferenceFrames = 3;  	h264layer.AdaptiveBFrame = true;  	h264layer.Type = "H264Layer";  	h264layer.FrameRate = "0/1";  	h264.H264Layers = new JArray () as dynamic;  	h264.H264Layers.Add (h264layer);  	obj.Codecs.Add (h264);  	_videostreaminsertedforblackvideo = true;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (!h264found) {  	// no h264 data found. Let's insert a low res stream  	dynamic h264 = new JObject () as dynamic;  	h264.KeyFrameInterval = "00:00:02";  	h264.SceneChangeDetection = true;  	h264.Type = "H264Video";  	h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  	dynamic h264layer = new JObject () as dynamic;  	h264layer.Profile = "Auto";  	h264layer.Level = "auto";  	h264layer.Bitrate = 10;  	h264layer.MaxBitrate = 10;  	h264layer.BufferWindow = "00:00:05";  	h264layer.Width = 64;  	h264layer.Height = 64;  	h264layer.BFrames = 3;  	h264layer.ReferenceFrames = 3;  	h264layer.AdaptiveBFrame = true;  	h264layer.Type = "H264Layer";  	h264layer.FrameRate = "0/1";  	h264.H264Layers = new JArray () as dynamic;  	h264.H264Layers.Add (h264layer);  	obj.Codecs.Add (h264);  	_videostreaminsertedforblackvideo = true;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (!h264found) {  	// no h264 data found. Let's insert a low res stream  	dynamic h264 = new JObject () as dynamic;  	h264.KeyFrameInterval = "00:00:02";  	h264.SceneChangeDetection = true;  	h264.Type = "H264Video";  	h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  	dynamic h264layer = new JObject () as dynamic;  	h264layer.Profile = "Auto";  	h264layer.Level = "auto";  	h264layer.Bitrate = 10;  	h264layer.MaxBitrate = 10;  	h264layer.BufferWindow = "00:00:05";  	h264layer.Width = 64;  	h264layer.Height = 64;  	h264layer.BFrames = 3;  	h264layer.ReferenceFrames = 3;  	h264layer.AdaptiveBFrame = true;  	h264layer.Type = "H264Layer";  	h264layer.FrameRate = "0/1";  	h264.H264Layers = new JArray () as dynamic;  	h264.H264Layers.Add (h264layer);  	obj.Codecs.Add (h264);  	_videostreaminsertedforblackvideo = true;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (!h264found) {  	// no h264 data found. Let's insert a low res stream  	dynamic h264 = new JObject () as dynamic;  	h264.KeyFrameInterval = "00:00:02";  	h264.SceneChangeDetection = true;  	h264.Type = "H264Video";  	h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  	dynamic h264layer = new JObject () as dynamic;  	h264layer.Profile = "Auto";  	h264layer.Level = "auto";  	h264layer.Bitrate = 10;  	h264layer.MaxBitrate = 10;  	h264layer.BufferWindow = "00:00:05";  	h264layer.Width = 64;  	h264layer.Height = 64;  	h264layer.BFrames = 3;  	h264layer.ReferenceFrames = 3;  	h264layer.AdaptiveBFrame = true;  	h264layer.Type = "H264Layer";  	h264layer.FrameRate = "0/1";  	h264.H264Layers = new JArray () as dynamic;  	h264.H264Layers.Add (h264layer);  	obj.Codecs.Add (h264);  	_videostreaminsertedforblackvideo = true;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (!h264found) {  	// no h264 data found. Let's insert a low res stream  	dynamic h264 = new JObject () as dynamic;  	h264.KeyFrameInterval = "00:00:02";  	h264.SceneChangeDetection = true;  	h264.Type = "H264Video";  	h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  	dynamic h264layer = new JObject () as dynamic;  	h264layer.Profile = "Auto";  	h264layer.Level = "auto";  	h264layer.Bitrate = 10;  	h264layer.MaxBitrate = 10;  	h264layer.BufferWindow = "00:00:05";  	h264layer.Width = 64;  	h264layer.Height = 64;  	h264layer.BFrames = 3;  	h264layer.ReferenceFrames = 3;  	h264layer.AdaptiveBFrame = true;  	h264layer.Type = "H264Layer";  	h264layer.FrameRate = "0/1";  	h264.H264Layers = new JArray () as dynamic;  	h264.H264Layers.Add (h264layer);  	obj.Codecs.Add (h264);  	_videostreaminsertedforblackvideo = true;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: if (!h264found) {  	// no h264 data found. Let's insert a low res stream  	dynamic h264 = new JObject () as dynamic;  	h264.KeyFrameInterval = "00:00:02";  	h264.SceneChangeDetection = true;  	h264.Type = "H264Video";  	h264.Condition = radioButtonOnlyLowestBitrate.Checked ? "InsertBlackIfNoVideoBottomLayerOnly" : "InsertBlackIfNoVideo";  	dynamic h264layer = new JObject () as dynamic;  	h264layer.Profile = "Auto";  	h264layer.Level = "auto";  	h264layer.Bitrate = 10;  	h264layer.MaxBitrate = 10;  	h264layer.BufferWindow = "00:00:05";  	h264layer.Width = 64;  	h264layer.Height = 64;  	h264layer.BFrames = 3;  	h264layer.ReferenceFrames = 3;  	h264layer.AdaptiveBFrame = true;  	h264layer.Type = "H264Layer";  	h264layer.FrameRate = "0/1";  	h264.H264Layers = new JArray () as dynamic;  	h264.H264Layers.Add (h264layer);  	obj.Codecs.Add (h264);  	_videostreaminsertedforblackvideo = true;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: h264layer.Bitrate = 10;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: h264layer.MaxBitrate = 10;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: h264layer.Width = 64;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: h264layer.Height = 64;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: h264layer.BFrames = 3;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,UpdateTextBoxJSON,The following statement contains a magic number: h264layer.ReferenceFrames = 3;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (obj.Codecs != null) {  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  			foreach (var h264 in codec.H264Layers) {  				if (h264.Width != null && h264.Height != null) {  					int res = (int)h264.Width * (int)h264.Height;  					int value;  					if (res < 1280 * 720) {  						value = 1;  					} else if (res <= 1920 * 1080) {  						value = 2;  					} else if (res <= 4096 * 2304) {  						value = 4;  					} else {  						value = 4;  						// Can be changed in the future  					}  					multiplier += value;  				}  			}  		} else if (codec.Type != null && codec.Type == "AACAudio") {  			multiplier += 0.25m;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (obj.Codecs != null) {  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  			foreach (var h264 in codec.H264Layers) {  				if (h264.Width != null && h264.Height != null) {  					int res = (int)h264.Width * (int)h264.Height;  					int value;  					if (res < 1280 * 720) {  						value = 1;  					} else if (res <= 1920 * 1080) {  						value = 2;  					} else if (res <= 4096 * 2304) {  						value = 4;  					} else {  						value = 4;  						// Can be changed in the future  					}  					multiplier += value;  				}  			}  		} else if (codec.Type != null && codec.Type == "AACAudio") {  			multiplier += 0.25m;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (obj.Codecs != null) {  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  			foreach (var h264 in codec.H264Layers) {  				if (h264.Width != null && h264.Height != null) {  					int res = (int)h264.Width * (int)h264.Height;  					int value;  					if (res < 1280 * 720) {  						value = 1;  					} else if (res <= 1920 * 1080) {  						value = 2;  					} else if (res <= 4096 * 2304) {  						value = 4;  					} else {  						value = 4;  						// Can be changed in the future  					}  					multiplier += value;  				}  			}  		} else if (codec.Type != null && codec.Type == "AACAudio") {  			multiplier += 0.25m;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (obj.Codecs != null) {  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  			foreach (var h264 in codec.H264Layers) {  				if (h264.Width != null && h264.Height != null) {  					int res = (int)h264.Width * (int)h264.Height;  					int value;  					if (res < 1280 * 720) {  						value = 1;  					} else if (res <= 1920 * 1080) {  						value = 2;  					} else if (res <= 4096 * 2304) {  						value = 4;  					} else {  						value = 4;  						// Can be changed in the future  					}  					multiplier += value;  				}  			}  		} else if (codec.Type != null && codec.Type == "AACAudio") {  			multiplier += 0.25m;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (obj.Codecs != null) {  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  			foreach (var h264 in codec.H264Layers) {  				if (h264.Width != null && h264.Height != null) {  					int res = (int)h264.Width * (int)h264.Height;  					int value;  					if (res < 1280 * 720) {  						value = 1;  					} else if (res <= 1920 * 1080) {  						value = 2;  					} else if (res <= 4096 * 2304) {  						value = 4;  					} else {  						value = 4;  						// Can be changed in the future  					}  					multiplier += value;  				}  			}  		} else if (codec.Type != null && codec.Type == "AACAudio") {  			multiplier += 0.25m;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (obj.Codecs != null) {  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  			foreach (var h264 in codec.H264Layers) {  				if (h264.Width != null && h264.Height != null) {  					int res = (int)h264.Width * (int)h264.Height;  					int value;  					if (res < 1280 * 720) {  						value = 1;  					} else if (res <= 1920 * 1080) {  						value = 2;  					} else if (res <= 4096 * 2304) {  						value = 4;  					} else {  						value = 4;  						// Can be changed in the future  					}  					multiplier += value;  				}  			}  		} else if (codec.Type != null && codec.Type == "AACAudio") {  			multiplier += 0.25m;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (obj.Codecs != null) {  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  			foreach (var h264 in codec.H264Layers) {  				if (h264.Width != null && h264.Height != null) {  					int res = (int)h264.Width * (int)h264.Height;  					int value;  					if (res < 1280 * 720) {  						value = 1;  					} else if (res <= 1920 * 1080) {  						value = 2;  					} else if (res <= 4096 * 2304) {  						value = 4;  					} else {  						value = 4;  						// Can be changed in the future  					}  					multiplier += value;  				}  			}  		} else if (codec.Type != null && codec.Type == "AACAudio") {  			multiplier += 0.25m;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (obj.Codecs != null) {  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  			foreach (var h264 in codec.H264Layers) {  				if (h264.Width != null && h264.Height != null) {  					int res = (int)h264.Width * (int)h264.Height;  					int value;  					if (res < 1280 * 720) {  						value = 1;  					} else if (res <= 1920 * 1080) {  						value = 2;  					} else if (res <= 4096 * 2304) {  						value = 4;  					} else {  						value = 4;  						// Can be changed in the future  					}  					multiplier += value;  				}  			}  		} else if (codec.Type != null && codec.Type == "AACAudio") {  			multiplier += 0.25m;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (obj.Codecs != null) {  	foreach (var codec in obj.Codecs) {  		if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  			foreach (var h264 in codec.H264Layers) {  				if (h264.Width != null && h264.Height != null) {  					int res = (int)h264.Width * (int)h264.Height;  					int value;  					if (res < 1280 * 720) {  						value = 1;  					} else if (res <= 1920 * 1080) {  						value = 2;  					} else if (res <= 4096 * 2304) {  						value = 4;  					} else {  						value = 4;  						// Can be changed in the future  					}  					multiplier += value;  				}  			}  		} else if (codec.Type != null && codec.Type == "AACAudio") {  			multiplier += 0.25m;  		}  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var codec in obj.Codecs) {  	if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  		foreach (var h264 in codec.H264Layers) {  			if (h264.Width != null && h264.Height != null) {  				int res = (int)h264.Width * (int)h264.Height;  				int value;  				if (res < 1280 * 720) {  					value = 1;  				} else if (res <= 1920 * 1080) {  					value = 2;  				} else if (res <= 4096 * 2304) {  					value = 4;  				} else {  					value = 4;  					// Can be changed in the future  				}  				multiplier += value;  			}  		}  	} else if (codec.Type != null && codec.Type == "AACAudio") {  		multiplier += 0.25m;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var codec in obj.Codecs) {  	if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  		foreach (var h264 in codec.H264Layers) {  			if (h264.Width != null && h264.Height != null) {  				int res = (int)h264.Width * (int)h264.Height;  				int value;  				if (res < 1280 * 720) {  					value = 1;  				} else if (res <= 1920 * 1080) {  					value = 2;  				} else if (res <= 4096 * 2304) {  					value = 4;  				} else {  					value = 4;  					// Can be changed in the future  				}  				multiplier += value;  			}  		}  	} else if (codec.Type != null && codec.Type == "AACAudio") {  		multiplier += 0.25m;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var codec in obj.Codecs) {  	if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  		foreach (var h264 in codec.H264Layers) {  			if (h264.Width != null && h264.Height != null) {  				int res = (int)h264.Width * (int)h264.Height;  				int value;  				if (res < 1280 * 720) {  					value = 1;  				} else if (res <= 1920 * 1080) {  					value = 2;  				} else if (res <= 4096 * 2304) {  					value = 4;  				} else {  					value = 4;  					// Can be changed in the future  				}  				multiplier += value;  			}  		}  	} else if (codec.Type != null && codec.Type == "AACAudio") {  		multiplier += 0.25m;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var codec in obj.Codecs) {  	if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  		foreach (var h264 in codec.H264Layers) {  			if (h264.Width != null && h264.Height != null) {  				int res = (int)h264.Width * (int)h264.Height;  				int value;  				if (res < 1280 * 720) {  					value = 1;  				} else if (res <= 1920 * 1080) {  					value = 2;  				} else if (res <= 4096 * 2304) {  					value = 4;  				} else {  					value = 4;  					// Can be changed in the future  				}  				multiplier += value;  			}  		}  	} else if (codec.Type != null && codec.Type == "AACAudio") {  		multiplier += 0.25m;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var codec in obj.Codecs) {  	if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  		foreach (var h264 in codec.H264Layers) {  			if (h264.Width != null && h264.Height != null) {  				int res = (int)h264.Width * (int)h264.Height;  				int value;  				if (res < 1280 * 720) {  					value = 1;  				} else if (res <= 1920 * 1080) {  					value = 2;  				} else if (res <= 4096 * 2304) {  					value = 4;  				} else {  					value = 4;  					// Can be changed in the future  				}  				multiplier += value;  			}  		}  	} else if (codec.Type != null && codec.Type == "AACAudio") {  		multiplier += 0.25m;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var codec in obj.Codecs) {  	if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  		foreach (var h264 in codec.H264Layers) {  			if (h264.Width != null && h264.Height != null) {  				int res = (int)h264.Width * (int)h264.Height;  				int value;  				if (res < 1280 * 720) {  					value = 1;  				} else if (res <= 1920 * 1080) {  					value = 2;  				} else if (res <= 4096 * 2304) {  					value = 4;  				} else {  					value = 4;  					// Can be changed in the future  				}  				multiplier += value;  			}  		}  	} else if (codec.Type != null && codec.Type == "AACAudio") {  		multiplier += 0.25m;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var codec in obj.Codecs) {  	if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  		foreach (var h264 in codec.H264Layers) {  			if (h264.Width != null && h264.Height != null) {  				int res = (int)h264.Width * (int)h264.Height;  				int value;  				if (res < 1280 * 720) {  					value = 1;  				} else if (res <= 1920 * 1080) {  					value = 2;  				} else if (res <= 4096 * 2304) {  					value = 4;  				} else {  					value = 4;  					// Can be changed in the future  				}  				multiplier += value;  			}  		}  	} else if (codec.Type != null && codec.Type == "AACAudio") {  		multiplier += 0.25m;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var codec in obj.Codecs) {  	if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  		foreach (var h264 in codec.H264Layers) {  			if (h264.Width != null && h264.Height != null) {  				int res = (int)h264.Width * (int)h264.Height;  				int value;  				if (res < 1280 * 720) {  					value = 1;  				} else if (res <= 1920 * 1080) {  					value = 2;  				} else if (res <= 4096 * 2304) {  					value = 4;  				} else {  					value = 4;  					// Can be changed in the future  				}  				multiplier += value;  			}  		}  	} else if (codec.Type != null && codec.Type == "AACAudio") {  		multiplier += 0.25m;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var codec in obj.Codecs) {  	if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  		foreach (var h264 in codec.H264Layers) {  			if (h264.Width != null && h264.Height != null) {  				int res = (int)h264.Width * (int)h264.Height;  				int value;  				if (res < 1280 * 720) {  					value = 1;  				} else if (res <= 1920 * 1080) {  					value = 2;  				} else if (res <= 4096 * 2304) {  					value = 4;  				} else {  					value = 4;  					// Can be changed in the future  				}  				multiplier += value;  			}  		}  	} else if (codec.Type != null && codec.Type == "AACAudio") {  		multiplier += 0.25m;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  	foreach (var h264 in codec.H264Layers) {  		if (h264.Width != null && h264.Height != null) {  			int res = (int)h264.Width * (int)h264.Height;  			int value;  			if (res < 1280 * 720) {  				value = 1;  			} else if (res <= 1920 * 1080) {  				value = 2;  			} else if (res <= 4096 * 2304) {  				value = 4;  			} else {  				value = 4;  				// Can be changed in the future  			}  			multiplier += value;  		}  	}  } else if (codec.Type != null && codec.Type == "AACAudio") {  	multiplier += 0.25m;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  	foreach (var h264 in codec.H264Layers) {  		if (h264.Width != null && h264.Height != null) {  			int res = (int)h264.Width * (int)h264.Height;  			int value;  			if (res < 1280 * 720) {  				value = 1;  			} else if (res <= 1920 * 1080) {  				value = 2;  			} else if (res <= 4096 * 2304) {  				value = 4;  			} else {  				value = 4;  				// Can be changed in the future  			}  			multiplier += value;  		}  	}  } else if (codec.Type != null && codec.Type == "AACAudio") {  	multiplier += 0.25m;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  	foreach (var h264 in codec.H264Layers) {  		if (h264.Width != null && h264.Height != null) {  			int res = (int)h264.Width * (int)h264.Height;  			int value;  			if (res < 1280 * 720) {  				value = 1;  			} else if (res <= 1920 * 1080) {  				value = 2;  			} else if (res <= 4096 * 2304) {  				value = 4;  			} else {  				value = 4;  				// Can be changed in the future  			}  			multiplier += value;  		}  	}  } else if (codec.Type != null && codec.Type == "AACAudio") {  	multiplier += 0.25m;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  	foreach (var h264 in codec.H264Layers) {  		if (h264.Width != null && h264.Height != null) {  			int res = (int)h264.Width * (int)h264.Height;  			int value;  			if (res < 1280 * 720) {  				value = 1;  			} else if (res <= 1920 * 1080) {  				value = 2;  			} else if (res <= 4096 * 2304) {  				value = 4;  			} else {  				value = 4;  				// Can be changed in the future  			}  			multiplier += value;  		}  	}  } else if (codec.Type != null && codec.Type == "AACAudio") {  	multiplier += 0.25m;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  	foreach (var h264 in codec.H264Layers) {  		if (h264.Width != null && h264.Height != null) {  			int res = (int)h264.Width * (int)h264.Height;  			int value;  			if (res < 1280 * 720) {  				value = 1;  			} else if (res <= 1920 * 1080) {  				value = 2;  			} else if (res <= 4096 * 2304) {  				value = 4;  			} else {  				value = 4;  				// Can be changed in the future  			}  			multiplier += value;  		}  	}  } else if (codec.Type != null && codec.Type == "AACAudio") {  	multiplier += 0.25m;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  	foreach (var h264 in codec.H264Layers) {  		if (h264.Width != null && h264.Height != null) {  			int res = (int)h264.Width * (int)h264.Height;  			int value;  			if (res < 1280 * 720) {  				value = 1;  			} else if (res <= 1920 * 1080) {  				value = 2;  			} else if (res <= 4096 * 2304) {  				value = 4;  			} else {  				value = 4;  				// Can be changed in the future  			}  			multiplier += value;  		}  	}  } else if (codec.Type != null && codec.Type == "AACAudio") {  	multiplier += 0.25m;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  	foreach (var h264 in codec.H264Layers) {  		if (h264.Width != null && h264.Height != null) {  			int res = (int)h264.Width * (int)h264.Height;  			int value;  			if (res < 1280 * 720) {  				value = 1;  			} else if (res <= 1920 * 1080) {  				value = 2;  			} else if (res <= 4096 * 2304) {  				value = 4;  			} else {  				value = 4;  				// Can be changed in the future  			}  			multiplier += value;  		}  	}  } else if (codec.Type != null && codec.Type == "AACAudio") {  	multiplier += 0.25m;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  	foreach (var h264 in codec.H264Layers) {  		if (h264.Width != null && h264.Height != null) {  			int res = (int)h264.Width * (int)h264.Height;  			int value;  			if (res < 1280 * 720) {  				value = 1;  			} else if (res <= 1920 * 1080) {  				value = 2;  			} else if (res <= 4096 * 2304) {  				value = 4;  			} else {  				value = 4;  				// Can be changed in the future  			}  			multiplier += value;  		}  	}  } else if (codec.Type != null && codec.Type == "AACAudio") {  	multiplier += 0.25m;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (codec.Type != null && codec.Type == "H264Video" && codec.H264Layers != null) {  	foreach (var h264 in codec.H264Layers) {  		if (h264.Width != null && h264.Height != null) {  			int res = (int)h264.Width * (int)h264.Height;  			int value;  			if (res < 1280 * 720) {  				value = 1;  			} else if (res <= 1920 * 1080) {  				value = 2;  			} else if (res <= 4096 * 2304) {  				value = 4;  			} else {  				value = 4;  				// Can be changed in the future  			}  			multiplier += value;  		}  	}  } else if (codec.Type != null && codec.Type == "AACAudio") {  	multiplier += 0.25m;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var h264 in codec.H264Layers) {  	if (h264.Width != null && h264.Height != null) {  		int res = (int)h264.Width * (int)h264.Height;  		int value;  		if (res < 1280 * 720) {  			value = 1;  		} else if (res <= 1920 * 1080) {  			value = 2;  		} else if (res <= 4096 * 2304) {  			value = 4;  		} else {  			value = 4;  			// Can be changed in the future  		}  		multiplier += value;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var h264 in codec.H264Layers) {  	if (h264.Width != null && h264.Height != null) {  		int res = (int)h264.Width * (int)h264.Height;  		int value;  		if (res < 1280 * 720) {  			value = 1;  		} else if (res <= 1920 * 1080) {  			value = 2;  		} else if (res <= 4096 * 2304) {  			value = 4;  		} else {  			value = 4;  			// Can be changed in the future  		}  		multiplier += value;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var h264 in codec.H264Layers) {  	if (h264.Width != null && h264.Height != null) {  		int res = (int)h264.Width * (int)h264.Height;  		int value;  		if (res < 1280 * 720) {  			value = 1;  		} else if (res <= 1920 * 1080) {  			value = 2;  		} else if (res <= 4096 * 2304) {  			value = 4;  		} else {  			value = 4;  			// Can be changed in the future  		}  		multiplier += value;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var h264 in codec.H264Layers) {  	if (h264.Width != null && h264.Height != null) {  		int res = (int)h264.Width * (int)h264.Height;  		int value;  		if (res < 1280 * 720) {  			value = 1;  		} else if (res <= 1920 * 1080) {  			value = 2;  		} else if (res <= 4096 * 2304) {  			value = 4;  		} else {  			value = 4;  			// Can be changed in the future  		}  		multiplier += value;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var h264 in codec.H264Layers) {  	if (h264.Width != null && h264.Height != null) {  		int res = (int)h264.Width * (int)h264.Height;  		int value;  		if (res < 1280 * 720) {  			value = 1;  		} else if (res <= 1920 * 1080) {  			value = 2;  		} else if (res <= 4096 * 2304) {  			value = 4;  		} else {  			value = 4;  			// Can be changed in the future  		}  		multiplier += value;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var h264 in codec.H264Layers) {  	if (h264.Width != null && h264.Height != null) {  		int res = (int)h264.Width * (int)h264.Height;  		int value;  		if (res < 1280 * 720) {  			value = 1;  		} else if (res <= 1920 * 1080) {  			value = 2;  		} else if (res <= 4096 * 2304) {  			value = 4;  		} else {  			value = 4;  			// Can be changed in the future  		}  		multiplier += value;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var h264 in codec.H264Layers) {  	if (h264.Width != null && h264.Height != null) {  		int res = (int)h264.Width * (int)h264.Height;  		int value;  		if (res < 1280 * 720) {  			value = 1;  		} else if (res <= 1920 * 1080) {  			value = 2;  		} else if (res <= 4096 * 2304) {  			value = 4;  		} else {  			value = 4;  			// Can be changed in the future  		}  		multiplier += value;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var h264 in codec.H264Layers) {  	if (h264.Width != null && h264.Height != null) {  		int res = (int)h264.Width * (int)h264.Height;  		int value;  		if (res < 1280 * 720) {  			value = 1;  		} else if (res <= 1920 * 1080) {  			value = 2;  		} else if (res <= 4096 * 2304) {  			value = 4;  		} else {  			value = 4;  			// Can be changed in the future  		}  		multiplier += value;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: foreach (var h264 in codec.H264Layers) {  	if (h264.Width != null && h264.Height != null) {  		int res = (int)h264.Width * (int)h264.Height;  		int value;  		if (res < 1280 * 720) {  			value = 1;  		} else if (res <= 1920 * 1080) {  			value = 2;  		} else if (res <= 4096 * 2304) {  			value = 4;  		} else {  			value = 4;  			// Can be changed in the future  		}  		multiplier += value;  	}  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (h264.Width != null && h264.Height != null) {  	int res = (int)h264.Width * (int)h264.Height;  	int value;  	if (res < 1280 * 720) {  		value = 1;  	} else if (res <= 1920 * 1080) {  		value = 2;  	} else if (res <= 4096 * 2304) {  		value = 4;  	} else {  		value = 4;  		// Can be changed in the future  	}  	multiplier += value;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (h264.Width != null && h264.Height != null) {  	int res = (int)h264.Width * (int)h264.Height;  	int value;  	if (res < 1280 * 720) {  		value = 1;  	} else if (res <= 1920 * 1080) {  		value = 2;  	} else if (res <= 4096 * 2304) {  		value = 4;  	} else {  		value = 4;  		// Can be changed in the future  	}  	multiplier += value;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (h264.Width != null && h264.Height != null) {  	int res = (int)h264.Width * (int)h264.Height;  	int value;  	if (res < 1280 * 720) {  		value = 1;  	} else if (res <= 1920 * 1080) {  		value = 2;  	} else if (res <= 4096 * 2304) {  		value = 4;  	} else {  		value = 4;  		// Can be changed in the future  	}  	multiplier += value;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (h264.Width != null && h264.Height != null) {  	int res = (int)h264.Width * (int)h264.Height;  	int value;  	if (res < 1280 * 720) {  		value = 1;  	} else if (res <= 1920 * 1080) {  		value = 2;  	} else if (res <= 4096 * 2304) {  		value = 4;  	} else {  		value = 4;  		// Can be changed in the future  	}  	multiplier += value;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (h264.Width != null && h264.Height != null) {  	int res = (int)h264.Width * (int)h264.Height;  	int value;  	if (res < 1280 * 720) {  		value = 1;  	} else if (res <= 1920 * 1080) {  		value = 2;  	} else if (res <= 4096 * 2304) {  		value = 4;  	} else {  		value = 4;  		// Can be changed in the future  	}  	multiplier += value;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (h264.Width != null && h264.Height != null) {  	int res = (int)h264.Width * (int)h264.Height;  	int value;  	if (res < 1280 * 720) {  		value = 1;  	} else if (res <= 1920 * 1080) {  		value = 2;  	} else if (res <= 4096 * 2304) {  		value = 4;  	} else {  		value = 4;  		// Can be changed in the future  	}  	multiplier += value;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (h264.Width != null && h264.Height != null) {  	int res = (int)h264.Width * (int)h264.Height;  	int value;  	if (res < 1280 * 720) {  		value = 1;  	} else if (res <= 1920 * 1080) {  		value = 2;  	} else if (res <= 4096 * 2304) {  		value = 4;  	} else {  		value = 4;  		// Can be changed in the future  	}  	multiplier += value;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (h264.Width != null && h264.Height != null) {  	int res = (int)h264.Width * (int)h264.Height;  	int value;  	if (res < 1280 * 720) {  		value = 1;  	} else if (res <= 1920 * 1080) {  		value = 2;  	} else if (res <= 4096 * 2304) {  		value = 4;  	} else {  		value = 4;  		// Can be changed in the future  	}  	multiplier += value;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (h264.Width != null && h264.Height != null) {  	int res = (int)h264.Width * (int)h264.Height;  	int value;  	if (res < 1280 * 720) {  		value = 1;  	} else if (res <= 1920 * 1080) {  		value = 2;  	} else if (res <= 4096 * 2304) {  		value = 4;  	} else {  		value = 4;  		// Can be changed in the future  	}  	multiplier += value;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res < 1280 * 720) {  	value = 1;  } else if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res < 1280 * 720) {  	value = 1;  } else if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res < 1280 * 720) {  	value = 1;  } else if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res < 1280 * 720) {  	value = 1;  } else if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res < 1280 * 720) {  	value = 1;  } else if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res < 1280 * 720) {  	value = 1;  } else if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res < 1280 * 720) {  	value = 1;  } else if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res < 1280 * 720) {  	value = 1;  } else if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res < 1280 * 720) {  	value = 1;  } else if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 1920 * 1080) {  	value = 2;  } else if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: value = 2;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: if (res <= 4096 * 2304) {  	value = 4;  } else {  	value = 4;  	// Can be changed in the future  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: value = 4;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,calculateMultiplier,The following statement contains a magic number: value = 4;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentJPG_CheckedChanged,The following statement contains a magic number: if (radioButtonPercentJPG.Checked) {  	numericUpDownThWidthJPG.Maximum = numericUpDownThHeightJPG.Maximum = 100;  	numericUpDownThWidthJPG.Value = numericUpDownThHeightJPG.Value = 100;  } else {  	numericUpDownThWidthJPG.Maximum = numericUpDownThHeightJPG.Maximum = 10000;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentJPG_CheckedChanged,The following statement contains a magic number: if (radioButtonPercentJPG.Checked) {  	numericUpDownThWidthJPG.Maximum = numericUpDownThHeightJPG.Maximum = 100;  	numericUpDownThWidthJPG.Value = numericUpDownThHeightJPG.Value = 100;  } else {  	numericUpDownThWidthJPG.Maximum = numericUpDownThHeightJPG.Maximum = 10000;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentJPG_CheckedChanged,The following statement contains a magic number: if (radioButtonPercentJPG.Checked) {  	numericUpDownThWidthJPG.Maximum = numericUpDownThHeightJPG.Maximum = 100;  	numericUpDownThWidthJPG.Value = numericUpDownThHeightJPG.Value = 100;  } else {  	numericUpDownThWidthJPG.Maximum = numericUpDownThHeightJPG.Maximum = 10000;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentJPG_CheckedChanged,The following statement contains a magic number: numericUpDownThWidthJPG.Maximum = numericUpDownThHeightJPG.Maximum = 100;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentJPG_CheckedChanged,The following statement contains a magic number: numericUpDownThWidthJPG.Value = numericUpDownThHeightJPG.Value = 100;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentJPG_CheckedChanged,The following statement contains a magic number: numericUpDownThWidthJPG.Maximum = numericUpDownThHeightJPG.Maximum = 10000;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentPNG_CheckedChanged,The following statement contains a magic number: if (radioButtonPercentPNG.Checked) {  	numericUpDownThWidthPNG.Maximum = numericUpDownThHeightPNG.Maximum = 100;  	numericUpDownThWidthPNG.Value = numericUpDownThHeightPNG.Value = 100;  } else {  	numericUpDownThWidthPNG.Maximum = numericUpDownThHeightPNG.Maximum = 10000;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentPNG_CheckedChanged,The following statement contains a magic number: if (radioButtonPercentPNG.Checked) {  	numericUpDownThWidthPNG.Maximum = numericUpDownThHeightPNG.Maximum = 100;  	numericUpDownThWidthPNG.Value = numericUpDownThHeightPNG.Value = 100;  } else {  	numericUpDownThWidthPNG.Maximum = numericUpDownThHeightPNG.Maximum = 10000;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentPNG_CheckedChanged,The following statement contains a magic number: if (radioButtonPercentPNG.Checked) {  	numericUpDownThWidthPNG.Maximum = numericUpDownThHeightPNG.Maximum = 100;  	numericUpDownThWidthPNG.Value = numericUpDownThHeightPNG.Value = 100;  } else {  	numericUpDownThWidthPNG.Maximum = numericUpDownThHeightPNG.Maximum = 10000;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentPNG_CheckedChanged,The following statement contains a magic number: numericUpDownThWidthPNG.Maximum = numericUpDownThHeightPNG.Maximum = 100;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentPNG_CheckedChanged,The following statement contains a magic number: numericUpDownThWidthPNG.Value = numericUpDownThHeightPNG.Value = 100;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentPNG_CheckedChanged,The following statement contains a magic number: numericUpDownThWidthPNG.Maximum = numericUpDownThHeightPNG.Maximum = 10000;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentBMP_CheckedChanged,The following statement contains a magic number: if (radioButtonPercentBMP.Checked) {  	numericUpDownThWidthBMP.Maximum = numericUpDownThHeightBMP.Maximum = 100;  	numericUpDownThWidthBMP.Value = numericUpDownThHeightBMP.Value = 100;  } else {  	numericUpDownThWidthBMP.Maximum = numericUpDownThHeightBMP.Maximum = 10000;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentBMP_CheckedChanged,The following statement contains a magic number: if (radioButtonPercentBMP.Checked) {  	numericUpDownThWidthBMP.Maximum = numericUpDownThHeightBMP.Maximum = 100;  	numericUpDownThWidthBMP.Value = numericUpDownThHeightBMP.Value = 100;  } else {  	numericUpDownThWidthBMP.Maximum = numericUpDownThHeightBMP.Maximum = 10000;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentBMP_CheckedChanged,The following statement contains a magic number: if (radioButtonPercentBMP.Checked) {  	numericUpDownThWidthBMP.Maximum = numericUpDownThHeightBMP.Maximum = 100;  	numericUpDownThWidthBMP.Value = numericUpDownThHeightBMP.Value = 100;  } else {  	numericUpDownThWidthBMP.Maximum = numericUpDownThHeightBMP.Maximum = 10000;  }  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentBMP_CheckedChanged,The following statement contains a magic number: numericUpDownThWidthBMP.Maximum = numericUpDownThHeightBMP.Maximum = 100;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentBMP_CheckedChanged,The following statement contains a magic number: numericUpDownThWidthBMP.Value = numericUpDownThHeightBMP.Value = 100;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,radioButtonPercentBMP_CheckedChanged,The following statement contains a magic number: numericUpDownThWidthBMP.Maximum = numericUpDownThHeightBMP.Maximum = 10000;  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.labelInfoTextNoAdvancedFeature.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.labelInfoTextNoAdvancedFeature.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.labelInfoTextNoAdvancedFeature.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectY.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectY.Value = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectX.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectX.Value = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectH.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectH.Value = new decimal (new int[] {  	100'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectW.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectW.Value = new decimal (new int[] {  	100'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOverlayLoop.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOverlayLoop.Value = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThHeightPNG.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThHeightPNG.Value = new decimal (new int[] {  	360'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThWidthPNG.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThWidthPNG.Value = new decimal (new int[] {  	640'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThHeightJPG.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThHeightJPG.Value = new decimal (new int[] {  	360'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThWidthJPG.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThWidthJPG.Value = new decimal (new int[] {  	640'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThQuality.Value = new decimal (new int[] {  	90'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThHeightBMP.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThHeightBMP.Value = new decimal (new int[] {  	360'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThWidthBMP.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownThWidthBMP.Value = new decimal (new int[] {  	640'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The following statement contains a magic number: dataGridViewTransfer.Columns [labelProgress].DisplayIndex = 3;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The following statement contains a magic number: dataGridViewTransfer.Columns ["SubmitTime"].Width = 140;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The following statement contains a magic number: dataGridViewTransfer.Columns ["StartTime"].Width = 140;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The following statement contains a magic number: dataGridViewTransfer.Columns ["EndTime"].Width = 140;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The following statement contains a magic number: dataGridViewTransfer.Columns ["ProgressText"].Width = 140;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferInit,The following statement contains a magic number: dataGridViewTransfer.Columns ["DestLocation"].Width = 140;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferUpdateProgress,The following statement contains a magic number: if (progress > 3 && transfer.StartTime != null) {  	TimeSpan interval = (TimeSpan)(DateTime.UtcNow - ((DateTime)transfer.StartTime).ToUniversalTime ());  	DateTime ETA = DateTime.UtcNow.AddSeconds ((100d / progress - 1d) * interval.TotalSeconds);  	transfer.EndTime = ETA.ToLocalTime ().ToString ("G") + " ?";  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferWaitIfNeeded,The following statement contains a magic number: if (DoGridTransferIsQueueRequested (guid)) {  	while (!DoGridTransferQueueOurTurn (guid) && Properties.Settings.Default.ConcurrentTransfers < Constants.MaxTransfersAsUnlimited) {  		Debug.Print ("wait " + guid.ToString ());  		Thread.Sleep (500);  	}  	DoGridTransferDeclareTransferStarted (guid);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferWaitIfNeeded,The following statement contains a magic number: while (!DoGridTransferQueueOurTurn (guid) && Properties.Settings.Default.ConcurrentTransfers < Constants.MaxTransfersAsUnlimited) {  	Debug.Print ("wait " + guid.ToString ());  	Thread.Sleep (500);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGridTransferWaitIfNeeded,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform,The following statement contains a magic number: TimerAutoRefresh = new System.Timers.Timer (Properties.Settings.Default.AutoRefreshTime * 1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform,The following statement contains a magic number: try {  	if (_context.StreamingEndpoints.AsEnumerable ().Where (o => o.State == StreamingEndpointState.Running).ToList ().Count == 0)  		TextBoxLogWriteLine ("There is no streaming endpoint running in this account."' true);  	// Warning  	// Let's check if there is classic streaming endpoints  	if (_context.StreamingEndpoints.AsEnumerable ().Any (o => StreamingEndpointInformation.ReturnTypeSE (o) == StreamingEndpointInformation.StreamEndpointType.Classic))  		TextBoxLogWriteLine ("At least one streaming endpoint is 'Classic'. For the best experience' it is recommended that you migrate it to 'Standard'."' true);  	// Warning  	// Let's check if there is an old CDN config  	if (_context.StreamingEndpoints.AsEnumerable ().Any (o => o.CdnEnabled && o.CdnProvider == null))  		TextBoxLogWriteLine ("At least one streaming endpoint uses an old CDN configuration. It is recommended that you migrate to a new enhanced configuration by disabling/re-enabling CDN."' true);  	// Warning  	// Let's check if there is dynamic packaging for the channels  	double nbchannels = (double)_context.Channels.Count ();  	double nbse = (double)_context.StreamingEndpoints.AsEnumerable ().Where (o => StreamingEndpointInformation.CanDoDynPackaging (o)).ToList ().Count;  	if (nbse > 0 && nbchannels > 0 && (nbchannels / nbse) > 5)  		TextBoxLogWriteLine ("There are {0} channels and {1} Standard/Premium streaming endpoint(s). Recommandation is to provision at least 1 streaming endpoint per group of 5 channels."' nbchannels' nbse' true);  	// Warning  } catch (Exception ex) {  	MessageBox.Show (Program.GetErrorMessage (ex) + "\n\nAMS Explorer will exit."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	Environment.Exit (0);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform,The following statement contains a magic number: if (nbse > 0 && nbchannels > 0 && (nbchannels / nbse) > 5)  	TextBoxLogWriteLine ("There are {0} channels and {1} Standard/Premium streaming endpoint(s). Recommandation is to provision at least 1 streaming endpoint per group of 5 channels."' nbchannels' nbse' true);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform,The following statement contains a magic number: if (nbassets > (0.75 * maxNbAssets)) {  	TextBoxLogWriteLine ("This account contains {0} assets. Warning' the limit is {1}."' nbassets' maxNbAssets' true);  	// Warning  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Mainform,The following statement contains a magic number: if (nbjobs > (0.75 * maxNbJobs)) {  	TextBoxLogWriteLine ("This account contains {0} jobs. Warning' the limit is {1}."' nbjobs' maxNbJobs' true);  	// Warning  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Notify,The following statement contains a magic number: if (Properties.Settings.Default.HideTaskbarNotifications == false) {  	notifyIcon1.ShowBalloonTip (3000' title' text' Error ? ToolTipIcon.Error : ToolTipIcon.Info);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,Notify,The following statement contains a magic number: notifyIcon1.ShowBalloonTip (3000' title' text' Error ? ToolTipIcon.Error : ToolTipIcon.Info);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The following statement contains a magic number: try {  	CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (targetStorage' targetStorageKey)' _credentials.ReturnStorageSuffix ()' true);  	CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient ();  	// Create a new asset.  	asset = _context.Assets.Create (assetname' targetStorage' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None);  	writePolicy = _context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromDays (2)' AccessPermissions.Write);  	assetFile = asset.AssetFiles.Create (fileName);  	destinationLocator = _context.Locators.CreateLocator (LocatorType.Sas' asset' writePolicy);  	Uri uploadUri = new Uri (destinationLocator.Path);  	string assetContainerName = uploadUri.Segments [1];  	CloudBlobContainer mediaBlobContainer = cloudBlobClient.GetContainerReference (assetContainerName);  	TextBoxLogWriteLine ("Creating the blob container.");  	mediaBlobContainer.CreateIfNotExists ();  	blockBlob = mediaBlobContainer.GetBlockBlobReference (fileName);  	TextBoxLogWriteLine ("Created a reference for block blob in Azure....");  	string stringOperation = await blockBlob.StartCopyAsync (ObjectUrl' token);  	bool Cancelled = false;  	DateTime startTime = DateTime.UtcNow;  	bool continueLoop = true;  	while (continueLoop)// && !token.IsCancellationRequested)  	 {  		if (token.IsCancellationRequested && !Cancelled) {  			await blockBlob.AbortCopyAsync (stringOperation);  			Cancelled = true;  		}  		blockBlob.FetchAttributes ();  		var copyStatus = blockBlob.CopyState;  		if (copyStatus != null) {  			double percentComplete = (long)100 * (long)copyStatus.BytesCopied / (long)copyStatus.TotalBytes;  			DoGridTransferUpdateProgress (percentComplete' guidTransfer);  			if (copyStatus.Status != CopyStatus.Pending) {  				continueLoop = false;  				if (copyStatus.Status == CopyStatus.Failed) {  					Error = true;  					ErrorMessage = copyStatus.StatusDescription;  				}  				if (copyStatus.Status == CopyStatus.Aborted) {  					Canceled = true;  				}  			}  		}  		System.Threading.Thread.Sleep (1000);  	}  	DateTime endTime = DateTime.UtcNow;  	TimeSpan diffTime = endTime - startTime;  	if (!Error && !Canceled) {  		TextBoxLogWriteLine ("time transfer: {0}"' diffTime.Duration ().ToString ());  		TextBoxLogWriteLine ("Creating Azure Media Services asset...");  		blockBlob.FetchAttributes ();  		assetFile.ContentFileSize = blockBlob.Properties.Length;  		assetFile.Update ();  		destinationLocator.Delete ();  		writePolicy.Delete ();  		// Refresh the asset.  		asset = _context.Assets.Where (a => a.Id == asset.Id).FirstOrDefault ();  		// make the file primary  		AssetInfo.SetFileAsPrimary (asset' assetFile.Name);  		DoGridTransferDeclareCompleted (guidTransfer' asset.Id);  		DoRefreshGridAssetV (false);  	} else if (Canceled) {  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  		DoGridTransferDeclareCancelled (guidTransfer);  		DoRefreshGridAssetV (false);  	} else// Error!  	 {  		DoGridTransferDeclareError (guidTransfer' "Error during import. " + ErrorMessage);  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  	}  } catch (Exception ex) {  	Error = true;  	TextBoxLogWriteLine ("Error during file import."' true);  	TextBoxLogWriteLine (ex);  	DoGridTransferDeclareError (guidTransfer' ex);  	if (destinationLocator != null) {  		try {  			destinationLocator.Delete ();  		} catch {  		}  	}  	if (writePolicy != null) {  		try {  			writePolicy.Delete ();  		} catch {  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The following statement contains a magic number: try {  	CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (targetStorage' targetStorageKey)' _credentials.ReturnStorageSuffix ()' true);  	CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient ();  	// Create a new asset.  	asset = _context.Assets.Create (assetname' targetStorage' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None);  	writePolicy = _context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromDays (2)' AccessPermissions.Write);  	assetFile = asset.AssetFiles.Create (fileName);  	destinationLocator = _context.Locators.CreateLocator (LocatorType.Sas' asset' writePolicy);  	Uri uploadUri = new Uri (destinationLocator.Path);  	string assetContainerName = uploadUri.Segments [1];  	CloudBlobContainer mediaBlobContainer = cloudBlobClient.GetContainerReference (assetContainerName);  	TextBoxLogWriteLine ("Creating the blob container.");  	mediaBlobContainer.CreateIfNotExists ();  	blockBlob = mediaBlobContainer.GetBlockBlobReference (fileName);  	TextBoxLogWriteLine ("Created a reference for block blob in Azure....");  	string stringOperation = await blockBlob.StartCopyAsync (ObjectUrl' token);  	bool Cancelled = false;  	DateTime startTime = DateTime.UtcNow;  	bool continueLoop = true;  	while (continueLoop)// && !token.IsCancellationRequested)  	 {  		if (token.IsCancellationRequested && !Cancelled) {  			await blockBlob.AbortCopyAsync (stringOperation);  			Cancelled = true;  		}  		blockBlob.FetchAttributes ();  		var copyStatus = blockBlob.CopyState;  		if (copyStatus != null) {  			double percentComplete = (long)100 * (long)copyStatus.BytesCopied / (long)copyStatus.TotalBytes;  			DoGridTransferUpdateProgress (percentComplete' guidTransfer);  			if (copyStatus.Status != CopyStatus.Pending) {  				continueLoop = false;  				if (copyStatus.Status == CopyStatus.Failed) {  					Error = true;  					ErrorMessage = copyStatus.StatusDescription;  				}  				if (copyStatus.Status == CopyStatus.Aborted) {  					Canceled = true;  				}  			}  		}  		System.Threading.Thread.Sleep (1000);  	}  	DateTime endTime = DateTime.UtcNow;  	TimeSpan diffTime = endTime - startTime;  	if (!Error && !Canceled) {  		TextBoxLogWriteLine ("time transfer: {0}"' diffTime.Duration ().ToString ());  		TextBoxLogWriteLine ("Creating Azure Media Services asset...");  		blockBlob.FetchAttributes ();  		assetFile.ContentFileSize = blockBlob.Properties.Length;  		assetFile.Update ();  		destinationLocator.Delete ();  		writePolicy.Delete ();  		// Refresh the asset.  		asset = _context.Assets.Where (a => a.Id == asset.Id).FirstOrDefault ();  		// make the file primary  		AssetInfo.SetFileAsPrimary (asset' assetFile.Name);  		DoGridTransferDeclareCompleted (guidTransfer' asset.Id);  		DoRefreshGridAssetV (false);  	} else if (Canceled) {  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  		DoGridTransferDeclareCancelled (guidTransfer);  		DoRefreshGridAssetV (false);  	} else// Error!  	 {  		DoGridTransferDeclareError (guidTransfer' "Error during import. " + ErrorMessage);  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  	}  } catch (Exception ex) {  	Error = true;  	TextBoxLogWriteLine ("Error during file import."' true);  	TextBoxLogWriteLine (ex);  	DoGridTransferDeclareError (guidTransfer' ex);  	if (destinationLocator != null) {  		try {  			destinationLocator.Delete ();  		} catch {  		}  	}  	if (writePolicy != null) {  		try {  			writePolicy.Delete ();  		} catch {  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The following statement contains a magic number: try {  	CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (targetStorage' targetStorageKey)' _credentials.ReturnStorageSuffix ()' true);  	CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient ();  	// Create a new asset.  	asset = _context.Assets.Create (assetname' targetStorage' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None);  	writePolicy = _context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromDays (2)' AccessPermissions.Write);  	assetFile = asset.AssetFiles.Create (fileName);  	destinationLocator = _context.Locators.CreateLocator (LocatorType.Sas' asset' writePolicy);  	Uri uploadUri = new Uri (destinationLocator.Path);  	string assetContainerName = uploadUri.Segments [1];  	CloudBlobContainer mediaBlobContainer = cloudBlobClient.GetContainerReference (assetContainerName);  	TextBoxLogWriteLine ("Creating the blob container.");  	mediaBlobContainer.CreateIfNotExists ();  	blockBlob = mediaBlobContainer.GetBlockBlobReference (fileName);  	TextBoxLogWriteLine ("Created a reference for block blob in Azure....");  	string stringOperation = await blockBlob.StartCopyAsync (ObjectUrl' token);  	bool Cancelled = false;  	DateTime startTime = DateTime.UtcNow;  	bool continueLoop = true;  	while (continueLoop)// && !token.IsCancellationRequested)  	 {  		if (token.IsCancellationRequested && !Cancelled) {  			await blockBlob.AbortCopyAsync (stringOperation);  			Cancelled = true;  		}  		blockBlob.FetchAttributes ();  		var copyStatus = blockBlob.CopyState;  		if (copyStatus != null) {  			double percentComplete = (long)100 * (long)copyStatus.BytesCopied / (long)copyStatus.TotalBytes;  			DoGridTransferUpdateProgress (percentComplete' guidTransfer);  			if (copyStatus.Status != CopyStatus.Pending) {  				continueLoop = false;  				if (copyStatus.Status == CopyStatus.Failed) {  					Error = true;  					ErrorMessage = copyStatus.StatusDescription;  				}  				if (copyStatus.Status == CopyStatus.Aborted) {  					Canceled = true;  				}  			}  		}  		System.Threading.Thread.Sleep (1000);  	}  	DateTime endTime = DateTime.UtcNow;  	TimeSpan diffTime = endTime - startTime;  	if (!Error && !Canceled) {  		TextBoxLogWriteLine ("time transfer: {0}"' diffTime.Duration ().ToString ());  		TextBoxLogWriteLine ("Creating Azure Media Services asset...");  		blockBlob.FetchAttributes ();  		assetFile.ContentFileSize = blockBlob.Properties.Length;  		assetFile.Update ();  		destinationLocator.Delete ();  		writePolicy.Delete ();  		// Refresh the asset.  		asset = _context.Assets.Where (a => a.Id == asset.Id).FirstOrDefault ();  		// make the file primary  		AssetInfo.SetFileAsPrimary (asset' assetFile.Name);  		DoGridTransferDeclareCompleted (guidTransfer' asset.Id);  		DoRefreshGridAssetV (false);  	} else if (Canceled) {  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  		DoGridTransferDeclareCancelled (guidTransfer);  		DoRefreshGridAssetV (false);  	} else// Error!  	 {  		DoGridTransferDeclareError (guidTransfer' "Error during import. " + ErrorMessage);  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  	}  } catch (Exception ex) {  	Error = true;  	TextBoxLogWriteLine ("Error during file import."' true);  	TextBoxLogWriteLine (ex);  	DoGridTransferDeclareError (guidTransfer' ex);  	if (destinationLocator != null) {  		try {  			destinationLocator.Delete ();  		} catch {  		}  	}  	if (writePolicy != null) {  		try {  			writePolicy.Delete ();  		} catch {  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The following statement contains a magic number: writePolicy = _context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromDays (2)' AccessPermissions.Write);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The following statement contains a magic number: while (continueLoop)// && !token.IsCancellationRequested)   {  	if (token.IsCancellationRequested && !Cancelled) {  		await blockBlob.AbortCopyAsync (stringOperation);  		Cancelled = true;  	}  	blockBlob.FetchAttributes ();  	var copyStatus = blockBlob.CopyState;  	if (copyStatus != null) {  		double percentComplete = (long)100 * (long)copyStatus.BytesCopied / (long)copyStatus.TotalBytes;  		DoGridTransferUpdateProgress (percentComplete' guidTransfer);  		if (copyStatus.Status != CopyStatus.Pending) {  			continueLoop = false;  			if (copyStatus.Status == CopyStatus.Failed) {  				Error = true;  				ErrorMessage = copyStatus.StatusDescription;  			}  			if (copyStatus.Status == CopyStatus.Aborted) {  				Canceled = true;  			}  		}  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The following statement contains a magic number: while (continueLoop)// && !token.IsCancellationRequested)   {  	if (token.IsCancellationRequested && !Cancelled) {  		await blockBlob.AbortCopyAsync (stringOperation);  		Cancelled = true;  	}  	blockBlob.FetchAttributes ();  	var copyStatus = blockBlob.CopyState;  	if (copyStatus != null) {  		double percentComplete = (long)100 * (long)copyStatus.BytesCopied / (long)copyStatus.TotalBytes;  		DoGridTransferUpdateProgress (percentComplete' guidTransfer);  		if (copyStatus.Status != CopyStatus.Pending) {  			continueLoop = false;  			if (copyStatus.Status == CopyStatus.Failed) {  				Error = true;  				ErrorMessage = copyStatus.StatusDescription;  			}  			if (copyStatus.Status == CopyStatus.Aborted) {  				Canceled = true;  			}  		}  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The following statement contains a magic number: if (copyStatus != null) {  	double percentComplete = (long)100 * (long)copyStatus.BytesCopied / (long)copyStatus.TotalBytes;  	DoGridTransferUpdateProgress (percentComplete' guidTransfer);  	if (copyStatus.Status != CopyStatus.Pending) {  		continueLoop = false;  		if (copyStatus.Status == CopyStatus.Failed) {  			Error = true;  			ErrorMessage = copyStatus.StatusDescription;  		}  		if (copyStatus.Status == CopyStatus.Aborted) {  			Canceled = true;  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromHttp,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The following statement contains a magic number: try {  	// Create a new blob.  	CloudBlobContainer Container = new CloudBlobContainer (ObjectUrl);  	CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (destStorage' destStorageKey)' _credentials.ReturnStorageSuffix ()' true);  	CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient ();  	// Create a new asset.  	TextBoxLogWriteLine ("Creating Azure Media Services asset...");  	asset = _context.Assets.Create (assetname' destStorage' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None);  	writePolicy = _context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromDays (2)' AccessPermissions.Write);  	destinationLocator = _context.Locators.CreateLocator (LocatorType.Sas' asset' writePolicy);  	Uri uploadUri = new Uri (destinationLocator.Path);  	string assetContainerName = uploadUri.Segments [1];  	CloudBlobContainer mediaBlobContainer = cloudBlobClient.GetContainerReference (assetContainerName);  	TextBoxLogWriteLine ("Creating the blob container.");  	mediaBlobContainer.CreateIfNotExists ();  	long Length = 0;  	foreach (var blob in Container.ListBlobs ()) {  		if (blob.GetType () == typeof(CloudBlockBlob)) {  			var blobblock = (CloudBlockBlob)blob;  			Length += blobblock.Properties.Length;  		}  	}  	var blobsblock = Container.ListBlobs ().Where (b => b.GetType () == typeof(CloudBlockBlob));  	int nbtotalblobblock = blobsblock.Count ();  	int nbblob = 0;  	long BytesCopied = 0;  	foreach (var blob in blobsblock) {  		nbblob++;  		string fileName = Path.GetFileName (blob.Uri.ToString ());  		if (fileName != "_azuremediaservices.config") {  			assetFile = asset.AssetFiles.Create (fileName);  		} else {  			assetFile = null;  		}  		blockBlob = mediaBlobContainer.GetBlockBlobReference (fileName);  		TextBoxLogWriteLine ("Copying file '{0}'...."' fileName);  		var urib = new UriBuilder (ObjectUrl);  		urib.Path = urib.Path + "/" + Path.GetFileName (blob.Uri.ToString ());  		string stringOperation = await blockBlob.StartCopyAsync (urib.Uri' response.token);  		bool Cancelled = false;  		DateTime startTime = DateTime.UtcNow;  		bool continueLoop = true;  		while (continueLoop) {  			if (response.token.IsCancellationRequested && !Cancelled) {  				await blockBlob.AbortCopyAsync (stringOperation);  				Cancelled = true;  			}  			blockBlob.FetchAttributes ();  			var copyStatus = blockBlob.CopyState;  			if (copyStatus != null) {  				double percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (nbtotalblobblock)) * 100d * (long)(BytesCopied + copyStatus.BytesCopied) / Length;  				DoGridTransferUpdateProgress (percentComplete' response.Id);  				if (copyStatus.Status != CopyStatus.Pending) {  					continueLoop = false;  					if (copyStatus.Status == CopyStatus.Failed) {  						Error = true;  						ErrorMessage = copyStatus.StatusDescription;  					}  					if (copyStatus.Status == CopyStatus.Aborted) {  						Canceled = true;  					}  				}  			}  			System.Threading.Thread.Sleep (1000);  		}  		blockBlob.FetchAttributes ();  		if (assetFile != null) {  			assetFile.ContentFileSize = blockBlob.Properties.Length;  			assetFile.Update ();  		}  		DateTime endTime = DateTime.UtcNow;  		TimeSpan diffTime = endTime - startTime;  		BytesCopied += blockBlob.Properties.Length;  	}  	List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  	List<Task> mylistresults = new List<Task> ();  	var blobsdir = Container.ListBlobs ().Where (b => b.GetType () == typeof(CloudBlobDirectory));  	int nbtotalblobdir = blobsdir.Count ();  	int nbblobdir = 0;  	foreach (var blob in blobsdir) {  		nbblobdir++;  		string fileName = blob.Uri.Segments [2];  		assetFile = asset.AssetFiles.Create (fileName.Substring (0' fileName.Length - 1));  		// to remove / at the end  		CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  		ListDirectories.Add (blobdir);  		TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  		var srcBlobList = blobdir.ListBlobs (useFlatBlobListing: true' blobListingDetails: BlobListingDetails.None).ToList ();  		var subblocks = srcBlobList.Where (s => s.GetType () == typeof(CloudBlockBlob));  		long size = 0;  		if (subblocks.Count () > 0)  			size = subblocks.Sum (s => ((CloudBlockBlob)s).Properties.Length);  		assetFile.ContentFileSize = size;  		assetFile.Update ();  	}  	// let's launch the copy of fragblobs  	double ind = 0;  	foreach (var dir in ListDirectories) {  		TextBoxLogWriteLine ("Copying fragblobs directory '{0}'...."' dir.Prefix);  		mylistresults.AddRange (AssetInfo.CopyBlobDirectory (dir' mediaBlobContainer' ObjectUrl.Query' response.token));  		if (mylistresults.Count > 0) {  			while (!mylistresults.All (r => r.IsCompleted)) {  				Task.Delay (TimeSpan.FromSeconds (3d)).Wait ();  				double percentComplete = 100d * (ind + Convert.ToDouble (mylistresults.Where (c => c.IsCompleted).Count ()) / Convert.ToDouble (mylistresults.Count)) / Convert.ToDouble (ListDirectories.Count);  				DoGridTransferUpdateProgressText (string.Format ("fragblobs directory '{0}' ({1}/{2})"' dir.Prefix' mylistresults.Where (r => r.IsCompleted).Count ()' mylistresults.Count)' (int)percentComplete' response.Id);  			}  		}  		ind++;  		mylistresults.Clear ();  	}  	if (!Error && !Canceled) {  		destinationLocator.Delete ();  		writePolicy.Delete ();  		// Refresh the asset.  		asset = _context.Assets.Where (a => a.Id == asset.Id).FirstOrDefault ();  		// make one of the file primary  		AssetInfo.SetAFileAsPrimary (asset);  		DoGridTransferDeclareCompleted (response.Id' asset.Id);  		DoRefreshGridAssetV (false);  	} else if (Canceled) {  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  		DoGridTransferDeclareCancelled (response.Id);  		DoRefreshGridAssetV (false);  	} else// Error!  	 {  		DoGridTransferDeclareError (response.Id' "Error during import. " + ErrorMessage);  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  	}  } catch (Exception ex) {  	Error = true;  	TextBoxLogWriteLine ("Error during file import."' true);  	TextBoxLogWriteLine (ex);  	DoGridTransferDeclareError (response.Id' ex);  	if (destinationLocator != null) {  		try {  			destinationLocator.Delete ();  		} catch {  		}  	}  	if (writePolicy != null) {  		try {  			writePolicy.Delete ();  		} catch {  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The following statement contains a magic number: try {  	// Create a new blob.  	CloudBlobContainer Container = new CloudBlobContainer (ObjectUrl);  	CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (destStorage' destStorageKey)' _credentials.ReturnStorageSuffix ()' true);  	CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient ();  	// Create a new asset.  	TextBoxLogWriteLine ("Creating Azure Media Services asset...");  	asset = _context.Assets.Create (assetname' destStorage' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None);  	writePolicy = _context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromDays (2)' AccessPermissions.Write);  	destinationLocator = _context.Locators.CreateLocator (LocatorType.Sas' asset' writePolicy);  	Uri uploadUri = new Uri (destinationLocator.Path);  	string assetContainerName = uploadUri.Segments [1];  	CloudBlobContainer mediaBlobContainer = cloudBlobClient.GetContainerReference (assetContainerName);  	TextBoxLogWriteLine ("Creating the blob container.");  	mediaBlobContainer.CreateIfNotExists ();  	long Length = 0;  	foreach (var blob in Container.ListBlobs ()) {  		if (blob.GetType () == typeof(CloudBlockBlob)) {  			var blobblock = (CloudBlockBlob)blob;  			Length += blobblock.Properties.Length;  		}  	}  	var blobsblock = Container.ListBlobs ().Where (b => b.GetType () == typeof(CloudBlockBlob));  	int nbtotalblobblock = blobsblock.Count ();  	int nbblob = 0;  	long BytesCopied = 0;  	foreach (var blob in blobsblock) {  		nbblob++;  		string fileName = Path.GetFileName (blob.Uri.ToString ());  		if (fileName != "_azuremediaservices.config") {  			assetFile = asset.AssetFiles.Create (fileName);  		} else {  			assetFile = null;  		}  		blockBlob = mediaBlobContainer.GetBlockBlobReference (fileName);  		TextBoxLogWriteLine ("Copying file '{0}'...."' fileName);  		var urib = new UriBuilder (ObjectUrl);  		urib.Path = urib.Path + "/" + Path.GetFileName (blob.Uri.ToString ());  		string stringOperation = await blockBlob.StartCopyAsync (urib.Uri' response.token);  		bool Cancelled = false;  		DateTime startTime = DateTime.UtcNow;  		bool continueLoop = true;  		while (continueLoop) {  			if (response.token.IsCancellationRequested && !Cancelled) {  				await blockBlob.AbortCopyAsync (stringOperation);  				Cancelled = true;  			}  			blockBlob.FetchAttributes ();  			var copyStatus = blockBlob.CopyState;  			if (copyStatus != null) {  				double percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (nbtotalblobblock)) * 100d * (long)(BytesCopied + copyStatus.BytesCopied) / Length;  				DoGridTransferUpdateProgress (percentComplete' response.Id);  				if (copyStatus.Status != CopyStatus.Pending) {  					continueLoop = false;  					if (copyStatus.Status == CopyStatus.Failed) {  						Error = true;  						ErrorMessage = copyStatus.StatusDescription;  					}  					if (copyStatus.Status == CopyStatus.Aborted) {  						Canceled = true;  					}  				}  			}  			System.Threading.Thread.Sleep (1000);  		}  		blockBlob.FetchAttributes ();  		if (assetFile != null) {  			assetFile.ContentFileSize = blockBlob.Properties.Length;  			assetFile.Update ();  		}  		DateTime endTime = DateTime.UtcNow;  		TimeSpan diffTime = endTime - startTime;  		BytesCopied += blockBlob.Properties.Length;  	}  	List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  	List<Task> mylistresults = new List<Task> ();  	var blobsdir = Container.ListBlobs ().Where (b => b.GetType () == typeof(CloudBlobDirectory));  	int nbtotalblobdir = blobsdir.Count ();  	int nbblobdir = 0;  	foreach (var blob in blobsdir) {  		nbblobdir++;  		string fileName = blob.Uri.Segments [2];  		assetFile = asset.AssetFiles.Create (fileName.Substring (0' fileName.Length - 1));  		// to remove / at the end  		CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  		ListDirectories.Add (blobdir);  		TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  		var srcBlobList = blobdir.ListBlobs (useFlatBlobListing: true' blobListingDetails: BlobListingDetails.None).ToList ();  		var subblocks = srcBlobList.Where (s => s.GetType () == typeof(CloudBlockBlob));  		long size = 0;  		if (subblocks.Count () > 0)  			size = subblocks.Sum (s => ((CloudBlockBlob)s).Properties.Length);  		assetFile.ContentFileSize = size;  		assetFile.Update ();  	}  	// let's launch the copy of fragblobs  	double ind = 0;  	foreach (var dir in ListDirectories) {  		TextBoxLogWriteLine ("Copying fragblobs directory '{0}'...."' dir.Prefix);  		mylistresults.AddRange (AssetInfo.CopyBlobDirectory (dir' mediaBlobContainer' ObjectUrl.Query' response.token));  		if (mylistresults.Count > 0) {  			while (!mylistresults.All (r => r.IsCompleted)) {  				Task.Delay (TimeSpan.FromSeconds (3d)).Wait ();  				double percentComplete = 100d * (ind + Convert.ToDouble (mylistresults.Where (c => c.IsCompleted).Count ()) / Convert.ToDouble (mylistresults.Count)) / Convert.ToDouble (ListDirectories.Count);  				DoGridTransferUpdateProgressText (string.Format ("fragblobs directory '{0}' ({1}/{2})"' dir.Prefix' mylistresults.Where (r => r.IsCompleted).Count ()' mylistresults.Count)' (int)percentComplete' response.Id);  			}  		}  		ind++;  		mylistresults.Clear ();  	}  	if (!Error && !Canceled) {  		destinationLocator.Delete ();  		writePolicy.Delete ();  		// Refresh the asset.  		asset = _context.Assets.Where (a => a.Id == asset.Id).FirstOrDefault ();  		// make one of the file primary  		AssetInfo.SetAFileAsPrimary (asset);  		DoGridTransferDeclareCompleted (response.Id' asset.Id);  		DoRefreshGridAssetV (false);  	} else if (Canceled) {  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  		DoGridTransferDeclareCancelled (response.Id);  		DoRefreshGridAssetV (false);  	} else// Error!  	 {  		DoGridTransferDeclareError (response.Id' "Error during import. " + ErrorMessage);  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  	}  } catch (Exception ex) {  	Error = true;  	TextBoxLogWriteLine ("Error during file import."' true);  	TextBoxLogWriteLine (ex);  	DoGridTransferDeclareError (response.Id' ex);  	if (destinationLocator != null) {  		try {  			destinationLocator.Delete ();  		} catch {  		}  	}  	if (writePolicy != null) {  		try {  			writePolicy.Delete ();  		} catch {  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The following statement contains a magic number: try {  	// Create a new blob.  	CloudBlobContainer Container = new CloudBlobContainer (ObjectUrl);  	CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (destStorage' destStorageKey)' _credentials.ReturnStorageSuffix ()' true);  	CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient ();  	// Create a new asset.  	TextBoxLogWriteLine ("Creating Azure Media Services asset...");  	asset = _context.Assets.Create (assetname' destStorage' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None);  	writePolicy = _context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromDays (2)' AccessPermissions.Write);  	destinationLocator = _context.Locators.CreateLocator (LocatorType.Sas' asset' writePolicy);  	Uri uploadUri = new Uri (destinationLocator.Path);  	string assetContainerName = uploadUri.Segments [1];  	CloudBlobContainer mediaBlobContainer = cloudBlobClient.GetContainerReference (assetContainerName);  	TextBoxLogWriteLine ("Creating the blob container.");  	mediaBlobContainer.CreateIfNotExists ();  	long Length = 0;  	foreach (var blob in Container.ListBlobs ()) {  		if (blob.GetType () == typeof(CloudBlockBlob)) {  			var blobblock = (CloudBlockBlob)blob;  			Length += blobblock.Properties.Length;  		}  	}  	var blobsblock = Container.ListBlobs ().Where (b => b.GetType () == typeof(CloudBlockBlob));  	int nbtotalblobblock = blobsblock.Count ();  	int nbblob = 0;  	long BytesCopied = 0;  	foreach (var blob in blobsblock) {  		nbblob++;  		string fileName = Path.GetFileName (blob.Uri.ToString ());  		if (fileName != "_azuremediaservices.config") {  			assetFile = asset.AssetFiles.Create (fileName);  		} else {  			assetFile = null;  		}  		blockBlob = mediaBlobContainer.GetBlockBlobReference (fileName);  		TextBoxLogWriteLine ("Copying file '{0}'...."' fileName);  		var urib = new UriBuilder (ObjectUrl);  		urib.Path = urib.Path + "/" + Path.GetFileName (blob.Uri.ToString ());  		string stringOperation = await blockBlob.StartCopyAsync (urib.Uri' response.token);  		bool Cancelled = false;  		DateTime startTime = DateTime.UtcNow;  		bool continueLoop = true;  		while (continueLoop) {  			if (response.token.IsCancellationRequested && !Cancelled) {  				await blockBlob.AbortCopyAsync (stringOperation);  				Cancelled = true;  			}  			blockBlob.FetchAttributes ();  			var copyStatus = blockBlob.CopyState;  			if (copyStatus != null) {  				double percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (nbtotalblobblock)) * 100d * (long)(BytesCopied + copyStatus.BytesCopied) / Length;  				DoGridTransferUpdateProgress (percentComplete' response.Id);  				if (copyStatus.Status != CopyStatus.Pending) {  					continueLoop = false;  					if (copyStatus.Status == CopyStatus.Failed) {  						Error = true;  						ErrorMessage = copyStatus.StatusDescription;  					}  					if (copyStatus.Status == CopyStatus.Aborted) {  						Canceled = true;  					}  				}  			}  			System.Threading.Thread.Sleep (1000);  		}  		blockBlob.FetchAttributes ();  		if (assetFile != null) {  			assetFile.ContentFileSize = blockBlob.Properties.Length;  			assetFile.Update ();  		}  		DateTime endTime = DateTime.UtcNow;  		TimeSpan diffTime = endTime - startTime;  		BytesCopied += blockBlob.Properties.Length;  	}  	List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  	List<Task> mylistresults = new List<Task> ();  	var blobsdir = Container.ListBlobs ().Where (b => b.GetType () == typeof(CloudBlobDirectory));  	int nbtotalblobdir = blobsdir.Count ();  	int nbblobdir = 0;  	foreach (var blob in blobsdir) {  		nbblobdir++;  		string fileName = blob.Uri.Segments [2];  		assetFile = asset.AssetFiles.Create (fileName.Substring (0' fileName.Length - 1));  		// to remove / at the end  		CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  		ListDirectories.Add (blobdir);  		TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  		var srcBlobList = blobdir.ListBlobs (useFlatBlobListing: true' blobListingDetails: BlobListingDetails.None).ToList ();  		var subblocks = srcBlobList.Where (s => s.GetType () == typeof(CloudBlockBlob));  		long size = 0;  		if (subblocks.Count () > 0)  			size = subblocks.Sum (s => ((CloudBlockBlob)s).Properties.Length);  		assetFile.ContentFileSize = size;  		assetFile.Update ();  	}  	// let's launch the copy of fragblobs  	double ind = 0;  	foreach (var dir in ListDirectories) {  		TextBoxLogWriteLine ("Copying fragblobs directory '{0}'...."' dir.Prefix);  		mylistresults.AddRange (AssetInfo.CopyBlobDirectory (dir' mediaBlobContainer' ObjectUrl.Query' response.token));  		if (mylistresults.Count > 0) {  			while (!mylistresults.All (r => r.IsCompleted)) {  				Task.Delay (TimeSpan.FromSeconds (3d)).Wait ();  				double percentComplete = 100d * (ind + Convert.ToDouble (mylistresults.Where (c => c.IsCompleted).Count ()) / Convert.ToDouble (mylistresults.Count)) / Convert.ToDouble (ListDirectories.Count);  				DoGridTransferUpdateProgressText (string.Format ("fragblobs directory '{0}' ({1}/{2})"' dir.Prefix' mylistresults.Where (r => r.IsCompleted).Count ()' mylistresults.Count)' (int)percentComplete' response.Id);  			}  		}  		ind++;  		mylistresults.Clear ();  	}  	if (!Error && !Canceled) {  		destinationLocator.Delete ();  		writePolicy.Delete ();  		// Refresh the asset.  		asset = _context.Assets.Where (a => a.Id == asset.Id).FirstOrDefault ();  		// make one of the file primary  		AssetInfo.SetAFileAsPrimary (asset);  		DoGridTransferDeclareCompleted (response.Id' asset.Id);  		DoRefreshGridAssetV (false);  	} else if (Canceled) {  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  		DoGridTransferDeclareCancelled (response.Id);  		DoRefreshGridAssetV (false);  	} else// Error!  	 {  		DoGridTransferDeclareError (response.Id' "Error during import. " + ErrorMessage);  		try {  			destinationLocator.Delete ();  			writePolicy.Delete ();  		} catch {  		}  	}  } catch (Exception ex) {  	Error = true;  	TextBoxLogWriteLine ("Error during file import."' true);  	TextBoxLogWriteLine (ex);  	DoGridTransferDeclareError (response.Id' ex);  	if (destinationLocator != null) {  		try {  			destinationLocator.Delete ();  		} catch {  		}  	}  	if (writePolicy != null) {  		try {  			writePolicy.Delete ();  		} catch {  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The following statement contains a magic number: writePolicy = _context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromDays (2)' AccessPermissions.Write);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The following statement contains a magic number: foreach (var blob in blobsblock) {  	nbblob++;  	string fileName = Path.GetFileName (blob.Uri.ToString ());  	if (fileName != "_azuremediaservices.config") {  		assetFile = asset.AssetFiles.Create (fileName);  	} else {  		assetFile = null;  	}  	blockBlob = mediaBlobContainer.GetBlockBlobReference (fileName);  	TextBoxLogWriteLine ("Copying file '{0}'...."' fileName);  	var urib = new UriBuilder (ObjectUrl);  	urib.Path = urib.Path + "/" + Path.GetFileName (blob.Uri.ToString ());  	string stringOperation = await blockBlob.StartCopyAsync (urib.Uri' response.token);  	bool Cancelled = false;  	DateTime startTime = DateTime.UtcNow;  	bool continueLoop = true;  	while (continueLoop) {  		if (response.token.IsCancellationRequested && !Cancelled) {  			await blockBlob.AbortCopyAsync (stringOperation);  			Cancelled = true;  		}  		blockBlob.FetchAttributes ();  		var copyStatus = blockBlob.CopyState;  		if (copyStatus != null) {  			double percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (nbtotalblobblock)) * 100d * (long)(BytesCopied + copyStatus.BytesCopied) / Length;  			DoGridTransferUpdateProgress (percentComplete' response.Id);  			if (copyStatus.Status != CopyStatus.Pending) {  				continueLoop = false;  				if (copyStatus.Status == CopyStatus.Failed) {  					Error = true;  					ErrorMessage = copyStatus.StatusDescription;  				}  				if (copyStatus.Status == CopyStatus.Aborted) {  					Canceled = true;  				}  			}  		}  		System.Threading.Thread.Sleep (1000);  	}  	blockBlob.FetchAttributes ();  	if (assetFile != null) {  		assetFile.ContentFileSize = blockBlob.Properties.Length;  		assetFile.Update ();  	}  	DateTime endTime = DateTime.UtcNow;  	TimeSpan diffTime = endTime - startTime;  	BytesCopied += blockBlob.Properties.Length;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The following statement contains a magic number: while (continueLoop) {  	if (response.token.IsCancellationRequested && !Cancelled) {  		await blockBlob.AbortCopyAsync (stringOperation);  		Cancelled = true;  	}  	blockBlob.FetchAttributes ();  	var copyStatus = blockBlob.CopyState;  	if (copyStatus != null) {  		double percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (nbtotalblobblock)) * 100d * (long)(BytesCopied + copyStatus.BytesCopied) / Length;  		DoGridTransferUpdateProgress (percentComplete' response.Id);  		if (copyStatus.Status != CopyStatus.Pending) {  			continueLoop = false;  			if (copyStatus.Status == CopyStatus.Failed) {  				Error = true;  				ErrorMessage = copyStatus.StatusDescription;  			}  			if (copyStatus.Status == CopyStatus.Aborted) {  				Canceled = true;  			}  		}  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromStorageContainerSASUrl,The following statement contains a magic number: foreach (var blob in blobsdir) {  	nbblobdir++;  	string fileName = blob.Uri.Segments [2];  	assetFile = asset.AssetFiles.Create (fileName.Substring (0' fileName.Length - 1));  	// to remove / at the end  	CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  	ListDirectories.Add (blobdir);  	TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  	var srcBlobList = blobdir.ListBlobs (useFlatBlobListing: true' blobListingDetails: BlobListingDetails.None).ToList ();  	var subblocks = srcBlobList.Where (s => s.GetType () == typeof(CloudBlockBlob));  	long size = 0;  	if (subblocks.Count () > 0)  		size = subblocks.Sum (s => ((CloudBlockBlob)s).Properties.Length);  	assetFile.ContentFileSize = size;  	assetFile.Update ();  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The following statement contains a magic number: if (!Error && !token.IsCancellationRequested) {  	DoGridTransferDeclareCompleted (guidTransfer' asset.Id);  	if (watchfoldersettings != null && watchfoldersettings.DeleteFile)//user checked the box "delete the file"  	 {  		try {  			File.Delete (filename [0] as string);  			TextBoxLogWriteLine ("File '{0}' deleted."' filename [0]);  		} catch (Exception e) {  			TextBoxLogWriteLine ("Error when deleting '{0}'"' filename [0]' true);  			if (watchfoldersettings.SendEmailToRecipient != null) {  				if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: Error when deleting " + asset.Name' e.Message)) {  					TextBoxLogWriteLine ("Error when sending Outlook email..."' true);  				}  			}  		}  		try {  			if (listfiles.Count > 0) {  				listfiles.ForEach (f => File.Delete (f.fileName));  				TextBoxLogWriteLine ("File(s) '{0}' deleted."' string.Join ("' "' listfiles.Select (f => f.fileName).ToList ()));  			}  		} catch (Exception e) {  			TextBoxLogWriteLine ("Error when deleting '{0}'"' string.Join ("' "' listfiles.Select (f => f.fileName).ToList ())' true);  			if (watchfoldersettings.SendEmailToRecipient != null) {  				if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: Error when deleting files"' string.Join ("' "' listfiles.Select (f => f.fileName).ToList ()) + "\n\n" + e.Message)) {  					TextBoxLogWriteLine ("Error when sending Outlook email..."' true);  				}  			}  		}  	}  	if (watchfoldersettings != null && watchfoldersettings.JobTemplate != null)// option with watchfolder to run a job based on a job template  	 {  		string jobname = string.Format ("Processing of {0} with template {1}"' asset.Name' watchfoldersettings.JobTemplate.Name);  		List<IAsset> assetlist = new List<IAsset> () {  			asset  		};  		// if user wants to insert a workflow or other asstes as asset #0  		if (watchfoldersettings.TypeInputExtraInput != TypeInputExtraInput.None) {  			if (watchfoldersettings.ExtraInputAssets != null)  				assetlist.InsertRange (0' watchfoldersettings.ExtraInputAssets);  		}  		TextBoxLogWriteLine (string.Format ("Submitting job '{0}'"' jobname));  		// Submit the job  		IJob job = _context.Jobs.Create (jobname' watchfoldersettings.JobTemplate' assetlist' Properties.Settings.Default.DefaultJobPriority);  		try {  			job.Submit ();  		} catch (Exception e) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}'"' job.Name' true);  			TextBoxLogWriteLine (e);  			Program.WatchFolderCallApi ("Job submission error"' Path.GetFileName (filename [0])' watchfoldersettings' job: job);  			if (watchfoldersettings.SendEmailToRecipient != null) {  				if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: Error when submitting job for asset " + asset.Name' e.Message)) {  					TextBoxLogWriteLine ("Error when sending Outlook email..."' true);  				}  			}  			return;  		}  		DoRefreshGridJobV (false);  		IJob myjob = GetJob (job.Id);  		while (myjob.State == JobState.Processing || myjob.State == JobState.Queued || myjob.State == JobState.Scheduled) {  			System.Threading.Thread.Sleep (1000);  			myjob = GetJob (job.Id);  		}  		if (myjob.State == JobState.Finished) {  			// job template does not rename the output assets. As a fix' we do this:  			int taskind = 1;  			foreach (var task in myjob.Tasks) {  				int outputind = 1;  				foreach (var outputasset in task.OutputAssets) {  					IAsset oasset = AssetInfo.GetAsset (outputasset.Id' _context);  					try {  						oasset.Name = string.Format ("{0} processed with {1}"' asset.Name' watchfoldersettings.JobTemplate.Name);  						if (myjob.Tasks.Count > 1) {  							oasset.Name += string.Format (" - task {0}"' taskind);  						}  						if (task.OutputAssets.Count > 1) {  							oasset.Name += string.Format (" - output asset {0}"' outputind);  						}  						oasset.Update ();  						TextBoxLogWriteLine ("Output asset {0} renamed."' oasset.Name);  					} catch (Exception e) {  						TextBoxLogWriteLine ("Error when renaming an output asset"' true);  						TextBoxLogWriteLine (e);  					}  					outputind++;  				}  				taskind++;  			}  			if (watchfoldersettings.PublishOutputAssets)//user wants to publish the output asset when it has been processed by the job   			 {  				IAccessPolicy policy = _context.AccessPolicies.Create ("AP:" + myjob.Name' TimeSpan.FromDays (Properties.Settings.Default.DefaultLocatorDurationDaysNew)' AccessPermissions.Read);  				foreach (var oasset in myjob.OutputMediaAssets) {  					ILocator MyLocator = _context.Locators.CreateLocator (LocatorType.OnDemandOrigin' oasset' policy' null);  					IStreamingEndpoint SelectedSE = AssetInfo.GetBestStreamingEndpoint (_context);  					StringBuilder sb = new StringBuilder ();  					Uri SmoothUri = MyLocator.GetSmoothStreamingUri ();  					string playbackurl = null;  					if (SmoothUri != null) {  						playbackurl = AssetInfo.DoPlayBackWithStreamingEndpoint (PlayerType.AzureMediaPlayer' SmoothUri.AbsoluteUri' _context' this' oasset' launchbrowser: false' UISelectSEFiltersAndProtocols: false);  						sb.AppendLine ("Link to playback the asset:");  						sb.AppendLine (playbackurl);  						sb.AppendLine ();  					}  					sb.Append (AssetInfo.GetStat (oasset' SelectedSE));  					Program.WatchFolderCallApi (null' Path.GetFileName (filename [0])' watchfoldersettings' asset' oasset' job' MyLocator' SmoothUri' playbackurl);  					if (watchfoldersettings.SendEmailToRecipient != null) {  						if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: Output asset published for asset " + asset.Name' sb.ToString ())) {  							TextBoxLogWriteLine ("Error when sending Outlook email..."' true);  						}  					}  				}  			} else// no publication  			 {  				foreach (var oasset in myjob.OutputMediaAssets) {  					Program.WatchFolderCallApi (null' Path.GetFileName (filename [0])' watchfoldersettings' asset' oasset' job);  					if (watchfoldersettings.SendEmailToRecipient != null) {  						StringBuilder sb = new StringBuilder ();  						sb.Append (AssetInfo.GetStat (oasset));  						if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: asset uploaded and processed " + asset.Name' sb.ToString ())) {  							TextBoxLogWriteLine ("Error when sending Outlook email..."' true);  						}  					}  				}  			}  		} else// not completed successfuly  		 {  			Program.WatchFolderCallApi ("Job Error"' Path.GetFileName (filename [0])' watchfoldersettings' asset' null' job);  			if (watchfoldersettings.SendEmailToRecipient != null) {  				StringBuilder sb = new StringBuilder ();  				sb.Append ((new JobInfo (job).GetStats ()));  				if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: job " + job.State.ToString () + " for asset " + asset.Name' sb.ToString ())) {  					TextBoxLogWriteLine ("Error when sending Outlook email..."' true);  				}  			}  		}  	} else// user selected no processing. Upload successfull  	 {  		Program.WatchFolderCallApi (null' Path.GetFileName (filename [0])' watchfoldersettings' asset);  		if (watchfoldersettings != null && watchfoldersettings.SendEmailToRecipient != null) {  			StringBuilder sb = new StringBuilder ();  			sb.Append (AssetInfo.GetStat (asset));  			Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: upload successful " + asset.Name' sb.ToString ());  		}  	}  } else if (token.IsCancellationRequested) {  	DoGridTransferDeclareCancelled (guidTransfer);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The following statement contains a magic number: if (watchfoldersettings != null && watchfoldersettings.JobTemplate != null)// option with watchfolder to run a job based on a job template   {  	string jobname = string.Format ("Processing of {0} with template {1}"' asset.Name' watchfoldersettings.JobTemplate.Name);  	List<IAsset> assetlist = new List<IAsset> () {  		asset  	};  	// if user wants to insert a workflow or other asstes as asset #0  	if (watchfoldersettings.TypeInputExtraInput != TypeInputExtraInput.None) {  		if (watchfoldersettings.ExtraInputAssets != null)  			assetlist.InsertRange (0' watchfoldersettings.ExtraInputAssets);  	}  	TextBoxLogWriteLine (string.Format ("Submitting job '{0}'"' jobname));  	// Submit the job  	IJob job = _context.Jobs.Create (jobname' watchfoldersettings.JobTemplate' assetlist' Properties.Settings.Default.DefaultJobPriority);  	try {  		job.Submit ();  	} catch (Exception e) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}'"' job.Name' true);  		TextBoxLogWriteLine (e);  		Program.WatchFolderCallApi ("Job submission error"' Path.GetFileName (filename [0])' watchfoldersettings' job: job);  		if (watchfoldersettings.SendEmailToRecipient != null) {  			if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: Error when submitting job for asset " + asset.Name' e.Message)) {  				TextBoxLogWriteLine ("Error when sending Outlook email..."' true);  			}  		}  		return;  	}  	DoRefreshGridJobV (false);  	IJob myjob = GetJob (job.Id);  	while (myjob.State == JobState.Processing || myjob.State == JobState.Queued || myjob.State == JobState.Scheduled) {  		System.Threading.Thread.Sleep (1000);  		myjob = GetJob (job.Id);  	}  	if (myjob.State == JobState.Finished) {  		// job template does not rename the output assets. As a fix' we do this:  		int taskind = 1;  		foreach (var task in myjob.Tasks) {  			int outputind = 1;  			foreach (var outputasset in task.OutputAssets) {  				IAsset oasset = AssetInfo.GetAsset (outputasset.Id' _context);  				try {  					oasset.Name = string.Format ("{0} processed with {1}"' asset.Name' watchfoldersettings.JobTemplate.Name);  					if (myjob.Tasks.Count > 1) {  						oasset.Name += string.Format (" - task {0}"' taskind);  					}  					if (task.OutputAssets.Count > 1) {  						oasset.Name += string.Format (" - output asset {0}"' outputind);  					}  					oasset.Update ();  					TextBoxLogWriteLine ("Output asset {0} renamed."' oasset.Name);  				} catch (Exception e) {  					TextBoxLogWriteLine ("Error when renaming an output asset"' true);  					TextBoxLogWriteLine (e);  				}  				outputind++;  			}  			taskind++;  		}  		if (watchfoldersettings.PublishOutputAssets)//user wants to publish the output asset when it has been processed by the job   		 {  			IAccessPolicy policy = _context.AccessPolicies.Create ("AP:" + myjob.Name' TimeSpan.FromDays (Properties.Settings.Default.DefaultLocatorDurationDaysNew)' AccessPermissions.Read);  			foreach (var oasset in myjob.OutputMediaAssets) {  				ILocator MyLocator = _context.Locators.CreateLocator (LocatorType.OnDemandOrigin' oasset' policy' null);  				IStreamingEndpoint SelectedSE = AssetInfo.GetBestStreamingEndpoint (_context);  				StringBuilder sb = new StringBuilder ();  				Uri SmoothUri = MyLocator.GetSmoothStreamingUri ();  				string playbackurl = null;  				if (SmoothUri != null) {  					playbackurl = AssetInfo.DoPlayBackWithStreamingEndpoint (PlayerType.AzureMediaPlayer' SmoothUri.AbsoluteUri' _context' this' oasset' launchbrowser: false' UISelectSEFiltersAndProtocols: false);  					sb.AppendLine ("Link to playback the asset:");  					sb.AppendLine (playbackurl);  					sb.AppendLine ();  				}  				sb.Append (AssetInfo.GetStat (oasset' SelectedSE));  				Program.WatchFolderCallApi (null' Path.GetFileName (filename [0])' watchfoldersettings' asset' oasset' job' MyLocator' SmoothUri' playbackurl);  				if (watchfoldersettings.SendEmailToRecipient != null) {  					if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: Output asset published for asset " + asset.Name' sb.ToString ())) {  						TextBoxLogWriteLine ("Error when sending Outlook email..."' true);  					}  				}  			}  		} else// no publication  		 {  			foreach (var oasset in myjob.OutputMediaAssets) {  				Program.WatchFolderCallApi (null' Path.GetFileName (filename [0])' watchfoldersettings' asset' oasset' job);  				if (watchfoldersettings.SendEmailToRecipient != null) {  					StringBuilder sb = new StringBuilder ();  					sb.Append (AssetInfo.GetStat (oasset));  					if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: asset uploaded and processed " + asset.Name' sb.ToString ())) {  						TextBoxLogWriteLine ("Error when sending Outlook email..."' true);  					}  				}  			}  		}  	} else// not completed successfuly  	 {  		Program.WatchFolderCallApi ("Job Error"' Path.GetFileName (filename [0])' watchfoldersettings' asset' null' job);  		if (watchfoldersettings.SendEmailToRecipient != null) {  			StringBuilder sb = new StringBuilder ();  			sb.Append ((new JobInfo (job).GetStats ()));  			if (!Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: job " + job.State.ToString () + " for asset " + asset.Name' sb.ToString ())) {  				TextBoxLogWriteLine ("Error when sending Outlook email..."' true);  			}  		}  	}  } else// user selected no processing. Upload successfull   {  	Program.WatchFolderCallApi (null' Path.GetFileName (filename [0])' watchfoldersettings' asset);  	if (watchfoldersettings != null && watchfoldersettings.SendEmailToRecipient != null) {  		StringBuilder sb = new StringBuilder ();  		sb.Append (AssetInfo.GetStat (asset));  		Program.CreateAndSendOutlookMail (watchfoldersettings.SendEmailToRecipient' "Explorer Watchfolder: upload successful " + asset.Name' sb.ToString ());  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The following statement contains a magic number: while (myjob.State == JobState.Processing || myjob.State == JobState.Queued || myjob.State == JobState.Scheduled) {  	System.Threading.Thread.Sleep (1000);  	myjob = GetJob (job.Id);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessUploadFileAndMore,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessDownloadAsset,The following statement contains a magic number: foreach (IAsset mediaAsset in SelectedAssets) {  	if (token.IsCancellationRequested) {  		break;  	}  	string foldera = folder;  	bool ErrorCurrentAssetFolderCreation = false;  	bool ErrorCurrentAsset = false;  	if (downloadOption == DownloadToFolderOption.SubfolderAssetId) {  		foldera += "\\" + mediaAsset.Id.Substring (12);  	} else if (downloadOption == DownloadToFolderOption.SubfolderAssetName) {  		foldera += "\\" + mediaAsset.Name;  	}  	if (!File.Exists (foldera)) {  		try {  			Directory.CreateDirectory (foldera);  		} catch {  			TextBoxLogWriteLine ("Error when creating folder '{0}'."' foldera' true);  			ErrorCurrentAssetFolderCreation = true;  		}  	}  	if (!ErrorCurrentAssetFolderCreation) {  		var progress = new Dictionary<string' double> ();  		// used to store progress of all files  		mediaAsset.AssetFiles.ToList ().ForEach (f => progress [f.Name] = 0d);  		try {  			await mediaAsset.DownloadToFolderAsync (foldera' (af' p) => {  				progress [af.Name] = p.Progress;  				DoGridTransferUpdateProgress (progress.ToList ().Average (l => l.Value)' guidTransfer);  			}' token);  		} catch (Exception e) {  			ErrorCurrentAsset = true;  			Error = true;  			TextBoxLogWriteLine (string.Format ("Download of asset '{0}' failed."' mediaAsset.Name)' true);  			TextBoxLogWriteLine (e);  			DoGridTransferDeclareError (guidTransfer' e);  		}  		if (!ErrorCurrentAsset) {  			if (openFileExplorer)  				Process.Start (foldera);  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessDownloadAsset,The following statement contains a magic number: if (downloadOption == DownloadToFolderOption.SubfolderAssetId) {  	foldera += "\\" + mediaAsset.Id.Substring (12);  } else if (downloadOption == DownloadToFolderOption.SubfolderAssetName) {  	foldera += "\\" + mediaAsset.Name;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessDownloadAsset,The following statement contains a magic number: foldera += "\\" + mediaAsset.Id.Substring (12);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDownloadFileFromAsset,The following statement contains a magic number: sasLocator = _context.Locators.Create (LocatorType.Sas' asset' AccessPermissions.Read' TimeSpan.FromHours (24));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The following statement contains a magic number: if (form.ShowDialog () == DialogResult.OK) {  	bool ErrorFolderCreation = false;  	_backuprootfolderdownload = form.FolderPath;  	// for reuse later  	if (!Directory.Exists (form.FolderPath)) {  		if (MessageBox.Show (string.Format ("Folder '{0}' does not exist." + Constants.endline + "Do you want to create it ?"' form.FolderPath)' "Folder does not exist"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.OK) {  			try {  				Directory.CreateDirectory (form.FolderPath);  			} catch {  				ErrorFolderCreation = true;  				MessageBox.Show (string.Format ("Error when creating folder '{0}'."' form.FolderPath)' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  				TextBoxLogWriteLine ("Error when creating folder '{0}'."' form.FolderPath' true);  			}  		} else {  			ErrorFolderCreation = true;  			TextBoxLogWriteLine ("User cancelled the folder creation."' true);  		}  	}  	if (!ErrorFolderCreation) {  		var listfiles = new List<string> ();  		// let's see if some files exist in the destination  		foreach (var asset in SelectedAssets) {  			string path = form.FolderPath;  			if (form.FolderOption == DownloadToFolderOption.SubfolderAssetName) {  				path = Path.Combine (path' asset.Name);  			} else if (form.FolderOption == DownloadToFolderOption.SubfolderAssetId) {  				path = Path.Combine (path' asset.Id);  			}  			listfiles.AddRange (asset.AssetFiles.ToList ().Where (f => File.Exists (path + @"\\" + f.Name)).Select (f => path + @"\\" + f.Name).ToList ());  		}  		if (listfiles.Count > 0) {  			string text;  			if (listfiles.Count > 20) {  				text = string.Format ("{0} files are already in the folder(s)\n\nOverwite the files ?"' listfiles.Count);  			} else if (listfiles.Count > 1) {  				text = string.Format ("The following files are already in the folder(s)\n\n{0}\n\nOverwite the files ?"' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ()));  			} else {  				text = string.Format ("The following file is already in the folder\n\n{0}\n\nOverwite the file ?"' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ()));  			}  			if (MessageBox.Show (text' "File(s) overwrite"' MessageBoxButtons.OKCancel' MessageBoxIcon.Warning) != DialogResult.OK) {  				return;  			}  			try {  				listfiles.ForEach (f => File.Delete (f));  			} catch {  				MessageBox.Show ("Error when deleting files"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  				return;  			}  		}  		string label = string.Format ("Download of asset '{0}'"' mediaAsset.Name);  		if (SelectedAssets.Count > 1)  			label = string.Format ("Download of {0} assets"' SelectedAssets.Count);  		var response = DoGridTransferAddItem (label' TransferType.DownloadToLocal' true);  		// Start a worker thread that does downloading.  		var myTask = Task.Factory.StartNew (() => ProcessDownloadAsset (SelectedAssets' form.FolderPath' response.Id' form.FolderOption' form.OpenFolderAfterDownload' response.token)' response.token);  		DotabControlMainSwitch (AMSExplorer.Properties.Resources.TabTransfers);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The following statement contains a magic number: if (!ErrorFolderCreation) {  	var listfiles = new List<string> ();  	// let's see if some files exist in the destination  	foreach (var asset in SelectedAssets) {  		string path = form.FolderPath;  		if (form.FolderOption == DownloadToFolderOption.SubfolderAssetName) {  			path = Path.Combine (path' asset.Name);  		} else if (form.FolderOption == DownloadToFolderOption.SubfolderAssetId) {  			path = Path.Combine (path' asset.Id);  		}  		listfiles.AddRange (asset.AssetFiles.ToList ().Where (f => File.Exists (path + @"\\" + f.Name)).Select (f => path + @"\\" + f.Name).ToList ());  	}  	if (listfiles.Count > 0) {  		string text;  		if (listfiles.Count > 20) {  			text = string.Format ("{0} files are already in the folder(s)\n\nOverwite the files ?"' listfiles.Count);  		} else if (listfiles.Count > 1) {  			text = string.Format ("The following files are already in the folder(s)\n\n{0}\n\nOverwite the files ?"' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ()));  		} else {  			text = string.Format ("The following file is already in the folder\n\n{0}\n\nOverwite the file ?"' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ()));  		}  		if (MessageBox.Show (text' "File(s) overwrite"' MessageBoxButtons.OKCancel' MessageBoxIcon.Warning) != DialogResult.OK) {  			return;  		}  		try {  			listfiles.ForEach (f => File.Delete (f));  		} catch {  			MessageBox.Show ("Error when deleting files"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			return;  		}  	}  	string label = string.Format ("Download of asset '{0}'"' mediaAsset.Name);  	if (SelectedAssets.Count > 1)  		label = string.Format ("Download of {0} assets"' SelectedAssets.Count);  	var response = DoGridTransferAddItem (label' TransferType.DownloadToLocal' true);  	// Start a worker thread that does downloading.  	var myTask = Task.Factory.StartNew (() => ProcessDownloadAsset (SelectedAssets' form.FolderPath' response.Id' form.FolderOption' form.OpenFolderAfterDownload' response.token)' response.token);  	DotabControlMainSwitch (AMSExplorer.Properties.Resources.TabTransfers);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The following statement contains a magic number: if (listfiles.Count > 0) {  	string text;  	if (listfiles.Count > 20) {  		text = string.Format ("{0} files are already in the folder(s)\n\nOverwite the files ?"' listfiles.Count);  	} else if (listfiles.Count > 1) {  		text = string.Format ("The following files are already in the folder(s)\n\n{0}\n\nOverwite the files ?"' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ()));  	} else {  		text = string.Format ("The following file is already in the folder\n\n{0}\n\nOverwite the file ?"' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ()));  	}  	if (MessageBox.Show (text' "File(s) overwrite"' MessageBoxButtons.OKCancel' MessageBoxIcon.Warning) != DialogResult.OK) {  		return;  	}  	try {  		listfiles.ForEach (f => File.Delete (f));  	} catch {  		MessageBox.Show ("Error when deleting files"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		return;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuDownloadToLocal,The following statement contains a magic number: if (listfiles.Count > 20) {  	text = string.Format ("{0} files are already in the folder(s)\n\nOverwite the files ?"' listfiles.Count);  } else if (listfiles.Count > 1) {  	text = string.Format ("The following files are already in the folder(s)\n\n{0}\n\nOverwite the files ?"' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ()));  } else {  	text = string.Format ("The following file is already in the folder\n\n{0}\n\nOverwite the file ?"' string.Join ("\n"' listfiles.Select (f => Path.GetFileName (f)).ToArray ()));  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateLocator,The following statement contains a magic number: if (SelectedAssets.Count > 0) {  	labelAssetName = "A locator will be created for Asset '" + SelectedAssets.FirstOrDefault ().Name + "'.";  	if (SelectedAssets.Count > 1) {  		labelAssetName = "A locator will be created for the " + SelectedAssets.Count.ToString () + " selected assets.";  	}  	CreateLocator form = new CreateLocator () {  		LocatorStartDate = DateTime.UtcNow.AddMinutes (-5)'  		LocatorEndDate = DateTime.UtcNow.AddDays (Properties.Settings.Default.DefaultLocatorDurationDaysNew)'  		LocAssetName = labelAssetName'  		LocatorHasStartDate = false'  		LocWarning = _context.StreamingEndpoints.AsEnumerable ().All (o => StreamingEndpointInformation.ReturnTypeSE (o) == StreamingEndpointInformation.StreamEndpointType.Classic) ? "Dynamic packaging will not work as there are only classic streaming endpoints in this account." : string.Empty  	};  	if (form.ShowDialog () == DialogResult.OK) {  		// The permissions for the locator's access policy.  		AccessPermissions accessPolicyPermissions = AccessPermissions.Read | AccessPermissions.List;  		// The duration for the locator's access policy.  		TimeSpan accessPolicyDuration = form.LocatorEndDate.Subtract (DateTime.UtcNow);  		if (form.LocatorStartDate != null) {  			accessPolicyDuration = form.LocatorEndDate.Subtract ((DateTime)form.LocatorStartDate);  		}  		sbuilder.Clear ();  		try {  			Task.Factory.StartNew (() => ProcessCreateLocator (form.LocatorType' SelectedAssets' accessPolicyPermissions' accessPolicyDuration' form.LocatorStartDate' form.ForceLocatorGuid));  		} catch (Exception e) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when creating a locator"' true);  			TextBoxLogWriteLine (e);  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAllAssets,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to delete ALL the assets ?"' "Asset deletion"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	string valuekey = "";  	if (Program.InputBox ("Please confirm"' string.Format ("To confirm the operation' please type the name of the media service account ({0})"' _context.Credentials.ClientId)' ref valuekey' false) == DialogResult.OK) {  		if (valuekey != _context.Credentials.ClientId) {  			MessageBox.Show ("Strings do not match. Operation is aborted"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  			return;  		}  		Task.Run (async () => {  			bool Error = false;  			int skipSize = 0;  			int batchSize = 1000;  			int nbAssetInAccount = _context.Assets.Count () + 1;  			int nbassetdeleted = 0;  			int nbassetFailedDeleted = 0;  			bool lastround = false;  			// let's build the list of tasks  			TextBoxLogWriteLine ("Deleting all the assets...");  			List<IAsset> deleteTasks = new List<IAsset> ();  			try {  				while (!lastround && nbAssetInAccount != _context.Assets.Count ()) {  					// Enumerate through all assets (1000 at a time)  					var listassets = _context.Assets.Skip (skipSize).Take (batchSize).ToList ();  					lastround = (listassets.Count < batchSize);  					// last round if less than batchSize  					nbAssetInAccount = _context.Assets.Count ();  					var tasks = listassets.Select (a => a.DeleteAsync ()).ToArray ();  					while (!tasks.All (t => t.IsCompleted)) {  						TextBoxLogWriteLine ("{0} assets deleted..."' nbassetdeleted + tasks.Where (t => t.IsCompleted).Count ());  						Task.Delay (TimeSpan.FromSeconds (5d)).Wait ();  					}  					nbassetdeleted += tasks.Where (t => t.Status == TaskStatus.RanToCompletion).Count ();  					nbassetFailedDeleted += tasks.Where (t => t.IsFaulted).Count ();  					TextBoxLogWriteLine ("{0} assets deleted..."' nbassetdeleted);  				}  				if (nbassetFailedDeleted > 0) {  					TextBoxLogWriteLine ("{0} asset deletions faulted."' nbassetFailedDeleted' true);  				}  			} catch (Exception ex) {  				// Add useful information to the exception  				TextBoxLogWriteLine ("There is a problem when deleting the asset(s)"' true);  				TextBoxLogWriteLine (ex);  				Error = true;  			}  			if (!Error) {  				TextBoxLogWriteLine ("Deletion completed.");  			}  			DoRefreshGridAssetV (false);  		});  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAllAssets,The following statement contains a magic number: if (Program.InputBox ("Please confirm"' string.Format ("To confirm the operation' please type the name of the media service account ({0})"' _context.Credentials.ClientId)' ref valuekey' false) == DialogResult.OK) {  	if (valuekey != _context.Credentials.ClientId) {  		MessageBox.Show ("Strings do not match. Operation is aborted"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  		return;  	}  	Task.Run (async () => {  		bool Error = false;  		int skipSize = 0;  		int batchSize = 1000;  		int nbAssetInAccount = _context.Assets.Count () + 1;  		int nbassetdeleted = 0;  		int nbassetFailedDeleted = 0;  		bool lastround = false;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Deleting all the assets...");  		List<IAsset> deleteTasks = new List<IAsset> ();  		try {  			while (!lastround && nbAssetInAccount != _context.Assets.Count ()) {  				// Enumerate through all assets (1000 at a time)  				var listassets = _context.Assets.Skip (skipSize).Take (batchSize).ToList ();  				lastround = (listassets.Count < batchSize);  				// last round if less than batchSize  				nbAssetInAccount = _context.Assets.Count ();  				var tasks = listassets.Select (a => a.DeleteAsync ()).ToArray ();  				while (!tasks.All (t => t.IsCompleted)) {  					TextBoxLogWriteLine ("{0} assets deleted..."' nbassetdeleted + tasks.Where (t => t.IsCompleted).Count ());  					Task.Delay (TimeSpan.FromSeconds (5d)).Wait ();  				}  				nbassetdeleted += tasks.Where (t => t.Status == TaskStatus.RanToCompletion).Count ();  				nbassetFailedDeleted += tasks.Where (t => t.IsFaulted).Count ();  				TextBoxLogWriteLine ("{0} assets deleted..."' nbassetdeleted);  			}  			if (nbassetFailedDeleted > 0) {  				TextBoxLogWriteLine ("{0} asset deletions faulted."' nbassetFailedDeleted' true);  			}  		} catch (Exception ex) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when deleting the asset(s)"' true);  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error) {  			TextBoxLogWriteLine ("Deletion completed.");  		}  		DoRefreshGridAssetV (false);  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAllAssets,The following statement contains a magic number: Task.Run (async () => {  	bool Error = false;  	int skipSize = 0;  	int batchSize = 1000;  	int nbAssetInAccount = _context.Assets.Count () + 1;  	int nbassetdeleted = 0;  	int nbassetFailedDeleted = 0;  	bool lastround = false;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Deleting all the assets...");  	List<IAsset> deleteTasks = new List<IAsset> ();  	try {  		while (!lastround && nbAssetInAccount != _context.Assets.Count ()) {  			// Enumerate through all assets (1000 at a time)  			var listassets = _context.Assets.Skip (skipSize).Take (batchSize).ToList ();  			lastround = (listassets.Count < batchSize);  			// last round if less than batchSize  			nbAssetInAccount = _context.Assets.Count ();  			var tasks = listassets.Select (a => a.DeleteAsync ()).ToArray ();  			while (!tasks.All (t => t.IsCompleted)) {  				TextBoxLogWriteLine ("{0} assets deleted..."' nbassetdeleted + tasks.Where (t => t.IsCompleted).Count ());  				Task.Delay (TimeSpan.FromSeconds (5d)).Wait ();  			}  			nbassetdeleted += tasks.Where (t => t.Status == TaskStatus.RanToCompletion).Count ();  			nbassetFailedDeleted += tasks.Where (t => t.IsFaulted).Count ();  			TextBoxLogWriteLine ("{0} assets deleted..."' nbassetdeleted);  		}  		if (nbassetFailedDeleted > 0) {  			TextBoxLogWriteLine ("{0} asset deletions faulted."' nbassetFailedDeleted' true);  		}  	} catch (Exception ex) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when deleting the asset(s)"' true);  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error) {  		TextBoxLogWriteLine ("Deletion completed.");  	}  	DoRefreshGridAssetV (false);  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: if (UseDefaultStorage)// The default storage is used   {  	TextBoxLogWriteLine ("Starting the Azure export process.");  	// let's get cloudblobcontainer for source  	CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (_context.DefaultStorageAccount.Name' _credentials.DefaultStorageKey)' _credentials.ReturnStorageSuffix ()' true);  	var cloudBlobClient = storageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator sourcelocator = _context.Locators.CreateLocator (LocatorType.Sas' SelectedFiles [0].Asset' readpolicy);  	// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  	Uri sourceUri = new Uri (sourcelocator.Path);  	CloudBlobContainer assetSourceContainer = cloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  	// let's get cloudblobcontainer for target  	CloudBlobContainer TargetContainer = cloudBlobClient.GetContainerReference (containername);  	;  	if (CreateNewContainer) {  		try {  			TargetContainer.CreateIfNotExists ();  		} catch (Exception ex) {  			DoGridTransferDeclareError (response.Id' string.Format ("Failed to create container '{0}'. {1}"' TargetContainer.Name' ex.Message));  			Error = true;  		}  	}  	if (!Error) {  		Error = false;  		CloudBlockBlob sourceCloudBlob' destinationBlob;  		long Length = 0;  		long BytesCopied = 0;  		long percentComplete;  		//calculate size  		foreach (IAssetFile file in SelectedFiles) {  			Length += file.ContentFileSize;  		}  		// do the copy  		int nbblob = 0;  		foreach (IAssetFile file in SelectedFiles) {  			if (response.token.IsCancellationRequested)  				break;  			nbblob++;  			sourceCloudBlob = assetSourceContainer.GetBlockBlobReference (file.Name);  			sourceCloudBlob.FetchAttributes ();  			if (sourceCloudBlob.Properties.Length > 0) {  				DoGridTransferUpdateProgress (100d * nbblob / SelectedFiles.Count' response.Id);  				try {  					destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  					destinationBlob.DeleteIfExists ();  					string stringOperation = await destinationBlob.StartCopyAsync (sourceCloudBlob' response.token);  					bool Cancelled = false;  					CloudBlockBlob blob;  					blob = (CloudBlockBlob)TargetContainer.GetBlobReferenceFromServer (file.Name);  					while (blob.CopyState.Status == CopyStatus.Pending) {  						Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  						if (response.token.IsCancellationRequested && !Cancelled) {  							await destinationBlob.AbortCopyAsync (stringOperation);  							Cancelled = true;  						}  						blob.FetchAttributes ();  						percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  						DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  					}  					if (blob.CopyState.Status == CopyStatus.Failed) {  						DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  						Error = true;  						break;  					}  					if (blob.CopyState.Status == CopyStatus.Aborted) {  						DoGridTransferDeclareCancelled (response.Id);  						Error = true;  						break;  					}  					destinationBlob.FetchAttributes ();  					if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  						DoGridTransferDeclareError (response.Id' "Error during blob copy.");  						Error = true;  						break;  					}  				} catch (Exception ex) {  					TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  					DoGridTransferDeclareError (response.Id' ex);  					Error = true;  				}  				BytesCopied += sourceCloudBlob.Properties.Length;  				percentComplete = (long)100 * (long)BytesCopied / (long)Length;  				if (!Error)  					DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  			}  		}  		sourcelocator.Delete ();  		if (!Error && !response.token.IsCancellationRequested) {  			DoGridTransferDeclareCompleted (response.Id' TargetContainer.Uri.AbsoluteUri);  		}  		DoRefreshGridAssetV (false);  	}  } else// Another storage is used   {  	TextBoxLogWriteLine ("Starting the blob copy process.");  	// let's get cloudblobcontainer for source  	CloudStorageAccount SourceStorageAccount = new CloudStorageAccount (new StorageCredentials (_context.DefaultStorageAccount.Name' _credentials.DefaultStorageKey)' _credentials.ReturnStorageSuffix ()' true);  	CloudStorageAccount TargetStorageAccount = new CloudStorageAccount (new StorageCredentials (otherstoragename' otherstoragekey)' _credentials.ReturnStorageSuffix ()' true);  	var SourceCloudBlobClient = SourceStorageAccount.CreateCloudBlobClient ();  	var TargetCloudBlobClient = TargetStorageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator sourcelocator = _context.Locators.CreateLocator (LocatorType.Sas' SelectedFiles [0].Asset' readpolicy);  	// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  	Uri sourceUri = new Uri (sourcelocator.Path);  	CloudBlobContainer assetSourceContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  	// let's get cloudblobcontainer for target  	CloudBlobContainer TargetContainer = TargetCloudBlobClient.GetContainerReference (containername);  	// Get the SAS token to use for all blobs if dealing with multiple accounts  	string blobToken = assetSourceContainer.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  		// Specify the expiration time for the signature.  		SharedAccessExpiryTime = DateTime.Now.AddDays (1)'  		// Specify the permissions granted by the signature.  		Permissions = SharedAccessBlobPermissions.Write | SharedAccessBlobPermissions.Read  	});  	if (CreateNewContainer) {  		try {  			TargetContainer.CreateIfNotExists ();  		} catch (Exception e) {  			TextBoxLogWriteLine ("Failed to create container '{0}' "' TargetContainer.Name' true);  			DoGridTransferDeclareError (response.Id' e);  			Error = true;  		}  	}  	if (!Error) {  		CloudBlockBlob sourceCloudBlob' destinationBlob;  		long Length = 0;  		long BytesCopied = 0;  		double percentComplete;  		Error = false;  		//calculate size  		foreach (IAssetFile file in SelectedFiles) {  			Length += file.ContentFileSize;  		}  		// do the copy  		int nbblob = 0;  		foreach (IAssetFile file in SelectedFiles) {  			if (response.token.IsCancellationRequested)  				break;  			nbblob++;  			sourceCloudBlob = assetSourceContainer.GetBlockBlobReference (file.Name);  			sourceCloudBlob.FetchAttributes ();  			if (sourceCloudBlob.Properties.Length > 0) {  				DoGridTransferUpdateProgress (100d * nbblob / SelectedFiles.Count' response.Id);  				try {  					destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  					destinationBlob.DeleteIfExists ();  					string stringOperation = await destinationBlob.StartCopyAsync (new Uri (sourceCloudBlob.Uri.AbsoluteUri + blobToken)' response.token);  					bool Cancelled = false;  					while (destinationBlob.CopyState.Status == CopyStatus.Pending) {  						Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  						if (response.token.IsCancellationRequested && !Cancelled) {  							await destinationBlob.AbortCopyAsync (stringOperation);  							Cancelled = true;  						}  						destinationBlob.FetchAttributes ();  						percentComplete = 100d * (long)(BytesCopied + destinationBlob.CopyState.BytesCopied) / Length;  						DoGridTransferUpdateProgress (percentComplete' response.Id);  					}  					if (destinationBlob.CopyState.Status == CopyStatus.Failed) {  						DoGridTransferDeclareError (response.Id' destinationBlob.CopyState.StatusDescription);  						Error = true;  						break;  					}  					if (destinationBlob.CopyState.Status == CopyStatus.Aborted) {  						DoGridTransferDeclareCancelled (response.Id);  						Error = true;  						break;  					}  					destinationBlob.FetchAttributes ();  					if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  						DoGridTransferDeclareError (response.Id' string.Format ("Failed to copy file '{0}'"' file.Name));  						Error = true;  						break;  					}  				} catch (Exception e) {  					TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  					DoGridTransferDeclareError (response.Id' e);  					Error = true;  				}  				BytesCopied += sourceCloudBlob.Properties.Length;  				percentComplete = 100d * BytesCopied / Length;  				if (!Error)  					DoGridTransferUpdateProgress (percentComplete' response.Id);  			}  		}  		sourcelocator.Delete ();  		if (!Error && !response.token.IsCancellationRequested) {  			DoGridTransferDeclareCompleted (response.Id' TargetContainer.Uri.AbsoluteUri);  		}  		DoRefreshGridAssetV (false);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: if (UseDefaultStorage)// The default storage is used   {  	TextBoxLogWriteLine ("Starting the Azure export process.");  	// let's get cloudblobcontainer for source  	CloudStorageAccount storageAccount = new CloudStorageAccount (new StorageCredentials (_context.DefaultStorageAccount.Name' _credentials.DefaultStorageKey)' _credentials.ReturnStorageSuffix ()' true);  	var cloudBlobClient = storageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator sourcelocator = _context.Locators.CreateLocator (LocatorType.Sas' SelectedFiles [0].Asset' readpolicy);  	// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  	Uri sourceUri = new Uri (sourcelocator.Path);  	CloudBlobContainer assetSourceContainer = cloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  	// let's get cloudblobcontainer for target  	CloudBlobContainer TargetContainer = cloudBlobClient.GetContainerReference (containername);  	;  	if (CreateNewContainer) {  		try {  			TargetContainer.CreateIfNotExists ();  		} catch (Exception ex) {  			DoGridTransferDeclareError (response.Id' string.Format ("Failed to create container '{0}'. {1}"' TargetContainer.Name' ex.Message));  			Error = true;  		}  	}  	if (!Error) {  		Error = false;  		CloudBlockBlob sourceCloudBlob' destinationBlob;  		long Length = 0;  		long BytesCopied = 0;  		long percentComplete;  		//calculate size  		foreach (IAssetFile file in SelectedFiles) {  			Length += file.ContentFileSize;  		}  		// do the copy  		int nbblob = 0;  		foreach (IAssetFile file in SelectedFiles) {  			if (response.token.IsCancellationRequested)  				break;  			nbblob++;  			sourceCloudBlob = assetSourceContainer.GetBlockBlobReference (file.Name);  			sourceCloudBlob.FetchAttributes ();  			if (sourceCloudBlob.Properties.Length > 0) {  				DoGridTransferUpdateProgress (100d * nbblob / SelectedFiles.Count' response.Id);  				try {  					destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  					destinationBlob.DeleteIfExists ();  					string stringOperation = await destinationBlob.StartCopyAsync (sourceCloudBlob' response.token);  					bool Cancelled = false;  					CloudBlockBlob blob;  					blob = (CloudBlockBlob)TargetContainer.GetBlobReferenceFromServer (file.Name);  					while (blob.CopyState.Status == CopyStatus.Pending) {  						Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  						if (response.token.IsCancellationRequested && !Cancelled) {  							await destinationBlob.AbortCopyAsync (stringOperation);  							Cancelled = true;  						}  						blob.FetchAttributes ();  						percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  						DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  					}  					if (blob.CopyState.Status == CopyStatus.Failed) {  						DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  						Error = true;  						break;  					}  					if (blob.CopyState.Status == CopyStatus.Aborted) {  						DoGridTransferDeclareCancelled (response.Id);  						Error = true;  						break;  					}  					destinationBlob.FetchAttributes ();  					if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  						DoGridTransferDeclareError (response.Id' "Error during blob copy.");  						Error = true;  						break;  					}  				} catch (Exception ex) {  					TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  					DoGridTransferDeclareError (response.Id' ex);  					Error = true;  				}  				BytesCopied += sourceCloudBlob.Properties.Length;  				percentComplete = (long)100 * (long)BytesCopied / (long)Length;  				if (!Error)  					DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  			}  		}  		sourcelocator.Delete ();  		if (!Error && !response.token.IsCancellationRequested) {  			DoGridTransferDeclareCompleted (response.Id' TargetContainer.Uri.AbsoluteUri);  		}  		DoRefreshGridAssetV (false);  	}  } else// Another storage is used   {  	TextBoxLogWriteLine ("Starting the blob copy process.");  	// let's get cloudblobcontainer for source  	CloudStorageAccount SourceStorageAccount = new CloudStorageAccount (new StorageCredentials (_context.DefaultStorageAccount.Name' _credentials.DefaultStorageKey)' _credentials.ReturnStorageSuffix ()' true);  	CloudStorageAccount TargetStorageAccount = new CloudStorageAccount (new StorageCredentials (otherstoragename' otherstoragekey)' _credentials.ReturnStorageSuffix ()' true);  	var SourceCloudBlobClient = SourceStorageAccount.CreateCloudBlobClient ();  	var TargetCloudBlobClient = TargetStorageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator sourcelocator = _context.Locators.CreateLocator (LocatorType.Sas' SelectedFiles [0].Asset' readpolicy);  	// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  	Uri sourceUri = new Uri (sourcelocator.Path);  	CloudBlobContainer assetSourceContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  	// let's get cloudblobcontainer for target  	CloudBlobContainer TargetContainer = TargetCloudBlobClient.GetContainerReference (containername);  	// Get the SAS token to use for all blobs if dealing with multiple accounts  	string blobToken = assetSourceContainer.GetSharedAccessSignature (new SharedAccessBlobPolicy () {  		// Specify the expiration time for the signature.  		SharedAccessExpiryTime = DateTime.Now.AddDays (1)'  		// Specify the permissions granted by the signature.  		Permissions = SharedAccessBlobPermissions.Write | SharedAccessBlobPermissions.Read  	});  	if (CreateNewContainer) {  		try {  			TargetContainer.CreateIfNotExists ();  		} catch (Exception e) {  			TextBoxLogWriteLine ("Failed to create container '{0}' "' TargetContainer.Name' true);  			DoGridTransferDeclareError (response.Id' e);  			Error = true;  		}  	}  	if (!Error) {  		CloudBlockBlob sourceCloudBlob' destinationBlob;  		long Length = 0;  		long BytesCopied = 0;  		double percentComplete;  		Error = false;  		//calculate size  		foreach (IAssetFile file in SelectedFiles) {  			Length += file.ContentFileSize;  		}  		// do the copy  		int nbblob = 0;  		foreach (IAssetFile file in SelectedFiles) {  			if (response.token.IsCancellationRequested)  				break;  			nbblob++;  			sourceCloudBlob = assetSourceContainer.GetBlockBlobReference (file.Name);  			sourceCloudBlob.FetchAttributes ();  			if (sourceCloudBlob.Properties.Length > 0) {  				DoGridTransferUpdateProgress (100d * nbblob / SelectedFiles.Count' response.Id);  				try {  					destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  					destinationBlob.DeleteIfExists ();  					string stringOperation = await destinationBlob.StartCopyAsync (new Uri (sourceCloudBlob.Uri.AbsoluteUri + blobToken)' response.token);  					bool Cancelled = false;  					while (destinationBlob.CopyState.Status == CopyStatus.Pending) {  						Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  						if (response.token.IsCancellationRequested && !Cancelled) {  							await destinationBlob.AbortCopyAsync (stringOperation);  							Cancelled = true;  						}  						destinationBlob.FetchAttributes ();  						percentComplete = 100d * (long)(BytesCopied + destinationBlob.CopyState.BytesCopied) / Length;  						DoGridTransferUpdateProgress (percentComplete' response.Id);  					}  					if (destinationBlob.CopyState.Status == CopyStatus.Failed) {  						DoGridTransferDeclareError (response.Id' destinationBlob.CopyState.StatusDescription);  						Error = true;  						break;  					}  					if (destinationBlob.CopyState.Status == CopyStatus.Aborted) {  						DoGridTransferDeclareCancelled (response.Id);  						Error = true;  						break;  					}  					destinationBlob.FetchAttributes ();  					if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  						DoGridTransferDeclareError (response.Id' string.Format ("Failed to copy file '{0}'"' file.Name));  						Error = true;  						break;  					}  				} catch (Exception e) {  					TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  					DoGridTransferDeclareError (response.Id' e);  					Error = true;  				}  				BytesCopied += sourceCloudBlob.Properties.Length;  				percentComplete = 100d * BytesCopied / Length;  				if (!Error)  					DoGridTransferUpdateProgress (percentComplete' response.Id);  			}  		}  		sourcelocator.Delete ();  		if (!Error && !response.token.IsCancellationRequested) {  			DoGridTransferDeclareCompleted (response.Id' TargetContainer.Uri.AbsoluteUri);  		}  		DoRefreshGridAssetV (false);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: if (!Error) {  	Error = false;  	CloudBlockBlob sourceCloudBlob' destinationBlob;  	long Length = 0;  	long BytesCopied = 0;  	long percentComplete;  	//calculate size  	foreach (IAssetFile file in SelectedFiles) {  		Length += file.ContentFileSize;  	}  	// do the copy  	int nbblob = 0;  	foreach (IAssetFile file in SelectedFiles) {  		if (response.token.IsCancellationRequested)  			break;  		nbblob++;  		sourceCloudBlob = assetSourceContainer.GetBlockBlobReference (file.Name);  		sourceCloudBlob.FetchAttributes ();  		if (sourceCloudBlob.Properties.Length > 0) {  			DoGridTransferUpdateProgress (100d * nbblob / SelectedFiles.Count' response.Id);  			try {  				destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  				destinationBlob.DeleteIfExists ();  				string stringOperation = await destinationBlob.StartCopyAsync (sourceCloudBlob' response.token);  				bool Cancelled = false;  				CloudBlockBlob blob;  				blob = (CloudBlockBlob)TargetContainer.GetBlobReferenceFromServer (file.Name);  				while (blob.CopyState.Status == CopyStatus.Pending) {  					Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  					if (response.token.IsCancellationRequested && !Cancelled) {  						await destinationBlob.AbortCopyAsync (stringOperation);  						Cancelled = true;  					}  					blob.FetchAttributes ();  					percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  					DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  				}  				if (blob.CopyState.Status == CopyStatus.Failed) {  					DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  					Error = true;  					break;  				}  				if (blob.CopyState.Status == CopyStatus.Aborted) {  					DoGridTransferDeclareCancelled (response.Id);  					Error = true;  					break;  				}  				destinationBlob.FetchAttributes ();  				if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  					DoGridTransferDeclareError (response.Id' "Error during blob copy.");  					Error = true;  					break;  				}  			} catch (Exception ex) {  				TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  				DoGridTransferDeclareError (response.Id' ex);  				Error = true;  			}  			BytesCopied += sourceCloudBlob.Properties.Length;  			percentComplete = (long)100 * (long)BytesCopied / (long)Length;  			if (!Error)  				DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  		}  	}  	sourcelocator.Delete ();  	if (!Error && !response.token.IsCancellationRequested) {  		DoGridTransferDeclareCompleted (response.Id' TargetContainer.Uri.AbsoluteUri);  	}  	DoRefreshGridAssetV (false);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: if (!Error) {  	Error = false;  	CloudBlockBlob sourceCloudBlob' destinationBlob;  	long Length = 0;  	long BytesCopied = 0;  	long percentComplete;  	//calculate size  	foreach (IAssetFile file in SelectedFiles) {  		Length += file.ContentFileSize;  	}  	// do the copy  	int nbblob = 0;  	foreach (IAssetFile file in SelectedFiles) {  		if (response.token.IsCancellationRequested)  			break;  		nbblob++;  		sourceCloudBlob = assetSourceContainer.GetBlockBlobReference (file.Name);  		sourceCloudBlob.FetchAttributes ();  		if (sourceCloudBlob.Properties.Length > 0) {  			DoGridTransferUpdateProgress (100d * nbblob / SelectedFiles.Count' response.Id);  			try {  				destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  				destinationBlob.DeleteIfExists ();  				string stringOperation = await destinationBlob.StartCopyAsync (sourceCloudBlob' response.token);  				bool Cancelled = false;  				CloudBlockBlob blob;  				blob = (CloudBlockBlob)TargetContainer.GetBlobReferenceFromServer (file.Name);  				while (blob.CopyState.Status == CopyStatus.Pending) {  					Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  					if (response.token.IsCancellationRequested && !Cancelled) {  						await destinationBlob.AbortCopyAsync (stringOperation);  						Cancelled = true;  					}  					blob.FetchAttributes ();  					percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  					DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  				}  				if (blob.CopyState.Status == CopyStatus.Failed) {  					DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  					Error = true;  					break;  				}  				if (blob.CopyState.Status == CopyStatus.Aborted) {  					DoGridTransferDeclareCancelled (response.Id);  					Error = true;  					break;  				}  				destinationBlob.FetchAttributes ();  				if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  					DoGridTransferDeclareError (response.Id' "Error during blob copy.");  					Error = true;  					break;  				}  			} catch (Exception ex) {  				TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  				DoGridTransferDeclareError (response.Id' ex);  				Error = true;  			}  			BytesCopied += sourceCloudBlob.Properties.Length;  			percentComplete = (long)100 * (long)BytesCopied / (long)Length;  			if (!Error)  				DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  		}  	}  	sourcelocator.Delete ();  	if (!Error && !response.token.IsCancellationRequested) {  		DoGridTransferDeclareCompleted (response.Id' TargetContainer.Uri.AbsoluteUri);  	}  	DoRefreshGridAssetV (false);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: foreach (IAssetFile file in SelectedFiles) {  	if (response.token.IsCancellationRequested)  		break;  	nbblob++;  	sourceCloudBlob = assetSourceContainer.GetBlockBlobReference (file.Name);  	sourceCloudBlob.FetchAttributes ();  	if (sourceCloudBlob.Properties.Length > 0) {  		DoGridTransferUpdateProgress (100d * nbblob / SelectedFiles.Count' response.Id);  		try {  			destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  			destinationBlob.DeleteIfExists ();  			string stringOperation = await destinationBlob.StartCopyAsync (sourceCloudBlob' response.token);  			bool Cancelled = false;  			CloudBlockBlob blob;  			blob = (CloudBlockBlob)TargetContainer.GetBlobReferenceFromServer (file.Name);  			while (blob.CopyState.Status == CopyStatus.Pending) {  				Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  				if (response.token.IsCancellationRequested && !Cancelled) {  					await destinationBlob.AbortCopyAsync (stringOperation);  					Cancelled = true;  				}  				blob.FetchAttributes ();  				percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  				DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  			}  			if (blob.CopyState.Status == CopyStatus.Failed) {  				DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  				Error = true;  				break;  			}  			if (blob.CopyState.Status == CopyStatus.Aborted) {  				DoGridTransferDeclareCancelled (response.Id);  				Error = true;  				break;  			}  			destinationBlob.FetchAttributes ();  			if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  				DoGridTransferDeclareError (response.Id' "Error during blob copy.");  				Error = true;  				break;  			}  		} catch (Exception ex) {  			TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  			DoGridTransferDeclareError (response.Id' ex);  			Error = true;  		}  		BytesCopied += sourceCloudBlob.Properties.Length;  		percentComplete = (long)100 * (long)BytesCopied / (long)Length;  		if (!Error)  			DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: foreach (IAssetFile file in SelectedFiles) {  	if (response.token.IsCancellationRequested)  		break;  	nbblob++;  	sourceCloudBlob = assetSourceContainer.GetBlockBlobReference (file.Name);  	sourceCloudBlob.FetchAttributes ();  	if (sourceCloudBlob.Properties.Length > 0) {  		DoGridTransferUpdateProgress (100d * nbblob / SelectedFiles.Count' response.Id);  		try {  			destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  			destinationBlob.DeleteIfExists ();  			string stringOperation = await destinationBlob.StartCopyAsync (sourceCloudBlob' response.token);  			bool Cancelled = false;  			CloudBlockBlob blob;  			blob = (CloudBlockBlob)TargetContainer.GetBlobReferenceFromServer (file.Name);  			while (blob.CopyState.Status == CopyStatus.Pending) {  				Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  				if (response.token.IsCancellationRequested && !Cancelled) {  					await destinationBlob.AbortCopyAsync (stringOperation);  					Cancelled = true;  				}  				blob.FetchAttributes ();  				percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  				DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  			}  			if (blob.CopyState.Status == CopyStatus.Failed) {  				DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  				Error = true;  				break;  			}  			if (blob.CopyState.Status == CopyStatus.Aborted) {  				DoGridTransferDeclareCancelled (response.Id);  				Error = true;  				break;  			}  			destinationBlob.FetchAttributes ();  			if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  				DoGridTransferDeclareError (response.Id' "Error during blob copy.");  				Error = true;  				break;  			}  		} catch (Exception ex) {  			TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  			DoGridTransferDeclareError (response.Id' ex);  			Error = true;  		}  		BytesCopied += sourceCloudBlob.Properties.Length;  		percentComplete = (long)100 * (long)BytesCopied / (long)Length;  		if (!Error)  			DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: if (sourceCloudBlob.Properties.Length > 0) {  	DoGridTransferUpdateProgress (100d * nbblob / SelectedFiles.Count' response.Id);  	try {  		destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  		destinationBlob.DeleteIfExists ();  		string stringOperation = await destinationBlob.StartCopyAsync (sourceCloudBlob' response.token);  		bool Cancelled = false;  		CloudBlockBlob blob;  		blob = (CloudBlockBlob)TargetContainer.GetBlobReferenceFromServer (file.Name);  		while (blob.CopyState.Status == CopyStatus.Pending) {  			Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  			if (response.token.IsCancellationRequested && !Cancelled) {  				await destinationBlob.AbortCopyAsync (stringOperation);  				Cancelled = true;  			}  			blob.FetchAttributes ();  			percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  			DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  		}  		if (blob.CopyState.Status == CopyStatus.Failed) {  			DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  			Error = true;  			break;  		}  		if (blob.CopyState.Status == CopyStatus.Aborted) {  			DoGridTransferDeclareCancelled (response.Id);  			Error = true;  			break;  		}  		destinationBlob.FetchAttributes ();  		if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  			DoGridTransferDeclareError (response.Id' "Error during blob copy.");  			Error = true;  			break;  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  		DoGridTransferDeclareError (response.Id' ex);  		Error = true;  	}  	BytesCopied += sourceCloudBlob.Properties.Length;  	percentComplete = (long)100 * (long)BytesCopied / (long)Length;  	if (!Error)  		DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: if (sourceCloudBlob.Properties.Length > 0) {  	DoGridTransferUpdateProgress (100d * nbblob / SelectedFiles.Count' response.Id);  	try {  		destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  		destinationBlob.DeleteIfExists ();  		string stringOperation = await destinationBlob.StartCopyAsync (sourceCloudBlob' response.token);  		bool Cancelled = false;  		CloudBlockBlob blob;  		blob = (CloudBlockBlob)TargetContainer.GetBlobReferenceFromServer (file.Name);  		while (blob.CopyState.Status == CopyStatus.Pending) {  			Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  			if (response.token.IsCancellationRequested && !Cancelled) {  				await destinationBlob.AbortCopyAsync (stringOperation);  				Cancelled = true;  			}  			blob.FetchAttributes ();  			percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  			DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  		}  		if (blob.CopyState.Status == CopyStatus.Failed) {  			DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  			Error = true;  			break;  		}  		if (blob.CopyState.Status == CopyStatus.Aborted) {  			DoGridTransferDeclareCancelled (response.Id);  			Error = true;  			break;  		}  		destinationBlob.FetchAttributes ();  		if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  			DoGridTransferDeclareError (response.Id' "Error during blob copy.");  			Error = true;  			break;  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  		DoGridTransferDeclareError (response.Id' ex);  		Error = true;  	}  	BytesCopied += sourceCloudBlob.Properties.Length;  	percentComplete = (long)100 * (long)BytesCopied / (long)Length;  	if (!Error)  		DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: try {  	destinationBlob = TargetContainer.GetBlockBlobReference (file.Name);  	destinationBlob.DeleteIfExists ();  	string stringOperation = await destinationBlob.StartCopyAsync (sourceCloudBlob' response.token);  	bool Cancelled = false;  	CloudBlockBlob blob;  	blob = (CloudBlockBlob)TargetContainer.GetBlobReferenceFromServer (file.Name);  	while (blob.CopyState.Status == CopyStatus.Pending) {  		Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  		if (response.token.IsCancellationRequested && !Cancelled) {  			await destinationBlob.AbortCopyAsync (stringOperation);  			Cancelled = true;  		}  		blob.FetchAttributes ();  		percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  		DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  	}  	if (blob.CopyState.Status == CopyStatus.Failed) {  		DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  		Error = true;  		break;  	}  	if (blob.CopyState.Status == CopyStatus.Aborted) {  		DoGridTransferDeclareCancelled (response.Id);  		Error = true;  		break;  	}  	destinationBlob.FetchAttributes ();  	if (sourceCloudBlob.Properties.Length != destinationBlob.Properties.Length) {  		DoGridTransferDeclareError (response.Id' "Error during blob copy.");  		Error = true;  		break;  	}  } catch (Exception ex) {  	TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  	DoGridTransferDeclareError (response.Id' ex);  	Error = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: while (blob.CopyState.Status == CopyStatus.Pending) {  	Task.Delay (TimeSpan.FromSeconds (1d)).Wait ();  	if (response.token.IsCancellationRequested && !Cancelled) {  		await destinationBlob.AbortCopyAsync (stringOperation);  		Cancelled = true;  	}  	blob.FetchAttributes ();  	percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  	DoGridTransferUpdateProgress ((int)percentComplete' response.Id);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: percentComplete = (long)100 * (long)(BytesCopied + blob.CopyState.BytesCopied) / (long)Length;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAzureStorage,The following statement contains a magic number: percentComplete = (long)100 * (long)BytesCopied / (long)Length;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: foreach (IAsset SourceAsset in SourceAssets)// there are several assets only if user wants to do a copy with merge   {  	if (response.token.IsCancellationRequested)  		break;  	if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  		CloudStorageAccount SourceCloudStorageAccount;  		CloudBlobClient SourceCloudBlobClient;  		IAccessPolicy readpolicy;  		ILocator SourceLocator;  		Uri sourceUri;  		CloudBlobContainer SourceCloudBlobContainer;  		try {  			// let's get cloudblobcontainer for source  			SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  			SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  			readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  			SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  			// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  			sourceUri = new Uri (SourceLocator.Path);  			SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  		} catch (Exception ex) {  			TextBoxLogWriteLine ("Error"' true);  			TextBoxLogWriteLine (ex);  			DoGridTransferDeclareError (response.Id' ex);  			DestinationLocator.Delete ();  			writePolicy.Delete ();  			TargetAsset.Delete ();  			return;  		}  		ErrorCopyAsset = false;  		CloudBlockBlob sourceCloudBlockBlob' destinationCloudBlockBlob;  		long Length = 0;  		long BytesCopied = 0;  		double percentComplete = 0;  		//calculate size  		foreach (IAssetFile file in SourceAsset.AssetFiles) {  			Length += file.ContentFileSize;  		}  		if (Length == 0)  			Length = 1;  		// as this could happen with Live archive and create a divide error  		// do the copy  		int nbblob = 0;  		// For Live archive' the folder for chunks are returned as files. So we detect this case and don't try to copy the folders as asset files  		List<IAssetFile> assetFilesToCopy = SourceAsset.AssetFiles.ToList ();  		if (assetFilesToCopy.Where (af => af.Name.Contains (".")).Count () == 2 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISMC")).Count () == 1 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISM")).Count () == 1)// only 2 files with extensions' and these files are ISMC and ISM  		 {  			// assetFilesToCopy = SourceAsset.AssetFiles.ToList().Where(af => !af.Name.StartsWith("audio_") && !af.Name.StartsWith("video_") && !af.Name.StartsWith("scte35_"));  			//  var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  			// let read the storage to make sure it's not a directory  			var mediablobsFolders = SourceCloudBlobContainer.ListBlobs ().ToList ().Where (b => b.GetType () == typeof(CloudBlobDirectory)).Select (a => (a as CloudBlobDirectory).Prefix);  			assetFilesToCopy = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.None && !mediablobsFolders.Contains (af.Name + "/")).ToList ();  			var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.Fragmented || mediablobsFolders.Contains (af.Name + "/")).ToList ();  			foreach (IAssetFile sourcefolder in assetFilesLiveFolders) {  				var folder = TargetAsset.AssetFiles.Create (sourcefolder.Name);  				folder.ContentFileSize = sourcefolder.ContentFileSize;  				folder.MimeType = sourcefolder.MimeType;  				folder.Update ();  			}  		}  		foreach (IAssetFile file in assetFilesToCopy) {  			if (response.token.IsCancellationRequested)  				break;  			if (file.IsEncrypted) {  				TextBoxLogWriteLine ("   Cannot copy file '{0}' because it is encrypted."' file.Name' true);  			} else {  				bool ErrorCopyAssetFile = false;  				nbblob++;  				try {  					sourceCloudBlockBlob = SourceCloudBlobContainer.GetBlockBlobReference (file.Name);  					// TO DO: chek if this is a folder or a file  					sourceCloudBlockBlob.FetchAttributes ();  					if (sourceCloudBlockBlob.Properties.Length > 0) {  						if (!TargetAsset.AssetFiles.ToList ().Any (f => f.Name == file.Name))// file does not exist in the target asset  						 {  							IAssetFile destinationAssetFile = TargetAsset.AssetFiles.Create (file.Name);  							destinationCloudBlockBlob = DestinationCloudBlobContainer.GetBlockBlobReference (destinationAssetFile.Name);  							try {  								destinationCloudBlockBlob.DeleteIfExists ();  							} catch {  								// exception if Blob does not exist' which is fine  							}  							string stringOperation = await destinationCloudBlockBlob.StartCopyAsync (file.GetSasUri ()' response.token);  							bool Cancelled = false;  							CloudBlockBlob blob;  							blob = (CloudBlockBlob)DestinationCloudBlobContainer.GetBlobReferenceFromServer (file.Name);  							while (blob.CopyState.Status == CopyStatus.Pending) {  								Task.Delay (TimeSpan.FromSeconds (0.5d)).Wait ();  								if (response.token.IsCancellationRequested && !Cancelled) {  									await destinationCloudBlockBlob.AbortCopyAsync (stringOperation);  									Cancelled = true;  								}  								blob.FetchAttributes ();  								percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SourceAsset.AssetFiles.Count ())) * 100d * (long)(BytesCopied + blob.CopyState.BytesCopied) / Length;  								DoGridTransferUpdateProgressText (string.Format ("File '{0}'"' file.Name)' (int)percentComplete' response.Id);  							}  							if (blob.CopyState.Status == CopyStatus.Failed) {  								DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  								ErrorCopyAssetFile = true;  								ErrorCopyAsset = true;  								break;  							}  							if (blob.CopyState.Status == CopyStatus.Aborted) {  								DoGridTransferDeclareCancelled (response.Id);  								ErrorCopyAssetFile = true;  								ErrorCopyAsset = true;  								break;  							}  							destinationCloudBlockBlob.FetchAttributes ();  							destinationAssetFile.ContentFileSize = sourceCloudBlockBlob.Properties.Length;  							destinationAssetFile.Update ();  							if (sourceCloudBlockBlob.Properties.Length != destinationCloudBlockBlob.Properties.Length) {  								DoGridTransferDeclareError (response.Id' "Error during blob copy.");  								ErrorCopyAssetFile = true;  								ErrorCopyAsset = true;  								break;  							}  							BytesCopied += sourceCloudBlockBlob.Properties.Length;  							percentComplete = (long)100 * (long)BytesCopied / (long)Length;  						} else// file already exists.Can occur with merge function  						 {  							TextBoxLogWriteLine ("Failed to copy file '{0} as file already exists in the destination asset."' file.Name' true);  							ErrorCopyAssetFile = true;  						}  					}  				} catch (Exception ex) {  					TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  					DoGridTransferDeclareError (response.Id' ex);  					ErrorCopyAsset = true;  					ErrorCopyAssetFile = true;  				}  				if (!ErrorCopyAssetFile && !response.token.IsCancellationRequested)  					TextBoxLogWriteLine ("File '{0}' copied."' file.Name);  			}  		}  		if (!ErrorCopyAsset && !response.token.IsCancellationRequested)// let's do the copy of additional fragblob if there are  		 {  			List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  			// do the copy  			nbblob = 0;  			DoGridTransferUpdateProgressText (string.Format ("fragblobs"' SourceAsset.Name' DestinationCredentialsEntry.AccountName)' 0' response.Id);  			try {  				var mediablobs = SourceCloudBlobContainer.ListBlobs ();  				if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  				 {  					List<Task> mylistresults = new List<Task> ();  					foreach (var blob in mediablobs) {  						if (blob.GetType () == typeof(CloudBlobDirectory)) {  							CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  							ListDirectories.Add (blobdir);  							TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  						} else if (blob.GetType () == typeof(CloudBlockBlob)) {  							// we must copy the file.ismc too  							var blockblob = (CloudBlockBlob)blob;  							if (blockblob.Name.EndsWith (".ismc") && !SourceAsset.AssetFiles.ToList ().Any (f => f.Name == blockblob.Name))// if there is a .ismc in the blov and not in the asset files' then we need to copy it  							 {  								CloudBlockBlob targetBlob = DestinationCloudBlobContainer.GetBlockBlobReference (blockblob.Name);  								// copy using src blob as SAS  								mylistresults.Add (targetBlob.StartCopyAsync (new Uri (blockblob.Uri.AbsoluteUri + SourceLocator.ContentAccessComponent)' response.token));  							}  						}  					}  					// let's launch the copy of fragblobs  					double ind = 0;  					foreach (var dir in ListDirectories) {  						TextBoxLogWriteLine ("Copying fragblobs directory '{0}'...."' dir.Prefix);  						mylistresults.AddRange (AssetInfo.CopyBlobDirectory (dir' DestinationCloudBlobContainer' SourceLocator.ContentAccessComponent' response.token));  						if (mylistresults.Count > 0) {  							while (!mylistresults.All (r => r.IsCompleted)) {  								Task.Delay (TimeSpan.FromSeconds (3d)).Wait ();  								percentComplete = 100d * (ind + Convert.ToDouble (mylistresults.Where (c => c.IsCompleted).Count ()) / Convert.ToDouble (mylistresults.Count)) / Convert.ToDouble (ListDirectories.Count);  								DoGridTransferUpdateProgressText (string.Format ("fragblobs directory '{0}' ({1}/{2})"' dir.Prefix' mylistresults.Where (r => r.IsCompleted).Count ()' mylistresults.Count)' (int)percentComplete' response.Id);  							}  						}  						ind++;  						mylistresults.Clear ();  					}  				}  			} catch (Exception ex) {  				TextBoxLogWriteLine ("Failed to copy live fragblobs"' true);  				TextBoxLogWriteLine (ex);  				DoGridTransferDeclareError (response.Id' ex);  				ErrorCopyAsset = true;  			}  		}  		SourceLocator.Delete ();  		readpolicy.Delete ();  	} else {  		TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  		ErrorCopyAsset = true;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: foreach (IAsset SourceAsset in SourceAssets)// there are several assets only if user wants to do a copy with merge   {  	if (response.token.IsCancellationRequested)  		break;  	if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  		CloudStorageAccount SourceCloudStorageAccount;  		CloudBlobClient SourceCloudBlobClient;  		IAccessPolicy readpolicy;  		ILocator SourceLocator;  		Uri sourceUri;  		CloudBlobContainer SourceCloudBlobContainer;  		try {  			// let's get cloudblobcontainer for source  			SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  			SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  			readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  			SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  			// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  			sourceUri = new Uri (SourceLocator.Path);  			SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  		} catch (Exception ex) {  			TextBoxLogWriteLine ("Error"' true);  			TextBoxLogWriteLine (ex);  			DoGridTransferDeclareError (response.Id' ex);  			DestinationLocator.Delete ();  			writePolicy.Delete ();  			TargetAsset.Delete ();  			return;  		}  		ErrorCopyAsset = false;  		CloudBlockBlob sourceCloudBlockBlob' destinationCloudBlockBlob;  		long Length = 0;  		long BytesCopied = 0;  		double percentComplete = 0;  		//calculate size  		foreach (IAssetFile file in SourceAsset.AssetFiles) {  			Length += file.ContentFileSize;  		}  		if (Length == 0)  			Length = 1;  		// as this could happen with Live archive and create a divide error  		// do the copy  		int nbblob = 0;  		// For Live archive' the folder for chunks are returned as files. So we detect this case and don't try to copy the folders as asset files  		List<IAssetFile> assetFilesToCopy = SourceAsset.AssetFiles.ToList ();  		if (assetFilesToCopy.Where (af => af.Name.Contains (".")).Count () == 2 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISMC")).Count () == 1 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISM")).Count () == 1)// only 2 files with extensions' and these files are ISMC and ISM  		 {  			// assetFilesToCopy = SourceAsset.AssetFiles.ToList().Where(af => !af.Name.StartsWith("audio_") && !af.Name.StartsWith("video_") && !af.Name.StartsWith("scte35_"));  			//  var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  			// let read the storage to make sure it's not a directory  			var mediablobsFolders = SourceCloudBlobContainer.ListBlobs ().ToList ().Where (b => b.GetType () == typeof(CloudBlobDirectory)).Select (a => (a as CloudBlobDirectory).Prefix);  			assetFilesToCopy = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.None && !mediablobsFolders.Contains (af.Name + "/")).ToList ();  			var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.Fragmented || mediablobsFolders.Contains (af.Name + "/")).ToList ();  			foreach (IAssetFile sourcefolder in assetFilesLiveFolders) {  				var folder = TargetAsset.AssetFiles.Create (sourcefolder.Name);  				folder.ContentFileSize = sourcefolder.ContentFileSize;  				folder.MimeType = sourcefolder.MimeType;  				folder.Update ();  			}  		}  		foreach (IAssetFile file in assetFilesToCopy) {  			if (response.token.IsCancellationRequested)  				break;  			if (file.IsEncrypted) {  				TextBoxLogWriteLine ("   Cannot copy file '{0}' because it is encrypted."' file.Name' true);  			} else {  				bool ErrorCopyAssetFile = false;  				nbblob++;  				try {  					sourceCloudBlockBlob = SourceCloudBlobContainer.GetBlockBlobReference (file.Name);  					// TO DO: chek if this is a folder or a file  					sourceCloudBlockBlob.FetchAttributes ();  					if (sourceCloudBlockBlob.Properties.Length > 0) {  						if (!TargetAsset.AssetFiles.ToList ().Any (f => f.Name == file.Name))// file does not exist in the target asset  						 {  							IAssetFile destinationAssetFile = TargetAsset.AssetFiles.Create (file.Name);  							destinationCloudBlockBlob = DestinationCloudBlobContainer.GetBlockBlobReference (destinationAssetFile.Name);  							try {  								destinationCloudBlockBlob.DeleteIfExists ();  							} catch {  								// exception if Blob does not exist' which is fine  							}  							string stringOperation = await destinationCloudBlockBlob.StartCopyAsync (file.GetSasUri ()' response.token);  							bool Cancelled = false;  							CloudBlockBlob blob;  							blob = (CloudBlockBlob)DestinationCloudBlobContainer.GetBlobReferenceFromServer (file.Name);  							while (blob.CopyState.Status == CopyStatus.Pending) {  								Task.Delay (TimeSpan.FromSeconds (0.5d)).Wait ();  								if (response.token.IsCancellationRequested && !Cancelled) {  									await destinationCloudBlockBlob.AbortCopyAsync (stringOperation);  									Cancelled = true;  								}  								blob.FetchAttributes ();  								percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SourceAsset.AssetFiles.Count ())) * 100d * (long)(BytesCopied + blob.CopyState.BytesCopied) / Length;  								DoGridTransferUpdateProgressText (string.Format ("File '{0}'"' file.Name)' (int)percentComplete' response.Id);  							}  							if (blob.CopyState.Status == CopyStatus.Failed) {  								DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  								ErrorCopyAssetFile = true;  								ErrorCopyAsset = true;  								break;  							}  							if (blob.CopyState.Status == CopyStatus.Aborted) {  								DoGridTransferDeclareCancelled (response.Id);  								ErrorCopyAssetFile = true;  								ErrorCopyAsset = true;  								break;  							}  							destinationCloudBlockBlob.FetchAttributes ();  							destinationAssetFile.ContentFileSize = sourceCloudBlockBlob.Properties.Length;  							destinationAssetFile.Update ();  							if (sourceCloudBlockBlob.Properties.Length != destinationCloudBlockBlob.Properties.Length) {  								DoGridTransferDeclareError (response.Id' "Error during blob copy.");  								ErrorCopyAssetFile = true;  								ErrorCopyAsset = true;  								break;  							}  							BytesCopied += sourceCloudBlockBlob.Properties.Length;  							percentComplete = (long)100 * (long)BytesCopied / (long)Length;  						} else// file already exists.Can occur with merge function  						 {  							TextBoxLogWriteLine ("Failed to copy file '{0} as file already exists in the destination asset."' file.Name' true);  							ErrorCopyAssetFile = true;  						}  					}  				} catch (Exception ex) {  					TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  					DoGridTransferDeclareError (response.Id' ex);  					ErrorCopyAsset = true;  					ErrorCopyAssetFile = true;  				}  				if (!ErrorCopyAssetFile && !response.token.IsCancellationRequested)  					TextBoxLogWriteLine ("File '{0}' copied."' file.Name);  			}  		}  		if (!ErrorCopyAsset && !response.token.IsCancellationRequested)// let's do the copy of additional fragblob if there are  		 {  			List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  			// do the copy  			nbblob = 0;  			DoGridTransferUpdateProgressText (string.Format ("fragblobs"' SourceAsset.Name' DestinationCredentialsEntry.AccountName)' 0' response.Id);  			try {  				var mediablobs = SourceCloudBlobContainer.ListBlobs ();  				if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  				 {  					List<Task> mylistresults = new List<Task> ();  					foreach (var blob in mediablobs) {  						if (blob.GetType () == typeof(CloudBlobDirectory)) {  							CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  							ListDirectories.Add (blobdir);  							TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  						} else if (blob.GetType () == typeof(CloudBlockBlob)) {  							// we must copy the file.ismc too  							var blockblob = (CloudBlockBlob)blob;  							if (blockblob.Name.EndsWith (".ismc") && !SourceAsset.AssetFiles.ToList ().Any (f => f.Name == blockblob.Name))// if there is a .ismc in the blov and not in the asset files' then we need to copy it  							 {  								CloudBlockBlob targetBlob = DestinationCloudBlobContainer.GetBlockBlobReference (blockblob.Name);  								// copy using src blob as SAS  								mylistresults.Add (targetBlob.StartCopyAsync (new Uri (blockblob.Uri.AbsoluteUri + SourceLocator.ContentAccessComponent)' response.token));  							}  						}  					}  					// let's launch the copy of fragblobs  					double ind = 0;  					foreach (var dir in ListDirectories) {  						TextBoxLogWriteLine ("Copying fragblobs directory '{0}'...."' dir.Prefix);  						mylistresults.AddRange (AssetInfo.CopyBlobDirectory (dir' DestinationCloudBlobContainer' SourceLocator.ContentAccessComponent' response.token));  						if (mylistresults.Count > 0) {  							while (!mylistresults.All (r => r.IsCompleted)) {  								Task.Delay (TimeSpan.FromSeconds (3d)).Wait ();  								percentComplete = 100d * (ind + Convert.ToDouble (mylistresults.Where (c => c.IsCompleted).Count ()) / Convert.ToDouble (mylistresults.Count)) / Convert.ToDouble (ListDirectories.Count);  								DoGridTransferUpdateProgressText (string.Format ("fragblobs directory '{0}' ({1}/{2})"' dir.Prefix' mylistresults.Where (r => r.IsCompleted).Count ()' mylistresults.Count)' (int)percentComplete' response.Id);  							}  						}  						ind++;  						mylistresults.Clear ();  					}  				}  			} catch (Exception ex) {  				TextBoxLogWriteLine ("Failed to copy live fragblobs"' true);  				TextBoxLogWriteLine (ex);  				DoGridTransferDeclareError (response.Id' ex);  				ErrorCopyAsset = true;  			}  		}  		SourceLocator.Delete ();  		readpolicy.Delete ();  	} else {  		TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  		ErrorCopyAsset = true;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  	CloudStorageAccount SourceCloudStorageAccount;  	CloudBlobClient SourceCloudBlobClient;  	IAccessPolicy readpolicy;  	ILocator SourceLocator;  	Uri sourceUri;  	CloudBlobContainer SourceCloudBlobContainer;  	try {  		// let's get cloudblobcontainer for source  		SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  		SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  		readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  		SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  		// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  		sourceUri = new Uri (SourceLocator.Path);  		SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Error"' true);  		TextBoxLogWriteLine (ex);  		DoGridTransferDeclareError (response.Id' ex);  		DestinationLocator.Delete ();  		writePolicy.Delete ();  		TargetAsset.Delete ();  		return;  	}  	ErrorCopyAsset = false;  	CloudBlockBlob sourceCloudBlockBlob' destinationCloudBlockBlob;  	long Length = 0;  	long BytesCopied = 0;  	double percentComplete = 0;  	//calculate size  	foreach (IAssetFile file in SourceAsset.AssetFiles) {  		Length += file.ContentFileSize;  	}  	if (Length == 0)  		Length = 1;  	// as this could happen with Live archive and create a divide error  	// do the copy  	int nbblob = 0;  	// For Live archive' the folder for chunks are returned as files. So we detect this case and don't try to copy the folders as asset files  	List<IAssetFile> assetFilesToCopy = SourceAsset.AssetFiles.ToList ();  	if (assetFilesToCopy.Where (af => af.Name.Contains (".")).Count () == 2 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISMC")).Count () == 1 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISM")).Count () == 1)// only 2 files with extensions' and these files are ISMC and ISM  	 {  		// assetFilesToCopy = SourceAsset.AssetFiles.ToList().Where(af => !af.Name.StartsWith("audio_") && !af.Name.StartsWith("video_") && !af.Name.StartsWith("scte35_"));  		//  var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  		// let read the storage to make sure it's not a directory  		var mediablobsFolders = SourceCloudBlobContainer.ListBlobs ().ToList ().Where (b => b.GetType () == typeof(CloudBlobDirectory)).Select (a => (a as CloudBlobDirectory).Prefix);  		assetFilesToCopy = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.None && !mediablobsFolders.Contains (af.Name + "/")).ToList ();  		var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.Fragmented || mediablobsFolders.Contains (af.Name + "/")).ToList ();  		foreach (IAssetFile sourcefolder in assetFilesLiveFolders) {  			var folder = TargetAsset.AssetFiles.Create (sourcefolder.Name);  			folder.ContentFileSize = sourcefolder.ContentFileSize;  			folder.MimeType = sourcefolder.MimeType;  			folder.Update ();  		}  	}  	foreach (IAssetFile file in assetFilesToCopy) {  		if (response.token.IsCancellationRequested)  			break;  		if (file.IsEncrypted) {  			TextBoxLogWriteLine ("   Cannot copy file '{0}' because it is encrypted."' file.Name' true);  		} else {  			bool ErrorCopyAssetFile = false;  			nbblob++;  			try {  				sourceCloudBlockBlob = SourceCloudBlobContainer.GetBlockBlobReference (file.Name);  				// TO DO: chek if this is a folder or a file  				sourceCloudBlockBlob.FetchAttributes ();  				if (sourceCloudBlockBlob.Properties.Length > 0) {  					if (!TargetAsset.AssetFiles.ToList ().Any (f => f.Name == file.Name))// file does not exist in the target asset  					 {  						IAssetFile destinationAssetFile = TargetAsset.AssetFiles.Create (file.Name);  						destinationCloudBlockBlob = DestinationCloudBlobContainer.GetBlockBlobReference (destinationAssetFile.Name);  						try {  							destinationCloudBlockBlob.DeleteIfExists ();  						} catch {  							// exception if Blob does not exist' which is fine  						}  						string stringOperation = await destinationCloudBlockBlob.StartCopyAsync (file.GetSasUri ()' response.token);  						bool Cancelled = false;  						CloudBlockBlob blob;  						blob = (CloudBlockBlob)DestinationCloudBlobContainer.GetBlobReferenceFromServer (file.Name);  						while (blob.CopyState.Status == CopyStatus.Pending) {  							Task.Delay (TimeSpan.FromSeconds (0.5d)).Wait ();  							if (response.token.IsCancellationRequested && !Cancelled) {  								await destinationCloudBlockBlob.AbortCopyAsync (stringOperation);  								Cancelled = true;  							}  							blob.FetchAttributes ();  							percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SourceAsset.AssetFiles.Count ())) * 100d * (long)(BytesCopied + blob.CopyState.BytesCopied) / Length;  							DoGridTransferUpdateProgressText (string.Format ("File '{0}'"' file.Name)' (int)percentComplete' response.Id);  						}  						if (blob.CopyState.Status == CopyStatus.Failed) {  							DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  							ErrorCopyAssetFile = true;  							ErrorCopyAsset = true;  							break;  						}  						if (blob.CopyState.Status == CopyStatus.Aborted) {  							DoGridTransferDeclareCancelled (response.Id);  							ErrorCopyAssetFile = true;  							ErrorCopyAsset = true;  							break;  						}  						destinationCloudBlockBlob.FetchAttributes ();  						destinationAssetFile.ContentFileSize = sourceCloudBlockBlob.Properties.Length;  						destinationAssetFile.Update ();  						if (sourceCloudBlockBlob.Properties.Length != destinationCloudBlockBlob.Properties.Length) {  							DoGridTransferDeclareError (response.Id' "Error during blob copy.");  							ErrorCopyAssetFile = true;  							ErrorCopyAsset = true;  							break;  						}  						BytesCopied += sourceCloudBlockBlob.Properties.Length;  						percentComplete = (long)100 * (long)BytesCopied / (long)Length;  					} else// file already exists.Can occur with merge function  					 {  						TextBoxLogWriteLine ("Failed to copy file '{0} as file already exists in the destination asset."' file.Name' true);  						ErrorCopyAssetFile = true;  					}  				}  			} catch (Exception ex) {  				TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  				DoGridTransferDeclareError (response.Id' ex);  				ErrorCopyAsset = true;  				ErrorCopyAssetFile = true;  			}  			if (!ErrorCopyAssetFile && !response.token.IsCancellationRequested)  				TextBoxLogWriteLine ("File '{0}' copied."' file.Name);  		}  	}  	if (!ErrorCopyAsset && !response.token.IsCancellationRequested)// let's do the copy of additional fragblob if there are  	 {  		List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  		// do the copy  		nbblob = 0;  		DoGridTransferUpdateProgressText (string.Format ("fragblobs"' SourceAsset.Name' DestinationCredentialsEntry.AccountName)' 0' response.Id);  		try {  			var mediablobs = SourceCloudBlobContainer.ListBlobs ();  			if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  			 {  				List<Task> mylistresults = new List<Task> ();  				foreach (var blob in mediablobs) {  					if (blob.GetType () == typeof(CloudBlobDirectory)) {  						CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  						ListDirectories.Add (blobdir);  						TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  					} else if (blob.GetType () == typeof(CloudBlockBlob)) {  						// we must copy the file.ismc too  						var blockblob = (CloudBlockBlob)blob;  						if (blockblob.Name.EndsWith (".ismc") && !SourceAsset.AssetFiles.ToList ().Any (f => f.Name == blockblob.Name))// if there is a .ismc in the blov and not in the asset files' then we need to copy it  						 {  							CloudBlockBlob targetBlob = DestinationCloudBlobContainer.GetBlockBlobReference (blockblob.Name);  							// copy using src blob as SAS  							mylistresults.Add (targetBlob.StartCopyAsync (new Uri (blockblob.Uri.AbsoluteUri + SourceLocator.ContentAccessComponent)' response.token));  						}  					}  				}  				// let's launch the copy of fragblobs  				double ind = 0;  				foreach (var dir in ListDirectories) {  					TextBoxLogWriteLine ("Copying fragblobs directory '{0}'...."' dir.Prefix);  					mylistresults.AddRange (AssetInfo.CopyBlobDirectory (dir' DestinationCloudBlobContainer' SourceLocator.ContentAccessComponent' response.token));  					if (mylistresults.Count > 0) {  						while (!mylistresults.All (r => r.IsCompleted)) {  							Task.Delay (TimeSpan.FromSeconds (3d)).Wait ();  							percentComplete = 100d * (ind + Convert.ToDouble (mylistresults.Where (c => c.IsCompleted).Count ()) / Convert.ToDouble (mylistresults.Count)) / Convert.ToDouble (ListDirectories.Count);  							DoGridTransferUpdateProgressText (string.Format ("fragblobs directory '{0}' ({1}/{2})"' dir.Prefix' mylistresults.Where (r => r.IsCompleted).Count ()' mylistresults.Count)' (int)percentComplete' response.Id);  						}  					}  					ind++;  					mylistresults.Clear ();  				}  			}  		} catch (Exception ex) {  			TextBoxLogWriteLine ("Failed to copy live fragblobs"' true);  			TextBoxLogWriteLine (ex);  			DoGridTransferDeclareError (response.Id' ex);  			ErrorCopyAsset = true;  		}  	}  	SourceLocator.Delete ();  	readpolicy.Delete ();  } else {  	TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  	ErrorCopyAsset = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  	CloudStorageAccount SourceCloudStorageAccount;  	CloudBlobClient SourceCloudBlobClient;  	IAccessPolicy readpolicy;  	ILocator SourceLocator;  	Uri sourceUri;  	CloudBlobContainer SourceCloudBlobContainer;  	try {  		// let's get cloudblobcontainer for source  		SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  		SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  		readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  		SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  		// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  		sourceUri = new Uri (SourceLocator.Path);  		SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Error"' true);  		TextBoxLogWriteLine (ex);  		DoGridTransferDeclareError (response.Id' ex);  		DestinationLocator.Delete ();  		writePolicy.Delete ();  		TargetAsset.Delete ();  		return;  	}  	ErrorCopyAsset = false;  	CloudBlockBlob sourceCloudBlockBlob' destinationCloudBlockBlob;  	long Length = 0;  	long BytesCopied = 0;  	double percentComplete = 0;  	//calculate size  	foreach (IAssetFile file in SourceAsset.AssetFiles) {  		Length += file.ContentFileSize;  	}  	if (Length == 0)  		Length = 1;  	// as this could happen with Live archive and create a divide error  	// do the copy  	int nbblob = 0;  	// For Live archive' the folder for chunks are returned as files. So we detect this case and don't try to copy the folders as asset files  	List<IAssetFile> assetFilesToCopy = SourceAsset.AssetFiles.ToList ();  	if (assetFilesToCopy.Where (af => af.Name.Contains (".")).Count () == 2 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISMC")).Count () == 1 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISM")).Count () == 1)// only 2 files with extensions' and these files are ISMC and ISM  	 {  		// assetFilesToCopy = SourceAsset.AssetFiles.ToList().Where(af => !af.Name.StartsWith("audio_") && !af.Name.StartsWith("video_") && !af.Name.StartsWith("scte35_"));  		//  var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  		// let read the storage to make sure it's not a directory  		var mediablobsFolders = SourceCloudBlobContainer.ListBlobs ().ToList ().Where (b => b.GetType () == typeof(CloudBlobDirectory)).Select (a => (a as CloudBlobDirectory).Prefix);  		assetFilesToCopy = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.None && !mediablobsFolders.Contains (af.Name + "/")).ToList ();  		var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.Fragmented || mediablobsFolders.Contains (af.Name + "/")).ToList ();  		foreach (IAssetFile sourcefolder in assetFilesLiveFolders) {  			var folder = TargetAsset.AssetFiles.Create (sourcefolder.Name);  			folder.ContentFileSize = sourcefolder.ContentFileSize;  			folder.MimeType = sourcefolder.MimeType;  			folder.Update ();  		}  	}  	foreach (IAssetFile file in assetFilesToCopy) {  		if (response.token.IsCancellationRequested)  			break;  		if (file.IsEncrypted) {  			TextBoxLogWriteLine ("   Cannot copy file '{0}' because it is encrypted."' file.Name' true);  		} else {  			bool ErrorCopyAssetFile = false;  			nbblob++;  			try {  				sourceCloudBlockBlob = SourceCloudBlobContainer.GetBlockBlobReference (file.Name);  				// TO DO: chek if this is a folder or a file  				sourceCloudBlockBlob.FetchAttributes ();  				if (sourceCloudBlockBlob.Properties.Length > 0) {  					if (!TargetAsset.AssetFiles.ToList ().Any (f => f.Name == file.Name))// file does not exist in the target asset  					 {  						IAssetFile destinationAssetFile = TargetAsset.AssetFiles.Create (file.Name);  						destinationCloudBlockBlob = DestinationCloudBlobContainer.GetBlockBlobReference (destinationAssetFile.Name);  						try {  							destinationCloudBlockBlob.DeleteIfExists ();  						} catch {  							// exception if Blob does not exist' which is fine  						}  						string stringOperation = await destinationCloudBlockBlob.StartCopyAsync (file.GetSasUri ()' response.token);  						bool Cancelled = false;  						CloudBlockBlob blob;  						blob = (CloudBlockBlob)DestinationCloudBlobContainer.GetBlobReferenceFromServer (file.Name);  						while (blob.CopyState.Status == CopyStatus.Pending) {  							Task.Delay (TimeSpan.FromSeconds (0.5d)).Wait ();  							if (response.token.IsCancellationRequested && !Cancelled) {  								await destinationCloudBlockBlob.AbortCopyAsync (stringOperation);  								Cancelled = true;  							}  							blob.FetchAttributes ();  							percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SourceAsset.AssetFiles.Count ())) * 100d * (long)(BytesCopied + blob.CopyState.BytesCopied) / Length;  							DoGridTransferUpdateProgressText (string.Format ("File '{0}'"' file.Name)' (int)percentComplete' response.Id);  						}  						if (blob.CopyState.Status == CopyStatus.Failed) {  							DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  							ErrorCopyAssetFile = true;  							ErrorCopyAsset = true;  							break;  						}  						if (blob.CopyState.Status == CopyStatus.Aborted) {  							DoGridTransferDeclareCancelled (response.Id);  							ErrorCopyAssetFile = true;  							ErrorCopyAsset = true;  							break;  						}  						destinationCloudBlockBlob.FetchAttributes ();  						destinationAssetFile.ContentFileSize = sourceCloudBlockBlob.Properties.Length;  						destinationAssetFile.Update ();  						if (sourceCloudBlockBlob.Properties.Length != destinationCloudBlockBlob.Properties.Length) {  							DoGridTransferDeclareError (response.Id' "Error during blob copy.");  							ErrorCopyAssetFile = true;  							ErrorCopyAsset = true;  							break;  						}  						BytesCopied += sourceCloudBlockBlob.Properties.Length;  						percentComplete = (long)100 * (long)BytesCopied / (long)Length;  					} else// file already exists.Can occur with merge function  					 {  						TextBoxLogWriteLine ("Failed to copy file '{0} as file already exists in the destination asset."' file.Name' true);  						ErrorCopyAssetFile = true;  					}  				}  			} catch (Exception ex) {  				TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  				DoGridTransferDeclareError (response.Id' ex);  				ErrorCopyAsset = true;  				ErrorCopyAssetFile = true;  			}  			if (!ErrorCopyAssetFile && !response.token.IsCancellationRequested)  				TextBoxLogWriteLine ("File '{0}' copied."' file.Name);  		}  	}  	if (!ErrorCopyAsset && !response.token.IsCancellationRequested)// let's do the copy of additional fragblob if there are  	 {  		List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  		// do the copy  		nbblob = 0;  		DoGridTransferUpdateProgressText (string.Format ("fragblobs"' SourceAsset.Name' DestinationCredentialsEntry.AccountName)' 0' response.Id);  		try {  			var mediablobs = SourceCloudBlobContainer.ListBlobs ();  			if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  			 {  				List<Task> mylistresults = new List<Task> ();  				foreach (var blob in mediablobs) {  					if (blob.GetType () == typeof(CloudBlobDirectory)) {  						CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  						ListDirectories.Add (blobdir);  						TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  					} else if (blob.GetType () == typeof(CloudBlockBlob)) {  						// we must copy the file.ismc too  						var blockblob = (CloudBlockBlob)blob;  						if (blockblob.Name.EndsWith (".ismc") && !SourceAsset.AssetFiles.ToList ().Any (f => f.Name == blockblob.Name))// if there is a .ismc in the blov and not in the asset files' then we need to copy it  						 {  							CloudBlockBlob targetBlob = DestinationCloudBlobContainer.GetBlockBlobReference (blockblob.Name);  							// copy using src blob as SAS  							mylistresults.Add (targetBlob.StartCopyAsync (new Uri (blockblob.Uri.AbsoluteUri + SourceLocator.ContentAccessComponent)' response.token));  						}  					}  				}  				// let's launch the copy of fragblobs  				double ind = 0;  				foreach (var dir in ListDirectories) {  					TextBoxLogWriteLine ("Copying fragblobs directory '{0}'...."' dir.Prefix);  					mylistresults.AddRange (AssetInfo.CopyBlobDirectory (dir' DestinationCloudBlobContainer' SourceLocator.ContentAccessComponent' response.token));  					if (mylistresults.Count > 0) {  						while (!mylistresults.All (r => r.IsCompleted)) {  							Task.Delay (TimeSpan.FromSeconds (3d)).Wait ();  							percentComplete = 100d * (ind + Convert.ToDouble (mylistresults.Where (c => c.IsCompleted).Count ()) / Convert.ToDouble (mylistresults.Count)) / Convert.ToDouble (ListDirectories.Count);  							DoGridTransferUpdateProgressText (string.Format ("fragblobs directory '{0}' ({1}/{2})"' dir.Prefix' mylistresults.Where (r => r.IsCompleted).Count ()' mylistresults.Count)' (int)percentComplete' response.Id);  						}  					}  					ind++;  					mylistresults.Clear ();  				}  			}  		} catch (Exception ex) {  			TextBoxLogWriteLine ("Failed to copy live fragblobs"' true);  			TextBoxLogWriteLine (ex);  			DoGridTransferDeclareError (response.Id' ex);  			ErrorCopyAsset = true;  		}  	}  	SourceLocator.Delete ();  	readpolicy.Delete ();  } else {  	TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  	ErrorCopyAsset = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: if (assetFilesToCopy.Where (af => af.Name.Contains (".")).Count () == 2 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISMC")).Count () == 1 && assetFilesToCopy.Where (af => af.Name.ToUpper ().EndsWith (".ISM")).Count () == 1)// only 2 files with extensions' and these files are ISMC and ISM   {  	// assetFilesToCopy = SourceAsset.AssetFiles.ToList().Where(af => !af.Name.StartsWith("audio_") && !af.Name.StartsWith("video_") && !af.Name.StartsWith("scte35_"));  	//  var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  	// let read the storage to make sure it's not a directory  	var mediablobsFolders = SourceCloudBlobContainer.ListBlobs ().ToList ().Where (b => b.GetType () == typeof(CloudBlobDirectory)).Select (a => (a as CloudBlobDirectory).Prefix);  	assetFilesToCopy = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.None && !mediablobsFolders.Contains (af.Name + "/")).ToList ();  	var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList ().Where (af => af.AssetFileOptions == AssetFileOptions.Fragmented || mediablobsFolders.Contains (af.Name + "/")).ToList ();  	foreach (IAssetFile sourcefolder in assetFilesLiveFolders) {  		var folder = TargetAsset.AssetFiles.Create (sourcefolder.Name);  		folder.ContentFileSize = sourcefolder.ContentFileSize;  		folder.MimeType = sourcefolder.MimeType;  		folder.Update ();  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: foreach (IAssetFile file in assetFilesToCopy) {  	if (response.token.IsCancellationRequested)  		break;  	if (file.IsEncrypted) {  		TextBoxLogWriteLine ("   Cannot copy file '{0}' because it is encrypted."' file.Name' true);  	} else {  		bool ErrorCopyAssetFile = false;  		nbblob++;  		try {  			sourceCloudBlockBlob = SourceCloudBlobContainer.GetBlockBlobReference (file.Name);  			// TO DO: chek if this is a folder or a file  			sourceCloudBlockBlob.FetchAttributes ();  			if (sourceCloudBlockBlob.Properties.Length > 0) {  				if (!TargetAsset.AssetFiles.ToList ().Any (f => f.Name == file.Name))// file does not exist in the target asset  				 {  					IAssetFile destinationAssetFile = TargetAsset.AssetFiles.Create (file.Name);  					destinationCloudBlockBlob = DestinationCloudBlobContainer.GetBlockBlobReference (destinationAssetFile.Name);  					try {  						destinationCloudBlockBlob.DeleteIfExists ();  					} catch {  						// exception if Blob does not exist' which is fine  					}  					string stringOperation = await destinationCloudBlockBlob.StartCopyAsync (file.GetSasUri ()' response.token);  					bool Cancelled = false;  					CloudBlockBlob blob;  					blob = (CloudBlockBlob)DestinationCloudBlobContainer.GetBlobReferenceFromServer (file.Name);  					while (blob.CopyState.Status == CopyStatus.Pending) {  						Task.Delay (TimeSpan.FromSeconds (0.5d)).Wait ();  						if (response.token.IsCancellationRequested && !Cancelled) {  							await destinationCloudBlockBlob.AbortCopyAsync (stringOperation);  							Cancelled = true;  						}  						blob.FetchAttributes ();  						percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SourceAsset.AssetFiles.Count ())) * 100d * (long)(BytesCopied + blob.CopyState.BytesCopied) / Length;  						DoGridTransferUpdateProgressText (string.Format ("File '{0}'"' file.Name)' (int)percentComplete' response.Id);  					}  					if (blob.CopyState.Status == CopyStatus.Failed) {  						DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  						ErrorCopyAssetFile = true;  						ErrorCopyAsset = true;  						break;  					}  					if (blob.CopyState.Status == CopyStatus.Aborted) {  						DoGridTransferDeclareCancelled (response.Id);  						ErrorCopyAssetFile = true;  						ErrorCopyAsset = true;  						break;  					}  					destinationCloudBlockBlob.FetchAttributes ();  					destinationAssetFile.ContentFileSize = sourceCloudBlockBlob.Properties.Length;  					destinationAssetFile.Update ();  					if (sourceCloudBlockBlob.Properties.Length != destinationCloudBlockBlob.Properties.Length) {  						DoGridTransferDeclareError (response.Id' "Error during blob copy.");  						ErrorCopyAssetFile = true;  						ErrorCopyAsset = true;  						break;  					}  					BytesCopied += sourceCloudBlockBlob.Properties.Length;  					percentComplete = (long)100 * (long)BytesCopied / (long)Length;  				} else// file already exists.Can occur with merge function  				 {  					TextBoxLogWriteLine ("Failed to copy file '{0} as file already exists in the destination asset."' file.Name' true);  					ErrorCopyAssetFile = true;  				}  			}  		} catch (Exception ex) {  			TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  			DoGridTransferDeclareError (response.Id' ex);  			ErrorCopyAsset = true;  			ErrorCopyAssetFile = true;  		}  		if (!ErrorCopyAssetFile && !response.token.IsCancellationRequested)  			TextBoxLogWriteLine ("File '{0}' copied."' file.Name);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: if (file.IsEncrypted) {  	TextBoxLogWriteLine ("   Cannot copy file '{0}' because it is encrypted."' file.Name' true);  } else {  	bool ErrorCopyAssetFile = false;  	nbblob++;  	try {  		sourceCloudBlockBlob = SourceCloudBlobContainer.GetBlockBlobReference (file.Name);  		// TO DO: chek if this is a folder or a file  		sourceCloudBlockBlob.FetchAttributes ();  		if (sourceCloudBlockBlob.Properties.Length > 0) {  			if (!TargetAsset.AssetFiles.ToList ().Any (f => f.Name == file.Name))// file does not exist in the target asset  			 {  				IAssetFile destinationAssetFile = TargetAsset.AssetFiles.Create (file.Name);  				destinationCloudBlockBlob = DestinationCloudBlobContainer.GetBlockBlobReference (destinationAssetFile.Name);  				try {  					destinationCloudBlockBlob.DeleteIfExists ();  				} catch {  					// exception if Blob does not exist' which is fine  				}  				string stringOperation = await destinationCloudBlockBlob.StartCopyAsync (file.GetSasUri ()' response.token);  				bool Cancelled = false;  				CloudBlockBlob blob;  				blob = (CloudBlockBlob)DestinationCloudBlobContainer.GetBlobReferenceFromServer (file.Name);  				while (blob.CopyState.Status == CopyStatus.Pending) {  					Task.Delay (TimeSpan.FromSeconds (0.5d)).Wait ();  					if (response.token.IsCancellationRequested && !Cancelled) {  						await destinationCloudBlockBlob.AbortCopyAsync (stringOperation);  						Cancelled = true;  					}  					blob.FetchAttributes ();  					percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SourceAsset.AssetFiles.Count ())) * 100d * (long)(BytesCopied + blob.CopyState.BytesCopied) / Length;  					DoGridTransferUpdateProgressText (string.Format ("File '{0}'"' file.Name)' (int)percentComplete' response.Id);  				}  				if (blob.CopyState.Status == CopyStatus.Failed) {  					DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  					ErrorCopyAssetFile = true;  					ErrorCopyAsset = true;  					break;  				}  				if (blob.CopyState.Status == CopyStatus.Aborted) {  					DoGridTransferDeclareCancelled (response.Id);  					ErrorCopyAssetFile = true;  					ErrorCopyAsset = true;  					break;  				}  				destinationCloudBlockBlob.FetchAttributes ();  				destinationAssetFile.ContentFileSize = sourceCloudBlockBlob.Properties.Length;  				destinationAssetFile.Update ();  				if (sourceCloudBlockBlob.Properties.Length != destinationCloudBlockBlob.Properties.Length) {  					DoGridTransferDeclareError (response.Id' "Error during blob copy.");  					ErrorCopyAssetFile = true;  					ErrorCopyAsset = true;  					break;  				}  				BytesCopied += sourceCloudBlockBlob.Properties.Length;  				percentComplete = (long)100 * (long)BytesCopied / (long)Length;  			} else// file already exists.Can occur with merge function  			 {  				TextBoxLogWriteLine ("Failed to copy file '{0} as file already exists in the destination asset."' file.Name' true);  				ErrorCopyAssetFile = true;  			}  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  		DoGridTransferDeclareError (response.Id' ex);  		ErrorCopyAsset = true;  		ErrorCopyAssetFile = true;  	}  	if (!ErrorCopyAssetFile && !response.token.IsCancellationRequested)  		TextBoxLogWriteLine ("File '{0}' copied."' file.Name);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: try {  	sourceCloudBlockBlob = SourceCloudBlobContainer.GetBlockBlobReference (file.Name);  	// TO DO: chek if this is a folder or a file  	sourceCloudBlockBlob.FetchAttributes ();  	if (sourceCloudBlockBlob.Properties.Length > 0) {  		if (!TargetAsset.AssetFiles.ToList ().Any (f => f.Name == file.Name))// file does not exist in the target asset  		 {  			IAssetFile destinationAssetFile = TargetAsset.AssetFiles.Create (file.Name);  			destinationCloudBlockBlob = DestinationCloudBlobContainer.GetBlockBlobReference (destinationAssetFile.Name);  			try {  				destinationCloudBlockBlob.DeleteIfExists ();  			} catch {  				// exception if Blob does not exist' which is fine  			}  			string stringOperation = await destinationCloudBlockBlob.StartCopyAsync (file.GetSasUri ()' response.token);  			bool Cancelled = false;  			CloudBlockBlob blob;  			blob = (CloudBlockBlob)DestinationCloudBlobContainer.GetBlobReferenceFromServer (file.Name);  			while (blob.CopyState.Status == CopyStatus.Pending) {  				Task.Delay (TimeSpan.FromSeconds (0.5d)).Wait ();  				if (response.token.IsCancellationRequested && !Cancelled) {  					await destinationCloudBlockBlob.AbortCopyAsync (stringOperation);  					Cancelled = true;  				}  				blob.FetchAttributes ();  				percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SourceAsset.AssetFiles.Count ())) * 100d * (long)(BytesCopied + blob.CopyState.BytesCopied) / Length;  				DoGridTransferUpdateProgressText (string.Format ("File '{0}'"' file.Name)' (int)percentComplete' response.Id);  			}  			if (blob.CopyState.Status == CopyStatus.Failed) {  				DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  				ErrorCopyAssetFile = true;  				ErrorCopyAsset = true;  				break;  			}  			if (blob.CopyState.Status == CopyStatus.Aborted) {  				DoGridTransferDeclareCancelled (response.Id);  				ErrorCopyAssetFile = true;  				ErrorCopyAsset = true;  				break;  			}  			destinationCloudBlockBlob.FetchAttributes ();  			destinationAssetFile.ContentFileSize = sourceCloudBlockBlob.Properties.Length;  			destinationAssetFile.Update ();  			if (sourceCloudBlockBlob.Properties.Length != destinationCloudBlockBlob.Properties.Length) {  				DoGridTransferDeclareError (response.Id' "Error during blob copy.");  				ErrorCopyAssetFile = true;  				ErrorCopyAsset = true;  				break;  			}  			BytesCopied += sourceCloudBlockBlob.Properties.Length;  			percentComplete = (long)100 * (long)BytesCopied / (long)Length;  		} else// file already exists.Can occur with merge function  		 {  			TextBoxLogWriteLine ("Failed to copy file '{0} as file already exists in the destination asset."' file.Name' true);  			ErrorCopyAssetFile = true;  		}  	}  } catch (Exception ex) {  	TextBoxLogWriteLine ("Failed to copy file '{0}'"' file.Name' true);  	DoGridTransferDeclareError (response.Id' ex);  	ErrorCopyAsset = true;  	ErrorCopyAssetFile = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: if (sourceCloudBlockBlob.Properties.Length > 0) {  	if (!TargetAsset.AssetFiles.ToList ().Any (f => f.Name == file.Name))// file does not exist in the target asset  	 {  		IAssetFile destinationAssetFile = TargetAsset.AssetFiles.Create (file.Name);  		destinationCloudBlockBlob = DestinationCloudBlobContainer.GetBlockBlobReference (destinationAssetFile.Name);  		try {  			destinationCloudBlockBlob.DeleteIfExists ();  		} catch {  			// exception if Blob does not exist' which is fine  		}  		string stringOperation = await destinationCloudBlockBlob.StartCopyAsync (file.GetSasUri ()' response.token);  		bool Cancelled = false;  		CloudBlockBlob blob;  		blob = (CloudBlockBlob)DestinationCloudBlobContainer.GetBlobReferenceFromServer (file.Name);  		while (blob.CopyState.Status == CopyStatus.Pending) {  			Task.Delay (TimeSpan.FromSeconds (0.5d)).Wait ();  			if (response.token.IsCancellationRequested && !Cancelled) {  				await destinationCloudBlockBlob.AbortCopyAsync (stringOperation);  				Cancelled = true;  			}  			blob.FetchAttributes ();  			percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SourceAsset.AssetFiles.Count ())) * 100d * (long)(BytesCopied + blob.CopyState.BytesCopied) / Length;  			DoGridTransferUpdateProgressText (string.Format ("File '{0}'"' file.Name)' (int)percentComplete' response.Id);  		}  		if (blob.CopyState.Status == CopyStatus.Failed) {  			DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  			ErrorCopyAssetFile = true;  			ErrorCopyAsset = true;  			break;  		}  		if (blob.CopyState.Status == CopyStatus.Aborted) {  			DoGridTransferDeclareCancelled (response.Id);  			ErrorCopyAssetFile = true;  			ErrorCopyAsset = true;  			break;  		}  		destinationCloudBlockBlob.FetchAttributes ();  		destinationAssetFile.ContentFileSize = sourceCloudBlockBlob.Properties.Length;  		destinationAssetFile.Update ();  		if (sourceCloudBlockBlob.Properties.Length != destinationCloudBlockBlob.Properties.Length) {  			DoGridTransferDeclareError (response.Id' "Error during blob copy.");  			ErrorCopyAssetFile = true;  			ErrorCopyAsset = true;  			break;  		}  		BytesCopied += sourceCloudBlockBlob.Properties.Length;  		percentComplete = (long)100 * (long)BytesCopied / (long)Length;  	} else// file already exists.Can occur with merge function  	 {  		TextBoxLogWriteLine ("Failed to copy file '{0} as file already exists in the destination asset."' file.Name' true);  		ErrorCopyAssetFile = true;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: if (!TargetAsset.AssetFiles.ToList ().Any (f => f.Name == file.Name))// file does not exist in the target asset   {  	IAssetFile destinationAssetFile = TargetAsset.AssetFiles.Create (file.Name);  	destinationCloudBlockBlob = DestinationCloudBlobContainer.GetBlockBlobReference (destinationAssetFile.Name);  	try {  		destinationCloudBlockBlob.DeleteIfExists ();  	} catch {  		// exception if Blob does not exist' which is fine  	}  	string stringOperation = await destinationCloudBlockBlob.StartCopyAsync (file.GetSasUri ()' response.token);  	bool Cancelled = false;  	CloudBlockBlob blob;  	blob = (CloudBlockBlob)DestinationCloudBlobContainer.GetBlobReferenceFromServer (file.Name);  	while (blob.CopyState.Status == CopyStatus.Pending) {  		Task.Delay (TimeSpan.FromSeconds (0.5d)).Wait ();  		if (response.token.IsCancellationRequested && !Cancelled) {  			await destinationCloudBlockBlob.AbortCopyAsync (stringOperation);  			Cancelled = true;  		}  		blob.FetchAttributes ();  		percentComplete = (Convert.ToDouble (nbblob) / Convert.ToDouble (SourceAsset.AssetFiles.Count ())) * 100d * (long)(BytesCopied + blob.CopyState.BytesCopied) / Length;  		DoGridTransferUpdateProgressText (string.Format ("File '{0}'"' file.Name)' (int)percentComplete' response.Id);  	}  	if (blob.CopyState.Status == CopyStatus.Failed) {  		DoGridTransferDeclareError (response.Id' blob.CopyState.StatusDescription);  		ErrorCopyAssetFile = true;  		ErrorCopyAsset = true;  		break;  	}  	if (blob.CopyState.Status == CopyStatus.Aborted) {  		DoGridTransferDeclareCancelled (response.Id);  		ErrorCopyAssetFile = true;  		ErrorCopyAsset = true;  		break;  	}  	destinationCloudBlockBlob.FetchAttributes ();  	destinationAssetFile.ContentFileSize = sourceCloudBlockBlob.Properties.Length;  	destinationAssetFile.Update ();  	if (sourceCloudBlockBlob.Properties.Length != destinationCloudBlockBlob.Properties.Length) {  		DoGridTransferDeclareError (response.Id' "Error during blob copy.");  		ErrorCopyAssetFile = true;  		ErrorCopyAsset = true;  		break;  	}  	BytesCopied += sourceCloudBlockBlob.Properties.Length;  	percentComplete = (long)100 * (long)BytesCopied / (long)Length;  } else// file already exists.Can occur with merge function   {  	TextBoxLogWriteLine ("Failed to copy file '{0} as file already exists in the destination asset."' file.Name' true);  	ErrorCopyAssetFile = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: percentComplete = (long)100 * (long)BytesCopied / (long)Length;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: if (CloneStreamingLocators && !ErrorCopyAsset && SourceAssets.FirstOrDefault ().Locators.Where (l => l.Type == LocatorType.OnDemandOrigin).Count () > 0 && !response.token.IsCancellationRequested) {  	try {  		TextBoxLogWriteLine ("Cloning streaming locator(s) to cloned asset '{0}'"' SourceAssets.FirstOrDefault ().Name);  		var sourceLocators = SourceAssets.FirstOrDefault ().Locators.Where (l => l.Type == LocatorType.OnDemandOrigin).Select (l => new {  			l.Id'  			l.Name'  			l.StartTime'  			l.ExpirationDateTime  		}).ToList ();  		if (UnpublishSourceAsset) {  			sourceLocators.ForEach (sl => _context.Locators.Where (l => l.Id == sl.Id).FirstOrDefault ().Delete ());  			TextBoxLogWriteLine (string.Format ("Source locator(s) for asset {0} deleted."' SourceAssets.FirstOrDefault ().Name));  			Thread.Sleep (1000);  			// to make sure tables are updated before new locators are created  		}  		foreach (var streamLocator in sourceLocators) {  			IAccessPolicy policy = DestinationContext.AccessPolicies.Create ("AP:" + SourceAssets.FirstOrDefault ().Name' (streamLocator.ExpirationDateTime - DateTime.UtcNow)' AccessPermissions.Read);  			var newLoc = DestinationContext.Locators.CreateLocator (streamLocator.Id' LocatorType.OnDemandOrigin' TargetAsset' policy' streamLocator.StartTime' streamLocator.Name);  			TextBoxLogWriteLine (string.Format ("Cloned locator {0} created."' newLoc.Id));  		}  	} catch (Exception ex) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when cloning locator(s) to the asset '{0}'."' TargetAsset.Name' true);  		TextBoxLogWriteLine (ex);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: try {  	TextBoxLogWriteLine ("Cloning streaming locator(s) to cloned asset '{0}'"' SourceAssets.FirstOrDefault ().Name);  	var sourceLocators = SourceAssets.FirstOrDefault ().Locators.Where (l => l.Type == LocatorType.OnDemandOrigin).Select (l => new {  		l.Id'  		l.Name'  		l.StartTime'  		l.ExpirationDateTime  	}).ToList ();  	if (UnpublishSourceAsset) {  		sourceLocators.ForEach (sl => _context.Locators.Where (l => l.Id == sl.Id).FirstOrDefault ().Delete ());  		TextBoxLogWriteLine (string.Format ("Source locator(s) for asset {0} deleted."' SourceAssets.FirstOrDefault ().Name));  		Thread.Sleep (1000);  		// to make sure tables are updated before new locators are created  	}  	foreach (var streamLocator in sourceLocators) {  		IAccessPolicy policy = DestinationContext.AccessPolicies.Create ("AP:" + SourceAssets.FirstOrDefault ().Name' (streamLocator.ExpirationDateTime - DateTime.UtcNow)' AccessPermissions.Read);  		var newLoc = DestinationContext.Locators.CreateLocator (streamLocator.Id' LocatorType.OnDemandOrigin' TargetAsset' policy' streamLocator.StartTime' streamLocator.Name);  		TextBoxLogWriteLine (string.Format ("Cloned locator {0} created."' newLoc.Id));  	}  } catch (Exception ex) {  	// Add useful information to the exception  	TextBoxLogWriteLine ("There is a problem when cloning locator(s) to the asset '{0}'."' TargetAsset.Name' true);  	TextBoxLogWriteLine (ex);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: if (UnpublishSourceAsset) {  	sourceLocators.ForEach (sl => _context.Locators.Where (l => l.Id == sl.Id).FirstOrDefault ().Delete ());  	TextBoxLogWriteLine (string.Format ("Source locator(s) for asset {0} deleted."' SourceAssets.FirstOrDefault ().Name));  	Thread.Sleep (1000);  	// to make sure tables are updated before new locators are created  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessExportAssetToAnotherAMSAccount,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  	TextBoxLogWriteLine ("Starting the integrity check for asset '{0}'."' SourceAsset.Name);  	bool Error = false;  	bool codeIssue = false;  	int nbErrorsAudioManifest = 0;  	int nbErrorsVideoManifest = 0;  	// Video segments in manifest  	TextBoxLogWriteLine ("Checking video track segments in manifest...");  	int index = 0;  	foreach (var seg in manifestdata.videoSegments) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsVideoManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsVideoManifest++;  		}  		index++;  	}  	if (nbErrorsVideoManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  	}  	// Audio segments in manifest  	TextBoxLogWriteLine ("Checking audio track segments in manifest...");  	index = 0;  	int a_index = 0;  	foreach (var audiotrack in manifestdata.audioSegments) {  		foreach (var seg in audiotrack) {  			if (seg.timestamp_mismatch) {  				if (nbErrorsAudioManifest < 10) {  					TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  					Error = true;  				}  				nbErrorsAudioManifest++;  			}  			index++;  		}  		if (nbErrorsAudioManifest >= 10) {  			TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  		}  		a_index++;  	}  	TextBoxLogWriteLine ("Checking blobs in storage...");  	// let's get cloudblobcontainer for source  	CloudStorageAccount SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  	var SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  	try {  		// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  		Uri sourceUri = new Uri (SourceLocator.Path);  		CloudBlobContainer SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  		//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  		List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  		var mediablobs = SourceCloudBlobContainer.ListBlobs ();  		if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  		 {  			foreach (var blob in mediablobs) {  				if (blob.GetType () == typeof(CloudBlobDirectory)) {  					CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  					ListDirectories.Add (blobdir);  					TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  				}  			}  			// let's check the presence of all audio_ and video_ directories  			var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  			var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			if (videodir.Count () != manifestdata.videoBitrates.Count) {  				TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  				Error = true;  			}  			if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  				TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  				Error = true;  			}  			var except = videodir.Except (manifestdata.videoBitrates);  			if (except.Count () > 0) {  				TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  				Error = true;  			}  			var exceptb = manifestdata.videoBitrates.Except (videodir);  			if (exceptb.Count () > 0) {  				TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  				Error = true;  			}  			// let's check the fragblobs  			foreach (var dir in ListDirectories) {  				if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  					BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  					var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  					while (blobResultSegment.ContinuationToken != null) {  						TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  						blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  						listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  					}  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  					var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  					List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  					if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  					 {  						manifestdatacurrenttrack = manifestdata.videoSegments;  					} else// audio  					 {  						int i = 0;  						manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  						foreach (var audiob in manifestdata.audioBitrates) {  							if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  								manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  								break;  							}  							i++;  						}  						/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  					var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  					var except2 = listblobtimestamps.Except (timestampsinmanifest);  					const int maxSegDisplayed = 20;  					if (except2.Count () > 0) {  						int count = except2.Count ();  						TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  					}  					var except3 = timestampsinmanifest.Except (listblobtimestamps);  					if (except3.Count () > 0) {  						int count = except3.Count ();  						TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  						Error = true;  					}  					if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  					 {  						TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  						Error = true;  					} else if (manifestdatacurrenttrack.Count > 0) {  						index = 0;  						// list timestamps from blob  						ulong timestampinblob;  						foreach (var seg in manifestdatacurrenttrack) {  							timestampinblob = listblobtimestamps [index];  							if (timestampinblob != seg.timestamp && !seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							} else if (timestampinblob != seg.timestamp && seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							}  							index++;  						}  					}  				}  			}  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Error when analyzing the archive."' true);  		TextBoxLogWriteLine (ex);  		codeIssue = true;  	}  	try {  		SourceLocator.Delete ();  		readpolicy.Delete ();  	} catch {  	}  	if (codeIssue) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Code fails."' SourceAsset.Name);  	} else if (Error) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Error(s) detected."' SourceAsset.Name);  	} else {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. No error detected."' SourceAsset.Name);  	}  } else {  	TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  	TextBoxLogWriteLine ("Starting the integrity check for asset '{0}'."' SourceAsset.Name);  	bool Error = false;  	bool codeIssue = false;  	int nbErrorsAudioManifest = 0;  	int nbErrorsVideoManifest = 0;  	// Video segments in manifest  	TextBoxLogWriteLine ("Checking video track segments in manifest...");  	int index = 0;  	foreach (var seg in manifestdata.videoSegments) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsVideoManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsVideoManifest++;  		}  		index++;  	}  	if (nbErrorsVideoManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  	}  	// Audio segments in manifest  	TextBoxLogWriteLine ("Checking audio track segments in manifest...");  	index = 0;  	int a_index = 0;  	foreach (var audiotrack in manifestdata.audioSegments) {  		foreach (var seg in audiotrack) {  			if (seg.timestamp_mismatch) {  				if (nbErrorsAudioManifest < 10) {  					TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  					Error = true;  				}  				nbErrorsAudioManifest++;  			}  			index++;  		}  		if (nbErrorsAudioManifest >= 10) {  			TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  		}  		a_index++;  	}  	TextBoxLogWriteLine ("Checking blobs in storage...");  	// let's get cloudblobcontainer for source  	CloudStorageAccount SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  	var SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  	try {  		// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  		Uri sourceUri = new Uri (SourceLocator.Path);  		CloudBlobContainer SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  		//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  		List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  		var mediablobs = SourceCloudBlobContainer.ListBlobs ();  		if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  		 {  			foreach (var blob in mediablobs) {  				if (blob.GetType () == typeof(CloudBlobDirectory)) {  					CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  					ListDirectories.Add (blobdir);  					TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  				}  			}  			// let's check the presence of all audio_ and video_ directories  			var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  			var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			if (videodir.Count () != manifestdata.videoBitrates.Count) {  				TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  				Error = true;  			}  			if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  				TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  				Error = true;  			}  			var except = videodir.Except (manifestdata.videoBitrates);  			if (except.Count () > 0) {  				TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  				Error = true;  			}  			var exceptb = manifestdata.videoBitrates.Except (videodir);  			if (exceptb.Count () > 0) {  				TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  				Error = true;  			}  			// let's check the fragblobs  			foreach (var dir in ListDirectories) {  				if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  					BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  					var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  					while (blobResultSegment.ContinuationToken != null) {  						TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  						blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  						listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  					}  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  					var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  					List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  					if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  					 {  						manifestdatacurrenttrack = manifestdata.videoSegments;  					} else// audio  					 {  						int i = 0;  						manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  						foreach (var audiob in manifestdata.audioBitrates) {  							if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  								manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  								break;  							}  							i++;  						}  						/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  					var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  					var except2 = listblobtimestamps.Except (timestampsinmanifest);  					const int maxSegDisplayed = 20;  					if (except2.Count () > 0) {  						int count = except2.Count ();  						TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  					}  					var except3 = timestampsinmanifest.Except (listblobtimestamps);  					if (except3.Count () > 0) {  						int count = except3.Count ();  						TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  						Error = true;  					}  					if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  					 {  						TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  						Error = true;  					} else if (manifestdatacurrenttrack.Count > 0) {  						index = 0;  						// list timestamps from blob  						ulong timestampinblob;  						foreach (var seg in manifestdatacurrenttrack) {  							timestampinblob = listblobtimestamps [index];  							if (timestampinblob != seg.timestamp && !seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							} else if (timestampinblob != seg.timestamp && seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							}  							index++;  						}  					}  				}  			}  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Error when analyzing the archive."' true);  		TextBoxLogWriteLine (ex);  		codeIssue = true;  	}  	try {  		SourceLocator.Delete ();  		readpolicy.Delete ();  	} catch {  	}  	if (codeIssue) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Code fails."' SourceAsset.Name);  	} else if (Error) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Error(s) detected."' SourceAsset.Name);  	} else {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. No error detected."' SourceAsset.Name);  	}  } else {  	TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  	TextBoxLogWriteLine ("Starting the integrity check for asset '{0}'."' SourceAsset.Name);  	bool Error = false;  	bool codeIssue = false;  	int nbErrorsAudioManifest = 0;  	int nbErrorsVideoManifest = 0;  	// Video segments in manifest  	TextBoxLogWriteLine ("Checking video track segments in manifest...");  	int index = 0;  	foreach (var seg in manifestdata.videoSegments) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsVideoManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsVideoManifest++;  		}  		index++;  	}  	if (nbErrorsVideoManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  	}  	// Audio segments in manifest  	TextBoxLogWriteLine ("Checking audio track segments in manifest...");  	index = 0;  	int a_index = 0;  	foreach (var audiotrack in manifestdata.audioSegments) {  		foreach (var seg in audiotrack) {  			if (seg.timestamp_mismatch) {  				if (nbErrorsAudioManifest < 10) {  					TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  					Error = true;  				}  				nbErrorsAudioManifest++;  			}  			index++;  		}  		if (nbErrorsAudioManifest >= 10) {  			TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  		}  		a_index++;  	}  	TextBoxLogWriteLine ("Checking blobs in storage...");  	// let's get cloudblobcontainer for source  	CloudStorageAccount SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  	var SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  	try {  		// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  		Uri sourceUri = new Uri (SourceLocator.Path);  		CloudBlobContainer SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  		//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  		List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  		var mediablobs = SourceCloudBlobContainer.ListBlobs ();  		if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  		 {  			foreach (var blob in mediablobs) {  				if (blob.GetType () == typeof(CloudBlobDirectory)) {  					CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  					ListDirectories.Add (blobdir);  					TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  				}  			}  			// let's check the presence of all audio_ and video_ directories  			var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  			var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			if (videodir.Count () != manifestdata.videoBitrates.Count) {  				TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  				Error = true;  			}  			if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  				TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  				Error = true;  			}  			var except = videodir.Except (manifestdata.videoBitrates);  			if (except.Count () > 0) {  				TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  				Error = true;  			}  			var exceptb = manifestdata.videoBitrates.Except (videodir);  			if (exceptb.Count () > 0) {  				TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  				Error = true;  			}  			// let's check the fragblobs  			foreach (var dir in ListDirectories) {  				if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  					BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  					var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  					while (blobResultSegment.ContinuationToken != null) {  						TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  						blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  						listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  					}  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  					var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  					List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  					if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  					 {  						manifestdatacurrenttrack = manifestdata.videoSegments;  					} else// audio  					 {  						int i = 0;  						manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  						foreach (var audiob in manifestdata.audioBitrates) {  							if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  								manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  								break;  							}  							i++;  						}  						/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  					var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  					var except2 = listblobtimestamps.Except (timestampsinmanifest);  					const int maxSegDisplayed = 20;  					if (except2.Count () > 0) {  						int count = except2.Count ();  						TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  					}  					var except3 = timestampsinmanifest.Except (listblobtimestamps);  					if (except3.Count () > 0) {  						int count = except3.Count ();  						TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  						Error = true;  					}  					if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  					 {  						TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  						Error = true;  					} else if (manifestdatacurrenttrack.Count > 0) {  						index = 0;  						// list timestamps from blob  						ulong timestampinblob;  						foreach (var seg in manifestdatacurrenttrack) {  							timestampinblob = listblobtimestamps [index];  							if (timestampinblob != seg.timestamp && !seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							} else if (timestampinblob != seg.timestamp && seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							}  							index++;  						}  					}  				}  			}  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Error when analyzing the archive."' true);  		TextBoxLogWriteLine (ex);  		codeIssue = true;  	}  	try {  		SourceLocator.Delete ();  		readpolicy.Delete ();  	} catch {  	}  	if (codeIssue) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Code fails."' SourceAsset.Name);  	} else if (Error) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Error(s) detected."' SourceAsset.Name);  	} else {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. No error detected."' SourceAsset.Name);  	}  } else {  	TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  	TextBoxLogWriteLine ("Starting the integrity check for asset '{0}'."' SourceAsset.Name);  	bool Error = false;  	bool codeIssue = false;  	int nbErrorsAudioManifest = 0;  	int nbErrorsVideoManifest = 0;  	// Video segments in manifest  	TextBoxLogWriteLine ("Checking video track segments in manifest...");  	int index = 0;  	foreach (var seg in manifestdata.videoSegments) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsVideoManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsVideoManifest++;  		}  		index++;  	}  	if (nbErrorsVideoManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  	}  	// Audio segments in manifest  	TextBoxLogWriteLine ("Checking audio track segments in manifest...");  	index = 0;  	int a_index = 0;  	foreach (var audiotrack in manifestdata.audioSegments) {  		foreach (var seg in audiotrack) {  			if (seg.timestamp_mismatch) {  				if (nbErrorsAudioManifest < 10) {  					TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  					Error = true;  				}  				nbErrorsAudioManifest++;  			}  			index++;  		}  		if (nbErrorsAudioManifest >= 10) {  			TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  		}  		a_index++;  	}  	TextBoxLogWriteLine ("Checking blobs in storage...");  	// let's get cloudblobcontainer for source  	CloudStorageAccount SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  	var SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  	try {  		// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  		Uri sourceUri = new Uri (SourceLocator.Path);  		CloudBlobContainer SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  		//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  		List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  		var mediablobs = SourceCloudBlobContainer.ListBlobs ();  		if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  		 {  			foreach (var blob in mediablobs) {  				if (blob.GetType () == typeof(CloudBlobDirectory)) {  					CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  					ListDirectories.Add (blobdir);  					TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  				}  			}  			// let's check the presence of all audio_ and video_ directories  			var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  			var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			if (videodir.Count () != manifestdata.videoBitrates.Count) {  				TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  				Error = true;  			}  			if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  				TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  				Error = true;  			}  			var except = videodir.Except (manifestdata.videoBitrates);  			if (except.Count () > 0) {  				TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  				Error = true;  			}  			var exceptb = manifestdata.videoBitrates.Except (videodir);  			if (exceptb.Count () > 0) {  				TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  				Error = true;  			}  			// let's check the fragblobs  			foreach (var dir in ListDirectories) {  				if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  					BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  					var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  					while (blobResultSegment.ContinuationToken != null) {  						TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  						blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  						listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  					}  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  					var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  					List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  					if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  					 {  						manifestdatacurrenttrack = manifestdata.videoSegments;  					} else// audio  					 {  						int i = 0;  						manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  						foreach (var audiob in manifestdata.audioBitrates) {  							if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  								manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  								break;  							}  							i++;  						}  						/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  					var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  					var except2 = listblobtimestamps.Except (timestampsinmanifest);  					const int maxSegDisplayed = 20;  					if (except2.Count () > 0) {  						int count = except2.Count ();  						TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  					}  					var except3 = timestampsinmanifest.Except (listblobtimestamps);  					if (except3.Count () > 0) {  						int count = except3.Count ();  						TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  						Error = true;  					}  					if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  					 {  						TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  						Error = true;  					} else if (manifestdatacurrenttrack.Count > 0) {  						index = 0;  						// list timestamps from blob  						ulong timestampinblob;  						foreach (var seg in manifestdatacurrenttrack) {  							timestampinblob = listblobtimestamps [index];  							if (timestampinblob != seg.timestamp && !seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							} else if (timestampinblob != seg.timestamp && seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							}  							index++;  						}  					}  				}  			}  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Error when analyzing the archive."' true);  		TextBoxLogWriteLine (ex);  		codeIssue = true;  	}  	try {  		SourceLocator.Delete ();  		readpolicy.Delete ();  	} catch {  	}  	if (codeIssue) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Code fails."' SourceAsset.Name);  	} else if (Error) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Error(s) detected."' SourceAsset.Name);  	} else {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. No error detected."' SourceAsset.Name);  	}  } else {  	TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  	TextBoxLogWriteLine ("Starting the integrity check for asset '{0}'."' SourceAsset.Name);  	bool Error = false;  	bool codeIssue = false;  	int nbErrorsAudioManifest = 0;  	int nbErrorsVideoManifest = 0;  	// Video segments in manifest  	TextBoxLogWriteLine ("Checking video track segments in manifest...");  	int index = 0;  	foreach (var seg in manifestdata.videoSegments) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsVideoManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsVideoManifest++;  		}  		index++;  	}  	if (nbErrorsVideoManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  	}  	// Audio segments in manifest  	TextBoxLogWriteLine ("Checking audio track segments in manifest...");  	index = 0;  	int a_index = 0;  	foreach (var audiotrack in manifestdata.audioSegments) {  		foreach (var seg in audiotrack) {  			if (seg.timestamp_mismatch) {  				if (nbErrorsAudioManifest < 10) {  					TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  					Error = true;  				}  				nbErrorsAudioManifest++;  			}  			index++;  		}  		if (nbErrorsAudioManifest >= 10) {  			TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  		}  		a_index++;  	}  	TextBoxLogWriteLine ("Checking blobs in storage...");  	// let's get cloudblobcontainer for source  	CloudStorageAccount SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  	var SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  	try {  		// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  		Uri sourceUri = new Uri (SourceLocator.Path);  		CloudBlobContainer SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  		//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  		List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  		var mediablobs = SourceCloudBlobContainer.ListBlobs ();  		if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  		 {  			foreach (var blob in mediablobs) {  				if (blob.GetType () == typeof(CloudBlobDirectory)) {  					CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  					ListDirectories.Add (blobdir);  					TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  				}  			}  			// let's check the presence of all audio_ and video_ directories  			var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  			var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			if (videodir.Count () != manifestdata.videoBitrates.Count) {  				TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  				Error = true;  			}  			if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  				TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  				Error = true;  			}  			var except = videodir.Except (manifestdata.videoBitrates);  			if (except.Count () > 0) {  				TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  				Error = true;  			}  			var exceptb = manifestdata.videoBitrates.Except (videodir);  			if (exceptb.Count () > 0) {  				TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  				Error = true;  			}  			// let's check the fragblobs  			foreach (var dir in ListDirectories) {  				if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  					BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  					var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  					while (blobResultSegment.ContinuationToken != null) {  						TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  						blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  						listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  					}  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  					var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  					List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  					if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  					 {  						manifestdatacurrenttrack = manifestdata.videoSegments;  					} else// audio  					 {  						int i = 0;  						manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  						foreach (var audiob in manifestdata.audioBitrates) {  							if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  								manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  								break;  							}  							i++;  						}  						/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  					var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  					var except2 = listblobtimestamps.Except (timestampsinmanifest);  					const int maxSegDisplayed = 20;  					if (except2.Count () > 0) {  						int count = except2.Count ();  						TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  					}  					var except3 = timestampsinmanifest.Except (listblobtimestamps);  					if (except3.Count () > 0) {  						int count = except3.Count ();  						TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  						Error = true;  					}  					if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  					 {  						TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  						Error = true;  					} else if (manifestdatacurrenttrack.Count > 0) {  						index = 0;  						// list timestamps from blob  						ulong timestampinblob;  						foreach (var seg in manifestdatacurrenttrack) {  							timestampinblob = listblobtimestamps [index];  							if (timestampinblob != seg.timestamp && !seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							} else if (timestampinblob != seg.timestamp && seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							}  							index++;  						}  					}  				}  			}  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Error when analyzing the archive."' true);  		TextBoxLogWriteLine (ex);  		codeIssue = true;  	}  	try {  		SourceLocator.Delete ();  		readpolicy.Delete ();  	} catch {  	}  	if (codeIssue) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Code fails."' SourceAsset.Name);  	} else if (Error) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Error(s) detected."' SourceAsset.Name);  	} else {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. No error detected."' SourceAsset.Name);  	}  } else {  	TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  	TextBoxLogWriteLine ("Starting the integrity check for asset '{0}'."' SourceAsset.Name);  	bool Error = false;  	bool codeIssue = false;  	int nbErrorsAudioManifest = 0;  	int nbErrorsVideoManifest = 0;  	// Video segments in manifest  	TextBoxLogWriteLine ("Checking video track segments in manifest...");  	int index = 0;  	foreach (var seg in manifestdata.videoSegments) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsVideoManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsVideoManifest++;  		}  		index++;  	}  	if (nbErrorsVideoManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  	}  	// Audio segments in manifest  	TextBoxLogWriteLine ("Checking audio track segments in manifest...");  	index = 0;  	int a_index = 0;  	foreach (var audiotrack in manifestdata.audioSegments) {  		foreach (var seg in audiotrack) {  			if (seg.timestamp_mismatch) {  				if (nbErrorsAudioManifest < 10) {  					TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  					Error = true;  				}  				nbErrorsAudioManifest++;  			}  			index++;  		}  		if (nbErrorsAudioManifest >= 10) {  			TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  		}  		a_index++;  	}  	TextBoxLogWriteLine ("Checking blobs in storage...");  	// let's get cloudblobcontainer for source  	CloudStorageAccount SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  	var SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  	try {  		// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  		Uri sourceUri = new Uri (SourceLocator.Path);  		CloudBlobContainer SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  		//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  		List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  		var mediablobs = SourceCloudBlobContainer.ListBlobs ();  		if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  		 {  			foreach (var blob in mediablobs) {  				if (blob.GetType () == typeof(CloudBlobDirectory)) {  					CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  					ListDirectories.Add (blobdir);  					TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  				}  			}  			// let's check the presence of all audio_ and video_ directories  			var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  			var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			if (videodir.Count () != manifestdata.videoBitrates.Count) {  				TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  				Error = true;  			}  			if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  				TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  				Error = true;  			}  			var except = videodir.Except (manifestdata.videoBitrates);  			if (except.Count () > 0) {  				TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  				Error = true;  			}  			var exceptb = manifestdata.videoBitrates.Except (videodir);  			if (exceptb.Count () > 0) {  				TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  				Error = true;  			}  			// let's check the fragblobs  			foreach (var dir in ListDirectories) {  				if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  					BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  					var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  					while (blobResultSegment.ContinuationToken != null) {  						TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  						blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  						listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  					}  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  					var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  					List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  					if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  					 {  						manifestdatacurrenttrack = manifestdata.videoSegments;  					} else// audio  					 {  						int i = 0;  						manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  						foreach (var audiob in manifestdata.audioBitrates) {  							if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  								manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  								break;  							}  							i++;  						}  						/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  					var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  					var except2 = listblobtimestamps.Except (timestampsinmanifest);  					const int maxSegDisplayed = 20;  					if (except2.Count () > 0) {  						int count = except2.Count ();  						TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  					}  					var except3 = timestampsinmanifest.Except (listblobtimestamps);  					if (except3.Count () > 0) {  						int count = except3.Count ();  						TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  						Error = true;  					}  					if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  					 {  						TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  						Error = true;  					} else if (manifestdatacurrenttrack.Count > 0) {  						index = 0;  						// list timestamps from blob  						ulong timestampinblob;  						foreach (var seg in manifestdatacurrenttrack) {  							timestampinblob = listblobtimestamps [index];  							if (timestampinblob != seg.timestamp && !seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							} else if (timestampinblob != seg.timestamp && seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							}  							index++;  						}  					}  				}  			}  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Error when analyzing the archive."' true);  		TextBoxLogWriteLine (ex);  		codeIssue = true;  	}  	try {  		SourceLocator.Delete ();  		readpolicy.Delete ();  	} catch {  	}  	if (codeIssue) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Code fails."' SourceAsset.Name);  	} else if (Error) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Error(s) detected."' SourceAsset.Name);  	} else {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. No error detected."' SourceAsset.Name);  	}  } else {  	TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  	TextBoxLogWriteLine ("Starting the integrity check for asset '{0}'."' SourceAsset.Name);  	bool Error = false;  	bool codeIssue = false;  	int nbErrorsAudioManifest = 0;  	int nbErrorsVideoManifest = 0;  	// Video segments in manifest  	TextBoxLogWriteLine ("Checking video track segments in manifest...");  	int index = 0;  	foreach (var seg in manifestdata.videoSegments) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsVideoManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsVideoManifest++;  		}  		index++;  	}  	if (nbErrorsVideoManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  	}  	// Audio segments in manifest  	TextBoxLogWriteLine ("Checking audio track segments in manifest...");  	index = 0;  	int a_index = 0;  	foreach (var audiotrack in manifestdata.audioSegments) {  		foreach (var seg in audiotrack) {  			if (seg.timestamp_mismatch) {  				if (nbErrorsAudioManifest < 10) {  					TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  					Error = true;  				}  				nbErrorsAudioManifest++;  			}  			index++;  		}  		if (nbErrorsAudioManifest >= 10) {  			TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  		}  		a_index++;  	}  	TextBoxLogWriteLine ("Checking blobs in storage...");  	// let's get cloudblobcontainer for source  	CloudStorageAccount SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  	var SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  	try {  		// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  		Uri sourceUri = new Uri (SourceLocator.Path);  		CloudBlobContainer SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  		//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  		List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  		var mediablobs = SourceCloudBlobContainer.ListBlobs ();  		if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  		 {  			foreach (var blob in mediablobs) {  				if (blob.GetType () == typeof(CloudBlobDirectory)) {  					CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  					ListDirectories.Add (blobdir);  					TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  				}  			}  			// let's check the presence of all audio_ and video_ directories  			var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  			var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			if (videodir.Count () != manifestdata.videoBitrates.Count) {  				TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  				Error = true;  			}  			if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  				TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  				Error = true;  			}  			var except = videodir.Except (manifestdata.videoBitrates);  			if (except.Count () > 0) {  				TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  				Error = true;  			}  			var exceptb = manifestdata.videoBitrates.Except (videodir);  			if (exceptb.Count () > 0) {  				TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  				Error = true;  			}  			// let's check the fragblobs  			foreach (var dir in ListDirectories) {  				if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  					BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  					var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  					while (blobResultSegment.ContinuationToken != null) {  						TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  						blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  						listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  					}  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  					var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  					List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  					if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  					 {  						manifestdatacurrenttrack = manifestdata.videoSegments;  					} else// audio  					 {  						int i = 0;  						manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  						foreach (var audiob in manifestdata.audioBitrates) {  							if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  								manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  								break;  							}  							i++;  						}  						/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  					var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  					var except2 = listblobtimestamps.Except (timestampsinmanifest);  					const int maxSegDisplayed = 20;  					if (except2.Count () > 0) {  						int count = except2.Count ();  						TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  					}  					var except3 = timestampsinmanifest.Except (listblobtimestamps);  					if (except3.Count () > 0) {  						int count = except3.Count ();  						TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  						Error = true;  					}  					if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  					 {  						TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  						Error = true;  					} else if (manifestdatacurrenttrack.Count > 0) {  						index = 0;  						// list timestamps from blob  						ulong timestampinblob;  						foreach (var seg in manifestdatacurrenttrack) {  							timestampinblob = listblobtimestamps [index];  							if (timestampinblob != seg.timestamp && !seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							} else if (timestampinblob != seg.timestamp && seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							}  							index++;  						}  					}  				}  			}  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Error when analyzing the archive."' true);  		TextBoxLogWriteLine (ex);  		codeIssue = true;  	}  	try {  		SourceLocator.Delete ();  		readpolicy.Delete ();  	} catch {  	}  	if (codeIssue) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Code fails."' SourceAsset.Name);  	} else if (Error) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Error(s) detected."' SourceAsset.Name);  	} else {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. No error detected."' SourceAsset.Name);  	}  } else {  	TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (storagekeys.ContainsKey (SourceAsset.StorageAccountName)) {  	TextBoxLogWriteLine ("Starting the integrity check for asset '{0}'."' SourceAsset.Name);  	bool Error = false;  	bool codeIssue = false;  	int nbErrorsAudioManifest = 0;  	int nbErrorsVideoManifest = 0;  	// Video segments in manifest  	TextBoxLogWriteLine ("Checking video track segments in manifest...");  	int index = 0;  	foreach (var seg in manifestdata.videoSegments) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsVideoManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsVideoManifest++;  		}  		index++;  	}  	if (nbErrorsVideoManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  	}  	// Audio segments in manifest  	TextBoxLogWriteLine ("Checking audio track segments in manifest...");  	index = 0;  	int a_index = 0;  	foreach (var audiotrack in manifestdata.audioSegments) {  		foreach (var seg in audiotrack) {  			if (seg.timestamp_mismatch) {  				if (nbErrorsAudioManifest < 10) {  					TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  					Error = true;  				}  				nbErrorsAudioManifest++;  			}  			index++;  		}  		if (nbErrorsAudioManifest >= 10) {  			TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  		}  		a_index++;  	}  	TextBoxLogWriteLine ("Checking blobs in storage...");  	// let's get cloudblobcontainer for source  	CloudStorageAccount SourceCloudStorageAccount = new CloudStorageAccount (new StorageCredentials (SourceAsset.StorageAccountName' storagekeys [SourceAsset.StorageAccountName])' _credentials.ReturnStorageSuffix ()' true);  	var SourceCloudBlobClient = SourceCloudStorageAccount.CreateCloudBlobClient ();  	IAccessPolicy readpolicy = _context.AccessPolicies.Create ("readpolicy"' TimeSpan.FromDays (1)' AccessPermissions.Read);  	ILocator SourceLocator = _context.Locators.CreateLocator (LocatorType.Sas' SourceAsset' readpolicy);  	try {  		// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  		Uri sourceUri = new Uri (SourceLocator.Path);  		CloudBlobContainer SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  		//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  		List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  		var mediablobs = SourceCloudBlobContainer.ListBlobs ();  		if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  		 {  			foreach (var blob in mediablobs) {  				if (blob.GetType () == typeof(CloudBlobDirectory)) {  					CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  					ListDirectories.Add (blobdir);  					TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  				}  			}  			// let's check the presence of all audio_ and video_ directories  			var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  			var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  			//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  			if (videodir.Count () != manifestdata.videoBitrates.Count) {  				TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  				Error = true;  			}  			if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  				TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  				Error = true;  			}  			var except = videodir.Except (manifestdata.videoBitrates);  			if (except.Count () > 0) {  				TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  				Error = true;  			}  			var exceptb = manifestdata.videoBitrates.Except (videodir);  			if (exceptb.Count () > 0) {  				TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  				Error = true;  			}  			// let's check the fragblobs  			foreach (var dir in ListDirectories) {  				if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  					BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  					var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  					while (blobResultSegment.ContinuationToken != null) {  						TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  						blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  						listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  					}  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  					var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  					List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  					if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  					 {  						manifestdatacurrenttrack = manifestdata.videoSegments;  					} else// audio  					 {  						int i = 0;  						manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  						foreach (var audiob in manifestdata.audioBitrates) {  							if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  								manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  								break;  							}  							i++;  						}  						/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  					var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  					var except2 = listblobtimestamps.Except (timestampsinmanifest);  					const int maxSegDisplayed = 20;  					if (except2.Count () > 0) {  						int count = except2.Count ();  						TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  					}  					var except3 = timestampsinmanifest.Except (listblobtimestamps);  					if (except3.Count () > 0) {  						int count = except3.Count ();  						TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  						Error = true;  					}  					if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  					 {  						TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  						Error = true;  					} else if (manifestdatacurrenttrack.Count > 0) {  						index = 0;  						// list timestamps from blob  						ulong timestampinblob;  						foreach (var seg in manifestdatacurrenttrack) {  							timestampinblob = listblobtimestamps [index];  							if (timestampinblob != seg.timestamp && !seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							} else if (timestampinblob != seg.timestamp && seg.calculated) {  								TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  								Error = true;  								break;  							}  							index++;  						}  					}  				}  			}  		}  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Error when analyzing the archive."' true);  		TextBoxLogWriteLine (ex);  		codeIssue = true;  	}  	try {  		SourceLocator.Delete ();  		readpolicy.Delete ();  	} catch {  	}  	if (codeIssue) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Code fails."' SourceAsset.Name);  	} else if (Error) {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. Error(s) detected."' SourceAsset.Name);  	} else {  		TextBoxLogWriteLine ("End of integrity check for asset '{0}'. No error detected."' SourceAsset.Name);  	}  } else {  	TextBoxLogWriteLine ("Error storage key not found for asset '{0}'."' SourceAsset.Name' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: foreach (var seg in manifestdata.videoSegments) {  	if (seg.timestamp_mismatch) {  		if (nbErrorsVideoManifest < 10) {  			TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  			Error = true;  		}  		nbErrorsVideoManifest++;  	}  	index++;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (seg.timestamp_mismatch) {  	if (nbErrorsVideoManifest < 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  		Error = true;  	}  	nbErrorsVideoManifest++;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (nbErrorsVideoManifest < 10) {  	TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. Timestamp {0} calculation mismatch in manifest' index {1}"' seg.timestamp' index' true);  	Error = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (nbErrorsVideoManifest >= 10) {  	TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (nbErrorsVideoManifest >= 10) {  	TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: TextBoxLogWriteLine ("Warning: Overlap or gap issue in video track. {0} more errors."' nbErrorsVideoManifest - 10' true);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: foreach (var audiotrack in manifestdata.audioSegments) {  	foreach (var seg in audiotrack) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsAudioManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsAudioManifest++;  		}  		index++;  	}  	if (nbErrorsAudioManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  	}  	a_index++;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: foreach (var audiotrack in manifestdata.audioSegments) {  	foreach (var seg in audiotrack) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsAudioManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsAudioManifest++;  		}  		index++;  	}  	if (nbErrorsAudioManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  	}  	a_index++;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: foreach (var audiotrack in manifestdata.audioSegments) {  	foreach (var seg in audiotrack) {  		if (seg.timestamp_mismatch) {  			if (nbErrorsAudioManifest < 10) {  				TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  				Error = true;  			}  			nbErrorsAudioManifest++;  		}  		index++;  	}  	if (nbErrorsAudioManifest >= 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  	}  	a_index++;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: foreach (var seg in audiotrack) {  	if (seg.timestamp_mismatch) {  		if (nbErrorsAudioManifest < 10) {  			TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  			Error = true;  		}  		nbErrorsAudioManifest++;  	}  	index++;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (seg.timestamp_mismatch) {  	if (nbErrorsAudioManifest < 10) {  		TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  		Error = true;  	}  	nbErrorsAudioManifest++;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (nbErrorsAudioManifest < 10) {  	TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. Timestamp {2} calculation mismatch in manifest' index {3}"' a_index' manifestdata.audioName [a_index]' seg.timestamp' index' true);  	Error = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (nbErrorsAudioManifest >= 10) {  	TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (nbErrorsAudioManifest >= 10) {  	TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: TextBoxLogWriteLine ("Warning: Overlap or gap issue in audio track #{0} '{1}'. {2} more errors."' a_index' manifestdata.audioName [a_index]' nbErrorsAudioManifest - 10' true);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: try {  	// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  	Uri sourceUri = new Uri (SourceLocator.Path);  	CloudBlobContainer SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  	//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  	List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  	var mediablobs = SourceCloudBlobContainer.ListBlobs ();  	if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  	 {  		foreach (var blob in mediablobs) {  			if (blob.GetType () == typeof(CloudBlobDirectory)) {  				CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  				ListDirectories.Add (blobdir);  				TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  			}  		}  		// let's check the presence of all audio_ and video_ directories  		var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  		//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  		// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  		var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  		//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  		if (videodir.Count () != manifestdata.videoBitrates.Count) {  			TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  			Error = true;  		}  		if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  			TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  			Error = true;  		}  		var except = videodir.Except (manifestdata.videoBitrates);  		if (except.Count () > 0) {  			TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  			Error = true;  		}  		var exceptb = manifestdata.videoBitrates.Except (videodir);  		if (exceptb.Count () > 0) {  			TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  			Error = true;  		}  		// let's check the fragblobs  		foreach (var dir in ListDirectories) {  			if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  				TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  				BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  				var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  				while (blobResultSegment.ContinuationToken != null) {  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  					blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  					listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  				}  				TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  				var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  				List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  				if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  				 {  					manifestdatacurrenttrack = manifestdata.videoSegments;  				} else// audio  				 {  					int i = 0;  					manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  					foreach (var audiob in manifestdata.audioBitrates) {  						if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  							manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  							break;  						}  						i++;  					}  					/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  				var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  				var except2 = listblobtimestamps.Except (timestampsinmanifest);  				const int maxSegDisplayed = 20;  				if (except2.Count () > 0) {  					int count = except2.Count ();  					TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  				}  				var except3 = timestampsinmanifest.Except (listblobtimestamps);  				if (except3.Count () > 0) {  					int count = except3.Count ();  					TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  					Error = true;  				}  				if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  				 {  					TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  					Error = true;  				} else if (manifestdatacurrenttrack.Count > 0) {  					index = 0;  					// list timestamps from blob  					ulong timestampinblob;  					foreach (var seg in manifestdatacurrenttrack) {  						timestampinblob = listblobtimestamps [index];  						if (timestampinblob != seg.timestamp && !seg.calculated) {  							TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  							Error = true;  							break;  						} else if (timestampinblob != seg.timestamp && seg.calculated) {  							TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  							Error = true;  							break;  						}  						index++;  					}  				}  			}  		}  	}  } catch (Exception ex) {  	TextBoxLogWriteLine ("Error when analyzing the archive."' true);  	TextBoxLogWriteLine (ex);  	codeIssue = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: try {  	// Get the asset container URI and copy blobs from mediaContainer to assetContainer.  	Uri sourceUri = new Uri (SourceLocator.Path);  	CloudBlobContainer SourceCloudBlobContainer = SourceCloudBlobClient.GetContainerReference (sourceUri.Segments [1]);  	//var assetFilesLiveFolders = SourceAsset.AssetFiles.ToList().Where(af => af.Name.StartsWith("audio_") || af.Name.StartsWith("video_") || af.Name.StartsWith("scte35_"));  	List<CloudBlobDirectory> ListDirectories = new List<CloudBlobDirectory> ();  	var mediablobs = SourceCloudBlobContainer.ListBlobs ();  	if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs  	 {  		foreach (var blob in mediablobs) {  			if (blob.GetType () == typeof(CloudBlobDirectory)) {  				CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  				ListDirectories.Add (blobdir);  				TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  			}  		}  		// let's check the presence of all audio_ and video_ directories  		var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  		//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  		// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  		var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  		//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  		if (videodir.Count () != manifestdata.videoBitrates.Count) {  			TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  			Error = true;  		}  		if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  			TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  			Error = true;  		}  		var except = videodir.Except (manifestdata.videoBitrates);  		if (except.Count () > 0) {  			TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  			Error = true;  		}  		var exceptb = manifestdata.videoBitrates.Except (videodir);  		if (exceptb.Count () > 0) {  			TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  			Error = true;  		}  		// let's check the fragblobs  		foreach (var dir in ListDirectories) {  			if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  				TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  				BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  				var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  				while (blobResultSegment.ContinuationToken != null) {  					TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  					blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  					listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  				}  				TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  				var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  				List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  				if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  				 {  					manifestdatacurrenttrack = manifestdata.videoSegments;  				} else// audio  				 {  					int i = 0;  					manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  					foreach (var audiob in manifestdata.audioBitrates) {  						if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  							manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  							break;  						}  						i++;  					}  					/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  				var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  				var except2 = listblobtimestamps.Except (timestampsinmanifest);  				const int maxSegDisplayed = 20;  				if (except2.Count () > 0) {  					int count = except2.Count ();  					TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  				}  				var except3 = timestampsinmanifest.Except (listblobtimestamps);  				if (except3.Count () > 0) {  					int count = except3.Count ();  					TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  					Error = true;  				}  				if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  				 {  					TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  					Error = true;  				} else if (manifestdatacurrenttrack.Count > 0) {  					index = 0;  					// list timestamps from blob  					ulong timestampinblob;  					foreach (var seg in manifestdatacurrenttrack) {  						timestampinblob = listblobtimestamps [index];  						if (timestampinblob != seg.timestamp && !seg.calculated) {  							TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  							Error = true;  							break;  						} else if (timestampinblob != seg.timestamp && seg.calculated) {  							TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  							Error = true;  							break;  						}  						index++;  					}  				}  			}  		}  	}  } catch (Exception ex) {  	TextBoxLogWriteLine ("Error when analyzing the archive."' true);  	TextBoxLogWriteLine (ex);  	codeIssue = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs   {  	foreach (var blob in mediablobs) {  		if (blob.GetType () == typeof(CloudBlobDirectory)) {  			CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  			ListDirectories.Add (blobdir);  			TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  		}  	}  	// let's check the presence of all audio_ and video_ directories  	var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  	//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  	// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  	var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  	//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  	if (videodir.Count () != manifestdata.videoBitrates.Count) {  		TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  		Error = true;  	}  	if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  		TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  		Error = true;  	}  	var except = videodir.Except (manifestdata.videoBitrates);  	if (except.Count () > 0) {  		TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  		Error = true;  	}  	var exceptb = manifestdata.videoBitrates.Except (videodir);  	if (exceptb.Count () > 0) {  		TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  		Error = true;  	}  	// let's check the fragblobs  	foreach (var dir in ListDirectories) {  		if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  			TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  			BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  			var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  			while (blobResultSegment.ContinuationToken != null) {  				TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  				blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  				listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  			}  			TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  			var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  			List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  			if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  			 {  				manifestdatacurrenttrack = manifestdata.videoSegments;  			} else// audio  			 {  				int i = 0;  				manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  				foreach (var audiob in manifestdata.audioBitrates) {  					if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  						manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  						break;  					}  					i++;  				}  				/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  			var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  			var except2 = listblobtimestamps.Except (timestampsinmanifest);  			const int maxSegDisplayed = 20;  			if (except2.Count () > 0) {  				int count = except2.Count ();  				TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  			}  			var except3 = timestampsinmanifest.Except (listblobtimestamps);  			if (except3.Count () > 0) {  				int count = except3.Count ();  				TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  				Error = true;  			}  			if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  			 {  				TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  				Error = true;  			} else if (manifestdatacurrenttrack.Count > 0) {  				index = 0;  				// list timestamps from blob  				ulong timestampinblob;  				foreach (var seg in manifestdatacurrenttrack) {  					timestampinblob = listblobtimestamps [index];  					if (timestampinblob != seg.timestamp && !seg.calculated) {  						TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  						Error = true;  						break;  					} else if (timestampinblob != seg.timestamp && seg.calculated) {  						TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  						Error = true;  						break;  					}  					index++;  				}  			}  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (mediablobs.ToList ().Any (b => b.GetType () == typeof(CloudBlobDirectory)))// there are fragblobs   {  	foreach (var blob in mediablobs) {  		if (blob.GetType () == typeof(CloudBlobDirectory)) {  			CloudBlobDirectory blobdir = (CloudBlobDirectory)blob;  			ListDirectories.Add (blobdir);  			TextBoxLogWriteLine ("Fragblobs detected (live archive) '{0}'."' blobdir.Prefix);  		}  	}  	// let's check the presence of all audio_ and video_ directories  	var audiodir = ListDirectories.Where (d => manifestdata.audioName.Any (an => d.Prefix.Contains (an)));  	//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  	// var videodir = ListDirectories.Where(d => d.Prefix.StartsWith("video_")).Select(d => int.Parse(d.Prefix.Substring(6' d.Prefix.Length - 7)));  	var videodir = ListDirectories.Where (d => d.Prefix.Contains (manifestdata.videoName)).Select (d => int.Parse (d.Prefix.Substring (manifestdata.videoName.Length + 1' d.Prefix.Length - manifestdata.videoName.Length - 2)));  	//ListDirectories.Where(d => d.Prefix.StartsWith("audio"));  	if (videodir.Count () != manifestdata.videoBitrates.Count) {  		TextBoxLogWriteLine ("Warning: {0} video tracks in the manifest but {1} video directories in storage"' manifestdata.videoBitrates.Count ()' videodir.Count ()' true);  		Error = true;  	}  	if (audiodir.Count () != manifestdata.audioBitrates.GetLength (0)) {  		TextBoxLogWriteLine ("Warning: {0} audio tracks in the manifest but {1} audio directories in storage"' manifestdata.audioBitrates.GetLength (0)' audiodir.Count ()' true);  		Error = true;  	}  	var except = videodir.Except (manifestdata.videoBitrates);  	if (except.Count () > 0) {  		TextBoxLogWriteLine ("Warning: Some video directories in storage are not referenced as bitrate in the manifest. Bitrates : {0}"' string.Join ("'"' except)' true);  		Error = true;  	}  	var exceptb = manifestdata.videoBitrates.Except (videodir);  	if (exceptb.Count () > 0) {  		TextBoxLogWriteLine ("Issue: Some bitrates in manifest cannot be found in storage as video directories. Bitrates : {0}"' string.Join ("'"' exceptb)' true);  		Error = true;  	}  	// let's check the fragblobs  	foreach (var dir in ListDirectories) {  		if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  			TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  			BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  			var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  			while (blobResultSegment.ContinuationToken != null) {  				TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  				blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  				listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  			}  			TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  			var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  			List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  			if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  			 {  				manifestdatacurrenttrack = manifestdata.videoSegments;  			} else// audio  			 {  				int i = 0;  				manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  				foreach (var audiob in manifestdata.audioBitrates) {  					if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  						manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  						break;  					}  					i++;  				}  				/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  			var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  			var except2 = listblobtimestamps.Except (timestampsinmanifest);  			const int maxSegDisplayed = 20;  			if (except2.Count () > 0) {  				int count = except2.Count ();  				TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  			}  			var except3 = timestampsinmanifest.Except (listblobtimestamps);  			if (except3.Count () > 0) {  				int count = except3.Count ();  				TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  				Error = true;  			}  			if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  			 {  				TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  				Error = true;  			} else if (manifestdatacurrenttrack.Count > 0) {  				index = 0;  				// list timestamps from blob  				ulong timestampinblob;  				foreach (var seg in manifestdatacurrenttrack) {  					timestampinblob = listblobtimestamps [index];  					if (timestampinblob != seg.timestamp && !seg.calculated) {  						TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  						Error = true;  						break;  					} else if (timestampinblob != seg.timestamp && seg.calculated) {  						TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  						Error = true;  						break;  					}  					index++;  				}  			}  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: foreach (var dir in ListDirectories) {  	if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  		TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  		BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  		var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  		while (blobResultSegment.ContinuationToken != null) {  			TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  			blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  			listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  		}  		TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  		var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  		List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  		if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  		 {  			manifestdatacurrenttrack = manifestdata.videoSegments;  		} else// audio  		 {  			int i = 0;  			manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  			foreach (var audiob in manifestdata.audioBitrates) {  				if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  					manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  					break;  				}  				i++;  			}  			/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  		var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  		var except2 = listblobtimestamps.Except (timestampsinmanifest);  		const int maxSegDisplayed = 20;  		if (except2.Count () > 0) {  			int count = except2.Count ();  			TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  		}  		var except3 = timestampsinmanifest.Except (listblobtimestamps);  		if (except3.Count () > 0) {  			int count = except3.Count ();  			TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  			Error = true;  		}  		if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  		 {  			TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  			Error = true;  		} else if (manifestdatacurrenttrack.Count > 0) {  			index = 0;  			// list timestamps from blob  			ulong timestampinblob;  			foreach (var seg in manifestdatacurrenttrack) {  				timestampinblob = listblobtimestamps [index];  				if (timestampinblob != seg.timestamp && !seg.calculated) {  					TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  					Error = true;  					break;  				} else if (timestampinblob != seg.timestamp && seg.calculated) {  					TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  					Error = true;  					break;  				}  				index++;  			}  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckListArchiveBlobs,The following statement contains a magic number: if (manifestdata.audioName.Any (an => dir.Prefix.Contains (an)) || dir.Prefix.Contains (manifestdata.videoName)) {  	TextBoxLogWriteLine ("Checking fragblobs in directory '{0}'...."' dir.Prefix);  	BlobResultSegment blobResultSegment = dir.ListBlobsSegmented (null);  	var listblobtimestampsTemp = blobResultSegment.Results.Select (b => b.Uri.LocalPath).ToList ();  	while (blobResultSegment.ContinuationToken != null) {  		TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved...)"' dir.Prefix' listblobtimestampsTemp.Count);  		blobResultSegment = dir.ListBlobsSegmented (blobResultSegment.ContinuationToken);  		listblobtimestampsTemp.AddRange (blobResultSegment.Results.Select (b => b.Uri.LocalPath));  	}  	TextBoxLogWriteLine ("Checking fragblobs in directory '{0}' ({1} segments retrieved)"' dir.Prefix' listblobtimestampsTemp.Count);  	var listblobtimestamps = listblobtimestampsTemp.Where (b => System.IO.Path.GetFileName (b) != "header").Select (b => ulong.Parse (System.IO.Path.GetFileName (b))).OrderBy (t => t).ToList ();  	List<AssetInfo.ManifestSegmentData> manifestdatacurrenttrack;  	if (dir.Prefix.Contains (manifestdata.videoName))//dir.Prefix.StartsWith("video_"))  	 {  		manifestdatacurrenttrack = manifestdata.videoSegments;  	} else// audio  	 {  		int i = 0;  		manifestdatacurrenttrack = manifestdata.audioSegments [0].ToList ();  		foreach (var audiob in manifestdata.audioBitrates) {  			if (dir.Prefix.Equals (manifestdata.audioName [i] + "_" + audiob [0].ToString () + "/")) {  				manifestdatacurrenttrack = manifestdata.audioSegments [i].ToList ();  				break;  			}  			i++;  		}  		/*                                     if (dir.Prefix.Contains("__"))  // let's get the index of audio track if it exists in directory name                                     {                                         var split = dir.Prefix.Split('_');                                         manifestdatacurrenttrack = manifestdata.audioSegments[int.Parse(split[2])].ToList();                                     }                                     else                                     {                                         manifestdatacurrenttrack = manifestdata.audioSegments[0].ToList();                                     }                                     */}  	var timestampsinmanifest = manifestdatacurrenttrack.Select (a => a.timestamp).ToList ();  	var except2 = listblobtimestamps.Except (timestampsinmanifest);  	const int maxSegDisplayed = 20;  	if (except2.Count () > 0) {  		int count = except2.Count ();  		TextBoxLogWriteLine ("Information: {0} segments in directory {1} are not in the manifest. This could occur if live is running. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except2.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  	}  	var except3 = timestampsinmanifest.Except (listblobtimestamps);  	if (except3.Count () > 0) {  		int count = except3.Count ();  		TextBoxLogWriteLine ("Issue: {0} segments in manifest are not in directory '{1}'. Segments with timestamp: {2}"' count' dir.Prefix' string.Join ("'"' except3.Take (maxSegDisplayed)) + ((count > maxSegDisplayed) ? "..." : "")' true);  		Error = true;  	}  	if (listblobtimestamps.Count < manifestdatacurrenttrack.Count)// mising blob in storage (header file)  	 {  		TextBoxLogWriteLine ("Issue: {0} segments in the manifest but only {1} segments in directory '{2}'"' manifestdatacurrenttrack.Count' listblobtimestamps.Count' dir.Prefix' true);  		Error = true;  	} else if (manifestdatacurrenttrack.Count > 0) {  		index = 0;  		// list timestamps from blob  		ulong timestampinblob;  		foreach (var seg in manifestdatacurrenttrack) {  			timestampinblob = listblobtimestamps [index];  			if (timestampinblob != seg.timestamp && !seg.calculated) {  				TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from defined timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  				Error = true;  				break;  			} else if (timestampinblob != seg.timestamp && seg.calculated) {  				TextBoxLogWriteLine ("Issue: Timestamp {0} in blob is different from calculated timestamp {1} in manifest' in directory '{2}'' index {3}"' timestampinblob' seg.timestamp' dir.Prefix' index' true);  				Error = true;  				break;  			}  			index++;  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAllJobs,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to delete ALL the jobs ?"' "Job deletion"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	Task.Run (async () => {  		bool Error = false;  		int skipSize = 0;  		int batchSize = 1000;  		int currentSkipSize = 0;  		// let's build the tasks list  		TextBoxLogWriteLine ("Listing the jobs...");  		List<Task> deleteTasks = new List<Task> ();  		while (true) {  			// Enumerate through all jobs (1000 at a time)  			var listjobs = _context.Jobs.Skip (skipSize).Take (batchSize).ToList ();  			currentSkipSize += listjobs.Count;  			deleteTasks.AddRange (listjobs.Select (a => a.DeleteAsync ()).ToArray ());  			if (currentSkipSize == batchSize) {  				skipSize += batchSize;  				currentSkipSize = 0;  			} else {  				break;  			}  		}  		TextBoxLogWriteLine (string.Format ("Deleting {0} job(s)"' deleteTasks.Count));  		try {  			Task.WaitAll (deleteTasks.ToArray ());  		} catch (Exception ex) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when deleting the job(s)"' true);  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error)  			TextBoxLogWriteLine ("Job(s) deleted.");  		DoRefreshGridJobV (false);  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDeleteAllJobs,The following statement contains a magic number: Task.Run (async () => {  	bool Error = false;  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	// let's build the tasks list  	TextBoxLogWriteLine ("Listing the jobs...");  	List<Task> deleteTasks = new List<Task> ();  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var listjobs = _context.Jobs.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += listjobs.Count;  		deleteTasks.AddRange (listjobs.Select (a => a.DeleteAsync ()).ToArray ());  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	TextBoxLogWriteLine (string.Format ("Deleting {0} job(s)"' deleteTasks.Count));  	try {  		Task.WaitAll (deleteTasks.ToArray ());  	} catch (Exception ex) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when deleting the job(s)"' true);  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error)  		TextBoxLogWriteLine ("Job(s) deleted.");  	DoRefreshGridJobV (false);  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCancelAllJobs,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to cancel ALL the jobs ?"' "Job cancelation"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	Task.Run (async () => {  		bool Error = false;  		int skipSize = 0;  		int batchSize = 1000;  		int currentSkipSize = 0;  		// let's build the tasks list  		TextBoxLogWriteLine ("Listing the jobs...");  		List<Task> cancelTasks = new List<Task> ();  		var ongoingJobs = _context.Jobs;  		//.Where(j => j.State == JobState.Processing || j.State == JobState.Queued || j.State == JobState.Scheduled);  		while (true) {  			// Enumerate through all jobs (1000 at a time)  			var listjobs = ongoingJobs.Skip (skipSize).Take (batchSize).ToList ();  			currentSkipSize += listjobs.Count;  			cancelTasks.AddRange (listjobs.Where (j => j.State == JobState.Processing || j.State == JobState.Queued || j.State == JobState.Scheduled).Select (a => a.CancelAsync ()).ToArray ());  			if (currentSkipSize == batchSize) {  				skipSize += batchSize;  				currentSkipSize = 0;  			} else {  				break;  			}  		}  		TextBoxLogWriteLine (string.Format ("Canceling {0} job(s)"' cancelTasks.Count));  		try {  			Task.WaitAll (cancelTasks.ToArray ());  		} catch (Exception ex) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when canceling the job(s)"' true);  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error)  			TextBoxLogWriteLine ("Job(s) canceled.");  		DoRefreshGridJobV (false);  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCancelAllJobs,The following statement contains a magic number: Task.Run (async () => {  	bool Error = false;  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	// let's build the tasks list  	TextBoxLogWriteLine ("Listing the jobs...");  	List<Task> cancelTasks = new List<Task> ();  	var ongoingJobs = _context.Jobs;  	//.Where(j => j.State == JobState.Processing || j.State == JobState.Queued || j.State == JobState.Scheduled);  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var listjobs = ongoingJobs.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += listjobs.Count;  		cancelTasks.AddRange (listjobs.Where (j => j.State == JobState.Processing || j.State == JobState.Queued || j.State == JobState.Scheduled).Select (a => a.CancelAsync ()).ToArray ());  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	TextBoxLogWriteLine (string.Format ("Canceling {0} job(s)"' cancelTasks.Count));  	try {  		Task.WaitAll (cancelTasks.ToArray ());  	} catch (Exception ex) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when canceling the job(s)"' true);  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error)  		TextBoxLogWriteLine ("Job(s) canceled.");  	DoRefreshGridJobV (false);  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The following statement contains a magic number: if (dialogResult == DialogResult.OK) {  	// multiple jobs: one job for each input asset  	foreach (IAsset asset in SelectedAssets) {  		string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name);  		IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  		foreach (IAsset graphAsset in form.SelectedPremiumWorkflows)// for each workflow selected' we create a task  		 {  			string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvWorkflow' graphAsset.Name);  			ITask task = job.Tasks.AddNew (tasknameloc' processor' form.XMLData' form.JobOptions.TasksOptionsSetting);  			// Specify the graph asset to be encoded' followed by the input video asset to be used  			task.InputAssets.Add (graphAsset);  			task.InputAssets.Add (asset);  			// we add one asset  			string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvWorkflow' graphAsset.Name);  			task.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  		}  		TextBoxLogWriteLine ("Submitting encoding job '{0}'"' jobnameloc);  		// Submit the job and wait until it is completed.   		try {  			job.Submit ();  		} catch (Exception e) {  			// Add useful information to the exception  			if (SelectedAssets.Count < 5) {  				MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			TextBoxLogWriteLine ("There has been a problem when submitting the job {0}."' jobnameloc' true);  			TextBoxLogWriteLine (e);  			return;  		}  		dataGridViewJobsV.DoJobProgress (job);  	}  	DotabControlMainSwitch (AMSExplorer.Properties.Resources.TabJobs);  	DoRefreshGridJobV (false);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The following statement contains a magic number: foreach (IAsset asset in SelectedAssets) {  	string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name);  	IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  	foreach (IAsset graphAsset in form.SelectedPremiumWorkflows)// for each workflow selected' we create a task  	 {  		string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvWorkflow' graphAsset.Name);  		ITask task = job.Tasks.AddNew (tasknameloc' processor' form.XMLData' form.JobOptions.TasksOptionsSetting);  		// Specify the graph asset to be encoded' followed by the input video asset to be used  		task.InputAssets.Add (graphAsset);  		task.InputAssets.Add (asset);  		// we add one asset  		string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvWorkflow' graphAsset.Name);  		task.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  	}  	TextBoxLogWriteLine ("Submitting encoding job '{0}'"' jobnameloc);  	// Submit the job and wait until it is completed.   	try {  		job.Submit ();  	} catch (Exception e) {  		// Add useful information to the exception  		if (SelectedAssets.Count < 5) {  			MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		TextBoxLogWriteLine ("There has been a problem when submitting the job {0}."' jobnameloc' true);  		TextBoxLogWriteLine (e);  		return;  	}  	dataGridViewJobsV.DoJobProgress (job);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The following statement contains a magic number: try {  	job.Submit ();  } catch (Exception e) {  	// Add useful information to the exception  	if (SelectedAssets.Count < 5) {  		MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	TextBoxLogWriteLine ("There has been a problem when submitting the job {0}."' jobnameloc' true);  	TextBoxLogWriteLine (e);  	return;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithPremiumWorkflow,The following statement contains a magic number: if (SelectedAssets.Count < 5) {  	MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,The following statement contains a magic number: foreach (var asset in SelectedAssets) {  	if (asset.AssetFiles.Count () > 1) {  		var pf = asset.AssetFiles.Where (a => a.IsPrimary).FirstOrDefault ();  		if (pf != null && !mediaFileExtensions.Contains (Path.GetExtension (pf.Name).ToUpperInvariant ())) {  			// primary file is not ok to index  			if (SelectedAssets.Count < 5) {  				/*                             var supportedfile = asset.AssetFiles.AsEnumerable().Where(af =>                                                     mediaFileExtensions.Contains(Path.GetExtension(af.Name).ToUpperInvariant()))                                                     .ToList().OrderByDescending(af => af.ContentFileSize);                             if (supportedfile.Count() > 0) // but there is one that can be indexed                             {                                 var proposedfile = supportedfile.FirstOrDefault().Name;                                 if (MessageBox.Show(string.Format("The asset '{0}'\nis a multi file asset and the primary file '{1}'\nis not supported as an input.\n\nConfigure Indexer to index file '{2}' ?"' asset.Name' pf.Name' proposedfile)' "Warning"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes)                                 {                                     IndexAnotherFile.Add(asset.Id' proposedfile);                                 }                             }                             */var supportedfile = asset.AssetFiles.ToList ().Where (f => mediaFileExtensions.Contains (Path.GetExtension (f.Name).ToUpperInvariant ())).ToList ();  				if (supportedfile.Count () > 0)// but there is one that can be indexed  				 {  					var form = new MediaAnalyticsPickVideoFileInAsset (asset' mediaFileExtensions' false);  					if (form.ShowDialog () == DialogResult.OK) {  						IndexAnotherFile.Add (asset.Id' form.SelectedAssetFile.Name);  					}  				} else {  					MultiFileAssetPb++;  					// if too many assets' we do not ask the user but we will warm him  					assetnamepb = asset.Name;  				}  			} else {  				MultiFileAssetPb++;  				// if too many assets' we do not ask the user but we will warm him  				assetnamepb = asset.Name;  			}  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,The following statement contains a magic number: if (asset.AssetFiles.Count () > 1) {  	var pf = asset.AssetFiles.Where (a => a.IsPrimary).FirstOrDefault ();  	if (pf != null && !mediaFileExtensions.Contains (Path.GetExtension (pf.Name).ToUpperInvariant ())) {  		// primary file is not ok to index  		if (SelectedAssets.Count < 5) {  			/*                             var supportedfile = asset.AssetFiles.AsEnumerable().Where(af =>                                                     mediaFileExtensions.Contains(Path.GetExtension(af.Name).ToUpperInvariant()))                                                     .ToList().OrderByDescending(af => af.ContentFileSize);                             if (supportedfile.Count() > 0) // but there is one that can be indexed                             {                                 var proposedfile = supportedfile.FirstOrDefault().Name;                                 if (MessageBox.Show(string.Format("The asset '{0}'\nis a multi file asset and the primary file '{1}'\nis not supported as an input.\n\nConfigure Indexer to index file '{2}' ?"' asset.Name' pf.Name' proposedfile)' "Warning"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes)                                 {                                     IndexAnotherFile.Add(asset.Id' proposedfile);                                 }                             }                             */var supportedfile = asset.AssetFiles.ToList ().Where (f => mediaFileExtensions.Contains (Path.GetExtension (f.Name).ToUpperInvariant ())).ToList ();  			if (supportedfile.Count () > 0)// but there is one that can be indexed  			 {  				var form = new MediaAnalyticsPickVideoFileInAsset (asset' mediaFileExtensions' false);  				if (form.ShowDialog () == DialogResult.OK) {  					IndexAnotherFile.Add (asset.Id' form.SelectedAssetFile.Name);  				}  			} else {  				MultiFileAssetPb++;  				// if too many assets' we do not ask the user but we will warm him  				assetnamepb = asset.Name;  			}  		} else {  			MultiFileAssetPb++;  			// if too many assets' we do not ask the user but we will warm him  			assetnamepb = asset.Name;  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,The following statement contains a magic number: if (pf != null && !mediaFileExtensions.Contains (Path.GetExtension (pf.Name).ToUpperInvariant ())) {  	// primary file is not ok to index  	if (SelectedAssets.Count < 5) {  		/*                             var supportedfile = asset.AssetFiles.AsEnumerable().Where(af =>                                                     mediaFileExtensions.Contains(Path.GetExtension(af.Name).ToUpperInvariant()))                                                     .ToList().OrderByDescending(af => af.ContentFileSize);                             if (supportedfile.Count() > 0) // but there is one that can be indexed                             {                                 var proposedfile = supportedfile.FirstOrDefault().Name;                                 if (MessageBox.Show(string.Format("The asset '{0}'\nis a multi file asset and the primary file '{1}'\nis not supported as an input.\n\nConfigure Indexer to index file '{2}' ?"' asset.Name' pf.Name' proposedfile)' "Warning"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes)                                 {                                     IndexAnotherFile.Add(asset.Id' proposedfile);                                 }                             }                             */var supportedfile = asset.AssetFiles.ToList ().Where (f => mediaFileExtensions.Contains (Path.GetExtension (f.Name).ToUpperInvariant ())).ToList ();  		if (supportedfile.Count () > 0)// but there is one that can be indexed  		 {  			var form = new MediaAnalyticsPickVideoFileInAsset (asset' mediaFileExtensions' false);  			if (form.ShowDialog () == DialogResult.OK) {  				IndexAnotherFile.Add (asset.Id' form.SelectedAssetFile.Name);  			}  		} else {  			MultiFileAssetPb++;  			// if too many assets' we do not ask the user but we will warm him  			assetnamepb = asset.Name;  		}  	} else {  		MultiFileAssetPb++;  		// if too many assets' we do not ask the user but we will warm him  		assetnamepb = asset.Name;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,CheckSingleFileIndexerV1SupportedExtensions,The following statement contains a magic number: if (SelectedAssets.Count < 5) {  	/*                             var supportedfile = asset.AssetFiles.AsEnumerable().Where(af =>                                                     mediaFileExtensions.Contains(Path.GetExtension(af.Name).ToUpperInvariant()))                                                     .ToList().OrderByDescending(af => af.ContentFileSize);                             if (supportedfile.Count() > 0) // but there is one that can be indexed                             {                                 var proposedfile = supportedfile.FirstOrDefault().Name;                                 if (MessageBox.Show(string.Format("The asset '{0}'\nis a multi file asset and the primary file '{1}'\nis not supported as an input.\n\nConfigure Indexer to index file '{2}' ?"' asset.Name' pf.Name' proposedfile)' "Warning"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes)                                 {                                     IndexAnotherFile.Add(asset.Id' proposedfile);                                 }                             }                             */var supportedfile = asset.AssetFiles.ToList ().Where (f => mediaFileExtensions.Contains (Path.GetExtension (f.Name).ToUpperInvariant ())).ToList ();  	if (supportedfile.Count () > 0)// but there is one that can be indexed  	 {  		var form = new MediaAnalyticsPickVideoFileInAsset (asset' mediaFileExtensions' false);  		if (form.ShowDialog () == DialogResult.OK) {  			IndexAnotherFile.Add (asset.Id' form.SelectedAssetFile.Name);  		}  	} else {  		MultiFileAssetPb++;  		// if too many assets' we do not ask the user but we will warm him  		assetnamepb = asset.Name;  	}  } else {  	MultiFileAssetPb++;  	// if too many assets' we do not ask the user but we will warm him  	assetnamepb = asset.Name;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: btna.Size = new Size (18' textBoxAssetSearch.ClientSize.Height + 2);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: btna.Size = new Size (18' textBoxAssetSearch.ClientSize.Height + 2);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: SendMessage (textBoxAssetSearch.Handle' 0xd3' (IntPtr)2' (IntPtr)(btna.Width << 16));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: SendMessage (textBoxAssetSearch.Handle' 0xd3' (IntPtr)2' (IntPtr)(btna.Width << 16));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: btnj.Size = new Size (18' textBoxJobSearch.ClientSize.Height + 2);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: btnj.Size = new Size (18' textBoxJobSearch.ClientSize.Height + 2);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: SendMessage (textBoxJobSearch.Handle' 0xd3' (IntPtr)2' (IntPtr)(btnj.Width << 16));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: SendMessage (textBoxJobSearch.Handle' 0xd3' (IntPtr)2' (IntPtr)(btnj.Width << 16));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: btnc.Size = new Size (18' textBoxSearchNameChannel.ClientSize.Height + 2);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: btnc.Size = new Size (18' textBoxSearchNameChannel.ClientSize.Height + 2);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: SendMessage (textBoxSearchNameChannel.Handle' 0xd3' (IntPtr)2' (IntPtr)(btnc.Width << 16));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: SendMessage (textBoxSearchNameChannel.Handle' 0xd3' (IntPtr)2' (IntPtr)(btnc.Width << 16));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: btnp.Size = new Size (18' textBoxSearchNameProgram.ClientSize.Height + 2);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: btnp.Size = new Size (18' textBoxSearchNameProgram.ClientSize.Height + 2);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: SendMessage (textBoxSearchNameProgram.Handle' 0xd3' (IntPtr)2' (IntPtr)(btnp.Width << 16));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,AddButtonsToSearchTextBox,The following statement contains a magic number: SendMessage (textBoxSearchNameProgram.Handle' 0xd3' (IntPtr)2' (IntPtr)(btnp.Width << 16));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The following statement contains a magic number: if (form.ShowDialog () == System.Windows.Forms.DialogResult.OK) {  	var gentasks = form.GetGenericTasks;  	IAsset OutputAsset = null;  	if (form.EncodingCreationMode == TaskJobCreationMode.OneJobPerInputAsset || form.EncodingCreationMode == TaskJobCreationMode.OneJobPerVisibleAsset)// a job for each input asset  	 {  		if (form.EncodingCreationMode == TaskJobCreationMode.OneJobPerVisibleAsset) {  			SelectedAssets = dataGridViewAssetsV.assets.ToList ();  		}  		foreach (IAsset asset in SelectedAssets) {  			string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvProcessorname' gentasks.Count > 1 ? "multi processors" : gentasks.FirstOrDefault ().Processor.Name);  			;  			IJob job = _context.Jobs.Create (jobnameloc' form.JobPriority);  			foreach (var usertask in gentasks)// let's create all tasks and output assets  			 {  				string assetname = string.Empty;  				switch (usertask.InputAssetType) {  				case TypeInputAssetGeneric.InputJobAssets:  					assetname = asset.Name;  					break;  				case TypeInputAssetGeneric.SpecificAssetID:  					assetname = AssetInfo.GetAsset (usertask.InputAsset' _context).Name;  					break;  				case TypeInputAssetGeneric.TaskOutputAsset:  					assetname = "output of task#" + usertask.InputAsset;  					break;  				}  				string tasknameloc = taskname.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name);  				ITask task = job.Tasks.AddNew (tasknameloc' usertask.Processor' usertask.ProcessorConfiguration' usertask.TaskOptions.TasksOptionsSetting// form.JobOptions.TasksOptionsSetting  				);  				task.Priority = usertask.TaskOptions.Priority;  				if (form.SingleOutputAsset && OutputAsset != null) {  					task.OutputAssets.Add (OutputAsset);  				} else {  					string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name);  					OutputAsset = task.OutputAssets.AddNew (outputassetnameloc' usertask.TaskOptions.StorageSelected' usertask.TaskOptions.OutputAssetsCreationOptions' usertask.TaskOptions.OutputAssetsFormatOption);  				}  			}  			// let(s branch the input assets  			foreach (var usertask in gentasks) {  				switch (usertask.InputAssetType) {  				case TypeInputAssetGeneric.InputJobAssets:  					job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (asset);  					break;  				case TypeInputAssetGeneric.SpecificAssetID:  					job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (AssetInfo.GetAsset (usertask.InputAsset' _context));  					break;  				case TypeInputAssetGeneric.TaskOutputAsset:  					var oasset = job.Tasks [Convert.ToInt16 (usertask.InputAsset)].OutputAssets;  					job.Tasks [gentasks.IndexOf (usertask)].InputAssets.AddRange (oasset);  					break;  				}  			}  			TextBoxLogWriteLine ("Submitting encoding job '{0}'"' jobnameloc);  			// Submit the job and wait until it is completed.   			try {  				job.Submit ();  			} catch (Exception e) {  				// Add useful information to the exception  				if (SelectedAssets.Count < 5) {  					MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  				}  				TextBoxLogWriteLine ("There has been a problem when submitting the job {0}."' jobnameloc' true);  				TextBoxLogWriteLine (e);  				return;  			}  			dataGridViewJobsV.DoJobProgress (job);  		}  	} else if (form.EncodingCreationMode == TaskJobCreationMode.SingleJobForAllInputAssets)// Create one job for all input  	 {  		string inputasssetname = SelectedAssets.Count == 1 ? SelectedAssets.FirstOrDefault ().Name : "multiple assets";  		string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' inputasssetname).Replace (Constants.NameconvProcessorname' gentasks.Count > 1 ? "multi processors" : gentasks.FirstOrDefault ().Processor.Name);  		;  		IJob job = _context.Jobs.Create (jobnameloc' form.JobPriority);  		foreach (var usertask in gentasks)// let's create all tasks and output assets  		 {  			string assetname = string.Empty;  			switch (usertask.InputAssetType) {  			case TypeInputAssetGeneric.InputJobAssets:  				assetname = inputasssetname;  				break;  			case TypeInputAssetGeneric.SpecificAssetID:  				assetname = AssetInfo.GetAsset (usertask.InputAsset' _context).Name;  				break;  			case TypeInputAssetGeneric.TaskOutputAsset:  				assetname = "output of task#" + usertask.InputAsset;  				break;  			}  			string tasknameloc = taskname.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name);  			ITask task = job.Tasks.AddNew (tasknameloc' usertask.Processor' usertask.ProcessorConfiguration' usertask.TaskOptions.TasksOptionsSetting);  			task.Priority = usertask.TaskOptions.Priority;  			if (form.SingleOutputAsset && OutputAsset != null) {  				task.OutputAssets.Add (OutputAsset);  			} else {  				string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name);  				OutputAsset = task.OutputAssets.AddNew (outputassetnameloc' usertask.TaskOptions.StorageSelected' usertask.TaskOptions.OutputAssetsCreationOptions' usertask.TaskOptions.OutputAssetsFormatOption);  			}  		}  		// let(s branch the input assets  		foreach (var usertask in gentasks) {  			switch (usertask.InputAssetType) {  			case TypeInputAssetGeneric.InputJobAssets:  				job.Tasks [gentasks.IndexOf (usertask)].InputAssets.AddRange (SelectedAssets);  				break;  			case TypeInputAssetGeneric.SpecificAssetID:  				job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (AssetInfo.GetAsset (usertask.InputAsset' _context));  				break;  			case TypeInputAssetGeneric.TaskOutputAsset:  				var oasset = job.Tasks [Convert.ToInt16 (usertask.InputAsset) - 1].OutputAssets;  				job.Tasks [gentasks.IndexOf (usertask)].InputAssets.AddRange (oasset);  				break;  			}  		}  		TextBoxLogWriteLine ("Submitting encoding job '{0}'"' jobnameloc);  		// Submit the job and wait until it is completed.   		try {  			job.Submit ();  		} catch (Exception e) {  			// Add useful information to the exception  			MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			TextBoxLogWriteLine ("There has been a problem when submitting the job {0}."' jobnameloc' true);  			TextBoxLogWriteLine (e);  			return;  		}  		dataGridViewJobsV.DoJobProgress (job);  	}  	DotabControlMainSwitch (AMSExplorer.Properties.Resources.TabJobs);  	DoRefreshGridJobV (false);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The following statement contains a magic number: if (form.EncodingCreationMode == TaskJobCreationMode.OneJobPerInputAsset || form.EncodingCreationMode == TaskJobCreationMode.OneJobPerVisibleAsset)// a job for each input asset   {  	if (form.EncodingCreationMode == TaskJobCreationMode.OneJobPerVisibleAsset) {  		SelectedAssets = dataGridViewAssetsV.assets.ToList ();  	}  	foreach (IAsset asset in SelectedAssets) {  		string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvProcessorname' gentasks.Count > 1 ? "multi processors" : gentasks.FirstOrDefault ().Processor.Name);  		;  		IJob job = _context.Jobs.Create (jobnameloc' form.JobPriority);  		foreach (var usertask in gentasks)// let's create all tasks and output assets  		 {  			string assetname = string.Empty;  			switch (usertask.InputAssetType) {  			case TypeInputAssetGeneric.InputJobAssets:  				assetname = asset.Name;  				break;  			case TypeInputAssetGeneric.SpecificAssetID:  				assetname = AssetInfo.GetAsset (usertask.InputAsset' _context).Name;  				break;  			case TypeInputAssetGeneric.TaskOutputAsset:  				assetname = "output of task#" + usertask.InputAsset;  				break;  			}  			string tasknameloc = taskname.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name);  			ITask task = job.Tasks.AddNew (tasknameloc' usertask.Processor' usertask.ProcessorConfiguration' usertask.TaskOptions.TasksOptionsSetting// form.JobOptions.TasksOptionsSetting  			);  			task.Priority = usertask.TaskOptions.Priority;  			if (form.SingleOutputAsset && OutputAsset != null) {  				task.OutputAssets.Add (OutputAsset);  			} else {  				string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name);  				OutputAsset = task.OutputAssets.AddNew (outputassetnameloc' usertask.TaskOptions.StorageSelected' usertask.TaskOptions.OutputAssetsCreationOptions' usertask.TaskOptions.OutputAssetsFormatOption);  			}  		}  		// let(s branch the input assets  		foreach (var usertask in gentasks) {  			switch (usertask.InputAssetType) {  			case TypeInputAssetGeneric.InputJobAssets:  				job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (asset);  				break;  			case TypeInputAssetGeneric.SpecificAssetID:  				job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (AssetInfo.GetAsset (usertask.InputAsset' _context));  				break;  			case TypeInputAssetGeneric.TaskOutputAsset:  				var oasset = job.Tasks [Convert.ToInt16 (usertask.InputAsset)].OutputAssets;  				job.Tasks [gentasks.IndexOf (usertask)].InputAssets.AddRange (oasset);  				break;  			}  		}  		TextBoxLogWriteLine ("Submitting encoding job '{0}'"' jobnameloc);  		// Submit the job and wait until it is completed.   		try {  			job.Submit ();  		} catch (Exception e) {  			// Add useful information to the exception  			if (SelectedAssets.Count < 5) {  				MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			TextBoxLogWriteLine ("There has been a problem when submitting the job {0}."' jobnameloc' true);  			TextBoxLogWriteLine (e);  			return;  		}  		dataGridViewJobsV.DoJobProgress (job);  	}  } else if (form.EncodingCreationMode == TaskJobCreationMode.SingleJobForAllInputAssets)// Create one job for all input   {  	string inputasssetname = SelectedAssets.Count == 1 ? SelectedAssets.FirstOrDefault ().Name : "multiple assets";  	string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' inputasssetname).Replace (Constants.NameconvProcessorname' gentasks.Count > 1 ? "multi processors" : gentasks.FirstOrDefault ().Processor.Name);  	;  	IJob job = _context.Jobs.Create (jobnameloc' form.JobPriority);  	foreach (var usertask in gentasks)// let's create all tasks and output assets  	 {  		string assetname = string.Empty;  		switch (usertask.InputAssetType) {  		case TypeInputAssetGeneric.InputJobAssets:  			assetname = inputasssetname;  			break;  		case TypeInputAssetGeneric.SpecificAssetID:  			assetname = AssetInfo.GetAsset (usertask.InputAsset' _context).Name;  			break;  		case TypeInputAssetGeneric.TaskOutputAsset:  			assetname = "output of task#" + usertask.InputAsset;  			break;  		}  		string tasknameloc = taskname.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name);  		ITask task = job.Tasks.AddNew (tasknameloc' usertask.Processor' usertask.ProcessorConfiguration' usertask.TaskOptions.TasksOptionsSetting);  		task.Priority = usertask.TaskOptions.Priority;  		if (form.SingleOutputAsset && OutputAsset != null) {  			task.OutputAssets.Add (OutputAsset);  		} else {  			string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name);  			OutputAsset = task.OutputAssets.AddNew (outputassetnameloc' usertask.TaskOptions.StorageSelected' usertask.TaskOptions.OutputAssetsCreationOptions' usertask.TaskOptions.OutputAssetsFormatOption);  		}  	}  	// let(s branch the input assets  	foreach (var usertask in gentasks) {  		switch (usertask.InputAssetType) {  		case TypeInputAssetGeneric.InputJobAssets:  			job.Tasks [gentasks.IndexOf (usertask)].InputAssets.AddRange (SelectedAssets);  			break;  		case TypeInputAssetGeneric.SpecificAssetID:  			job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (AssetInfo.GetAsset (usertask.InputAsset' _context));  			break;  		case TypeInputAssetGeneric.TaskOutputAsset:  			var oasset = job.Tasks [Convert.ToInt16 (usertask.InputAsset) - 1].OutputAssets;  			job.Tasks [gentasks.IndexOf (usertask)].InputAssets.AddRange (oasset);  			break;  		}  	}  	TextBoxLogWriteLine ("Submitting encoding job '{0}'"' jobnameloc);  	// Submit the job and wait until it is completed.   	try {  		job.Submit ();  	} catch (Exception e) {  		// Add useful information to the exception  		MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		TextBoxLogWriteLine ("There has been a problem when submitting the job {0}."' jobnameloc' true);  		TextBoxLogWriteLine (e);  		return;  	}  	dataGridViewJobsV.DoJobProgress (job);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The following statement contains a magic number: foreach (IAsset asset in SelectedAssets) {  	string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvProcessorname' gentasks.Count > 1 ? "multi processors" : gentasks.FirstOrDefault ().Processor.Name);  	;  	IJob job = _context.Jobs.Create (jobnameloc' form.JobPriority);  	foreach (var usertask in gentasks)// let's create all tasks and output assets  	 {  		string assetname = string.Empty;  		switch (usertask.InputAssetType) {  		case TypeInputAssetGeneric.InputJobAssets:  			assetname = asset.Name;  			break;  		case TypeInputAssetGeneric.SpecificAssetID:  			assetname = AssetInfo.GetAsset (usertask.InputAsset' _context).Name;  			break;  		case TypeInputAssetGeneric.TaskOutputAsset:  			assetname = "output of task#" + usertask.InputAsset;  			break;  		}  		string tasknameloc = taskname.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name);  		ITask task = job.Tasks.AddNew (tasknameloc' usertask.Processor' usertask.ProcessorConfiguration' usertask.TaskOptions.TasksOptionsSetting// form.JobOptions.TasksOptionsSetting  		);  		task.Priority = usertask.TaskOptions.Priority;  		if (form.SingleOutputAsset && OutputAsset != null) {  			task.OutputAssets.Add (OutputAsset);  		} else {  			string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' assetname).Replace (Constants.NameconvProcessorname' usertask.Processor.Name);  			OutputAsset = task.OutputAssets.AddNew (outputassetnameloc' usertask.TaskOptions.StorageSelected' usertask.TaskOptions.OutputAssetsCreationOptions' usertask.TaskOptions.OutputAssetsFormatOption);  		}  	}  	// let(s branch the input assets  	foreach (var usertask in gentasks) {  		switch (usertask.InputAssetType) {  		case TypeInputAssetGeneric.InputJobAssets:  			job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (asset);  			break;  		case TypeInputAssetGeneric.SpecificAssetID:  			job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (AssetInfo.GetAsset (usertask.InputAsset' _context));  			break;  		case TypeInputAssetGeneric.TaskOutputAsset:  			var oasset = job.Tasks [Convert.ToInt16 (usertask.InputAsset)].OutputAssets;  			job.Tasks [gentasks.IndexOf (usertask)].InputAssets.AddRange (oasset);  			break;  		}  	}  	TextBoxLogWriteLine ("Submitting encoding job '{0}'"' jobnameloc);  	// Submit the job and wait until it is completed.   	try {  		job.Submit ();  	} catch (Exception e) {  		// Add useful information to the exception  		if (SelectedAssets.Count < 5) {  			MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		TextBoxLogWriteLine ("There has been a problem when submitting the job {0}."' jobnameloc' true);  		TextBoxLogWriteLine (e);  		return;  	}  	dataGridViewJobsV.DoJobProgress (job);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The following statement contains a magic number: try {  	job.Submit ();  } catch (Exception e) {  	// Add useful information to the exception  	if (SelectedAssets.Count < 5) {  		MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	TextBoxLogWriteLine ("There has been a problem when submitting the job {0}."' jobnameloc' true);  	TextBoxLogWriteLine (e);  	return;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The following statement contains a magic number: if (SelectedAssets.Count < 5) {  	MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateTestsAssets,The following statement contains a magic number: Task.Run (async () => {  	int i = 168744;  	int c = 0;  	while (i < 200001) {  		// String.Format("{0:00000}"' 15);          // "00015"  		_context.Assets.CreateAsync ("Asset-" + string.Format ("{0:000000}"' i)' AssetCreationOptions.None' CancellationToken.None);  		i++;  		c++;  		if (c == 100) {  			Debug.WriteLine (i);  			c = 0;  		}  	}  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateTestsAssets,The following statement contains a magic number: Task.Run (async () => {  	int i = 168744;  	int c = 0;  	while (i < 200001) {  		// String.Format("{0:00000}"' 15);          // "00015"  		_context.Assets.CreateAsync ("Asset-" + string.Format ("{0:000000}"' i)' AssetCreationOptions.None' CancellationToken.None);  		i++;  		c++;  		if (c == 100) {  			Debug.WriteLine (i);  			c = 0;  		}  	}  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateTestsAssets,The following statement contains a magic number: Task.Run (async () => {  	int i = 168744;  	int c = 0;  	while (i < 200001) {  		// String.Format("{0:00000}"' 15);          // "00015"  		_context.Assets.CreateAsync ("Asset-" + string.Format ("{0:000000}"' i)' AssetCreationOptions.None' CancellationToken.None);  		i++;  		c++;  		if (c == 100) {  			Debug.WriteLine (i);  			c = 0;  		}  	}  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateTestsAssets,The following statement contains a magic number: while (i < 200001) {  	// String.Format("{0:00000}"' 15);          // "00015"  	_context.Assets.CreateAsync ("Asset-" + string.Format ("{0:000000}"' i)' AssetCreationOptions.None' CancellationToken.None);  	i++;  	c++;  	if (c == 100) {  		Debug.WriteLine (i);  		c = 0;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateTestsAssets,The following statement contains a magic number: while (i < 200001) {  	// String.Format("{0:00000}"' 15);          // "00015"  	_context.Assets.CreateAsync ("Asset-" + string.Format ("{0:000000}"' i)' AssetCreationOptions.None' CancellationToken.None);  	i++;  	c++;  	if (c == 100) {  		Debug.WriteLine (i);  		c = 0;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateTestsAssets,The following statement contains a magic number: if (c == 100) {  	Debug.WriteLine (i);  	c = 0;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,WaitForCreatingProcessToCloseFileThenDoStuff,The following statement contains a magic number: Thread.Sleep (111);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,WaitForCreatingProcessToCloseFileThenDoStuff,The following statement contains a magic number: for (int tries = 0; ; ++tries) {  	try {  		// Do Stuff  		Debug.WriteLine (path);  		using (var fileStream = new FileStream (path' FileMode.Open' FileAccess.ReadWrite' FileShare.None)) {  			var response = DoGridTransferAddItem (string.Format ("Watch folder: upload of file '{0}'"' Path.GetFileName (path))' TransferType.UploadFromFile' true);  			// Start a worker thread that does uploading.  			var myTask = Task.Factory.StartNew (() => ProcessUploadFileAndMore (new List<string> () {  				path  			}' response.Id' Properties.Settings.Default.useStorageEncryption ? AssetCreationOptions.StorageEncrypted : AssetCreationOptions.None' response.token' MyWatchFolderSettings)' response.token);  		}  		break;  	} catch (FileNotFoundException) {  		// Sometimes the file appears before it is there.  		if (DateTime.Now - started > notFoundLimit) {  			// Should be there by now  			break;  		}  	} catch (IOException ex) {  		// mask in severity' customer' and code  		var hr = (Int64)(ex.HResult & 0xA000FFFF);  		if (hr != 0x80000020 && hr != 0x80000021) {  			// not a share violation or a lock violation  			TextBoxLogWriteLine ("Error: Could not read file from disk. Original error : "' true);  			TextBoxLogWriteLine (ex);  			break;  		}  	}  	try {  		var fi = new FileInfo (path);  		if (fi.Length > lastLength) {  			lastLength = fi.Length;  			lastLengthChange = DateTime.Now;  		}  	} catch {  	}  	// still locked  	if (DateTime.Now - lastLengthChange > noGrowthLimit) {  		// 5 minutes' still locked' no growth.  		TextBoxLogWriteLine ("Error: file locked' no growth..."' true);  		break;  	}  	Thread.Sleep (500);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,WaitForCreatingProcessToCloseFileThenDoStuff,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ApplySettingsOptions,The following statement contains a magic number: TimerAutoRefresh.Interval = Properties.Settings.Default.AutoRefreshTime * 1000;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: if (firstime) {  	// Processors tab  	dataGridViewProcessors.ColumnCount = 5;  	dataGridViewProcessors.Columns [0].HeaderText = "Vendor";  	dataGridViewProcessors.Columns [0].Width = 82;  	dataGridViewProcessors.Columns [1].HeaderText = "Name";  	dataGridViewProcessors.Columns [1].Width = 222;  	dataGridViewProcessors.Columns [2].HeaderText = "Version";  	dataGridViewProcessors.Columns [2].Width = 65;  	dataGridViewProcessors.Columns [3].HeaderText = "Id";  	dataGridViewProcessors.Columns [3].Width = 230;  	dataGridViewProcessors.Columns [4].HeaderText = "Description";  	dataGridViewProcessors.Columns [4].Width = 390;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.ColumnCount = 5;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [0].Width = 82;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [1].Width = 222;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [2].HeaderText = "Version";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [2].Width = 65;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [2].Width = 65;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [3].HeaderText = "Id";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [3].Width = 230;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [3].Width = 230;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [4].HeaderText = "Description";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [4].Width = 390;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridProcessorV,The following statement contains a magic number: dataGridViewProcessors.Columns [4].Width = 390;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewStorage.ColumnCount = 3;  	DataGridViewProgressBarColumn col = new DataGridViewProgressBarColumn () {  		Name = "% used"'  		DataPropertyName = "% used"'  		HeaderText = "% used"  	};  	dataGridViewStorage.Columns.Add (col);  	dataGridViewStorage.Columns [0].HeaderText = "Name";  	dataGridViewStorage.Columns [0].Width = 280;  	dataGridViewStorage.Columns [1].HeaderText = "Used space";  	dataGridViewStorage.Columns [1].Width = 100;  	dataGridViewStorage.Columns [2].Name = "StrictName";  	dataGridViewStorage.Columns [2].Visible = false;  	dataGridViewStorage.Columns [3].Width = 600;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewStorage.ColumnCount = 3;  	DataGridViewProgressBarColumn col = new DataGridViewProgressBarColumn () {  		Name = "% used"'  		DataPropertyName = "% used"'  		HeaderText = "% used"  	};  	dataGridViewStorage.Columns.Add (col);  	dataGridViewStorage.Columns [0].HeaderText = "Name";  	dataGridViewStorage.Columns [0].Width = 280;  	dataGridViewStorage.Columns [1].HeaderText = "Used space";  	dataGridViewStorage.Columns [1].Width = 100;  	dataGridViewStorage.Columns [2].Name = "StrictName";  	dataGridViewStorage.Columns [2].Visible = false;  	dataGridViewStorage.Columns [3].Width = 600;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewStorage.ColumnCount = 3;  	DataGridViewProgressBarColumn col = new DataGridViewProgressBarColumn () {  		Name = "% used"'  		DataPropertyName = "% used"'  		HeaderText = "% used"  	};  	dataGridViewStorage.Columns.Add (col);  	dataGridViewStorage.Columns [0].HeaderText = "Name";  	dataGridViewStorage.Columns [0].Width = 280;  	dataGridViewStorage.Columns [1].HeaderText = "Used space";  	dataGridViewStorage.Columns [1].Width = 100;  	dataGridViewStorage.Columns [2].Name = "StrictName";  	dataGridViewStorage.Columns [2].Visible = false;  	dataGridViewStorage.Columns [3].Width = 600;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewStorage.ColumnCount = 3;  	DataGridViewProgressBarColumn col = new DataGridViewProgressBarColumn () {  		Name = "% used"'  		DataPropertyName = "% used"'  		HeaderText = "% used"  	};  	dataGridViewStorage.Columns.Add (col);  	dataGridViewStorage.Columns [0].HeaderText = "Name";  	dataGridViewStorage.Columns [0].Width = 280;  	dataGridViewStorage.Columns [1].HeaderText = "Used space";  	dataGridViewStorage.Columns [1].Width = 100;  	dataGridViewStorage.Columns [2].Name = "StrictName";  	dataGridViewStorage.Columns [2].Visible = false;  	dataGridViewStorage.Columns [3].Width = 600;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewStorage.ColumnCount = 3;  	DataGridViewProgressBarColumn col = new DataGridViewProgressBarColumn () {  		Name = "% used"'  		DataPropertyName = "% used"'  		HeaderText = "% used"  	};  	dataGridViewStorage.Columns.Add (col);  	dataGridViewStorage.Columns [0].HeaderText = "Name";  	dataGridViewStorage.Columns [0].Width = 280;  	dataGridViewStorage.Columns [1].HeaderText = "Used space";  	dataGridViewStorage.Columns [1].Width = 100;  	dataGridViewStorage.Columns [2].Name = "StrictName";  	dataGridViewStorage.Columns [2].Visible = false;  	dataGridViewStorage.Columns [3].Width = 600;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewStorage.ColumnCount = 3;  	DataGridViewProgressBarColumn col = new DataGridViewProgressBarColumn () {  		Name = "% used"'  		DataPropertyName = "% used"'  		HeaderText = "% used"  	};  	dataGridViewStorage.Columns.Add (col);  	dataGridViewStorage.Columns [0].HeaderText = "Name";  	dataGridViewStorage.Columns [0].Width = 280;  	dataGridViewStorage.Columns [1].HeaderText = "Used space";  	dataGridViewStorage.Columns [1].Width = 100;  	dataGridViewStorage.Columns [2].Name = "StrictName";  	dataGridViewStorage.Columns [2].Visible = false;  	dataGridViewStorage.Columns [3].Width = 600;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewStorage.ColumnCount = 3;  	DataGridViewProgressBarColumn col = new DataGridViewProgressBarColumn () {  		Name = "% used"'  		DataPropertyName = "% used"'  		HeaderText = "% used"  	};  	dataGridViewStorage.Columns.Add (col);  	dataGridViewStorage.Columns [0].HeaderText = "Name";  	dataGridViewStorage.Columns [0].Width = 280;  	dataGridViewStorage.Columns [1].HeaderText = "Used space";  	dataGridViewStorage.Columns [1].Width = 100;  	dataGridViewStorage.Columns [2].Name = "StrictName";  	dataGridViewStorage.Columns [2].Visible = false;  	dataGridViewStorage.Columns [3].Width = 600;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: dataGridViewStorage.ColumnCount = 3;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: dataGridViewStorage.Columns [0].Width = 280;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: dataGridViewStorage.Columns [1].Width = 100;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: dataGridViewStorage.Columns [2].Name = "StrictName";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: dataGridViewStorage.Columns [2].Visible = false;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: dataGridViewStorage.Columns [3].Width = 600;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: dataGridViewStorage.Columns [3].Width = 600;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: foreach (IStorageAccount storage in Storages) {  	bool displaycapacity = false;  	double? capacityPercentageFullTmp = null;  	if (storage.BytesUsed != null) {  		displaycapacity = true;  		capacityPercentageFullTmp = (double)((100 * (double)storage.BytesUsed) / (double)TotalStorageInBytes);  	}  	int rowi = dataGridViewStorage.Rows.Add (storage.Name + (string)((storage.IsDefault) ? " (default)" : string.Empty)' displaycapacity ? AssetInfo.FormatByteSize (storage.BytesUsed) : "(are the metrics enabled ?)"' storage.Name' displaycapacity ? capacityPercentageFullTmp : null);  	if (storage.IsDefault) {  		dataGridViewStorage.Rows [rowi].Cells [0].Style.ForeColor = Color.Blue;  		dataGridViewStorage.Rows [rowi].Cells [0].ToolTipText = "Default storage account";  	}  	if (!displaycapacity) {  		dataGridViewStorage.Rows [rowi].Cells [1].ToolTipText = "Storage Account Metrics are not enabled or no data is available";  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: if (storage.BytesUsed != null) {  	displaycapacity = true;  	capacityPercentageFullTmp = (double)((100 * (double)storage.BytesUsed) / (double)TotalStorageInBytes);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridStorageV,The following statement contains a magic number: capacityPercentageFullTmp = (double)((100 * (double)storage.BytesUsed) / (double)TotalStorageInBytes);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: if (firstime) {  	// Storage tab  	dataGridViewFilters.ColumnCount = 6;  	dataGridViewFilters.Columns [0].HeaderText = "Name";  	dataGridViewFilters.Columns [0].Name = "Name";  	dataGridViewFilters.Columns [0].ReadOnly = true;  	dataGridViewFilters.Columns [0].Width = 100;  	dataGridViewFilters.Columns [1].HeaderText = "Track Filtering Rules";  	dataGridViewFilters.Columns [1].Name = "Rules";  	dataGridViewFilters.Columns [1].Width = 135;  	dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  	dataGridViewFilters.Columns [2].Name = "Start";  	dataGridViewFilters.Columns [2].Width = 110;  	dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  	dataGridViewFilters.Columns [3].Name = "End";  	dataGridViewFilters.Columns [3].Width = 110;  	dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  	dataGridViewFilters.Columns [4].Name = "DVR";  	dataGridViewFilters.Columns [4].Width = 110;  	dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  	dataGridViewFilters.Columns [5].Name = "LiveBackoff";  	dataGridViewFilters.Columns [5].Width = 144;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.ColumnCount = 6;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [0].Width = 100;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [1].Width = 135;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [2].HeaderText = "Start (d.h:m:s)";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [2].Name = "Start";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [2].Width = 110;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [2].Width = 110;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [3].HeaderText = "End (d.h:m:s)";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [3].Name = "End";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [3].Width = 110;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [3].Width = 110;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [4].HeaderText = "DVR (d.h:m:s)";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [4].Name = "DVR";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [4].Width = 110;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [4].Width = 110;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [5].HeaderText = "Live backoff (d.h:m:s)";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [5].Name = "LiveBackoff";  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [5].Width = 144;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoRefreshGridFiltersV,The following statement contains a magic number: dataGridViewFilters.Columns [5].Width = 144;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,MonitorProgram,The following statement contains a magic number: if (program.State == ProgramState.Starting || program.State == ProgramState.Stopping) {  	ProgramState state = program.State;  	while (program.State == state) {  		System.Threading.Thread.Sleep (1000);  		program = _context.Programs.Where (p => p.Id == program.Id).FirstOrDefault ();  	}  	if (program != null)  		dataGridViewProgramsV.BeginInvoke (new Action (() => dataGridViewProgramsV.RefreshProgram (program))' null);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,MonitorProgram,The following statement contains a magic number: while (program.State == state) {  	System.Threading.Thread.Sleep (1000);  	program = _context.Programs.Where (p => p.Id == program.Id).FirstOrDefault ();  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,MonitorProgram,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,MonitorChannel,The following statement contains a magic number: if (channel.State == ChannelState.Deleting || channel.State == ChannelState.Starting || channel.State == ChannelState.Stopping) {  	ChannelState state = channel.State;  	while (channel.State == state) {  		System.Threading.Thread.Sleep (1000);  		channel = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  	}  	dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channel))' null);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,MonitorChannel,The following statement contains a magic number: while (channel.State == state) {  	System.Threading.Thread.Sleep (1000);  	channel = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,MonitorChannel,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ScaleStreamingEndpoint,The following statement contains a magic number: if (myO != null) {  	try {  		if (newmode != null) {  			TextBoxLogWriteLine ("Streaming endpoint '{0}' : switching to {1} type..."' myO.Name' newmode);  		} else {  			TextBoxLogWriteLine ("Streaming endpoint '{0}' : scaling to {1} unit(s)..."' myO.Name' unit.ToString ());  		}  		operation = await myO.SendScaleOperationAsync (unit);  		while (operation.State == OperationState.InProgress) {  			//refresh the operation  			operation = _context.Operations.GetOperation (operation.Id);  			System.Threading.Thread.Sleep (1000);  		}  		if (operation.State == OperationState.Succeeded) {  			if (newmode != null) {  				TextBoxLogWriteLine ("Streaming endpoint '{0}' : type changed to {1}."' myO.Name' newmode);  			} else {  				TextBoxLogWriteLine ("Streaming endpoint '{0}' : scaled."' myO.Name);  			}  		} else {  			TextBoxLogWriteLine ("Streaming endpoint '{0}' : did NOT scale. (Error {1})"' myO.Name' operation.ErrorCode' true);  			TextBoxLogWriteLine ("Error message : {0}"' operation.ErrorMessage' true);  		}  		dataGridViewStreamingEndpointsV.BeginInvoke (new Action (() => dataGridViewStreamingEndpointsV.RefreshStreamingEndpoint (myO))' null);  	} catch (Exception ex) {  		TextBoxLogWriteLine ("Streaming endpoint '{0}' : Error when scaling. {1}"' myO.Name' Program.GetErrorMessage (ex)' true);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ScaleStreamingEndpoint,The following statement contains a magic number: try {  	if (newmode != null) {  		TextBoxLogWriteLine ("Streaming endpoint '{0}' : switching to {1} type..."' myO.Name' newmode);  	} else {  		TextBoxLogWriteLine ("Streaming endpoint '{0}' : scaling to {1} unit(s)..."' myO.Name' unit.ToString ());  	}  	operation = await myO.SendScaleOperationAsync (unit);  	while (operation.State == OperationState.InProgress) {  		//refresh the operation  		operation = _context.Operations.GetOperation (operation.Id);  		System.Threading.Thread.Sleep (1000);  	}  	if (operation.State == OperationState.Succeeded) {  		if (newmode != null) {  			TextBoxLogWriteLine ("Streaming endpoint '{0}' : type changed to {1}."' myO.Name' newmode);  		} else {  			TextBoxLogWriteLine ("Streaming endpoint '{0}' : scaled."' myO.Name);  		}  	} else {  		TextBoxLogWriteLine ("Streaming endpoint '{0}' : did NOT scale. (Error {1})"' myO.Name' operation.ErrorCode' true);  		TextBoxLogWriteLine ("Error message : {0}"' operation.ErrorMessage' true);  	}  	dataGridViewStreamingEndpointsV.BeginInvoke (new Action (() => dataGridViewStreamingEndpointsV.RefreshStreamingEndpoint (myO))' null);  } catch (Exception ex) {  	TextBoxLogWriteLine ("Streaming endpoint '{0}' : Error when scaling. {1}"' myO.Name' Program.GetErrorMessage (ex)' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ScaleStreamingEndpoint,The following statement contains a magic number: while (operation.State == OperationState.InProgress) {  	//refresh the operation  	operation = _context.Operations.GetOperation (operation.Id);  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ScaleStreamingEndpoint,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProgramExecuteAsync,The following statement contains a magic number: try {  	var STask = fCall ();  	var state = program.State;  	while (!STask.IsCompleted) {  		// refresh the program  		IProgram programR = _context.Programs.Where (p => p.Id == program.Id).FirstOrDefault ();  		if (programR != null && state != programR.State) {  			state = programR.State;  			dataGridViewProgramsV.BeginInvoke (new Action (() => dataGridViewProgramsV.RefreshProgram (programR))' null);  		}  		System.Threading.Thread.Sleep (1000);  	}  	await STask;  	TextBoxLogWriteLine ("Program '{0}' : {1}."' program.Name' strStatusSuccess);  	dataGridViewProgramsV.BeginInvoke (new Action (() => dataGridViewProgramsV.RefreshProgram (program))' null);  } catch (Exception ex) {  	TextBoxLogWriteLine ("Program '{0}' : Error {1}"' program.Name' Program.GetErrorMessage (ex)' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProgramExecuteAsync,The following statement contains a magic number: while (!STask.IsCompleted) {  	// refresh the program  	IProgram programR = _context.Programs.Where (p => p.Id == program.Id).FirstOrDefault ();  	if (programR != null && state != programR.State) {  		state = programR.State;  		dataGridViewProgramsV.BeginInvoke (new Action (() => dataGridViewProgramsV.RefreshProgram (programR))' null);  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProgramExecuteAsync,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProgramExecuteOperationAsync,The following statement contains a magic number: try {  	var state = program.State;  	var STask = fCall ();  	operation = await STask;  	while (operation.State == OperationState.InProgress) {  		//refresh the operation  		operation = _context.Operations.GetOperation (operation.Id);  		// refresh the program  		IProgram programR = _context.Programs.Where (p => p.Id == program.Id).FirstOrDefault ();  		if (programR != null && state != programR.State) {  			state = programR.State;  			dataGridViewProgramsV.BeginInvoke (new Action (() => dataGridViewProgramsV.RefreshProgram (programR))' null);  		}  		System.Threading.Thread.Sleep (1000);  	}  	if (operation.State == OperationState.Succeeded) {  		TextBoxLogWriteLine ("Program '{0}' : {1}."' program.Name' strStatusSuccess);  	} else {  		TextBoxLogWriteLine ("Program '{0}' : NOT {1}. (Error {2})"' program.Name' strStatusSuccess' operation.ErrorCode' true);  		TextBoxLogWriteLine ("Error message : {0}"' operation.ErrorMessage' true);  	}  	if (program != null) {  		dataGridViewProgramsV.BeginInvoke (new Action (() => dataGridViewProgramsV.RefreshProgram (program))' null);  	}  } catch (Exception ex) {  	TextBoxLogWriteLine ("Program '{0}' : Error {1}"' program != null ? program.Name : "<unknown>"' Program.GetErrorMessage (ex)' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProgramExecuteOperationAsync,The following statement contains a magic number: while (operation.State == OperationState.InProgress) {  	//refresh the operation  	operation = _context.Operations.GetOperation (operation.Id);  	// refresh the program  	IProgram programR = _context.Programs.Where (p => p.Id == program.Id).FirstOrDefault ();  	if (programR != null && state != programR.State) {  		state = programR.State;  		dataGridViewProgramsV.BeginInvoke (new Action (() => dataGridViewProgramsV.RefreshProgram (programR))' null);  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProgramExecuteOperationAsync,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,StreamingEndpointExecuteOperationAsync,The following statement contains a magic number: try {  	var state = myO.State;  	var STask = fCall ();  	operation = await STask;  	while (operation.State == OperationState.InProgress) {  		//refresh the operation  		operation = _context.Operations.GetOperation (operation.Id);  		// refresh the streaming endpoint  		IStreamingEndpoint myOR = _context.StreamingEndpoints.Where (se => se.Id == myO.Id).FirstOrDefault ();  		if (myOR != null && state != myOR.State) {  			state = myOR.State;  			dataGridViewStreamingEndpointsV.BeginInvoke (new Action (() => dataGridViewStreamingEndpointsV.RefreshStreamingEndpoint (myOR))' null);  		}  		System.Threading.Thread.Sleep (1000);  	}  	if (operation.State == OperationState.Succeeded) {  		TextBoxLogWriteLine ("Streaming endpoint '{0}' : {1}."' myO.Name' strStatusSuccess);  		IStreamingEndpoint myse = _context.StreamingEndpoints.Where (se => se.Id == myO.Id).FirstOrDefault ();  		// we display a notification is taskbar for channel started or reset  		if (myse != null && strStatusSuccess == "started") {  			this.BeginInvoke (new Action (() => {  				this.Notify ("Streaming endpoint " + strStatusSuccess' string.Format ("{0}"' myse.Name)' false);  			}));  		}  	} else {  		TextBoxLogWriteLine ("Streaming endpoint '{0}' : NOT {1}. (Error {2})"' myO.Name' strStatusSuccess' operation.ErrorCode' true);  		TextBoxLogWriteLine ("Error message : {0}"' operation.ErrorMessage' true);  	}  	dataGridViewStreamingEndpointsV.BeginInvoke (new Action (() => dataGridViewStreamingEndpointsV.RefreshStreamingEndpoint (myO))' null);  } catch (Exception ex) {  	TextBoxLogWriteLine ("Streaming endpoint '{0}' : Error {1}"' myO.Name' Program.GetErrorMessage (ex)' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,StreamingEndpointExecuteOperationAsync,The following statement contains a magic number: while (operation.State == OperationState.InProgress) {  	//refresh the operation  	operation = _context.Operations.GetOperation (operation.Id);  	// refresh the streaming endpoint  	IStreamingEndpoint myOR = _context.StreamingEndpoints.Where (se => se.Id == myO.Id).FirstOrDefault ();  	if (myOR != null && state != myOR.State) {  		state = myOR.State;  		dataGridViewStreamingEndpointsV.BeginInvoke (new Action (() => dataGridViewStreamingEndpointsV.RefreshStreamingEndpoint (myOR))' null);  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,StreamingEndpointExecuteOperationAsync,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,IObjectExecuteOperationAsync,The following statement contains a magic number: try {  	operation = await fCall ();  	while (operation.State == OperationState.InProgress) {  		//refresh the operation  		operation = context.Operations.GetOperation (operation.Id);  		System.Threading.Thread.Sleep (1000);  	}  	if (operation.State == OperationState.Succeeded) {  		TextBoxLogWriteLine ("{0} '{1}' : {2}."' objectlogname' objectname' strStatusSuccess);  	} else {  		TextBoxLogWriteLine ("{0} '{1}' : NOT {2}. (Error {3})"' objectlogname' objectname' strStatusSuccess' operation.ErrorCode' true);  		TextBoxLogWriteLine ("Error message : {0}"' operation.ErrorMessage' true);  	}  } catch (Exception ex) {  	TextBoxLogWriteLine ("{0} '{1}' : Error {2}"' objectlogname' objectname' Program.GetErrorMessage (ex)' true);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,IObjectExecuteOperationAsync,The following statement contains a magic number: while (operation.State == OperationState.InProgress) {  	//refresh the operation  	operation = context.Operations.GetOperation (operation.Id);  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,IObjectExecuteOperationAsync,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoCreateProgram,The following statement contains a magic number: if (channel != null) {  	CreateProgram form = new CreateProgram (_context) {  		ChannelName = channel.Name'  		archiveWindowLength = new TimeSpan (4' 0' 0)'  		CreateLocator = true'  		EnableDynEnc = false'  		StartProgram = false'  		ProposeStartProgram = (channel.State == ChannelState.Running)'  		AssetName = Constants.NameconvChannel + "-" + Constants.NameconvProgram'  		ProposeScaleUnit = _context.StreamingEndpoints.AsEnumerable ().All (o => StreamingEndpointInformation.ReturnTypeSE (o) == StreamingEndpointInformation.StreamEndpointType.Classic)  	};  	if (form.ShowDialog () == DialogResult.OK) {  		if (form.ScaleUnit) {  			Task.Run (async () => {  				await ScaleStreamingEndpoint (_context.StreamingEndpoints.FirstOrDefault ()' 1);  			});  		}  		TextBoxLogWriteLine ("Creating Program '{0}'..."' form.ProgramName);  		string assetname = form.AssetName.Replace (Constants.NameconvProgram' form.ProgramName).Replace (Constants.NameconvChannel' form.ChannelName);  		IAsset NewAsset;  		if (form.IsReplica)// special case. We want to create a program with a specific manifest name' locator GUID and encryption key  		 {  			NewAsset = CreateLiveAssetWithOptionalpecifiedLocatorID (assetname' form.StorageSelected' true' form.EnableDynEnc' form.ReplicaLocatorID);  		} else// normal case  		 {  			NewAsset = CreateLiveAssetWithOptionalpecifiedLocatorID (assetname' form.StorageSelected' form.CreateLocator' form.EnableDynEnc);  		}  		if (NewAsset != null) {  			var options = new ProgramCreationOptions () {  				Name = form.ProgramName'  				Description = form.ProgramDescription'  				ArchiveWindowLength = form.archiveWindowLength'  				AssetId = NewAsset.Id'  				ManifestName = form.ForceManifestName  			// if replica is selected or force manifest name is pecified' then we force the manifest name  			};  			var STask = ProgramExecuteAsync (() => channel.Programs.CreateAsync (options)' form.ProgramName' "created");  			await STask;  			DoRefreshGridProgramV (false);  			if (form.StartProgram) {  				Task.Run (async () => {  					// let's start the program now  					IProgram program = _context.Programs.Where (p => p.Name == form.ProgramName && p.ChannelId == channel.Id).FirstOrDefault ();  					await StartProgramASync (program);  				});  			}  		}  		DoRefreshGridAssetV (false);  	}  } else {  	MessageBox.Show ("No channel has been selected.");  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The following statement contains a magic number: if (form.ShowDialog () == System.Windows.Forms.DialogResult.OK) {  	foreach (IAsset asset in form.SelectedAssets) {  		string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name);  		IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  		string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  		ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  		AMEStandardTask.InputAssets.Add (asset);  		// Add an output asset to contain the results of the job.   		string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' asset.Name);  		AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  		// Submit the job    		TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  		try {  			job.Submit ();  		} catch (Exception e) {  			// Add useful information to the exception  			if (SelectedAssets.Count < 5) {  				MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  			TextBoxLogWriteLine (e);  			return;  		}  		Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  	}  	DotabControlMainSwitch (AMSExplorer.Properties.Resources.TabJobs);  	DoRefreshGridJobV (false);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The following statement contains a magic number: foreach (IAsset asset in form.SelectedAssets) {  	string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name);  	IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  	string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  	ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  	AMEStandardTask.InputAssets.Add (asset);  	// Add an output asset to contain the results of the job.   	string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' asset.Name);  	AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  	// Submit the job    	TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  	try {  		job.Submit ();  	} catch (Exception e) {  		// Add useful information to the exception  		if (SelectedAssets.Count < 5) {  			MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  		TextBoxLogWriteLine (e);  		return;  	}  	Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The following statement contains a magic number: try {  	job.Submit ();  } catch (Exception e) {  	// Add useful information to the exception  	if (SelectedAssets.Count < 5) {  		MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  	TextBoxLogWriteLine (e);  	return;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoGenerateThumbnails,The following statement contains a magic number: if (SelectedAssets.Count < 5) {  	MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if (form1.ShowDialog () == DialogResult.OK) {  	switch (form1.GetDeliveryPolicyType) {  	///////////////////////////////////////////// CENC Dynamic Encryption  	case AssetDeliveryPolicyType.DynamicCommonEncryption:  	case AssetDeliveryPolicyType.None:  		// in that case' user want to configure license delivery on an asset already encrypted  		AddDynamicEncryptionFrame2_CENCKeyConfig form2_CENC = new AddDynamicEncryptionFrame2_CENCKeyConfig (forceusertoprovidekey) {  			Left = form1.Left'  			Top = form1.Top  		};  		if (form2_CENC.ShowDialog () == DialogResult.OK) {  			var form3_CENC = new AddDynamicEncryptionFrame3_CENCDelivery (_context' form1.PlayReadyPackaging' form1.WidevinePackaging);  			AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  			if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  				bool NeedToDisplayPlayReadyLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0;  				bool NeedToDisplayWidevineLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0;  				List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  				List<AddDynamicEncryptionFrame5_PlayReadyLicense> form5list = new List<AddDynamicEncryptionFrame5_PlayReadyLicense> ();  				List<AddDynamicEncryptionFrame6_WidevineLicense> form6list = new List<AddDynamicEncryptionFrame6_WidevineLicense> ();  				bool usercancelledform4or5 = false;  				bool usercancelledform4or6 = false;  				if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  				 {  					int step = 3;  					string tokensymmetrickey = null;  					for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "PlayReady"' tokensymmetrickey' false) {  							Left = form2_CENC.Left'  							Top = form2_CENC.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							step++;  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  							AddDynamicEncryptionFrame5_PlayReadyLicense form5_PlayReadyLicense = new AddDynamicEncryptionFrame5_PlayReadyLicense (step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady - 1)) {  								Left = form3_CENC.Left'  								Top = form3_CENC.Top  							};  							step++;  							if (NeedToDisplayPlayReadyLicense)// it's a PlayReady license and user wants to deliver the license from Azure Media Services  							 {  								string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  								form5_PlayReadyLicense.PlayReadOptionName = string.Format ("{0}{1} PlayReady Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  								if (form5_PlayReadyLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  								 {  									form5list.Add (form5_PlayReadyLicense);  								} else {  									usercancelledform4or5 = true;  								}  							}  						} else {  							usercancelledform4or5 = true;  						}  					}  					// widevine  					for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "Widevine"' tokensymmetrickey' false) {  							Left = form2_CENC.Left'  							Top = form2_CENC.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							step++;  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  							AddDynamicEncryptionFrame6_WidevineLicense form6_WidevineLicense = new AddDynamicEncryptionFrame6_WidevineLicense (Constants.TemporaryWidevineLicenseServer' step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine - 1)) {  								Left = form3_CENC.Left'  								Top = form3_CENC.Top  							};  							string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  							form6_WidevineLicense.WidevinePolicyName = string.Format ("{0}{1} Widevine Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  							step++;  							if (form6_WidevineLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  							 {  								form6list.Add (form6_WidevineLicense);  							} else {  								usercancelledform4or6 = true;  							}  						} else {  							usercancelledform4or6 = true;  						}  					}  				}  				if (!usercancelledform4or5 && !usercancelledform4or6) {  					DoDynamicEncryptionAndKeyDeliveryWithCENC (SelectedAssets' form1' form2_CENC' form3_ExistingPolicies' form3_CENC' form4list' form5list' form6list' true);  					oktoproceed = true;  					dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  					dataGridViewAssetsV.AnalyzeItemsInBackground ();  				}  			}  		}  		break;  	///////////////////////////////////////////// CENC CBCS (FairPlay) Dynamic Encryption  	case AssetDeliveryPolicyType.DynamicCommonEncryptionCbcs:  		var form2_CENC_Cbcs = new AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig () {  			Left = form1.Left'  			Top = form1.Top  		};  		if (form2_CENC_Cbcs.ShowDialog () == DialogResult.OK) {  			var form3_CENC = new AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery (_context);  			AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  			if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  				bool NeedToDisplayFairPlayLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay > 0;  				List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  				bool usercancelledform4 = false;  				if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  				 {  					int step = 3;  					string tokensymmetrickey = null;  					for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "FairPlay"' tokensymmetrickey' false) {  							Left = form2_CENC_Cbcs.Left'  							Top = form2_CENC_Cbcs.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							step++;  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  						} else {  							usercancelledform4 = true;  						}  					}  				}  				if (!usercancelledform4) {  					DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs (SelectedAssets' form1' form2_CENC_Cbcs' form3_ExistingPolicies' form3_CENC' form4list' true);  					oktoproceed = true;  					dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  					dataGridViewAssetsV.AnalyzeItemsInBackground ();  				}  			}  		}  		break;  	///////////////////////////////////////////// AES Dynamic Encryption  	case AssetDeliveryPolicyType.DynamicEnvelopeEncryption:  		AddDynamicEncryptionFrame2_AESKeyConfig form2_AES = new AddDynamicEncryptionFrame2_AESKeyConfig (forceusertoprovidekey) {  			Left = form1.Left'  			Top = form1.Top  		};  		if (form2_AES.ShowDialog () == DialogResult.OK) {  			var form3_AES = new AddDynamicEncryptionFrame3_AESDelivery (_context);  			AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  			if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_AES.ShowDialog () == DialogResult.OK)) {  				List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  				bool usercancelledform4 = false;  				if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  				 {  					string tokensymmetrickey = null;  					for (int i = 0; i < form3_AES.GetNumberOfAuthorizationPolicyOptions; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) {  							Left = form2_AES.Left'  							Top = form2_AES.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  						} else {  							usercancelledform4 = true;  						}  					}  				}  				if (!usercancelledform4) {  					DoDynamicEncryptionWithAES (SelectedAssets' form1' form2_AES' form3_ExistingPolicies' form3_AES' form4list' true);  					oktoproceed = true;  					dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  					dataGridViewAssetsV.AnalyzeItemsInBackground ();  				}  			}  		}  		break;  	///////////////////////////////////////////// Decrypt storage protected content  	case AssetDeliveryPolicyType.NoDynamicEncryption:  		AddDynDecryption (SelectedAssets' form1' _context);  		oktoproceed = true;  		dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  		dataGridViewAssetsV.AnalyzeItemsInBackground ();  		break;  	default:  		break;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if (form1.ShowDialog () == DialogResult.OK) {  	switch (form1.GetDeliveryPolicyType) {  	///////////////////////////////////////////// CENC Dynamic Encryption  	case AssetDeliveryPolicyType.DynamicCommonEncryption:  	case AssetDeliveryPolicyType.None:  		// in that case' user want to configure license delivery on an asset already encrypted  		AddDynamicEncryptionFrame2_CENCKeyConfig form2_CENC = new AddDynamicEncryptionFrame2_CENCKeyConfig (forceusertoprovidekey) {  			Left = form1.Left'  			Top = form1.Top  		};  		if (form2_CENC.ShowDialog () == DialogResult.OK) {  			var form3_CENC = new AddDynamicEncryptionFrame3_CENCDelivery (_context' form1.PlayReadyPackaging' form1.WidevinePackaging);  			AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  			if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  				bool NeedToDisplayPlayReadyLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0;  				bool NeedToDisplayWidevineLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0;  				List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  				List<AddDynamicEncryptionFrame5_PlayReadyLicense> form5list = new List<AddDynamicEncryptionFrame5_PlayReadyLicense> ();  				List<AddDynamicEncryptionFrame6_WidevineLicense> form6list = new List<AddDynamicEncryptionFrame6_WidevineLicense> ();  				bool usercancelledform4or5 = false;  				bool usercancelledform4or6 = false;  				if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  				 {  					int step = 3;  					string tokensymmetrickey = null;  					for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "PlayReady"' tokensymmetrickey' false) {  							Left = form2_CENC.Left'  							Top = form2_CENC.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							step++;  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  							AddDynamicEncryptionFrame5_PlayReadyLicense form5_PlayReadyLicense = new AddDynamicEncryptionFrame5_PlayReadyLicense (step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady - 1)) {  								Left = form3_CENC.Left'  								Top = form3_CENC.Top  							};  							step++;  							if (NeedToDisplayPlayReadyLicense)// it's a PlayReady license and user wants to deliver the license from Azure Media Services  							 {  								string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  								form5_PlayReadyLicense.PlayReadOptionName = string.Format ("{0}{1} PlayReady Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  								if (form5_PlayReadyLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  								 {  									form5list.Add (form5_PlayReadyLicense);  								} else {  									usercancelledform4or5 = true;  								}  							}  						} else {  							usercancelledform4or5 = true;  						}  					}  					// widevine  					for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "Widevine"' tokensymmetrickey' false) {  							Left = form2_CENC.Left'  							Top = form2_CENC.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							step++;  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  							AddDynamicEncryptionFrame6_WidevineLicense form6_WidevineLicense = new AddDynamicEncryptionFrame6_WidevineLicense (Constants.TemporaryWidevineLicenseServer' step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine - 1)) {  								Left = form3_CENC.Left'  								Top = form3_CENC.Top  							};  							string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  							form6_WidevineLicense.WidevinePolicyName = string.Format ("{0}{1} Widevine Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  							step++;  							if (form6_WidevineLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  							 {  								form6list.Add (form6_WidevineLicense);  							} else {  								usercancelledform4or6 = true;  							}  						} else {  							usercancelledform4or6 = true;  						}  					}  				}  				if (!usercancelledform4or5 && !usercancelledform4or6) {  					DoDynamicEncryptionAndKeyDeliveryWithCENC (SelectedAssets' form1' form2_CENC' form3_ExistingPolicies' form3_CENC' form4list' form5list' form6list' true);  					oktoproceed = true;  					dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  					dataGridViewAssetsV.AnalyzeItemsInBackground ();  				}  			}  		}  		break;  	///////////////////////////////////////////// CENC CBCS (FairPlay) Dynamic Encryption  	case AssetDeliveryPolicyType.DynamicCommonEncryptionCbcs:  		var form2_CENC_Cbcs = new AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig () {  			Left = form1.Left'  			Top = form1.Top  		};  		if (form2_CENC_Cbcs.ShowDialog () == DialogResult.OK) {  			var form3_CENC = new AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery (_context);  			AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  			if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  				bool NeedToDisplayFairPlayLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay > 0;  				List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  				bool usercancelledform4 = false;  				if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  				 {  					int step = 3;  					string tokensymmetrickey = null;  					for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "FairPlay"' tokensymmetrickey' false) {  							Left = form2_CENC_Cbcs.Left'  							Top = form2_CENC_Cbcs.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							step++;  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  						} else {  							usercancelledform4 = true;  						}  					}  				}  				if (!usercancelledform4) {  					DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs (SelectedAssets' form1' form2_CENC_Cbcs' form3_ExistingPolicies' form3_CENC' form4list' true);  					oktoproceed = true;  					dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  					dataGridViewAssetsV.AnalyzeItemsInBackground ();  				}  			}  		}  		break;  	///////////////////////////////////////////// AES Dynamic Encryption  	case AssetDeliveryPolicyType.DynamicEnvelopeEncryption:  		AddDynamicEncryptionFrame2_AESKeyConfig form2_AES = new AddDynamicEncryptionFrame2_AESKeyConfig (forceusertoprovidekey) {  			Left = form1.Left'  			Top = form1.Top  		};  		if (form2_AES.ShowDialog () == DialogResult.OK) {  			var form3_AES = new AddDynamicEncryptionFrame3_AESDelivery (_context);  			AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  			if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_AES.ShowDialog () == DialogResult.OK)) {  				List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  				bool usercancelledform4 = false;  				if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  				 {  					string tokensymmetrickey = null;  					for (int i = 0; i < form3_AES.GetNumberOfAuthorizationPolicyOptions; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) {  							Left = form2_AES.Left'  							Top = form2_AES.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  						} else {  							usercancelledform4 = true;  						}  					}  				}  				if (!usercancelledform4) {  					DoDynamicEncryptionWithAES (SelectedAssets' form1' form2_AES' form3_ExistingPolicies' form3_AES' form4list' true);  					oktoproceed = true;  					dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  					dataGridViewAssetsV.AnalyzeItemsInBackground ();  				}  			}  		}  		break;  	///////////////////////////////////////////// Decrypt storage protected content  	case AssetDeliveryPolicyType.NoDynamicEncryption:  		AddDynDecryption (SelectedAssets' form1' _context);  		oktoproceed = true;  		dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  		dataGridViewAssetsV.AnalyzeItemsInBackground ();  		break;  	default:  		break;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if (form1.ShowDialog () == DialogResult.OK) {  	switch (form1.GetDeliveryPolicyType) {  	///////////////////////////////////////////// CENC Dynamic Encryption  	case AssetDeliveryPolicyType.DynamicCommonEncryption:  	case AssetDeliveryPolicyType.None:  		// in that case' user want to configure license delivery on an asset already encrypted  		AddDynamicEncryptionFrame2_CENCKeyConfig form2_CENC = new AddDynamicEncryptionFrame2_CENCKeyConfig (forceusertoprovidekey) {  			Left = form1.Left'  			Top = form1.Top  		};  		if (form2_CENC.ShowDialog () == DialogResult.OK) {  			var form3_CENC = new AddDynamicEncryptionFrame3_CENCDelivery (_context' form1.PlayReadyPackaging' form1.WidevinePackaging);  			AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  			if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  				bool NeedToDisplayPlayReadyLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0;  				bool NeedToDisplayWidevineLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0;  				List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  				List<AddDynamicEncryptionFrame5_PlayReadyLicense> form5list = new List<AddDynamicEncryptionFrame5_PlayReadyLicense> ();  				List<AddDynamicEncryptionFrame6_WidevineLicense> form6list = new List<AddDynamicEncryptionFrame6_WidevineLicense> ();  				bool usercancelledform4or5 = false;  				bool usercancelledform4or6 = false;  				if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  				 {  					int step = 3;  					string tokensymmetrickey = null;  					for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "PlayReady"' tokensymmetrickey' false) {  							Left = form2_CENC.Left'  							Top = form2_CENC.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							step++;  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  							AddDynamicEncryptionFrame5_PlayReadyLicense form5_PlayReadyLicense = new AddDynamicEncryptionFrame5_PlayReadyLicense (step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady - 1)) {  								Left = form3_CENC.Left'  								Top = form3_CENC.Top  							};  							step++;  							if (NeedToDisplayPlayReadyLicense)// it's a PlayReady license and user wants to deliver the license from Azure Media Services  							 {  								string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  								form5_PlayReadyLicense.PlayReadOptionName = string.Format ("{0}{1} PlayReady Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  								if (form5_PlayReadyLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  								 {  									form5list.Add (form5_PlayReadyLicense);  								} else {  									usercancelledform4or5 = true;  								}  							}  						} else {  							usercancelledform4or5 = true;  						}  					}  					// widevine  					for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "Widevine"' tokensymmetrickey' false) {  							Left = form2_CENC.Left'  							Top = form2_CENC.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							step++;  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  							AddDynamicEncryptionFrame6_WidevineLicense form6_WidevineLicense = new AddDynamicEncryptionFrame6_WidevineLicense (Constants.TemporaryWidevineLicenseServer' step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine - 1)) {  								Left = form3_CENC.Left'  								Top = form3_CENC.Top  							};  							string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  							form6_WidevineLicense.WidevinePolicyName = string.Format ("{0}{1} Widevine Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  							step++;  							if (form6_WidevineLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  							 {  								form6list.Add (form6_WidevineLicense);  							} else {  								usercancelledform4or6 = true;  							}  						} else {  							usercancelledform4or6 = true;  						}  					}  				}  				if (!usercancelledform4or5 && !usercancelledform4or6) {  					DoDynamicEncryptionAndKeyDeliveryWithCENC (SelectedAssets' form1' form2_CENC' form3_ExistingPolicies' form3_CENC' form4list' form5list' form6list' true);  					oktoproceed = true;  					dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  					dataGridViewAssetsV.AnalyzeItemsInBackground ();  				}  			}  		}  		break;  	///////////////////////////////////////////// CENC CBCS (FairPlay) Dynamic Encryption  	case AssetDeliveryPolicyType.DynamicCommonEncryptionCbcs:  		var form2_CENC_Cbcs = new AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig () {  			Left = form1.Left'  			Top = form1.Top  		};  		if (form2_CENC_Cbcs.ShowDialog () == DialogResult.OK) {  			var form3_CENC = new AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery (_context);  			AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  			if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  				bool NeedToDisplayFairPlayLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay > 0;  				List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  				bool usercancelledform4 = false;  				if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  				 {  					int step = 3;  					string tokensymmetrickey = null;  					for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "FairPlay"' tokensymmetrickey' false) {  							Left = form2_CENC_Cbcs.Left'  							Top = form2_CENC_Cbcs.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							step++;  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  						} else {  							usercancelledform4 = true;  						}  					}  				}  				if (!usercancelledform4) {  					DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs (SelectedAssets' form1' form2_CENC_Cbcs' form3_ExistingPolicies' form3_CENC' form4list' true);  					oktoproceed = true;  					dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  					dataGridViewAssetsV.AnalyzeItemsInBackground ();  				}  			}  		}  		break;  	///////////////////////////////////////////// AES Dynamic Encryption  	case AssetDeliveryPolicyType.DynamicEnvelopeEncryption:  		AddDynamicEncryptionFrame2_AESKeyConfig form2_AES = new AddDynamicEncryptionFrame2_AESKeyConfig (forceusertoprovidekey) {  			Left = form1.Left'  			Top = form1.Top  		};  		if (form2_AES.ShowDialog () == DialogResult.OK) {  			var form3_AES = new AddDynamicEncryptionFrame3_AESDelivery (_context);  			AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  			if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_AES.ShowDialog () == DialogResult.OK)) {  				List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  				bool usercancelledform4 = false;  				if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  				 {  					string tokensymmetrickey = null;  					for (int i = 0; i < form3_AES.GetNumberOfAuthorizationPolicyOptions; i++) {  						AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) {  							Left = form2_AES.Left'  							Top = form2_AES.Top  						};  						if (form4.ShowDialog () == DialogResult.OK) {  							form4list.Add (form4);  							tokensymmetrickey = form4.SymmetricKey;  						} else {  							usercancelledform4 = true;  						}  					}  				}  				if (!usercancelledform4) {  					DoDynamicEncryptionWithAES (SelectedAssets' form1' form2_AES' form3_ExistingPolicies' form3_AES' form4list' true);  					oktoproceed = true;  					dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  					dataGridViewAssetsV.AnalyzeItemsInBackground ();  				}  			}  		}  		break;  	///////////////////////////////////////////// Decrypt storage protected content  	case AssetDeliveryPolicyType.NoDynamicEncryption:  		AddDynDecryption (SelectedAssets' form1' _context);  		oktoproceed = true;  		dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  		dataGridViewAssetsV.AnalyzeItemsInBackground ();  		break;  	default:  		break;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: switch (form1.GetDeliveryPolicyType) {  ///////////////////////////////////////////// CENC Dynamic Encryption  case AssetDeliveryPolicyType.DynamicCommonEncryption:  case AssetDeliveryPolicyType.None:  	// in that case' user want to configure license delivery on an asset already encrypted  	AddDynamicEncryptionFrame2_CENCKeyConfig form2_CENC = new AddDynamicEncryptionFrame2_CENCKeyConfig (forceusertoprovidekey) {  		Left = form1.Left'  		Top = form1.Top  	};  	if (form2_CENC.ShowDialog () == DialogResult.OK) {  		var form3_CENC = new AddDynamicEncryptionFrame3_CENCDelivery (_context' form1.PlayReadyPackaging' form1.WidevinePackaging);  		AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  		if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  			bool NeedToDisplayPlayReadyLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0;  			bool NeedToDisplayWidevineLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0;  			List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  			List<AddDynamicEncryptionFrame5_PlayReadyLicense> form5list = new List<AddDynamicEncryptionFrame5_PlayReadyLicense> ();  			List<AddDynamicEncryptionFrame6_WidevineLicense> form6list = new List<AddDynamicEncryptionFrame6_WidevineLicense> ();  			bool usercancelledform4or5 = false;  			bool usercancelledform4or6 = false;  			if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  			 {  				int step = 3;  				string tokensymmetrickey = null;  				for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "PlayReady"' tokensymmetrickey' false) {  						Left = form2_CENC.Left'  						Top = form2_CENC.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						step++;  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  						AddDynamicEncryptionFrame5_PlayReadyLicense form5_PlayReadyLicense = new AddDynamicEncryptionFrame5_PlayReadyLicense (step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady - 1)) {  							Left = form3_CENC.Left'  							Top = form3_CENC.Top  						};  						step++;  						if (NeedToDisplayPlayReadyLicense)// it's a PlayReady license and user wants to deliver the license from Azure Media Services  						 {  							string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  							form5_PlayReadyLicense.PlayReadOptionName = string.Format ("{0}{1} PlayReady Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  							if (form5_PlayReadyLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  							 {  								form5list.Add (form5_PlayReadyLicense);  							} else {  								usercancelledform4or5 = true;  							}  						}  					} else {  						usercancelledform4or5 = true;  					}  				}  				// widevine  				for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "Widevine"' tokensymmetrickey' false) {  						Left = form2_CENC.Left'  						Top = form2_CENC.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						step++;  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  						AddDynamicEncryptionFrame6_WidevineLicense form6_WidevineLicense = new AddDynamicEncryptionFrame6_WidevineLicense (Constants.TemporaryWidevineLicenseServer' step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine - 1)) {  							Left = form3_CENC.Left'  							Top = form3_CENC.Top  						};  						string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  						form6_WidevineLicense.WidevinePolicyName = string.Format ("{0}{1} Widevine Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  						step++;  						if (form6_WidevineLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  						 {  							form6list.Add (form6_WidevineLicense);  						} else {  							usercancelledform4or6 = true;  						}  					} else {  						usercancelledform4or6 = true;  					}  				}  			}  			if (!usercancelledform4or5 && !usercancelledform4or6) {  				DoDynamicEncryptionAndKeyDeliveryWithCENC (SelectedAssets' form1' form2_CENC' form3_ExistingPolicies' form3_CENC' form4list' form5list' form6list' true);  				oktoproceed = true;  				dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  				dataGridViewAssetsV.AnalyzeItemsInBackground ();  			}  		}  	}  	break;  ///////////////////////////////////////////// CENC CBCS (FairPlay) Dynamic Encryption  case AssetDeliveryPolicyType.DynamicCommonEncryptionCbcs:  	var form2_CENC_Cbcs = new AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig () {  		Left = form1.Left'  		Top = form1.Top  	};  	if (form2_CENC_Cbcs.ShowDialog () == DialogResult.OK) {  		var form3_CENC = new AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery (_context);  		AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  		if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  			bool NeedToDisplayFairPlayLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay > 0;  			List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  			bool usercancelledform4 = false;  			if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  			 {  				int step = 3;  				string tokensymmetrickey = null;  				for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "FairPlay"' tokensymmetrickey' false) {  						Left = form2_CENC_Cbcs.Left'  						Top = form2_CENC_Cbcs.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						step++;  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  					} else {  						usercancelledform4 = true;  					}  				}  			}  			if (!usercancelledform4) {  				DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs (SelectedAssets' form1' form2_CENC_Cbcs' form3_ExistingPolicies' form3_CENC' form4list' true);  				oktoproceed = true;  				dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  				dataGridViewAssetsV.AnalyzeItemsInBackground ();  			}  		}  	}  	break;  ///////////////////////////////////////////// AES Dynamic Encryption  case AssetDeliveryPolicyType.DynamicEnvelopeEncryption:  	AddDynamicEncryptionFrame2_AESKeyConfig form2_AES = new AddDynamicEncryptionFrame2_AESKeyConfig (forceusertoprovidekey) {  		Left = form1.Left'  		Top = form1.Top  	};  	if (form2_AES.ShowDialog () == DialogResult.OK) {  		var form3_AES = new AddDynamicEncryptionFrame3_AESDelivery (_context);  		AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  		if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_AES.ShowDialog () == DialogResult.OK)) {  			List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  			bool usercancelledform4 = false;  			if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  			 {  				string tokensymmetrickey = null;  				for (int i = 0; i < form3_AES.GetNumberOfAuthorizationPolicyOptions; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) {  						Left = form2_AES.Left'  						Top = form2_AES.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  					} else {  						usercancelledform4 = true;  					}  				}  			}  			if (!usercancelledform4) {  				DoDynamicEncryptionWithAES (SelectedAssets' form1' form2_AES' form3_ExistingPolicies' form3_AES' form4list' true);  				oktoproceed = true;  				dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  				dataGridViewAssetsV.AnalyzeItemsInBackground ();  			}  		}  	}  	break;  ///////////////////////////////////////////// Decrypt storage protected content  case AssetDeliveryPolicyType.NoDynamicEncryption:  	AddDynDecryption (SelectedAssets' form1' _context);  	oktoproceed = true;  	dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  	dataGridViewAssetsV.AnalyzeItemsInBackground ();  	break;  default:  	break;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: switch (form1.GetDeliveryPolicyType) {  ///////////////////////////////////////////// CENC Dynamic Encryption  case AssetDeliveryPolicyType.DynamicCommonEncryption:  case AssetDeliveryPolicyType.None:  	// in that case' user want to configure license delivery on an asset already encrypted  	AddDynamicEncryptionFrame2_CENCKeyConfig form2_CENC = new AddDynamicEncryptionFrame2_CENCKeyConfig (forceusertoprovidekey) {  		Left = form1.Left'  		Top = form1.Top  	};  	if (form2_CENC.ShowDialog () == DialogResult.OK) {  		var form3_CENC = new AddDynamicEncryptionFrame3_CENCDelivery (_context' form1.PlayReadyPackaging' form1.WidevinePackaging);  		AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  		if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  			bool NeedToDisplayPlayReadyLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0;  			bool NeedToDisplayWidevineLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0;  			List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  			List<AddDynamicEncryptionFrame5_PlayReadyLicense> form5list = new List<AddDynamicEncryptionFrame5_PlayReadyLicense> ();  			List<AddDynamicEncryptionFrame6_WidevineLicense> form6list = new List<AddDynamicEncryptionFrame6_WidevineLicense> ();  			bool usercancelledform4or5 = false;  			bool usercancelledform4or6 = false;  			if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  			 {  				int step = 3;  				string tokensymmetrickey = null;  				for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "PlayReady"' tokensymmetrickey' false) {  						Left = form2_CENC.Left'  						Top = form2_CENC.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						step++;  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  						AddDynamicEncryptionFrame5_PlayReadyLicense form5_PlayReadyLicense = new AddDynamicEncryptionFrame5_PlayReadyLicense (step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady - 1)) {  							Left = form3_CENC.Left'  							Top = form3_CENC.Top  						};  						step++;  						if (NeedToDisplayPlayReadyLicense)// it's a PlayReady license and user wants to deliver the license from Azure Media Services  						 {  							string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  							form5_PlayReadyLicense.PlayReadOptionName = string.Format ("{0}{1} PlayReady Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  							if (form5_PlayReadyLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  							 {  								form5list.Add (form5_PlayReadyLicense);  							} else {  								usercancelledform4or5 = true;  							}  						}  					} else {  						usercancelledform4or5 = true;  					}  				}  				// widevine  				for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "Widevine"' tokensymmetrickey' false) {  						Left = form2_CENC.Left'  						Top = form2_CENC.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						step++;  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  						AddDynamicEncryptionFrame6_WidevineLicense form6_WidevineLicense = new AddDynamicEncryptionFrame6_WidevineLicense (Constants.TemporaryWidevineLicenseServer' step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine - 1)) {  							Left = form3_CENC.Left'  							Top = form3_CENC.Top  						};  						string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  						form6_WidevineLicense.WidevinePolicyName = string.Format ("{0}{1} Widevine Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  						step++;  						if (form6_WidevineLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  						 {  							form6list.Add (form6_WidevineLicense);  						} else {  							usercancelledform4or6 = true;  						}  					} else {  						usercancelledform4or6 = true;  					}  				}  			}  			if (!usercancelledform4or5 && !usercancelledform4or6) {  				DoDynamicEncryptionAndKeyDeliveryWithCENC (SelectedAssets' form1' form2_CENC' form3_ExistingPolicies' form3_CENC' form4list' form5list' form6list' true);  				oktoproceed = true;  				dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  				dataGridViewAssetsV.AnalyzeItemsInBackground ();  			}  		}  	}  	break;  ///////////////////////////////////////////// CENC CBCS (FairPlay) Dynamic Encryption  case AssetDeliveryPolicyType.DynamicCommonEncryptionCbcs:  	var form2_CENC_Cbcs = new AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig () {  		Left = form1.Left'  		Top = form1.Top  	};  	if (form2_CENC_Cbcs.ShowDialog () == DialogResult.OK) {  		var form3_CENC = new AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery (_context);  		AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  		if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  			bool NeedToDisplayFairPlayLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay > 0;  			List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  			bool usercancelledform4 = false;  			if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  			 {  				int step = 3;  				string tokensymmetrickey = null;  				for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "FairPlay"' tokensymmetrickey' false) {  						Left = form2_CENC_Cbcs.Left'  						Top = form2_CENC_Cbcs.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						step++;  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  					} else {  						usercancelledform4 = true;  					}  				}  			}  			if (!usercancelledform4) {  				DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs (SelectedAssets' form1' form2_CENC_Cbcs' form3_ExistingPolicies' form3_CENC' form4list' true);  				oktoproceed = true;  				dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  				dataGridViewAssetsV.AnalyzeItemsInBackground ();  			}  		}  	}  	break;  ///////////////////////////////////////////// AES Dynamic Encryption  case AssetDeliveryPolicyType.DynamicEnvelopeEncryption:  	AddDynamicEncryptionFrame2_AESKeyConfig form2_AES = new AddDynamicEncryptionFrame2_AESKeyConfig (forceusertoprovidekey) {  		Left = form1.Left'  		Top = form1.Top  	};  	if (form2_AES.ShowDialog () == DialogResult.OK) {  		var form3_AES = new AddDynamicEncryptionFrame3_AESDelivery (_context);  		AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  		if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_AES.ShowDialog () == DialogResult.OK)) {  			List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  			bool usercancelledform4 = false;  			if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  			 {  				string tokensymmetrickey = null;  				for (int i = 0; i < form3_AES.GetNumberOfAuthorizationPolicyOptions; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) {  						Left = form2_AES.Left'  						Top = form2_AES.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  					} else {  						usercancelledform4 = true;  					}  				}  			}  			if (!usercancelledform4) {  				DoDynamicEncryptionWithAES (SelectedAssets' form1' form2_AES' form3_ExistingPolicies' form3_AES' form4list' true);  				oktoproceed = true;  				dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  				dataGridViewAssetsV.AnalyzeItemsInBackground ();  			}  		}  	}  	break;  ///////////////////////////////////////////// Decrypt storage protected content  case AssetDeliveryPolicyType.NoDynamicEncryption:  	AddDynDecryption (SelectedAssets' form1' _context);  	oktoproceed = true;  	dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  	dataGridViewAssetsV.AnalyzeItemsInBackground ();  	break;  default:  	break;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: switch (form1.GetDeliveryPolicyType) {  ///////////////////////////////////////////// CENC Dynamic Encryption  case AssetDeliveryPolicyType.DynamicCommonEncryption:  case AssetDeliveryPolicyType.None:  	// in that case' user want to configure license delivery on an asset already encrypted  	AddDynamicEncryptionFrame2_CENCKeyConfig form2_CENC = new AddDynamicEncryptionFrame2_CENCKeyConfig (forceusertoprovidekey) {  		Left = form1.Left'  		Top = form1.Top  	};  	if (form2_CENC.ShowDialog () == DialogResult.OK) {  		var form3_CENC = new AddDynamicEncryptionFrame3_CENCDelivery (_context' form1.PlayReadyPackaging' form1.WidevinePackaging);  		AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  		if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  			bool NeedToDisplayPlayReadyLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0;  			bool NeedToDisplayWidevineLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0;  			List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  			List<AddDynamicEncryptionFrame5_PlayReadyLicense> form5list = new List<AddDynamicEncryptionFrame5_PlayReadyLicense> ();  			List<AddDynamicEncryptionFrame6_WidevineLicense> form6list = new List<AddDynamicEncryptionFrame6_WidevineLicense> ();  			bool usercancelledform4or5 = false;  			bool usercancelledform4or6 = false;  			if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  			 {  				int step = 3;  				string tokensymmetrickey = null;  				for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "PlayReady"' tokensymmetrickey' false) {  						Left = form2_CENC.Left'  						Top = form2_CENC.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						step++;  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  						AddDynamicEncryptionFrame5_PlayReadyLicense form5_PlayReadyLicense = new AddDynamicEncryptionFrame5_PlayReadyLicense (step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady - 1)) {  							Left = form3_CENC.Left'  							Top = form3_CENC.Top  						};  						step++;  						if (NeedToDisplayPlayReadyLicense)// it's a PlayReady license and user wants to deliver the license from Azure Media Services  						 {  							string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  							form5_PlayReadyLicense.PlayReadOptionName = string.Format ("{0}{1} PlayReady Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  							if (form5_PlayReadyLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  							 {  								form5list.Add (form5_PlayReadyLicense);  							} else {  								usercancelledform4or5 = true;  							}  						}  					} else {  						usercancelledform4or5 = true;  					}  				}  				// widevine  				for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "Widevine"' tokensymmetrickey' false) {  						Left = form2_CENC.Left'  						Top = form2_CENC.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						step++;  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  						AddDynamicEncryptionFrame6_WidevineLicense form6_WidevineLicense = new AddDynamicEncryptionFrame6_WidevineLicense (Constants.TemporaryWidevineLicenseServer' step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine - 1)) {  							Left = form3_CENC.Left'  							Top = form3_CENC.Top  						};  						string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  						form6_WidevineLicense.WidevinePolicyName = string.Format ("{0}{1} Widevine Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  						step++;  						if (form6_WidevineLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  						 {  							form6list.Add (form6_WidevineLicense);  						} else {  							usercancelledform4or6 = true;  						}  					} else {  						usercancelledform4or6 = true;  					}  				}  			}  			if (!usercancelledform4or5 && !usercancelledform4or6) {  				DoDynamicEncryptionAndKeyDeliveryWithCENC (SelectedAssets' form1' form2_CENC' form3_ExistingPolicies' form3_CENC' form4list' form5list' form6list' true);  				oktoproceed = true;  				dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  				dataGridViewAssetsV.AnalyzeItemsInBackground ();  			}  		}  	}  	break;  ///////////////////////////////////////////// CENC CBCS (FairPlay) Dynamic Encryption  case AssetDeliveryPolicyType.DynamicCommonEncryptionCbcs:  	var form2_CENC_Cbcs = new AddDynamicEncryptionFrame2_CENC_Cbcs_KeyConfig () {  		Left = form1.Left'  		Top = form1.Top  	};  	if (form2_CENC_Cbcs.ShowDialog () == DialogResult.OK) {  		var form3_CENC = new AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery (_context);  		AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  		if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  			bool NeedToDisplayFairPlayLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay > 0;  			List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  			bool usercancelledform4 = false;  			if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  			 {  				int step = 3;  				string tokensymmetrickey = null;  				for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "FairPlay"' tokensymmetrickey' false) {  						Left = form2_CENC_Cbcs.Left'  						Top = form2_CENC_Cbcs.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						step++;  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  					} else {  						usercancelledform4 = true;  					}  				}  			}  			if (!usercancelledform4) {  				DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs (SelectedAssets' form1' form2_CENC_Cbcs' form3_ExistingPolicies' form3_CENC' form4list' true);  				oktoproceed = true;  				dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  				dataGridViewAssetsV.AnalyzeItemsInBackground ();  			}  		}  	}  	break;  ///////////////////////////////////////////// AES Dynamic Encryption  case AssetDeliveryPolicyType.DynamicEnvelopeEncryption:  	AddDynamicEncryptionFrame2_AESKeyConfig form2_AES = new AddDynamicEncryptionFrame2_AESKeyConfig (forceusertoprovidekey) {  		Left = form1.Left'  		Top = form1.Top  	};  	if (form2_AES.ShowDialog () == DialogResult.OK) {  		var form3_AES = new AddDynamicEncryptionFrame3_AESDelivery (_context);  		AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  		if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_AES.ShowDialog () == DialogResult.OK)) {  			List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  			bool usercancelledform4 = false;  			if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  			 {  				string tokensymmetrickey = null;  				for (int i = 0; i < form3_AES.GetNumberOfAuthorizationPolicyOptions; i++) {  					AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) {  						Left = form2_AES.Left'  						Top = form2_AES.Top  					};  					if (form4.ShowDialog () == DialogResult.OK) {  						form4list.Add (form4);  						tokensymmetrickey = form4.SymmetricKey;  					} else {  						usercancelledform4 = true;  					}  				}  			}  			if (!usercancelledform4) {  				DoDynamicEncryptionWithAES (SelectedAssets' form1' form2_AES' form3_ExistingPolicies' form3_AES' form4list' true);  				oktoproceed = true;  				dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  				dataGridViewAssetsV.AnalyzeItemsInBackground ();  			}  		}  	}  	break;  ///////////////////////////////////////////// Decrypt storage protected content  case AssetDeliveryPolicyType.NoDynamicEncryption:  	AddDynDecryption (SelectedAssets' form1' _context);  	oktoproceed = true;  	dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  	dataGridViewAssetsV.AnalyzeItemsInBackground ();  	break;  default:  	break;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if (form2_CENC.ShowDialog () == DialogResult.OK) {  	var form3_CENC = new AddDynamicEncryptionFrame3_CENCDelivery (_context' form1.PlayReadyPackaging' form1.WidevinePackaging);  	AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  	if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  		bool NeedToDisplayPlayReadyLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0;  		bool NeedToDisplayWidevineLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0;  		List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  		List<AddDynamicEncryptionFrame5_PlayReadyLicense> form5list = new List<AddDynamicEncryptionFrame5_PlayReadyLicense> ();  		List<AddDynamicEncryptionFrame6_WidevineLicense> form6list = new List<AddDynamicEncryptionFrame6_WidevineLicense> ();  		bool usercancelledform4or5 = false;  		bool usercancelledform4or6 = false;  		if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  		 {  			int step = 3;  			string tokensymmetrickey = null;  			for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady; i++) {  				AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "PlayReady"' tokensymmetrickey' false) {  					Left = form2_CENC.Left'  					Top = form2_CENC.Top  				};  				if (form4.ShowDialog () == DialogResult.OK) {  					step++;  					form4list.Add (form4);  					tokensymmetrickey = form4.SymmetricKey;  					AddDynamicEncryptionFrame5_PlayReadyLicense form5_PlayReadyLicense = new AddDynamicEncryptionFrame5_PlayReadyLicense (step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady - 1)) {  						Left = form3_CENC.Left'  						Top = form3_CENC.Top  					};  					step++;  					if (NeedToDisplayPlayReadyLicense)// it's a PlayReady license and user wants to deliver the license from Azure Media Services  					 {  						string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  						form5_PlayReadyLicense.PlayReadOptionName = string.Format ("{0}{1} PlayReady Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  						if (form5_PlayReadyLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  						 {  							form5list.Add (form5_PlayReadyLicense);  						} else {  							usercancelledform4or5 = true;  						}  					}  				} else {  					usercancelledform4or5 = true;  				}  			}  			// widevine  			for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine; i++) {  				AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "Widevine"' tokensymmetrickey' false) {  					Left = form2_CENC.Left'  					Top = form2_CENC.Top  				};  				if (form4.ShowDialog () == DialogResult.OK) {  					step++;  					form4list.Add (form4);  					tokensymmetrickey = form4.SymmetricKey;  					AddDynamicEncryptionFrame6_WidevineLicense form6_WidevineLicense = new AddDynamicEncryptionFrame6_WidevineLicense (Constants.TemporaryWidevineLicenseServer' step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine - 1)) {  						Left = form3_CENC.Left'  						Top = form3_CENC.Top  					};  					string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  					form6_WidevineLicense.WidevinePolicyName = string.Format ("{0}{1} Widevine Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  					step++;  					if (form6_WidevineLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  					 {  						form6list.Add (form6_WidevineLicense);  					} else {  						usercancelledform4or6 = true;  					}  				} else {  					usercancelledform4or6 = true;  				}  			}  		}  		if (!usercancelledform4or5 && !usercancelledform4or6) {  			DoDynamicEncryptionAndKeyDeliveryWithCENC (SelectedAssets' form1' form2_CENC' form3_ExistingPolicies' form3_CENC' form4list' form5list' form6list' true);  			oktoproceed = true;  			dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  			dataGridViewAssetsV.AnalyzeItemsInBackground ();  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  	bool NeedToDisplayPlayReadyLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0;  	bool NeedToDisplayWidevineLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0;  	List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  	List<AddDynamicEncryptionFrame5_PlayReadyLicense> form5list = new List<AddDynamicEncryptionFrame5_PlayReadyLicense> ();  	List<AddDynamicEncryptionFrame6_WidevineLicense> form6list = new List<AddDynamicEncryptionFrame6_WidevineLicense> ();  	bool usercancelledform4or5 = false;  	bool usercancelledform4or6 = false;  	if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  	 {  		int step = 3;  		string tokensymmetrickey = null;  		for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady; i++) {  			AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "PlayReady"' tokensymmetrickey' false) {  				Left = form2_CENC.Left'  				Top = form2_CENC.Top  			};  			if (form4.ShowDialog () == DialogResult.OK) {  				step++;  				form4list.Add (form4);  				tokensymmetrickey = form4.SymmetricKey;  				AddDynamicEncryptionFrame5_PlayReadyLicense form5_PlayReadyLicense = new AddDynamicEncryptionFrame5_PlayReadyLicense (step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady - 1)) {  					Left = form3_CENC.Left'  					Top = form3_CENC.Top  				};  				step++;  				if (NeedToDisplayPlayReadyLicense)// it's a PlayReady license and user wants to deliver the license from Azure Media Services  				 {  					string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  					form5_PlayReadyLicense.PlayReadOptionName = string.Format ("{0}{1} PlayReady Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  					if (form5_PlayReadyLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  					 {  						form5list.Add (form5_PlayReadyLicense);  					} else {  						usercancelledform4or5 = true;  					}  				}  			} else {  				usercancelledform4or5 = true;  			}  		}  		// widevine  		for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine; i++) {  			AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "Widevine"' tokensymmetrickey' false) {  				Left = form2_CENC.Left'  				Top = form2_CENC.Top  			};  			if (form4.ShowDialog () == DialogResult.OK) {  				step++;  				form4list.Add (form4);  				tokensymmetrickey = form4.SymmetricKey;  				AddDynamicEncryptionFrame6_WidevineLicense form6_WidevineLicense = new AddDynamicEncryptionFrame6_WidevineLicense (Constants.TemporaryWidevineLicenseServer' step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine - 1)) {  					Left = form3_CENC.Left'  					Top = form3_CENC.Top  				};  				string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  				form6_WidevineLicense.WidevinePolicyName = string.Format ("{0}{1} Widevine Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  				step++;  				if (form6_WidevineLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  				 {  					form6list.Add (form6_WidevineLicense);  				} else {  					usercancelledform4or6 = true;  				}  			} else {  				usercancelledform4or6 = true;  			}  		}  	}  	if (!usercancelledform4or5 && !usercancelledform4or6) {  		DoDynamicEncryptionAndKeyDeliveryWithCENC (SelectedAssets' form1' form2_CENC' form3_ExistingPolicies' form3_CENC' form4list' form5list' form6list' true);  		oktoproceed = true;  		dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  		dataGridViewAssetsV.AnalyzeItemsInBackground ();  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy   {  	int step = 3;  	string tokensymmetrickey = null;  	for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady; i++) {  		AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "PlayReady"' tokensymmetrickey' false) {  			Left = form2_CENC.Left'  			Top = form2_CENC.Top  		};  		if (form4.ShowDialog () == DialogResult.OK) {  			step++;  			form4list.Add (form4);  			tokensymmetrickey = form4.SymmetricKey;  			AddDynamicEncryptionFrame5_PlayReadyLicense form5_PlayReadyLicense = new AddDynamicEncryptionFrame5_PlayReadyLicense (step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady - 1)) {  				Left = form3_CENC.Left'  				Top = form3_CENC.Top  			};  			step++;  			if (NeedToDisplayPlayReadyLicense)// it's a PlayReady license and user wants to deliver the license from Azure Media Services  			 {  				string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  				form5_PlayReadyLicense.PlayReadOptionName = string.Format ("{0}{1} PlayReady Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  				if (form5_PlayReadyLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  				 {  					form5list.Add (form5_PlayReadyLicense);  				} else {  					usercancelledform4or5 = true;  				}  			}  		} else {  			usercancelledform4or5 = true;  		}  	}  	// widevine  	for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine; i++) {  		AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "Widevine"' tokensymmetrickey' false) {  			Left = form2_CENC.Left'  			Top = form2_CENC.Top  		};  		if (form4.ShowDialog () == DialogResult.OK) {  			step++;  			form4list.Add (form4);  			tokensymmetrickey = form4.SymmetricKey;  			AddDynamicEncryptionFrame6_WidevineLicense form6_WidevineLicense = new AddDynamicEncryptionFrame6_WidevineLicense (Constants.TemporaryWidevineLicenseServer' step' i + 1' i == (form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine - 1)) {  				Left = form3_CENC.Left'  				Top = form3_CENC.Top  			};  			string tokentype = form4.GetKeyRestrictionType == ContentKeyRestrictionType.TokenRestricted ? " " + form4.GetDetailedTokenType.ToString () : "";  			form6_WidevineLicense.WidevinePolicyName = string.Format ("{0}{1} Widevine Option {2}"' form4.GetKeyRestrictionType.ToString ()' tokentype' i + 1);  			step++;  			if (form6_WidevineLicense.ShowDialog () == DialogResult.OK)// let's display the dialog box to configure the playready license  			 {  				form6list.Add (form6_WidevineLicense);  			} else {  				usercancelledform4or6 = true;  			}  		} else {  			usercancelledform4or6 = true;  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if (form2_CENC_Cbcs.ShowDialog () == DialogResult.OK) {  	var form3_CENC = new AddDynamicEncryptionFrame3_CENC_Cbcs_Delivery (_context);  	AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  	if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  		bool NeedToDisplayFairPlayLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay > 0;  		List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  		bool usercancelledform4 = false;  		if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  		 {  			int step = 3;  			string tokensymmetrickey = null;  			for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay; i++) {  				AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "FairPlay"' tokensymmetrickey' false) {  					Left = form2_CENC_Cbcs.Left'  					Top = form2_CENC_Cbcs.Top  				};  				if (form4.ShowDialog () == DialogResult.OK) {  					step++;  					form4list.Add (form4);  					tokensymmetrickey = form4.SymmetricKey;  				} else {  					usercancelledform4 = true;  				}  			}  		}  		if (!usercancelledform4) {  			DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs (SelectedAssets' form1' form2_CENC_Cbcs' form3_ExistingPolicies' form3_CENC' form4list' true);  			oktoproceed = true;  			dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  			dataGridViewAssetsV.AnalyzeItemsInBackground ();  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_CENC.ShowDialog () == DialogResult.OK)) {  	bool NeedToDisplayFairPlayLicense = form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay > 0;  	List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  	bool usercancelledform4 = false;  	if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  	 {  		int step = 3;  		string tokensymmetrickey = null;  		for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay; i++) {  			AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "FairPlay"' tokensymmetrickey' false) {  				Left = form2_CENC_Cbcs.Left'  				Top = form2_CENC_Cbcs.Top  			};  			if (form4.ShowDialog () == DialogResult.OK) {  				step++;  				form4list.Add (form4);  				tokensymmetrickey = form4.SymmetricKey;  			} else {  				usercancelledform4 = true;  			}  		}  	}  	if (!usercancelledform4) {  		DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs (SelectedAssets' form1' form2_CENC_Cbcs' form3_ExistingPolicies' form3_CENC' form4list' true);  		oktoproceed = true;  		dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  		dataGridViewAssetsV.AnalyzeItemsInBackground ();  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy   {  	int step = 3;  	string tokensymmetrickey = null;  	for (int i = 0; i < form3_CENC.GetNumberOfAuthorizationPolicyOptionsFairPlay; i++) {  		AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' step' i + 1' "FairPlay"' tokensymmetrickey' false) {  			Left = form2_CENC_Cbcs.Left'  			Top = form2_CENC_Cbcs.Top  		};  		if (form4.ShowDialog () == DialogResult.OK) {  			step++;  			form4list.Add (form4);  			tokensymmetrickey = form4.SymmetricKey;  		} else {  			usercancelledform4 = true;  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if (form2_AES.ShowDialog () == DialogResult.OK) {  	var form3_AES = new AddDynamicEncryptionFrame3_AESDelivery (_context);  	AddDynamicEncryptionFrame3_ExistingPolicies form3_ExistingPolicies = new AddDynamicEncryptionFrame3_ExistingPolicies (_context' form1);  	if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_AES.ShowDialog () == DialogResult.OK)) {  		List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  		bool usercancelledform4 = false;  		if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  		 {  			string tokensymmetrickey = null;  			for (int i = 0; i < form3_AES.GetNumberOfAuthorizationPolicyOptions; i++) {  				AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) {  					Left = form2_AES.Left'  					Top = form2_AES.Top  				};  				if (form4.ShowDialog () == DialogResult.OK) {  					form4list.Add (form4);  					tokensymmetrickey = form4.SymmetricKey;  				} else {  					usercancelledform4 = true;  				}  			}  		}  		if (!usercancelledform4) {  			DoDynamicEncryptionWithAES (SelectedAssets' form1' form2_AES' form3_ExistingPolicies' form3_AES' form4list' true);  			oktoproceed = true;  			dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  			dataGridViewAssetsV.AnalyzeItemsInBackground ();  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if ((form1.SelectExistingPolicies && form3_ExistingPolicies.ShowDialog () == DialogResult.OK) || (!form1.SelectExistingPolicies && form3_AES.ShowDialog () == DialogResult.OK)) {  	List<AddDynamicEncryptionFrame4> form4list = new List<AddDynamicEncryptionFrame4> ();  	bool usercancelledform4 = false;  	if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy  	 {  		string tokensymmetrickey = null;  		for (int i = 0; i < form3_AES.GetNumberOfAuthorizationPolicyOptions; i++) {  			AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) {  				Left = form2_AES.Left'  				Top = form2_AES.Top  			};  			if (form4.ShowDialog () == DialogResult.OK) {  				form4list.Add (form4);  				tokensymmetrickey = form4.SymmetricKey;  			} else {  				usercancelledform4 = true;  			}  		}  	}  	if (!usercancelledform4) {  		DoDynamicEncryptionWithAES (SelectedAssets' form1' form2_AES' form3_ExistingPolicies' form3_AES' form4list' true);  		oktoproceed = true;  		dataGridViewAssetsV.PurgeCacheAssets (SelectedAssets);  		dataGridViewAssetsV.AnalyzeItemsInBackground ();  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: if (!form1.SelectExistingPolicies)// user did not select an existing authorization policy   {  	string tokensymmetrickey = null;  	for (int i = 0; i < form3_AES.GetNumberOfAuthorizationPolicyOptions; i++) {  		AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) {  			Left = form2_AES.Left'  			Top = form2_AES.Top  		};  		if (form4.ShowDialog () == DialogResult.OK) {  			form4list.Add (form4);  			tokensymmetrickey = form4.SymmetricKey;  		} else {  			usercancelledform4 = true;  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetupDynamicEncryption,The following statement contains a magic number: for (int i = 0; i < form3_AES.GetNumberOfAuthorizationPolicyOptions; i++) {  	AddDynamicEncryptionFrame4 form4 = new AddDynamicEncryptionFrame4 (_context' i + 3' i + 1' "AES"' tokensymmetrickey' true) {  		Left = form2_AES.Left'  		Top = form2_AES.Top  	};  	if (form4.ShowDialog () == DialogResult.OK) {  		form4list.Add (form4);  		tokensymmetrickey = form4.SymmetricKey;  	} else {  		usercancelledform4 = true;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The following statement contains a magic number: foreach (IAsset AssetToProcess in SelectedAssets) {  	if (AssetToProcess != null) {  		IContentKey contentKey = null;  		var contentkeys = AssetToProcess.ContentKeys.Where (c => c.ContentKeyType == form1.GetContentKeyType);  		// special case' no dynamic encryption' goal is to setup key auth policy. CENC key is selected  		if (contentkeys.Count () == 0)// no content key existing so we need to create one  		 {  			ErrorCreationKey = false;  			//    if ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 && form2_CENC.ContentKeyRandomGeneration)  			//// Azure will deliver the PR or WV license and user wants to auto generate the key' so we can create a key with a random content key  			if (!reusekey && ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 && form2_CENC.ContentKeyRandomGeneration))// Azure will deliver the PR or WV license or user wants to auto generate the key' so we can create a key with a random content key  			// changed || form2_CENC.ContentKeyRandomGeneratio to && form2_CENC.ContentKeyRandomGeneratio  			 {  				try {  					contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context);  				} catch (Exception e) {  					// Add useful information to the exception  					TextBoxLogWriteLine ("There is a problem when creating the content key for '{0}'."' AssetToProcess.Name' true);  					TextBoxLogWriteLine (e);  					ErrorCreationKey = true;  				}  				if (!ErrorCreationKey) {  					TextBoxLogWriteLine ("Created key {0} for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  				}  			} else// user wants to deliver with an external PlayReady or Widevine server or want to provide the key' so let's create the key based on what the user input  			 {  				// if the key does not exist in the account (same key id)' let's create it  				if ((firstkeycreation && !reusekey) || form2_CENC.KeyId == null)// if we need to generate a new key id for each asset  				 {  					if (form2_CENC.KeySeed != null)// seed has been given  					 {  						Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  						byte[] bytecontentkey = CommonEncryption.GeneratePlayReadyContentKey (Convert.FromBase64String (form2_CENC.KeySeed)' keyid);  						try {  							contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  						} catch (Exception e) {  							// Add useful information to the exception  							TextBoxLogWriteLine ("There is a problem when creating the content key for '{0}'."' AssetToProcess.Name' true);  							TextBoxLogWriteLine (e);  							ErrorCreationKey = true;  						}  						if (!ErrorCreationKey) {  							TextBoxLogWriteLine ("Created key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  						}  					} else// no seed given' so content key has been setup or not (if external server)  					 {  						Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  						byte[] bytecontentkey = (string.IsNullOrWhiteSpace (form2_CENC.CENCContentKey)) ? DynamicEncryption.GetRandomBuffer (16) : Convert.FromBase64String (form2_CENC.CENCContentKey);  						try {  							contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  						} catch (Exception e) {  							// Add useful information to the exception  							TextBoxLogWriteLine ("There is a problem when creating the content key for asset '{0}'."' AssetToProcess.Name' true);  							TextBoxLogWriteLine (e);  							ErrorCreationKey = true;  						}  						if (!ErrorCreationKey) {  							TextBoxLogWriteLine ("Created key {0} for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  						}  					}  					formerkey = contentKey;  					firstkeycreation = false;  				} else {  					contentKey = formerkey;  					AssetToProcess.ContentKeys.Add (contentKey);  					AssetToProcess.Update ();  					TextBoxLogWriteLine ("Reusing key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  				}  			}  		} else// let's use existing content key  		 {  			contentKey = contentkeys.FirstOrDefault ();  			TextBoxLogWriteLine ("Existing key '{0}' will be used for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  		}  		if ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 // PlayReady/Widevine license and delivery from Azure Media Services  		&& (!ManualForceKeyData || (ManualForceKeyData && contentKeyAuthorizationPolicy == null))// If the user want to reuse the key' then no need to recreate the Aut Policy if already created  		) {  			if (contentKeyAuthorizationPolicy != null)// authorization policy already created so we use it  			 {  				try {  					// Associate the content key authorization policy with the content key.  					contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;  					contentKey = contentKey.UpdateAsync ().Result;  					TextBoxLogWriteLine ("Attached authorization policy to key '{0}' for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  				} catch (Exception e) {  					TextBoxLogWriteLine ("There is a proble when attaching authorization policy to key '{0}' for asset '{1}'."' contentKey.Id' AssetToProcess.Name' true);  					TextBoxLogWriteLine (e);  				}  			} else if (!form1.SelectExistingPolicies)// authorization policy to create (policy==null and user did not select the option to choose an existing policy)  			 {  				// let's create the Authorization Policy  				contentKeyAuthorizationPolicy = _context.ContentKeyAuthorizationPolicies.CreateAsync ("Authorization Policy").Result;  				// Associate the content key authorization policy with the content key.  				contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;  				contentKey = contentKey.UpdateAsync ().Result;  				foreach (var form4 in form4list) {  					// for each option  					string PlayReadyLicenseDeliveryConfig = null;  					string PlayReadyLicenseOptionName = null;  					string WidevineLicenseDeliveryConfig = null;  					string WidevineLicenseOptionName = null;  					bool ItIsAPlayReadyOption = form4list.IndexOf (form4) < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady;  					if (ItIsAPlayReadyOption) {  						// user wants to define a PlayReady license for this option  						// let's build the PlayReady license template  						ErrorCreationKey = false;  						try {  							PlayReadyLicenseDeliveryConfig = form5PlayReadyLicenseList [form4list.IndexOf (form4)].GetLicenseTemplate;  							PlayReadyLicenseOptionName = form5PlayReadyLicenseList [form4list.IndexOf (form4)].PlayReadOptionName;  						} catch (Exception e) {  							// Add useful information to the exception  							TextBoxLogWriteLine ("There is a problem when configuring the PlayReady license template."' true);  							TextBoxLogWriteLine (e);  							ErrorCreationKey = true;  						}  					} else {  						// user wants to define a Widevine license for this option  						WidevineLicenseDeliveryConfig = form6WidevineLicenseList [form4list.IndexOf (form4) - form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady].GetWidevineConfiguration (contentKey.GetKeyDeliveryUrl (ContentKeyDeliveryType.Widevine).ToString ());  						WidevineLicenseOptionName = form6WidevineLicenseList [form4list.IndexOf (form4) - form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady].WidevinePolicyName;  					}  					if (!ErrorCreationKey) {  						IContentKeyAuthorizationPolicyOption policyOption = null;  						try {  							switch (form4.GetKeyRestrictionType) {  							case ContentKeyRestrictionType.Open:  								if (ItIsAPlayReadyOption) {  									policyOption = DynamicEncryption.AddOpenAuthorizationPolicyOption (PlayReadyLicenseOptionName' contentKey' ContentKeyDeliveryType.PlayReadyLicense' PlayReadyLicenseDeliveryConfig' _context);  									TextBoxLogWriteLine ("Created PlayReady Open authorization policy for the asset '{0}' "' AssetToProcess.Name);  									contentKeyAuthorizationPolicy.Options.Add (policyOption);  								} else// widevine  								 {  									policyOption = DynamicEncryption.AddOpenAuthorizationPolicyOption (WidevineLicenseOptionName' contentKey' ContentKeyDeliveryType.Widevine' WidevineLicenseDeliveryConfig' _context);  									TextBoxLogWriteLine ("Created Widevine Open authorization policy for the asset '{0}' "' AssetToProcess.Name);  									contentKeyAuthorizationPolicy.Options.Add (policyOption);  								}  								break;  							case ContentKeyRestrictionType.TokenRestricted:  								TokenVerificationKey mytokenverifkey = null;  								string OpenIdDoc = null;  								switch (form4.GetDetailedTokenType) {  								case ExplorerTokenType.SWT:  								case ExplorerTokenType.JWTSym:  									mytokenverifkey = new SymmetricVerificationKey (Convert.FromBase64String (form4.SymmetricKey));  									break;  								case ExplorerTokenType.JWTOpenID:  									OpenIdDoc = form4.GetOpenIdDiscoveryDocument;  									break;  								case ExplorerTokenType.JWTX509:  									mytokenverifkey = new X509CertTokenVerificationKey (form4.GetX509Certificate);  									break;  								}  								if (ItIsAPlayReadyOption) {  									policyOption = DynamicEncryption.AddTokenRestrictedAuthorizationPolicyCENC (PlayReadyLicenseOptionName' ContentKeyDeliveryType.PlayReadyLicense' contentKey' form4.GetAudience' form4.GetIssuer' form4.GetTokenRequiredClaims' form4.AddContentKeyIdentifierClaim' form4.GetTokenType' form4.GetDetailedTokenType' mytokenverifkey' _context' PlayReadyLicenseDeliveryConfig' OpenIdDoc);  									TextBoxLogWriteLine ("Created Token PlayReady authorization policy for the asset '{0}'."' AssetToProcess.Name);  								} else//widevine  								 {  									policyOption = DynamicEncryption.AddTokenRestrictedAuthorizationPolicyCENC (WidevineLicenseOptionName' ContentKeyDeliveryType.Widevine' contentKey' form4.GetAudience' form4.GetIssuer' form4.GetTokenRequiredClaims' form4.AddContentKeyIdentifierClaim' form4.GetTokenType' form4.GetDetailedTokenType' mytokenverifkey' _context' WidevineLicenseDeliveryConfig' OpenIdDoc);  									TextBoxLogWriteLine ("Created Token Widevine authorization policy for the asset '{0}'"' AssetToProcess.Name);  								}  								contentKeyAuthorizationPolicy.Options.Add (policyOption);  								if (form4.GetDetailedTokenType != ExplorerTokenType.JWTOpenID)// not possible to create a test token if OpenId is used  								 {  									// let display a test token  									X509SigningCredentials signingcred = null;  									if (form4.GetDetailedTokenType == ExplorerTokenType.JWTX509) {  										signingcred = new X509SigningCredentials (form4.GetX509Certificate);  									}  									_context = Program.ConnectAndGetNewContext (_credentials);  									// otherwise cache issues with multiple options  									DynamicEncryption.TokenResult testToken = DynamicEncryption.GetTestToken (AssetToProcess' _context' form1.GetContentKeyType' signingcred' policyOption.Id);  									TextBoxLogWriteLine ("The authorization test token for option #{0} ({1} with Bearer) is:\n{2}"' form4list.IndexOf (form4)' form4.GetTokenType.ToString ()' Constants.Bearer + testToken.TokenString);  									System.Windows.Forms.Clipboard.SetText (Constants.Bearer + testToken.TokenString);  								}  								break;  							default:  								break;  							}  						} catch (Exception e) {  							// Add useful information to the exception  							TextBoxLogWriteLine ("There is a problem when creating the authorization policy for '{0}'."' AssetToProcess.Name' true);  							TextBoxLogWriteLine (e);  							ErrorCreationKey = true;  						}  					}  				}  				contentKeyAuthorizationPolicy.Update ();  			}  		}  		// Let's create the Asset Delivery Policy now  		if (form1.GetDeliveryPolicyType != AssetDeliveryPolicyType.None && form1.EnableDynEnc) {  			if (DelPol != null)// already created  			 {  				try {  					AssetToProcess.DeliveryPolicies.Add (DelPol);  					TextBoxLogWriteLine ("Attached asset delivery policy '{0}' to asset '{1}'."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name);  				} catch (Exception e) {  					TextBoxLogWriteLine ("There is a problem when attaching the delivery policy for '{0}'."' AssetToProcess.Name' true);  					TextBoxLogWriteLine (e);  				}  			} else if (!form1.SelectExistingPolicies)// delivery policy to create (policy==null and user did not select the option to choose an existing policy)  			 {  				var assetDeliveryProtocol = form1.GetAssetDeliveryProtocol;  				if (!form1.PlayReadyPackaging && form1.WidevinePackaging) {  					assetDeliveryProtocol = AssetDeliveryProtocol.Dash;  					// only DASH  				}  				string name = string.Format ("AssetDeliveryPolicy {0} ({1})"' form1.GetContentKeyType.ToString ()' assetDeliveryProtocol.ToString ());  				ErrorCreationKey = false;  				try {  					DelPol = DynamicEncryption.CreateAssetDeliveryPolicyCENC (AssetToProcess' contentKey' form1' name' _context' playreadyAcquisitionUrl: form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0 ? null : form3_CENC.PlayReadyLAurl' playreadyEncodeLAURLForSilverlight: form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0 ? false : form3_CENC.PlayReadyLAurlEncodeForSL' widevineAcquisitionUrl: form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0 ? null : form3_CENC.WidevineLAurl' widevineAcquisitionURLFinal: form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0 ? false : form3_CENC.WidevineFinalLAurl);  					TextBoxLogWriteLine ("Created asset delivery policy '{0}' for asset '{1}'."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name);  				} catch (Exception e) {  					TextBoxLogWriteLine ("There is a problem when creating the delivery policy for '{0}'."' AssetToProcess.Name' true);  					TextBoxLogWriteLine (e);  					ErrorCreationKey = true;  				}  			}  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The following statement contains a magic number: if (AssetToProcess != null) {  	IContentKey contentKey = null;  	var contentkeys = AssetToProcess.ContentKeys.Where (c => c.ContentKeyType == form1.GetContentKeyType);  	// special case' no dynamic encryption' goal is to setup key auth policy. CENC key is selected  	if (contentkeys.Count () == 0)// no content key existing so we need to create one  	 {  		ErrorCreationKey = false;  		//    if ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 && form2_CENC.ContentKeyRandomGeneration)  		//// Azure will deliver the PR or WV license and user wants to auto generate the key' so we can create a key with a random content key  		if (!reusekey && ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 && form2_CENC.ContentKeyRandomGeneration))// Azure will deliver the PR or WV license or user wants to auto generate the key' so we can create a key with a random content key  		// changed || form2_CENC.ContentKeyRandomGeneratio to && form2_CENC.ContentKeyRandomGeneratio  		 {  			try {  				contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context);  			} catch (Exception e) {  				// Add useful information to the exception  				TextBoxLogWriteLine ("There is a problem when creating the content key for '{0}'."' AssetToProcess.Name' true);  				TextBoxLogWriteLine (e);  				ErrorCreationKey = true;  			}  			if (!ErrorCreationKey) {  				TextBoxLogWriteLine ("Created key {0} for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  			}  		} else// user wants to deliver with an external PlayReady or Widevine server or want to provide the key' so let's create the key based on what the user input  		 {  			// if the key does not exist in the account (same key id)' let's create it  			if ((firstkeycreation && !reusekey) || form2_CENC.KeyId == null)// if we need to generate a new key id for each asset  			 {  				if (form2_CENC.KeySeed != null)// seed has been given  				 {  					Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  					byte[] bytecontentkey = CommonEncryption.GeneratePlayReadyContentKey (Convert.FromBase64String (form2_CENC.KeySeed)' keyid);  					try {  						contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  					} catch (Exception e) {  						// Add useful information to the exception  						TextBoxLogWriteLine ("There is a problem when creating the content key for '{0}'."' AssetToProcess.Name' true);  						TextBoxLogWriteLine (e);  						ErrorCreationKey = true;  					}  					if (!ErrorCreationKey) {  						TextBoxLogWriteLine ("Created key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  					}  				} else// no seed given' so content key has been setup or not (if external server)  				 {  					Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  					byte[] bytecontentkey = (string.IsNullOrWhiteSpace (form2_CENC.CENCContentKey)) ? DynamicEncryption.GetRandomBuffer (16) : Convert.FromBase64String (form2_CENC.CENCContentKey);  					try {  						contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  					} catch (Exception e) {  						// Add useful information to the exception  						TextBoxLogWriteLine ("There is a problem when creating the content key for asset '{0}'."' AssetToProcess.Name' true);  						TextBoxLogWriteLine (e);  						ErrorCreationKey = true;  					}  					if (!ErrorCreationKey) {  						TextBoxLogWriteLine ("Created key {0} for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  					}  				}  				formerkey = contentKey;  				firstkeycreation = false;  			} else {  				contentKey = formerkey;  				AssetToProcess.ContentKeys.Add (contentKey);  				AssetToProcess.Update ();  				TextBoxLogWriteLine ("Reusing key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  			}  		}  	} else// let's use existing content key  	 {  		contentKey = contentkeys.FirstOrDefault ();  		TextBoxLogWriteLine ("Existing key '{0}' will be used for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  	}  	if ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 // PlayReady/Widevine license and delivery from Azure Media Services  	&& (!ManualForceKeyData || (ManualForceKeyData && contentKeyAuthorizationPolicy == null))// If the user want to reuse the key' then no need to recreate the Aut Policy if already created  	) {  		if (contentKeyAuthorizationPolicy != null)// authorization policy already created so we use it  		 {  			try {  				// Associate the content key authorization policy with the content key.  				contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;  				contentKey = contentKey.UpdateAsync ().Result;  				TextBoxLogWriteLine ("Attached authorization policy to key '{0}' for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  			} catch (Exception e) {  				TextBoxLogWriteLine ("There is a proble when attaching authorization policy to key '{0}' for asset '{1}'."' contentKey.Id' AssetToProcess.Name' true);  				TextBoxLogWriteLine (e);  			}  		} else if (!form1.SelectExistingPolicies)// authorization policy to create (policy==null and user did not select the option to choose an existing policy)  		 {  			// let's create the Authorization Policy  			contentKeyAuthorizationPolicy = _context.ContentKeyAuthorizationPolicies.CreateAsync ("Authorization Policy").Result;  			// Associate the content key authorization policy with the content key.  			contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;  			contentKey = contentKey.UpdateAsync ().Result;  			foreach (var form4 in form4list) {  				// for each option  				string PlayReadyLicenseDeliveryConfig = null;  				string PlayReadyLicenseOptionName = null;  				string WidevineLicenseDeliveryConfig = null;  				string WidevineLicenseOptionName = null;  				bool ItIsAPlayReadyOption = form4list.IndexOf (form4) < form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady;  				if (ItIsAPlayReadyOption) {  					// user wants to define a PlayReady license for this option  					// let's build the PlayReady license template  					ErrorCreationKey = false;  					try {  						PlayReadyLicenseDeliveryConfig = form5PlayReadyLicenseList [form4list.IndexOf (form4)].GetLicenseTemplate;  						PlayReadyLicenseOptionName = form5PlayReadyLicenseList [form4list.IndexOf (form4)].PlayReadOptionName;  					} catch (Exception e) {  						// Add useful information to the exception  						TextBoxLogWriteLine ("There is a problem when configuring the PlayReady license template."' true);  						TextBoxLogWriteLine (e);  						ErrorCreationKey = true;  					}  				} else {  					// user wants to define a Widevine license for this option  					WidevineLicenseDeliveryConfig = form6WidevineLicenseList [form4list.IndexOf (form4) - form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady].GetWidevineConfiguration (contentKey.GetKeyDeliveryUrl (ContentKeyDeliveryType.Widevine).ToString ());  					WidevineLicenseOptionName = form6WidevineLicenseList [form4list.IndexOf (form4) - form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady].WidevinePolicyName;  				}  				if (!ErrorCreationKey) {  					IContentKeyAuthorizationPolicyOption policyOption = null;  					try {  						switch (form4.GetKeyRestrictionType) {  						case ContentKeyRestrictionType.Open:  							if (ItIsAPlayReadyOption) {  								policyOption = DynamicEncryption.AddOpenAuthorizationPolicyOption (PlayReadyLicenseOptionName' contentKey' ContentKeyDeliveryType.PlayReadyLicense' PlayReadyLicenseDeliveryConfig' _context);  								TextBoxLogWriteLine ("Created PlayReady Open authorization policy for the asset '{0}' "' AssetToProcess.Name);  								contentKeyAuthorizationPolicy.Options.Add (policyOption);  							} else// widevine  							 {  								policyOption = DynamicEncryption.AddOpenAuthorizationPolicyOption (WidevineLicenseOptionName' contentKey' ContentKeyDeliveryType.Widevine' WidevineLicenseDeliveryConfig' _context);  								TextBoxLogWriteLine ("Created Widevine Open authorization policy for the asset '{0}' "' AssetToProcess.Name);  								contentKeyAuthorizationPolicy.Options.Add (policyOption);  							}  							break;  						case ContentKeyRestrictionType.TokenRestricted:  							TokenVerificationKey mytokenverifkey = null;  							string OpenIdDoc = null;  							switch (form4.GetDetailedTokenType) {  							case ExplorerTokenType.SWT:  							case ExplorerTokenType.JWTSym:  								mytokenverifkey = new SymmetricVerificationKey (Convert.FromBase64String (form4.SymmetricKey));  								break;  							case ExplorerTokenType.JWTOpenID:  								OpenIdDoc = form4.GetOpenIdDiscoveryDocument;  								break;  							case ExplorerTokenType.JWTX509:  								mytokenverifkey = new X509CertTokenVerificationKey (form4.GetX509Certificate);  								break;  							}  							if (ItIsAPlayReadyOption) {  								policyOption = DynamicEncryption.AddTokenRestrictedAuthorizationPolicyCENC (PlayReadyLicenseOptionName' ContentKeyDeliveryType.PlayReadyLicense' contentKey' form4.GetAudience' form4.GetIssuer' form4.GetTokenRequiredClaims' form4.AddContentKeyIdentifierClaim' form4.GetTokenType' form4.GetDetailedTokenType' mytokenverifkey' _context' PlayReadyLicenseDeliveryConfig' OpenIdDoc);  								TextBoxLogWriteLine ("Created Token PlayReady authorization policy for the asset '{0}'."' AssetToProcess.Name);  							} else//widevine  							 {  								policyOption = DynamicEncryption.AddTokenRestrictedAuthorizationPolicyCENC (WidevineLicenseOptionName' ContentKeyDeliveryType.Widevine' contentKey' form4.GetAudience' form4.GetIssuer' form4.GetTokenRequiredClaims' form4.AddContentKeyIdentifierClaim' form4.GetTokenType' form4.GetDetailedTokenType' mytokenverifkey' _context' WidevineLicenseDeliveryConfig' OpenIdDoc);  								TextBoxLogWriteLine ("Created Token Widevine authorization policy for the asset '{0}'"' AssetToProcess.Name);  							}  							contentKeyAuthorizationPolicy.Options.Add (policyOption);  							if (form4.GetDetailedTokenType != ExplorerTokenType.JWTOpenID)// not possible to create a test token if OpenId is used  							 {  								// let display a test token  								X509SigningCredentials signingcred = null;  								if (form4.GetDetailedTokenType == ExplorerTokenType.JWTX509) {  									signingcred = new X509SigningCredentials (form4.GetX509Certificate);  								}  								_context = Program.ConnectAndGetNewContext (_credentials);  								// otherwise cache issues with multiple options  								DynamicEncryption.TokenResult testToken = DynamicEncryption.GetTestToken (AssetToProcess' _context' form1.GetContentKeyType' signingcred' policyOption.Id);  								TextBoxLogWriteLine ("The authorization test token for option #{0} ({1} with Bearer) is:\n{2}"' form4list.IndexOf (form4)' form4.GetTokenType.ToString ()' Constants.Bearer + testToken.TokenString);  								System.Windows.Forms.Clipboard.SetText (Constants.Bearer + testToken.TokenString);  							}  							break;  						default:  							break;  						}  					} catch (Exception e) {  						// Add useful information to the exception  						TextBoxLogWriteLine ("There is a problem when creating the authorization policy for '{0}'."' AssetToProcess.Name' true);  						TextBoxLogWriteLine (e);  						ErrorCreationKey = true;  					}  				}  			}  			contentKeyAuthorizationPolicy.Update ();  		}  	}  	// Let's create the Asset Delivery Policy now  	if (form1.GetDeliveryPolicyType != AssetDeliveryPolicyType.None && form1.EnableDynEnc) {  		if (DelPol != null)// already created  		 {  			try {  				AssetToProcess.DeliveryPolicies.Add (DelPol);  				TextBoxLogWriteLine ("Attached asset delivery policy '{0}' to asset '{1}'."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name);  			} catch (Exception e) {  				TextBoxLogWriteLine ("There is a problem when attaching the delivery policy for '{0}'."' AssetToProcess.Name' true);  				TextBoxLogWriteLine (e);  			}  		} else if (!form1.SelectExistingPolicies)// delivery policy to create (policy==null and user did not select the option to choose an existing policy)  		 {  			var assetDeliveryProtocol = form1.GetAssetDeliveryProtocol;  			if (!form1.PlayReadyPackaging && form1.WidevinePackaging) {  				assetDeliveryProtocol = AssetDeliveryProtocol.Dash;  				// only DASH  			}  			string name = string.Format ("AssetDeliveryPolicy {0} ({1})"' form1.GetContentKeyType.ToString ()' assetDeliveryProtocol.ToString ());  			ErrorCreationKey = false;  			try {  				DelPol = DynamicEncryption.CreateAssetDeliveryPolicyCENC (AssetToProcess' contentKey' form1' name' _context' playreadyAcquisitionUrl: form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0 ? null : form3_CENC.PlayReadyLAurl' playreadyEncodeLAURLForSilverlight: form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady > 0 ? false : form3_CENC.PlayReadyLAurlEncodeForSL' widevineAcquisitionUrl: form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0 ? null : form3_CENC.WidevineLAurl' widevineAcquisitionURLFinal: form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine > 0 ? false : form3_CENC.WidevineFinalLAurl);  				TextBoxLogWriteLine ("Created asset delivery policy '{0}' for asset '{1}'."' DelPol.AssetDeliveryPolicyType' AssetToProcess.Name);  			} catch (Exception e) {  				TextBoxLogWriteLine ("There is a problem when creating the delivery policy for '{0}'."' AssetToProcess.Name' true);  				TextBoxLogWriteLine (e);  				ErrorCreationKey = true;  			}  		}  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The following statement contains a magic number: if (contentkeys.Count () == 0)// no content key existing so we need to create one   {  	ErrorCreationKey = false;  	//    if ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 && form2_CENC.ContentKeyRandomGeneration)  	//// Azure will deliver the PR or WV license and user wants to auto generate the key' so we can create a key with a random content key  	if (!reusekey && ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 && form2_CENC.ContentKeyRandomGeneration))// Azure will deliver the PR or WV license or user wants to auto generate the key' so we can create a key with a random content key  	// changed || form2_CENC.ContentKeyRandomGeneratio to && form2_CENC.ContentKeyRandomGeneratio  	 {  		try {  			contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context);  		} catch (Exception e) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when creating the content key for '{0}'."' AssetToProcess.Name' true);  			TextBoxLogWriteLine (e);  			ErrorCreationKey = true;  		}  		if (!ErrorCreationKey) {  			TextBoxLogWriteLine ("Created key {0} for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  		}  	} else// user wants to deliver with an external PlayReady or Widevine server or want to provide the key' so let's create the key based on what the user input  	 {  		// if the key does not exist in the account (same key id)' let's create it  		if ((firstkeycreation && !reusekey) || form2_CENC.KeyId == null)// if we need to generate a new key id for each asset  		 {  			if (form2_CENC.KeySeed != null)// seed has been given  			 {  				Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  				byte[] bytecontentkey = CommonEncryption.GeneratePlayReadyContentKey (Convert.FromBase64String (form2_CENC.KeySeed)' keyid);  				try {  					contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  				} catch (Exception e) {  					// Add useful information to the exception  					TextBoxLogWriteLine ("There is a problem when creating the content key for '{0}'."' AssetToProcess.Name' true);  					TextBoxLogWriteLine (e);  					ErrorCreationKey = true;  				}  				if (!ErrorCreationKey) {  					TextBoxLogWriteLine ("Created key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  				}  			} else// no seed given' so content key has been setup or not (if external server)  			 {  				Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  				byte[] bytecontentkey = (string.IsNullOrWhiteSpace (form2_CENC.CENCContentKey)) ? DynamicEncryption.GetRandomBuffer (16) : Convert.FromBase64String (form2_CENC.CENCContentKey);  				try {  					contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  				} catch (Exception e) {  					// Add useful information to the exception  					TextBoxLogWriteLine ("There is a problem when creating the content key for asset '{0}'."' AssetToProcess.Name' true);  					TextBoxLogWriteLine (e);  					ErrorCreationKey = true;  				}  				if (!ErrorCreationKey) {  					TextBoxLogWriteLine ("Created key {0} for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  				}  			}  			formerkey = contentKey;  			firstkeycreation = false;  		} else {  			contentKey = formerkey;  			AssetToProcess.ContentKeys.Add (contentKey);  			AssetToProcess.Update ();  			TextBoxLogWriteLine ("Reusing key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  		}  	}  } else// let's use existing content key   {  	contentKey = contentkeys.FirstOrDefault ();  	TextBoxLogWriteLine ("Existing key '{0}' will be used for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The following statement contains a magic number: if (!reusekey && ((form3_CENC.GetNumberOfAuthorizationPolicyOptionsPlayReady + form3_CENC.GetNumberOfAuthorizationPolicyOptionsWidevine) > 0 && form2_CENC.ContentKeyRandomGeneration))// Azure will deliver the PR or WV license or user wants to auto generate the key' so we can create a key with a random content key  // changed || form2_CENC.ContentKeyRandomGeneratio to && form2_CENC.ContentKeyRandomGeneratio   {  	try {  		contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context);  	} catch (Exception e) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when creating the content key for '{0}'."' AssetToProcess.Name' true);  		TextBoxLogWriteLine (e);  		ErrorCreationKey = true;  	}  	if (!ErrorCreationKey) {  		TextBoxLogWriteLine ("Created key {0} for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  	}  } else// user wants to deliver with an external PlayReady or Widevine server or want to provide the key' so let's create the key based on what the user input   {  	// if the key does not exist in the account (same key id)' let's create it  	if ((firstkeycreation && !reusekey) || form2_CENC.KeyId == null)// if we need to generate a new key id for each asset  	 {  		if (form2_CENC.KeySeed != null)// seed has been given  		 {  			Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  			byte[] bytecontentkey = CommonEncryption.GeneratePlayReadyContentKey (Convert.FromBase64String (form2_CENC.KeySeed)' keyid);  			try {  				contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  			} catch (Exception e) {  				// Add useful information to the exception  				TextBoxLogWriteLine ("There is a problem when creating the content key for '{0}'."' AssetToProcess.Name' true);  				TextBoxLogWriteLine (e);  				ErrorCreationKey = true;  			}  			if (!ErrorCreationKey) {  				TextBoxLogWriteLine ("Created key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  			}  		} else// no seed given' so content key has been setup or not (if external server)  		 {  			Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  			byte[] bytecontentkey = (string.IsNullOrWhiteSpace (form2_CENC.CENCContentKey)) ? DynamicEncryption.GetRandomBuffer (16) : Convert.FromBase64String (form2_CENC.CENCContentKey);  			try {  				contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  			} catch (Exception e) {  				// Add useful information to the exception  				TextBoxLogWriteLine ("There is a problem when creating the content key for asset '{0}'."' AssetToProcess.Name' true);  				TextBoxLogWriteLine (e);  				ErrorCreationKey = true;  			}  			if (!ErrorCreationKey) {  				TextBoxLogWriteLine ("Created key {0} for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  			}  		}  		formerkey = contentKey;  		firstkeycreation = false;  	} else {  		contentKey = formerkey;  		AssetToProcess.ContentKeys.Add (contentKey);  		AssetToProcess.Update ();  		TextBoxLogWriteLine ("Reusing key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The following statement contains a magic number: if ((firstkeycreation && !reusekey) || form2_CENC.KeyId == null)// if we need to generate a new key id for each asset   {  	if (form2_CENC.KeySeed != null)// seed has been given  	 {  		Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  		byte[] bytecontentkey = CommonEncryption.GeneratePlayReadyContentKey (Convert.FromBase64String (form2_CENC.KeySeed)' keyid);  		try {  			contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  		} catch (Exception e) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when creating the content key for '{0}'."' AssetToProcess.Name' true);  			TextBoxLogWriteLine (e);  			ErrorCreationKey = true;  		}  		if (!ErrorCreationKey) {  			TextBoxLogWriteLine ("Created key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  		}  	} else// no seed given' so content key has been setup or not (if external server)  	 {  		Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  		byte[] bytecontentkey = (string.IsNullOrWhiteSpace (form2_CENC.CENCContentKey)) ? DynamicEncryption.GetRandomBuffer (16) : Convert.FromBase64String (form2_CENC.CENCContentKey);  		try {  			contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  		} catch (Exception e) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when creating the content key for asset '{0}'."' AssetToProcess.Name' true);  			TextBoxLogWriteLine (e);  			ErrorCreationKey = true;  		}  		if (!ErrorCreationKey) {  			TextBoxLogWriteLine ("Created key {0} for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  		}  	}  	formerkey = contentKey;  	firstkeycreation = false;  } else {  	contentKey = formerkey;  	AssetToProcess.ContentKeys.Add (contentKey);  	AssetToProcess.Update ();  	TextBoxLogWriteLine ("Reusing key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The following statement contains a magic number: if (form2_CENC.KeySeed != null)// seed has been given   {  	Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  	byte[] bytecontentkey = CommonEncryption.GeneratePlayReadyContentKey (Convert.FromBase64String (form2_CENC.KeySeed)' keyid);  	try {  		contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  	} catch (Exception e) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when creating the content key for '{0}'."' AssetToProcess.Name' true);  		TextBoxLogWriteLine (e);  		ErrorCreationKey = true;  	}  	if (!ErrorCreationKey) {  		TextBoxLogWriteLine ("Created key {0} for the asset {1} "' contentKey.Id' AssetToProcess.Name);  	}  } else// no seed given' so content key has been setup or not (if external server)   {  	Guid keyid = (form2_CENC.KeyId == null) ? Guid.NewGuid () : (Guid)form2_CENC.KeyId;  	byte[] bytecontentkey = (string.IsNullOrWhiteSpace (form2_CENC.CENCContentKey)) ? DynamicEncryption.GetRandomBuffer (16) : Convert.FromBase64String (form2_CENC.CENCContentKey);  	try {  		contentKey = DynamicEncryption.CreateCommonTypeContentKeyAndAttachAsset (AssetToProcess' _context' keyid' bytecontentkey);  	} catch (Exception e) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when creating the content key for asset '{0}'."' AssetToProcess.Name' true);  		TextBoxLogWriteLine (e);  		ErrorCreationKey = true;  	}  	if (!ErrorCreationKey) {  		TextBoxLogWriteLine ("Created key {0} for asset '{1}'."' contentKey.Id' AssetToProcess.Name);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,dataGridViewV_RowPostPaint,The following statement contains a magic number: if (e.RowIndex % 2 == 0) {  	foreach (DataGridViewCell c in ((DataGridView)sender).Rows [e.RowIndex].Cells)  		c.Style.BackColor = Color.AliceBlue;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The following statement contains a magic number: if (form.ShowDialog () == System.Windows.Forms.DialogResult.OK) {  	if (MultipleInputAssets)// one job' multiple input assets (stitching)  	 {  		bool Error = false;  		string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name);  		IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  		string tasknameloc = taskname.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  		ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  		AMEStandardTask.InputAssets.AddRange (form.SelectedAssets);  		// Add an output asset to contain the results of the job.    		string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name);  		AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  		// Submit the job    		TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  		try {  			job.Submit ();  		} catch (Exception e) {  			// Add useful information to the exception  			if (SelectedAssets.Count < 5) {  				MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  			TextBoxLogWriteLine (e);  			Error = true;  		}  		if (!Error)  			Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  	} else {  		foreach (IAsset asset in form.SelectedAssets) {  			bool Error = false;  			string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name);  			IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  			string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  			ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  			AMEStandardTask.InputAssets.Add (asset);  			// Add an output asset to contain the results of the job.    			string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' asset.Name);  			AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  			// Submit the job    			TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  			try {  				job.Submit ();  			} catch (Exception e) {  				// Add useful information to the exception  				if (SelectedAssets.Count < 5) {  					MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  				}  				TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  				TextBoxLogWriteLine (e);  				Error = true;  			}  			if (!Error)  				Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  		}  	}  	DotabControlMainSwitch (AMSExplorer.Properties.Resources.TabJobs);  	DoRefreshGridJobV (false);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The following statement contains a magic number: if (form.ShowDialog () == System.Windows.Forms.DialogResult.OK) {  	if (MultipleInputAssets)// one job' multiple input assets (stitching)  	 {  		bool Error = false;  		string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name);  		IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  		string tasknameloc = taskname.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  		ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  		AMEStandardTask.InputAssets.AddRange (form.SelectedAssets);  		// Add an output asset to contain the results of the job.    		string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name);  		AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  		// Submit the job    		TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  		try {  			job.Submit ();  		} catch (Exception e) {  			// Add useful information to the exception  			if (SelectedAssets.Count < 5) {  				MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  			TextBoxLogWriteLine (e);  			Error = true;  		}  		if (!Error)  			Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  	} else {  		foreach (IAsset asset in form.SelectedAssets) {  			bool Error = false;  			string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name);  			IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  			string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  			ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  			AMEStandardTask.InputAssets.Add (asset);  			// Add an output asset to contain the results of the job.    			string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' asset.Name);  			AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  			// Submit the job    			TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  			try {  				job.Submit ();  			} catch (Exception e) {  				// Add useful information to the exception  				if (SelectedAssets.Count < 5) {  					MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  				}  				TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  				TextBoxLogWriteLine (e);  				Error = true;  			}  			if (!Error)  				Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  		}  	}  	DotabControlMainSwitch (AMSExplorer.Properties.Resources.TabJobs);  	DoRefreshGridJobV (false);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The following statement contains a magic number: if (MultipleInputAssets)// one job' multiple input assets (stitching)   {  	bool Error = false;  	string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name);  	IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  	string tasknameloc = taskname.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  	ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  	AMEStandardTask.InputAssets.AddRange (form.SelectedAssets);  	// Add an output asset to contain the results of the job.    	string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name);  	AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  	// Submit the job    	TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  	try {  		job.Submit ();  	} catch (Exception e) {  		// Add useful information to the exception  		if (SelectedAssets.Count < 5) {  			MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  		TextBoxLogWriteLine (e);  		Error = true;  	}  	if (!Error)  		Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  } else {  	foreach (IAsset asset in form.SelectedAssets) {  		bool Error = false;  		string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name);  		IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  		string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  		ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  		AMEStandardTask.InputAssets.Add (asset);  		// Add an output asset to contain the results of the job.    		string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' asset.Name);  		AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  		// Submit the job    		TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  		try {  			job.Submit ();  		} catch (Exception e) {  			// Add useful information to the exception  			if (SelectedAssets.Count < 5) {  				MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  			TextBoxLogWriteLine (e);  			Error = true;  		}  		if (!Error)  			Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The following statement contains a magic number: if (MultipleInputAssets)// one job' multiple input assets (stitching)   {  	bool Error = false;  	string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name);  	IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  	string tasknameloc = taskname.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  	ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  	AMEStandardTask.InputAssets.AddRange (form.SelectedAssets);  	// Add an output asset to contain the results of the job.    	string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' form.SelectedAssets [0].Name);  	AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  	// Submit the job    	TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  	try {  		job.Submit ();  	} catch (Exception e) {  		// Add useful information to the exception  		if (SelectedAssets.Count < 5) {  			MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  		TextBoxLogWriteLine (e);  		Error = true;  	}  	if (!Error)  		Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  } else {  	foreach (IAsset asset in form.SelectedAssets) {  		bool Error = false;  		string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name);  		IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  		string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  		ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  		AMEStandardTask.InputAssets.Add (asset);  		// Add an output asset to contain the results of the job.    		string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' asset.Name);  		AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  		// Submit the job    		TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  		try {  			job.Submit ();  		} catch (Exception e) {  			// Add useful information to the exception  			if (SelectedAssets.Count < 5) {  				MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  			TextBoxLogWriteLine (e);  			Error = true;  		}  		if (!Error)  			Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The following statement contains a magic number: try {  	job.Submit ();  } catch (Exception e) {  	// Add useful information to the exception  	if (SelectedAssets.Count < 5) {  		MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  	TextBoxLogWriteLine (e);  	Error = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The following statement contains a magic number: if (SelectedAssets.Count < 5) {  	MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The following statement contains a magic number: foreach (IAsset asset in form.SelectedAssets) {  	bool Error = false;  	string jobnameloc = form.EncodingJobName.Replace (Constants.NameconvInputasset' asset.Name);  	IJob job = _context.Jobs.Create (jobnameloc' form.JobOptions.Priority);  	string tasknameloc = taskname.Replace (Constants.NameconvInputasset' asset.Name).Replace (Constants.NameconvEncodername' processor.Name + " v" + processor.Version);  	ITask AMEStandardTask = job.Tasks.AddNew (tasknameloc' processor' form.EncodingConfiguration' form.JobOptions.TasksOptionsSetting);  	AMEStandardTask.InputAssets.Add (asset);  	// Add an output asset to contain the results of the job.    	string outputassetnameloc = form.EncodingOutputAssetName.Replace (Constants.NameconvInputasset' asset.Name);  	AMEStandardTask.OutputAssets.AddNew (outputassetnameloc' form.JobOptions.StorageSelected' form.JobOptions.OutputAssetsCreationOptions' form.JobOptions.OutputAssetsFormatOption);  	// Submit the job    	TextBoxLogWriteLine ("Submitting job '{0}'"' jobnameloc);  	try {  		job.Submit ();  	} catch (Exception e) {  		// Add useful information to the exception  		if (SelectedAssets.Count < 5) {  			MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  		TextBoxLogWriteLine (e);  		Error = true;  	}  	if (!Error)  		Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The following statement contains a magic number: try {  	job.Submit ();  } catch (Exception e) {  	// Add useful information to the exception  	if (SelectedAssets.Count < 5) {  		MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobnameloc' true);  	TextBoxLogWriteLine (e);  	Error = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuEncodeWithAMEStandard,The following statement contains a magic number: if (SelectedAssets.Count < 5) {  	MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobnameloc) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,GenerateSigniantCommandLine,The following statement contains a magic number: if (signantservers.Count == 2) {  	server = server + " --server " + signantservers [1];  	// secondary server  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: if (dialogResult != System.Windows.Forms.DialogResult.Cancel) {  	bool fixError = dialogResult == System.Windows.Forms.DialogResult.Yes;  	Task.Run (async () => {  		List<IAssetFile> manifestFiles = new List<IAssetFile> ();  		bool Error = false;  		int skipSize = 0;  		int batchSize = 1000;  		int currentSkipSize = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing all the manifest file since Jan 20' 2016...");  		var manifestFilesQuery = _context.Files.Where (f => f.LastModified > new DateTime (2016' 01' 20));  		while (true) {  			// Enumerate through all manifests (1000 at a time)  			var listfiles = manifestFilesQuery.Skip (skipSize).Take (batchSize).ToList ();  			currentSkipSize += listfiles.Count;  			manifestFiles.AddRange (listfiles.Where (f => (f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase))));  			if (currentSkipSize == batchSize) {  				skipSize += batchSize;  				currentSkipSize = 0;  			} else {  				break;  			}  		}  		TextBoxLogWriteLine ("Found {0} manifest files modified after Jan 20' 2016"' manifestFiles.Count);  		int numberOfProcessedFiles = 0;  		try {  			foreach (var file in manifestFiles) {  				string tempPath = System.IO.Path.GetTempPath ();  				string filePath = Path.Combine (tempPath' file.Name);  				var currentAsset = file.Asset;  				TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				await Task.Factory.StartNew (() => file.Download (filePath));  				StreamReader streamReader = new StreamReader (filePath);  				Encoding fileEncoding = streamReader.CurrentEncoding;  				string datastring = streamReader.ReadToEnd ();  				streamReader.Close ();  				// let's analyse the manifest  				// Prepare the manifest  				bool ManifestMustBeUpdated = false;  				XDocument doc = XDocument.Parse (datastring);  				XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  				var bodyxml = doc.Element (ns + "smil");  				var body2 = bodyxml.Element (ns + "body");  				var switchxml = body2.Element (ns + "switch");  				var video = switchxml.Elements (ns + "video");  				var audio = switchxml.Elements (ns + "audio");  				// video tracks  				foreach (var vtrack in video) {  					var systemBitrate = vtrack.Attribute ("systemBitrate");  					if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  						ManifestMustBeUpdated = true;  						if (fixError)  							systemBitrate.Remove ();  					}  				}  				// audio tracks  				foreach (var vtrack in audio) {  					var systemBitrate = vtrack.Attribute ("systemBitrate");  					if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  						ManifestMustBeUpdated = true;  						if (fixError)  							systemBitrate.Remove ();  					}  				}  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				if (ManifestMustBeUpdated)// file must be modified   				 {  					TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  					if (fixError)// user wants to fix the issue  					 {  						// let's create new manifest in temp folder  						StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  						outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  						outfile.Close ();  						// let's deleyte file online  						string assetFileName = file.Name;  						bool assetFilePrimary = file.IsPrimary;  						file.Delete ();  						await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  						if (File.Exists (filePath)) {  							File.Delete (filePath);  						}  						if (assetFilePrimary) {  							AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  						}  						TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  					}  					numberOfProcessedFiles++;  				}  			}  		} catch (Exception ex) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error) {  			if (fixError) {  				TextBoxLogWriteLine ("{0} manifest file(s) processed."' numberOfProcessedFiles);  			} else {  				TextBoxLogWriteLine ("{0} manifest file(s) need to be processed."' numberOfProcessedFiles);  			}  		}  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: if (dialogResult != System.Windows.Forms.DialogResult.Cancel) {  	bool fixError = dialogResult == System.Windows.Forms.DialogResult.Yes;  	Task.Run (async () => {  		List<IAssetFile> manifestFiles = new List<IAssetFile> ();  		bool Error = false;  		int skipSize = 0;  		int batchSize = 1000;  		int currentSkipSize = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing all the manifest file since Jan 20' 2016...");  		var manifestFilesQuery = _context.Files.Where (f => f.LastModified > new DateTime (2016' 01' 20));  		while (true) {  			// Enumerate through all manifests (1000 at a time)  			var listfiles = manifestFilesQuery.Skip (skipSize).Take (batchSize).ToList ();  			currentSkipSize += listfiles.Count;  			manifestFiles.AddRange (listfiles.Where (f => (f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase))));  			if (currentSkipSize == batchSize) {  				skipSize += batchSize;  				currentSkipSize = 0;  			} else {  				break;  			}  		}  		TextBoxLogWriteLine ("Found {0} manifest files modified after Jan 20' 2016"' manifestFiles.Count);  		int numberOfProcessedFiles = 0;  		try {  			foreach (var file in manifestFiles) {  				string tempPath = System.IO.Path.GetTempPath ();  				string filePath = Path.Combine (tempPath' file.Name);  				var currentAsset = file.Asset;  				TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				await Task.Factory.StartNew (() => file.Download (filePath));  				StreamReader streamReader = new StreamReader (filePath);  				Encoding fileEncoding = streamReader.CurrentEncoding;  				string datastring = streamReader.ReadToEnd ();  				streamReader.Close ();  				// let's analyse the manifest  				// Prepare the manifest  				bool ManifestMustBeUpdated = false;  				XDocument doc = XDocument.Parse (datastring);  				XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  				var bodyxml = doc.Element (ns + "smil");  				var body2 = bodyxml.Element (ns + "body");  				var switchxml = body2.Element (ns + "switch");  				var video = switchxml.Elements (ns + "video");  				var audio = switchxml.Elements (ns + "audio");  				// video tracks  				foreach (var vtrack in video) {  					var systemBitrate = vtrack.Attribute ("systemBitrate");  					if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  						ManifestMustBeUpdated = true;  						if (fixError)  							systemBitrate.Remove ();  					}  				}  				// audio tracks  				foreach (var vtrack in audio) {  					var systemBitrate = vtrack.Attribute ("systemBitrate");  					if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  						ManifestMustBeUpdated = true;  						if (fixError)  							systemBitrate.Remove ();  					}  				}  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				if (ManifestMustBeUpdated)// file must be modified   				 {  					TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  					if (fixError)// user wants to fix the issue  					 {  						// let's create new manifest in temp folder  						StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  						outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  						outfile.Close ();  						// let's deleyte file online  						string assetFileName = file.Name;  						bool assetFilePrimary = file.IsPrimary;  						file.Delete ();  						await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  						if (File.Exists (filePath)) {  							File.Delete (filePath);  						}  						if (assetFilePrimary) {  							AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  						}  						TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  					}  					numberOfProcessedFiles++;  				}  			}  		} catch (Exception ex) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error) {  			if (fixError) {  				TextBoxLogWriteLine ("{0} manifest file(s) processed."' numberOfProcessedFiles);  			} else {  				TextBoxLogWriteLine ("{0} manifest file(s) need to be processed."' numberOfProcessedFiles);  			}  		}  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: if (dialogResult != System.Windows.Forms.DialogResult.Cancel) {  	bool fixError = dialogResult == System.Windows.Forms.DialogResult.Yes;  	Task.Run (async () => {  		List<IAssetFile> manifestFiles = new List<IAssetFile> ();  		bool Error = false;  		int skipSize = 0;  		int batchSize = 1000;  		int currentSkipSize = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing all the manifest file since Jan 20' 2016...");  		var manifestFilesQuery = _context.Files.Where (f => f.LastModified > new DateTime (2016' 01' 20));  		while (true) {  			// Enumerate through all manifests (1000 at a time)  			var listfiles = manifestFilesQuery.Skip (skipSize).Take (batchSize).ToList ();  			currentSkipSize += listfiles.Count;  			manifestFiles.AddRange (listfiles.Where (f => (f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase))));  			if (currentSkipSize == batchSize) {  				skipSize += batchSize;  				currentSkipSize = 0;  			} else {  				break;  			}  		}  		TextBoxLogWriteLine ("Found {0} manifest files modified after Jan 20' 2016"' manifestFiles.Count);  		int numberOfProcessedFiles = 0;  		try {  			foreach (var file in manifestFiles) {  				string tempPath = System.IO.Path.GetTempPath ();  				string filePath = Path.Combine (tempPath' file.Name);  				var currentAsset = file.Asset;  				TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				await Task.Factory.StartNew (() => file.Download (filePath));  				StreamReader streamReader = new StreamReader (filePath);  				Encoding fileEncoding = streamReader.CurrentEncoding;  				string datastring = streamReader.ReadToEnd ();  				streamReader.Close ();  				// let's analyse the manifest  				// Prepare the manifest  				bool ManifestMustBeUpdated = false;  				XDocument doc = XDocument.Parse (datastring);  				XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  				var bodyxml = doc.Element (ns + "smil");  				var body2 = bodyxml.Element (ns + "body");  				var switchxml = body2.Element (ns + "switch");  				var video = switchxml.Elements (ns + "video");  				var audio = switchxml.Elements (ns + "audio");  				// video tracks  				foreach (var vtrack in video) {  					var systemBitrate = vtrack.Attribute ("systemBitrate");  					if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  						ManifestMustBeUpdated = true;  						if (fixError)  							systemBitrate.Remove ();  					}  				}  				// audio tracks  				foreach (var vtrack in audio) {  					var systemBitrate = vtrack.Attribute ("systemBitrate");  					if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  						ManifestMustBeUpdated = true;  						if (fixError)  							systemBitrate.Remove ();  					}  				}  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				if (ManifestMustBeUpdated)// file must be modified   				 {  					TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  					if (fixError)// user wants to fix the issue  					 {  						// let's create new manifest in temp folder  						StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  						outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  						outfile.Close ();  						// let's deleyte file online  						string assetFileName = file.Name;  						bool assetFilePrimary = file.IsPrimary;  						file.Delete ();  						await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  						if (File.Exists (filePath)) {  							File.Delete (filePath);  						}  						if (assetFilePrimary) {  							AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  						}  						TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  					}  					numberOfProcessedFiles++;  				}  			}  		} catch (Exception ex) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error) {  			if (fixError) {  				TextBoxLogWriteLine ("{0} manifest file(s) processed."' numberOfProcessedFiles);  			} else {  				TextBoxLogWriteLine ("{0} manifest file(s) need to be processed."' numberOfProcessedFiles);  			}  		}  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: if (dialogResult != System.Windows.Forms.DialogResult.Cancel) {  	bool fixError = dialogResult == System.Windows.Forms.DialogResult.Yes;  	Task.Run (async () => {  		List<IAssetFile> manifestFiles = new List<IAssetFile> ();  		bool Error = false;  		int skipSize = 0;  		int batchSize = 1000;  		int currentSkipSize = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing all the manifest file since Jan 20' 2016...");  		var manifestFilesQuery = _context.Files.Where (f => f.LastModified > new DateTime (2016' 01' 20));  		while (true) {  			// Enumerate through all manifests (1000 at a time)  			var listfiles = manifestFilesQuery.Skip (skipSize).Take (batchSize).ToList ();  			currentSkipSize += listfiles.Count;  			manifestFiles.AddRange (listfiles.Where (f => (f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase))));  			if (currentSkipSize == batchSize) {  				skipSize += batchSize;  				currentSkipSize = 0;  			} else {  				break;  			}  		}  		TextBoxLogWriteLine ("Found {0} manifest files modified after Jan 20' 2016"' manifestFiles.Count);  		int numberOfProcessedFiles = 0;  		try {  			foreach (var file in manifestFiles) {  				string tempPath = System.IO.Path.GetTempPath ();  				string filePath = Path.Combine (tempPath' file.Name);  				var currentAsset = file.Asset;  				TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				await Task.Factory.StartNew (() => file.Download (filePath));  				StreamReader streamReader = new StreamReader (filePath);  				Encoding fileEncoding = streamReader.CurrentEncoding;  				string datastring = streamReader.ReadToEnd ();  				streamReader.Close ();  				// let's analyse the manifest  				// Prepare the manifest  				bool ManifestMustBeUpdated = false;  				XDocument doc = XDocument.Parse (datastring);  				XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  				var bodyxml = doc.Element (ns + "smil");  				var body2 = bodyxml.Element (ns + "body");  				var switchxml = body2.Element (ns + "switch");  				var video = switchxml.Elements (ns + "video");  				var audio = switchxml.Elements (ns + "audio");  				// video tracks  				foreach (var vtrack in video) {  					var systemBitrate = vtrack.Attribute ("systemBitrate");  					if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  						ManifestMustBeUpdated = true;  						if (fixError)  							systemBitrate.Remove ();  					}  				}  				// audio tracks  				foreach (var vtrack in audio) {  					var systemBitrate = vtrack.Attribute ("systemBitrate");  					if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  						ManifestMustBeUpdated = true;  						if (fixError)  							systemBitrate.Remove ();  					}  				}  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				if (ManifestMustBeUpdated)// file must be modified   				 {  					TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  					if (fixError)// user wants to fix the issue  					 {  						// let's create new manifest in temp folder  						StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  						outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  						outfile.Close ();  						// let's deleyte file online  						string assetFileName = file.Name;  						bool assetFilePrimary = file.IsPrimary;  						file.Delete ();  						await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  						if (File.Exists (filePath)) {  							File.Delete (filePath);  						}  						if (assetFilePrimary) {  							AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  						}  						TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  					}  					numberOfProcessedFiles++;  				}  			}  		} catch (Exception ex) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error) {  			if (fixError) {  				TextBoxLogWriteLine ("{0} manifest file(s) processed."' numberOfProcessedFiles);  			} else {  				TextBoxLogWriteLine ("{0} manifest file(s) need to be processed."' numberOfProcessedFiles);  			}  		}  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: if (dialogResult != System.Windows.Forms.DialogResult.Cancel) {  	bool fixError = dialogResult == System.Windows.Forms.DialogResult.Yes;  	Task.Run (async () => {  		List<IAssetFile> manifestFiles = new List<IAssetFile> ();  		bool Error = false;  		int skipSize = 0;  		int batchSize = 1000;  		int currentSkipSize = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing all the manifest file since Jan 20' 2016...");  		var manifestFilesQuery = _context.Files.Where (f => f.LastModified > new DateTime (2016' 01' 20));  		while (true) {  			// Enumerate through all manifests (1000 at a time)  			var listfiles = manifestFilesQuery.Skip (skipSize).Take (batchSize).ToList ();  			currentSkipSize += listfiles.Count;  			manifestFiles.AddRange (listfiles.Where (f => (f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase))));  			if (currentSkipSize == batchSize) {  				skipSize += batchSize;  				currentSkipSize = 0;  			} else {  				break;  			}  		}  		TextBoxLogWriteLine ("Found {0} manifest files modified after Jan 20' 2016"' manifestFiles.Count);  		int numberOfProcessedFiles = 0;  		try {  			foreach (var file in manifestFiles) {  				string tempPath = System.IO.Path.GetTempPath ();  				string filePath = Path.Combine (tempPath' file.Name);  				var currentAsset = file.Asset;  				TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				await Task.Factory.StartNew (() => file.Download (filePath));  				StreamReader streamReader = new StreamReader (filePath);  				Encoding fileEncoding = streamReader.CurrentEncoding;  				string datastring = streamReader.ReadToEnd ();  				streamReader.Close ();  				// let's analyse the manifest  				// Prepare the manifest  				bool ManifestMustBeUpdated = false;  				XDocument doc = XDocument.Parse (datastring);  				XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  				var bodyxml = doc.Element (ns + "smil");  				var body2 = bodyxml.Element (ns + "body");  				var switchxml = body2.Element (ns + "switch");  				var video = switchxml.Elements (ns + "video");  				var audio = switchxml.Elements (ns + "audio");  				// video tracks  				foreach (var vtrack in video) {  					var systemBitrate = vtrack.Attribute ("systemBitrate");  					if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  						ManifestMustBeUpdated = true;  						if (fixError)  							systemBitrate.Remove ();  					}  				}  				// audio tracks  				foreach (var vtrack in audio) {  					var systemBitrate = vtrack.Attribute ("systemBitrate");  					if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  						ManifestMustBeUpdated = true;  						if (fixError)  							systemBitrate.Remove ();  					}  				}  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				if (ManifestMustBeUpdated)// file must be modified   				 {  					TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  					if (fixError)// user wants to fix the issue  					 {  						// let's create new manifest in temp folder  						StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  						outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  						outfile.Close ();  						// let's deleyte file online  						string assetFileName = file.Name;  						bool assetFilePrimary = file.IsPrimary;  						file.Delete ();  						await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  						if (File.Exists (filePath)) {  							File.Delete (filePath);  						}  						if (assetFilePrimary) {  							AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  						}  						TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  					}  					numberOfProcessedFiles++;  				}  			}  		} catch (Exception ex) {  			// Add useful information to the exception  			TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error) {  			if (fixError) {  				TextBoxLogWriteLine ("{0} manifest file(s) processed."' numberOfProcessedFiles);  			} else {  				TextBoxLogWriteLine ("{0} manifest file(s) need to be processed."' numberOfProcessedFiles);  			}  		}  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: Task.Run (async () => {  	List<IAssetFile> manifestFiles = new List<IAssetFile> ();  	bool Error = false;  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing all the manifest file since Jan 20' 2016...");  	var manifestFilesQuery = _context.Files.Where (f => f.LastModified > new DateTime (2016' 01' 20));  	while (true) {  		// Enumerate through all manifests (1000 at a time)  		var listfiles = manifestFilesQuery.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += listfiles.Count;  		manifestFiles.AddRange (listfiles.Where (f => (f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase))));  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	TextBoxLogWriteLine ("Found {0} manifest files modified after Jan 20' 2016"' manifestFiles.Count);  	int numberOfProcessedFiles = 0;  	try {  		foreach (var file in manifestFiles) {  			string tempPath = System.IO.Path.GetTempPath ();  			string filePath = Path.Combine (tempPath' file.Name);  			var currentAsset = file.Asset;  			TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			await Task.Factory.StartNew (() => file.Download (filePath));  			StreamReader streamReader = new StreamReader (filePath);  			Encoding fileEncoding = streamReader.CurrentEncoding;  			string datastring = streamReader.ReadToEnd ();  			streamReader.Close ();  			// let's analyse the manifest  			// Prepare the manifest  			bool ManifestMustBeUpdated = false;  			XDocument doc = XDocument.Parse (datastring);  			XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  			var bodyxml = doc.Element (ns + "smil");  			var body2 = bodyxml.Element (ns + "body");  			var switchxml = body2.Element (ns + "switch");  			var video = switchxml.Elements (ns + "video");  			var audio = switchxml.Elements (ns + "audio");  			// video tracks  			foreach (var vtrack in video) {  				var systemBitrate = vtrack.Attribute ("systemBitrate");  				if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  					ManifestMustBeUpdated = true;  					if (fixError)  						systemBitrate.Remove ();  				}  			}  			// audio tracks  			foreach (var vtrack in audio) {  				var systemBitrate = vtrack.Attribute ("systemBitrate");  				if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  					ManifestMustBeUpdated = true;  					if (fixError)  						systemBitrate.Remove ();  				}  			}  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			if (ManifestMustBeUpdated)// file must be modified   			 {  				TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  				if (fixError)// user wants to fix the issue  				 {  					// let's create new manifest in temp folder  					StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  					outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  					outfile.Close ();  					// let's deleyte file online  					string assetFileName = file.Name;  					bool assetFilePrimary = file.IsPrimary;  					file.Delete ();  					await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  					if (File.Exists (filePath)) {  						File.Delete (filePath);  					}  					if (assetFilePrimary) {  						AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  					}  					TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  				}  				numberOfProcessedFiles++;  			}  		}  	} catch (Exception ex) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error) {  		if (fixError) {  			TextBoxLogWriteLine ("{0} manifest file(s) processed."' numberOfProcessedFiles);  		} else {  			TextBoxLogWriteLine ("{0} manifest file(s) need to be processed."' numberOfProcessedFiles);  		}  	}  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: Task.Run (async () => {  	List<IAssetFile> manifestFiles = new List<IAssetFile> ();  	bool Error = false;  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing all the manifest file since Jan 20' 2016...");  	var manifestFilesQuery = _context.Files.Where (f => f.LastModified > new DateTime (2016' 01' 20));  	while (true) {  		// Enumerate through all manifests (1000 at a time)  		var listfiles = manifestFilesQuery.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += listfiles.Count;  		manifestFiles.AddRange (listfiles.Where (f => (f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase))));  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	TextBoxLogWriteLine ("Found {0} manifest files modified after Jan 20' 2016"' manifestFiles.Count);  	int numberOfProcessedFiles = 0;  	try {  		foreach (var file in manifestFiles) {  			string tempPath = System.IO.Path.GetTempPath ();  			string filePath = Path.Combine (tempPath' file.Name);  			var currentAsset = file.Asset;  			TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			await Task.Factory.StartNew (() => file.Download (filePath));  			StreamReader streamReader = new StreamReader (filePath);  			Encoding fileEncoding = streamReader.CurrentEncoding;  			string datastring = streamReader.ReadToEnd ();  			streamReader.Close ();  			// let's analyse the manifest  			// Prepare the manifest  			bool ManifestMustBeUpdated = false;  			XDocument doc = XDocument.Parse (datastring);  			XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  			var bodyxml = doc.Element (ns + "smil");  			var body2 = bodyxml.Element (ns + "body");  			var switchxml = body2.Element (ns + "switch");  			var video = switchxml.Elements (ns + "video");  			var audio = switchxml.Elements (ns + "audio");  			// video tracks  			foreach (var vtrack in video) {  				var systemBitrate = vtrack.Attribute ("systemBitrate");  				if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  					ManifestMustBeUpdated = true;  					if (fixError)  						systemBitrate.Remove ();  				}  			}  			// audio tracks  			foreach (var vtrack in audio) {  				var systemBitrate = vtrack.Attribute ("systemBitrate");  				if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  					ManifestMustBeUpdated = true;  					if (fixError)  						systemBitrate.Remove ();  				}  			}  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			if (ManifestMustBeUpdated)// file must be modified   			 {  				TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  				if (fixError)// user wants to fix the issue  				 {  					// let's create new manifest in temp folder  					StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  					outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  					outfile.Close ();  					// let's deleyte file online  					string assetFileName = file.Name;  					bool assetFilePrimary = file.IsPrimary;  					file.Delete ();  					await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  					if (File.Exists (filePath)) {  						File.Delete (filePath);  					}  					if (assetFilePrimary) {  						AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  					}  					TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  				}  				numberOfProcessedFiles++;  			}  		}  	} catch (Exception ex) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error) {  		if (fixError) {  			TextBoxLogWriteLine ("{0} manifest file(s) processed."' numberOfProcessedFiles);  		} else {  			TextBoxLogWriteLine ("{0} manifest file(s) need to be processed."' numberOfProcessedFiles);  		}  	}  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: Task.Run (async () => {  	List<IAssetFile> manifestFiles = new List<IAssetFile> ();  	bool Error = false;  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing all the manifest file since Jan 20' 2016...");  	var manifestFilesQuery = _context.Files.Where (f => f.LastModified > new DateTime (2016' 01' 20));  	while (true) {  		// Enumerate through all manifests (1000 at a time)  		var listfiles = manifestFilesQuery.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += listfiles.Count;  		manifestFiles.AddRange (listfiles.Where (f => (f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase))));  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	TextBoxLogWriteLine ("Found {0} manifest files modified after Jan 20' 2016"' manifestFiles.Count);  	int numberOfProcessedFiles = 0;  	try {  		foreach (var file in manifestFiles) {  			string tempPath = System.IO.Path.GetTempPath ();  			string filePath = Path.Combine (tempPath' file.Name);  			var currentAsset = file.Asset;  			TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			await Task.Factory.StartNew (() => file.Download (filePath));  			StreamReader streamReader = new StreamReader (filePath);  			Encoding fileEncoding = streamReader.CurrentEncoding;  			string datastring = streamReader.ReadToEnd ();  			streamReader.Close ();  			// let's analyse the manifest  			// Prepare the manifest  			bool ManifestMustBeUpdated = false;  			XDocument doc = XDocument.Parse (datastring);  			XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  			var bodyxml = doc.Element (ns + "smil");  			var body2 = bodyxml.Element (ns + "body");  			var switchxml = body2.Element (ns + "switch");  			var video = switchxml.Elements (ns + "video");  			var audio = switchxml.Elements (ns + "audio");  			// video tracks  			foreach (var vtrack in video) {  				var systemBitrate = vtrack.Attribute ("systemBitrate");  				if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  					ManifestMustBeUpdated = true;  					if (fixError)  						systemBitrate.Remove ();  				}  			}  			// audio tracks  			foreach (var vtrack in audio) {  				var systemBitrate = vtrack.Attribute ("systemBitrate");  				if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  					ManifestMustBeUpdated = true;  					if (fixError)  						systemBitrate.Remove ();  				}  			}  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			if (ManifestMustBeUpdated)// file must be modified   			 {  				TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  				if (fixError)// user wants to fix the issue  				 {  					// let's create new manifest in temp folder  					StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  					outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  					outfile.Close ();  					// let's deleyte file online  					string assetFileName = file.Name;  					bool assetFilePrimary = file.IsPrimary;  					file.Delete ();  					await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  					if (File.Exists (filePath)) {  						File.Delete (filePath);  					}  					if (assetFilePrimary) {  						AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  					}  					TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  				}  				numberOfProcessedFiles++;  			}  		}  	} catch (Exception ex) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error) {  		if (fixError) {  			TextBoxLogWriteLine ("{0} manifest file(s) processed."' numberOfProcessedFiles);  		} else {  			TextBoxLogWriteLine ("{0} manifest file(s) need to be processed."' numberOfProcessedFiles);  		}  	}  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: Task.Run (async () => {  	List<IAssetFile> manifestFiles = new List<IAssetFile> ();  	bool Error = false;  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing all the manifest file since Jan 20' 2016...");  	var manifestFilesQuery = _context.Files.Where (f => f.LastModified > new DateTime (2016' 01' 20));  	while (true) {  		// Enumerate through all manifests (1000 at a time)  		var listfiles = manifestFilesQuery.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += listfiles.Count;  		manifestFiles.AddRange (listfiles.Where (f => (f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase))));  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	TextBoxLogWriteLine ("Found {0} manifest files modified after Jan 20' 2016"' manifestFiles.Count);  	int numberOfProcessedFiles = 0;  	try {  		foreach (var file in manifestFiles) {  			string tempPath = System.IO.Path.GetTempPath ();  			string filePath = Path.Combine (tempPath' file.Name);  			var currentAsset = file.Asset;  			TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			await Task.Factory.StartNew (() => file.Download (filePath));  			StreamReader streamReader = new StreamReader (filePath);  			Encoding fileEncoding = streamReader.CurrentEncoding;  			string datastring = streamReader.ReadToEnd ();  			streamReader.Close ();  			// let's analyse the manifest  			// Prepare the manifest  			bool ManifestMustBeUpdated = false;  			XDocument doc = XDocument.Parse (datastring);  			XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  			var bodyxml = doc.Element (ns + "smil");  			var body2 = bodyxml.Element (ns + "body");  			var switchxml = body2.Element (ns + "switch");  			var video = switchxml.Elements (ns + "video");  			var audio = switchxml.Elements (ns + "audio");  			// video tracks  			foreach (var vtrack in video) {  				var systemBitrate = vtrack.Attribute ("systemBitrate");  				if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  					ManifestMustBeUpdated = true;  					if (fixError)  						systemBitrate.Remove ();  				}  			}  			// audio tracks  			foreach (var vtrack in audio) {  				var systemBitrate = vtrack.Attribute ("systemBitrate");  				if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  					ManifestMustBeUpdated = true;  					if (fixError)  						systemBitrate.Remove ();  				}  			}  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			if (ManifestMustBeUpdated)// file must be modified   			 {  				TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  				if (fixError)// user wants to fix the issue  				 {  					// let's create new manifest in temp folder  					StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  					outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  					outfile.Close ();  					// let's deleyte file online  					string assetFileName = file.Name;  					bool assetFilePrimary = file.IsPrimary;  					file.Delete ();  					await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  					if (File.Exists (filePath)) {  						File.Delete (filePath);  					}  					if (assetFilePrimary) {  						AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  					}  					TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  				}  				numberOfProcessedFiles++;  			}  		}  	} catch (Exception ex) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error) {  		if (fixError) {  			TextBoxLogWriteLine ("{0} manifest file(s) processed."' numberOfProcessedFiles);  		} else {  			TextBoxLogWriteLine ("{0} manifest file(s) need to be processed."' numberOfProcessedFiles);  		}  	}  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: Task.Run (async () => {  	List<IAssetFile> manifestFiles = new List<IAssetFile> ();  	bool Error = false;  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing all the manifest file since Jan 20' 2016...");  	var manifestFilesQuery = _context.Files.Where (f => f.LastModified > new DateTime (2016' 01' 20));  	while (true) {  		// Enumerate through all manifests (1000 at a time)  		var listfiles = manifestFilesQuery.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += listfiles.Count;  		manifestFiles.AddRange (listfiles.Where (f => (f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase))));  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	TextBoxLogWriteLine ("Found {0} manifest files modified after Jan 20' 2016"' manifestFiles.Count);  	int numberOfProcessedFiles = 0;  	try {  		foreach (var file in manifestFiles) {  			string tempPath = System.IO.Path.GetTempPath ();  			string filePath = Path.Combine (tempPath' file.Name);  			var currentAsset = file.Asset;  			TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			await Task.Factory.StartNew (() => file.Download (filePath));  			StreamReader streamReader = new StreamReader (filePath);  			Encoding fileEncoding = streamReader.CurrentEncoding;  			string datastring = streamReader.ReadToEnd ();  			streamReader.Close ();  			// let's analyse the manifest  			// Prepare the manifest  			bool ManifestMustBeUpdated = false;  			XDocument doc = XDocument.Parse (datastring);  			XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  			var bodyxml = doc.Element (ns + "smil");  			var body2 = bodyxml.Element (ns + "body");  			var switchxml = body2.Element (ns + "switch");  			var video = switchxml.Elements (ns + "video");  			var audio = switchxml.Elements (ns + "audio");  			// video tracks  			foreach (var vtrack in video) {  				var systemBitrate = vtrack.Attribute ("systemBitrate");  				if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  					ManifestMustBeUpdated = true;  					if (fixError)  						systemBitrate.Remove ();  				}  			}  			// audio tracks  			foreach (var vtrack in audio) {  				var systemBitrate = vtrack.Attribute ("systemBitrate");  				if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  					ManifestMustBeUpdated = true;  					if (fixError)  						systemBitrate.Remove ();  				}  			}  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			if (ManifestMustBeUpdated)// file must be modified   			 {  				TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  				if (fixError)// user wants to fix the issue  				 {  					// let's create new manifest in temp folder  					StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  					outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  					outfile.Close ();  					// let's deleyte file online  					string assetFileName = file.Name;  					bool assetFilePrimary = file.IsPrimary;  					file.Delete ();  					await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  					if (File.Exists (filePath)) {  						File.Delete (filePath);  					}  					if (assetFilePrimary) {  						AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  					}  					TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  				}  				numberOfProcessedFiles++;  			}  		}  	} catch (Exception ex) {  		// Add useful information to the exception  		TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error) {  		if (fixError) {  			TextBoxLogWriteLine ("{0} manifest file(s) processed."' numberOfProcessedFiles);  		} else {  			TextBoxLogWriteLine ("{0} manifest file(s) need to be processed."' numberOfProcessedFiles);  		}  	}  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: try {  	foreach (var file in manifestFiles) {  		string tempPath = System.IO.Path.GetTempPath ();  		string filePath = Path.Combine (tempPath' file.Name);  		var currentAsset = file.Asset;  		TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		await Task.Factory.StartNew (() => file.Download (filePath));  		StreamReader streamReader = new StreamReader (filePath);  		Encoding fileEncoding = streamReader.CurrentEncoding;  		string datastring = streamReader.ReadToEnd ();  		streamReader.Close ();  		// let's analyse the manifest  		// Prepare the manifest  		bool ManifestMustBeUpdated = false;  		XDocument doc = XDocument.Parse (datastring);  		XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  		var bodyxml = doc.Element (ns + "smil");  		var body2 = bodyxml.Element (ns + "body");  		var switchxml = body2.Element (ns + "switch");  		var video = switchxml.Elements (ns + "video");  		var audio = switchxml.Elements (ns + "audio");  		// video tracks  		foreach (var vtrack in video) {  			var systemBitrate = vtrack.Attribute ("systemBitrate");  			if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  				ManifestMustBeUpdated = true;  				if (fixError)  					systemBitrate.Remove ();  			}  		}  		// audio tracks  		foreach (var vtrack in audio) {  			var systemBitrate = vtrack.Attribute ("systemBitrate");  			if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  				ManifestMustBeUpdated = true;  				if (fixError)  					systemBitrate.Remove ();  			}  		}  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		if (ManifestMustBeUpdated)// file must be modified   		 {  			TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  			if (fixError)// user wants to fix the issue  			 {  				// let's create new manifest in temp folder  				StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  				outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  				outfile.Close ();  				// let's deleyte file online  				string assetFileName = file.Name;  				bool assetFilePrimary = file.IsPrimary;  				file.Delete ();  				await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				if (assetFilePrimary) {  					AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  				}  				TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  			}  			numberOfProcessedFiles++;  		}  	}  } catch (Exception ex) {  	// Add useful information to the exception  	TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  	TextBoxLogWriteLine (ex);  	Error = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: try {  	foreach (var file in manifestFiles) {  		string tempPath = System.IO.Path.GetTempPath ();  		string filePath = Path.Combine (tempPath' file.Name);  		var currentAsset = file.Asset;  		TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		await Task.Factory.StartNew (() => file.Download (filePath));  		StreamReader streamReader = new StreamReader (filePath);  		Encoding fileEncoding = streamReader.CurrentEncoding;  		string datastring = streamReader.ReadToEnd ();  		streamReader.Close ();  		// let's analyse the manifest  		// Prepare the manifest  		bool ManifestMustBeUpdated = false;  		XDocument doc = XDocument.Parse (datastring);  		XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  		var bodyxml = doc.Element (ns + "smil");  		var body2 = bodyxml.Element (ns + "body");  		var switchxml = body2.Element (ns + "switch");  		var video = switchxml.Elements (ns + "video");  		var audio = switchxml.Elements (ns + "audio");  		// video tracks  		foreach (var vtrack in video) {  			var systemBitrate = vtrack.Attribute ("systemBitrate");  			if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  				ManifestMustBeUpdated = true;  				if (fixError)  					systemBitrate.Remove ();  			}  		}  		// audio tracks  		foreach (var vtrack in audio) {  			var systemBitrate = vtrack.Attribute ("systemBitrate");  			if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  				ManifestMustBeUpdated = true;  				if (fixError)  					systemBitrate.Remove ();  			}  		}  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		if (ManifestMustBeUpdated)// file must be modified   		 {  			TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  			if (fixError)// user wants to fix the issue  			 {  				// let's create new manifest in temp folder  				StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  				outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  				outfile.Close ();  				// let's deleyte file online  				string assetFileName = file.Name;  				bool assetFilePrimary = file.IsPrimary;  				file.Delete ();  				await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				if (assetFilePrimary) {  					AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  				}  				TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  			}  			numberOfProcessedFiles++;  		}  	}  } catch (Exception ex) {  	// Add useful information to the exception  	TextBoxLogWriteLine ("There is a problem when processing the manifest file(s)"' true);  	TextBoxLogWriteLine (ex);  	Error = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: foreach (var file in manifestFiles) {  	string tempPath = System.IO.Path.GetTempPath ();  	string filePath = Path.Combine (tempPath' file.Name);  	var currentAsset = file.Asset;  	TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  	if (File.Exists (filePath)) {  		File.Delete (filePath);  	}  	await Task.Factory.StartNew (() => file.Download (filePath));  	StreamReader streamReader = new StreamReader (filePath);  	Encoding fileEncoding = streamReader.CurrentEncoding;  	string datastring = streamReader.ReadToEnd ();  	streamReader.Close ();  	// let's analyse the manifest  	// Prepare the manifest  	bool ManifestMustBeUpdated = false;  	XDocument doc = XDocument.Parse (datastring);  	XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  	var bodyxml = doc.Element (ns + "smil");  	var body2 = bodyxml.Element (ns + "body");  	var switchxml = body2.Element (ns + "switch");  	var video = switchxml.Elements (ns + "video");  	var audio = switchxml.Elements (ns + "audio");  	// video tracks  	foreach (var vtrack in video) {  		var systemBitrate = vtrack.Attribute ("systemBitrate");  		if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  			ManifestMustBeUpdated = true;  			if (fixError)  				systemBitrate.Remove ();  		}  	}  	// audio tracks  	foreach (var vtrack in audio) {  		var systemBitrate = vtrack.Attribute ("systemBitrate");  		if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  			ManifestMustBeUpdated = true;  			if (fixError)  				systemBitrate.Remove ();  		}  	}  	if (File.Exists (filePath)) {  		File.Delete (filePath);  	}  	if (ManifestMustBeUpdated)// file must be modified   	 {  		TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  		if (fixError)// user wants to fix the issue  		 {  			// let's create new manifest in temp folder  			StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  			outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  			outfile.Close ();  			// let's deleyte file online  			string assetFileName = file.Name;  			bool assetFilePrimary = file.IsPrimary;  			file.Delete ();  			await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			if (assetFilePrimary) {  				AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  			}  			TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  		}  		numberOfProcessedFiles++;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: foreach (var file in manifestFiles) {  	string tempPath = System.IO.Path.GetTempPath ();  	string filePath = Path.Combine (tempPath' file.Name);  	var currentAsset = file.Asset;  	TextBoxLogWriteLine ("Reading file '{0}' of asset ({1})"' file.Name' currentAsset.Id);  	if (File.Exists (filePath)) {  		File.Delete (filePath);  	}  	await Task.Factory.StartNew (() => file.Download (filePath));  	StreamReader streamReader = new StreamReader (filePath);  	Encoding fileEncoding = streamReader.CurrentEncoding;  	string datastring = streamReader.ReadToEnd ();  	streamReader.Close ();  	// let's analyse the manifest  	// Prepare the manifest  	bool ManifestMustBeUpdated = false;  	XDocument doc = XDocument.Parse (datastring);  	XNamespace ns = "http://www.w3.org/2001/SMIL20/Language";  	var bodyxml = doc.Element (ns + "smil");  	var body2 = bodyxml.Element (ns + "body");  	var switchxml = body2.Element (ns + "switch");  	var video = switchxml.Elements (ns + "video");  	var audio = switchxml.Elements (ns + "audio");  	// video tracks  	foreach (var vtrack in video) {  		var systemBitrate = vtrack.Attribute ("systemBitrate");  		if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  			ManifestMustBeUpdated = true;  			if (fixError)  				systemBitrate.Remove ();  		}  	}  	// audio tracks  	foreach (var vtrack in audio) {  		var systemBitrate = vtrack.Attribute ("systemBitrate");  		if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  			ManifestMustBeUpdated = true;  			if (fixError)  				systemBitrate.Remove ();  		}  	}  	if (File.Exists (filePath)) {  		File.Delete (filePath);  	}  	if (ManifestMustBeUpdated)// file must be modified   	 {  		TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) needs to be updated..."' file.Name' currentAsset.Id' true);  		if (fixError)// user wants to fix the issue  		 {  			// let's create new manifest in temp folder  			StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  			outfile.Write (doc.Declaration.ToString () + Environment.NewLine + doc.ToString ());  			outfile.Close ();  			// let's deleyte file online  			string assetFileName = file.Name;  			bool assetFilePrimary = file.IsPrimary;  			file.Delete ();  			await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' currentAsset));  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			if (assetFilePrimary) {  				AssetInfo.SetFileAsPrimary (currentAsset' assetFileName);  			}  			TextBoxLogWriteLine ("Manifest file '{0}' of asset ({1}) has been updated."' file.Name' currentAsset.Id);  		}  		numberOfProcessedFiles++;  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: foreach (var vtrack in video) {  	var systemBitrate = vtrack.Attribute ("systemBitrate");  	if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  		ManifestMustBeUpdated = true;  		if (fixError)  			systemBitrate.Remove ();  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 99000)) {  	ManifestMustBeUpdated = true;  	if (fixError)  		systemBitrate.Remove ();  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: foreach (var vtrack in audio) {  	var systemBitrate = vtrack.Attribute ("systemBitrate");  	if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  		ManifestMustBeUpdated = true;  		if (fixError)  			systemBitrate.Remove ();  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoFixSystemBitrate,The following statement contains a magic number: if (systemBitrate != null && (int.Parse (systemBitrate.Value) < 1000)) {  	ManifestMustBeUpdated = true;  	if (fixError)  		systemBitrate.Remove ();  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to test the query of all asset files ?"' "Files query"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	string valueBatch = "1000";  	string valuePosition = "0";  	if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each file tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  		Task.Run (async () => {  			int skipSize = Convert.ToInt32 (valuePosition);  			int batchSize = Convert.ToInt32 (valueBatch);  			if (batchSize > 1000) {  				batchSize = 1000;  			}  			int i = 0;  			// let's build the list of tasks  			TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  			while (true) {  				bool Error = false;  				IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  				List<IAssetFile> listfilel = new List<IAssetFile> ();  				// Enumerate through all asset files (batchSize at a time)  				try {  					listfile = _context.Files.Skip (skipSize).Take (batchSize);  					listfilel = listfile.ToList ();  				} catch (Exception ex) {  					if (batchSize > 1) {  						TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  					} else {  						TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  					}  					TextBoxLogWriteLine (ex);  					Error = true;  				}  				if (!Error && listfilel.Count == 0) {  					break;  				}  				skipSize += batchSize;  				i++;  				if (i % 5 == 0) {  					TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  				}  			}  			TextBoxLogWriteLine ("File listing completed.");  		});  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to test the query of all asset files ?"' "Files query"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	string valueBatch = "1000";  	string valuePosition = "0";  	if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each file tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  		Task.Run (async () => {  			int skipSize = Convert.ToInt32 (valuePosition);  			int batchSize = Convert.ToInt32 (valueBatch);  			if (batchSize > 1000) {  				batchSize = 1000;  			}  			int i = 0;  			// let's build the list of tasks  			TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  			while (true) {  				bool Error = false;  				IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  				List<IAssetFile> listfilel = new List<IAssetFile> ();  				// Enumerate through all asset files (batchSize at a time)  				try {  					listfile = _context.Files.Skip (skipSize).Take (batchSize);  					listfilel = listfile.ToList ();  				} catch (Exception ex) {  					if (batchSize > 1) {  						TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  					} else {  						TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  					}  					TextBoxLogWriteLine (ex);  					Error = true;  				}  				if (!Error && listfilel.Count == 0) {  					break;  				}  				skipSize += batchSize;  				i++;  				if (i % 5 == 0) {  					TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  				}  			}  			TextBoxLogWriteLine ("File listing completed.");  		});  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to test the query of all asset files ?"' "Files query"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	string valueBatch = "1000";  	string valuePosition = "0";  	if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each file tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  		Task.Run (async () => {  			int skipSize = Convert.ToInt32 (valuePosition);  			int batchSize = Convert.ToInt32 (valueBatch);  			if (batchSize > 1000) {  				batchSize = 1000;  			}  			int i = 0;  			// let's build the list of tasks  			TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  			while (true) {  				bool Error = false;  				IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  				List<IAssetFile> listfilel = new List<IAssetFile> ();  				// Enumerate through all asset files (batchSize at a time)  				try {  					listfile = _context.Files.Skip (skipSize).Take (batchSize);  					listfilel = listfile.ToList ();  				} catch (Exception ex) {  					if (batchSize > 1) {  						TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  					} else {  						TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  					}  					TextBoxLogWriteLine (ex);  					Error = true;  				}  				if (!Error && listfilel.Count == 0) {  					break;  				}  				skipSize += batchSize;  				i++;  				if (i % 5 == 0) {  					TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  				}  			}  			TextBoxLogWriteLine ("File listing completed.");  		});  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to test the query of all asset files ?"' "Files query"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	string valueBatch = "1000";  	string valuePosition = "0";  	if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each file tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  		Task.Run (async () => {  			int skipSize = Convert.ToInt32 (valuePosition);  			int batchSize = Convert.ToInt32 (valueBatch);  			if (batchSize > 1000) {  				batchSize = 1000;  			}  			int i = 0;  			// let's build the list of tasks  			TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  			while (true) {  				bool Error = false;  				IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  				List<IAssetFile> listfilel = new List<IAssetFile> ();  				// Enumerate through all asset files (batchSize at a time)  				try {  					listfile = _context.Files.Skip (skipSize).Take (batchSize);  					listfilel = listfile.ToList ();  				} catch (Exception ex) {  					if (batchSize > 1) {  						TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  					} else {  						TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  					}  					TextBoxLogWriteLine (ex);  					Error = true;  				}  				if (!Error && listfilel.Count == 0) {  					break;  				}  				skipSize += batchSize;  				i++;  				if (i % 5 == 0) {  					TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  				}  			}  			TextBoxLogWriteLine ("File listing completed.");  		});  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each file tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  	Task.Run (async () => {  		int skipSize = Convert.ToInt32 (valuePosition);  		int batchSize = Convert.ToInt32 (valueBatch);  		if (batchSize > 1000) {  			batchSize = 1000;  		}  		int i = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  		while (true) {  			bool Error = false;  			IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  			List<IAssetFile> listfilel = new List<IAssetFile> ();  			// Enumerate through all asset files (batchSize at a time)  			try {  				listfile = _context.Files.Skip (skipSize).Take (batchSize);  				listfilel = listfile.ToList ();  			} catch (Exception ex) {  				if (batchSize > 1) {  					TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  				} else {  					TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  				}  				TextBoxLogWriteLine (ex);  				Error = true;  			}  			if (!Error && listfilel.Count == 0) {  				break;  			}  			skipSize += batchSize;  			i++;  			if (i % 5 == 0) {  				TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  			}  		}  		TextBoxLogWriteLine ("File listing completed.");  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each file tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  	Task.Run (async () => {  		int skipSize = Convert.ToInt32 (valuePosition);  		int batchSize = Convert.ToInt32 (valueBatch);  		if (batchSize > 1000) {  			batchSize = 1000;  		}  		int i = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  		while (true) {  			bool Error = false;  			IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  			List<IAssetFile> listfilel = new List<IAssetFile> ();  			// Enumerate through all asset files (batchSize at a time)  			try {  				listfile = _context.Files.Skip (skipSize).Take (batchSize);  				listfilel = listfile.ToList ();  			} catch (Exception ex) {  				if (batchSize > 1) {  					TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  				} else {  					TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  				}  				TextBoxLogWriteLine (ex);  				Error = true;  			}  			if (!Error && listfilel.Count == 0) {  				break;  			}  			skipSize += batchSize;  			i++;  			if (i % 5 == 0) {  				TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  			}  		}  		TextBoxLogWriteLine ("File listing completed.");  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each file tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  	Task.Run (async () => {  		int skipSize = Convert.ToInt32 (valuePosition);  		int batchSize = Convert.ToInt32 (valueBatch);  		if (batchSize > 1000) {  			batchSize = 1000;  		}  		int i = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  		while (true) {  			bool Error = false;  			IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  			List<IAssetFile> listfilel = new List<IAssetFile> ();  			// Enumerate through all asset files (batchSize at a time)  			try {  				listfile = _context.Files.Skip (skipSize).Take (batchSize);  				listfilel = listfile.ToList ();  			} catch (Exception ex) {  				if (batchSize > 1) {  					TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  				} else {  					TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  				}  				TextBoxLogWriteLine (ex);  				Error = true;  			}  			if (!Error && listfilel.Count == 0) {  				break;  			}  			skipSize += batchSize;  			i++;  			if (i % 5 == 0) {  				TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  			}  		}  		TextBoxLogWriteLine ("File listing completed.");  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each file tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  	Task.Run (async () => {  		int skipSize = Convert.ToInt32 (valuePosition);  		int batchSize = Convert.ToInt32 (valueBatch);  		if (batchSize > 1000) {  			batchSize = 1000;  		}  		int i = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  		while (true) {  			bool Error = false;  			IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  			List<IAssetFile> listfilel = new List<IAssetFile> ();  			// Enumerate through all asset files (batchSize at a time)  			try {  				listfile = _context.Files.Skip (skipSize).Take (batchSize);  				listfilel = listfile.ToList ();  			} catch (Exception ex) {  				if (batchSize > 1) {  					TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  				} else {  					TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  				}  				TextBoxLogWriteLine (ex);  				Error = true;  			}  			if (!Error && listfilel.Count == 0) {  				break;  			}  			skipSize += batchSize;  			i++;  			if (i % 5 == 0) {  				TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  			}  		}  		TextBoxLogWriteLine ("File listing completed.");  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: Task.Run (async () => {  	int skipSize = Convert.ToInt32 (valuePosition);  	int batchSize = Convert.ToInt32 (valueBatch);  	if (batchSize > 1000) {  		batchSize = 1000;  	}  	int i = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  	while (true) {  		bool Error = false;  		IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  		List<IAssetFile> listfilel = new List<IAssetFile> ();  		// Enumerate through all asset files (batchSize at a time)  		try {  			listfile = _context.Files.Skip (skipSize).Take (batchSize);  			listfilel = listfile.ToList ();  		} catch (Exception ex) {  			if (batchSize > 1) {  				TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  			} else {  				TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  			}  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error && listfilel.Count == 0) {  			break;  		}  		skipSize += batchSize;  		i++;  		if (i % 5 == 0) {  			TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  		}  	}  	TextBoxLogWriteLine ("File listing completed.");  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: Task.Run (async () => {  	int skipSize = Convert.ToInt32 (valuePosition);  	int batchSize = Convert.ToInt32 (valueBatch);  	if (batchSize > 1000) {  		batchSize = 1000;  	}  	int i = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  	while (true) {  		bool Error = false;  		IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  		List<IAssetFile> listfilel = new List<IAssetFile> ();  		// Enumerate through all asset files (batchSize at a time)  		try {  			listfile = _context.Files.Skip (skipSize).Take (batchSize);  			listfilel = listfile.ToList ();  		} catch (Exception ex) {  			if (batchSize > 1) {  				TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  			} else {  				TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  			}  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error && listfilel.Count == 0) {  			break;  		}  		skipSize += batchSize;  		i++;  		if (i % 5 == 0) {  			TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  		}  	}  	TextBoxLogWriteLine ("File listing completed.");  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: Task.Run (async () => {  	int skipSize = Convert.ToInt32 (valuePosition);  	int batchSize = Convert.ToInt32 (valueBatch);  	if (batchSize > 1000) {  		batchSize = 1000;  	}  	int i = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  	while (true) {  		bool Error = false;  		IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  		List<IAssetFile> listfilel = new List<IAssetFile> ();  		// Enumerate through all asset files (batchSize at a time)  		try {  			listfile = _context.Files.Skip (skipSize).Take (batchSize);  			listfilel = listfile.ToList ();  		} catch (Exception ex) {  			if (batchSize > 1) {  				TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  			} else {  				TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  			}  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error && listfilel.Count == 0) {  			break;  		}  		skipSize += batchSize;  		i++;  		if (i % 5 == 0) {  			TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  		}  	}  	TextBoxLogWriteLine ("File listing completed.");  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: Task.Run (async () => {  	int skipSize = Convert.ToInt32 (valuePosition);  	int batchSize = Convert.ToInt32 (valueBatch);  	if (batchSize > 1000) {  		batchSize = 1000;  	}  	int i = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing the files... There are {0} files in the account."' _context.Files.Count ());  	while (true) {  		bool Error = false;  		IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  		List<IAssetFile> listfilel = new List<IAssetFile> ();  		// Enumerate through all asset files (batchSize at a time)  		try {  			listfile = _context.Files.Skip (skipSize).Take (batchSize);  			listfilel = listfile.ToList ();  		} catch (Exception ex) {  			if (batchSize > 1) {  				TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  			} else {  				TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  			}  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error && listfilel.Count == 0) {  			break;  		}  		skipSize += batchSize;  		i++;  		if (i % 5 == 0) {  			TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  		}  	}  	TextBoxLogWriteLine ("File listing completed.");  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (batchSize > 1000) {  	batchSize = 1000;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (batchSize > 1000) {  	batchSize = 1000;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: batchSize = 1000;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: while (true) {  	bool Error = false;  	IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  	List<IAssetFile> listfilel = new List<IAssetFile> ();  	// Enumerate through all asset files (batchSize at a time)  	try {  		listfile = _context.Files.Skip (skipSize).Take (batchSize);  		listfilel = listfile.ToList ();  	} catch (Exception ex) {  		if (batchSize > 1) {  			TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  		} else {  			TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  		}  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error && listfilel.Count == 0) {  		break;  	}  	skipSize += batchSize;  	i++;  	if (i % 5 == 0) {  		TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: while (true) {  	bool Error = false;  	IQueryable<IAssetFile> listfile = new List<IAssetFile> ().AsQueryable ();  	List<IAssetFile> listfilel = new List<IAssetFile> ();  	// Enumerate through all asset files (batchSize at a time)  	try {  		listfile = _context.Files.Skip (skipSize).Take (batchSize);  		listfilel = listfile.ToList ();  	} catch (Exception ex) {  		if (batchSize > 1) {  			TextBoxLogWriteLine ("Error accessing file(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  		} else {  			TextBoxLogWriteLine ("Error accessing file. Position: {0}"' skipSize' true);  		}  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error && listfilel.Count == 0) {  		break;  	}  	skipSize += batchSize;  	i++;  	if (i % 5 == 0) {  		TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (i % 5 == 0) {  	TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: if (i % 5 == 0) {  	TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetFilesTest,The following statement contains a magic number: TextBoxLogWriteLine ("Files from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to test the query of all assets  ?"' "Assets query"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	string valueBatch = "1000";  	string valuePosition = "0";  	if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each asset tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  		Task.Run (async () => {  			int skipSize = Convert.ToInt32 (valuePosition);  			int batchSize = Convert.ToInt32 (valueBatch);  			if (batchSize > 1000) {  				batchSize = 1000;  			}  			int i = 0;  			// let's build the list of tasks  			TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  			while (true) {  				bool Error = false;  				IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  				List<IAsset> listassetl = new List<IAsset> ();  				// Enumerate through all asset files (batchSize at a time)  				try {  					assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  					listassetl = assetfile.ToList ();  				} catch (Exception ex) {  					if (batchSize > 1) {  						TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  					} else {  						TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  					}  					TextBoxLogWriteLine (ex);  					Error = true;  				}  				if (!Error && listassetl.Count == 0) {  					break;  				}  				skipSize += batchSize;  				i++;  				if (i % 5 == 0) {  					TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  				}  			}  			TextBoxLogWriteLine ("Asset listing completed.");  		});  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to test the query of all assets  ?"' "Assets query"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	string valueBatch = "1000";  	string valuePosition = "0";  	if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each asset tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  		Task.Run (async () => {  			int skipSize = Convert.ToInt32 (valuePosition);  			int batchSize = Convert.ToInt32 (valueBatch);  			if (batchSize > 1000) {  				batchSize = 1000;  			}  			int i = 0;  			// let's build the list of tasks  			TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  			while (true) {  				bool Error = false;  				IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  				List<IAsset> listassetl = new List<IAsset> ();  				// Enumerate through all asset files (batchSize at a time)  				try {  					assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  					listassetl = assetfile.ToList ();  				} catch (Exception ex) {  					if (batchSize > 1) {  						TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  					} else {  						TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  					}  					TextBoxLogWriteLine (ex);  					Error = true;  				}  				if (!Error && listassetl.Count == 0) {  					break;  				}  				skipSize += batchSize;  				i++;  				if (i % 5 == 0) {  					TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  				}  			}  			TextBoxLogWriteLine ("Asset listing completed.");  		});  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to test the query of all assets  ?"' "Assets query"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	string valueBatch = "1000";  	string valuePosition = "0";  	if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each asset tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  		Task.Run (async () => {  			int skipSize = Convert.ToInt32 (valuePosition);  			int batchSize = Convert.ToInt32 (valueBatch);  			if (batchSize > 1000) {  				batchSize = 1000;  			}  			int i = 0;  			// let's build the list of tasks  			TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  			while (true) {  				bool Error = false;  				IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  				List<IAsset> listassetl = new List<IAsset> ();  				// Enumerate through all asset files (batchSize at a time)  				try {  					assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  					listassetl = assetfile.ToList ();  				} catch (Exception ex) {  					if (batchSize > 1) {  						TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  					} else {  						TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  					}  					TextBoxLogWriteLine (ex);  					Error = true;  				}  				if (!Error && listassetl.Count == 0) {  					break;  				}  				skipSize += batchSize;  				i++;  				if (i % 5 == 0) {  					TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  				}  			}  			TextBoxLogWriteLine ("Asset listing completed.");  		});  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (System.Windows.Forms.MessageBox.Show ("Are you sure that you want to test the query of all assets  ?"' "Assets query"' System.Windows.Forms.MessageBoxButtons.YesNo' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes) {  	string valueBatch = "1000";  	string valuePosition = "0";  	if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each asset tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  		Task.Run (async () => {  			int skipSize = Convert.ToInt32 (valuePosition);  			int batchSize = Convert.ToInt32 (valueBatch);  			if (batchSize > 1000) {  				batchSize = 1000;  			}  			int i = 0;  			// let's build the list of tasks  			TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  			while (true) {  				bool Error = false;  				IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  				List<IAsset> listassetl = new List<IAsset> ();  				// Enumerate through all asset files (batchSize at a time)  				try {  					assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  					listassetl = assetfile.ToList ();  				} catch (Exception ex) {  					if (batchSize > 1) {  						TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  					} else {  						TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  					}  					TextBoxLogWriteLine (ex);  					Error = true;  				}  				if (!Error && listassetl.Count == 0) {  					break;  				}  				skipSize += batchSize;  				i++;  				if (i % 5 == 0) {  					TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  				}  			}  			TextBoxLogWriteLine ("Asset listing completed.");  		});  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each asset tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  	Task.Run (async () => {  		int skipSize = Convert.ToInt32 (valuePosition);  		int batchSize = Convert.ToInt32 (valueBatch);  		if (batchSize > 1000) {  			batchSize = 1000;  		}  		int i = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  		while (true) {  			bool Error = false;  			IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  			List<IAsset> listassetl = new List<IAsset> ();  			// Enumerate through all asset files (batchSize at a time)  			try {  				assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  				listassetl = assetfile.ToList ();  			} catch (Exception ex) {  				if (batchSize > 1) {  					TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  				} else {  					TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  				}  				TextBoxLogWriteLine (ex);  				Error = true;  			}  			if (!Error && listassetl.Count == 0) {  				break;  			}  			skipSize += batchSize;  			i++;  			if (i % 5 == 0) {  				TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  			}  		}  		TextBoxLogWriteLine ("Asset listing completed.");  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each asset tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  	Task.Run (async () => {  		int skipSize = Convert.ToInt32 (valuePosition);  		int batchSize = Convert.ToInt32 (valueBatch);  		if (batchSize > 1000) {  			batchSize = 1000;  		}  		int i = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  		while (true) {  			bool Error = false;  			IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  			List<IAsset> listassetl = new List<IAsset> ();  			// Enumerate through all asset files (batchSize at a time)  			try {  				assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  				listassetl = assetfile.ToList ();  			} catch (Exception ex) {  				if (batchSize > 1) {  					TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  				} else {  					TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  				}  				TextBoxLogWriteLine (ex);  				Error = true;  			}  			if (!Error && listassetl.Count == 0) {  				break;  			}  			skipSize += batchSize;  			i++;  			if (i % 5 == 0) {  				TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  			}  		}  		TextBoxLogWriteLine ("Asset listing completed.");  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each asset tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  	Task.Run (async () => {  		int skipSize = Convert.ToInt32 (valuePosition);  		int batchSize = Convert.ToInt32 (valueBatch);  		if (batchSize > 1000) {  			batchSize = 1000;  		}  		int i = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  		while (true) {  			bool Error = false;  			IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  			List<IAsset> listassetl = new List<IAsset> ();  			// Enumerate through all asset files (batchSize at a time)  			try {  				assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  				listassetl = assetfile.ToList ();  			} catch (Exception ex) {  				if (batchSize > 1) {  					TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  				} else {  					TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  				}  				TextBoxLogWriteLine (ex);  				Error = true;  			}  			if (!Error && listassetl.Count == 0) {  				break;  			}  			skipSize += batchSize;  			i++;  			if (i % 5 == 0) {  				TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  			}  		}  		TextBoxLogWriteLine ("Asset listing completed.");  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (Program.InputBox ("Start"' "Please enter the first position :"' ref valuePosition) == DialogResult.OK && Program.InputBox ("Batch"' "Please enter the file batch size (1: each asset tested individually but slow' 1000 max) :"' ref valueBatch) == DialogResult.OK) {  	Task.Run (async () => {  		int skipSize = Convert.ToInt32 (valuePosition);  		int batchSize = Convert.ToInt32 (valueBatch);  		if (batchSize > 1000) {  			batchSize = 1000;  		}  		int i = 0;  		// let's build the list of tasks  		TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  		while (true) {  			bool Error = false;  			IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  			List<IAsset> listassetl = new List<IAsset> ();  			// Enumerate through all asset files (batchSize at a time)  			try {  				assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  				listassetl = assetfile.ToList ();  			} catch (Exception ex) {  				if (batchSize > 1) {  					TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  				} else {  					TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  				}  				TextBoxLogWriteLine (ex);  				Error = true;  			}  			if (!Error && listassetl.Count == 0) {  				break;  			}  			skipSize += batchSize;  			i++;  			if (i % 5 == 0) {  				TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  			}  		}  		TextBoxLogWriteLine ("Asset listing completed.");  	});  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: Task.Run (async () => {  	int skipSize = Convert.ToInt32 (valuePosition);  	int batchSize = Convert.ToInt32 (valueBatch);  	if (batchSize > 1000) {  		batchSize = 1000;  	}  	int i = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  	while (true) {  		bool Error = false;  		IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  		List<IAsset> listassetl = new List<IAsset> ();  		// Enumerate through all asset files (batchSize at a time)  		try {  			assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  			listassetl = assetfile.ToList ();  		} catch (Exception ex) {  			if (batchSize > 1) {  				TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  			} else {  				TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  			}  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error && listassetl.Count == 0) {  			break;  		}  		skipSize += batchSize;  		i++;  		if (i % 5 == 0) {  			TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  		}  	}  	TextBoxLogWriteLine ("Asset listing completed.");  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: Task.Run (async () => {  	int skipSize = Convert.ToInt32 (valuePosition);  	int batchSize = Convert.ToInt32 (valueBatch);  	if (batchSize > 1000) {  		batchSize = 1000;  	}  	int i = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  	while (true) {  		bool Error = false;  		IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  		List<IAsset> listassetl = new List<IAsset> ();  		// Enumerate through all asset files (batchSize at a time)  		try {  			assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  			listassetl = assetfile.ToList ();  		} catch (Exception ex) {  			if (batchSize > 1) {  				TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  			} else {  				TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  			}  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error && listassetl.Count == 0) {  			break;  		}  		skipSize += batchSize;  		i++;  		if (i % 5 == 0) {  			TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  		}  	}  	TextBoxLogWriteLine ("Asset listing completed.");  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: Task.Run (async () => {  	int skipSize = Convert.ToInt32 (valuePosition);  	int batchSize = Convert.ToInt32 (valueBatch);  	if (batchSize > 1000) {  		batchSize = 1000;  	}  	int i = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  	while (true) {  		bool Error = false;  		IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  		List<IAsset> listassetl = new List<IAsset> ();  		// Enumerate through all asset files (batchSize at a time)  		try {  			assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  			listassetl = assetfile.ToList ();  		} catch (Exception ex) {  			if (batchSize > 1) {  				TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  			} else {  				TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  			}  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error && listassetl.Count == 0) {  			break;  		}  		skipSize += batchSize;  		i++;  		if (i % 5 == 0) {  			TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  		}  	}  	TextBoxLogWriteLine ("Asset listing completed.");  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: Task.Run (async () => {  	int skipSize = Convert.ToInt32 (valuePosition);  	int batchSize = Convert.ToInt32 (valueBatch);  	if (batchSize > 1000) {  		batchSize = 1000;  	}  	int i = 0;  	// let's build the list of tasks  	TextBoxLogWriteLine ("Listing the assets... There are {0} assets in the account."' _context.Assets.Count ());  	while (true) {  		bool Error = false;  		IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  		List<IAsset> listassetl = new List<IAsset> ();  		// Enumerate through all asset files (batchSize at a time)  		try {  			assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  			listassetl = assetfile.ToList ();  		} catch (Exception ex) {  			if (batchSize > 1) {  				TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  			} else {  				TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  			}  			TextBoxLogWriteLine (ex);  			Error = true;  		}  		if (!Error && listassetl.Count == 0) {  			break;  		}  		skipSize += batchSize;  		i++;  		if (i % 5 == 0) {  			TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  		}  	}  	TextBoxLogWriteLine ("Asset listing completed.");  });  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (batchSize > 1000) {  	batchSize = 1000;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (batchSize > 1000) {  	batchSize = 1000;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: batchSize = 1000;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: while (true) {  	bool Error = false;  	IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  	List<IAsset> listassetl = new List<IAsset> ();  	// Enumerate through all asset files (batchSize at a time)  	try {  		assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  		listassetl = assetfile.ToList ();  	} catch (Exception ex) {  		if (batchSize > 1) {  			TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  		} else {  			TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  		}  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error && listassetl.Count == 0) {  		break;  	}  	skipSize += batchSize;  	i++;  	if (i % 5 == 0) {  		TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: while (true) {  	bool Error = false;  	IQueryable<IAsset> assetfile = new List<IAsset> ().AsQueryable ();  	List<IAsset> listassetl = new List<IAsset> ();  	// Enumerate through all asset files (batchSize at a time)  	try {  		assetfile = _context.Assets.Skip (skipSize).Take (batchSize);  		listassetl = assetfile.ToList ();  	} catch (Exception ex) {  		if (batchSize > 1) {  			TextBoxLogWriteLine ("Error accessing asset(s). Position: between {0} and {1}"' skipSize' skipSize + batchSize - 1' true);  		} else {  			TextBoxLogWriteLine ("Error accessing asset. Position: {0}"' skipSize' true);  		}  		TextBoxLogWriteLine (ex);  		Error = true;  	}  	if (!Error && listassetl.Count == 0) {  		break;  	}  	skipSize += batchSize;  	i++;  	if (i % 5 == 0) {  		TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  	}  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (i % 5 == 0) {  	TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: if (i % 5 == 0) {  	TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAccessAssetTest,The following statement contains a magic number: TextBoxLogWriteLine ("Assets from {0} to {1} accessed"' skipSize - (batchSize * 5)' skipSize - 1);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,tabPageLive_Resize,The following statement contains a magic number: panelChannels.Size = new Size (panelChannels.Size.Width' tabPageLive.Size.Height / 2);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAnalyzeAssets,The following statement contains a magic number: foreach (var asset in assets) {  	bool Error = false;  	string taskname = string.Format ("Analysis of asset '{0}'"' asset.Name);  	string jobname = string.Format ("Analysis of asset '{0}'"' asset.Name);  	string outputname = string.Format ("{0} (metadata and thumbnail)"' asset.Name);  	string jsonwithid = json.Replace ("{Basename}"' asset.Id.Substring (Constants.AssetIdPrefix.Length));  	/*                 LaunchJobs_OneJobPerInputAsset_OneTaskPerfConfig(                    processor'                    assets'                    jobname'                    Properties.Settings.Default.DefaultJobPriority'                    taskname'                    outputname'                    new List<string>() { jsonwithid }'                   AssetCreationOptions.None'                   AssetFormatOption.None'                   Properties.Settings.Default.useProtectedConfiguration ? TaskOptions.ProtectedConfiguration : TaskOptions.None'                    _context.DefaultStorageAccount.Name); */IJob job = _context.Jobs.Create (jobname' Properties.Settings.Default.DefaultJobPriority);  	ITask AnalyzeTask = job.Tasks.AddNew (taskname' processor' jsonwithid' Properties.Settings.Default.useProtectedConfiguration ? TaskOptions.ProtectedConfiguration : TaskOptions.None);  	AnalyzeTask.InputAssets.Add (asset);  	// Add an output asset to contain the results of the job.    	AnalyzeTask.OutputAssets.AddNew (outputname' _context.DefaultStorageAccount.Name' AssetCreationOptions.None' AssetFormatOption.None);  	// Submit the job    	TextBoxLogWriteLine ("Submitting job '{0}'"' jobname);  	try {  		job.Submit ();  	} catch (Exception e) {  		// Add useful information to the exception  		if (assets.Count < 5) {  			MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobname) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobname' true);  		TextBoxLogWriteLine (e);  		Error = true;  	}  	if (!Error)  		Task.Factory.StartNew (() => dataGridViewJobsV.DoJobProgress (job));  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAnalyzeAssets,The following statement contains a magic number: try {  	job.Submit ();  } catch (Exception e) {  	// Add useful information to the exception  	if (assets.Count < 5) {  		MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobname) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	TextBoxLogWriteLine ("There has been a problem when submitting the job '{0}' "' jobname' true);  	TextBoxLogWriteLine (e);  	Error = true;  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoAnalyzeAssets,The following statement contains a magic number: if (assets.Count < 5) {  	MessageBox.Show (string.Format ("There has been a problem when submitting the job '{0}'"' jobname) + Constants.endline + Constants.endline + Program.GetErrorMessage (e)' "Job Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewAssetsV.AssetsPerPage = 50;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripAssets.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripAssets.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripFilters.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripFilters.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.trackBarConcurrentTransfers.Maximum = 5;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripTransfers.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripTransfers.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripIngestManifests.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripIngestManifests.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.trackBarEncodingRU.Maximum = 25;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewJobsV.JobssPerPage = 50;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripJobs.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripJobs.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewProgramsV.ItemsPerPage = 50;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripPrograms.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripPrograms.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewChannelsV.ChannelsPerPage = 50;  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripChannels.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripChannels.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripProcessors.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripProcessors.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripStreaminEndpoints.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripStreaminEndpoints.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripStorage.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripStorage.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripLog.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripLog.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.label5.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(39))))' ((int)(((byte)(167))))' ((int)(((byte)(223)))));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.label5.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(39))))' ((int)(((byte)(167))))' ((int)(((byte)(223)))));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.label5.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(39))))' ((int)(((byte)(167))))' ((int)(((byte)(223)))));  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.menuStripMain.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.menuStripMain.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,Hyperlapse_Load,The following statement contains a magic number: comboBoxFrameRate.SelectedIndex = 2;  
Magic Number,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownNumFrames.Maximum = new decimal (new int[] {  	3000000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownNumFrames.Value = new decimal (new int[] {  	1000000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownStartFrame.Maximum = new decimal (new int[] {  	1000000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownSpeed.Maximum = new decimal (new int[] {  	1000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownSpeed.Value = new decimal (new int[] {  	8'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,Hyperlapse,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Hyperlapse.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,Splash,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Splash.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.MarqueeAnimationSpeed = 30;  
Magic Number,AMSExplorer,AboutBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add (this.linkLabelWebSite' 1' 5);  
Magic Number,AMSExplorer,AboutBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add (this.linkLabelContact' 1' 4);  
Magic Number,AMSExplorer,AboutBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add (this.labelCompanyName' 1' 3);  
Magic Number,AMSExplorer,AboutBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add (this.labelCopyright' 1' 2);  
Magic Number,AMSExplorer,AboutBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add (this.buttonLicTerms' 1' 6);  
Magic Number,AMSExplorer,AboutBox,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.SetRowSpan (this.logoPictureBox' 6);  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: if (!Properties.Settings.Default.MigratedLoginListToJSON && CredentialsList != null && CredentialsList.Count > 0) {  	try {  		if (CredentialsList != null && CredentialsList.Count > 0) {  			for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++)  				listBoxAcounts.Items.Add (CredentialsList [i * CredentialsEntry.StringsCount]);  			buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  		} else {  			// if null or empty' let's create it  			CredentialsList = new StringCollection ();  		}  	} catch// error' let's purge all  	 {  		MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_AMSLogin_Load_ErrorReadingCredentialsSettingsHaveBeenDeleted);  		Properties.Settings.Default.LoginList.Clear ();  		Program.SaveAndProtectUserConfig ();  		listBoxAcounts.Items.Clear ();  	}  	// Migration to JSON  	for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  		CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  	}  	var NewCredentialListJSON = JsonConvert.SerializeObject (CredentialList);  	Properties.Settings.Default.LoginListJSON = NewCredentialListJSON;  	Properties.Settings.Default.MigratedLoginListToJSON = true;  	Program.SaveAndProtectUserConfig ();  } else// Standard mode. New installation or migration already done   {  	if (!Properties.Settings.Default.MigratedLoginListToJSON) {  		Properties.Settings.Default.MigratedLoginListToJSON = true;  		Program.SaveAndProtectUserConfig ();  	}  	if (!string.IsNullOrWhiteSpace (Properties.Settings.Default.LoginListJSON)) {  		CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials));  		CredentialList.MediaServicesAccounts.ForEach (c => listBoxAcounts.Items.Add (c.AccountName));  	}  	buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: if (!Properties.Settings.Default.MigratedLoginListToJSON && CredentialsList != null && CredentialsList.Count > 0) {  	try {  		if (CredentialsList != null && CredentialsList.Count > 0) {  			for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++)  				listBoxAcounts.Items.Add (CredentialsList [i * CredentialsEntry.StringsCount]);  			buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  		} else {  			// if null or empty' let's create it  			CredentialsList = new StringCollection ();  		}  	} catch// error' let's purge all  	 {  		MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_AMSLogin_Load_ErrorReadingCredentialsSettingsHaveBeenDeleted);  		Properties.Settings.Default.LoginList.Clear ();  		Program.SaveAndProtectUserConfig ();  		listBoxAcounts.Items.Clear ();  	}  	// Migration to JSON  	for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  		CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  	}  	var NewCredentialListJSON = JsonConvert.SerializeObject (CredentialList);  	Properties.Settings.Default.LoginListJSON = NewCredentialListJSON;  	Properties.Settings.Default.MigratedLoginListToJSON = true;  	Program.SaveAndProtectUserConfig ();  } else// Standard mode. New installation or migration already done   {  	if (!Properties.Settings.Default.MigratedLoginListToJSON) {  		Properties.Settings.Default.MigratedLoginListToJSON = true;  		Program.SaveAndProtectUserConfig ();  	}  	if (!string.IsNullOrWhiteSpace (Properties.Settings.Default.LoginListJSON)) {  		CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials));  		CredentialList.MediaServicesAccounts.ForEach (c => listBoxAcounts.Items.Add (c.AccountName));  	}  	buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: if (!Properties.Settings.Default.MigratedLoginListToJSON && CredentialsList != null && CredentialsList.Count > 0) {  	try {  		if (CredentialsList != null && CredentialsList.Count > 0) {  			for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++)  				listBoxAcounts.Items.Add (CredentialsList [i * CredentialsEntry.StringsCount]);  			buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  		} else {  			// if null or empty' let's create it  			CredentialsList = new StringCollection ();  		}  	} catch// error' let's purge all  	 {  		MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_AMSLogin_Load_ErrorReadingCredentialsSettingsHaveBeenDeleted);  		Properties.Settings.Default.LoginList.Clear ();  		Program.SaveAndProtectUserConfig ();  		listBoxAcounts.Items.Clear ();  	}  	// Migration to JSON  	for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  		CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  	}  	var NewCredentialListJSON = JsonConvert.SerializeObject (CredentialList);  	Properties.Settings.Default.LoginListJSON = NewCredentialListJSON;  	Properties.Settings.Default.MigratedLoginListToJSON = true;  	Program.SaveAndProtectUserConfig ();  } else// Standard mode. New installation or migration already done   {  	if (!Properties.Settings.Default.MigratedLoginListToJSON) {  		Properties.Settings.Default.MigratedLoginListToJSON = true;  		Program.SaveAndProtectUserConfig ();  	}  	if (!string.IsNullOrWhiteSpace (Properties.Settings.Default.LoginListJSON)) {  		CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials));  		CredentialList.MediaServicesAccounts.ForEach (c => listBoxAcounts.Items.Add (c.AccountName));  	}  	buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: if (!Properties.Settings.Default.MigratedLoginListToJSON && CredentialsList != null && CredentialsList.Count > 0) {  	try {  		if (CredentialsList != null && CredentialsList.Count > 0) {  			for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++)  				listBoxAcounts.Items.Add (CredentialsList [i * CredentialsEntry.StringsCount]);  			buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  		} else {  			// if null or empty' let's create it  			CredentialsList = new StringCollection ();  		}  	} catch// error' let's purge all  	 {  		MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_AMSLogin_Load_ErrorReadingCredentialsSettingsHaveBeenDeleted);  		Properties.Settings.Default.LoginList.Clear ();  		Program.SaveAndProtectUserConfig ();  		listBoxAcounts.Items.Clear ();  	}  	// Migration to JSON  	for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  		CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  	}  	var NewCredentialListJSON = JsonConvert.SerializeObject (CredentialList);  	Properties.Settings.Default.LoginListJSON = NewCredentialListJSON;  	Properties.Settings.Default.MigratedLoginListToJSON = true;  	Program.SaveAndProtectUserConfig ();  } else// Standard mode. New installation or migration already done   {  	if (!Properties.Settings.Default.MigratedLoginListToJSON) {  		Properties.Settings.Default.MigratedLoginListToJSON = true;  		Program.SaveAndProtectUserConfig ();  	}  	if (!string.IsNullOrWhiteSpace (Properties.Settings.Default.LoginListJSON)) {  		CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials));  		CredentialList.MediaServicesAccounts.ForEach (c => listBoxAcounts.Items.Add (c.AccountName));  	}  	buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: if (!Properties.Settings.Default.MigratedLoginListToJSON && CredentialsList != null && CredentialsList.Count > 0) {  	try {  		if (CredentialsList != null && CredentialsList.Count > 0) {  			for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++)  				listBoxAcounts.Items.Add (CredentialsList [i * CredentialsEntry.StringsCount]);  			buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  		} else {  			// if null or empty' let's create it  			CredentialsList = new StringCollection ();  		}  	} catch// error' let's purge all  	 {  		MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_AMSLogin_Load_ErrorReadingCredentialsSettingsHaveBeenDeleted);  		Properties.Settings.Default.LoginList.Clear ();  		Program.SaveAndProtectUserConfig ();  		listBoxAcounts.Items.Clear ();  	}  	// Migration to JSON  	for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  		CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  	}  	var NewCredentialListJSON = JsonConvert.SerializeObject (CredentialList);  	Properties.Settings.Default.LoginListJSON = NewCredentialListJSON;  	Properties.Settings.Default.MigratedLoginListToJSON = true;  	Program.SaveAndProtectUserConfig ();  } else// Standard mode. New installation or migration already done   {  	if (!Properties.Settings.Default.MigratedLoginListToJSON) {  		Properties.Settings.Default.MigratedLoginListToJSON = true;  		Program.SaveAndProtectUserConfig ();  	}  	if (!string.IsNullOrWhiteSpace (Properties.Settings.Default.LoginListJSON)) {  		CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials));  		CredentialList.MediaServicesAccounts.ForEach (c => listBoxAcounts.Items.Add (c.AccountName));  	}  	buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: if (!Properties.Settings.Default.MigratedLoginListToJSON && CredentialsList != null && CredentialsList.Count > 0) {  	try {  		if (CredentialsList != null && CredentialsList.Count > 0) {  			for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++)  				listBoxAcounts.Items.Add (CredentialsList [i * CredentialsEntry.StringsCount]);  			buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  		} else {  			// if null or empty' let's create it  			CredentialsList = new StringCollection ();  		}  	} catch// error' let's purge all  	 {  		MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_AMSLogin_Load_ErrorReadingCredentialsSettingsHaveBeenDeleted);  		Properties.Settings.Default.LoginList.Clear ();  		Program.SaveAndProtectUserConfig ();  		listBoxAcounts.Items.Clear ();  	}  	// Migration to JSON  	for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  		CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  	}  	var NewCredentialListJSON = JsonConvert.SerializeObject (CredentialList);  	Properties.Settings.Default.LoginListJSON = NewCredentialListJSON;  	Properties.Settings.Default.MigratedLoginListToJSON = true;  	Program.SaveAndProtectUserConfig ();  } else// Standard mode. New installation or migration already done   {  	if (!Properties.Settings.Default.MigratedLoginListToJSON) {  		Properties.Settings.Default.MigratedLoginListToJSON = true;  		Program.SaveAndProtectUserConfig ();  	}  	if (!string.IsNullOrWhiteSpace (Properties.Settings.Default.LoginListJSON)) {  		CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials));  		CredentialList.MediaServicesAccounts.ForEach (c => listBoxAcounts.Items.Add (c.AccountName));  	}  	buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: if (!Properties.Settings.Default.MigratedLoginListToJSON && CredentialsList != null && CredentialsList.Count > 0) {  	try {  		if (CredentialsList != null && CredentialsList.Count > 0) {  			for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++)  				listBoxAcounts.Items.Add (CredentialsList [i * CredentialsEntry.StringsCount]);  			buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  		} else {  			// if null or empty' let's create it  			CredentialsList = new StringCollection ();  		}  	} catch// error' let's purge all  	 {  		MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_AMSLogin_Load_ErrorReadingCredentialsSettingsHaveBeenDeleted);  		Properties.Settings.Default.LoginList.Clear ();  		Program.SaveAndProtectUserConfig ();  		listBoxAcounts.Items.Clear ();  	}  	// Migration to JSON  	for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  		CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  	}  	var NewCredentialListJSON = JsonConvert.SerializeObject (CredentialList);  	Properties.Settings.Default.LoginListJSON = NewCredentialListJSON;  	Properties.Settings.Default.MigratedLoginListToJSON = true;  	Program.SaveAndProtectUserConfig ();  } else// Standard mode. New installation or migration already done   {  	if (!Properties.Settings.Default.MigratedLoginListToJSON) {  		Properties.Settings.Default.MigratedLoginListToJSON = true;  		Program.SaveAndProtectUserConfig ();  	}  	if (!string.IsNullOrWhiteSpace (Properties.Settings.Default.LoginListJSON)) {  		CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials));  		CredentialList.MediaServicesAccounts.ForEach (c => listBoxAcounts.Items.Add (c.AccountName));  	}  	buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: if (!Properties.Settings.Default.MigratedLoginListToJSON && CredentialsList != null && CredentialsList.Count > 0) {  	try {  		if (CredentialsList != null && CredentialsList.Count > 0) {  			for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++)  				listBoxAcounts.Items.Add (CredentialsList [i * CredentialsEntry.StringsCount]);  			buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  		} else {  			// if null or empty' let's create it  			CredentialsList = new StringCollection ();  		}  	} catch// error' let's purge all  	 {  		MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_AMSLogin_Load_ErrorReadingCredentialsSettingsHaveBeenDeleted);  		Properties.Settings.Default.LoginList.Clear ();  		Program.SaveAndProtectUserConfig ();  		listBoxAcounts.Items.Clear ();  	}  	// Migration to JSON  	for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  		CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  	}  	var NewCredentialListJSON = JsonConvert.SerializeObject (CredentialList);  	Properties.Settings.Default.LoginListJSON = NewCredentialListJSON;  	Properties.Settings.Default.MigratedLoginListToJSON = true;  	Program.SaveAndProtectUserConfig ();  } else// Standard mode. New installation or migration already done   {  	if (!Properties.Settings.Default.MigratedLoginListToJSON) {  		Properties.Settings.Default.MigratedLoginListToJSON = true;  		Program.SaveAndProtectUserConfig ();  	}  	if (!string.IsNullOrWhiteSpace (Properties.Settings.Default.LoginListJSON)) {  		CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials));  		CredentialList.MediaServicesAccounts.ForEach (c => listBoxAcounts.Items.Add (c.AccountName));  	}  	buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: if (!Properties.Settings.Default.MigratedLoginListToJSON && CredentialsList != null && CredentialsList.Count > 0) {  	try {  		if (CredentialsList != null && CredentialsList.Count > 0) {  			for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++)  				listBoxAcounts.Items.Add (CredentialsList [i * CredentialsEntry.StringsCount]);  			buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  		} else {  			// if null or empty' let's create it  			CredentialsList = new StringCollection ();  		}  	} catch// error' let's purge all  	 {  		MessageBox.Show (AMSExplorer.Properties.Resources.AMSLogin_AMSLogin_Load_ErrorReadingCredentialsSettingsHaveBeenDeleted);  		Properties.Settings.Default.LoginList.Clear ();  		Program.SaveAndProtectUserConfig ();  		listBoxAcounts.Items.Clear ();  	}  	// Migration to JSON  	for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  		CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  	}  	var NewCredentialListJSON = JsonConvert.SerializeObject (CredentialList);  	Properties.Settings.Default.LoginListJSON = NewCredentialListJSON;  	Properties.Settings.Default.MigratedLoginListToJSON = true;  	Program.SaveAndProtectUserConfig ();  } else// Standard mode. New installation or migration already done   {  	if (!Properties.Settings.Default.MigratedLoginListToJSON) {  		Properties.Settings.Default.MigratedLoginListToJSON = true;  		Program.SaveAndProtectUserConfig ();  	}  	if (!string.IsNullOrWhiteSpace (Properties.Settings.Default.LoginListJSON)) {  		CredentialList = (ListCredentials)JsonConvert.DeserializeObject (Properties.Settings.Default.LoginListJSON' typeof(ListCredentials));  		CredentialList.MediaServicesAccounts.ForEach (c => listBoxAcounts.Items.Add (c.AccountName));  	}  	buttonExport.Enabled = (listBoxAcounts.Items.Count > 0);  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  	CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  	CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  	CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  	CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  	CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  	CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  	CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  	CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: for (int i = 0; i < (CredentialsList.Count / CredentialsEntry.StringsCount); i++) {  	CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  }  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  
Magic Number,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,AMSLogin_Load,The following statement contains a magic number: CredentialList.MediaServicesAccounts.Add (new CredentialsEntry (CredentialsList [i * CredentialsEntry.StringsCount]' CredentialsList [i * CredentialsEntry.StringsCount + 1]' CredentialsList [i * CredentialsEntry.StringsCount + 2]' string.Empty' CredentialsList [i * CredentialsEntry.StringsCount + 3]' CredentialsList [i * CredentialsEntry.StringsCount + 4] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 5] == true.ToString () ? true : false' CredentialsList [i * CredentialsEntry.StringsCount + 6]' CredentialsList [i * CredentialsEntry.StringsCount + 7]' CredentialsList [i * CredentialsEntry.StringsCount + 8]' ReturnAzureEndpoint (CredentialsList [i * CredentialsEntry.StringsCount + 9])' ReturnManagementPortal (CredentialsList [i * CredentialsEntry.StringsCount + 9])));  
Magic Number,AMSExplorer,MetadataInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MetadataInformation.cs,BuildGrid,The following statement contains a magic number: DGMetadataGal.ColumnCount = 2;  
Magic Number,AMSExplorer,MetadataInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MetadataInformation.cs,BuildGrid,The following statement contains a magic number: DGMetadataVideo.ColumnCount = 2;  
Magic Number,AMSExplorer,MetadataInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MetadataInformation.cs,BuildGrid,The following statement contains a magic number: DGMetadataAudio.ColumnCount = 2;  
Magic Number,AMSExplorer,ListViewTemplates,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewTemplates,The following statement contains a magic number: this.Location = new System.Drawing.Point (32' 89);  
Magic Number,AMSExplorer,ListViewTemplates,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewTemplates,The following statement contains a magic number: this.Location = new System.Drawing.Point (32' 89);  
Magic Number,AMSExplorer,ListViewTemplates,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewTemplates,The following statement contains a magic number: this.Size = new System.Drawing.Size (726' 194);  
Magic Number,AMSExplorer,ListViewTemplates,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewTemplates,The following statement contains a magic number: this.Size = new System.Drawing.Size (726' 194);  
Magic Number,AMSExplorer,ListViewTemplates,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewTemplates,The following statement contains a magic number: this.TabIndex = 61;  
Magic Number,AMSExplorer,ListViewTemplates,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewTemplates,The following statement contains a magic number: this.columnHeaderType.Width = 55;  
Magic Number,AMSExplorer,ListViewWorkflows,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewWorkflows,The following statement contains a magic number: this.Location = new System.Drawing.Point (32' 89);  
Magic Number,AMSExplorer,ListViewWorkflows,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewWorkflows,The following statement contains a magic number: this.Location = new System.Drawing.Point (32' 89);  
Magic Number,AMSExplorer,ListViewWorkflows,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewWorkflows,The following statement contains a magic number: this.Size = new System.Drawing.Size (726' 194);  
Magic Number,AMSExplorer,ListViewWorkflows,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewWorkflows,The following statement contains a magic number: this.Size = new System.Drawing.Size (726' 194);  
Magic Number,AMSExplorer,ListViewWorkflows,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewWorkflows,The following statement contains a magic number: this.TabIndex = 61;  
Magic Number,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewSlateJPG,The following statement contains a magic number: this.Location = new System.Drawing.Point (32' 89);  
Magic Number,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewSlateJPG,The following statement contains a magic number: this.Location = new System.Drawing.Point (32' 89);  
Magic Number,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewSlateJPG,The following statement contains a magic number: this.Size = new System.Drawing.Size (726' 194);  
Magic Number,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewSlateJPG,The following statement contains a magic number: this.Size = new System.Drawing.Size (726' 194);  
Magic Number,AMSExplorer,ListViewSlateJPG,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ListViewTemplates.cs,ListViewSlateJPG,The following statement contains a magic number: this.TabIndex = 61;  
Magic Number,AMSExplorer,ProcessFromJobTemplate,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProcessFromJobTemplate.cs,InitializeComponent,The following statement contains a magic number: this.label31.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,ProcessFromJobTemplate,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProcessFromJobTemplate.cs,InitializeComponent,The following statement contains a magic number: this.label31.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,ProcessFromJobTemplate,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProcessFromJobTemplate.cs,InitializeComponent,The following statement contains a magic number: this.label31.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerEndTime.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownEndDateHours.Maximum = new decimal (new int[] {  	23'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownEndDateMinutes.Maximum = new decimal (new int[] {  	59'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownEndDateDays.Maximum = new decimal (new int[] {  	1000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownEndDateDays.Value = new decimal (new int[] {  	30'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerStartTime.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownStartDateHours.Maximum = new decimal (new int[] {  	23'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownStartDateMinutes.Maximum = new decimal (new int[] {  	59'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownStartDateDays.Maximum = new decimal (new int[] {  	1000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFPExpMinutes.Maximum = new decimal (new int[] {  	59'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFPExpHours.Maximum = new decimal (new int[] {  	23'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFPExpDays.Maximum = new decimal (new int[] {  	1000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFPExpDays.Value = new decimal (new int[] {  	2'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAnalogVideoOPL.Increment = new decimal (new int[] {  	50'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAnalogVideoOPL.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownUncompressedDigitalVideoOPL.Increment = new decimal (new int[] {  	50'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownUncompressedDigitalVideoOPL.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownUncompressedDigitalAudioOPL.Increment = new decimal (new int[] {  	50'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownUncompressedDigitalAudioOPL.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCompressedDigitalVideoOPL.Increment = new decimal (new int[] {  	50'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCompressedDigitalVideoOPL.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCompressedDigitalAudioOPL.Increment = new decimal (new int[] {  	50'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame5_PlayReadyLicense,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame5_PlayReadyLicense.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCompressedDigitalAudioOPL.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The following statement contains a magic number: if (displayUI) {  	CreateTestToken form = new CreateTestToken (MyAsset' _context' keytype' optionid) {  		StartDate = DateTime.Now.AddMinutes (-5)'  		EndDate = DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)  	};  	if (form.ShowDialog () == DialogResult.OK) {  		if (form.GetOption != null) {  			string tokenTemplateString = form.GetOption.Restrictions.FirstOrDefault ().Requirements;  			if (!string.IsNullOrEmpty (tokenTemplateString)) {  				Guid rawkey = EncryptionUtils.GetKeyIdAsGuid (form.GetContentKeyFromSelectedOption.Id);  				TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (tokenTemplateString);  				if (tokenTemplate.OpenIdConnectDiscoveryDocument == null) {  					MyResult.TokenType = tokenTemplate.TokenType;  					MyResult.IsTokenKeySymmetric = (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  					MyResult.ContentKeyType = form.GetContentKeyFromSelectedOption.ContentKeyType;  					MyResult.ContentKeyDeliveryType = form.GetOption.KeyDeliveryType;  					if (tokenTemplate.TokenType == TokenType.SWT)//SWT  					 {  						MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' form.EndDate);  					} else// JWT  					 {  						IList<Claim> myclaims = null;  						myclaims = form.GetTokenRequiredClaims;  						if (form.PutContentKeyIdentifier)  							myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  						if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  							InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  							signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  						} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  							X509Certificate2 cert = form.GetX509Certificate;  							if (cert != null)  								signingcredentials = new X509SigningCredentials (cert);  						}  						JwtSecurityToken token = new JwtSecurityToken (issuer: form.GetIssuerUri' audience: form.GetAudienceUri' notBefore: form.StartDate' expires: form.EndDate' signingCredentials: signingcredentials' claims: myclaims);  						JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  						MyResult.TokenString = handler.WriteToken (token);  					}  				}  			}  		}  	}  } /////////////////////////////// NO UI  else if (keytype != null) {  	IContentKey key = MyAsset.ContentKeys.Where (k => k.ContentKeyType == keytype).FirstOrDefault ();  	if (key != null && key.AuthorizationPolicyId != null) {  		IContentKeyAuthorizationPolicy policy = _context.ContentKeyAuthorizationPolicies.Where (p => p.Id == key.AuthorizationPolicyId).FirstOrDefault ();  		if (policy != null) {  			IContentKeyAuthorizationPolicyOption option = null;  			if (optionid == null)// user does not want a specific option  			 {  				option = policy.Options.Where (o => (ContentKeyRestrictionType)o.Restrictions.FirstOrDefault ().KeyRestrictionType == ContentKeyRestrictionType.TokenRestricted).FirstOrDefault ();  			} else {  				option = policy.Options.Where (o => o.Id == optionid).FirstOrDefault ();  				// user wants a token for a specific option  			}  			if (option != null)// && option.Restrictions.FirstOrDefault() != null && option.Restrictions.FirstOrDefault().KeyRestrictionType == (int)ContentKeyRestrictionType.TokenRestricted)  			 {  				string tokenTemplateString = option.Restrictions.FirstOrDefault ().Requirements;  				if (!string.IsNullOrEmpty (tokenTemplateString)) {  					Guid rawkey = EncryptionUtils.GetKeyIdAsGuid (key.Id);  					TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (tokenTemplateString);  					if (tokenTemplate.OpenIdConnectDiscoveryDocument == null) {  						MyResult.TokenType = tokenTemplate.TokenType;  						MyResult.IsTokenKeySymmetric = (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  						MyResult.ContentKeyType = (ContentKeyType)keytype;  						if (tokenTemplate.TokenType == TokenType.SWT)//SWT  						 {  							MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration));  						} else// JWT  						 {  							List<Claim> myclaims = null;  							myclaims = new List<Claim> ();  							myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  							if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  								InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  								signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  							} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  								if (signingcredentials == null) {  									X509Certificate2 cert = DynamicEncryption.GetCertificateFromFile (true).Certificate;  									if (cert != null)  										signingcredentials = new X509SigningCredentials (cert);  								}  							}  							JwtSecurityToken token = new JwtSecurityToken (issuer: tokenTemplate.Issuer' audience: tokenTemplate.Audience' notBefore: DateTime.Now.AddMinutes (-5)' expires: DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)' signingCredentials: signingcredentials' claims: myclaims);  							JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  							MyResult.TokenString = handler.WriteToken (token);  						}  					}  				}  			}  		}  	}  }  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The following statement contains a magic number: if (displayUI) {  	CreateTestToken form = new CreateTestToken (MyAsset' _context' keytype' optionid) {  		StartDate = DateTime.Now.AddMinutes (-5)'  		EndDate = DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)  	};  	if (form.ShowDialog () == DialogResult.OK) {  		if (form.GetOption != null) {  			string tokenTemplateString = form.GetOption.Restrictions.FirstOrDefault ().Requirements;  			if (!string.IsNullOrEmpty (tokenTemplateString)) {  				Guid rawkey = EncryptionUtils.GetKeyIdAsGuid (form.GetContentKeyFromSelectedOption.Id);  				TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (tokenTemplateString);  				if (tokenTemplate.OpenIdConnectDiscoveryDocument == null) {  					MyResult.TokenType = tokenTemplate.TokenType;  					MyResult.IsTokenKeySymmetric = (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  					MyResult.ContentKeyType = form.GetContentKeyFromSelectedOption.ContentKeyType;  					MyResult.ContentKeyDeliveryType = form.GetOption.KeyDeliveryType;  					if (tokenTemplate.TokenType == TokenType.SWT)//SWT  					 {  						MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' form.EndDate);  					} else// JWT  					 {  						IList<Claim> myclaims = null;  						myclaims = form.GetTokenRequiredClaims;  						if (form.PutContentKeyIdentifier)  							myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  						if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  							InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  							signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  						} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  							X509Certificate2 cert = form.GetX509Certificate;  							if (cert != null)  								signingcredentials = new X509SigningCredentials (cert);  						}  						JwtSecurityToken token = new JwtSecurityToken (issuer: form.GetIssuerUri' audience: form.GetAudienceUri' notBefore: form.StartDate' expires: form.EndDate' signingCredentials: signingcredentials' claims: myclaims);  						JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  						MyResult.TokenString = handler.WriteToken (token);  					}  				}  			}  		}  	}  } /////////////////////////////// NO UI  else if (keytype != null) {  	IContentKey key = MyAsset.ContentKeys.Where (k => k.ContentKeyType == keytype).FirstOrDefault ();  	if (key != null && key.AuthorizationPolicyId != null) {  		IContentKeyAuthorizationPolicy policy = _context.ContentKeyAuthorizationPolicies.Where (p => p.Id == key.AuthorizationPolicyId).FirstOrDefault ();  		if (policy != null) {  			IContentKeyAuthorizationPolicyOption option = null;  			if (optionid == null)// user does not want a specific option  			 {  				option = policy.Options.Where (o => (ContentKeyRestrictionType)o.Restrictions.FirstOrDefault ().KeyRestrictionType == ContentKeyRestrictionType.TokenRestricted).FirstOrDefault ();  			} else {  				option = policy.Options.Where (o => o.Id == optionid).FirstOrDefault ();  				// user wants a token for a specific option  			}  			if (option != null)// && option.Restrictions.FirstOrDefault() != null && option.Restrictions.FirstOrDefault().KeyRestrictionType == (int)ContentKeyRestrictionType.TokenRestricted)  			 {  				string tokenTemplateString = option.Restrictions.FirstOrDefault ().Requirements;  				if (!string.IsNullOrEmpty (tokenTemplateString)) {  					Guid rawkey = EncryptionUtils.GetKeyIdAsGuid (key.Id);  					TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (tokenTemplateString);  					if (tokenTemplate.OpenIdConnectDiscoveryDocument == null) {  						MyResult.TokenType = tokenTemplate.TokenType;  						MyResult.IsTokenKeySymmetric = (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  						MyResult.ContentKeyType = (ContentKeyType)keytype;  						if (tokenTemplate.TokenType == TokenType.SWT)//SWT  						 {  							MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration));  						} else// JWT  						 {  							List<Claim> myclaims = null;  							myclaims = new List<Claim> ();  							myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  							if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  								InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  								signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  							} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  								if (signingcredentials == null) {  									X509Certificate2 cert = DynamicEncryption.GetCertificateFromFile (true).Certificate;  									if (cert != null)  										signingcredentials = new X509SigningCredentials (cert);  								}  							}  							JwtSecurityToken token = new JwtSecurityToken (issuer: tokenTemplate.Issuer' audience: tokenTemplate.Audience' notBefore: DateTime.Now.AddMinutes (-5)' expires: DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)' signingCredentials: signingcredentials' claims: myclaims);  							JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  							MyResult.TokenString = handler.WriteToken (token);  						}  					}  				}  			}  		}  	}  }  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The following statement contains a magic number: if (keytype != null) {  	IContentKey key = MyAsset.ContentKeys.Where (k => k.ContentKeyType == keytype).FirstOrDefault ();  	if (key != null && key.AuthorizationPolicyId != null) {  		IContentKeyAuthorizationPolicy policy = _context.ContentKeyAuthorizationPolicies.Where (p => p.Id == key.AuthorizationPolicyId).FirstOrDefault ();  		if (policy != null) {  			IContentKeyAuthorizationPolicyOption option = null;  			if (optionid == null)// user does not want a specific option  			 {  				option = policy.Options.Where (o => (ContentKeyRestrictionType)o.Restrictions.FirstOrDefault ().KeyRestrictionType == ContentKeyRestrictionType.TokenRestricted).FirstOrDefault ();  			} else {  				option = policy.Options.Where (o => o.Id == optionid).FirstOrDefault ();  				// user wants a token for a specific option  			}  			if (option != null)// && option.Restrictions.FirstOrDefault() != null && option.Restrictions.FirstOrDefault().KeyRestrictionType == (int)ContentKeyRestrictionType.TokenRestricted)  			 {  				string tokenTemplateString = option.Restrictions.FirstOrDefault ().Requirements;  				if (!string.IsNullOrEmpty (tokenTemplateString)) {  					Guid rawkey = EncryptionUtils.GetKeyIdAsGuid (key.Id);  					TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (tokenTemplateString);  					if (tokenTemplate.OpenIdConnectDiscoveryDocument == null) {  						MyResult.TokenType = tokenTemplate.TokenType;  						MyResult.IsTokenKeySymmetric = (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  						MyResult.ContentKeyType = (ContentKeyType)keytype;  						if (tokenTemplate.TokenType == TokenType.SWT)//SWT  						 {  							MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration));  						} else// JWT  						 {  							List<Claim> myclaims = null;  							myclaims = new List<Claim> ();  							myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  							if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  								InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  								signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  							} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  								if (signingcredentials == null) {  									X509Certificate2 cert = DynamicEncryption.GetCertificateFromFile (true).Certificate;  									if (cert != null)  										signingcredentials = new X509SigningCredentials (cert);  								}  							}  							JwtSecurityToken token = new JwtSecurityToken (issuer: tokenTemplate.Issuer' audience: tokenTemplate.Audience' notBefore: DateTime.Now.AddMinutes (-5)' expires: DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)' signingCredentials: signingcredentials' claims: myclaims);  							JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  							MyResult.TokenString = handler.WriteToken (token);  						}  					}  				}  			}  		}  	}  }  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The following statement contains a magic number: if (key != null && key.AuthorizationPolicyId != null) {  	IContentKeyAuthorizationPolicy policy = _context.ContentKeyAuthorizationPolicies.Where (p => p.Id == key.AuthorizationPolicyId).FirstOrDefault ();  	if (policy != null) {  		IContentKeyAuthorizationPolicyOption option = null;  		if (optionid == null)// user does not want a specific option  		 {  			option = policy.Options.Where (o => (ContentKeyRestrictionType)o.Restrictions.FirstOrDefault ().KeyRestrictionType == ContentKeyRestrictionType.TokenRestricted).FirstOrDefault ();  		} else {  			option = policy.Options.Where (o => o.Id == optionid).FirstOrDefault ();  			// user wants a token for a specific option  		}  		if (option != null)// && option.Restrictions.FirstOrDefault() != null && option.Restrictions.FirstOrDefault().KeyRestrictionType == (int)ContentKeyRestrictionType.TokenRestricted)  		 {  			string tokenTemplateString = option.Restrictions.FirstOrDefault ().Requirements;  			if (!string.IsNullOrEmpty (tokenTemplateString)) {  				Guid rawkey = EncryptionUtils.GetKeyIdAsGuid (key.Id);  				TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (tokenTemplateString);  				if (tokenTemplate.OpenIdConnectDiscoveryDocument == null) {  					MyResult.TokenType = tokenTemplate.TokenType;  					MyResult.IsTokenKeySymmetric = (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  					MyResult.ContentKeyType = (ContentKeyType)keytype;  					if (tokenTemplate.TokenType == TokenType.SWT)//SWT  					 {  						MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration));  					} else// JWT  					 {  						List<Claim> myclaims = null;  						myclaims = new List<Claim> ();  						myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  						if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  							InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  							signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  						} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  							if (signingcredentials == null) {  								X509Certificate2 cert = DynamicEncryption.GetCertificateFromFile (true).Certificate;  								if (cert != null)  									signingcredentials = new X509SigningCredentials (cert);  							}  						}  						JwtSecurityToken token = new JwtSecurityToken (issuer: tokenTemplate.Issuer' audience: tokenTemplate.Audience' notBefore: DateTime.Now.AddMinutes (-5)' expires: DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)' signingCredentials: signingcredentials' claims: myclaims);  						JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  						MyResult.TokenString = handler.WriteToken (token);  					}  				}  			}  		}  	}  }  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The following statement contains a magic number: if (policy != null) {  	IContentKeyAuthorizationPolicyOption option = null;  	if (optionid == null)// user does not want a specific option  	 {  		option = policy.Options.Where (o => (ContentKeyRestrictionType)o.Restrictions.FirstOrDefault ().KeyRestrictionType == ContentKeyRestrictionType.TokenRestricted).FirstOrDefault ();  	} else {  		option = policy.Options.Where (o => o.Id == optionid).FirstOrDefault ();  		// user wants a token for a specific option  	}  	if (option != null)// && option.Restrictions.FirstOrDefault() != null && option.Restrictions.FirstOrDefault().KeyRestrictionType == (int)ContentKeyRestrictionType.TokenRestricted)  	 {  		string tokenTemplateString = option.Restrictions.FirstOrDefault ().Requirements;  		if (!string.IsNullOrEmpty (tokenTemplateString)) {  			Guid rawkey = EncryptionUtils.GetKeyIdAsGuid (key.Id);  			TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (tokenTemplateString);  			if (tokenTemplate.OpenIdConnectDiscoveryDocument == null) {  				MyResult.TokenType = tokenTemplate.TokenType;  				MyResult.IsTokenKeySymmetric = (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  				MyResult.ContentKeyType = (ContentKeyType)keytype;  				if (tokenTemplate.TokenType == TokenType.SWT)//SWT  				 {  					MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration));  				} else// JWT  				 {  					List<Claim> myclaims = null;  					myclaims = new List<Claim> ();  					myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  					if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  						InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  						signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  					} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  						if (signingcredentials == null) {  							X509Certificate2 cert = DynamicEncryption.GetCertificateFromFile (true).Certificate;  							if (cert != null)  								signingcredentials = new X509SigningCredentials (cert);  						}  					}  					JwtSecurityToken token = new JwtSecurityToken (issuer: tokenTemplate.Issuer' audience: tokenTemplate.Audience' notBefore: DateTime.Now.AddMinutes (-5)' expires: DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)' signingCredentials: signingcredentials' claims: myclaims);  					JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  					MyResult.TokenString = handler.WriteToken (token);  				}  			}  		}  	}  }  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The following statement contains a magic number: if (option != null)// && option.Restrictions.FirstOrDefault() != null && option.Restrictions.FirstOrDefault().KeyRestrictionType == (int)ContentKeyRestrictionType.TokenRestricted)   {  	string tokenTemplateString = option.Restrictions.FirstOrDefault ().Requirements;  	if (!string.IsNullOrEmpty (tokenTemplateString)) {  		Guid rawkey = EncryptionUtils.GetKeyIdAsGuid (key.Id);  		TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (tokenTemplateString);  		if (tokenTemplate.OpenIdConnectDiscoveryDocument == null) {  			MyResult.TokenType = tokenTemplate.TokenType;  			MyResult.IsTokenKeySymmetric = (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  			MyResult.ContentKeyType = (ContentKeyType)keytype;  			if (tokenTemplate.TokenType == TokenType.SWT)//SWT  			 {  				MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration));  			} else// JWT  			 {  				List<Claim> myclaims = null;  				myclaims = new List<Claim> ();  				myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  				if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  					InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  					signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  				} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  					if (signingcredentials == null) {  						X509Certificate2 cert = DynamicEncryption.GetCertificateFromFile (true).Certificate;  						if (cert != null)  							signingcredentials = new X509SigningCredentials (cert);  					}  				}  				JwtSecurityToken token = new JwtSecurityToken (issuer: tokenTemplate.Issuer' audience: tokenTemplate.Audience' notBefore: DateTime.Now.AddMinutes (-5)' expires: DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)' signingCredentials: signingcredentials' claims: myclaims);  				JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  				MyResult.TokenString = handler.WriteToken (token);  			}  		}  	}  }  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The following statement contains a magic number: if (!string.IsNullOrEmpty (tokenTemplateString)) {  	Guid rawkey = EncryptionUtils.GetKeyIdAsGuid (key.Id);  	TokenRestrictionTemplate tokenTemplate = TokenRestrictionTemplateSerializer.Deserialize (tokenTemplateString);  	if (tokenTemplate.OpenIdConnectDiscoveryDocument == null) {  		MyResult.TokenType = tokenTemplate.TokenType;  		MyResult.IsTokenKeySymmetric = (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  		MyResult.ContentKeyType = (ContentKeyType)keytype;  		if (tokenTemplate.TokenType == TokenType.SWT)//SWT  		 {  			MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration));  		} else// JWT  		 {  			List<Claim> myclaims = null;  			myclaims = new List<Claim> ();  			myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  			if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  				InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  				signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  			} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  				if (signingcredentials == null) {  					X509Certificate2 cert = DynamicEncryption.GetCertificateFromFile (true).Certificate;  					if (cert != null)  						signingcredentials = new X509SigningCredentials (cert);  				}  			}  			JwtSecurityToken token = new JwtSecurityToken (issuer: tokenTemplate.Issuer' audience: tokenTemplate.Audience' notBefore: DateTime.Now.AddMinutes (-5)' expires: DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)' signingCredentials: signingcredentials' claims: myclaims);  			JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  			MyResult.TokenString = handler.WriteToken (token);  		}  	}  }  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The following statement contains a magic number: if (tokenTemplate.OpenIdConnectDiscoveryDocument == null) {  	MyResult.TokenType = tokenTemplate.TokenType;  	MyResult.IsTokenKeySymmetric = (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey));  	MyResult.ContentKeyType = (ContentKeyType)keytype;  	if (tokenTemplate.TokenType == TokenType.SWT)//SWT  	 {  		MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration));  	} else// JWT  	 {  		List<Claim> myclaims = null;  		myclaims = new List<Claim> ();  		myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  		if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  			InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  			signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  		} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  			if (signingcredentials == null) {  				X509Certificate2 cert = DynamicEncryption.GetCertificateFromFile (true).Certificate;  				if (cert != null)  					signingcredentials = new X509SigningCredentials (cert);  			}  		}  		JwtSecurityToken token = new JwtSecurityToken (issuer: tokenTemplate.Issuer' audience: tokenTemplate.Audience' notBefore: DateTime.Now.AddMinutes (-5)' expires: DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)' signingCredentials: signingcredentials' claims: myclaims);  		JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  		MyResult.TokenString = handler.WriteToken (token);  	}  }  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,GetTestToken,The following statement contains a magic number: if (tokenTemplate.TokenType == TokenType.SWT)//SWT   {  	MyResult.TokenString = TokenRestrictionTemplateSerializer.GenerateTestToken (tokenTemplate' null' rawkey' DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration));  } else// JWT   {  	List<Claim> myclaims = null;  	myclaims = new List<Claim> ();  	myclaims.Add (new Claim (TokenClaim.ContentKeyIdentifierClaimType' rawkey.ToString ()));  	if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(SymmetricVerificationKey)) {  		InMemorySymmetricSecurityKey tokenSigningKey = new InMemorySymmetricSecurityKey ((tokenTemplate.PrimaryVerificationKey as SymmetricVerificationKey).KeyValue);  		signingcredentials = new SigningCredentials (tokenSigningKey' SecurityAlgorithms.HmacSha256Signature' SecurityAlgorithms.Sha256Digest);  	} else if (tokenTemplate.PrimaryVerificationKey.GetType () == typeof(X509CertTokenVerificationKey)) {  		if (signingcredentials == null) {  			X509Certificate2 cert = DynamicEncryption.GetCertificateFromFile (true).Certificate;  			if (cert != null)  				signingcredentials = new X509SigningCredentials (cert);  		}  	}  	JwtSecurityToken token = new JwtSecurityToken (issuer: tokenTemplate.Issuer' audience: tokenTemplate.Audience' notBefore: DateTime.Now.AddMinutes (-5)' expires: DateTime.Now.AddMinutes (Properties.Settings.Default.DefaultTokenDuration)' signingCredentials: signingcredentials' claims: myclaims);  	JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler ();  	MyResult.TokenString = handler.WriteToken (token);  }  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,HexStringToByteArray,The following statement contains a magic number: return Enumerable.Range (0' hex.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (hex.Substring (x' 2)' 16)).ToArray ();  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,HexStringToByteArray,The following statement contains a magic number: return Enumerable.Range (0' hex.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (hex.Substring (x' 2)' 16)).ToArray ();  
Magic Number,AMSExplorer,DynamicEncryption,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynamicEncryption.cs,HexStringToByteArray,The following statement contains a magic number: return Enumerable.Range (0' hex.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (hex.Substring (x' 2)' 16)).ToArray ();  
Magic Number,AMSExplorer,AddDynamicEncryptionFrame2_CENCKeyConfig,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Forms-DynamicEncryption\AddDynamicEncryptionFrame2_CENCKeyConfig.cs,buttongenerateContentKey_Click,The following statement contains a magic number: textBoxcontentkey.Text = Convert.ToBase64String (DynamicEncryption.GetRandomBuffer (16));  
Magic Number,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,StreamingEndpointInformation_Load,The following statement contains a magic number: if (!MultipleSelection)// one SE   {  	labelSEName.Text = string.Format (labelSEName.Text' MySE.Name);  	hostnamelink.Links.Add (new LinkLabel.Link (0' hostnamelink.Text.Length' "http://msdn.microsoft.com/en-us/library/azure/dn783468.aspx"));  	DGOrigin.ColumnCount = 2;  	// asset info  	DGOrigin.Columns [0].DefaultCellStyle.BackColor = Color.Gainsboro;  	DGOrigin.Rows.Add ("Name"' MySE.Name);  	DGOrigin.Rows.Add ("State"' (StreamingEndpointState)MySE.State);  	DGOrigin.Rows.Add ("Description"' MySE.Description);  	DGOrigin.Rows.Add ("Host name"' MySE.HostName);  	DGOrigin.Rows.Add ("CDN Enabled"' MySE.CdnEnabled);  	DGOrigin.Rows.Add ("CDN Profile"' MySE.CdnProfile ?? Constants.stringNull);  	DGOrigin.Rows.Add ("CDN Provider"' MySE.CdnProvider ?? Constants.stringNull);  	DGOrigin.Rows.Add ("Free Trial Endtime"' MySE.FreeTrialEndTime.ToLocalTime ().ToString ("G"));  	DGOrigin.Rows.Add ("Created"' ((DateTime)MySE.Created).ToLocalTime ().ToString ("G"));  	DGOrigin.Rows.Add ("Last Modified"' ((DateTime)MySE.LastModified).ToLocalTime ().ToString ("G"));  	DGOrigin.Rows.Add ("Id"' MySE.Id);  } else {  	labelSEName.Text = "(multiple streaming endpoints have been selected)";  	tabControl1.TabPages.Remove (tabPageInfo);  	// no SE info page  }  
Magic Number,AMSExplorer,StreamingEndpointInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpointInformation.cs,StreamingEndpointInformation_Load,The following statement contains a magic number: DGOrigin.ColumnCount = 2;  
Magic Number,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,Init,The following statement contains a magic number: this.Columns ["Name"].Width = 300;  
Magic Number,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,Init,The following statement contains a magic number: this.Columns ["State"].Width = 100;  
Magic Number,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,Init,The following statement contains a magic number: this.Columns ["CDN"].Width = 120;  
Magic Number,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,Init,The following statement contains a magic number: this.Columns ["Description"].Width = 230;  
Magic Number,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,Init,The following statement contains a magic number: this.Columns ["ScaleUnits"].Width = 100;  
Magic Number,AMSExplorer,DataGridViewStreamingEndpoints,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\StreamingEndpoint.cs,Init,The following statement contains a magic number: this.Columns ["LastModified"].Width = 150;  
Magic Number,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,Indexer,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Indexer.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,Thumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Thumbnails.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,Thumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Thumbnails.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,Thumbnails,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Thumbnails.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,ProgramInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProgramInformation.cs,ProgramInformation_Load,The following statement contains a magic number: if (!MultipleSelection) {  	labelProgramName.Text += MyProgram.Name;  	DGChannel.ColumnCount = 2;  	// Program info  	DGChannel.Columns [0].DefaultCellStyle.BackColor = Color.Gainsboro;  	DGChannel.Rows.Add ("Name"' MyProgram.Name);  	DGChannel.Rows.Add ("Id"' MyProgram.Id);  	DGChannel.Rows.Add ("State"' (ChannelState)MyProgram.State);  	DGChannel.Rows.Add ("Created"' ((DateTime)MyProgram.Created).ToLocalTime ().ToString ("G"));  	DGChannel.Rows.Add ("Last Modified"' ((DateTime)MyProgram.LastModified).ToLocalTime ().ToString ("G"));  	DGChannel.Rows.Add ("Description"' MyProgram.Description);  	DGChannel.Rows.Add ("Archive Window Length"' MyProgram.ArchiveWindowLength);  	DGChannel.Rows.Add ("Manifest Name"' MyProgram.ManifestName);  	DGChannel.Rows.Add ("Channel Name"' MyProgram.Channel.Name);  	DGChannel.Rows.Add ("Channel Id"' MyProgram.ChannelId);  	DGChannel.Rows.Add ("Asset Name"' MyProgram.Asset.Name);  	DGChannel.Rows.Add ("Asset Id"' MyProgram.AssetId);  	ProgramInfo PI = new ProgramInfo (MyProgram' MyContext);  	ValidURIs = PI.GetValidURIs ();  	NotValidURIs = PI.GetNotValidURIs ();  	foreach (var t in ValidURIs) {  		DGChannel.Rows.Add ("Url"' t.AbsoluteUri);  	}  	foreach (var t in NotValidURIs) {  		int i = DGChannel.Rows.Add ("Url"' t.AbsoluteUri);  		DGChannel.Rows [i].Cells [1].Style.ForeColor = Color.Red;  	}  } else {  	labelProgramName.Text = "(multiple programs have been selected)";  	tabControl1.TabPages.Remove (tabPageInfo);  	// no info as multiple  	buttonDisplayRelatedAsset.Visible = false;  }  
Magic Number,AMSExplorer,ProgramInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProgramInformation.cs,ProgramInformation_Load,The following statement contains a magic number: DGChannel.ColumnCount = 2;  
Magic Number,AMSExplorer,ProgramInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProgramInformation.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownArchiveMinutes.Maximum = new decimal (new int[] {  	59'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,ProgramInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ProgramInformation.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownArchiveHours.Maximum = new decimal (new int[] {  	25'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The following statement contains a magic number: if (!MultipleSelection)// one channel   {  	labelChannelName.Text += MyChannel.Name;  	DGChannel.ColumnCount = 2;  	// channel info  	DGChannel.Columns [0].DefaultCellStyle.BackColor = Color.Gainsboro;  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Name' MyChannel.Name);  	DGChannel.Rows.Add ("Id"' MyChannel.Id);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_State' (ChannelState)MyChannel.State);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Created' ((DateTime)MyChannel.Created).ToLocalTime ().ToString ("G"));  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified' ((DateTime)MyChannel.LastModified).ToLocalTime ().ToString ("G"));  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_Description' MyChannel.Description);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_InputProtocol' MyChannel.Input.StreamingProtocol);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingType' MyChannel.EncodingType);  	if (MyChannel.Encoding != null) {  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingSystemPreset' MyChannel.Encoding.SystemPreset);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingIgnoreCEA708' MyChannel.Encoding.IgnoreCea708ClosedCaptions);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingVideoStreamsCount' MyChannel.Encoding.VideoStreams.Count);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingAudioStreamsCount' MyChannel.Encoding.AudioStreams.Count);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingAdMarkerSource' (AdMarkerSource)MyChannel.Encoding.AdMarkerSource);  		if (MyChannel.Slate != null) {  			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_DefaultSlateAssetId' MyChannel.Slate.DefaultSlateAssetId);  			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_AutomaticSlateInsertionOnADSignal' MyChannel.Slate.InsertSlateOnAdMarker);  		} else {  			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_SlateSettings' AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_None);  		}  	}  	if (MyChannel.Input.KeyFrameInterval != null) {  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_InputKeyFrameIntervalS' ((TimeSpan)MyChannel.Input.KeyFrameInterval).TotalSeconds);  		checkBoxKeyFrameIntDefined.Checked = true;  		textBoxKeyFrame.Text = ((TimeSpan)MyChannel.Input.KeyFrameInterval).TotalSeconds.ToString ();  	}  	string[] stringnameurl = new string[] {  		AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_Primary'  		AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_Secondary  	};  	int i = 0;  	foreach (var endpoint in MyChannel.Input.Endpoints) {  		DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url);  		if (MyChannel.Input.StreamingProtocol == StreamingProtocol.FragmentedMP4) {  			DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1SSL' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url.ToString ().Replace ("http://"' "https://"));  		}  		i++;  	}  	if (MyChannel.Preview != null) {  		foreach (var endpoint in MyChannel.Preview.Endpoints) {  			DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_PreviewURL0' endpoint.Protocol)' endpoint.Url);  		}  	}  	if (MyChannel.Output != null) {  		if (MyChannel.Output.Hls != null) {  			if (MyChannel.Output.Hls.FragmentsPerSegment != null) {  				DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_OutputHLSFragmentsPerSegment' MyChannel.Output.Hls.FragmentsPerSegment);  				checkBoxHLSFragPerSeg.Checked = true;  				numericUpDownHLSFragPerSeg.Value = (int)MyChannel.Output.Hls.FragmentsPerSegment;  			}  		}  	}  } else// multiselect   {  	labelChannelName.Text = AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_MultipleChannelsHaveBeenSelected;  	tabControl1.TabPages.Remove (tabPageChannelInfo);  	// no channel info page  	tabControl1.TabPages.Remove (tabPagePreview);  	// no channel info page  	if (MyChannel.Input.KeyFrameInterval != null) {  		checkBoxKeyFrameIntDefined.Checked = true;  		textBoxKeyFrame.Text = ((TimeSpan)MyChannel.Input.KeyFrameInterval).TotalSeconds.ToString ();  	}  	if (MyChannel.Output != null) {  		if (MyChannel.Output.Hls != null) {  			if (MyChannel.Output.Hls.FragmentsPerSegment != null) {  				checkBoxHLSFragPerSeg.Checked = true;  				numericUpDownHLSFragPerSeg.Value = (int)MyChannel.Output.Hls.FragmentsPerSegment;  			}  		}  	}  }  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The following statement contains a magic number: if (!MultipleSelection)// one channel   {  	labelChannelName.Text += MyChannel.Name;  	DGChannel.ColumnCount = 2;  	// channel info  	DGChannel.Columns [0].DefaultCellStyle.BackColor = Color.Gainsboro;  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Name' MyChannel.Name);  	DGChannel.Rows.Add ("Id"' MyChannel.Id);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_State' (ChannelState)MyChannel.State);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Created' ((DateTime)MyChannel.Created).ToLocalTime ().ToString ("G"));  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified' ((DateTime)MyChannel.LastModified).ToLocalTime ().ToString ("G"));  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_Description' MyChannel.Description);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_InputProtocol' MyChannel.Input.StreamingProtocol);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingType' MyChannel.EncodingType);  	if (MyChannel.Encoding != null) {  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingSystemPreset' MyChannel.Encoding.SystemPreset);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingIgnoreCEA708' MyChannel.Encoding.IgnoreCea708ClosedCaptions);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingVideoStreamsCount' MyChannel.Encoding.VideoStreams.Count);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingAudioStreamsCount' MyChannel.Encoding.AudioStreams.Count);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingAdMarkerSource' (AdMarkerSource)MyChannel.Encoding.AdMarkerSource);  		if (MyChannel.Slate != null) {  			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_DefaultSlateAssetId' MyChannel.Slate.DefaultSlateAssetId);  			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_AutomaticSlateInsertionOnADSignal' MyChannel.Slate.InsertSlateOnAdMarker);  		} else {  			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_SlateSettings' AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_None);  		}  	}  	if (MyChannel.Input.KeyFrameInterval != null) {  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_InputKeyFrameIntervalS' ((TimeSpan)MyChannel.Input.KeyFrameInterval).TotalSeconds);  		checkBoxKeyFrameIntDefined.Checked = true;  		textBoxKeyFrame.Text = ((TimeSpan)MyChannel.Input.KeyFrameInterval).TotalSeconds.ToString ();  	}  	string[] stringnameurl = new string[] {  		AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_Primary'  		AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_Secondary  	};  	int i = 0;  	foreach (var endpoint in MyChannel.Input.Endpoints) {  		DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url);  		if (MyChannel.Input.StreamingProtocol == StreamingProtocol.FragmentedMP4) {  			DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1SSL' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url.ToString ().Replace ("http://"' "https://"));  		}  		i++;  	}  	if (MyChannel.Preview != null) {  		foreach (var endpoint in MyChannel.Preview.Endpoints) {  			DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_PreviewURL0' endpoint.Protocol)' endpoint.Url);  		}  	}  	if (MyChannel.Output != null) {  		if (MyChannel.Output.Hls != null) {  			if (MyChannel.Output.Hls.FragmentsPerSegment != null) {  				DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_OutputHLSFragmentsPerSegment' MyChannel.Output.Hls.FragmentsPerSegment);  				checkBoxHLSFragPerSeg.Checked = true;  				numericUpDownHLSFragPerSeg.Value = (int)MyChannel.Output.Hls.FragmentsPerSegment;  			}  		}  	}  } else// multiselect   {  	labelChannelName.Text = AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_MultipleChannelsHaveBeenSelected;  	tabControl1.TabPages.Remove (tabPageChannelInfo);  	// no channel info page  	tabControl1.TabPages.Remove (tabPagePreview);  	// no channel info page  	if (MyChannel.Input.KeyFrameInterval != null) {  		checkBoxKeyFrameIntDefined.Checked = true;  		textBoxKeyFrame.Text = ((TimeSpan)MyChannel.Input.KeyFrameInterval).TotalSeconds.ToString ();  	}  	if (MyChannel.Output != null) {  		if (MyChannel.Output.Hls != null) {  			if (MyChannel.Output.Hls.FragmentsPerSegment != null) {  				checkBoxHLSFragPerSeg.Checked = true;  				numericUpDownHLSFragPerSeg.Value = (int)MyChannel.Output.Hls.FragmentsPerSegment;  			}  		}  	}  }  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The following statement contains a magic number: if (!MultipleSelection)// one channel   {  	labelChannelName.Text += MyChannel.Name;  	DGChannel.ColumnCount = 2;  	// channel info  	DGChannel.Columns [0].DefaultCellStyle.BackColor = Color.Gainsboro;  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Name' MyChannel.Name);  	DGChannel.Rows.Add ("Id"' MyChannel.Id);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_State' (ChannelState)MyChannel.State);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_Created' ((DateTime)MyChannel.Created).ToLocalTime ().ToString ("G"));  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.AssetInformation_AssetInformation_Load_LastModified' ((DateTime)MyChannel.LastModified).ToLocalTime ().ToString ("G"));  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_Description' MyChannel.Description);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_InputProtocol' MyChannel.Input.StreamingProtocol);  	DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingType' MyChannel.EncodingType);  	if (MyChannel.Encoding != null) {  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingSystemPreset' MyChannel.Encoding.SystemPreset);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingIgnoreCEA708' MyChannel.Encoding.IgnoreCea708ClosedCaptions);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingVideoStreamsCount' MyChannel.Encoding.VideoStreams.Count);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingAudioStreamsCount' MyChannel.Encoding.AudioStreams.Count);  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_EncodingAdMarkerSource' (AdMarkerSource)MyChannel.Encoding.AdMarkerSource);  		if (MyChannel.Slate != null) {  			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_DefaultSlateAssetId' MyChannel.Slate.DefaultSlateAssetId);  			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_AutomaticSlateInsertionOnADSignal' MyChannel.Slate.InsertSlateOnAdMarker);  		} else {  			DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_SlateSettings' AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_None);  		}  	}  	if (MyChannel.Input.KeyFrameInterval != null) {  		DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_InputKeyFrameIntervalS' ((TimeSpan)MyChannel.Input.KeyFrameInterval).TotalSeconds);  		checkBoxKeyFrameIntDefined.Checked = true;  		textBoxKeyFrame.Text = ((TimeSpan)MyChannel.Input.KeyFrameInterval).TotalSeconds.ToString ();  	}  	string[] stringnameurl = new string[] {  		AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_Primary'  		AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_Secondary  	};  	int i = 0;  	foreach (var endpoint in MyChannel.Input.Endpoints) {  		DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url);  		if (MyChannel.Input.StreamingProtocol == StreamingProtocol.FragmentedMP4) {  			DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1SSL' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url.ToString ().Replace ("http://"' "https://"));  		}  		i++;  	}  	if (MyChannel.Preview != null) {  		foreach (var endpoint in MyChannel.Preview.Endpoints) {  			DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_PreviewURL0' endpoint.Protocol)' endpoint.Url);  		}  	}  	if (MyChannel.Output != null) {  		if (MyChannel.Output.Hls != null) {  			if (MyChannel.Output.Hls.FragmentsPerSegment != null) {  				DGChannel.Rows.Add (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_OutputHLSFragmentsPerSegment' MyChannel.Output.Hls.FragmentsPerSegment);  				checkBoxHLSFragPerSeg.Checked = true;  				numericUpDownHLSFragPerSeg.Value = (int)MyChannel.Output.Hls.FragmentsPerSegment;  			}  		}  	}  } else// multiselect   {  	labelChannelName.Text = AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_MultipleChannelsHaveBeenSelected;  	tabControl1.TabPages.Remove (tabPageChannelInfo);  	// no channel info page  	tabControl1.TabPages.Remove (tabPagePreview);  	// no channel info page  	if (MyChannel.Input.KeyFrameInterval != null) {  		checkBoxKeyFrameIntDefined.Checked = true;  		textBoxKeyFrame.Text = ((TimeSpan)MyChannel.Input.KeyFrameInterval).TotalSeconds.ToString ();  	}  	if (MyChannel.Output != null) {  		if (MyChannel.Output.Hls != null) {  			if (MyChannel.Output.Hls.FragmentsPerSegment != null) {  				checkBoxHLSFragPerSeg.Checked = true;  				numericUpDownHLSFragPerSeg.Value = (int)MyChannel.Output.Hls.FragmentsPerSegment;  			}  		}  	}  }  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The following statement contains a magic number: DGChannel.ColumnCount = 2;  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The following statement contains a magic number: foreach (var endpoint in MyChannel.Input.Endpoints) {  	DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url);  	if (MyChannel.Input.StreamingProtocol == StreamingProtocol.FragmentedMP4) {  		DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1SSL' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url.ToString ().Replace ("http://"' "https://"));  	}  	i++;  }  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The following statement contains a magic number: foreach (var endpoint in MyChannel.Input.Endpoints) {  	DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url);  	if (MyChannel.Input.StreamingProtocol == StreamingProtocol.FragmentedMP4) {  		DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1SSL' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url.ToString ().Replace ("http://"' "https://"));  	}  	i++;  }  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The following statement contains a magic number: DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url);  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The following statement contains a magic number: if (MyChannel.Input.StreamingProtocol == StreamingProtocol.FragmentedMP4) {  	DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1SSL' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url.ToString ().Replace ("http://"' "https://"));  }  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,ChannelInformation_Load,The following statement contains a magic number: DGChannel.Rows.Add (string.Format (AMSExplorer.Properties.Resources.ChannelInformation_ChannelInformation_Load_0InputURL1SSL' MyChannel.Input.Endpoints.Count == 2 ? stringnameurl [i] : ""' endpoint.Protocol)' endpoint.Url.ToString ().Replace ("http://"' "https://"));  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,buttonAddAudioStream_Click,The following statement contains a magic number: if (numericUpDownAudioIndexMain.Value != numericUpDownAudioIndexAddition.Value && !audiostreams.Select (a => a.Index).ToList ().Contains ((int)numericUpDownAudioIndexAddition.Value) && audiostreams.Count < 7 && ((Item)comboBoxAudioLanguageMain.SelectedItem).Value != null// if list does not exist' the user must select a valid default index  ) {  	var selected = (Item)comboBoxAudioLanguageAddition.SelectedItem;  	audiostreams.Add (new ExplorerAudioStream () {  		Language = selected.Name'  		Index = (int)numericUpDownAudioIndexAddition.Value'  		Code = selected.Value  	});  	UpdateProfileGrids ();  	Modifications.AudioStreams = true;  }  
Magic Number,AMSExplorer,ChannelInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\ChannelInformation.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownHLSFragPerSeg.Value = new decimal (new int[] {  	3'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownArchiveMinutes.Maximum = new decimal (new int[] {  	59'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,CreateProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateProgram.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownArchiveHours.Maximum = new decimal (new int[] {  	25'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The following statement contains a magic number: DGAsset.ColumnCount = 2;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The following statement contains a magic number: DGFiles.ColumnCount = 2;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The following statement contains a magic number: dataGridViewAutPolOption.ColumnCount = 2;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The following statement contains a magic number: DGDelPol.ColumnCount = 2;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,AssetInformation_Load,The following statement contains a magic number: dataGridViewKeys.ColumnCount = 2;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.ColumnCount = 7;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.Columns [2].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_TrackRules;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.Columns [2].Name = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_Rules;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.Columns [3].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_StartDHMS;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.Columns [3].Name = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_Start;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.Columns [4].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_EndDHMS;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.Columns [4].Name = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_End;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.Columns [5].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_DVRDHMS;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.Columns [5].Name = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_DVR;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.Columns [6].HeaderText = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_LiveBackoffDHMS;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DisplayAssetFilters,The following statement contains a magic number: dataGridViewFilters.Columns [6].Name = AMSExplorer.Properties.Resources.AssetInformation_DisplayAssetFilters_LiveBackoff;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The following statement contains a magic number: if (SelectedSE != null) {  	bool CurrentStreamingEndpointCanDoDynPackaging = StreamingEndpointInformation.CanDoDynPackaging (SelectedSE);  	Color colornodeRU = CurrentStreamingEndpointCanDoDynPackaging ? Color.Black : Color.Gray;  	string filter = ((Item)comboBoxLocatorsFilters.SelectedItem).Value;  	TreeViewLocators.BeginUpdate ();  	TreeViewLocators.Nodes.Clear ();  	int indexloc = -1;  	foreach (ILocator locator in myAsset.Locators) {  		indexloc++;  		Color colornode;  		string locatorstatus = string.Empty;  		string SEstatus = string.Empty;  		switch (AssetInfo.GetPublishedStatusForLocator (locator)) {  		case PublishStatus.PublishedActive:  			colornode = Color.Black;  			locatorstatus = "Active";  			break;  		case PublishStatus.PublishedExpired:  			colornode = Color.Red;  			locatorstatus = "Expired";  			break;  		case PublishStatus.PublishedFuture:  			colornode = Color.Blue;  			locatorstatus = "Future";  			break;  		default:  			colornode = Color.Black;  			break;  		}  		if (SelectedSE.State != StreamingEndpointState.Running)  			colornode = Color.Red;  		TreeNode myLocNode = new TreeNode (string.Format ("{0} ({1}{2}) {3}"' locator.Type.ToString ()' locatorstatus' (SelectedSE.State != StreamingEndpointState.Running) ? "' Endpoint Stopped" : string.Empty' locator.Name));  		myLocNode.ForeColor = colornode;  		TreeViewLocators.Nodes.Add (myLocNode);  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_LocatorInformation));  		TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format ("{0}"' (locator.Id))));  		TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_Name0' locator.Name)));  		TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_Type0' locator.Type.ToString ())));  		if (locator.StartTime != null)  			TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_StartTime0' (((DateTime)locator.StartTime).ToLocalTime ().ToString ("G")))));  		if (locator.ExpirationDateTime != null)  			TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_ExpirationDateTime0' (((DateTime)locator.ExpirationDateTime).ToLocalTime ().ToString ("G")))));  		if (locator.Type == LocatorType.OnDemandOrigin) {  			TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_Path0' AssetInfo.RW (locator.Path' SelectedSE' null' false' SelectedSEHostName))));  			int indexn = 1;  			if ((myAsset.Options == AssetCreationOptions.None && myAsset.DeliveryPolicies.Count == 0) || (myAsset.Options == AssetCreationOptions.StorageEncrypted && protocolProgressiveDownload))// if no dynamic encryption and asset clear' or asset storage encrypted with progressive download decryption  			 {  				TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._prog_down_http_streaming) {  					ForeColor = colornodeRU  				});  				foreach (IAssetFile IAF in myAsset.AssetFiles)  					TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode ((new Uri (AssetInfo.RW (locator.Path' SelectedSE' null' checkBoxHttps.Checked' SelectedSEHostName) + IAF.Name)).AbsoluteUri) {  						ForeColor = colornodeRU  					});  				indexn++;  			}  			if (myAsset.AssetType == AssetType.MediaServicesHLS)// It is a static HLS asset' so let's propose only the standard HLS V3 locator  			 {  				TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls));  				TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (locator.GetHlsUri ().AbsoluteUri));  				indexn++;  			} else if (myAsset.AssetType == AssetType.SmoothStreaming || myAsset.AssetType == AssetType.MultiBitrateMP4 || myAsset.AssetType == AssetType.Unknown)//later to change Unknown to live archive  			// It's not Static HLS  			// Smooth or multi MP4  			 {  				if (protocolSmooth && locator.GetSmoothStreamingUri () != null) {  					Color ColorSmooth = ((myAsset.AssetType == AssetType.SmoothStreaming) && !checkBoxHttps.Checked) ? Color.Black : colornodeRU;  					// if not RU but aset is smooth' we can display the smooth URL as OK. If user asked for https' it works only with RU  					TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._smooth) {  						ForeColor = ColorSmooth  					});  					foreach (var uri in AssetInfo.GetSmoothStreamingUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  						TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  							ForeColor = ColorSmooth  						});  					}  					indexn++;  					TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._smooth_legacy) {  						ForeColor = colornodeRU  					});  					foreach (var uri in AssetInfo.GetSmoothStreamingLegacyUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  						TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  							ForeColor = colornodeRU  						});  					}  					indexn++;  				}  				if (protocolDASH && locator.GetMpegDashUri () != null) {  					TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._dash) {  						ForeColor = colornodeRU  					});  					foreach (var uri in AssetInfo.GetMpegDashUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  						TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  							ForeColor = colornodeRU  						});  					}  					indexn++;  				}  				if (protocolHLS && locator.GetHlsUri () != null) {  					TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v4) {  						ForeColor = colornodeRU  					});  					foreach (var uri in AssetInfo.GetHlsUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  						TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  							ForeColor = colornodeRU  						});  					}  					TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v3) {  						ForeColor = colornodeRU  					});  					foreach (var uri in AssetInfo.GetHlsv3Uris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  						TreeViewLocators.Nodes [indexloc].Nodes [indexn + 1].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  							ForeColor = colornodeRU  						});  					}  					indexn = indexn + 2;  				}  			}  		}  		if (locator.Type == LocatorType.Sas) {  			TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format ("Container Path: {0}"' locator.Path.Replace ("http://"' "https://"))));  			TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._prog_down_https_SAS));  			MyAssetFiles = myAsset.AssetFiles.ToList ();  			// Generate the Progressive Download URLs for each file.   			ProgressiveDownloadUris = MyAssetFiles.Select (af => af.GetSasUri (locator)).ToList ();  			ProgressiveDownloadUris.ForEach (uri => TreeViewLocators.Nodes [indexloc].Nodes [1].Nodes.Add (new TreeNode (uri.AbsoluteUri)));  		}  	}  	TreeViewLocators.EndUpdate ();  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The following statement contains a magic number: foreach (ILocator locator in myAsset.Locators) {  	indexloc++;  	Color colornode;  	string locatorstatus = string.Empty;  	string SEstatus = string.Empty;  	switch (AssetInfo.GetPublishedStatusForLocator (locator)) {  	case PublishStatus.PublishedActive:  		colornode = Color.Black;  		locatorstatus = "Active";  		break;  	case PublishStatus.PublishedExpired:  		colornode = Color.Red;  		locatorstatus = "Expired";  		break;  	case PublishStatus.PublishedFuture:  		colornode = Color.Blue;  		locatorstatus = "Future";  		break;  	default:  		colornode = Color.Black;  		break;  	}  	if (SelectedSE.State != StreamingEndpointState.Running)  		colornode = Color.Red;  	TreeNode myLocNode = new TreeNode (string.Format ("{0} ({1}{2}) {3}"' locator.Type.ToString ()' locatorstatus' (SelectedSE.State != StreamingEndpointState.Running) ? "' Endpoint Stopped" : string.Empty' locator.Name));  	myLocNode.ForeColor = colornode;  	TreeViewLocators.Nodes.Add (myLocNode);  	TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_LocatorInformation));  	TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format ("{0}"' (locator.Id))));  	TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_Name0' locator.Name)));  	TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_Type0' locator.Type.ToString ())));  	if (locator.StartTime != null)  		TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_StartTime0' (((DateTime)locator.StartTime).ToLocalTime ().ToString ("G")))));  	if (locator.ExpirationDateTime != null)  		TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_ExpirationDateTime0' (((DateTime)locator.ExpirationDateTime).ToLocalTime ().ToString ("G")))));  	if (locator.Type == LocatorType.OnDemandOrigin) {  		TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_Path0' AssetInfo.RW (locator.Path' SelectedSE' null' false' SelectedSEHostName))));  		int indexn = 1;  		if ((myAsset.Options == AssetCreationOptions.None && myAsset.DeliveryPolicies.Count == 0) || (myAsset.Options == AssetCreationOptions.StorageEncrypted && protocolProgressiveDownload))// if no dynamic encryption and asset clear' or asset storage encrypted with progressive download decryption  		 {  			TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._prog_down_http_streaming) {  				ForeColor = colornodeRU  			});  			foreach (IAssetFile IAF in myAsset.AssetFiles)  				TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode ((new Uri (AssetInfo.RW (locator.Path' SelectedSE' null' checkBoxHttps.Checked' SelectedSEHostName) + IAF.Name)).AbsoluteUri) {  					ForeColor = colornodeRU  				});  			indexn++;  		}  		if (myAsset.AssetType == AssetType.MediaServicesHLS)// It is a static HLS asset' so let's propose only the standard HLS V3 locator  		 {  			TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls));  			TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (locator.GetHlsUri ().AbsoluteUri));  			indexn++;  		} else if (myAsset.AssetType == AssetType.SmoothStreaming || myAsset.AssetType == AssetType.MultiBitrateMP4 || myAsset.AssetType == AssetType.Unknown)//later to change Unknown to live archive  		// It's not Static HLS  		// Smooth or multi MP4  		 {  			if (protocolSmooth && locator.GetSmoothStreamingUri () != null) {  				Color ColorSmooth = ((myAsset.AssetType == AssetType.SmoothStreaming) && !checkBoxHttps.Checked) ? Color.Black : colornodeRU;  				// if not RU but aset is smooth' we can display the smooth URL as OK. If user asked for https' it works only with RU  				TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._smooth) {  					ForeColor = ColorSmooth  				});  				foreach (var uri in AssetInfo.GetSmoothStreamingUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  					TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  						ForeColor = ColorSmooth  					});  				}  				indexn++;  				TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._smooth_legacy) {  					ForeColor = colornodeRU  				});  				foreach (var uri in AssetInfo.GetSmoothStreamingLegacyUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  					TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  						ForeColor = colornodeRU  					});  				}  				indexn++;  			}  			if (protocolDASH && locator.GetMpegDashUri () != null) {  				TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._dash) {  					ForeColor = colornodeRU  				});  				foreach (var uri in AssetInfo.GetMpegDashUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  					TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  						ForeColor = colornodeRU  					});  				}  				indexn++;  			}  			if (protocolHLS && locator.GetHlsUri () != null) {  				TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v4) {  					ForeColor = colornodeRU  				});  				foreach (var uri in AssetInfo.GetHlsUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  					TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  						ForeColor = colornodeRU  					});  				}  				TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v3) {  					ForeColor = colornodeRU  				});  				foreach (var uri in AssetInfo.GetHlsv3Uris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  					TreeViewLocators.Nodes [indexloc].Nodes [indexn + 1].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  						ForeColor = colornodeRU  					});  				}  				indexn = indexn + 2;  			}  		}  	}  	if (locator.Type == LocatorType.Sas) {  		TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format ("Container Path: {0}"' locator.Path.Replace ("http://"' "https://"))));  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._prog_down_https_SAS));  		MyAssetFiles = myAsset.AssetFiles.ToList ();  		// Generate the Progressive Download URLs for each file.   		ProgressiveDownloadUris = MyAssetFiles.Select (af => af.GetSasUri (locator)).ToList ();  		ProgressiveDownloadUris.ForEach (uri => TreeViewLocators.Nodes [indexloc].Nodes [1].Nodes.Add (new TreeNode (uri.AbsoluteUri)));  	}  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The following statement contains a magic number: if (locator.Type == LocatorType.OnDemandOrigin) {  	TreeViewLocators.Nodes [indexloc].Nodes [0].Nodes.Add (new TreeNode (string.Format (AMSExplorer.Properties.Resources.AssetInformation_BuildLocatorsTree_Path0' AssetInfo.RW (locator.Path' SelectedSE' null' false' SelectedSEHostName))));  	int indexn = 1;  	if ((myAsset.Options == AssetCreationOptions.None && myAsset.DeliveryPolicies.Count == 0) || (myAsset.Options == AssetCreationOptions.StorageEncrypted && protocolProgressiveDownload))// if no dynamic encryption and asset clear' or asset storage encrypted with progressive download decryption  	 {  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._prog_down_http_streaming) {  			ForeColor = colornodeRU  		});  		foreach (IAssetFile IAF in myAsset.AssetFiles)  			TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode ((new Uri (AssetInfo.RW (locator.Path' SelectedSE' null' checkBoxHttps.Checked' SelectedSEHostName) + IAF.Name)).AbsoluteUri) {  				ForeColor = colornodeRU  			});  		indexn++;  	}  	if (myAsset.AssetType == AssetType.MediaServicesHLS)// It is a static HLS asset' so let's propose only the standard HLS V3 locator  	 {  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls));  		TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (locator.GetHlsUri ().AbsoluteUri));  		indexn++;  	} else if (myAsset.AssetType == AssetType.SmoothStreaming || myAsset.AssetType == AssetType.MultiBitrateMP4 || myAsset.AssetType == AssetType.Unknown)//later to change Unknown to live archive  	// It's not Static HLS  	// Smooth or multi MP4  	 {  		if (protocolSmooth && locator.GetSmoothStreamingUri () != null) {  			Color ColorSmooth = ((myAsset.AssetType == AssetType.SmoothStreaming) && !checkBoxHttps.Checked) ? Color.Black : colornodeRU;  			// if not RU but aset is smooth' we can display the smooth URL as OK. If user asked for https' it works only with RU  			TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._smooth) {  				ForeColor = ColorSmooth  			});  			foreach (var uri in AssetInfo.GetSmoothStreamingUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  				TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  					ForeColor = ColorSmooth  				});  			}  			indexn++;  			TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._smooth_legacy) {  				ForeColor = colornodeRU  			});  			foreach (var uri in AssetInfo.GetSmoothStreamingLegacyUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  				TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  					ForeColor = colornodeRU  				});  			}  			indexn++;  		}  		if (protocolDASH && locator.GetMpegDashUri () != null) {  			TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._dash) {  				ForeColor = colornodeRU  			});  			foreach (var uri in AssetInfo.GetMpegDashUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  				TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  					ForeColor = colornodeRU  				});  			}  			indexn++;  		}  		if (protocolHLS && locator.GetHlsUri () != null) {  			TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v4) {  				ForeColor = colornodeRU  			});  			foreach (var uri in AssetInfo.GetHlsUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  				TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  					ForeColor = colornodeRU  				});  			}  			TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v3) {  				ForeColor = colornodeRU  			});  			foreach (var uri in AssetInfo.GetHlsv3Uris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  				TreeViewLocators.Nodes [indexloc].Nodes [indexn + 1].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  					ForeColor = colornodeRU  				});  			}  			indexn = indexn + 2;  		}  	}  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The following statement contains a magic number: if (myAsset.AssetType == AssetType.MediaServicesHLS)// It is a static HLS asset' so let's propose only the standard HLS V3 locator   {  	TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls));  	TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (locator.GetHlsUri ().AbsoluteUri));  	indexn++;  } else if (myAsset.AssetType == AssetType.SmoothStreaming || myAsset.AssetType == AssetType.MultiBitrateMP4 || myAsset.AssetType == AssetType.Unknown)//later to change Unknown to live archive  // It's not Static HLS  // Smooth or multi MP4   {  	if (protocolSmooth && locator.GetSmoothStreamingUri () != null) {  		Color ColorSmooth = ((myAsset.AssetType == AssetType.SmoothStreaming) && !checkBoxHttps.Checked) ? Color.Black : colornodeRU;  		// if not RU but aset is smooth' we can display the smooth URL as OK. If user asked for https' it works only with RU  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._smooth) {  			ForeColor = ColorSmooth  		});  		foreach (var uri in AssetInfo.GetSmoothStreamingUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  			TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  				ForeColor = ColorSmooth  			});  		}  		indexn++;  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._smooth_legacy) {  			ForeColor = colornodeRU  		});  		foreach (var uri in AssetInfo.GetSmoothStreamingLegacyUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  			TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  				ForeColor = colornodeRU  			});  		}  		indexn++;  	}  	if (protocolDASH && locator.GetMpegDashUri () != null) {  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._dash) {  			ForeColor = colornodeRU  		});  		foreach (var uri in AssetInfo.GetMpegDashUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  			TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  				ForeColor = colornodeRU  			});  		}  		indexn++;  	}  	if (protocolHLS && locator.GetHlsUri () != null) {  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v4) {  			ForeColor = colornodeRU  		});  		foreach (var uri in AssetInfo.GetHlsUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  			TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  				ForeColor = colornodeRU  			});  		}  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v3) {  			ForeColor = colornodeRU  		});  		foreach (var uri in AssetInfo.GetHlsv3Uris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  			TreeViewLocators.Nodes [indexloc].Nodes [indexn + 1].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  				ForeColor = colornodeRU  			});  		}  		indexn = indexn + 2;  	}  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The following statement contains a magic number: if (myAsset.AssetType == AssetType.SmoothStreaming || myAsset.AssetType == AssetType.MultiBitrateMP4 || myAsset.AssetType == AssetType.Unknown)//later to change Unknown to live archive  // It's not Static HLS  // Smooth or multi MP4   {  	if (protocolSmooth && locator.GetSmoothStreamingUri () != null) {  		Color ColorSmooth = ((myAsset.AssetType == AssetType.SmoothStreaming) && !checkBoxHttps.Checked) ? Color.Black : colornodeRU;  		// if not RU but aset is smooth' we can display the smooth URL as OK. If user asked for https' it works only with RU  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._smooth) {  			ForeColor = ColorSmooth  		});  		foreach (var uri in AssetInfo.GetSmoothStreamingUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  			TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  				ForeColor = ColorSmooth  			});  		}  		indexn++;  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._smooth_legacy) {  			ForeColor = colornodeRU  		});  		foreach (var uri in AssetInfo.GetSmoothStreamingLegacyUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  			TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  				ForeColor = colornodeRU  			});  		}  		indexn++;  	}  	if (protocolDASH && locator.GetMpegDashUri () != null) {  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._dash) {  			ForeColor = colornodeRU  		});  		foreach (var uri in AssetInfo.GetMpegDashUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  			TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  				ForeColor = colornodeRU  			});  		}  		indexn++;  	}  	if (protocolHLS && locator.GetHlsUri () != null) {  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v4) {  			ForeColor = colornodeRU  		});  		foreach (var uri in AssetInfo.GetHlsUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  			TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  				ForeColor = colornodeRU  			});  		}  		TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v3) {  			ForeColor = colornodeRU  		});  		foreach (var uri in AssetInfo.GetHlsv3Uris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  			TreeViewLocators.Nodes [indexloc].Nodes [indexn + 1].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  				ForeColor = colornodeRU  			});  		}  		indexn = indexn + 2;  	}  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The following statement contains a magic number: if (protocolHLS && locator.GetHlsUri () != null) {  	TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v4) {  		ForeColor = colornodeRU  	});  	foreach (var uri in AssetInfo.GetHlsUris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  		TreeViewLocators.Nodes [indexloc].Nodes [indexn].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  			ForeColor = colornodeRU  		});  	}  	TreeViewLocators.Nodes [indexloc].Nodes.Add (new TreeNode (AssetInfo._hls_v3) {  		ForeColor = colornodeRU  	});  	foreach (var uri in AssetInfo.GetHlsv3Uris (locator' SelectedSE' filter' checkBoxHttps.Checked' SelectedSEHostName)) {  		TreeViewLocators.Nodes [indexloc].Nodes [indexn + 1].Nodes.Add (new TreeNode (uri.AbsoluteUri) {  			ForeColor = colornodeRU  		});  	}  	indexn = indexn + 2;  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,BuildLocatorsTree,The following statement contains a magic number: indexn = indexn + 2;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoUpload,The following statement contains a magic number: if (Dialog.ShowDialog () == DialogResult.OK) {  	progressBarUpload.Maximum = 100 * Dialog.FileNames.Count ();  	progressBarUpload.Visible = true;  	buttonClose.Enabled = false;  	buttonUpload.Enabled = false;  	foreach (string file in Dialog.FileNames) {  		await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (file)' file' myAsset));  	}  	// Refresh the asset.  	myAsset = Mainform._context.Assets.Where (a => a.Id == myAsset.Id).FirstOrDefault ();  	progressBarUpload.Visible = false;  	buttonClose.Enabled = true;  	buttonUpload.Enabled = true;  	ListAssetFiles ();  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoUpload,The following statement contains a magic number: progressBarUpload.Maximum = 100 * Dialog.FileNames.Count ();  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoEditFile,The following statement contains a magic number: if (SelectedAssetFiles.Count == 1 && SelectedAssetFiles.FirstOrDefault () != null) {  	IAssetFile assetFileToEdit = SelectedAssetFiles.FirstOrDefault ();  	if (assetFileToEdit.ContentFileSize > 500 * 1024) {  		MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_FileIsToLargeToEditItOnline);  		return;  	}  	try {  		progressBarUpload.Maximum = 100;  		progressBarUpload.Visible = true;  		string tempPath = System.IO.Path.GetTempPath ();  		string filePath = Path.Combine (tempPath' assetFileToEdit.Name);  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		await Task.Factory.StartNew (() => ProcessDownloadFileToAsset (assetFileToEdit' filePath));  		progressBarUpload.Visible = false;  		StreamReader streamReader = new StreamReader (filePath);  		Encoding fileEncoding = streamReader.CurrentEncoding;  		string datastring = streamReader.ReadToEnd ();  		streamReader.Close ();  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		var editform = new EditorXMLJSON (string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_OnlineEditOf0' assetFileToEdit.Name)' datastring' true' false);  		if (editform.Display () == DialogResult.OK) {  			// OK  			StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  			outfile.Write (editform.TextData);  			outfile.Close ();  			string assetFileName = assetFileToEdit.Name;  			bool assetFilePrimary = assetFileToEdit.IsPrimary;  			assetFileToEdit.Delete ();  			progressBarUpload.Visible = true;  			buttonClose.Enabled = false;  			await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' myAsset));  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			if (assetFilePrimary) {  				AssetInfo.SetFileAsPrimary (myAsset' assetFileName);  			}  			// Refresh the asset.  			myAsset = Mainform._context.Assets.Where (a => a.Id == myAsset.Id).FirstOrDefault ();  			progressBarUpload.Visible = false;  			buttonClose.Enabled = true;  			ListAssetFiles ();  		}  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_ErrorWhenAccessingEditingAssetFile);  	}  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoEditFile,The following statement contains a magic number: if (SelectedAssetFiles.Count == 1 && SelectedAssetFiles.FirstOrDefault () != null) {  	IAssetFile assetFileToEdit = SelectedAssetFiles.FirstOrDefault ();  	if (assetFileToEdit.ContentFileSize > 500 * 1024) {  		MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_FileIsToLargeToEditItOnline);  		return;  	}  	try {  		progressBarUpload.Maximum = 100;  		progressBarUpload.Visible = true;  		string tempPath = System.IO.Path.GetTempPath ();  		string filePath = Path.Combine (tempPath' assetFileToEdit.Name);  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		await Task.Factory.StartNew (() => ProcessDownloadFileToAsset (assetFileToEdit' filePath));  		progressBarUpload.Visible = false;  		StreamReader streamReader = new StreamReader (filePath);  		Encoding fileEncoding = streamReader.CurrentEncoding;  		string datastring = streamReader.ReadToEnd ();  		streamReader.Close ();  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		var editform = new EditorXMLJSON (string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_OnlineEditOf0' assetFileToEdit.Name)' datastring' true' false);  		if (editform.Display () == DialogResult.OK) {  			// OK  			StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  			outfile.Write (editform.TextData);  			outfile.Close ();  			string assetFileName = assetFileToEdit.Name;  			bool assetFilePrimary = assetFileToEdit.IsPrimary;  			assetFileToEdit.Delete ();  			progressBarUpload.Visible = true;  			buttonClose.Enabled = false;  			await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' myAsset));  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			if (assetFilePrimary) {  				AssetInfo.SetFileAsPrimary (myAsset' assetFileName);  			}  			// Refresh the asset.  			myAsset = Mainform._context.Assets.Where (a => a.Id == myAsset.Id).FirstOrDefault ();  			progressBarUpload.Visible = false;  			buttonClose.Enabled = true;  			ListAssetFiles ();  		}  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_ErrorWhenAccessingEditingAssetFile);  	}  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoEditFile,The following statement contains a magic number: if (SelectedAssetFiles.Count == 1 && SelectedAssetFiles.FirstOrDefault () != null) {  	IAssetFile assetFileToEdit = SelectedAssetFiles.FirstOrDefault ();  	if (assetFileToEdit.ContentFileSize > 500 * 1024) {  		MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_FileIsToLargeToEditItOnline);  		return;  	}  	try {  		progressBarUpload.Maximum = 100;  		progressBarUpload.Visible = true;  		string tempPath = System.IO.Path.GetTempPath ();  		string filePath = Path.Combine (tempPath' assetFileToEdit.Name);  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		await Task.Factory.StartNew (() => ProcessDownloadFileToAsset (assetFileToEdit' filePath));  		progressBarUpload.Visible = false;  		StreamReader streamReader = new StreamReader (filePath);  		Encoding fileEncoding = streamReader.CurrentEncoding;  		string datastring = streamReader.ReadToEnd ();  		streamReader.Close ();  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		var editform = new EditorXMLJSON (string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_OnlineEditOf0' assetFileToEdit.Name)' datastring' true' false);  		if (editform.Display () == DialogResult.OK) {  			// OK  			StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  			outfile.Write (editform.TextData);  			outfile.Close ();  			string assetFileName = assetFileToEdit.Name;  			bool assetFilePrimary = assetFileToEdit.IsPrimary;  			assetFileToEdit.Delete ();  			progressBarUpload.Visible = true;  			buttonClose.Enabled = false;  			await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' myAsset));  			if (File.Exists (filePath)) {  				File.Delete (filePath);  			}  			if (assetFilePrimary) {  				AssetInfo.SetFileAsPrimary (myAsset' assetFileName);  			}  			// Refresh the asset.  			myAsset = Mainform._context.Assets.Where (a => a.Id == myAsset.Id).FirstOrDefault ();  			progressBarUpload.Visible = false;  			buttonClose.Enabled = true;  			ListAssetFiles ();  		}  	} catch {  		MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_ErrorWhenAccessingEditingAssetFile);  	}  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoEditFile,The following statement contains a magic number: if (assetFileToEdit.ContentFileSize > 500 * 1024) {  	MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_FileIsToLargeToEditItOnline);  	return;  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoEditFile,The following statement contains a magic number: if (assetFileToEdit.ContentFileSize > 500 * 1024) {  	MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_FileIsToLargeToEditItOnline);  	return;  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoEditFile,The following statement contains a magic number: try {  	progressBarUpload.Maximum = 100;  	progressBarUpload.Visible = true;  	string tempPath = System.IO.Path.GetTempPath ();  	string filePath = Path.Combine (tempPath' assetFileToEdit.Name);  	if (File.Exists (filePath)) {  		File.Delete (filePath);  	}  	await Task.Factory.StartNew (() => ProcessDownloadFileToAsset (assetFileToEdit' filePath));  	progressBarUpload.Visible = false;  	StreamReader streamReader = new StreamReader (filePath);  	Encoding fileEncoding = streamReader.CurrentEncoding;  	string datastring = streamReader.ReadToEnd ();  	streamReader.Close ();  	if (File.Exists (filePath)) {  		File.Delete (filePath);  	}  	var editform = new EditorXMLJSON (string.Format (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_OnlineEditOf0' assetFileToEdit.Name)' datastring' true' false);  	if (editform.Display () == DialogResult.OK) {  		// OK  		StreamWriter outfile = new StreamWriter (filePath' false' fileEncoding);  		outfile.Write (editform.TextData);  		outfile.Close ();  		string assetFileName = assetFileToEdit.Name;  		bool assetFilePrimary = assetFileToEdit.IsPrimary;  		assetFileToEdit.Delete ();  		progressBarUpload.Visible = true;  		buttonClose.Enabled = false;  		await Task.Factory.StartNew (() => ProcessUploadFileToAsset (Path.GetFileName (filePath)' filePath' myAsset));  		if (File.Exists (filePath)) {  			File.Delete (filePath);  		}  		if (assetFilePrimary) {  			AssetInfo.SetFileAsPrimary (myAsset' assetFileName);  		}  		// Refresh the asset.  		myAsset = Mainform._context.Assets.Where (a => a.Id == myAsset.Id).FirstOrDefault ();  		progressBarUpload.Visible = false;  		buttonClose.Enabled = true;  		ListAssetFiles ();  	}  } catch {  	MessageBox.Show (AMSExplorer.Properties.Resources.AssetInformation_DoEditFile_ErrorWhenAccessingEditingAssetFile);  }  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,DoEditFile,The following statement contains a magic number: progressBarUpload.Maximum = 100;  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripDG.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripDG.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripLocators.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripLocators.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripFiles.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripFiles.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripFilter.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripFilter.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripAuthPol.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripAuthPol.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripKey.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripKey.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripDelPol.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,AssetInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AssetInformation.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripDelPol.ImageScalingSize = new System.Drawing.Size (24' 24);  
Magic Number,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,buttonAddAudioStream_Click,The following statement contains a magic number: if (numericUpDownAudioIndexMain.Value != numericUpDownAudioIndexAddition.Value && !audiostreams.Select (a => a.Index).ToList ().Contains ((int)numericUpDownAudioIndexAddition.Value) && audiostreams.Count < 7//8 max audio streams  ) {  	var selected = (Item)comboBoxAudioLanguageAddition.SelectedItem;  	audiostreams.Add (new ExplorerAudioStream () {  		Language = selected.Name'  		Index = (int)numericUpDownAudioIndexAddition.Value'  		Code = selected.Value  	});  	UpdateProfileGrids ();  }  
Magic Number,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,ProcessUploadFile,The following statement contains a magic number: try {  	asset = MyContext.Assets.Create (SafeFileName as string' storageaccount' AssetCreationOptions.None);  	IAssetFile file = asset.AssetFiles.Create (SafeFileName);  	policy = MyContext.AccessPolicies.Create (SafeFileName' TimeSpan.FromDays (30)' AccessPermissions.Write | AccessPermissions.List);  	locator = MyContext.Locators.CreateLocator (LocatorType.Sas' asset' policy);  	file.UploadProgressChanged += file_UploadProgressChanged;  	file.Upload (FileName);  	AssetInfo.SetFileAsPrimary (asset' SafeFileName);  } catch {  	asset = null;  } finally {  	if (locator != null)  		locator.Delete ();  	if (policy != null)  		policy.Delete ();  }  
Magic Number,AMSExplorer,CreateLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLiveChannel.cs,ProcessUploadFile,The following statement contains a magic number: policy = MyContext.AccessPolicies.Create (SafeFileName' TimeSpan.FromDays (30)' AccessPermissions.Write | AccessPermissions.List);  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns ["InputUrl"].Width = 140;  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns ["InputProtocol"].Width = 180;  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns ["PreviewUrl"].Width = 120;  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns [_encoded].DisplayIndex = this.ColumnCount - 4;  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns [_encoded].Width = 100;  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns [_encodedPreset].DisplayIndex = this.ColumnCount - 3;  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns [_encodedPreset].Width = 100;  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns ["LastModified"].Width = 140;  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns ["State"].Width = 75;  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns ["Description"].Width = 110;  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshChannels,The following statement contains a magic number: if ((!string.IsNullOrEmpty (_timefilter)) && _timefilter == FilterTime.First50Items) {  	channels = channels.Take (50);  }  
Magic Number,AMSExplorer,DataGridViewLiveChannel,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshChannels,The following statement contains a magic number: channels = channels.Take (50);  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns [_published].DisplayIndex = this.ColumnCount - 3;  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns ["LastModified"].Width = 130;  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns ["Description"].Width = 150;  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,Init,The following statement contains a magic number: this.Columns ["ArchiveWindowLength"].Width = 130;  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if (_anyChannel == enumDisplayProgram.None) {  	programs = new List<IProgram> ();  } else {  	// DAYS  	bool filterStartDate = false;  	bool filterEndDate = false;  	DateTime dateTimeStart = DateTime.UtcNow;  	DateTime dateTimeRangeEnd = DateTime.UtcNow.AddDays (1);  	int days = FilterTime.ReturnNumberOfDays (_timefilter);  	if (days > 0) {  		filterStartDate = true;  		dateTimeStart = (DateTime.UtcNow.Add (-TimeSpan.FromDays (days)));  	} else if (days == -1)// TimeRange  	 {  		filterStartDate = true;  		filterEndDate = true;  		dateTimeStart = _timefilterTimeRange.StartDate;  		if (_timefilterTimeRange.EndDate != null)// there is an end time  		 {  			dateTimeRangeEnd = (DateTime)_timefilterTimeRange.EndDate;  		}  	}  	// STATE  	bool pFilterOnState = FilterState != "All";  	ProgramState myStateFilter = ProgramState.Running;  	if (pFilterOnState) {  		myStateFilter = (ProgramState)Enum.Parse (typeof(ProgramState)' _statefilter);  	}  	bool bListEmpty = (idsList.Count == 0);  	// search  	if (_searchinname != null && !string.IsNullOrEmpty (_searchinname.Text)) {  		bool Error = false;  		switch (_searchinname.SearchType) {  		case SearchIn.ProgramName:  			programssrv = context.Programs.Where (p => (p.Name.ToLower ().Contains (_searchinname.Text.ToLower ())) && (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd));  			break;  		case SearchIn.ProgramId:  			string programguid = _searchinname.Text;  			if (programguid.StartsWith (Constants.ProgramIdPrefix)) {  				programguid = programguid.Substring (Constants.ProgramIdPrefix.Length);  			}  			try {  				var g = new Guid (programguid);  			} catch {  				Error = true;  				MessageBox.Show ("Error with program Id. Is it a valid GUID or program Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			if (!Error) {  				programssrv = context.Programs.Where (p => (p.Id == Constants.ProgramIdPrefix + programguid)// no need to filter the date or ID as user request a specific ID  				);  			}  			break;  		default:  			break;  		}  	} else {  		programssrv = context.Programs.Where (p => (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd));  		if (idsList.Count == 1 && _anyChannel == enumDisplayProgram.Selected) {  			programssrv = programssrv.Where (p => p.ChannelId == idsList [0]);  		} else if (idsList.Count > 1 && _anyChannel == enumDisplayProgram.Selected) {  			// let's build the query for all the IDs  			// The IQueryable data to query.  			IQueryable<IProgram> queryableData = programssrv.AsQueryable<IProgram> ();  			// Compose the expression tree that represents the parameter to the predicate.  			ParameterExpression pe = Expression.Parameter (typeof(IProgram)' "p");  			List<Expression> exp = new List<Expression> ();  			foreach (var s in idsList) {  				// ***** Where(p => p.ChannelId == "nb:chid:UUID:29aae99e-66d9-4a54-8cf0-8f652fd0f0ff" || p.ChannelId == "nb:chid:UUID:....)) *****  				// Create an expression tree that represents the expression 'p.ChannelId == "nb:chid:UUID:2....  				Expression left = Expression.Property (pe' typeof(IProgram).GetProperty ("ChannelId"));  				Expression right = Expression.Constant (s);  				exp.Add (Expression.Equal (left' right));  			}  			// Combine the expression trees to create an expression tree that represents the  			Expression predicateBody = Expression.OrElse (exp [0]' exp [1]);  			for (int i = 2; i < idsList.Count; i++) {  				predicateBody = Expression.OrElse (predicateBody' exp [i]);  			}  			// Create an expression tree that represents the expression  			MethodCallExpression whereCallExpression = Expression.Call (typeof(Queryable)' "Where"' new Type[] {  				queryableData.ElementType  			}' queryableData.Expression' Expression.Lambda<Func<IProgram' bool>> (predicateBody' new ParameterExpression[] {  				pe  			}));  			// ***** End Where *****  			// Create an executable query from the expression tree.  			programssrv = queryableData.Provider.CreateQuery<IProgram> (whereCallExpression);  		}  	}  	// let's get all the results locally  	IList<IProgram> aggregateListPrograms = new List<IProgram> ();  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var programsq = programssrv.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += programsq.Count;  		foreach (var j in programsq) {  			aggregateListPrograms.Add (j);  		}  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	//programs = programssrv.AsEnumerable(); // local query now  	programs = aggregateListPrograms;  	if (pFilterOnState) {  		programs = programs.Where (p => p.State.Equals (myStateFilter));  		// this query has to be locally. Not supported on the server  	}  	if ((!string.IsNullOrEmpty (_timefilter))) {  		if (_timefilter == FilterTime.First50Items) {  			programs = programs.Take (50);  		} else if (_timefilter == FilterTime.First1000Items) {  			programs = programs.Take (1000);  		}  	}  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if (_anyChannel == enumDisplayProgram.None) {  	programs = new List<IProgram> ();  } else {  	// DAYS  	bool filterStartDate = false;  	bool filterEndDate = false;  	DateTime dateTimeStart = DateTime.UtcNow;  	DateTime dateTimeRangeEnd = DateTime.UtcNow.AddDays (1);  	int days = FilterTime.ReturnNumberOfDays (_timefilter);  	if (days > 0) {  		filterStartDate = true;  		dateTimeStart = (DateTime.UtcNow.Add (-TimeSpan.FromDays (days)));  	} else if (days == -1)// TimeRange  	 {  		filterStartDate = true;  		filterEndDate = true;  		dateTimeStart = _timefilterTimeRange.StartDate;  		if (_timefilterTimeRange.EndDate != null)// there is an end time  		 {  			dateTimeRangeEnd = (DateTime)_timefilterTimeRange.EndDate;  		}  	}  	// STATE  	bool pFilterOnState = FilterState != "All";  	ProgramState myStateFilter = ProgramState.Running;  	if (pFilterOnState) {  		myStateFilter = (ProgramState)Enum.Parse (typeof(ProgramState)' _statefilter);  	}  	bool bListEmpty = (idsList.Count == 0);  	// search  	if (_searchinname != null && !string.IsNullOrEmpty (_searchinname.Text)) {  		bool Error = false;  		switch (_searchinname.SearchType) {  		case SearchIn.ProgramName:  			programssrv = context.Programs.Where (p => (p.Name.ToLower ().Contains (_searchinname.Text.ToLower ())) && (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd));  			break;  		case SearchIn.ProgramId:  			string programguid = _searchinname.Text;  			if (programguid.StartsWith (Constants.ProgramIdPrefix)) {  				programguid = programguid.Substring (Constants.ProgramIdPrefix.Length);  			}  			try {  				var g = new Guid (programguid);  			} catch {  				Error = true;  				MessageBox.Show ("Error with program Id. Is it a valid GUID or program Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			if (!Error) {  				programssrv = context.Programs.Where (p => (p.Id == Constants.ProgramIdPrefix + programguid)// no need to filter the date or ID as user request a specific ID  				);  			}  			break;  		default:  			break;  		}  	} else {  		programssrv = context.Programs.Where (p => (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd));  		if (idsList.Count == 1 && _anyChannel == enumDisplayProgram.Selected) {  			programssrv = programssrv.Where (p => p.ChannelId == idsList [0]);  		} else if (idsList.Count > 1 && _anyChannel == enumDisplayProgram.Selected) {  			// let's build the query for all the IDs  			// The IQueryable data to query.  			IQueryable<IProgram> queryableData = programssrv.AsQueryable<IProgram> ();  			// Compose the expression tree that represents the parameter to the predicate.  			ParameterExpression pe = Expression.Parameter (typeof(IProgram)' "p");  			List<Expression> exp = new List<Expression> ();  			foreach (var s in idsList) {  				// ***** Where(p => p.ChannelId == "nb:chid:UUID:29aae99e-66d9-4a54-8cf0-8f652fd0f0ff" || p.ChannelId == "nb:chid:UUID:....)) *****  				// Create an expression tree that represents the expression 'p.ChannelId == "nb:chid:UUID:2....  				Expression left = Expression.Property (pe' typeof(IProgram).GetProperty ("ChannelId"));  				Expression right = Expression.Constant (s);  				exp.Add (Expression.Equal (left' right));  			}  			// Combine the expression trees to create an expression tree that represents the  			Expression predicateBody = Expression.OrElse (exp [0]' exp [1]);  			for (int i = 2; i < idsList.Count; i++) {  				predicateBody = Expression.OrElse (predicateBody' exp [i]);  			}  			// Create an expression tree that represents the expression  			MethodCallExpression whereCallExpression = Expression.Call (typeof(Queryable)' "Where"' new Type[] {  				queryableData.ElementType  			}' queryableData.Expression' Expression.Lambda<Func<IProgram' bool>> (predicateBody' new ParameterExpression[] {  				pe  			}));  			// ***** End Where *****  			// Create an executable query from the expression tree.  			programssrv = queryableData.Provider.CreateQuery<IProgram> (whereCallExpression);  		}  	}  	// let's get all the results locally  	IList<IProgram> aggregateListPrograms = new List<IProgram> ();  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var programsq = programssrv.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += programsq.Count;  		foreach (var j in programsq) {  			aggregateListPrograms.Add (j);  		}  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	//programs = programssrv.AsEnumerable(); // local query now  	programs = aggregateListPrograms;  	if (pFilterOnState) {  		programs = programs.Where (p => p.State.Equals (myStateFilter));  		// this query has to be locally. Not supported on the server  	}  	if ((!string.IsNullOrEmpty (_timefilter))) {  		if (_timefilter == FilterTime.First50Items) {  			programs = programs.Take (50);  		} else if (_timefilter == FilterTime.First1000Items) {  			programs = programs.Take (1000);  		}  	}  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if (_anyChannel == enumDisplayProgram.None) {  	programs = new List<IProgram> ();  } else {  	// DAYS  	bool filterStartDate = false;  	bool filterEndDate = false;  	DateTime dateTimeStart = DateTime.UtcNow;  	DateTime dateTimeRangeEnd = DateTime.UtcNow.AddDays (1);  	int days = FilterTime.ReturnNumberOfDays (_timefilter);  	if (days > 0) {  		filterStartDate = true;  		dateTimeStart = (DateTime.UtcNow.Add (-TimeSpan.FromDays (days)));  	} else if (days == -1)// TimeRange  	 {  		filterStartDate = true;  		filterEndDate = true;  		dateTimeStart = _timefilterTimeRange.StartDate;  		if (_timefilterTimeRange.EndDate != null)// there is an end time  		 {  			dateTimeRangeEnd = (DateTime)_timefilterTimeRange.EndDate;  		}  	}  	// STATE  	bool pFilterOnState = FilterState != "All";  	ProgramState myStateFilter = ProgramState.Running;  	if (pFilterOnState) {  		myStateFilter = (ProgramState)Enum.Parse (typeof(ProgramState)' _statefilter);  	}  	bool bListEmpty = (idsList.Count == 0);  	// search  	if (_searchinname != null && !string.IsNullOrEmpty (_searchinname.Text)) {  		bool Error = false;  		switch (_searchinname.SearchType) {  		case SearchIn.ProgramName:  			programssrv = context.Programs.Where (p => (p.Name.ToLower ().Contains (_searchinname.Text.ToLower ())) && (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd));  			break;  		case SearchIn.ProgramId:  			string programguid = _searchinname.Text;  			if (programguid.StartsWith (Constants.ProgramIdPrefix)) {  				programguid = programguid.Substring (Constants.ProgramIdPrefix.Length);  			}  			try {  				var g = new Guid (programguid);  			} catch {  				Error = true;  				MessageBox.Show ("Error with program Id. Is it a valid GUID or program Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			if (!Error) {  				programssrv = context.Programs.Where (p => (p.Id == Constants.ProgramIdPrefix + programguid)// no need to filter the date or ID as user request a specific ID  				);  			}  			break;  		default:  			break;  		}  	} else {  		programssrv = context.Programs.Where (p => (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd));  		if (idsList.Count == 1 && _anyChannel == enumDisplayProgram.Selected) {  			programssrv = programssrv.Where (p => p.ChannelId == idsList [0]);  		} else if (idsList.Count > 1 && _anyChannel == enumDisplayProgram.Selected) {  			// let's build the query for all the IDs  			// The IQueryable data to query.  			IQueryable<IProgram> queryableData = programssrv.AsQueryable<IProgram> ();  			// Compose the expression tree that represents the parameter to the predicate.  			ParameterExpression pe = Expression.Parameter (typeof(IProgram)' "p");  			List<Expression> exp = new List<Expression> ();  			foreach (var s in idsList) {  				// ***** Where(p => p.ChannelId == "nb:chid:UUID:29aae99e-66d9-4a54-8cf0-8f652fd0f0ff" || p.ChannelId == "nb:chid:UUID:....)) *****  				// Create an expression tree that represents the expression 'p.ChannelId == "nb:chid:UUID:2....  				Expression left = Expression.Property (pe' typeof(IProgram).GetProperty ("ChannelId"));  				Expression right = Expression.Constant (s);  				exp.Add (Expression.Equal (left' right));  			}  			// Combine the expression trees to create an expression tree that represents the  			Expression predicateBody = Expression.OrElse (exp [0]' exp [1]);  			for (int i = 2; i < idsList.Count; i++) {  				predicateBody = Expression.OrElse (predicateBody' exp [i]);  			}  			// Create an expression tree that represents the expression  			MethodCallExpression whereCallExpression = Expression.Call (typeof(Queryable)' "Where"' new Type[] {  				queryableData.ElementType  			}' queryableData.Expression' Expression.Lambda<Func<IProgram' bool>> (predicateBody' new ParameterExpression[] {  				pe  			}));  			// ***** End Where *****  			// Create an executable query from the expression tree.  			programssrv = queryableData.Provider.CreateQuery<IProgram> (whereCallExpression);  		}  	}  	// let's get all the results locally  	IList<IProgram> aggregateListPrograms = new List<IProgram> ();  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var programsq = programssrv.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += programsq.Count;  		foreach (var j in programsq) {  			aggregateListPrograms.Add (j);  		}  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	//programs = programssrv.AsEnumerable(); // local query now  	programs = aggregateListPrograms;  	if (pFilterOnState) {  		programs = programs.Where (p => p.State.Equals (myStateFilter));  		// this query has to be locally. Not supported on the server  	}  	if ((!string.IsNullOrEmpty (_timefilter))) {  		if (_timefilter == FilterTime.First50Items) {  			programs = programs.Take (50);  		} else if (_timefilter == FilterTime.First1000Items) {  			programs = programs.Take (1000);  		}  	}  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if (_anyChannel == enumDisplayProgram.None) {  	programs = new List<IProgram> ();  } else {  	// DAYS  	bool filterStartDate = false;  	bool filterEndDate = false;  	DateTime dateTimeStart = DateTime.UtcNow;  	DateTime dateTimeRangeEnd = DateTime.UtcNow.AddDays (1);  	int days = FilterTime.ReturnNumberOfDays (_timefilter);  	if (days > 0) {  		filterStartDate = true;  		dateTimeStart = (DateTime.UtcNow.Add (-TimeSpan.FromDays (days)));  	} else if (days == -1)// TimeRange  	 {  		filterStartDate = true;  		filterEndDate = true;  		dateTimeStart = _timefilterTimeRange.StartDate;  		if (_timefilterTimeRange.EndDate != null)// there is an end time  		 {  			dateTimeRangeEnd = (DateTime)_timefilterTimeRange.EndDate;  		}  	}  	// STATE  	bool pFilterOnState = FilterState != "All";  	ProgramState myStateFilter = ProgramState.Running;  	if (pFilterOnState) {  		myStateFilter = (ProgramState)Enum.Parse (typeof(ProgramState)' _statefilter);  	}  	bool bListEmpty = (idsList.Count == 0);  	// search  	if (_searchinname != null && !string.IsNullOrEmpty (_searchinname.Text)) {  		bool Error = false;  		switch (_searchinname.SearchType) {  		case SearchIn.ProgramName:  			programssrv = context.Programs.Where (p => (p.Name.ToLower ().Contains (_searchinname.Text.ToLower ())) && (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd));  			break;  		case SearchIn.ProgramId:  			string programguid = _searchinname.Text;  			if (programguid.StartsWith (Constants.ProgramIdPrefix)) {  				programguid = programguid.Substring (Constants.ProgramIdPrefix.Length);  			}  			try {  				var g = new Guid (programguid);  			} catch {  				Error = true;  				MessageBox.Show ("Error with program Id. Is it a valid GUID or program Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  			if (!Error) {  				programssrv = context.Programs.Where (p => (p.Id == Constants.ProgramIdPrefix + programguid)// no need to filter the date or ID as user request a specific ID  				);  			}  			break;  		default:  			break;  		}  	} else {  		programssrv = context.Programs.Where (p => (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd));  		if (idsList.Count == 1 && _anyChannel == enumDisplayProgram.Selected) {  			programssrv = programssrv.Where (p => p.ChannelId == idsList [0]);  		} else if (idsList.Count > 1 && _anyChannel == enumDisplayProgram.Selected) {  			// let's build the query for all the IDs  			// The IQueryable data to query.  			IQueryable<IProgram> queryableData = programssrv.AsQueryable<IProgram> ();  			// Compose the expression tree that represents the parameter to the predicate.  			ParameterExpression pe = Expression.Parameter (typeof(IProgram)' "p");  			List<Expression> exp = new List<Expression> ();  			foreach (var s in idsList) {  				// ***** Where(p => p.ChannelId == "nb:chid:UUID:29aae99e-66d9-4a54-8cf0-8f652fd0f0ff" || p.ChannelId == "nb:chid:UUID:....)) *****  				// Create an expression tree that represents the expression 'p.ChannelId == "nb:chid:UUID:2....  				Expression left = Expression.Property (pe' typeof(IProgram).GetProperty ("ChannelId"));  				Expression right = Expression.Constant (s);  				exp.Add (Expression.Equal (left' right));  			}  			// Combine the expression trees to create an expression tree that represents the  			Expression predicateBody = Expression.OrElse (exp [0]' exp [1]);  			for (int i = 2; i < idsList.Count; i++) {  				predicateBody = Expression.OrElse (predicateBody' exp [i]);  			}  			// Create an expression tree that represents the expression  			MethodCallExpression whereCallExpression = Expression.Call (typeof(Queryable)' "Where"' new Type[] {  				queryableData.ElementType  			}' queryableData.Expression' Expression.Lambda<Func<IProgram' bool>> (predicateBody' new ParameterExpression[] {  				pe  			}));  			// ***** End Where *****  			// Create an executable query from the expression tree.  			programssrv = queryableData.Provider.CreateQuery<IProgram> (whereCallExpression);  		}  	}  	// let's get all the results locally  	IList<IProgram> aggregateListPrograms = new List<IProgram> ();  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var programsq = programssrv.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += programsq.Count;  		foreach (var j in programsq) {  			aggregateListPrograms.Add (j);  		}  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	//programs = programssrv.AsEnumerable(); // local query now  	programs = aggregateListPrograms;  	if (pFilterOnState) {  		programs = programs.Where (p => p.State.Equals (myStateFilter));  		// this query has to be locally. Not supported on the server  	}  	if ((!string.IsNullOrEmpty (_timefilter))) {  		if (_timefilter == FilterTime.First50Items) {  			programs = programs.Take (50);  		} else if (_timefilter == FilterTime.First1000Items) {  			programs = programs.Take (1000);  		}  	}  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if (_searchinname != null && !string.IsNullOrEmpty (_searchinname.Text)) {  	bool Error = false;  	switch (_searchinname.SearchType) {  	case SearchIn.ProgramName:  		programssrv = context.Programs.Where (p => (p.Name.ToLower ().Contains (_searchinname.Text.ToLower ())) && (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd));  		break;  	case SearchIn.ProgramId:  		string programguid = _searchinname.Text;  		if (programguid.StartsWith (Constants.ProgramIdPrefix)) {  			programguid = programguid.Substring (Constants.ProgramIdPrefix.Length);  		}  		try {  			var g = new Guid (programguid);  		} catch {  			Error = true;  			MessageBox.Show ("Error with program Id. Is it a valid GUID or program Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		if (!Error) {  			programssrv = context.Programs.Where (p => (p.Id == Constants.ProgramIdPrefix + programguid)// no need to filter the date or ID as user request a specific ID  			);  		}  		break;  	default:  		break;  	}  } else {  	programssrv = context.Programs.Where (p => (!filterStartDate || p.LastModified > dateTimeStart) && (!filterEndDate || p.LastModified < dateTimeRangeEnd));  	if (idsList.Count == 1 && _anyChannel == enumDisplayProgram.Selected) {  		programssrv = programssrv.Where (p => p.ChannelId == idsList [0]);  	} else if (idsList.Count > 1 && _anyChannel == enumDisplayProgram.Selected) {  		// let's build the query for all the IDs  		// The IQueryable data to query.  		IQueryable<IProgram> queryableData = programssrv.AsQueryable<IProgram> ();  		// Compose the expression tree that represents the parameter to the predicate.  		ParameterExpression pe = Expression.Parameter (typeof(IProgram)' "p");  		List<Expression> exp = new List<Expression> ();  		foreach (var s in idsList) {  			// ***** Where(p => p.ChannelId == "nb:chid:UUID:29aae99e-66d9-4a54-8cf0-8f652fd0f0ff" || p.ChannelId == "nb:chid:UUID:....)) *****  			// Create an expression tree that represents the expression 'p.ChannelId == "nb:chid:UUID:2....  			Expression left = Expression.Property (pe' typeof(IProgram).GetProperty ("ChannelId"));  			Expression right = Expression.Constant (s);  			exp.Add (Expression.Equal (left' right));  		}  		// Combine the expression trees to create an expression tree that represents the  		Expression predicateBody = Expression.OrElse (exp [0]' exp [1]);  		for (int i = 2; i < idsList.Count; i++) {  			predicateBody = Expression.OrElse (predicateBody' exp [i]);  		}  		// Create an expression tree that represents the expression  		MethodCallExpression whereCallExpression = Expression.Call (typeof(Queryable)' "Where"' new Type[] {  			queryableData.ElementType  		}' queryableData.Expression' Expression.Lambda<Func<IProgram' bool>> (predicateBody' new ParameterExpression[] {  			pe  		}));  		// ***** End Where *****  		// Create an executable query from the expression tree.  		programssrv = queryableData.Provider.CreateQuery<IProgram> (whereCallExpression);  	}  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if (idsList.Count == 1 && _anyChannel == enumDisplayProgram.Selected) {  	programssrv = programssrv.Where (p => p.ChannelId == idsList [0]);  } else if (idsList.Count > 1 && _anyChannel == enumDisplayProgram.Selected) {  	// let's build the query for all the IDs  	// The IQueryable data to query.  	IQueryable<IProgram> queryableData = programssrv.AsQueryable<IProgram> ();  	// Compose the expression tree that represents the parameter to the predicate.  	ParameterExpression pe = Expression.Parameter (typeof(IProgram)' "p");  	List<Expression> exp = new List<Expression> ();  	foreach (var s in idsList) {  		// ***** Where(p => p.ChannelId == "nb:chid:UUID:29aae99e-66d9-4a54-8cf0-8f652fd0f0ff" || p.ChannelId == "nb:chid:UUID:....)) *****  		// Create an expression tree that represents the expression 'p.ChannelId == "nb:chid:UUID:2....  		Expression left = Expression.Property (pe' typeof(IProgram).GetProperty ("ChannelId"));  		Expression right = Expression.Constant (s);  		exp.Add (Expression.Equal (left' right));  	}  	// Combine the expression trees to create an expression tree that represents the  	Expression predicateBody = Expression.OrElse (exp [0]' exp [1]);  	for (int i = 2; i < idsList.Count; i++) {  		predicateBody = Expression.OrElse (predicateBody' exp [i]);  	}  	// Create an expression tree that represents the expression  	MethodCallExpression whereCallExpression = Expression.Call (typeof(Queryable)' "Where"' new Type[] {  		queryableData.ElementType  	}' queryableData.Expression' Expression.Lambda<Func<IProgram' bool>> (predicateBody' new ParameterExpression[] {  		pe  	}));  	// ***** End Where *****  	// Create an executable query from the expression tree.  	programssrv = queryableData.Provider.CreateQuery<IProgram> (whereCallExpression);  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if (idsList.Count > 1 && _anyChannel == enumDisplayProgram.Selected) {  	// let's build the query for all the IDs  	// The IQueryable data to query.  	IQueryable<IProgram> queryableData = programssrv.AsQueryable<IProgram> ();  	// Compose the expression tree that represents the parameter to the predicate.  	ParameterExpression pe = Expression.Parameter (typeof(IProgram)' "p");  	List<Expression> exp = new List<Expression> ();  	foreach (var s in idsList) {  		// ***** Where(p => p.ChannelId == "nb:chid:UUID:29aae99e-66d9-4a54-8cf0-8f652fd0f0ff" || p.ChannelId == "nb:chid:UUID:....)) *****  		// Create an expression tree that represents the expression 'p.ChannelId == "nb:chid:UUID:2....  		Expression left = Expression.Property (pe' typeof(IProgram).GetProperty ("ChannelId"));  		Expression right = Expression.Constant (s);  		exp.Add (Expression.Equal (left' right));  	}  	// Combine the expression trees to create an expression tree that represents the  	Expression predicateBody = Expression.OrElse (exp [0]' exp [1]);  	for (int i = 2; i < idsList.Count; i++) {  		predicateBody = Expression.OrElse (predicateBody' exp [i]);  	}  	// Create an expression tree that represents the expression  	MethodCallExpression whereCallExpression = Expression.Call (typeof(Queryable)' "Where"' new Type[] {  		queryableData.ElementType  	}' queryableData.Expression' Expression.Lambda<Func<IProgram' bool>> (predicateBody' new ParameterExpression[] {  		pe  	}));  	// ***** End Where *****  	// Create an executable query from the expression tree.  	programssrv = queryableData.Provider.CreateQuery<IProgram> (whereCallExpression);  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: for (int i = 2; i < idsList.Count; i++) {  	predicateBody = Expression.OrElse (predicateBody' exp [i]);  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if ((!string.IsNullOrEmpty (_timefilter))) {  	if (_timefilter == FilterTime.First50Items) {  		programs = programs.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		programs = programs.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if ((!string.IsNullOrEmpty (_timefilter))) {  	if (_timefilter == FilterTime.First50Items) {  		programs = programs.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		programs = programs.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if (_timefilter == FilterTime.First50Items) {  	programs = programs.Take (50);  } else if (_timefilter == FilterTime.First1000Items) {  	programs = programs.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if (_timefilter == FilterTime.First50Items) {  	programs = programs.Take (50);  } else if (_timefilter == FilterTime.First1000Items) {  	programs = programs.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: programs = programs.Take (50);  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: if (_timefilter == FilterTime.First1000Items) {  	programs = programs.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewLiveProgram,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,RefreshPrograms,The following statement contains a magic number: programs = programs.Take (1000);  
Magic Number,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The following statement contains a magic number: if (channel != null) {  	try {  		var state = channel.State;  		var STask = fCall ();  		operation = await STask;  		while (operation.State == OperationState.InProgress) {  			//refresh the operation  			operation = _context.Operations.GetOperation (operation.Id);  			// refresh the channel  			IChannel channelR = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  			if (channelR != null && state != channelR.State) {  				state = channelR.State;  				if (dataGridViewChannelsV != null)  					dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channelR))' null);  			}  			System.Threading.Thread.Sleep (1000);  		}  		if (operation.State == OperationState.Succeeded) {  			mainform.TextBoxLogWriteLine ("Channel '{0}' : {1}."' channel.Name' strStatusSuccess);  			IChannel channelR = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  			// we display a notification is taskbar for channel started or reset  			if (channelR != null && (strStatusSuccess == "started" || strStatusSuccess == "reset")) {  				mainform.BeginInvoke (new Action (() => {  					mainform.Notify ("Channel " + strStatusSuccess' string.Format ("{0}"' channelR.Name)' false);  				}));  			}  		} else {  			mainform.TextBoxLogWriteLine ("Channel '{0}' NOT {1}. (Error {2})"' channel.Name' strStatusSuccess' operation.ErrorCode' true);  			mainform.TextBoxLogWriteLine ("Error message : {0}"' operation.ErrorMessage' true);  		}  		if (dataGridViewChannelsV != null)  			dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channel))' null);  	} catch (Exception ex) {  		mainform.TextBoxLogWriteLine ("Channel '{0}' : Error! {1}"' channel.Name' Program.GetErrorMessage (ex)' true);  	}  }  
Magic Number,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The following statement contains a magic number: try {  	var state = channel.State;  	var STask = fCall ();  	operation = await STask;  	while (operation.State == OperationState.InProgress) {  		//refresh the operation  		operation = _context.Operations.GetOperation (operation.Id);  		// refresh the channel  		IChannel channelR = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  		if (channelR != null && state != channelR.State) {  			state = channelR.State;  			if (dataGridViewChannelsV != null)  				dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channelR))' null);  		}  		System.Threading.Thread.Sleep (1000);  	}  	if (operation.State == OperationState.Succeeded) {  		mainform.TextBoxLogWriteLine ("Channel '{0}' : {1}."' channel.Name' strStatusSuccess);  		IChannel channelR = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  		// we display a notification is taskbar for channel started or reset  		if (channelR != null && (strStatusSuccess == "started" || strStatusSuccess == "reset")) {  			mainform.BeginInvoke (new Action (() => {  				mainform.Notify ("Channel " + strStatusSuccess' string.Format ("{0}"' channelR.Name)' false);  			}));  		}  	} else {  		mainform.TextBoxLogWriteLine ("Channel '{0}' NOT {1}. (Error {2})"' channel.Name' strStatusSuccess' operation.ErrorCode' true);  		mainform.TextBoxLogWriteLine ("Error message : {0}"' operation.ErrorMessage' true);  	}  	if (dataGridViewChannelsV != null)  		dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channel))' null);  } catch (Exception ex) {  	mainform.TextBoxLogWriteLine ("Channel '{0}' : Error! {1}"' channel.Name' Program.GetErrorMessage (ex)' true);  }  
Magic Number,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The following statement contains a magic number: while (operation.State == OperationState.InProgress) {  	//refresh the operation  	operation = _context.Operations.GetOperation (operation.Id);  	// refresh the channel  	IChannel channelR = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  	if (channelR != null && state != channelR.State) {  		state = channelR.State;  		if (dataGridViewChannelsV != null)  			dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channelR))' null);  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The following statement contains a magic number: try {  	var state = channel.State;  	var STask = fCall (ts' i' b);  	operation = await STask;  	while (operation.State == OperationState.InProgress) {  		//refresh the operation  		operation = _context.Operations.GetOperation (operation.Id);  		// refresh the channel  		IChannel channelR = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  		if (channelR != null && state != channelR.State) {  			state = channelR.State;  			if (dataGridViewChannelsV != null)  				dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channelR))' null);  		}  		System.Threading.Thread.Sleep (1000);  	}  	if (operation.State == OperationState.Succeeded) {  		mainform.TextBoxLogWriteLine ("Channel '{0}' : {1}."' channel.Name' strStatusSuccess);  	} else {  		mainform.TextBoxLogWriteLine ("Channel '{0}' NOT {1}. (Error {2})"' channel.Name' strStatusSuccess' operation.ErrorCode' true);  		mainform.TextBoxLogWriteLine ("Error message : {0}"' operation.ErrorMessage' true);  	}  	if (dataGridViewChannelsV != null)  		dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channel))' null);  } catch (Exception ex) {  	mainform.TextBoxLogWriteLine ("Channel '{0}' : Error! {1}"' channel.Name' Program.GetErrorMessage (ex)' true);  }  
Magic Number,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The following statement contains a magic number: while (operation.State == OperationState.InProgress) {  	//refresh the operation  	operation = _context.Operations.GetOperation (operation.Id);  	// refresh the channel  	IChannel channelR = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  	if (channelR != null && state != channelR.State) {  		state = channelR.State;  		if (dataGridViewChannelsV != null)  			dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channelR))' null);  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The following statement contains a magic number: try {  	var state = channel.State;  	var STask = fCall (ts' s);  	operation = await STask;  	while (operation.State == OperationState.InProgress) {  		//refresh the operation  		operation = _context.Operations.GetOperation (operation.Id);  		// refresh the channel  		IChannel channelR = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  		if (channelR != null && state != channelR.State) {  			state = channelR.State;  			if (dataGridViewChannelsV != null)  				dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channelR))' null);  		}  		System.Threading.Thread.Sleep (1000);  	}  	if (operation.State == OperationState.Succeeded) {  		mainform.TextBoxLogWriteLine ("Channel '{0}' : {1}."' channel.Name' strStatusSuccess);  	} else {  		mainform.TextBoxLogWriteLine ("Channel '{0}' NOT {1}. (Error {2})"' channel.Name' strStatusSuccess' operation.ErrorCode' true);  		mainform.TextBoxLogWriteLine ("Error message : {0}"' operation.ErrorMessage' true);  	}  	if (dataGridViewChannelsV != null)  		dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channel))' null);  } catch (Exception ex) {  	mainform.TextBoxLogWriteLine ("Channel '{0}' : Error! {1}"' channel.Name' Program.GetErrorMessage (ex)' true);  }  
Magic Number,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The following statement contains a magic number: while (operation.State == OperationState.InProgress) {  	//refresh the operation  	operation = _context.Operations.GetOperation (operation.Id);  	// refresh the channel  	IChannel channelR = _context.Channels.Where (c => c.Id == channel.Id).FirstOrDefault ();  	if (channelR != null && state != channelR.State) {  		state = channelR.State;  		if (dataGridViewChannelsV != null)  			dataGridViewChannelsV.BeginInvoke (new Action (() => dataGridViewChannelsV.RefreshChannel (channelR))' null);  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,AMSExplorer,ChannelInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\live.cs,ChannelExecuteOperationAsync,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,buttonReset_Click,The following statement contains a magic number: numericUpDownPriority.Value = 10;  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,buttonReset_Click,The following statement contains a magic number: numericUpDownLocatorDuration.Value = 3650;  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,buttonReset_Click,The following statement contains a magic number: numericUpDownTokenDuration.Value = 60;  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,buttonReset_Click,The following statement contains a magic number: numericUpDownMESPrice.Value = ((decimal)0.015);  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,buttonReset_Click,The following statement contains a magic number: numericUpDownPremiumWorkflowPrice.Value = ((decimal)0.035);  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,buttonReset_Click,The following statement contains a magic number: numericUpDownIndexingPrice.Value = ((decimal)0.02);  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,buttonReset_Click,The following statement contains a magic number: numericUpDownAssetAnalysisStart.Value = 10;  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,buttonReset_Click,The following statement contains a magic number: numericUpDownAssetAnalysisStep.Value = 20;  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAssetAnalysisStep.Value = new decimal (new int[] {  	20'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAssetAnalysisStart.Value = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownTokenDuration.Maximum = new decimal (new int[] {  	36500'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownTokenDuration.Value = new decimal (new int[] {  	5'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownLocatorDuration.Maximum = new decimal (new int[] {  	36500'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownLocatorDuration.Value = new decimal (new int[] {  	3650'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownPriority.Value = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMESPrice.DecimalPlaces = 3;  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMESPrice.Increment = new decimal (new int[] {  	1'  	0'  	0'  	196608  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMESPrice.Value = new decimal (new int[] {  	15'  	0'  	0'  	196608  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMESPrice.Value = new decimal (new int[] {  	15'  	0'  	0'  	196608  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownIndexingPrice.DecimalPlaces = 2;  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownIndexingPrice.Increment = new decimal (new int[] {  	1'  	0'  	0'  	131072  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownIndexingPrice.Value = new decimal (new int[] {  	2'  	0'  	0'  	131072  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownIndexingPrice.Value = new decimal (new int[] {  	2'  	0'  	0'  	131072  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownPremiumWorkflowPrice.DecimalPlaces = 3;  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownPremiumWorkflowPrice.Increment = new decimal (new int[] {  	1'  	0'  	0'  	196608  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownPremiumWorkflowPrice.Value = new decimal (new int[] {  	35'  	0'  	0'  	196608  });  
Magic Number,AMSExplorer,Options,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\options.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownPremiumWorkflowPrice.Value = new decimal (new int[] {  	35'  	0'  	0'  	196608  });  
Magic Number,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownSeconds.DecimalPlaces = 2;  
Magic Number,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownSeconds.Maximum = new decimal (new int[] {  	1610612735'  	1960709702'  	-1042360779'  	1769472  });  
Magic Number,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownSeconds.Maximum = new decimal (new int[] {  	1610612735'  	1960709702'  	-1042360779'  	1769472  });  
Magic Number,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownSeconds.Maximum = new decimal (new int[] {  	1610612735'  	1960709702'  	-1042360779'  	1769472  });  
Magic Number,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownSeconds.Maximum = new decimal (new int[] {  	1610612735'  	1960709702'  	-1042360779'  	1769472  });  
Magic Number,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMinutes.Maximum = new decimal (new int[] {  	59'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownHours.Maximum = new decimal (new int[] {  	23'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownDays.Maximum = new decimal (new int[] {  	1874919424'  	2328306'  	0'  	0  });  
Magic Number,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownDays.Maximum = new decimal (new int[] {  	1874919424'  	2328306'  	0'  	0  });  
Magic Number,AMSExplorer,TimeControl,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\TimeControl.cs,InitializeComponent,The following statement contains a magic number: this.trackBarTime.Maximum = 1000;  
Magic Number,AMSExplorer,CreateLocator,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLocator.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerEndTime.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,CreateLocator,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLocator.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerEndDate.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,CreateLocator,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\CreateLocator.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerStartTime.MinDate = new System.DateTime (2014' 1' 1' 0' 0' 0' 0);  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,listViewProcessors_SelectedIndexChanged,The following statement contains a magic number: for (int index_task = 1; index_task <= numericUpDownTasks.Value; index_task++) {  	ListView mylistview = ReturnListViewProcessor (index_task);  	TextBox mytextboxconfig = ReturnTextBoxConfiguration (index_task);  	if (mylistview.SelectedItems.Count == 0) {  		allprocessorsselected = false;  	} else {  		if (Procs [mylistview.SelectedIndices [0]].Name == Constants.AzureMediaEncoderPremiumWorkflow) {  			if (SelectedAssets.Count < 2) {  				MessageBox.Show ("You must at least have two input assets : the workflow file and the video file."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  			}  		} else {  			mytextboxconfig.Enabled = true;  		}  	}  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,listViewProcessors_SelectedIndexChanged,The following statement contains a magic number: if (mylistview.SelectedItems.Count == 0) {  	allprocessorsselected = false;  } else {  	if (Procs [mylistview.SelectedIndices [0]].Name == Constants.AzureMediaEncoderPremiumWorkflow) {  		if (SelectedAssets.Count < 2) {  			MessageBox.Show ("You must at least have two input assets : the workflow file and the video file."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  		}  	} else {  		mytextboxconfig.Enabled = true;  	}  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,listViewProcessors_SelectedIndexChanged,The following statement contains a magic number: if (Procs [mylistview.SelectedIndices [0]].Name == Constants.AzureMediaEncoderPremiumWorkflow) {  	if (SelectedAssets.Count < 2) {  		MessageBox.Show ("You must at least have two input assets : the workflow file and the video file."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  	}  } else {  	mytextboxconfig.Enabled = true;  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,listViewProcessors_SelectedIndexChanged,The following statement contains a magic number: if (SelectedAssets.Count < 2) {  	MessageBox.Show ("You must at least have two input assets : the workflow file and the video file."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: if (numericUpDownTasks.Value > numberoftasks)// increase   {  	for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Add (mytabpage);  	}  } else// decrease   {  	for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Remove (mytabpage);  	}  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: if (numericUpDownTasks.Value > numberoftasks)// increase   {  	for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Add (mytabpage);  	}  } else// decrease   {  	for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Remove (mytabpage);  	}  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: if (numericUpDownTasks.Value > numberoftasks)// increase   {  	for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Add (mytabpage);  	}  } else// decrease   {  	for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Remove (mytabpage);  	}  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: if (numericUpDownTasks.Value > numberoftasks)// increase   {  	for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Add (mytabpage);  	}  } else// decrease   {  	for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Remove (mytabpage);  	}  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: if (numericUpDownTasks.Value > numberoftasks)// increase   {  	for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Add (mytabpage);  	}  } else// decrease   {  	for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Remove (mytabpage);  	}  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: if (numericUpDownTasks.Value > numberoftasks)// increase   {  	for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Add (mytabpage);  	}  } else// decrease   {  	for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Remove (mytabpage);  	}  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: if (numericUpDownTasks.Value > numberoftasks)// increase   {  	for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Add (mytabpage);  	}  } else// decrease   {  	for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Remove (mytabpage);  	}  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: if (numericUpDownTasks.Value > numberoftasks)// increase   {  	for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Add (mytabpage);  	}  } else// decrease   {  	for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  		TabPage mytabpage = null;  		switch (i) {  		case 2:  			mytabpage = tabPageTask2;  			break;  		case 3:  			mytabpage = tabPageTask3;  			break;  		case 4:  			mytabpage = tabPageTask4;  			break;  		case 5:  			mytabpage = tabPageTask5;  			break;  		default:  			break;  		}  		if (mytabpage != null)  			tabcontrolgeneric.TabPages.Remove (mytabpage);  	}  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  	TabPage mytabpage = null;  	switch (i) {  	case 2:  		mytabpage = tabPageTask2;  		break;  	case 3:  		mytabpage = tabPageTask3;  		break;  	case 4:  		mytabpage = tabPageTask4;  		break;  	case 5:  		mytabpage = tabPageTask5;  		break;  	default:  		break;  	}  	if (mytabpage != null)  		tabcontrolgeneric.TabPages.Add (mytabpage);  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  	TabPage mytabpage = null;  	switch (i) {  	case 2:  		mytabpage = tabPageTask2;  		break;  	case 3:  		mytabpage = tabPageTask3;  		break;  	case 4:  		mytabpage = tabPageTask4;  		break;  	case 5:  		mytabpage = tabPageTask5;  		break;  	default:  		break;  	}  	if (mytabpage != null)  		tabcontrolgeneric.TabPages.Add (mytabpage);  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  	TabPage mytabpage = null;  	switch (i) {  	case 2:  		mytabpage = tabPageTask2;  		break;  	case 3:  		mytabpage = tabPageTask3;  		break;  	case 4:  		mytabpage = tabPageTask4;  		break;  	case 5:  		mytabpage = tabPageTask5;  		break;  	default:  		break;  	}  	if (mytabpage != null)  		tabcontrolgeneric.TabPages.Add (mytabpage);  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: for (int i = numberoftasks + 1; i <= numericUpDownTasks.Value; i++) {  	TabPage mytabpage = null;  	switch (i) {  	case 2:  		mytabpage = tabPageTask2;  		break;  	case 3:  		mytabpage = tabPageTask3;  		break;  	case 4:  		mytabpage = tabPageTask4;  		break;  	case 5:  		mytabpage = tabPageTask5;  		break;  	default:  		break;  	}  	if (mytabpage != null)  		tabcontrolgeneric.TabPages.Add (mytabpage);  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: switch (i) {  case 2:  	mytabpage = tabPageTask2;  	break;  case 3:  	mytabpage = tabPageTask3;  	break;  case 4:  	mytabpage = tabPageTask4;  	break;  case 5:  	mytabpage = tabPageTask5;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: switch (i) {  case 2:  	mytabpage = tabPageTask2;  	break;  case 3:  	mytabpage = tabPageTask3;  	break;  case 4:  	mytabpage = tabPageTask4;  	break;  case 5:  	mytabpage = tabPageTask5;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: switch (i) {  case 2:  	mytabpage = tabPageTask2;  	break;  case 3:  	mytabpage = tabPageTask3;  	break;  case 4:  	mytabpage = tabPageTask4;  	break;  case 5:  	mytabpage = tabPageTask5;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: switch (i) {  case 2:  	mytabpage = tabPageTask2;  	break;  case 3:  	mytabpage = tabPageTask3;  	break;  case 4:  	mytabpage = tabPageTask4;  	break;  case 5:  	mytabpage = tabPageTask5;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  	TabPage mytabpage = null;  	switch (i) {  	case 2:  		mytabpage = tabPageTask2;  		break;  	case 3:  		mytabpage = tabPageTask3;  		break;  	case 4:  		mytabpage = tabPageTask4;  		break;  	case 5:  		mytabpage = tabPageTask5;  		break;  	default:  		break;  	}  	if (mytabpage != null)  		tabcontrolgeneric.TabPages.Remove (mytabpage);  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  	TabPage mytabpage = null;  	switch (i) {  	case 2:  		mytabpage = tabPageTask2;  		break;  	case 3:  		mytabpage = tabPageTask3;  		break;  	case 4:  		mytabpage = tabPageTask4;  		break;  	case 5:  		mytabpage = tabPageTask5;  		break;  	default:  		break;  	}  	if (mytabpage != null)  		tabcontrolgeneric.TabPages.Remove (mytabpage);  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  	TabPage mytabpage = null;  	switch (i) {  	case 2:  		mytabpage = tabPageTask2;  		break;  	case 3:  		mytabpage = tabPageTask3;  		break;  	case 4:  		mytabpage = tabPageTask4;  		break;  	case 5:  		mytabpage = tabPageTask5;  		break;  	default:  		break;  	}  	if (mytabpage != null)  		tabcontrolgeneric.TabPages.Remove (mytabpage);  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: for (int i = numberoftasks; i > numericUpDownTasks.Value; i--) {  	TabPage mytabpage = null;  	switch (i) {  	case 2:  		mytabpage = tabPageTask2;  		break;  	case 3:  		mytabpage = tabPageTask3;  		break;  	case 4:  		mytabpage = tabPageTask4;  		break;  	case 5:  		mytabpage = tabPageTask5;  		break;  	default:  		break;  	}  	if (mytabpage != null)  		tabcontrolgeneric.TabPages.Remove (mytabpage);  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: switch (i) {  case 2:  	mytabpage = tabPageTask2;  	break;  case 3:  	mytabpage = tabPageTask3;  	break;  case 4:  	mytabpage = tabPageTask4;  	break;  case 5:  	mytabpage = tabPageTask5;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: switch (i) {  case 2:  	mytabpage = tabPageTask2;  	break;  case 3:  	mytabpage = tabPageTask3;  	break;  case 4:  	mytabpage = tabPageTask4;  	break;  case 5:  	mytabpage = tabPageTask5;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: switch (i) {  case 2:  	mytabpage = tabPageTask2;  	break;  case 3:  	mytabpage = tabPageTask3;  	break;  case 4:  	mytabpage = tabPageTask4;  	break;  case 5:  	mytabpage = tabPageTask5;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: switch (i) {  case 2:  	mytabpage = tabPageTask2;  	break;  case 3:  	mytabpage = tabPageTask3;  	break;  case 4:  	mytabpage = tabPageTask4;  	break;  case 5:  	mytabpage = tabPageTask5;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownPriority.Value = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,MultipleProcessor,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\MultipleProcessor.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownTasks.Maximum = new decimal (new int[] {  	5'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (bMultiAssetMode) {  	CheckBox CBV = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' 0));  	CheckBox CBA = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' 0));  	if (CBV.Checked) {  		bVisualOverlay = false;  		// fist row is enabled for visualoverlay now' not possible' so we disable it  		CBV.Checked = false;  		// not possible to do overlay with first asset  	}  	if (CBA.Checked) {  		bAudioOverlay = false;  		// fist row is enabled for audiooverlay now' not possible' so we disable it  		CBA.Checked = false;  		// not possible to do overlay with first asset  	}  	CBV.Enabled = false;  	// not possible to do overlay with first asset  	CBA.Enabled = false;  	// not possible to do overlay with first asset  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (bMultiAssetMode) {  	CheckBox CBV = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' 0));  	CheckBox CBA = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' 0));  	if (CBV.Checked) {  		bVisualOverlay = false;  		// fist row is enabled for visualoverlay now' not possible' so we disable it  		CBV.Checked = false;  		// not possible to do overlay with first asset  	}  	if (CBA.Checked) {  		bAudioOverlay = false;  		// fist row is enabled for audiooverlay now' not possible' so we disable it  		CBA.Checked = false;  		// not possible to do overlay with first asset  	}  	CBV.Enabled = false;  	// not possible to do overlay with first asset  	CBA.Enabled = false;  	// not possible to do overlay with first asset  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (tableLayoutPanelIAssets.RowCount > 1) {  	for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  		tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  		// button up  		tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  		// button down  		if (!bVisualOverlay)// no visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  			// checkbox overlay  		} else// one visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  		}  		if (!bAudioOverlay)// no audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  			// checkbox overlay  		} else// one audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  		}  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (tableLayoutPanelIAssets.RowCount > 1) {  	for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  		tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  		// button up  		tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  		// button down  		if (!bVisualOverlay)// no visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  			// checkbox overlay  		} else// one visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  		}  		if (!bAudioOverlay)// no audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  			// checkbox overlay  		} else// one audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  		}  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (tableLayoutPanelIAssets.RowCount > 1) {  	for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  		tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  		// button up  		tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  		// button down  		if (!bVisualOverlay)// no visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  			// checkbox overlay  		} else// one visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  		}  		if (!bAudioOverlay)// no audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  			// checkbox overlay  		} else// one audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  		}  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (tableLayoutPanelIAssets.RowCount > 1) {  	for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  		tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  		// button up  		tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  		// button down  		if (!bVisualOverlay)// no visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  			// checkbox overlay  		} else// one visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  		}  		if (!bAudioOverlay)// no audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  			// checkbox overlay  		} else// one audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  		}  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (tableLayoutPanelIAssets.RowCount > 1) {  	for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  		tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  		// button up  		tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  		// button down  		if (!bVisualOverlay)// no visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  			// checkbox overlay  		} else// one visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  		}  		if (!bAudioOverlay)// no audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  			// checkbox overlay  		} else// one audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  		}  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (tableLayoutPanelIAssets.RowCount > 1) {  	for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  		tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  		// button up  		tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  		// button down  		if (!bVisualOverlay)// no visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  			// checkbox overlay  		} else// one visual overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  		}  		if (!bAudioOverlay)// no audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  			// checkbox overlay  		} else// one audio overlay  		 {  			tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  		}  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  	tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  	// button up  	tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  	// button down  	if (!bVisualOverlay)// no visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  		// checkbox overlay  	} else// one visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  	}  	if (!bAudioOverlay)// no audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  		// checkbox overlay  	} else// one audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  	tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  	// button up  	tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  	// button down  	if (!bVisualOverlay)// no visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  		// checkbox overlay  	} else// one visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  	}  	if (!bAudioOverlay)// no audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  		// checkbox overlay  	} else// one audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  	tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  	// button up  	tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  	// button down  	if (!bVisualOverlay)// no visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  		// checkbox overlay  	} else// one visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  	}  	if (!bAudioOverlay)// no audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  		// checkbox overlay  	} else// one audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  	tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  	// button up  	tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  	// button down  	if (!bVisualOverlay)// no visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  		// checkbox overlay  	} else// one visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  	}  	if (!bAudioOverlay)// no audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  		// checkbox overlay  	} else// one audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  	tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  	// button up  	tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  	// button down  	if (!bVisualOverlay)// no visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  		// checkbox overlay  	} else// one visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  	}  	if (!bAudioOverlay)// no audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  		// checkbox overlay  	} else// one audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: for (int i = 1; i < tableLayoutPanelIAssets.RowCount; i++) {  	tableLayoutPanelIAssets.GetControlFromPosition (0' i).Enabled = true;  	// button up  	tableLayoutPanelIAssets.GetControlFromPosition (1' i).Enabled = true;  	// button down  	if (!bVisualOverlay)// no visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  		// checkbox overlay  	} else// one visual overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  	}  	if (!bAudioOverlay)// no audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  		// checkbox overlay  	} else// one audio overlay  	 {  		tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (!bVisualOverlay)// no visual overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  	// checkbox overlay  } else// one visual overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (!bVisualOverlay)// no visual overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  	// checkbox overlay  } else// one visual overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (!bVisualOverlay)// no visual overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  	// checkbox overlay  } else// one visual overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = true;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: tableLayoutPanelIAssets.GetControlFromPosition (4' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (4' i)).Checked;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (!bAudioOverlay)// no audio overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  	// checkbox overlay  } else// one audio overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (!bAudioOverlay)// no audio overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  	// checkbox overlay  } else// one audio overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: if (!bAudioOverlay)// no audio overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  	// checkbox overlay  } else// one audio overlay   {  	tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = true;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,UpdateControls,The following statement contains a magic number: tableLayoutPanelIAssets.GetControlFromPosition (5' i).Enabled = ((CheckBox)tableLayoutPanelIAssets.GetControlFromPosition (5' i)).Checked;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,checkBoxStitch_CheckedChanged,The following statement contains a magic number: for (int i = 0; i < tableLayoutPanelIAssets.ColumnCount; i++) {  	Control c = tableLayoutPanelIAssets.GetControlFromPosition (i' position.Row);  	if (c.Text == strEditTimes) {  		CheckBox cbEditTime = (CheckBox)c;  		cbEditTime.Enabled = cbStitch.Checked;  		// enable or disable time checkbox  		if (!cbStitch.Checked)  			cbEditTime.Checked = false;  		// enable or disable time checkbox  		this.tableLayoutPanelIAssets.Controls [this.tableLayoutPanelIAssets.Controls.IndexOf (c) + 1].Enabled = cbEditTime.Checked;  		// edit time control  		this.tableLayoutPanelIAssets.Controls [this.tableLayoutPanelIAssets.Controls.IndexOf (c) + 2].Enabled = cbEditTime.Checked;  		// start time code control  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,checkBoxStitch_CheckedChanged,The following statement contains a magic number: if (c.Text == strEditTimes) {  	CheckBox cbEditTime = (CheckBox)c;  	cbEditTime.Enabled = cbStitch.Checked;  	// enable or disable time checkbox  	if (!cbStitch.Checked)  		cbEditTime.Checked = false;  	// enable or disable time checkbox  	this.tableLayoutPanelIAssets.Controls [this.tableLayoutPanelIAssets.Controls.IndexOf (c) + 1].Enabled = cbEditTime.Checked;  	// edit time control  	this.tableLayoutPanelIAssets.Controls [this.tableLayoutPanelIAssets.Controls.IndexOf (c) + 2].Enabled = cbEditTime.Checked;  	// start time code control  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,checkBoxStitch_CheckedChanged,The following statement contains a magic number: this.tableLayoutPanelIAssets.Controls [this.tableLayoutPanelIAssets.Controls.IndexOf (c) + 2].Enabled = cbEditTime.Checked;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnCount += 3;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: foreach (ColumnStyle style in tableLayoutPanelIAssets.ColumnStyles) {  	style.SizeType = SizeType.Absolute;  	style.Width = 80;  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: style.Width = 80;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [0].Width = 20;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [1].Width = 20;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [2].SizeType = SizeType.Absolute;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [2].Width = 20;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [2].Width = 20;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [3].SizeType = SizeType.Percent;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [3].Width = 10;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [3].Width = 10;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [4].SizeType = SizeType.Absolute;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [4].Width = 100;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [4].Width = 100;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [5].SizeType = SizeType.Absolute;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [5].Width = 100;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,BuildAssetsPanel,The following statement contains a magic number: tableLayoutPanelIAssets.ColumnStyles [5].Width = 100;  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddRowControls,The following statement contains a magic number: tableLayoutPanelIAssets.Controls.Add (Index' 2/* Column Index */' i/* Row index */);  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddRowControls,The following statement contains a magic number: tableLayoutPanelIAssets.Controls.Add (label' 3/* Column Index */' i/* Row index */);  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddRowControls,The following statement contains a magic number: tableLayoutPanelIAssets.Controls.Add (checkboxVisualOverlay' 4/* Column Index */' i/* Row index */);  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddRowControls,The following statement contains a magic number: tableLayoutPanelIAssets.Controls.Add (checkboxAudioOverlay' 5/* Column Index */' i/* Row index */);  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddRowControls,The following statement contains a magic number: tableLayoutPanelIAssets.Controls.Add (checkboxStitch' 6/* Column Index */' i/* Row index */);  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddRowControls,The following statement contains a magic number: tableLayoutPanelIAssets.Controls.Add (checkboxTime' 7/* Column Index */' i/* Row index */);  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddRowControls,The following statement contains a magic number: tableLayoutPanelIAssets.Controls.Add (textbaseStart' 8/* Column Index */' i/* Row index */);  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,AddRowControls,The following statement contains a magic number: tableLayoutPanelIAssets.Controls.Add (textbaseEnd' 9/* Column Index */' i/* Row index */);  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,SwapControls,The following statement contains a magic number: for (int col = 0; col < tableLayoutPanelIAssets.ColumnCount; col++) {  	if (col != 2)// col = 2 it's Visual Index column  	 {  		Control controw1 = tableLayoutPanelIAssets.GetControlFromPosition (col' indexrow1);  		Control controw2 = tableLayoutPanelIAssets.GetControlFromPosition (col' indexrow2);  		tableLayoutPanelIAssets.SetRow (controw1' indexrow2);  		tableLayoutPanelIAssets.SetRow (controw2' indexrow1);  		if (bMultiAssetMode)// if we have multiple assets as source' then let's exchange the assets and update the tag  		 {  			SwapSelectedAssets (indexrow1' indexrow2);  			// SelectedAssets'   			controw1.Tag = indexrow2;  			controw2.Tag = indexrow1;  		}  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,SwapControls,The following statement contains a magic number: if (col != 2)// col = 2 it's Visual Index column   {  	Control controw1 = tableLayoutPanelIAssets.GetControlFromPosition (col' indexrow1);  	Control controw2 = tableLayoutPanelIAssets.GetControlFromPosition (col' indexrow2);  	tableLayoutPanelIAssets.SetRow (controw1' indexrow2);  	tableLayoutPanelIAssets.SetRow (controw2' indexrow1);  	if (bMultiAssetMode)// if we have multiple assets as source' then let's exchange the assets and update the tag  	 {  		SwapSelectedAssets (indexrow1' indexrow2);  		// SelectedAssets'   		controw1.Tag = indexrow2;  		controw2.Tag = indexrow1;  	}  }  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectH.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectH.Value = new decimal (new int[] {  	144'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectW.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectW.Value = new decimal (new int[] {  	255'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectY.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectY.Value = new decimal (new int[] {  	144'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectX.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayRectX.Value = new decimal (new int[] {  	257'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayOpacity.Increment = new decimal (new int[] {  	1'  	0'  	0'  	65536  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayOpacity.Value = new decimal (new int[] {  	9'  	0'  	0'  	65536  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownVOverlayOpacity.Value = new decimal (new int[] {  	9'  	0'  	0'  	65536  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAOverlayGain.Increment = new decimal (new int[] {  	1'  	0'  	0'  	65536  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAOverlayGain.Maximum = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAOverlayGain.Value = new decimal (new int[] {  	22'  	0'  	0'  	65536  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownAOverlayGain.Value = new decimal (new int[] {  	22'  	0'  	0'  	65536  });  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,EncodingAMEAdv,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEAdv.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,InitializeComponent,The following statement contains a magic number: this.label31.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,InitializeComponent,The following statement contains a magic number: this.label31.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,EncodingPremium,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingPremium.cs,InitializeComponent,The following statement contains a magic number: this.label31.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The following statement contains a magic number: DGJob.ColumnCount = 2;  
Magic Number,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The following statement contains a magic number: DGTasks.ColumnCount = 2;  
Magic Number,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The following statement contains a magic number: DGErrors.ColumnCount = 3;  
Magic Number,AMSExplorer,JobInformation,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\JobInformation.cs,JobInformation_Load,The following statement contains a magic number: DGErrors.Columns [2].HeaderText = AMSExplorer.Properties.Resources.JobInformation_JobInformation_Load_Code;  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: progressWidth = (imgWidth * (progressVal) / 100);  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (null != formattedValue) {  	SizeF availArea = new SizeF (imgWidth' imgHeight);  	SizeF fontSize = g.MeasureString (formattedValue.ToString ()' cellStyle.Font' availArea);  	#region [Font Placement Calc]  	if (null == cellStyle) {  		fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  		fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  	} else {  		// Set the Y vertical position  		switch (cellStyle.Alignment) {  		case DataGridViewContentAlignment.BottomCenter:  		case DataGridViewContentAlignment.BottomLeft:  		case DataGridViewContentAlignment.BottomRight: {  			fontPlacement.Y = cellBounds.Y + topMargin + imgHeight - fontSize.Height;  			break;  		}  		case DataGridViewContentAlignment.TopCenter:  		case DataGridViewContentAlignment.TopLeft:  		case DataGridViewContentAlignment.TopRight: {  			fontPlacement.Y = cellBounds.Y + topMargin - fontSize.Height;  			break;  		}  		case DataGridViewContentAlignment.MiddleCenter:  		case DataGridViewContentAlignment.MiddleLeft:  		case DataGridViewContentAlignment.MiddleRight:  		case DataGridViewContentAlignment.NotSet:  		default: {  			fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  			break;  		}  		}  		// Set the X horizontal position  		switch (cellStyle.Alignment) {  		case DataGridViewContentAlignment.BottomLeft:  		case DataGridViewContentAlignment.MiddleLeft:  		case DataGridViewContentAlignment.TopLeft: {  			fontPlacement.X = cellBounds.X + leftMargin;  			break;  		}  		case DataGridViewContentAlignment.BottomRight:  		case DataGridViewContentAlignment.MiddleRight:  		case DataGridViewContentAlignment.TopRight: {  			fontPlacement.X = cellBounds.X + leftMargin + imgWidth - fontSize.Width;  			break;  		}  		case DataGridViewContentAlignment.BottomCenter:  		case DataGridViewContentAlignment.MiddleCenter:  		case DataGridViewContentAlignment.TopCenter:  		case DataGridViewContentAlignment.NotSet:  		default: {  			fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  			break;  		}  		}  	}  	#endregion [Font Placement Calc]  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (null != formattedValue) {  	SizeF availArea = new SizeF (imgWidth' imgHeight);  	SizeF fontSize = g.MeasureString (formattedValue.ToString ()' cellStyle.Font' availArea);  	#region [Font Placement Calc]  	if (null == cellStyle) {  		fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  		fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  	} else {  		// Set the Y vertical position  		switch (cellStyle.Alignment) {  		case DataGridViewContentAlignment.BottomCenter:  		case DataGridViewContentAlignment.BottomLeft:  		case DataGridViewContentAlignment.BottomRight: {  			fontPlacement.Y = cellBounds.Y + topMargin + imgHeight - fontSize.Height;  			break;  		}  		case DataGridViewContentAlignment.TopCenter:  		case DataGridViewContentAlignment.TopLeft:  		case DataGridViewContentAlignment.TopRight: {  			fontPlacement.Y = cellBounds.Y + topMargin - fontSize.Height;  			break;  		}  		case DataGridViewContentAlignment.MiddleCenter:  		case DataGridViewContentAlignment.MiddleLeft:  		case DataGridViewContentAlignment.MiddleRight:  		case DataGridViewContentAlignment.NotSet:  		default: {  			fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  			break;  		}  		}  		// Set the X horizontal position  		switch (cellStyle.Alignment) {  		case DataGridViewContentAlignment.BottomLeft:  		case DataGridViewContentAlignment.MiddleLeft:  		case DataGridViewContentAlignment.TopLeft: {  			fontPlacement.X = cellBounds.X + leftMargin;  			break;  		}  		case DataGridViewContentAlignment.BottomRight:  		case DataGridViewContentAlignment.MiddleRight:  		case DataGridViewContentAlignment.TopRight: {  			fontPlacement.X = cellBounds.X + leftMargin + imgWidth - fontSize.Width;  			break;  		}  		case DataGridViewContentAlignment.BottomCenter:  		case DataGridViewContentAlignment.MiddleCenter:  		case DataGridViewContentAlignment.TopCenter:  		case DataGridViewContentAlignment.NotSet:  		default: {  			fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  			break;  		}  		}  	}  	#endregion [Font Placement Calc]  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (null != formattedValue) {  	SizeF availArea = new SizeF (imgWidth' imgHeight);  	SizeF fontSize = g.MeasureString (formattedValue.ToString ()' cellStyle.Font' availArea);  	#region [Font Placement Calc]  	if (null == cellStyle) {  		fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  		fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  	} else {  		// Set the Y vertical position  		switch (cellStyle.Alignment) {  		case DataGridViewContentAlignment.BottomCenter:  		case DataGridViewContentAlignment.BottomLeft:  		case DataGridViewContentAlignment.BottomRight: {  			fontPlacement.Y = cellBounds.Y + topMargin + imgHeight - fontSize.Height;  			break;  		}  		case DataGridViewContentAlignment.TopCenter:  		case DataGridViewContentAlignment.TopLeft:  		case DataGridViewContentAlignment.TopRight: {  			fontPlacement.Y = cellBounds.Y + topMargin - fontSize.Height;  			break;  		}  		case DataGridViewContentAlignment.MiddleCenter:  		case DataGridViewContentAlignment.MiddleLeft:  		case DataGridViewContentAlignment.MiddleRight:  		case DataGridViewContentAlignment.NotSet:  		default: {  			fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  			break;  		}  		}  		// Set the X horizontal position  		switch (cellStyle.Alignment) {  		case DataGridViewContentAlignment.BottomLeft:  		case DataGridViewContentAlignment.MiddleLeft:  		case DataGridViewContentAlignment.TopLeft: {  			fontPlacement.X = cellBounds.X + leftMargin;  			break;  		}  		case DataGridViewContentAlignment.BottomRight:  		case DataGridViewContentAlignment.MiddleRight:  		case DataGridViewContentAlignment.TopRight: {  			fontPlacement.X = cellBounds.X + leftMargin + imgWidth - fontSize.Width;  			break;  		}  		case DataGridViewContentAlignment.BottomCenter:  		case DataGridViewContentAlignment.MiddleCenter:  		case DataGridViewContentAlignment.TopCenter:  		case DataGridViewContentAlignment.NotSet:  		default: {  			fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  			break;  		}  		}  	}  	#endregion [Font Placement Calc]  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (null != formattedValue) {  	SizeF availArea = new SizeF (imgWidth' imgHeight);  	SizeF fontSize = g.MeasureString (formattedValue.ToString ()' cellStyle.Font' availArea);  	#region [Font Placement Calc]  	if (null == cellStyle) {  		fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  		fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  	} else {  		// Set the Y vertical position  		switch (cellStyle.Alignment) {  		case DataGridViewContentAlignment.BottomCenter:  		case DataGridViewContentAlignment.BottomLeft:  		case DataGridViewContentAlignment.BottomRight: {  			fontPlacement.Y = cellBounds.Y + topMargin + imgHeight - fontSize.Height;  			break;  		}  		case DataGridViewContentAlignment.TopCenter:  		case DataGridViewContentAlignment.TopLeft:  		case DataGridViewContentAlignment.TopRight: {  			fontPlacement.Y = cellBounds.Y + topMargin - fontSize.Height;  			break;  		}  		case DataGridViewContentAlignment.MiddleCenter:  		case DataGridViewContentAlignment.MiddleLeft:  		case DataGridViewContentAlignment.MiddleRight:  		case DataGridViewContentAlignment.NotSet:  		default: {  			fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  			break;  		}  		}  		// Set the X horizontal position  		switch (cellStyle.Alignment) {  		case DataGridViewContentAlignment.BottomLeft:  		case DataGridViewContentAlignment.MiddleLeft:  		case DataGridViewContentAlignment.TopLeft: {  			fontPlacement.X = cellBounds.X + leftMargin;  			break;  		}  		case DataGridViewContentAlignment.BottomRight:  		case DataGridViewContentAlignment.MiddleRight:  		case DataGridViewContentAlignment.TopRight: {  			fontPlacement.X = cellBounds.X + leftMargin + imgWidth - fontSize.Width;  			break;  		}  		case DataGridViewContentAlignment.BottomCenter:  		case DataGridViewContentAlignment.MiddleCenter:  		case DataGridViewContentAlignment.TopCenter:  		case DataGridViewContentAlignment.NotSet:  		default: {  			fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  			break;  		}  		}  	}  	#endregion [Font Placement Calc]  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (null == cellStyle) {  	fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  	fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  } else {  	// Set the Y vertical position  	switch (cellStyle.Alignment) {  	case DataGridViewContentAlignment.BottomCenter:  	case DataGridViewContentAlignment.BottomLeft:  	case DataGridViewContentAlignment.BottomRight: {  		fontPlacement.Y = cellBounds.Y + topMargin + imgHeight - fontSize.Height;  		break;  	}  	case DataGridViewContentAlignment.TopCenter:  	case DataGridViewContentAlignment.TopLeft:  	case DataGridViewContentAlignment.TopRight: {  		fontPlacement.Y = cellBounds.Y + topMargin - fontSize.Height;  		break;  	}  	case DataGridViewContentAlignment.MiddleCenter:  	case DataGridViewContentAlignment.MiddleLeft:  	case DataGridViewContentAlignment.MiddleRight:  	case DataGridViewContentAlignment.NotSet:  	default: {  		fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  		break;  	}  	}  	// Set the X horizontal position  	switch (cellStyle.Alignment) {  	case DataGridViewContentAlignment.BottomLeft:  	case DataGridViewContentAlignment.MiddleLeft:  	case DataGridViewContentAlignment.TopLeft: {  		fontPlacement.X = cellBounds.X + leftMargin;  		break;  	}  	case DataGridViewContentAlignment.BottomRight:  	case DataGridViewContentAlignment.MiddleRight:  	case DataGridViewContentAlignment.TopRight: {  		fontPlacement.X = cellBounds.X + leftMargin + imgWidth - fontSize.Width;  		break;  	}  	case DataGridViewContentAlignment.BottomCenter:  	case DataGridViewContentAlignment.MiddleCenter:  	case DataGridViewContentAlignment.TopCenter:  	case DataGridViewContentAlignment.NotSet:  	default: {  		fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  		break;  	}  	}  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (null == cellStyle) {  	fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  	fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  } else {  	// Set the Y vertical position  	switch (cellStyle.Alignment) {  	case DataGridViewContentAlignment.BottomCenter:  	case DataGridViewContentAlignment.BottomLeft:  	case DataGridViewContentAlignment.BottomRight: {  		fontPlacement.Y = cellBounds.Y + topMargin + imgHeight - fontSize.Height;  		break;  	}  	case DataGridViewContentAlignment.TopCenter:  	case DataGridViewContentAlignment.TopLeft:  	case DataGridViewContentAlignment.TopRight: {  		fontPlacement.Y = cellBounds.Y + topMargin - fontSize.Height;  		break;  	}  	case DataGridViewContentAlignment.MiddleCenter:  	case DataGridViewContentAlignment.MiddleLeft:  	case DataGridViewContentAlignment.MiddleRight:  	case DataGridViewContentAlignment.NotSet:  	default: {  		fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  		break;  	}  	}  	// Set the X horizontal position  	switch (cellStyle.Alignment) {  	case DataGridViewContentAlignment.BottomLeft:  	case DataGridViewContentAlignment.MiddleLeft:  	case DataGridViewContentAlignment.TopLeft: {  		fontPlacement.X = cellBounds.X + leftMargin;  		break;  	}  	case DataGridViewContentAlignment.BottomRight:  	case DataGridViewContentAlignment.MiddleRight:  	case DataGridViewContentAlignment.TopRight: {  		fontPlacement.X = cellBounds.X + leftMargin + imgWidth - fontSize.Width;  		break;  	}  	case DataGridViewContentAlignment.BottomCenter:  	case DataGridViewContentAlignment.MiddleCenter:  	case DataGridViewContentAlignment.TopCenter:  	case DataGridViewContentAlignment.NotSet:  	default: {  		fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  		break;  	}  	}  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (null == cellStyle) {  	fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  	fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  } else {  	// Set the Y vertical position  	switch (cellStyle.Alignment) {  	case DataGridViewContentAlignment.BottomCenter:  	case DataGridViewContentAlignment.BottomLeft:  	case DataGridViewContentAlignment.BottomRight: {  		fontPlacement.Y = cellBounds.Y + topMargin + imgHeight - fontSize.Height;  		break;  	}  	case DataGridViewContentAlignment.TopCenter:  	case DataGridViewContentAlignment.TopLeft:  	case DataGridViewContentAlignment.TopRight: {  		fontPlacement.Y = cellBounds.Y + topMargin - fontSize.Height;  		break;  	}  	case DataGridViewContentAlignment.MiddleCenter:  	case DataGridViewContentAlignment.MiddleLeft:  	case DataGridViewContentAlignment.MiddleRight:  	case DataGridViewContentAlignment.NotSet:  	default: {  		fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  		break;  	}  	}  	// Set the X horizontal position  	switch (cellStyle.Alignment) {  	case DataGridViewContentAlignment.BottomLeft:  	case DataGridViewContentAlignment.MiddleLeft:  	case DataGridViewContentAlignment.TopLeft: {  		fontPlacement.X = cellBounds.X + leftMargin;  		break;  	}  	case DataGridViewContentAlignment.BottomRight:  	case DataGridViewContentAlignment.MiddleRight:  	case DataGridViewContentAlignment.TopRight: {  		fontPlacement.X = cellBounds.X + leftMargin + imgWidth - fontSize.Width;  		break;  	}  	case DataGridViewContentAlignment.BottomCenter:  	case DataGridViewContentAlignment.MiddleCenter:  	case DataGridViewContentAlignment.TopCenter:  	case DataGridViewContentAlignment.NotSet:  	default: {  		fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  		break;  	}  	}  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (null == cellStyle) {  	fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  	fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  } else {  	// Set the Y vertical position  	switch (cellStyle.Alignment) {  	case DataGridViewContentAlignment.BottomCenter:  	case DataGridViewContentAlignment.BottomLeft:  	case DataGridViewContentAlignment.BottomRight: {  		fontPlacement.Y = cellBounds.Y + topMargin + imgHeight - fontSize.Height;  		break;  	}  	case DataGridViewContentAlignment.TopCenter:  	case DataGridViewContentAlignment.TopLeft:  	case DataGridViewContentAlignment.TopRight: {  		fontPlacement.Y = cellBounds.Y + topMargin - fontSize.Height;  		break;  	}  	case DataGridViewContentAlignment.MiddleCenter:  	case DataGridViewContentAlignment.MiddleLeft:  	case DataGridViewContentAlignment.MiddleRight:  	case DataGridViewContentAlignment.NotSet:  	default: {  		fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  		break;  	}  	}  	// Set the X horizontal position  	switch (cellStyle.Alignment) {  	case DataGridViewContentAlignment.BottomLeft:  	case DataGridViewContentAlignment.MiddleLeft:  	case DataGridViewContentAlignment.TopLeft: {  		fontPlacement.X = cellBounds.X + leftMargin;  		break;  	}  	case DataGridViewContentAlignment.BottomRight:  	case DataGridViewContentAlignment.MiddleRight:  	case DataGridViewContentAlignment.TopRight: {  		fontPlacement.X = cellBounds.X + leftMargin + imgWidth - fontSize.Width;  		break;  	}  	case DataGridViewContentAlignment.BottomCenter:  	case DataGridViewContentAlignment.MiddleCenter:  	case DataGridViewContentAlignment.TopCenter:  	case DataGridViewContentAlignment.NotSet:  	default: {  		fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  		break;  	}  	}  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: switch (cellStyle.Alignment) {  case DataGridViewContentAlignment.BottomCenter:  case DataGridViewContentAlignment.BottomLeft:  case DataGridViewContentAlignment.BottomRight: {  	fontPlacement.Y = cellBounds.Y + topMargin + imgHeight - fontSize.Height;  	break;  }  case DataGridViewContentAlignment.TopCenter:  case DataGridViewContentAlignment.TopLeft:  case DataGridViewContentAlignment.TopRight: {  	fontPlacement.Y = cellBounds.Y + topMargin - fontSize.Height;  	break;  }  case DataGridViewContentAlignment.MiddleCenter:  case DataGridViewContentAlignment.MiddleLeft:  case DataGridViewContentAlignment.MiddleRight:  case DataGridViewContentAlignment.NotSet:  default: {  	fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  	break;  }  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: fontPlacement.Y = cellBounds.Y + topMargin + (((float)imgHeight - fontSize.Height) / 2);  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: switch (cellStyle.Alignment) {  case DataGridViewContentAlignment.BottomLeft:  case DataGridViewContentAlignment.MiddleLeft:  case DataGridViewContentAlignment.TopLeft: {  	fontPlacement.X = cellBounds.X + leftMargin;  	break;  }  case DataGridViewContentAlignment.BottomRight:  case DataGridViewContentAlignment.MiddleRight:  case DataGridViewContentAlignment.TopRight: {  	fontPlacement.X = cellBounds.X + leftMargin + imgWidth - fontSize.Width;  	break;  }  case DataGridViewContentAlignment.BottomCenter:  case DataGridViewContentAlignment.MiddleCenter:  case DataGridViewContentAlignment.TopCenter:  case DataGridViewContentAlignment.NotSet:  default: {  	fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  	break;  }  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: fontPlacement.X = cellBounds.X + leftMargin + (((float)imgWidth - fontSize.Width) / 2);  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (progressVal <= 100)// because when job is done or in error' we set progress > 100 % to avoid displaying the progress bar   {  	// Draw the background  	System.Drawing.Rectangle backRectangle = new System.Drawing.Rectangle (cellBounds.X + leftMargin' cellBounds.Y + topMargin' imgWidth' imgHeight);  	using (SolidBrush backgroundBrush = new SolidBrush (Color.FromKnownColor (KnownColor.LightGray))) {  		g.FillRectangle (backgroundBrush' backRectangle);  	}  	// Draw the progress bar  	if (progressWidth > 0) {  		System.Drawing.Rectangle progressRectangle = new System.Drawing.Rectangle (cellBounds.X + leftMargin' cellBounds.Y + topMargin' progressWidth' imgHeight);  		using (LinearGradientBrush progressGradientBrush = new LinearGradientBrush (progressRectangle' Color.LightGreen' Color.MediumSeaGreen' LinearGradientMode.Vertical)) {  			progressGradientBrush.SetBlendTriangularShape ((float).5);  			g.FillRectangle (progressGradientBrush' progressRectangle);  		}  	}  	// Draw the text  	if (null != formattedValue && null != cellStyle) {  		using (SolidBrush fontBrush = new SolidBrush (cellStyle.ForeColor)) {  			g.DrawString (formattedValue.ToString ()' cellStyle.Font' fontBrush' fontPlacement);  		}  	}  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (progressVal <= 100)// because when job is done or in error' we set progress > 100 % to avoid displaying the progress bar   {  	// Draw the background  	System.Drawing.Rectangle backRectangle = new System.Drawing.Rectangle (cellBounds.X + leftMargin' cellBounds.Y + topMargin' imgWidth' imgHeight);  	using (SolidBrush backgroundBrush = new SolidBrush (Color.FromKnownColor (KnownColor.LightGray))) {  		g.FillRectangle (backgroundBrush' backRectangle);  	}  	// Draw the progress bar  	if (progressWidth > 0) {  		System.Drawing.Rectangle progressRectangle = new System.Drawing.Rectangle (cellBounds.X + leftMargin' cellBounds.Y + topMargin' progressWidth' imgHeight);  		using (LinearGradientBrush progressGradientBrush = new LinearGradientBrush (progressRectangle' Color.LightGreen' Color.MediumSeaGreen' LinearGradientMode.Vertical)) {  			progressGradientBrush.SetBlendTriangularShape ((float).5);  			g.FillRectangle (progressGradientBrush' progressRectangle);  		}  	}  	// Draw the text  	if (null != formattedValue && null != cellStyle) {  		using (SolidBrush fontBrush = new SolidBrush (cellStyle.ForeColor)) {  			g.DrawString (formattedValue.ToString ()' cellStyle.Font' fontBrush' fontPlacement);  		}  	}  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: if (progressWidth > 0) {  	System.Drawing.Rectangle progressRectangle = new System.Drawing.Rectangle (cellBounds.X + leftMargin' cellBounds.Y + topMargin' progressWidth' imgHeight);  	using (LinearGradientBrush progressGradientBrush = new LinearGradientBrush (progressRectangle' Color.LightGreen' Color.MediumSeaGreen' LinearGradientMode.Vertical)) {  		progressGradientBrush.SetBlendTriangularShape ((float).5);  		g.FillRectangle (progressGradientBrush' progressRectangle);  	}  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: using (LinearGradientBrush progressGradientBrush = new LinearGradientBrush (progressRectangle' Color.LightGreen' Color.MediumSeaGreen' LinearGradientMode.Vertical)) {  	progressGradientBrush.SetBlendTriangularShape ((float).5);  	g.FillRectangle (progressGradientBrush' progressRectangle);  }  
Magic Number,AMSExplorer,DataGridViewProgressBarCell,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Paint,The following statement contains a magic number: progressGradientBrush.SetBlendTriangularShape ((float).5);  
Magic Number,AMSExplorer,FilterTime,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnNumberOfDays,The following statement contains a magic number: if (timeFilter != null) {  	switch (timeFilter) {  	case FilterTime.LastDay:  		days = 1;  		break;  	case FilterTime.LastWeek:  		days = 7;  		break;  	case FilterTime.LastMonth:  		days = 30;  		break;  	case FilterTime.LastYear:  		days = 365;  		break;  	case FilterTime.TimeRange:  		days = -1;  		break;  	default:  		break;  	}  }  
Magic Number,AMSExplorer,FilterTime,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnNumberOfDays,The following statement contains a magic number: if (timeFilter != null) {  	switch (timeFilter) {  	case FilterTime.LastDay:  		days = 1;  		break;  	case FilterTime.LastWeek:  		days = 7;  		break;  	case FilterTime.LastMonth:  		days = 30;  		break;  	case FilterTime.LastYear:  		days = 365;  		break;  	case FilterTime.TimeRange:  		days = -1;  		break;  	default:  		break;  	}  }  
Magic Number,AMSExplorer,FilterTime,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnNumberOfDays,The following statement contains a magic number: if (timeFilter != null) {  	switch (timeFilter) {  	case FilterTime.LastDay:  		days = 1;  		break;  	case FilterTime.LastWeek:  		days = 7;  		break;  	case FilterTime.LastMonth:  		days = 30;  		break;  	case FilterTime.LastYear:  		days = 365;  		break;  	case FilterTime.TimeRange:  		days = -1;  		break;  	default:  		break;  	}  }  
Magic Number,AMSExplorer,FilterTime,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnNumberOfDays,The following statement contains a magic number: switch (timeFilter) {  case FilterTime.LastDay:  	days = 1;  	break;  case FilterTime.LastWeek:  	days = 7;  	break;  case FilterTime.LastMonth:  	days = 30;  	break;  case FilterTime.LastYear:  	days = 365;  	break;  case FilterTime.TimeRange:  	days = -1;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,FilterTime,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnNumberOfDays,The following statement contains a magic number: switch (timeFilter) {  case FilterTime.LastDay:  	days = 1;  	break;  case FilterTime.LastWeek:  	days = 7;  	break;  case FilterTime.LastMonth:  	days = 30;  	break;  case FilterTime.LastYear:  	days = 365;  	break;  case FilterTime.TimeRange:  	days = -1;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,FilterTime,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnNumberOfDays,The following statement contains a magic number: switch (timeFilter) {  case FilterTime.LastDay:  	days = 1;  	break;  case FilterTime.LastWeek:  	days = 7;  	break;  case FilterTime.LastMonth:  	days = 30;  	break;  case FilterTime.LastYear:  	days = 365;  	break;  case FilterTime.TimeRange:  	days = -1;  	break;  default:  	break;  }  
Magic Number,AMSExplorer,FilterTime,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnNumberOfDays,The following statement contains a magic number: days = 7;  
Magic Number,AMSExplorer,FilterTime,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnNumberOfDays,The following statement contains a magic number: days = 30;  
Magic Number,AMSExplorer,FilterTime,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,ReturnNumberOfDays,The following statement contains a magic number: days = 365;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns [_dynEnc].DisplayIndex = lastColumn_sIndex - 2;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns [_statEnc].DisplayIndex = lastColumn_sIndex - 3;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["Type"].Width = 140;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["Size"].Width = 80;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns [_statEnc].Width = 80;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns [_dynEnc].Width = 80;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns [_publication].Width = 90;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns [_filter].Width = 50;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns [_locatorexpirationdate].Width = 130;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["LastModified"].Width = 140;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["Id"].Width = 300;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["AlternateId"].Width = 300;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["Storage"].Width = 140;  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (_searchinname != null && !string.IsNullOrEmpty (_searchinname.Text)) {  	bool Error = false;  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	string strsearch = _searchinname.Text.ToLower ();  	switch (_searchinname.SearchType) {  	// Search on Asset name  	case SearchIn.AssetName:  		assetsServerQuery = context.Assets.Where (a => (a.Name.Contains (_searchinname.Text)) && (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd));  		/*                         if (assetsServerQuery.Count() > 1000) // we need to paginate                         {                          IList<IAsset> newAssetList = new List<IAsset>();                          while (true)                         {                             // Enumerate through all assets (1000 at a time)                                 var assetsq = assetsServerQuery                                 .Skip(skipSize).Take(batchSize).ToList();                              currentSkipSize += assetsq.Count;                              foreach (var a in assetsq)                             {                                 newAssetList.Add(a);                             }                              if (currentSkipSize == batchSize)                             {                                 skipSize += batchSize;                                 currentSkipSize = 0;                             }                             else                             {                                 break;                             }                         }                          SwitchedToLocalQuery = true;                         assets = newAssetList;                         }                         */break;  	// Search on Asset aternate id  	case SearchIn.AssetAltId:  		assetsServerQuery = context.Assets.Where (a => (a.AlternateId.Contains (_searchinname.Text)) && (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd));  		break;  	// Search on Asset ID  	case SearchIn.AssetId:  		string assetguid = _searchinname.Text;  		if (assetguid.StartsWith (Constants.AssetIdPrefix)) {  			assetguid = assetguid.Substring (Constants.AssetIdPrefix.Length);  		}  		try {  			var g = new Guid (assetguid);  		} catch {  			Error = true;  			MessageBox.Show ("Error with asset Id. Is it a valid GUID or asset Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		if (!Error) {  			assetsServerQuery = context.Assets.Where (a => (a.Id == Constants.AssetIdPrefix + assetguid) && (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd));  		}  		break;  	// Search on Asset file name  	case SearchIn.AssetFileName:  		IList<string> assetFileListID = new List<string> ();  		while (true) {  			// Enumerate through all asset files (1000 at a time)  			var filesq = context.Files.Skip (skipSize).Take (batchSize).ToList ();  			currentSkipSize += filesq.Count;  			var filesq2 = filesq.Where (f => f.Name.ToLower ().Contains (strsearch)).Select (f => f.ParentAssetId);  			foreach (var a in filesq2) {  				assetFileListID.Add (a);  			}  			if (currentSkipSize == batchSize) {  				skipSize += batchSize;  				currentSkipSize = 0;  			} else {  				break;  			}  		}  		var assetlist = new List<IAsset> ();  		foreach (var a in assetFileListID.Distinct ()) {  			assetlist.Add (AssetInfo.GetAsset (a' context));  		}  		SwitchedToLocalQuery = true;  		assets = assetlist.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd));  		break;  	// Search on Asset file ID  	case SearchIn.AssetFileId:  		string fileguid = _searchinname.Text;  		if (fileguid.StartsWith (Constants.AssetFileIdPrefix)) {  			fileguid = fileguid.Substring (Constants.AssetFileIdPrefix.Length);  		}  		try {  			var g = new Guid (fileguid);  		} catch {  			Error = true;  			MessageBox.Show ("Error with file asset Id. Is it a valid GUID or asset Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		if (!Error) {  			var myfile = context.Files.Where (f => f.Id == Constants.AssetFileIdPrefix + fileguid).FirstOrDefault ();  			if (myfile != null) {  				assetsServerQuery = context.Assets.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd) && myfile.Asset.Id == a.Id);  			} else {  				MessageBox.Show ("No file was found with this Id."' "Not found"' MessageBoxButtons.OK' MessageBoxIcon.Information);  			}  		}  		break;  	// Search on Locator id / guid  	case SearchIn.LocatorId:  		string locatorguid = _searchinname.Text;  		if (locatorguid.StartsWith (Constants.LocatorIdPrefix)) {  			locatorguid = locatorguid.Substring (Constants.LocatorIdPrefix.Length);  		}  		try {  			var g = new Guid (locatorguid);  		} catch {  			Error = true;  			MessageBox.Show ("Error with locator Id. Is it a valid GUID or locator Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		if (!Error) {  			var myloc = context.Locators.Where (l => l.Id == Constants.LocatorIdPrefix + locatorguid).FirstOrDefault ();  			if (myloc != null) {  				assetsServerQuery = context.Assets.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd) && a.Id == myloc.AssetId);  			} else {  				MessageBox.Show ("No locator was found using this locator Id."' "Not found"' MessageBoxButtons.OK' MessageBoxIcon.Information);  			}  		}  		break;  	// Search on Program id / guid  	case SearchIn.ProgramId:  		string programguid = _searchinname.Text;  		if (programguid.StartsWith (Constants.ProgramIdPrefix)) {  			programguid = programguid.Substring (Constants.ProgramIdPrefix.Length);  		}  		try {  			var g = new Guid (programguid);  		} catch {  			Error = true;  			MessageBox.Show ("Error with program Id. Is it a valid GUID or program Id ?"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  		if (!Error) {  			var queryprog = context.Programs.Where (p => p.Id == Constants.ProgramIdPrefix + programguid).FirstOrDefault ();  			if (queryprog != null) {  				assetsServerQuery = context.Assets.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd) && queryprog.AssetId == a.Id);  			} else {  				MessageBox.Show ("No program was found with this Id."' "Not found"' MessageBoxButtons.OK' MessageBoxIcon.Information);  			}  		}  		break;  	// Search on Program name  	case SearchIn.ProgramName:  		IList<string> assetFileListIDP = new List<string> ();  		while (true) {  			// Enumerate through all programs (1000 at a time)  			var programsq = context.Programs.Skip (skipSize).Take (batchSize).ToList ();  			currentSkipSize += programsq.Count;  			var programsq2 = programsq.Where (p => p.Name.ToLower ().Contains (strsearch)).Select (p => p.AssetId);  			foreach (var a in programsq2) {  				assetFileListIDP.Add (a);  			}  			if (currentSkipSize == batchSize) {  				skipSize += batchSize;  				currentSkipSize = 0;  			} else {  				break;  			}  		}  		var assetlist2 = new List<IAsset> ();  		foreach (var a in assetFileListIDP) {  			assetlist2.Add (AssetInfo.GetAsset (a' context));  		}  		SwitchedToLocalQuery = true;  		assets = assetlist2.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd));  		break;  	default:  		break;  	}  } else// NO SEARCH   {  	assetsServerQuery = context.Assets.Where (a => (!filterStartDate || a.LastModified > dateTimeStart) && (!filterEndDate || a.LastModified < dateTimeRangeEnd));  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (!SwitchedToLocalQuery && (_statefilter == StatusAssets.All || _statefilter == "") && _orderassets == OrderAssets.LastModifiedDescending) {  	if (_timefilter == FilterTime.First50Items) {  		assets = assetsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		assets = assetsServerQuery.Take (1000);  	} else {  		assets = assetsServerQuery;  	}  } else// general case   {  	///////////////////////  	// STATE FILTER  	///////////////////////  	// we need to do paging  	// not excuted for large account as state filter control is disabled  	IList<IAsset> aggregateListAssets = new List<IAsset> ();  	int skipSize2 = 0;  	int batchSize2 = 1000;  	int currentSkipSize2 = 0;  	while (true) {  		// Enumerate through all assets (1000 at a time)  		IEnumerable<IAsset> listPagedAssets;  		IList<IAsset> fassets = new List<IAsset> ();  		if (SwitchedToLocalQuery) {  			listPagedAssets = assets.Skip (skipSize2).Take (batchSize2).ToList ();  		} else {  			listPagedAssets = assetsServerQuery.Skip (skipSize2).Take (batchSize2).ToList ();  		}  		currentSkipSize2 += listPagedAssets.Count ();  		switch (_statefilter) {  		case StatusAssets.Published:  		case StatusAssets.PublishedExpired:  			bool bexpired = _statefilter == StatusAssets.PublishedExpired;  			IList<IAsset> newListAssets1 = new List<IAsset> ();  			int skipSizeLoc = 0;  			int batchSizeLoc = 1000;  			int currentSkipSizeLoc = 0;  			while (true) {  				// Enumerate through all locators (1000 at a time)  				var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  				currentSkipSizeLoc += listlocators.Count;  				var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  				foreach (var a in assetexpired) {  					newListAssets1.Add (a);  				}  				if (currentSkipSizeLoc == batchSizeLoc) {  					skipSizeLoc += batchSizeLoc;  					currentSkipSizeLoc = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets1) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.DynEnc:  			var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  			foreach (var a in assetwithDelPol) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.Empty:  			IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  			int skipSizeEmpty = 0;  			int batchSizeEmpty = 1000;  			int currentSkipSizeEmpty = 0;  			while (true) {  				// Enumerate through all files (1000 at a time)  				var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  				currentSkipSizeEmpty += listfiles.Count;  				var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  				;  				foreach (var a in assetsnotempty) {  					newListAssets2.Remove (a);  					// if file with size >0' then we remove it parenrt id from the lis  				}  				if (currentSkipSizeEmpty == batchSizeEmpty) {  					skipSizeEmpty += batchSizeEmpty;  					currentSkipSizeEmpty = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets2) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.All:  		// we need this to parse all assets  		default:  			foreach (var a in listPagedAssets) {  				fassets.Add (a);  			}  			break;  		/*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  		foreach (var a in fassets) {  			aggregateListAssets.Add (a);  		}  		if (currentSkipSize2 == batchSize2) {  			skipSize2 += batchSize2;  			currentSkipSize2 = 0;  		} else {  			break;  		}  	}  	SwitchedToLocalQuery = true;  	assets = aggregateListAssets;  	///////////////////////  	// SORTING  	///////////////////////  	// let's sort the aggregate results  	var size = new Func<IAsset' long> (AssetInfo.GetSize);  	// client side only ! (a take is done otherwise)  	switch (_orderassets) {  	case OrderAssets.LastModifiedDescending:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	case OrderAssets.LastModifiedAscending:  		assets = from a in assets  		orderby a.LastModified ascending  		select a;  		break;  	case OrderAssets.NameAscending:  		assets = from a in assets  		orderby a.Name ascending  		select a;  		break;  	case OrderAssets.NameDescending:  		assets = from a in assets  		orderby a.Name descending  		select a;  		break;  	case OrderAssets.SizeDescending:  		assets = from a in assets  		orderby size (a) descending  		select a;  		break;  	case OrderAssets.SizeAscending:  		assets = from a in assets  		orderby size (a) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationAscending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationDescending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) descending  		select a;  		break;  	default:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		assets = assets.Take (50);  	} else// if (_timefilter == FilterTime.First1000Items)  	 {  		assets = assets.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (!SwitchedToLocalQuery && (_statefilter == StatusAssets.All || _statefilter == "") && _orderassets == OrderAssets.LastModifiedDescending) {  	if (_timefilter == FilterTime.First50Items) {  		assets = assetsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		assets = assetsServerQuery.Take (1000);  	} else {  		assets = assetsServerQuery;  	}  } else// general case   {  	///////////////////////  	// STATE FILTER  	///////////////////////  	// we need to do paging  	// not excuted for large account as state filter control is disabled  	IList<IAsset> aggregateListAssets = new List<IAsset> ();  	int skipSize2 = 0;  	int batchSize2 = 1000;  	int currentSkipSize2 = 0;  	while (true) {  		// Enumerate through all assets (1000 at a time)  		IEnumerable<IAsset> listPagedAssets;  		IList<IAsset> fassets = new List<IAsset> ();  		if (SwitchedToLocalQuery) {  			listPagedAssets = assets.Skip (skipSize2).Take (batchSize2).ToList ();  		} else {  			listPagedAssets = assetsServerQuery.Skip (skipSize2).Take (batchSize2).ToList ();  		}  		currentSkipSize2 += listPagedAssets.Count ();  		switch (_statefilter) {  		case StatusAssets.Published:  		case StatusAssets.PublishedExpired:  			bool bexpired = _statefilter == StatusAssets.PublishedExpired;  			IList<IAsset> newListAssets1 = new List<IAsset> ();  			int skipSizeLoc = 0;  			int batchSizeLoc = 1000;  			int currentSkipSizeLoc = 0;  			while (true) {  				// Enumerate through all locators (1000 at a time)  				var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  				currentSkipSizeLoc += listlocators.Count;  				var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  				foreach (var a in assetexpired) {  					newListAssets1.Add (a);  				}  				if (currentSkipSizeLoc == batchSizeLoc) {  					skipSizeLoc += batchSizeLoc;  					currentSkipSizeLoc = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets1) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.DynEnc:  			var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  			foreach (var a in assetwithDelPol) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.Empty:  			IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  			int skipSizeEmpty = 0;  			int batchSizeEmpty = 1000;  			int currentSkipSizeEmpty = 0;  			while (true) {  				// Enumerate through all files (1000 at a time)  				var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  				currentSkipSizeEmpty += listfiles.Count;  				var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  				;  				foreach (var a in assetsnotempty) {  					newListAssets2.Remove (a);  					// if file with size >0' then we remove it parenrt id from the lis  				}  				if (currentSkipSizeEmpty == batchSizeEmpty) {  					skipSizeEmpty += batchSizeEmpty;  					currentSkipSizeEmpty = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets2) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.All:  		// we need this to parse all assets  		default:  			foreach (var a in listPagedAssets) {  				fassets.Add (a);  			}  			break;  		/*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  		foreach (var a in fassets) {  			aggregateListAssets.Add (a);  		}  		if (currentSkipSize2 == batchSize2) {  			skipSize2 += batchSize2;  			currentSkipSize2 = 0;  		} else {  			break;  		}  	}  	SwitchedToLocalQuery = true;  	assets = aggregateListAssets;  	///////////////////////  	// SORTING  	///////////////////////  	// let's sort the aggregate results  	var size = new Func<IAsset' long> (AssetInfo.GetSize);  	// client side only ! (a take is done otherwise)  	switch (_orderassets) {  	case OrderAssets.LastModifiedDescending:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	case OrderAssets.LastModifiedAscending:  		assets = from a in assets  		orderby a.LastModified ascending  		select a;  		break;  	case OrderAssets.NameAscending:  		assets = from a in assets  		orderby a.Name ascending  		select a;  		break;  	case OrderAssets.NameDescending:  		assets = from a in assets  		orderby a.Name descending  		select a;  		break;  	case OrderAssets.SizeDescending:  		assets = from a in assets  		orderby size (a) descending  		select a;  		break;  	case OrderAssets.SizeAscending:  		assets = from a in assets  		orderby size (a) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationAscending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationDescending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) descending  		select a;  		break;  	default:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		assets = assets.Take (50);  	} else// if (_timefilter == FilterTime.First1000Items)  	 {  		assets = assets.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (!SwitchedToLocalQuery && (_statefilter == StatusAssets.All || _statefilter == "") && _orderassets == OrderAssets.LastModifiedDescending) {  	if (_timefilter == FilterTime.First50Items) {  		assets = assetsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		assets = assetsServerQuery.Take (1000);  	} else {  		assets = assetsServerQuery;  	}  } else// general case   {  	///////////////////////  	// STATE FILTER  	///////////////////////  	// we need to do paging  	// not excuted for large account as state filter control is disabled  	IList<IAsset> aggregateListAssets = new List<IAsset> ();  	int skipSize2 = 0;  	int batchSize2 = 1000;  	int currentSkipSize2 = 0;  	while (true) {  		// Enumerate through all assets (1000 at a time)  		IEnumerable<IAsset> listPagedAssets;  		IList<IAsset> fassets = new List<IAsset> ();  		if (SwitchedToLocalQuery) {  			listPagedAssets = assets.Skip (skipSize2).Take (batchSize2).ToList ();  		} else {  			listPagedAssets = assetsServerQuery.Skip (skipSize2).Take (batchSize2).ToList ();  		}  		currentSkipSize2 += listPagedAssets.Count ();  		switch (_statefilter) {  		case StatusAssets.Published:  		case StatusAssets.PublishedExpired:  			bool bexpired = _statefilter == StatusAssets.PublishedExpired;  			IList<IAsset> newListAssets1 = new List<IAsset> ();  			int skipSizeLoc = 0;  			int batchSizeLoc = 1000;  			int currentSkipSizeLoc = 0;  			while (true) {  				// Enumerate through all locators (1000 at a time)  				var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  				currentSkipSizeLoc += listlocators.Count;  				var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  				foreach (var a in assetexpired) {  					newListAssets1.Add (a);  				}  				if (currentSkipSizeLoc == batchSizeLoc) {  					skipSizeLoc += batchSizeLoc;  					currentSkipSizeLoc = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets1) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.DynEnc:  			var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  			foreach (var a in assetwithDelPol) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.Empty:  			IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  			int skipSizeEmpty = 0;  			int batchSizeEmpty = 1000;  			int currentSkipSizeEmpty = 0;  			while (true) {  				// Enumerate through all files (1000 at a time)  				var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  				currentSkipSizeEmpty += listfiles.Count;  				var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  				;  				foreach (var a in assetsnotempty) {  					newListAssets2.Remove (a);  					// if file with size >0' then we remove it parenrt id from the lis  				}  				if (currentSkipSizeEmpty == batchSizeEmpty) {  					skipSizeEmpty += batchSizeEmpty;  					currentSkipSizeEmpty = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets2) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.All:  		// we need this to parse all assets  		default:  			foreach (var a in listPagedAssets) {  				fassets.Add (a);  			}  			break;  		/*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  		foreach (var a in fassets) {  			aggregateListAssets.Add (a);  		}  		if (currentSkipSize2 == batchSize2) {  			skipSize2 += batchSize2;  			currentSkipSize2 = 0;  		} else {  			break;  		}  	}  	SwitchedToLocalQuery = true;  	assets = aggregateListAssets;  	///////////////////////  	// SORTING  	///////////////////////  	// let's sort the aggregate results  	var size = new Func<IAsset' long> (AssetInfo.GetSize);  	// client side only ! (a take is done otherwise)  	switch (_orderassets) {  	case OrderAssets.LastModifiedDescending:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	case OrderAssets.LastModifiedAscending:  		assets = from a in assets  		orderby a.LastModified ascending  		select a;  		break;  	case OrderAssets.NameAscending:  		assets = from a in assets  		orderby a.Name ascending  		select a;  		break;  	case OrderAssets.NameDescending:  		assets = from a in assets  		orderby a.Name descending  		select a;  		break;  	case OrderAssets.SizeDescending:  		assets = from a in assets  		orderby size (a) descending  		select a;  		break;  	case OrderAssets.SizeAscending:  		assets = from a in assets  		orderby size (a) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationAscending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationDescending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) descending  		select a;  		break;  	default:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		assets = assets.Take (50);  	} else// if (_timefilter == FilterTime.First1000Items)  	 {  		assets = assets.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (!SwitchedToLocalQuery && (_statefilter == StatusAssets.All || _statefilter == "") && _orderassets == OrderAssets.LastModifiedDescending) {  	if (_timefilter == FilterTime.First50Items) {  		assets = assetsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		assets = assetsServerQuery.Take (1000);  	} else {  		assets = assetsServerQuery;  	}  } else// general case   {  	///////////////////////  	// STATE FILTER  	///////////////////////  	// we need to do paging  	// not excuted for large account as state filter control is disabled  	IList<IAsset> aggregateListAssets = new List<IAsset> ();  	int skipSize2 = 0;  	int batchSize2 = 1000;  	int currentSkipSize2 = 0;  	while (true) {  		// Enumerate through all assets (1000 at a time)  		IEnumerable<IAsset> listPagedAssets;  		IList<IAsset> fassets = new List<IAsset> ();  		if (SwitchedToLocalQuery) {  			listPagedAssets = assets.Skip (skipSize2).Take (batchSize2).ToList ();  		} else {  			listPagedAssets = assetsServerQuery.Skip (skipSize2).Take (batchSize2).ToList ();  		}  		currentSkipSize2 += listPagedAssets.Count ();  		switch (_statefilter) {  		case StatusAssets.Published:  		case StatusAssets.PublishedExpired:  			bool bexpired = _statefilter == StatusAssets.PublishedExpired;  			IList<IAsset> newListAssets1 = new List<IAsset> ();  			int skipSizeLoc = 0;  			int batchSizeLoc = 1000;  			int currentSkipSizeLoc = 0;  			while (true) {  				// Enumerate through all locators (1000 at a time)  				var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  				currentSkipSizeLoc += listlocators.Count;  				var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  				foreach (var a in assetexpired) {  					newListAssets1.Add (a);  				}  				if (currentSkipSizeLoc == batchSizeLoc) {  					skipSizeLoc += batchSizeLoc;  					currentSkipSizeLoc = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets1) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.DynEnc:  			var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  			foreach (var a in assetwithDelPol) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.Empty:  			IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  			int skipSizeEmpty = 0;  			int batchSizeEmpty = 1000;  			int currentSkipSizeEmpty = 0;  			while (true) {  				// Enumerate through all files (1000 at a time)  				var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  				currentSkipSizeEmpty += listfiles.Count;  				var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  				;  				foreach (var a in assetsnotempty) {  					newListAssets2.Remove (a);  					// if file with size >0' then we remove it parenrt id from the lis  				}  				if (currentSkipSizeEmpty == batchSizeEmpty) {  					skipSizeEmpty += batchSizeEmpty;  					currentSkipSizeEmpty = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets2) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.All:  		// we need this to parse all assets  		default:  			foreach (var a in listPagedAssets) {  				fassets.Add (a);  			}  			break;  		/*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  		foreach (var a in fassets) {  			aggregateListAssets.Add (a);  		}  		if (currentSkipSize2 == batchSize2) {  			skipSize2 += batchSize2;  			currentSkipSize2 = 0;  		} else {  			break;  		}  	}  	SwitchedToLocalQuery = true;  	assets = aggregateListAssets;  	///////////////////////  	// SORTING  	///////////////////////  	// let's sort the aggregate results  	var size = new Func<IAsset' long> (AssetInfo.GetSize);  	// client side only ! (a take is done otherwise)  	switch (_orderassets) {  	case OrderAssets.LastModifiedDescending:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	case OrderAssets.LastModifiedAscending:  		assets = from a in assets  		orderby a.LastModified ascending  		select a;  		break;  	case OrderAssets.NameAscending:  		assets = from a in assets  		orderby a.Name ascending  		select a;  		break;  	case OrderAssets.NameDescending:  		assets = from a in assets  		orderby a.Name descending  		select a;  		break;  	case OrderAssets.SizeDescending:  		assets = from a in assets  		orderby size (a) descending  		select a;  		break;  	case OrderAssets.SizeAscending:  		assets = from a in assets  		orderby size (a) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationAscending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationDescending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) descending  		select a;  		break;  	default:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		assets = assets.Take (50);  	} else// if (_timefilter == FilterTime.First1000Items)  	 {  		assets = assets.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (!SwitchedToLocalQuery && (_statefilter == StatusAssets.All || _statefilter == "") && _orderassets == OrderAssets.LastModifiedDescending) {  	if (_timefilter == FilterTime.First50Items) {  		assets = assetsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		assets = assetsServerQuery.Take (1000);  	} else {  		assets = assetsServerQuery;  	}  } else// general case   {  	///////////////////////  	// STATE FILTER  	///////////////////////  	// we need to do paging  	// not excuted for large account as state filter control is disabled  	IList<IAsset> aggregateListAssets = new List<IAsset> ();  	int skipSize2 = 0;  	int batchSize2 = 1000;  	int currentSkipSize2 = 0;  	while (true) {  		// Enumerate through all assets (1000 at a time)  		IEnumerable<IAsset> listPagedAssets;  		IList<IAsset> fassets = new List<IAsset> ();  		if (SwitchedToLocalQuery) {  			listPagedAssets = assets.Skip (skipSize2).Take (batchSize2).ToList ();  		} else {  			listPagedAssets = assetsServerQuery.Skip (skipSize2).Take (batchSize2).ToList ();  		}  		currentSkipSize2 += listPagedAssets.Count ();  		switch (_statefilter) {  		case StatusAssets.Published:  		case StatusAssets.PublishedExpired:  			bool bexpired = _statefilter == StatusAssets.PublishedExpired;  			IList<IAsset> newListAssets1 = new List<IAsset> ();  			int skipSizeLoc = 0;  			int batchSizeLoc = 1000;  			int currentSkipSizeLoc = 0;  			while (true) {  				// Enumerate through all locators (1000 at a time)  				var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  				currentSkipSizeLoc += listlocators.Count;  				var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  				foreach (var a in assetexpired) {  					newListAssets1.Add (a);  				}  				if (currentSkipSizeLoc == batchSizeLoc) {  					skipSizeLoc += batchSizeLoc;  					currentSkipSizeLoc = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets1) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.DynEnc:  			var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  			foreach (var a in assetwithDelPol) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.Empty:  			IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  			int skipSizeEmpty = 0;  			int batchSizeEmpty = 1000;  			int currentSkipSizeEmpty = 0;  			while (true) {  				// Enumerate through all files (1000 at a time)  				var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  				currentSkipSizeEmpty += listfiles.Count;  				var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  				;  				foreach (var a in assetsnotempty) {  					newListAssets2.Remove (a);  					// if file with size >0' then we remove it parenrt id from the lis  				}  				if (currentSkipSizeEmpty == batchSizeEmpty) {  					skipSizeEmpty += batchSizeEmpty;  					currentSkipSizeEmpty = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets2) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.All:  		// we need this to parse all assets  		default:  			foreach (var a in listPagedAssets) {  				fassets.Add (a);  			}  			break;  		/*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  		foreach (var a in fassets) {  			aggregateListAssets.Add (a);  		}  		if (currentSkipSize2 == batchSize2) {  			skipSize2 += batchSize2;  			currentSkipSize2 = 0;  		} else {  			break;  		}  	}  	SwitchedToLocalQuery = true;  	assets = aggregateListAssets;  	///////////////////////  	// SORTING  	///////////////////////  	// let's sort the aggregate results  	var size = new Func<IAsset' long> (AssetInfo.GetSize);  	// client side only ! (a take is done otherwise)  	switch (_orderassets) {  	case OrderAssets.LastModifiedDescending:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	case OrderAssets.LastModifiedAscending:  		assets = from a in assets  		orderby a.LastModified ascending  		select a;  		break;  	case OrderAssets.NameAscending:  		assets = from a in assets  		orderby a.Name ascending  		select a;  		break;  	case OrderAssets.NameDescending:  		assets = from a in assets  		orderby a.Name descending  		select a;  		break;  	case OrderAssets.SizeDescending:  		assets = from a in assets  		orderby size (a) descending  		select a;  		break;  	case OrderAssets.SizeAscending:  		assets = from a in assets  		orderby size (a) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationAscending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationDescending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) descending  		select a;  		break;  	default:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		assets = assets.Take (50);  	} else// if (_timefilter == FilterTime.First1000Items)  	 {  		assets = assets.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (!SwitchedToLocalQuery && (_statefilter == StatusAssets.All || _statefilter == "") && _orderassets == OrderAssets.LastModifiedDescending) {  	if (_timefilter == FilterTime.First50Items) {  		assets = assetsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		assets = assetsServerQuery.Take (1000);  	} else {  		assets = assetsServerQuery;  	}  } else// general case   {  	///////////////////////  	// STATE FILTER  	///////////////////////  	// we need to do paging  	// not excuted for large account as state filter control is disabled  	IList<IAsset> aggregateListAssets = new List<IAsset> ();  	int skipSize2 = 0;  	int batchSize2 = 1000;  	int currentSkipSize2 = 0;  	while (true) {  		// Enumerate through all assets (1000 at a time)  		IEnumerable<IAsset> listPagedAssets;  		IList<IAsset> fassets = new List<IAsset> ();  		if (SwitchedToLocalQuery) {  			listPagedAssets = assets.Skip (skipSize2).Take (batchSize2).ToList ();  		} else {  			listPagedAssets = assetsServerQuery.Skip (skipSize2).Take (batchSize2).ToList ();  		}  		currentSkipSize2 += listPagedAssets.Count ();  		switch (_statefilter) {  		case StatusAssets.Published:  		case StatusAssets.PublishedExpired:  			bool bexpired = _statefilter == StatusAssets.PublishedExpired;  			IList<IAsset> newListAssets1 = new List<IAsset> ();  			int skipSizeLoc = 0;  			int batchSizeLoc = 1000;  			int currentSkipSizeLoc = 0;  			while (true) {  				// Enumerate through all locators (1000 at a time)  				var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  				currentSkipSizeLoc += listlocators.Count;  				var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  				foreach (var a in assetexpired) {  					newListAssets1.Add (a);  				}  				if (currentSkipSizeLoc == batchSizeLoc) {  					skipSizeLoc += batchSizeLoc;  					currentSkipSizeLoc = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets1) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.DynEnc:  			var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  			foreach (var a in assetwithDelPol) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.Empty:  			IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  			int skipSizeEmpty = 0;  			int batchSizeEmpty = 1000;  			int currentSkipSizeEmpty = 0;  			while (true) {  				// Enumerate through all files (1000 at a time)  				var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  				currentSkipSizeEmpty += listfiles.Count;  				var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  				;  				foreach (var a in assetsnotempty) {  					newListAssets2.Remove (a);  					// if file with size >0' then we remove it parenrt id from the lis  				}  				if (currentSkipSizeEmpty == batchSizeEmpty) {  					skipSizeEmpty += batchSizeEmpty;  					currentSkipSizeEmpty = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets2) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.All:  		// we need this to parse all assets  		default:  			foreach (var a in listPagedAssets) {  				fassets.Add (a);  			}  			break;  		/*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  		foreach (var a in fassets) {  			aggregateListAssets.Add (a);  		}  		if (currentSkipSize2 == batchSize2) {  			skipSize2 += batchSize2;  			currentSkipSize2 = 0;  		} else {  			break;  		}  	}  	SwitchedToLocalQuery = true;  	assets = aggregateListAssets;  	///////////////////////  	// SORTING  	///////////////////////  	// let's sort the aggregate results  	var size = new Func<IAsset' long> (AssetInfo.GetSize);  	// client side only ! (a take is done otherwise)  	switch (_orderassets) {  	case OrderAssets.LastModifiedDescending:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	case OrderAssets.LastModifiedAscending:  		assets = from a in assets  		orderby a.LastModified ascending  		select a;  		break;  	case OrderAssets.NameAscending:  		assets = from a in assets  		orderby a.Name ascending  		select a;  		break;  	case OrderAssets.NameDescending:  		assets = from a in assets  		orderby a.Name descending  		select a;  		break;  	case OrderAssets.SizeDescending:  		assets = from a in assets  		orderby size (a) descending  		select a;  		break;  	case OrderAssets.SizeAscending:  		assets = from a in assets  		orderby size (a) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationAscending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationDescending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) descending  		select a;  		break;  	default:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		assets = assets.Take (50);  	} else// if (_timefilter == FilterTime.First1000Items)  	 {  		assets = assets.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (!SwitchedToLocalQuery && (_statefilter == StatusAssets.All || _statefilter == "") && _orderassets == OrderAssets.LastModifiedDescending) {  	if (_timefilter == FilterTime.First50Items) {  		assets = assetsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		assets = assetsServerQuery.Take (1000);  	} else {  		assets = assetsServerQuery;  	}  } else// general case   {  	///////////////////////  	// STATE FILTER  	///////////////////////  	// we need to do paging  	// not excuted for large account as state filter control is disabled  	IList<IAsset> aggregateListAssets = new List<IAsset> ();  	int skipSize2 = 0;  	int batchSize2 = 1000;  	int currentSkipSize2 = 0;  	while (true) {  		// Enumerate through all assets (1000 at a time)  		IEnumerable<IAsset> listPagedAssets;  		IList<IAsset> fassets = new List<IAsset> ();  		if (SwitchedToLocalQuery) {  			listPagedAssets = assets.Skip (skipSize2).Take (batchSize2).ToList ();  		} else {  			listPagedAssets = assetsServerQuery.Skip (skipSize2).Take (batchSize2).ToList ();  		}  		currentSkipSize2 += listPagedAssets.Count ();  		switch (_statefilter) {  		case StatusAssets.Published:  		case StatusAssets.PublishedExpired:  			bool bexpired = _statefilter == StatusAssets.PublishedExpired;  			IList<IAsset> newListAssets1 = new List<IAsset> ();  			int skipSizeLoc = 0;  			int batchSizeLoc = 1000;  			int currentSkipSizeLoc = 0;  			while (true) {  				// Enumerate through all locators (1000 at a time)  				var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  				currentSkipSizeLoc += listlocators.Count;  				var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  				foreach (var a in assetexpired) {  					newListAssets1.Add (a);  				}  				if (currentSkipSizeLoc == batchSizeLoc) {  					skipSizeLoc += batchSizeLoc;  					currentSkipSizeLoc = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets1) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.DynEnc:  			var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  			foreach (var a in assetwithDelPol) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.Empty:  			IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  			int skipSizeEmpty = 0;  			int batchSizeEmpty = 1000;  			int currentSkipSizeEmpty = 0;  			while (true) {  				// Enumerate through all files (1000 at a time)  				var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  				currentSkipSizeEmpty += listfiles.Count;  				var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  				;  				foreach (var a in assetsnotempty) {  					newListAssets2.Remove (a);  					// if file with size >0' then we remove it parenrt id from the lis  				}  				if (currentSkipSizeEmpty == batchSizeEmpty) {  					skipSizeEmpty += batchSizeEmpty;  					currentSkipSizeEmpty = 0;  				} else {  					break;  				}  			}  			foreach (var a in newListAssets2) {  				fassets.Add (a);  			}  			break;  		case StatusAssets.All:  		// we need this to parse all assets  		default:  			foreach (var a in listPagedAssets) {  				fassets.Add (a);  			}  			break;  		/*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  		foreach (var a in fassets) {  			aggregateListAssets.Add (a);  		}  		if (currentSkipSize2 == batchSize2) {  			skipSize2 += batchSize2;  			currentSkipSize2 = 0;  		} else {  			break;  		}  	}  	SwitchedToLocalQuery = true;  	assets = aggregateListAssets;  	///////////////////////  	// SORTING  	///////////////////////  	// let's sort the aggregate results  	var size = new Func<IAsset' long> (AssetInfo.GetSize);  	// client side only ! (a take is done otherwise)  	switch (_orderassets) {  	case OrderAssets.LastModifiedDescending:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	case OrderAssets.LastModifiedAscending:  		assets = from a in assets  		orderby a.LastModified ascending  		select a;  		break;  	case OrderAssets.NameAscending:  		assets = from a in assets  		orderby a.Name ascending  		select a;  		break;  	case OrderAssets.NameDescending:  		assets = from a in assets  		orderby a.Name descending  		select a;  		break;  	case OrderAssets.SizeDescending:  		assets = from a in assets  		orderby size (a) descending  		select a;  		break;  	case OrderAssets.SizeAscending:  		assets = from a in assets  		orderby size (a) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationAscending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) ascending  		select a;  		break;  	case OrderAssets.LocatorExpirationDescending:  		assets = from a in assets  		where a.Locators.Any ()  		orderby a.Locators.Min (l => l.ExpirationDateTime) descending  		select a;  		break;  	default:  		assets = from a in assets  		orderby a.LastModified descending  		select a;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		assets = assets.Take (50);  	} else// if (_timefilter == FilterTime.First1000Items)  	 {  		assets = assets.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (_timefilter == FilterTime.First50Items) {  	assets = assetsServerQuery.Take (50);  } else if (_timefilter == FilterTime.First1000Items) {  	assets = assetsServerQuery.Take (1000);  } else {  	assets = assetsServerQuery;  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (_timefilter == FilterTime.First50Items) {  	assets = assetsServerQuery.Take (50);  } else if (_timefilter == FilterTime.First1000Items) {  	assets = assetsServerQuery.Take (1000);  } else {  	assets = assetsServerQuery;  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: assets = assetsServerQuery.Take (50);  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (_timefilter == FilterTime.First1000Items) {  	assets = assetsServerQuery.Take (1000);  } else {  	assets = assetsServerQuery;  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: assets = assetsServerQuery.Take (1000);  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: while (true) {  	// Enumerate through all assets (1000 at a time)  	IEnumerable<IAsset> listPagedAssets;  	IList<IAsset> fassets = new List<IAsset> ();  	if (SwitchedToLocalQuery) {  		listPagedAssets = assets.Skip (skipSize2).Take (batchSize2).ToList ();  	} else {  		listPagedAssets = assetsServerQuery.Skip (skipSize2).Take (batchSize2).ToList ();  	}  	currentSkipSize2 += listPagedAssets.Count ();  	switch (_statefilter) {  	case StatusAssets.Published:  	case StatusAssets.PublishedExpired:  		bool bexpired = _statefilter == StatusAssets.PublishedExpired;  		IList<IAsset> newListAssets1 = new List<IAsset> ();  		int skipSizeLoc = 0;  		int batchSizeLoc = 1000;  		int currentSkipSizeLoc = 0;  		while (true) {  			// Enumerate through all locators (1000 at a time)  			var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  			currentSkipSizeLoc += listlocators.Count;  			var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  			foreach (var a in assetexpired) {  				newListAssets1.Add (a);  			}  			if (currentSkipSizeLoc == batchSizeLoc) {  				skipSizeLoc += batchSizeLoc;  				currentSkipSizeLoc = 0;  			} else {  				break;  			}  		}  		foreach (var a in newListAssets1) {  			fassets.Add (a);  		}  		break;  	case StatusAssets.DynEnc:  		var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  		foreach (var a in assetwithDelPol) {  			fassets.Add (a);  		}  		break;  	case StatusAssets.Empty:  		IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  		int skipSizeEmpty = 0;  		int batchSizeEmpty = 1000;  		int currentSkipSizeEmpty = 0;  		while (true) {  			// Enumerate through all files (1000 at a time)  			var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  			currentSkipSizeEmpty += listfiles.Count;  			var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  			;  			foreach (var a in assetsnotempty) {  				newListAssets2.Remove (a);  				// if file with size >0' then we remove it parenrt id from the lis  			}  			if (currentSkipSizeEmpty == batchSizeEmpty) {  				skipSizeEmpty += batchSizeEmpty;  				currentSkipSizeEmpty = 0;  			} else {  				break;  			}  		}  		foreach (var a in newListAssets2) {  			fassets.Add (a);  		}  		break;  	case StatusAssets.All:  	// we need this to parse all assets  	default:  		foreach (var a in listPagedAssets) {  			fassets.Add (a);  		}  		break;  	/*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  	foreach (var a in fassets) {  		aggregateListAssets.Add (a);  	}  	if (currentSkipSize2 == batchSize2) {  		skipSize2 += batchSize2;  		currentSkipSize2 = 0;  	} else {  		break;  	}  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: while (true) {  	// Enumerate through all assets (1000 at a time)  	IEnumerable<IAsset> listPagedAssets;  	IList<IAsset> fassets = new List<IAsset> ();  	if (SwitchedToLocalQuery) {  		listPagedAssets = assets.Skip (skipSize2).Take (batchSize2).ToList ();  	} else {  		listPagedAssets = assetsServerQuery.Skip (skipSize2).Take (batchSize2).ToList ();  	}  	currentSkipSize2 += listPagedAssets.Count ();  	switch (_statefilter) {  	case StatusAssets.Published:  	case StatusAssets.PublishedExpired:  		bool bexpired = _statefilter == StatusAssets.PublishedExpired;  		IList<IAsset> newListAssets1 = new List<IAsset> ();  		int skipSizeLoc = 0;  		int batchSizeLoc = 1000;  		int currentSkipSizeLoc = 0;  		while (true) {  			// Enumerate through all locators (1000 at a time)  			var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  			currentSkipSizeLoc += listlocators.Count;  			var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  			foreach (var a in assetexpired) {  				newListAssets1.Add (a);  			}  			if (currentSkipSizeLoc == batchSizeLoc) {  				skipSizeLoc += batchSizeLoc;  				currentSkipSizeLoc = 0;  			} else {  				break;  			}  		}  		foreach (var a in newListAssets1) {  			fassets.Add (a);  		}  		break;  	case StatusAssets.DynEnc:  		var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  		foreach (var a in assetwithDelPol) {  			fassets.Add (a);  		}  		break;  	case StatusAssets.Empty:  		IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  		int skipSizeEmpty = 0;  		int batchSizeEmpty = 1000;  		int currentSkipSizeEmpty = 0;  		while (true) {  			// Enumerate through all files (1000 at a time)  			var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  			currentSkipSizeEmpty += listfiles.Count;  			var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  			;  			foreach (var a in assetsnotempty) {  				newListAssets2.Remove (a);  				// if file with size >0' then we remove it parenrt id from the lis  			}  			if (currentSkipSizeEmpty == batchSizeEmpty) {  				skipSizeEmpty += batchSizeEmpty;  				currentSkipSizeEmpty = 0;  			} else {  				break;  			}  		}  		foreach (var a in newListAssets2) {  			fassets.Add (a);  		}  		break;  	case StatusAssets.All:  	// we need this to parse all assets  	default:  		foreach (var a in listPagedAssets) {  			fassets.Add (a);  		}  		break;  	/*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  	foreach (var a in fassets) {  		aggregateListAssets.Add (a);  	}  	if (currentSkipSize2 == batchSize2) {  		skipSize2 += batchSize2;  		currentSkipSize2 = 0;  	} else {  		break;  	}  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: switch (_statefilter) {  case StatusAssets.Published:  case StatusAssets.PublishedExpired:  	bool bexpired = _statefilter == StatusAssets.PublishedExpired;  	IList<IAsset> newListAssets1 = new List<IAsset> ();  	int skipSizeLoc = 0;  	int batchSizeLoc = 1000;  	int currentSkipSizeLoc = 0;  	while (true) {  		// Enumerate through all locators (1000 at a time)  		var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  		currentSkipSizeLoc += listlocators.Count;  		var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  		foreach (var a in assetexpired) {  			newListAssets1.Add (a);  		}  		if (currentSkipSizeLoc == batchSizeLoc) {  			skipSizeLoc += batchSizeLoc;  			currentSkipSizeLoc = 0;  		} else {  			break;  		}  	}  	foreach (var a in newListAssets1) {  		fassets.Add (a);  	}  	break;  case StatusAssets.DynEnc:  	var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  	foreach (var a in assetwithDelPol) {  		fassets.Add (a);  	}  	break;  case StatusAssets.Empty:  	IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  	int skipSizeEmpty = 0;  	int batchSizeEmpty = 1000;  	int currentSkipSizeEmpty = 0;  	while (true) {  		// Enumerate through all files (1000 at a time)  		var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  		currentSkipSizeEmpty += listfiles.Count;  		var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  		;  		foreach (var a in assetsnotempty) {  			newListAssets2.Remove (a);  			// if file with size >0' then we remove it parenrt id from the lis  		}  		if (currentSkipSizeEmpty == batchSizeEmpty) {  			skipSizeEmpty += batchSizeEmpty;  			currentSkipSizeEmpty = 0;  		} else {  			break;  		}  	}  	foreach (var a in newListAssets2) {  		fassets.Add (a);  	}  	break;  case StatusAssets.All:  // we need this to parse all assets  default:  	foreach (var a in listPagedAssets) {  		fassets.Add (a);  	}  	break;  /*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: switch (_statefilter) {  case StatusAssets.Published:  case StatusAssets.PublishedExpired:  	bool bexpired = _statefilter == StatusAssets.PublishedExpired;  	IList<IAsset> newListAssets1 = new List<IAsset> ();  	int skipSizeLoc = 0;  	int batchSizeLoc = 1000;  	int currentSkipSizeLoc = 0;  	while (true) {  		// Enumerate through all locators (1000 at a time)  		var listlocators = context.Locators.Where (l => !bexpired || l.ExpirationDateTime < DateTime.UtcNow).Skip (skipSizeLoc).Take (batchSizeLoc).ToList ().Select (l => l.AssetId).ToList ();  		currentSkipSizeLoc += listlocators.Count;  		var assetexpired = listPagedAssets.Where (a => listlocators.Contains (a.Id));  		foreach (var a in assetexpired) {  			newListAssets1.Add (a);  		}  		if (currentSkipSizeLoc == batchSizeLoc) {  			skipSizeLoc += batchSizeLoc;  			currentSkipSizeLoc = 0;  		} else {  			break;  		}  	}  	foreach (var a in newListAssets1) {  		fassets.Add (a);  	}  	break;  case StatusAssets.DynEnc:  	var assetwithDelPol = listPagedAssets.Where (a => a.DeliveryPolicies.Any ());  	foreach (var a in assetwithDelPol) {  		fassets.Add (a);  	}  	break;  case StatusAssets.Empty:  	IList<IAsset> newListAssets2 = listPagedAssets.ToList ();  	int skipSizeEmpty = 0;  	int batchSizeEmpty = 1000;  	int currentSkipSizeEmpty = 0;  	while (true) {  		// Enumerate through all files (1000 at a time)  		var listfiles = context.Files.Where (f => f.ContentFileSize > 0).Skip (skipSizeEmpty).Take (batchSizeEmpty).ToList ().Select (f => f.ParentAssetId).ToList ();  		currentSkipSizeEmpty += listfiles.Count;  		var assetsnotempty = listPagedAssets.Where (a => listfiles.Contains (a.Id)).ToList ();  		;  		foreach (var a in assetsnotempty) {  			newListAssets2.Remove (a);  			// if file with size >0' then we remove it parenrt id from the lis  		}  		if (currentSkipSizeEmpty == batchSizeEmpty) {  			skipSizeEmpty += batchSizeEmpty;  			currentSkipSizeEmpty = 0;  		} else {  			break;  		}  	}  	foreach (var a in newListAssets2) {  		fassets.Add (a);  	}  	break;  case StatusAssets.All:  // we need this to parse all assets  default:  	foreach (var a in listPagedAssets) {  		fassets.Add (a);  	}  	break;  /*                              // below is REMOVED  as queries are executed by the back-end in order to process all assets and be quick. Th equery below needs to be                             // executed locally and would be slow. Could be reintroduce if customer demand.                          case StatusAssets.NotPublished:                             fassets = listassets.Where(a => a.Locators.Count == 0);                             break;                         case StatusAssets.Storage:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.StorageEncrypted);                             break;                         case StatusAssets.CENC:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.CommonEncryptionProtected);                             break;                         case StatusAssets.Envelope:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.EnvelopeEncryptionProtected);                             break;                         case StatusAssets.NotEncrypted:                             fassets = listassets.Where(a => a.Options == AssetCreationOptions.None);                             break;                         case StatusAssets.DynEnc:                             fassets = listassets.Where(a => a.DeliveryPolicies.Any());                             break;                         case StatusAssets.Streamable:                             fassets = listassets.Where(a => a.IsStreamable);                             break;                         case StatusAssets.SupportDynEnc:                             fassets = listassets.Where(a => a.SupportsDynamicEncryption);                             break;                         case StatusAssets.Empty:                             fassets = listassets.Where(a => a.AssetFiles.Count() == 0);                             break;                         case StatusAssets.DefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName == _context.DefaultStorageAccount.Name);                             break;                         case StatusAssets.NotDefaultStorage:                             fassets = listassets.Where(a => a.StorageAccountName != _context.DefaultStorageAccount.Name);                             break;                             */}  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (_timefilter == FilterTime.First50Items) {  	assets = assets.Take (50);  } else// if (_timefilter == FilterTime.First1000Items)   {  	assets = assets.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: if (_timefilter == FilterTime.First50Items) {  	assets = assets.Take (50);  } else// if (_timefilter == FilterTime.First1000Items)   {  	assets = assets.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: assets = assets.Take (50);  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,RefreshAssets,The following statement contains a magic number: assets = assets.Take (1000);  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,AnalyzeItemsInBackground,The following statement contains a magic number: Task.Run (() => {  	WorkerAnalyzeAssets.CancelAsync ();  	// let's wait a little for the previous worker to cancel if needed  	System.Threading.Thread.Sleep (2000);  	if (WorkerAnalyzeAssets.IsBusy != true) {  		// Start the asynchronous operation.  		try {  			WorkerAnalyzeAssets.RunWorkerAsync ();  		} catch {  		}  	}  });  
Magic Number,AMSExplorer,DataGridViewAssets,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,AnalyzeItemsInBackground,The following statement contains a magic number: System.Threading.Thread.Sleep (2000);  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["Progress"].DisplayIndex = 5;  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["Progress"].Width = 150;  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["Tasks"].Width = 50;  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["Priority"].Width = 50;  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["State"].Width = 80;  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["StartTime"].Width = 150;  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["EndTime"].Width = 150;  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Init,The following statement contains a magic number: this.Columns ["Duration"].Width = 90;  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_orderjobs == OrderJobs.LastModifiedDescending && (_timefilter == FilterTime.First50Items || _timefilter == FilterTime.First1000Items)) {  	if (_timefilter == FilterTime.First50Items) {  		jobs = jobsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		jobs = jobsServerQuery.Take (1000);  	}  } else// general case   {  	// let's get all the results locally  	IList<IJob> aggregateListJobs = new List<IJob> ();  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var jobsq = jobsServerQuery.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += jobsq.Count;  		foreach (var j in jobsq) {  			aggregateListJobs.Add (j);  		}  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	jobs = aggregateListJobs;  	switch (_orderjobs) {  	case OrderJobs.LastModifiedDescending:  		jobs = from j in jobs  		orderby j.LastModified descending  		select j;  		break;  	case OrderJobs.LastModifiedAscending:  		jobs = from j in jobs  		orderby j.LastModified ascending  		select j;  		break;  	case OrderJobs.NameDescending:  		jobs = from j in jobs  		orderby j.Name descending  		select j;  		break;  	case OrderJobs.NameAscending:  		jobs = from j in jobs  		orderby j.Name ascending  		select j;  		break;  	case OrderJobs.EndTimeDescending:  		jobs = from j in jobs  		orderby j.EndTime descending  		select j;  		break;  	case OrderJobs.EndTimeAscending:  		jobs = from j in jobs  		orderby j.EndTime ascending  		select j;  		break;  	case OrderJobs.ProcessTimeDescending:  		jobs = from j in jobs  		orderby j.RunningDuration descending  		select j;  		break;  	case OrderJobs.ProcessTimeAscending:  		jobs = from j in jobs  		orderby j.RunningDuration ascending  		select j;  		break;  	case OrderJobs.StartTimeDescending:  		jobs = from j in jobs  		orderby j.StartTime descending  		select j;  		break;  	case OrderJobs.StartTimeAscending:  		jobs = from j in jobs  		orderby j.StartTime ascending  		select j;  		break;  	case OrderJobs.StateDescending:  		jobs = from j in jobs  		orderby j.State descending  		select j;  		break;  	case OrderJobs.StateAscending:  		jobs = from j in jobs  		orderby j.State ascending  		select j;  		break;  	default:  		jobs = from j in jobs  		orderby j.LastModified descending  		select j;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		jobs = jobs.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		jobs = jobs.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_orderjobs == OrderJobs.LastModifiedDescending && (_timefilter == FilterTime.First50Items || _timefilter == FilterTime.First1000Items)) {  	if (_timefilter == FilterTime.First50Items) {  		jobs = jobsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		jobs = jobsServerQuery.Take (1000);  	}  } else// general case   {  	// let's get all the results locally  	IList<IJob> aggregateListJobs = new List<IJob> ();  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var jobsq = jobsServerQuery.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += jobsq.Count;  		foreach (var j in jobsq) {  			aggregateListJobs.Add (j);  		}  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	jobs = aggregateListJobs;  	switch (_orderjobs) {  	case OrderJobs.LastModifiedDescending:  		jobs = from j in jobs  		orderby j.LastModified descending  		select j;  		break;  	case OrderJobs.LastModifiedAscending:  		jobs = from j in jobs  		orderby j.LastModified ascending  		select j;  		break;  	case OrderJobs.NameDescending:  		jobs = from j in jobs  		orderby j.Name descending  		select j;  		break;  	case OrderJobs.NameAscending:  		jobs = from j in jobs  		orderby j.Name ascending  		select j;  		break;  	case OrderJobs.EndTimeDescending:  		jobs = from j in jobs  		orderby j.EndTime descending  		select j;  		break;  	case OrderJobs.EndTimeAscending:  		jobs = from j in jobs  		orderby j.EndTime ascending  		select j;  		break;  	case OrderJobs.ProcessTimeDescending:  		jobs = from j in jobs  		orderby j.RunningDuration descending  		select j;  		break;  	case OrderJobs.ProcessTimeAscending:  		jobs = from j in jobs  		orderby j.RunningDuration ascending  		select j;  		break;  	case OrderJobs.StartTimeDescending:  		jobs = from j in jobs  		orderby j.StartTime descending  		select j;  		break;  	case OrderJobs.StartTimeAscending:  		jobs = from j in jobs  		orderby j.StartTime ascending  		select j;  		break;  	case OrderJobs.StateDescending:  		jobs = from j in jobs  		orderby j.State descending  		select j;  		break;  	case OrderJobs.StateAscending:  		jobs = from j in jobs  		orderby j.State ascending  		select j;  		break;  	default:  		jobs = from j in jobs  		orderby j.LastModified descending  		select j;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		jobs = jobs.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		jobs = jobs.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_orderjobs == OrderJobs.LastModifiedDescending && (_timefilter == FilterTime.First50Items || _timefilter == FilterTime.First1000Items)) {  	if (_timefilter == FilterTime.First50Items) {  		jobs = jobsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		jobs = jobsServerQuery.Take (1000);  	}  } else// general case   {  	// let's get all the results locally  	IList<IJob> aggregateListJobs = new List<IJob> ();  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var jobsq = jobsServerQuery.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += jobsq.Count;  		foreach (var j in jobsq) {  			aggregateListJobs.Add (j);  		}  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	jobs = aggregateListJobs;  	switch (_orderjobs) {  	case OrderJobs.LastModifiedDescending:  		jobs = from j in jobs  		orderby j.LastModified descending  		select j;  		break;  	case OrderJobs.LastModifiedAscending:  		jobs = from j in jobs  		orderby j.LastModified ascending  		select j;  		break;  	case OrderJobs.NameDescending:  		jobs = from j in jobs  		orderby j.Name descending  		select j;  		break;  	case OrderJobs.NameAscending:  		jobs = from j in jobs  		orderby j.Name ascending  		select j;  		break;  	case OrderJobs.EndTimeDescending:  		jobs = from j in jobs  		orderby j.EndTime descending  		select j;  		break;  	case OrderJobs.EndTimeAscending:  		jobs = from j in jobs  		orderby j.EndTime ascending  		select j;  		break;  	case OrderJobs.ProcessTimeDescending:  		jobs = from j in jobs  		orderby j.RunningDuration descending  		select j;  		break;  	case OrderJobs.ProcessTimeAscending:  		jobs = from j in jobs  		orderby j.RunningDuration ascending  		select j;  		break;  	case OrderJobs.StartTimeDescending:  		jobs = from j in jobs  		orderby j.StartTime descending  		select j;  		break;  	case OrderJobs.StartTimeAscending:  		jobs = from j in jobs  		orderby j.StartTime ascending  		select j;  		break;  	case OrderJobs.StateDescending:  		jobs = from j in jobs  		orderby j.State descending  		select j;  		break;  	case OrderJobs.StateAscending:  		jobs = from j in jobs  		orderby j.State ascending  		select j;  		break;  	default:  		jobs = from j in jobs  		orderby j.LastModified descending  		select j;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		jobs = jobs.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		jobs = jobs.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_orderjobs == OrderJobs.LastModifiedDescending && (_timefilter == FilterTime.First50Items || _timefilter == FilterTime.First1000Items)) {  	if (_timefilter == FilterTime.First50Items) {  		jobs = jobsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		jobs = jobsServerQuery.Take (1000);  	}  } else// general case   {  	// let's get all the results locally  	IList<IJob> aggregateListJobs = new List<IJob> ();  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var jobsq = jobsServerQuery.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += jobsq.Count;  		foreach (var j in jobsq) {  			aggregateListJobs.Add (j);  		}  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	jobs = aggregateListJobs;  	switch (_orderjobs) {  	case OrderJobs.LastModifiedDescending:  		jobs = from j in jobs  		orderby j.LastModified descending  		select j;  		break;  	case OrderJobs.LastModifiedAscending:  		jobs = from j in jobs  		orderby j.LastModified ascending  		select j;  		break;  	case OrderJobs.NameDescending:  		jobs = from j in jobs  		orderby j.Name descending  		select j;  		break;  	case OrderJobs.NameAscending:  		jobs = from j in jobs  		orderby j.Name ascending  		select j;  		break;  	case OrderJobs.EndTimeDescending:  		jobs = from j in jobs  		orderby j.EndTime descending  		select j;  		break;  	case OrderJobs.EndTimeAscending:  		jobs = from j in jobs  		orderby j.EndTime ascending  		select j;  		break;  	case OrderJobs.ProcessTimeDescending:  		jobs = from j in jobs  		orderby j.RunningDuration descending  		select j;  		break;  	case OrderJobs.ProcessTimeAscending:  		jobs = from j in jobs  		orderby j.RunningDuration ascending  		select j;  		break;  	case OrderJobs.StartTimeDescending:  		jobs = from j in jobs  		orderby j.StartTime descending  		select j;  		break;  	case OrderJobs.StartTimeAscending:  		jobs = from j in jobs  		orderby j.StartTime ascending  		select j;  		break;  	case OrderJobs.StateDescending:  		jobs = from j in jobs  		orderby j.State descending  		select j;  		break;  	case OrderJobs.StateAscending:  		jobs = from j in jobs  		orderby j.State ascending  		select j;  		break;  	default:  		jobs = from j in jobs  		orderby j.LastModified descending  		select j;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		jobs = jobs.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		jobs = jobs.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_orderjobs == OrderJobs.LastModifiedDescending && (_timefilter == FilterTime.First50Items || _timefilter == FilterTime.First1000Items)) {  	if (_timefilter == FilterTime.First50Items) {  		jobs = jobsServerQuery.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		jobs = jobsServerQuery.Take (1000);  	}  } else// general case   {  	// let's get all the results locally  	IList<IJob> aggregateListJobs = new List<IJob> ();  	int skipSize = 0;  	int batchSize = 1000;  	int currentSkipSize = 0;  	while (true) {  		// Enumerate through all jobs (1000 at a time)  		var jobsq = jobsServerQuery.Skip (skipSize).Take (batchSize).ToList ();  		currentSkipSize += jobsq.Count;  		foreach (var j in jobsq) {  			aggregateListJobs.Add (j);  		}  		if (currentSkipSize == batchSize) {  			skipSize += batchSize;  			currentSkipSize = 0;  		} else {  			break;  		}  	}  	jobs = aggregateListJobs;  	switch (_orderjobs) {  	case OrderJobs.LastModifiedDescending:  		jobs = from j in jobs  		orderby j.LastModified descending  		select j;  		break;  	case OrderJobs.LastModifiedAscending:  		jobs = from j in jobs  		orderby j.LastModified ascending  		select j;  		break;  	case OrderJobs.NameDescending:  		jobs = from j in jobs  		orderby j.Name descending  		select j;  		break;  	case OrderJobs.NameAscending:  		jobs = from j in jobs  		orderby j.Name ascending  		select j;  		break;  	case OrderJobs.EndTimeDescending:  		jobs = from j in jobs  		orderby j.EndTime descending  		select j;  		break;  	case OrderJobs.EndTimeAscending:  		jobs = from j in jobs  		orderby j.EndTime ascending  		select j;  		break;  	case OrderJobs.ProcessTimeDescending:  		jobs = from j in jobs  		orderby j.RunningDuration descending  		select j;  		break;  	case OrderJobs.ProcessTimeAscending:  		jobs = from j in jobs  		orderby j.RunningDuration ascending  		select j;  		break;  	case OrderJobs.StartTimeDescending:  		jobs = from j in jobs  		orderby j.StartTime descending  		select j;  		break;  	case OrderJobs.StartTimeAscending:  		jobs = from j in jobs  		orderby j.StartTime ascending  		select j;  		break;  	case OrderJobs.StateDescending:  		jobs = from j in jobs  		orderby j.State descending  		select j;  		break;  	case OrderJobs.StateAscending:  		jobs = from j in jobs  		orderby j.State ascending  		select j;  		break;  	default:  		jobs = from j in jobs  		orderby j.LastModified descending  		select j;  		break;  	}  	if (_timefilter == FilterTime.First50Items) {  		jobs = jobs.Take (50);  	} else if (_timefilter == FilterTime.First1000Items) {  		jobs = jobs.Take (1000);  	}  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_timefilter == FilterTime.First50Items) {  	jobs = jobsServerQuery.Take (50);  } else if (_timefilter == FilterTime.First1000Items) {  	jobs = jobsServerQuery.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_timefilter == FilterTime.First50Items) {  	jobs = jobsServerQuery.Take (50);  } else if (_timefilter == FilterTime.First1000Items) {  	jobs = jobsServerQuery.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: jobs = jobsServerQuery.Take (50);  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_timefilter == FilterTime.First1000Items) {  	jobs = jobsServerQuery.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: jobs = jobsServerQuery.Take (1000);  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_timefilter == FilterTime.First50Items) {  	jobs = jobs.Take (50);  } else if (_timefilter == FilterTime.First1000Items) {  	jobs = jobs.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_timefilter == FilterTime.First50Items) {  	jobs = jobs.Take (50);  } else if (_timefilter == FilterTime.First1000Items) {  	jobs = jobs.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: jobs = jobs.Take (50);  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: if (_timefilter == FilterTime.First1000Items) {  	jobs = jobs.Take (1000);  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,Refreshjobs,The following statement contains a magic number: jobs = jobs.Take (1000);  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The following statement contains a magic number: Task.Run (() => {  	try {  		job = job.StartExecutionProgressTask (JobRefreshIntervalInMilliseconds' j => {  			// Was cancellation already requested?   			if (token.IsCancellationRequested == true) {  				return;  			}  			// refesh context and job  			_context = Program.ConnectAndGetNewContext (_credentials);  			// needed to get overallprogress  			/// NET TO RESTORE CONTEXT  			IJob JobRefreshed = GetJob (j.Id);  			int index = -1;  			foreach (JobEntry je in _MyObservJob)// let's search for index  			 {  				if (je.Id == JobRefreshed.Id) {  					index = _MyObservJob.IndexOf (je);  					break;  				}  			}  			if (index >= 0)// we found it  			 {  				// we update the observation collection  				if (JobRefreshed.State == JobState.Scheduled || JobRefreshed.State == JobState.Processing || JobRefreshed.State == JobState.Queued || JobRefreshed.State == JobState.Canceling)// in progress  				 {  					double progress = JobRefreshed.GetOverallProgress ();  					_MyObservJob [index].Progress = progress;  					_MyObservJob [index].Priority = JobRefreshed.Priority;  					_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null;  					_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null;  					_MyObservJob [index].State = JobRefreshed.State;  					Debug.WriteLine (index.ToString () + JobRefreshed.State);  					StringBuilder sb = new StringBuilder ();  					// display percentage for each task for mouse hover (tooltiptext)  					foreach (ITask task in JobRefreshed.Tasks)  						sb.AppendLine (string.Format ("{0} % ({1})"' Convert.ToInt32 (task.Progress).ToString ()' task.Name));  					// let's calculate the estipated time  					string ETAstr = ""' Durationstr = "";  					if (progress > 3) {  						DateTime startlocaltime = ((DateTime)JobRefreshed.StartTime).ToLocalTime ();  						TimeSpan interval = (TimeSpan)(DateTime.Now - startlocaltime);  						DateTime ETA = DateTime.Now.AddSeconds ((100d / progress - 1d) * interval.TotalSeconds);  						TimeSpan estimatedduration = (TimeSpan)(ETA - startlocaltime);  						ETAstr = "Estimated: " + ETA.ToString ("G");  						Durationstr = "Estimated: " + estimatedduration.ToString (@"d\.hh\:mm\:ss");  						_MyObservJob [index].EndTime = ETA.ToString (@"G") + " ?";  						_MyObservJob [index].Duration = JobRefreshed.EndTime.HasValue ? ((TimeSpan)((DateTime)JobRefreshed.EndTime - (DateTime)JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : estimatedduration.ToString (@"d\.hh\:mm\:ss") + " ?";  					}  					int indexdisplayed = -1;  					foreach (JobEntry je in _MyObservAssethisPage)// let's search for index in the page  					 {  						if (je.Id == JobRefreshed.Id) {  							indexdisplayed = _MyObservAssethisPage.IndexOf (je);  							try {  								this.BeginInvoke (new Action (() => {  									this.Rows [indexdisplayed].Cells [this.Columns ["Progress"].Index].ToolTipText = sb.ToString ();  									// mouse hover info  									if (progress != 0) {  										this.Rows [indexdisplayed].Cells [this.Columns ["EndTime"].Index].ToolTipText = ETAstr;  										// mouse hover info  										this.Rows [indexdisplayed].Cells [this.Columns ["Duration"].Index].ToolTipText = Durationstr;  										// mouse hover info  									}  									this.Refresh ();  								}));  							} catch {  							}  							break;  						}  					}  				} else// no progress anymore (cancelled' finished or failed)  				 {  					double progress = JobRefreshed.GetOverallProgress ();  					_MyObservJob [index].Duration = JobRefreshed.StartTime.HasValue ? ((TimeSpan)(DateTime.UtcNow - JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : null;  					_MyObservJob [index].Progress = 101d;  					// progress;  we don't want the progress bar to be displayed  					_MyObservJob [index].Priority = JobRefreshed.Priority;  					_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null;  					_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null;  					_MyObservJob [index].State = JobRefreshed.State;  					if (_MyListJobsMonitored.ContainsKey (JobRefreshed.Id))// we want to display only one time  					 {  						_MyListJobsMonitored.Remove (JobRefreshed.Id);  						// let's remove from the list of monitored jobs  						Mainform myform = (Mainform)this.FindForm ();  						// For indexer' there is an option to copy subtitles files to input asset  						if (CopySubtitlesToSourceAsset && JobRefreshed.State == JobState.Finished && JobRefreshed.Tasks.Count == 1) {  							var subtitlesFiles = JobRefreshed.Tasks.FirstOrDefault ().OutputAssets.FirstOrDefault ().AssetFiles.ToList ().Where (f => f.Name.EndsWith (".vtt"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ttml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".smi"' StringComparison.OrdinalIgnoreCase));  							var inputAsset = JobRefreshed.Tasks.FirstOrDefault ().InputAssets.FirstOrDefault ();  							foreach (var file in subtitlesFiles) {  								string filePath = Path.Combine (System.IO.Path.GetTempPath ()' file.Name);  								if (File.Exists (filePath)) {  									File.Delete (filePath);  								}  								try {  									file.Download (filePath);  									IAssetFile InputAssetFile = inputAsset.AssetFiles.Create (file.Name);  									InputAssetFile.Upload (filePath);  								} catch {  								}  								if (File.Exists (filePath)) {  									File.Delete (filePath);  								}  							}  							myform.BeginInvoke (new Action (() => {  								myform.DoPurgeAssetInfoFromCache (inputAsset);  							}));  						}  						string status = Enum.GetName (typeof(JobState)' JobRefreshed.State).ToLower ();  						myform.BeginInvoke (new Action (() => {  							myform.Notify (string.Format ("Job {0}"' status)' string.Format ("Job {0}"' _MyObservJob [index].Name)' JobRefreshed.State == JobState.Error);  							myform.TextBoxLogWriteLine (string.Format ("Job '{0}' : {1}."' _MyObservJob [index].Name' status)' JobRefreshed.State == JobState.Error);  							if (JobRefreshed.State == JobState.Error) {  								foreach (var task in JobRefreshed.Tasks) {  									foreach (var error in task.ErrorDetails) {  										myform.TextBoxLogWriteLine (string.Format ("Task '{0}'' Error : {1}"' task.Name' error.Code + " : " + error.Message)' true);  									}  								}  							}  							myform.DoRefreshGridAssetV (false);  						}));  						this.BeginInvoke (new Action (() => {  							this.Refresh ();  						}));  					}  				}  			}  		}' token).Result;  	} catch {  		//MessageBox.Show(Program.GetErrorMessage(e)' "Job Monitoring Error");  	}  }' token);  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The following statement contains a magic number: try {  	job = job.StartExecutionProgressTask (JobRefreshIntervalInMilliseconds' j => {  		// Was cancellation already requested?   		if (token.IsCancellationRequested == true) {  			return;  		}  		// refesh context and job  		_context = Program.ConnectAndGetNewContext (_credentials);  		// needed to get overallprogress  		/// NET TO RESTORE CONTEXT  		IJob JobRefreshed = GetJob (j.Id);  		int index = -1;  		foreach (JobEntry je in _MyObservJob)// let's search for index  		 {  			if (je.Id == JobRefreshed.Id) {  				index = _MyObservJob.IndexOf (je);  				break;  			}  		}  		if (index >= 0)// we found it  		 {  			// we update the observation collection  			if (JobRefreshed.State == JobState.Scheduled || JobRefreshed.State == JobState.Processing || JobRefreshed.State == JobState.Queued || JobRefreshed.State == JobState.Canceling)// in progress  			 {  				double progress = JobRefreshed.GetOverallProgress ();  				_MyObservJob [index].Progress = progress;  				_MyObservJob [index].Priority = JobRefreshed.Priority;  				_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null;  				_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null;  				_MyObservJob [index].State = JobRefreshed.State;  				Debug.WriteLine (index.ToString () + JobRefreshed.State);  				StringBuilder sb = new StringBuilder ();  				// display percentage for each task for mouse hover (tooltiptext)  				foreach (ITask task in JobRefreshed.Tasks)  					sb.AppendLine (string.Format ("{0} % ({1})"' Convert.ToInt32 (task.Progress).ToString ()' task.Name));  				// let's calculate the estipated time  				string ETAstr = ""' Durationstr = "";  				if (progress > 3) {  					DateTime startlocaltime = ((DateTime)JobRefreshed.StartTime).ToLocalTime ();  					TimeSpan interval = (TimeSpan)(DateTime.Now - startlocaltime);  					DateTime ETA = DateTime.Now.AddSeconds ((100d / progress - 1d) * interval.TotalSeconds);  					TimeSpan estimatedduration = (TimeSpan)(ETA - startlocaltime);  					ETAstr = "Estimated: " + ETA.ToString ("G");  					Durationstr = "Estimated: " + estimatedduration.ToString (@"d\.hh\:mm\:ss");  					_MyObservJob [index].EndTime = ETA.ToString (@"G") + " ?";  					_MyObservJob [index].Duration = JobRefreshed.EndTime.HasValue ? ((TimeSpan)((DateTime)JobRefreshed.EndTime - (DateTime)JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : estimatedduration.ToString (@"d\.hh\:mm\:ss") + " ?";  				}  				int indexdisplayed = -1;  				foreach (JobEntry je in _MyObservAssethisPage)// let's search for index in the page  				 {  					if (je.Id == JobRefreshed.Id) {  						indexdisplayed = _MyObservAssethisPage.IndexOf (je);  						try {  							this.BeginInvoke (new Action (() => {  								this.Rows [indexdisplayed].Cells [this.Columns ["Progress"].Index].ToolTipText = sb.ToString ();  								// mouse hover info  								if (progress != 0) {  									this.Rows [indexdisplayed].Cells [this.Columns ["EndTime"].Index].ToolTipText = ETAstr;  									// mouse hover info  									this.Rows [indexdisplayed].Cells [this.Columns ["Duration"].Index].ToolTipText = Durationstr;  									// mouse hover info  								}  								this.Refresh ();  							}));  						} catch {  						}  						break;  					}  				}  			} else// no progress anymore (cancelled' finished or failed)  			 {  				double progress = JobRefreshed.GetOverallProgress ();  				_MyObservJob [index].Duration = JobRefreshed.StartTime.HasValue ? ((TimeSpan)(DateTime.UtcNow - JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : null;  				_MyObservJob [index].Progress = 101d;  				// progress;  we don't want the progress bar to be displayed  				_MyObservJob [index].Priority = JobRefreshed.Priority;  				_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null;  				_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null;  				_MyObservJob [index].State = JobRefreshed.State;  				if (_MyListJobsMonitored.ContainsKey (JobRefreshed.Id))// we want to display only one time  				 {  					_MyListJobsMonitored.Remove (JobRefreshed.Id);  					// let's remove from the list of monitored jobs  					Mainform myform = (Mainform)this.FindForm ();  					// For indexer' there is an option to copy subtitles files to input asset  					if (CopySubtitlesToSourceAsset && JobRefreshed.State == JobState.Finished && JobRefreshed.Tasks.Count == 1) {  						var subtitlesFiles = JobRefreshed.Tasks.FirstOrDefault ().OutputAssets.FirstOrDefault ().AssetFiles.ToList ().Where (f => f.Name.EndsWith (".vtt"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ttml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".smi"' StringComparison.OrdinalIgnoreCase));  						var inputAsset = JobRefreshed.Tasks.FirstOrDefault ().InputAssets.FirstOrDefault ();  						foreach (var file in subtitlesFiles) {  							string filePath = Path.Combine (System.IO.Path.GetTempPath ()' file.Name);  							if (File.Exists (filePath)) {  								File.Delete (filePath);  							}  							try {  								file.Download (filePath);  								IAssetFile InputAssetFile = inputAsset.AssetFiles.Create (file.Name);  								InputAssetFile.Upload (filePath);  							} catch {  							}  							if (File.Exists (filePath)) {  								File.Delete (filePath);  							}  						}  						myform.BeginInvoke (new Action (() => {  							myform.DoPurgeAssetInfoFromCache (inputAsset);  						}));  					}  					string status = Enum.GetName (typeof(JobState)' JobRefreshed.State).ToLower ();  					myform.BeginInvoke (new Action (() => {  						myform.Notify (string.Format ("Job {0}"' status)' string.Format ("Job {0}"' _MyObservJob [index].Name)' JobRefreshed.State == JobState.Error);  						myform.TextBoxLogWriteLine (string.Format ("Job '{0}' : {1}."' _MyObservJob [index].Name' status)' JobRefreshed.State == JobState.Error);  						if (JobRefreshed.State == JobState.Error) {  							foreach (var task in JobRefreshed.Tasks) {  								foreach (var error in task.ErrorDetails) {  									myform.TextBoxLogWriteLine (string.Format ("Task '{0}'' Error : {1}"' task.Name' error.Code + " : " + error.Message)' true);  								}  							}  						}  						myform.DoRefreshGridAssetV (false);  					}));  					this.BeginInvoke (new Action (() => {  						this.Refresh ();  					}));  				}  			}  		}  	}' token).Result;  } catch {  	//MessageBox.Show(Program.GetErrorMessage(e)' "Job Monitoring Error");  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The following statement contains a magic number: job = job.StartExecutionProgressTask (JobRefreshIntervalInMilliseconds' j => {  	// Was cancellation already requested?   	if (token.IsCancellationRequested == true) {  		return;  	}  	// refesh context and job  	_context = Program.ConnectAndGetNewContext (_credentials);  	// needed to get overallprogress  	/// NET TO RESTORE CONTEXT  	IJob JobRefreshed = GetJob (j.Id);  	int index = -1;  	foreach (JobEntry je in _MyObservJob)// let's search for index  	 {  		if (je.Id == JobRefreshed.Id) {  			index = _MyObservJob.IndexOf (je);  			break;  		}  	}  	if (index >= 0)// we found it  	 {  		// we update the observation collection  		if (JobRefreshed.State == JobState.Scheduled || JobRefreshed.State == JobState.Processing || JobRefreshed.State == JobState.Queued || JobRefreshed.State == JobState.Canceling)// in progress  		 {  			double progress = JobRefreshed.GetOverallProgress ();  			_MyObservJob [index].Progress = progress;  			_MyObservJob [index].Priority = JobRefreshed.Priority;  			_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null;  			_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null;  			_MyObservJob [index].State = JobRefreshed.State;  			Debug.WriteLine (index.ToString () + JobRefreshed.State);  			StringBuilder sb = new StringBuilder ();  			// display percentage for each task for mouse hover (tooltiptext)  			foreach (ITask task in JobRefreshed.Tasks)  				sb.AppendLine (string.Format ("{0} % ({1})"' Convert.ToInt32 (task.Progress).ToString ()' task.Name));  			// let's calculate the estipated time  			string ETAstr = ""' Durationstr = "";  			if (progress > 3) {  				DateTime startlocaltime = ((DateTime)JobRefreshed.StartTime).ToLocalTime ();  				TimeSpan interval = (TimeSpan)(DateTime.Now - startlocaltime);  				DateTime ETA = DateTime.Now.AddSeconds ((100d / progress - 1d) * interval.TotalSeconds);  				TimeSpan estimatedduration = (TimeSpan)(ETA - startlocaltime);  				ETAstr = "Estimated: " + ETA.ToString ("G");  				Durationstr = "Estimated: " + estimatedduration.ToString (@"d\.hh\:mm\:ss");  				_MyObservJob [index].EndTime = ETA.ToString (@"G") + " ?";  				_MyObservJob [index].Duration = JobRefreshed.EndTime.HasValue ? ((TimeSpan)((DateTime)JobRefreshed.EndTime - (DateTime)JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : estimatedduration.ToString (@"d\.hh\:mm\:ss") + " ?";  			}  			int indexdisplayed = -1;  			foreach (JobEntry je in _MyObservAssethisPage)// let's search for index in the page  			 {  				if (je.Id == JobRefreshed.Id) {  					indexdisplayed = _MyObservAssethisPage.IndexOf (je);  					try {  						this.BeginInvoke (new Action (() => {  							this.Rows [indexdisplayed].Cells [this.Columns ["Progress"].Index].ToolTipText = sb.ToString ();  							// mouse hover info  							if (progress != 0) {  								this.Rows [indexdisplayed].Cells [this.Columns ["EndTime"].Index].ToolTipText = ETAstr;  								// mouse hover info  								this.Rows [indexdisplayed].Cells [this.Columns ["Duration"].Index].ToolTipText = Durationstr;  								// mouse hover info  							}  							this.Refresh ();  						}));  					} catch {  					}  					break;  				}  			}  		} else// no progress anymore (cancelled' finished or failed)  		 {  			double progress = JobRefreshed.GetOverallProgress ();  			_MyObservJob [index].Duration = JobRefreshed.StartTime.HasValue ? ((TimeSpan)(DateTime.UtcNow - JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : null;  			_MyObservJob [index].Progress = 101d;  			// progress;  we don't want the progress bar to be displayed  			_MyObservJob [index].Priority = JobRefreshed.Priority;  			_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null;  			_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null;  			_MyObservJob [index].State = JobRefreshed.State;  			if (_MyListJobsMonitored.ContainsKey (JobRefreshed.Id))// we want to display only one time  			 {  				_MyListJobsMonitored.Remove (JobRefreshed.Id);  				// let's remove from the list of monitored jobs  				Mainform myform = (Mainform)this.FindForm ();  				// For indexer' there is an option to copy subtitles files to input asset  				if (CopySubtitlesToSourceAsset && JobRefreshed.State == JobState.Finished && JobRefreshed.Tasks.Count == 1) {  					var subtitlesFiles = JobRefreshed.Tasks.FirstOrDefault ().OutputAssets.FirstOrDefault ().AssetFiles.ToList ().Where (f => f.Name.EndsWith (".vtt"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ttml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".smi"' StringComparison.OrdinalIgnoreCase));  					var inputAsset = JobRefreshed.Tasks.FirstOrDefault ().InputAssets.FirstOrDefault ();  					foreach (var file in subtitlesFiles) {  						string filePath = Path.Combine (System.IO.Path.GetTempPath ()' file.Name);  						if (File.Exists (filePath)) {  							File.Delete (filePath);  						}  						try {  							file.Download (filePath);  							IAssetFile InputAssetFile = inputAsset.AssetFiles.Create (file.Name);  							InputAssetFile.Upload (filePath);  						} catch {  						}  						if (File.Exists (filePath)) {  							File.Delete (filePath);  						}  					}  					myform.BeginInvoke (new Action (() => {  						myform.DoPurgeAssetInfoFromCache (inputAsset);  					}));  				}  				string status = Enum.GetName (typeof(JobState)' JobRefreshed.State).ToLower ();  				myform.BeginInvoke (new Action (() => {  					myform.Notify (string.Format ("Job {0}"' status)' string.Format ("Job {0}"' _MyObservJob [index].Name)' JobRefreshed.State == JobState.Error);  					myform.TextBoxLogWriteLine (string.Format ("Job '{0}' : {1}."' _MyObservJob [index].Name' status)' JobRefreshed.State == JobState.Error);  					if (JobRefreshed.State == JobState.Error) {  						foreach (var task in JobRefreshed.Tasks) {  							foreach (var error in task.ErrorDetails) {  								myform.TextBoxLogWriteLine (string.Format ("Task '{0}'' Error : {1}"' task.Name' error.Code + " : " + error.Message)' true);  							}  						}  					}  					myform.DoRefreshGridAssetV (false);  				}));  				this.BeginInvoke (new Action (() => {  					this.Refresh ();  				}));  			}  		}  	}  }' token).Result;  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The following statement contains a magic number: if (index >= 0)// we found it   {  	// we update the observation collection  	if (JobRefreshed.State == JobState.Scheduled || JobRefreshed.State == JobState.Processing || JobRefreshed.State == JobState.Queued || JobRefreshed.State == JobState.Canceling)// in progress  	 {  		double progress = JobRefreshed.GetOverallProgress ();  		_MyObservJob [index].Progress = progress;  		_MyObservJob [index].Priority = JobRefreshed.Priority;  		_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null;  		_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null;  		_MyObservJob [index].State = JobRefreshed.State;  		Debug.WriteLine (index.ToString () + JobRefreshed.State);  		StringBuilder sb = new StringBuilder ();  		// display percentage for each task for mouse hover (tooltiptext)  		foreach (ITask task in JobRefreshed.Tasks)  			sb.AppendLine (string.Format ("{0} % ({1})"' Convert.ToInt32 (task.Progress).ToString ()' task.Name));  		// let's calculate the estipated time  		string ETAstr = ""' Durationstr = "";  		if (progress > 3) {  			DateTime startlocaltime = ((DateTime)JobRefreshed.StartTime).ToLocalTime ();  			TimeSpan interval = (TimeSpan)(DateTime.Now - startlocaltime);  			DateTime ETA = DateTime.Now.AddSeconds ((100d / progress - 1d) * interval.TotalSeconds);  			TimeSpan estimatedduration = (TimeSpan)(ETA - startlocaltime);  			ETAstr = "Estimated: " + ETA.ToString ("G");  			Durationstr = "Estimated: " + estimatedduration.ToString (@"d\.hh\:mm\:ss");  			_MyObservJob [index].EndTime = ETA.ToString (@"G") + " ?";  			_MyObservJob [index].Duration = JobRefreshed.EndTime.HasValue ? ((TimeSpan)((DateTime)JobRefreshed.EndTime - (DateTime)JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : estimatedduration.ToString (@"d\.hh\:mm\:ss") + " ?";  		}  		int indexdisplayed = -1;  		foreach (JobEntry je in _MyObservAssethisPage)// let's search for index in the page  		 {  			if (je.Id == JobRefreshed.Id) {  				indexdisplayed = _MyObservAssethisPage.IndexOf (je);  				try {  					this.BeginInvoke (new Action (() => {  						this.Rows [indexdisplayed].Cells [this.Columns ["Progress"].Index].ToolTipText = sb.ToString ();  						// mouse hover info  						if (progress != 0) {  							this.Rows [indexdisplayed].Cells [this.Columns ["EndTime"].Index].ToolTipText = ETAstr;  							// mouse hover info  							this.Rows [indexdisplayed].Cells [this.Columns ["Duration"].Index].ToolTipText = Durationstr;  							// mouse hover info  						}  						this.Refresh ();  					}));  				} catch {  				}  				break;  			}  		}  	} else// no progress anymore (cancelled' finished or failed)  	 {  		double progress = JobRefreshed.GetOverallProgress ();  		_MyObservJob [index].Duration = JobRefreshed.StartTime.HasValue ? ((TimeSpan)(DateTime.UtcNow - JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : null;  		_MyObservJob [index].Progress = 101d;  		// progress;  we don't want the progress bar to be displayed  		_MyObservJob [index].Priority = JobRefreshed.Priority;  		_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null;  		_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null;  		_MyObservJob [index].State = JobRefreshed.State;  		if (_MyListJobsMonitored.ContainsKey (JobRefreshed.Id))// we want to display only one time  		 {  			_MyListJobsMonitored.Remove (JobRefreshed.Id);  			// let's remove from the list of monitored jobs  			Mainform myform = (Mainform)this.FindForm ();  			// For indexer' there is an option to copy subtitles files to input asset  			if (CopySubtitlesToSourceAsset && JobRefreshed.State == JobState.Finished && JobRefreshed.Tasks.Count == 1) {  				var subtitlesFiles = JobRefreshed.Tasks.FirstOrDefault ().OutputAssets.FirstOrDefault ().AssetFiles.ToList ().Where (f => f.Name.EndsWith (".vtt"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ttml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".smi"' StringComparison.OrdinalIgnoreCase));  				var inputAsset = JobRefreshed.Tasks.FirstOrDefault ().InputAssets.FirstOrDefault ();  				foreach (var file in subtitlesFiles) {  					string filePath = Path.Combine (System.IO.Path.GetTempPath ()' file.Name);  					if (File.Exists (filePath)) {  						File.Delete (filePath);  					}  					try {  						file.Download (filePath);  						IAssetFile InputAssetFile = inputAsset.AssetFiles.Create (file.Name);  						InputAssetFile.Upload (filePath);  					} catch {  					}  					if (File.Exists (filePath)) {  						File.Delete (filePath);  					}  				}  				myform.BeginInvoke (new Action (() => {  					myform.DoPurgeAssetInfoFromCache (inputAsset);  				}));  			}  			string status = Enum.GetName (typeof(JobState)' JobRefreshed.State).ToLower ();  			myform.BeginInvoke (new Action (() => {  				myform.Notify (string.Format ("Job {0}"' status)' string.Format ("Job {0}"' _MyObservJob [index].Name)' JobRefreshed.State == JobState.Error);  				myform.TextBoxLogWriteLine (string.Format ("Job '{0}' : {1}."' _MyObservJob [index].Name' status)' JobRefreshed.State == JobState.Error);  				if (JobRefreshed.State == JobState.Error) {  					foreach (var task in JobRefreshed.Tasks) {  						foreach (var error in task.ErrorDetails) {  							myform.TextBoxLogWriteLine (string.Format ("Task '{0}'' Error : {1}"' task.Name' error.Code + " : " + error.Message)' true);  						}  					}  				}  				myform.DoRefreshGridAssetV (false);  			}));  			this.BeginInvoke (new Action (() => {  				this.Refresh ();  			}));  		}  	}  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The following statement contains a magic number: if (JobRefreshed.State == JobState.Scheduled || JobRefreshed.State == JobState.Processing || JobRefreshed.State == JobState.Queued || JobRefreshed.State == JobState.Canceling)// in progress   {  	double progress = JobRefreshed.GetOverallProgress ();  	_MyObservJob [index].Progress = progress;  	_MyObservJob [index].Priority = JobRefreshed.Priority;  	_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null;  	_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null;  	_MyObservJob [index].State = JobRefreshed.State;  	Debug.WriteLine (index.ToString () + JobRefreshed.State);  	StringBuilder sb = new StringBuilder ();  	// display percentage for each task for mouse hover (tooltiptext)  	foreach (ITask task in JobRefreshed.Tasks)  		sb.AppendLine (string.Format ("{0} % ({1})"' Convert.ToInt32 (task.Progress).ToString ()' task.Name));  	// let's calculate the estipated time  	string ETAstr = ""' Durationstr = "";  	if (progress > 3) {  		DateTime startlocaltime = ((DateTime)JobRefreshed.StartTime).ToLocalTime ();  		TimeSpan interval = (TimeSpan)(DateTime.Now - startlocaltime);  		DateTime ETA = DateTime.Now.AddSeconds ((100d / progress - 1d) * interval.TotalSeconds);  		TimeSpan estimatedduration = (TimeSpan)(ETA - startlocaltime);  		ETAstr = "Estimated: " + ETA.ToString ("G");  		Durationstr = "Estimated: " + estimatedduration.ToString (@"d\.hh\:mm\:ss");  		_MyObservJob [index].EndTime = ETA.ToString (@"G") + " ?";  		_MyObservJob [index].Duration = JobRefreshed.EndTime.HasValue ? ((TimeSpan)((DateTime)JobRefreshed.EndTime - (DateTime)JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : estimatedduration.ToString (@"d\.hh\:mm\:ss") + " ?";  	}  	int indexdisplayed = -1;  	foreach (JobEntry je in _MyObservAssethisPage)// let's search for index in the page  	 {  		if (je.Id == JobRefreshed.Id) {  			indexdisplayed = _MyObservAssethisPage.IndexOf (je);  			try {  				this.BeginInvoke (new Action (() => {  					this.Rows [indexdisplayed].Cells [this.Columns ["Progress"].Index].ToolTipText = sb.ToString ();  					// mouse hover info  					if (progress != 0) {  						this.Rows [indexdisplayed].Cells [this.Columns ["EndTime"].Index].ToolTipText = ETAstr;  						// mouse hover info  						this.Rows [indexdisplayed].Cells [this.Columns ["Duration"].Index].ToolTipText = Durationstr;  						// mouse hover info  					}  					this.Refresh ();  				}));  			} catch {  			}  			break;  		}  	}  } else// no progress anymore (cancelled' finished or failed)   {  	double progress = JobRefreshed.GetOverallProgress ();  	_MyObservJob [index].Duration = JobRefreshed.StartTime.HasValue ? ((TimeSpan)(DateTime.UtcNow - JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : null;  	_MyObservJob [index].Progress = 101d;  	// progress;  we don't want the progress bar to be displayed  	_MyObservJob [index].Priority = JobRefreshed.Priority;  	_MyObservJob [index].StartTime = JobRefreshed.StartTime.HasValue ? ((DateTime)JobRefreshed.StartTime).ToLocalTime ().ToString ("G") : null;  	_MyObservJob [index].EndTime = JobRefreshed.EndTime.HasValue ? ((DateTime)JobRefreshed.EndTime).ToLocalTime ().ToString ("G") : null;  	_MyObservJob [index].State = JobRefreshed.State;  	if (_MyListJobsMonitored.ContainsKey (JobRefreshed.Id))// we want to display only one time  	 {  		_MyListJobsMonitored.Remove (JobRefreshed.Id);  		// let's remove from the list of monitored jobs  		Mainform myform = (Mainform)this.FindForm ();  		// For indexer' there is an option to copy subtitles files to input asset  		if (CopySubtitlesToSourceAsset && JobRefreshed.State == JobState.Finished && JobRefreshed.Tasks.Count == 1) {  			var subtitlesFiles = JobRefreshed.Tasks.FirstOrDefault ().OutputAssets.FirstOrDefault ().AssetFiles.ToList ().Where (f => f.Name.EndsWith (".vtt"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ttml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".smi"' StringComparison.OrdinalIgnoreCase));  			var inputAsset = JobRefreshed.Tasks.FirstOrDefault ().InputAssets.FirstOrDefault ();  			foreach (var file in subtitlesFiles) {  				string filePath = Path.Combine (System.IO.Path.GetTempPath ()' file.Name);  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  				try {  					file.Download (filePath);  					IAssetFile InputAssetFile = inputAsset.AssetFiles.Create (file.Name);  					InputAssetFile.Upload (filePath);  				} catch {  				}  				if (File.Exists (filePath)) {  					File.Delete (filePath);  				}  			}  			myform.BeginInvoke (new Action (() => {  				myform.DoPurgeAssetInfoFromCache (inputAsset);  			}));  		}  		string status = Enum.GetName (typeof(JobState)' JobRefreshed.State).ToLower ();  		myform.BeginInvoke (new Action (() => {  			myform.Notify (string.Format ("Job {0}"' status)' string.Format ("Job {0}"' _MyObservJob [index].Name)' JobRefreshed.State == JobState.Error);  			myform.TextBoxLogWriteLine (string.Format ("Job '{0}' : {1}."' _MyObservJob [index].Name' status)' JobRefreshed.State == JobState.Error);  			if (JobRefreshed.State == JobState.Error) {  				foreach (var task in JobRefreshed.Tasks) {  					foreach (var error in task.ErrorDetails) {  						myform.TextBoxLogWriteLine (string.Format ("Task '{0}'' Error : {1}"' task.Name' error.Code + " : " + error.Message)' true);  					}  				}  			}  			myform.DoRefreshGridAssetV (false);  		}));  		this.BeginInvoke (new Action (() => {  			this.Refresh ();  		}));  	}  }  
Magic Number,AMSExplorer,DataGridViewJobs,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Mainform.cs,DoJobProgress,The following statement contains a magic number: if (progress > 3) {  	DateTime startlocaltime = ((DateTime)JobRefreshed.StartTime).ToLocalTime ();  	TimeSpan interval = (TimeSpan)(DateTime.Now - startlocaltime);  	DateTime ETA = DateTime.Now.AddSeconds ((100d / progress - 1d) * interval.TotalSeconds);  	TimeSpan estimatedduration = (TimeSpan)(ETA - startlocaltime);  	ETAstr = "Estimated: " + ETA.ToString ("G");  	Durationstr = "Estimated: " + estimatedduration.ToString (@"d\.hh\:mm\:ss");  	_MyObservJob [index].EndTime = ETA.ToString (@"G") + " ?";  	_MyObservJob [index].Duration = JobRefreshed.EndTime.HasValue ? ((TimeSpan)((DateTime)JobRefreshed.EndTime - (DateTime)JobRefreshed.StartTime)).ToString (@"d\.hh\:mm\:ss") : estimatedduration.ToString (@"d\.hh\:mm\:ss") + " ?";  }  
Magic Number,AMSExplorer,PlayReadyStaticEnc,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\PlayReadyStaticEnc.cs,buttongenerateContentKey_Click,The following statement contains a magic number: textBoxcontentkey.Text = Convert.ToBase64String (DynamicEncryption.GetRandomBuffer (16));  
Magic Number,AMSExplorer,PlayReadyStaticEnc,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\PlayReadyStaticEnc.cs,buttonAzureSettings_Click,The following statement contains a magic number: textBoxcontentkey.Text = Convert.ToBase64String (DynamicEncryption.GetRandomBuffer (16));  
Magic Number,AMSExplorer,Priority,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Priority.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownPriority.Value = new decimal (new int[] {  	10'  	0'  	0'  	0  });  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,dataGridViewV_Resize,The following statement contains a magic number: if (indexname != -1) {  	grid.Columns [indexname].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;  	int colw = Math.Max (grid.Columns [indexname].Width' 100);  	grid.Columns [indexname].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  	grid.Columns [indexname].Width = colw;  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,MakeRed,The following statement contains a magic number: for (int i = 0; i < original.Width; i++) {  	for (int j = 0; j < original.Height; j++) {  		//get the pixel from the original image  		Color originalColor = original.GetPixel (i' j);  		//set the new image's pixel to the grayscale version  		newBitmap.SetPixel (i' j' Color.FromArgb (originalColor.A' 255' originalColor.G' originalColor.B));  	}  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,MakeRed,The following statement contains a magic number: for (int j = 0; j < original.Height; j++) {  	//get the pixel from the original image  	Color originalColor = original.GetPixel (i' j);  	//set the new image's pixel to the grayscale version  	newBitmap.SetPixel (i' j' Color.FromArgb (originalColor.A' 255' originalColor.G' originalColor.B));  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,MakeRed,The following statement contains a magic number: newBitmap.SetPixel (i' j' Color.FromArgb (originalColor.A' 255' originalColor.G' originalColor.B));  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,MakeBlue,The following statement contains a magic number: for (int i = 0; i < original.Width; i++) {  	for (int j = 0; j < original.Height; j++) {  		//get the pixel from the original image  		Color originalColor = original.GetPixel (i' j);  		//set the new image's pixel to the grayscale version  		newBitmap.SetPixel (i' j' Color.FromArgb (originalColor.A' originalColor.R' originalColor.G' 255));  	}  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,MakeBlue,The following statement contains a magic number: for (int j = 0; j < original.Height; j++) {  	//get the pixel from the original image  	Color originalColor = original.GetPixel (i' j);  	//set the new image's pixel to the grayscale version  	newBitmap.SetPixel (i' j' Color.FromArgb (originalColor.A' originalColor.R' originalColor.G' 255));  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,MakeBlue,The following statement contains a magic number: newBitmap.SetPixel (i' j' Color.FromArgb (originalColor.A' originalColor.R' originalColor.G' 255));  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: label.SetBounds (9' 20' 372' 13);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: label.SetBounds (9' 20' 372' 13);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: label.SetBounds (9' 20' 372' 13);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: label.SetBounds (9' 20' 372' 13);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: textBox.SetBounds (12' 36' 372' 20);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: textBox.SetBounds (12' 36' 372' 20);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: textBox.SetBounds (12' 36' 372' 20);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: textBox.SetBounds (12' 36' 372' 20);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: buttonOk.SetBounds (228' 72' 75' 23);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: buttonOk.SetBounds (228' 72' 75' 23);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: buttonOk.SetBounds (228' 72' 75' 23);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: buttonOk.SetBounds (228' 72' 75' 23);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: buttonCancel.SetBounds (309' 72' 75' 23);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: buttonCancel.SetBounds (309' 72' 75' 23);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: buttonCancel.SetBounds (309' 72' 75' 23);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: buttonCancel.SetBounds (309' 72' 75' 23);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: form.ClientSize = new Size (Math.Max (300' label.Right + 10)' form.ClientSize.Height);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,InputBox,The following statement contains a magic number: form.ClientSize = new Size (Math.Max (300' label.Right + 10)' form.ClientSize.Height);  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: if (browserVersion < 7) {  	throw new ApplicationException ("Unsupported version of Microsoft Internet Explorer!");  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: switch (browserVersion) {  case 7:  	mode = 7000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode.   	break;  case 8:  	mode = 8000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode.   	break;  case 9:  	mode = 9000;  	// Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode.                      	break;  case 10:  	mode = 10000;  	// Internet Explorer 10.  	break;  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: switch (browserVersion) {  case 7:  	mode = 7000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode.   	break;  case 8:  	mode = 8000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode.   	break;  case 9:  	mode = 9000;  	// Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode.                      	break;  case 10:  	mode = 10000;  	// Internet Explorer 10.  	break;  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: switch (browserVersion) {  case 7:  	mode = 7000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode.   	break;  case 8:  	mode = 8000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode.   	break;  case 9:  	mode = 9000;  	// Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode.                      	break;  case 10:  	mode = 10000;  	// Internet Explorer 10.  	break;  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: switch (browserVersion) {  case 7:  	mode = 7000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode.   	break;  case 8:  	mode = 8000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode.   	break;  case 9:  	mode = 9000;  	// Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode.                      	break;  case 10:  	mode = 10000;  	// Internet Explorer 10.  	break;  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: switch (browserVersion) {  case 7:  	mode = 7000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode.   	break;  case 8:  	mode = 8000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode.   	break;  case 9:  	mode = 9000;  	// Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode.                      	break;  case 10:  	mode = 10000;  	// Internet Explorer 10.  	break;  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: switch (browserVersion) {  case 7:  	mode = 7000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode.   	break;  case 8:  	mode = 8000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode.   	break;  case 9:  	mode = 9000;  	// Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode.                      	break;  case 10:  	mode = 10000;  	// Internet Explorer 10.  	break;  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: switch (browserVersion) {  case 7:  	mode = 7000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode.   	break;  case 8:  	mode = 8000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode.   	break;  case 9:  	mode = 9000;  	// Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode.                      	break;  case 10:  	mode = 10000;  	// Internet Explorer 10.  	break;  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: switch (browserVersion) {  case 7:  	mode = 7000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode.   	break;  case 8:  	mode = 8000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode.   	break;  case 9:  	mode = 9000;  	// Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode.                      	break;  case 10:  	mode = 10000;  	// Internet Explorer 10.  	break;  }  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: mode = 7000;  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: mode = 8000;  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: mode = 9000;  
Magic Number,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following statement contains a magic number: mode = 10000;  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (task.State == JobState.Finished) {  	lSizeinput = JobInfo.GetInputFilesSize (task);  	lSizeoutput = JobInfo.GetOutputFilesSize (task);  	if (lSizeinput != -1 && lSizeoutput != -1) {  		double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  		double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  		if (processor != null) {  			switch (processor.Name) {  			case (Constants.AzureMediaEncoder):  			case (Constants.AzureMediaEncoderStandard):  				// AME or Media Standard Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  				break;  			case (Constants.AzureMediaEncoderPremiumWorkflow):  				// Premium Workflow Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  				break;  			case (MediaProcessorNames.StorageDecryption):  			case (MediaProcessorNames.WindowsAzureMediaEncryptor):  			case (MediaProcessorNames.WindowsAzureMediaPackager):  				// No cost  				pricetask = 0;  				break;  			case (Constants.AzureMediaIndexer):  				// Indexing task  				// TO DO: GET DURATION OF CONTENT  				//pricetask = ?  				break;  			case (Constants.AzureMediaHyperlapse):  				// Hyperlapse task  				// TO DO when final cost   				//pricetask = ?  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (task.State == JobState.Finished) {  	lSizeinput = JobInfo.GetInputFilesSize (task);  	lSizeoutput = JobInfo.GetOutputFilesSize (task);  	if (lSizeinput != -1 && lSizeoutput != -1) {  		double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  		double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  		if (processor != null) {  			switch (processor.Name) {  			case (Constants.AzureMediaEncoder):  			case (Constants.AzureMediaEncoderStandard):  				// AME or Media Standard Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  				break;  			case (Constants.AzureMediaEncoderPremiumWorkflow):  				// Premium Workflow Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  				break;  			case (MediaProcessorNames.StorageDecryption):  			case (MediaProcessorNames.WindowsAzureMediaEncryptor):  			case (MediaProcessorNames.WindowsAzureMediaPackager):  				// No cost  				pricetask = 0;  				break;  			case (Constants.AzureMediaIndexer):  				// Indexing task  				// TO DO: GET DURATION OF CONTENT  				//pricetask = ?  				break;  			case (Constants.AzureMediaHyperlapse):  				// Hyperlapse task  				// TO DO when final cost   				//pricetask = ?  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (task.State == JobState.Finished) {  	lSizeinput = JobInfo.GetInputFilesSize (task);  	lSizeoutput = JobInfo.GetOutputFilesSize (task);  	if (lSizeinput != -1 && lSizeoutput != -1) {  		double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  		double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  		if (processor != null) {  			switch (processor.Name) {  			case (Constants.AzureMediaEncoder):  			case (Constants.AzureMediaEncoderStandard):  				// AME or Media Standard Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  				break;  			case (Constants.AzureMediaEncoderPremiumWorkflow):  				// Premium Workflow Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  				break;  			case (MediaProcessorNames.StorageDecryption):  			case (MediaProcessorNames.WindowsAzureMediaEncryptor):  			case (MediaProcessorNames.WindowsAzureMediaPackager):  				// No cost  				pricetask = 0;  				break;  			case (Constants.AzureMediaIndexer):  				// Indexing task  				// TO DO: GET DURATION OF CONTENT  				//pricetask = ?  				break;  			case (Constants.AzureMediaHyperlapse):  				// Hyperlapse task  				// TO DO when final cost   				//pricetask = ?  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (task.State == JobState.Finished) {  	lSizeinput = JobInfo.GetInputFilesSize (task);  	lSizeoutput = JobInfo.GetOutputFilesSize (task);  	if (lSizeinput != -1 && lSizeoutput != -1) {  		double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  		double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  		if (processor != null) {  			switch (processor.Name) {  			case (Constants.AzureMediaEncoder):  			case (Constants.AzureMediaEncoderStandard):  				// AME or Media Standard Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  				break;  			case (Constants.AzureMediaEncoderPremiumWorkflow):  				// Premium Workflow Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  				break;  			case (MediaProcessorNames.StorageDecryption):  			case (MediaProcessorNames.WindowsAzureMediaEncryptor):  			case (MediaProcessorNames.WindowsAzureMediaPackager):  				// No cost  				pricetask = 0;  				break;  			case (Constants.AzureMediaIndexer):  				// Indexing task  				// TO DO: GET DURATION OF CONTENT  				//pricetask = ?  				break;  			case (Constants.AzureMediaHyperlapse):  				// Hyperlapse task  				// TO DO when final cost   				//pricetask = ?  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (task.State == JobState.Finished) {  	lSizeinput = JobInfo.GetInputFilesSize (task);  	lSizeoutput = JobInfo.GetOutputFilesSize (task);  	if (lSizeinput != -1 && lSizeoutput != -1) {  		double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  		double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  		if (processor != null) {  			switch (processor.Name) {  			case (Constants.AzureMediaEncoder):  			case (Constants.AzureMediaEncoderStandard):  				// AME or Media Standard Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  				break;  			case (Constants.AzureMediaEncoderPremiumWorkflow):  				// Premium Workflow Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  				break;  			case (MediaProcessorNames.StorageDecryption):  			case (MediaProcessorNames.WindowsAzureMediaEncryptor):  			case (MediaProcessorNames.WindowsAzureMediaPackager):  				// No cost  				pricetask = 0;  				break;  			case (Constants.AzureMediaIndexer):  				// Indexing task  				// TO DO: GET DURATION OF CONTENT  				//pricetask = ?  				break;  			case (Constants.AzureMediaHyperlapse):  				// Hyperlapse task  				// TO DO when final cost   				//pricetask = ?  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (task.State == JobState.Finished) {  	lSizeinput = JobInfo.GetInputFilesSize (task);  	lSizeoutput = JobInfo.GetOutputFilesSize (task);  	if (lSizeinput != -1 && lSizeoutput != -1) {  		double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  		double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  		if (processor != null) {  			switch (processor.Name) {  			case (Constants.AzureMediaEncoder):  			case (Constants.AzureMediaEncoderStandard):  				// AME or Media Standard Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  				break;  			case (Constants.AzureMediaEncoderPremiumWorkflow):  				// Premium Workflow Encoding task  				//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  				break;  			case (MediaProcessorNames.StorageDecryption):  			case (MediaProcessorNames.WindowsAzureMediaEncryptor):  			case (MediaProcessorNames.WindowsAzureMediaPackager):  				// No cost  				pricetask = 0;  				break;  			case (Constants.AzureMediaIndexer):  				// Indexing task  				// TO DO: GET DURATION OF CONTENT  				//pricetask = ?  				break;  			case (Constants.AzureMediaHyperlapse):  				// Hyperlapse task  				// TO DO when final cost   				//pricetask = ?  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (lSizeinput != -1 && lSizeoutput != -1) {  	double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  	double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  	if (processor != null) {  		switch (processor.Name) {  		case (Constants.AzureMediaEncoder):  		case (Constants.AzureMediaEncoderStandard):  			// AME or Media Standard Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  			break;  		case (Constants.AzureMediaEncoderPremiumWorkflow):  			// Premium Workflow Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  			break;  		case (MediaProcessorNames.StorageDecryption):  		case (MediaProcessorNames.WindowsAzureMediaEncryptor):  		case (MediaProcessorNames.WindowsAzureMediaPackager):  			// No cost  			pricetask = 0;  			break;  		case (Constants.AzureMediaIndexer):  			// Indexing task  			// TO DO: GET DURATION OF CONTENT  			//pricetask = ?  			break;  		case (Constants.AzureMediaHyperlapse):  			// Hyperlapse task  			// TO DO when final cost   			//pricetask = ?  			break;  		default:  			break;  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (lSizeinput != -1 && lSizeoutput != -1) {  	double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  	double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  	if (processor != null) {  		switch (processor.Name) {  		case (Constants.AzureMediaEncoder):  		case (Constants.AzureMediaEncoderStandard):  			// AME or Media Standard Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  			break;  		case (Constants.AzureMediaEncoderPremiumWorkflow):  			// Premium Workflow Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  			break;  		case (MediaProcessorNames.StorageDecryption):  		case (MediaProcessorNames.WindowsAzureMediaEncryptor):  		case (MediaProcessorNames.WindowsAzureMediaPackager):  			// No cost  			pricetask = 0;  			break;  		case (Constants.AzureMediaIndexer):  			// Indexing task  			// TO DO: GET DURATION OF CONTENT  			//pricetask = ?  			break;  		case (Constants.AzureMediaHyperlapse):  			// Hyperlapse task  			// TO DO when final cost   			//pricetask = ?  			break;  		default:  			break;  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (lSizeinput != -1 && lSizeoutput != -1) {  	double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  	double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  	if (processor != null) {  		switch (processor.Name) {  		case (Constants.AzureMediaEncoder):  		case (Constants.AzureMediaEncoderStandard):  			// AME or Media Standard Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  			break;  		case (Constants.AzureMediaEncoderPremiumWorkflow):  			// Premium Workflow Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  			break;  		case (MediaProcessorNames.StorageDecryption):  		case (MediaProcessorNames.WindowsAzureMediaEncryptor):  		case (MediaProcessorNames.WindowsAzureMediaPackager):  			// No cost  			pricetask = 0;  			break;  		case (Constants.AzureMediaIndexer):  			// Indexing task  			// TO DO: GET DURATION OF CONTENT  			//pricetask = ?  			break;  		case (Constants.AzureMediaHyperlapse):  			// Hyperlapse task  			// TO DO when final cost   			//pricetask = ?  			break;  		default:  			break;  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (lSizeinput != -1 && lSizeoutput != -1) {  	double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  	double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  	if (processor != null) {  		switch (processor.Name) {  		case (Constants.AzureMediaEncoder):  		case (Constants.AzureMediaEncoderStandard):  			// AME or Media Standard Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  			break;  		case (Constants.AzureMediaEncoderPremiumWorkflow):  			// Premium Workflow Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  			break;  		case (MediaProcessorNames.StorageDecryption):  		case (MediaProcessorNames.WindowsAzureMediaEncryptor):  		case (MediaProcessorNames.WindowsAzureMediaPackager):  			// No cost  			pricetask = 0;  			break;  		case (Constants.AzureMediaIndexer):  			// Indexing task  			// TO DO: GET DURATION OF CONTENT  			//pricetask = ?  			break;  		case (Constants.AzureMediaHyperlapse):  			// Hyperlapse task  			// TO DO when final cost   			//pricetask = ?  			break;  		default:  			break;  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (lSizeinput != -1 && lSizeoutput != -1) {  	double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  	double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  	if (processor != null) {  		switch (processor.Name) {  		case (Constants.AzureMediaEncoder):  		case (Constants.AzureMediaEncoderStandard):  			// AME or Media Standard Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  			break;  		case (Constants.AzureMediaEncoderPremiumWorkflow):  			// Premium Workflow Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  			break;  		case (MediaProcessorNames.StorageDecryption):  		case (MediaProcessorNames.WindowsAzureMediaEncryptor):  		case (MediaProcessorNames.WindowsAzureMediaPackager):  			// No cost  			pricetask = 0;  			break;  		case (Constants.AzureMediaIndexer):  			// Indexing task  			// TO DO: GET DURATION OF CONTENT  			//pricetask = ?  			break;  		case (Constants.AzureMediaHyperlapse):  			// Hyperlapse task  			// TO DO when final cost   			//pricetask = ?  			break;  		default:  			break;  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,CalculateTaskSizeAndPrice,The following statement contains a magic number: if (lSizeinput != -1 && lSizeoutput != -1) {  	double lsizeinputprocessed = (double)lSizeinput / (1024 * 1024 * 1024);  	double lsizeoutputprocessed = (double)lSizeoutput / (1024 * 1024 * 1024);  	if (processor != null) {  		switch (processor.Name) {  		case (Constants.AzureMediaEncoder):  		case (Constants.AzureMediaEncoderStandard):  			// AME or Media Standard Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.AMEPrice;  			break;  		case (Constants.AzureMediaEncoderPremiumWorkflow):  			// Premium Workflow Encoding task  			//pricetask = lsizeoutputprocessed * (double)Properties.Settings.Default.MEPremiumWorkflowPrice;  			break;  		case (MediaProcessorNames.StorageDecryption):  		case (MediaProcessorNames.WindowsAzureMediaEncryptor):  		case (MediaProcessorNames.WindowsAzureMediaPackager):  			// No cost  			pricetask = 0;  			break;  		case (Constants.AzureMediaIndexer):  			// Indexing task  			// TO DO: GET DURATION OF CONTENT  			//pricetask = ?  			break;  		case (Constants.AzureMediaHyperlapse):  			// Hyperlapse task  			// TO DO when final cost   			//pricetask = ?  			break;  		default:  			break;  		}  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: if (SelectedJobs.Count > 0) {  	// Job Stats  	sb.AppendLine (section);  	foreach (IJob theJob in SelectedJobs) {  		sb.AppendLine (" START OF JOB REPORT");  		sb.AppendLine (section);  		sb.AppendLine ("");  		sb.AppendLine ("Job Name            : " + theJob.Name);  		sb.AppendLine ("Job ID              : " + theJob.Id);  		sb.AppendLine ("Job State           : " + theJob.State);  		sb.AppendLine ("Job Priority        : " + theJob.Priority);  		sb.AppendLine ("Job Template Id     : " + theJob.TemplateId);  		sb.AppendLine ("Job Created (UTC)   : " + theJob.Created.ToLongDateString () + " " + theJob.Created.ToLongTimeString ());  		if (theJob.StartTime != null)  			sb.AppendLine ("Job StartTime (UTC) : " + theJob.StartTime.Value.ToLongDateString () + " " + theJob.StartTime.Value.ToLongTimeString ());  		if (theJob.EndTime != null)  			sb.AppendLine ("Job EndTime (UTC)   : " + theJob.EndTime.Value.ToLongDateString () + " " + theJob.EndTime.Value.ToLongTimeString ());  		TimeSpan ts = theJob.RunningDuration;  		string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Job CPU runtime     : " + elapsedTime);  		if ((theJob.StartTime != null) && (theJob.EndTime != null)) {  			ts = ((DateTime)theJob.EndTime).Subtract ((DateTime)theJob.StartTime);  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Job Duration        : " + elapsedTime);  		}  		sb.AppendLine ("Number of tasks     : " + theJob.Tasks.Count);  		sb.AppendLine ("Media Account       : " + theJob.GetMediaContext ().Credentials.ClientId);  		sb.AppendLine ("");  		sb.AppendLine (section);  		foreach (ITask task in theJob.Tasks) {  			sb.AppendLine ("Task Name           : " + task.Name);  			sb.AppendLine (section);  			sb.AppendLine ("");  			sb.AppendLine ("Task ID             : " + task.Id);  			sb.AppendLine ("Task Priority       : " + task.Priority);  			sb.AppendLine ("Task State          : " + task.State);  			sb.AppendLine ("Task Options        : " + task.Options);  			sb.AppendLine ("Media Processor     : " + task.MediaProcessorId);  			IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ());  			if (processor != null)  				sb.AppendLine ("Media Processor Name: " + processor.Name);  			if (task.StartTime != null)  				// If not in queued state  				sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ());  			if (task.EndTime != null)  				// If not completed yet  				sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ());  			ts = task.RunningDuration;  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Task CPU runtime    : " + elapsedTime);  			if ((task.StartTime != null) && (task.EndTime != null)) {  				ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  				elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  				sb.AppendLine ("Task Duration       : " + elapsedTime);  			}  			sb.AppendLine ("Task PerfMessage    : " + task.PerfMessage);  			sb.AppendLine ("Task Progress       : " + task.Progress);  			// Task historical event?  			foreach (TaskHistoricalEvent thEvent in task.HistoricalEvents) {  				sb.AppendLine (thEvent.TimeStamp.ToLongTimeString () + " :-  " + thEvent.Message);  			}  			sb.AppendLine ("");  			sb.AppendLine ("Task Body           : ");  			sb.AppendLine ("=====================");  			sb.AppendLine (task.TaskBody);  			sb.AppendLine ("");  			sb.AppendLine ("Task Configuration  : ");  			sb.AppendLine ("=====================");  			if (task.Options == TaskOptions.None) {  				sb.AppendLine (task.Configuration);  			} else {  				sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)");  			}  			sb.AppendLine ("");  			sb.AppendLine ("Input Assets        :");  			sb.AppendLine ("=====================");  			sb.AppendLine ("");  			try {  				foreach (IAsset asset in task.InputAssets) {  					if (asset.State == AssetState.Deleted) {  						sb.AppendLine ("Asset Deleted");  					} else {  						ListAssetInfo (asset' ref sb);  						sb.AppendLine ("");  						ListFilesInAsset (asset' ref sb);  					}  				}  			} catch {  				sb.AppendLine ("Asset(s) error. Deleted?");  			}  			sb.AppendLine ("");  			sb.AppendLine ("Output Assets       :");  			sb.AppendLine ("=====================");  			sb.AppendLine ("");  			try {  				foreach (IAsset asset in task.OutputAssets) {  					if (asset.State == AssetState.Deleted) {  						sb.AppendLine ("Asset Deleted");  					} else {  						ListAssetInfo (asset' ref sb);  						sb.AppendLine ("");  						ListFilesInAsset (asset' ref sb);  					}  				}  			} catch {  				sb.AppendLine ("Asset(s) error. Deleted?");  			}  			sb.AppendLine ("");  			if (task.State == JobState.Error) {  				foreach (var errordetail in task.ErrorDetails) {  					sb.AppendLine ("Error Message : " + errordetail.Message);  					sb.AppendLine ("Error Code    : " + errordetail.Code);  				}  			}  			if (task.State == JobState.Finished) {  				TaskSizeAndPrice MyTaskSizePrice = CalculateTaskSizeAndPrice (task' (CloudMediaContext)theJob.GetMediaContext ());  				if (theJob.Tasks.Count > 1)// only display for the task if there are several tasks  				 {  					sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc));  					sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc));  					//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc));  					if (MyTaskSizePrice.Price >= 0) {  						sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price));  					}  				}  			}  			sb.AppendLine ("");  			sb.AppendLine (section);  		}  		sb.AppendLine ("");  		TaskSizeAndPrice MyJobSizePrice = CalculateJobSizeAndPrice (theJob);  		sb.AppendLine ("Input size processed by the job  : " + ((MyJobSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize) : cannotcalc));  		sb.AppendLine ("Output size processed by the job : " + ((MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.OutputSize) : cannotcalc));  		sb.AppendLine ("Total size processed by the job  : " + ((MyJobSizePrice.InputSize != -1 && MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize + MyJobSizePrice.OutputSize) : cannotcalc));  		/*                     if (MyJobSizePrice.Price != -1)                     {                         sb.AppendLine(string.Format("Estimated cost of the job        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyJobSizePrice.Price));                     }                     */sb.AppendLine ("");  		sb.AppendLine (section);  		sb.AppendLine (" END OF JOB REPORT");  		sb.AppendLine (section);  		sb.AppendLine ("");  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: if (SelectedJobs.Count > 0) {  	// Job Stats  	sb.AppendLine (section);  	foreach (IJob theJob in SelectedJobs) {  		sb.AppendLine (" START OF JOB REPORT");  		sb.AppendLine (section);  		sb.AppendLine ("");  		sb.AppendLine ("Job Name            : " + theJob.Name);  		sb.AppendLine ("Job ID              : " + theJob.Id);  		sb.AppendLine ("Job State           : " + theJob.State);  		sb.AppendLine ("Job Priority        : " + theJob.Priority);  		sb.AppendLine ("Job Template Id     : " + theJob.TemplateId);  		sb.AppendLine ("Job Created (UTC)   : " + theJob.Created.ToLongDateString () + " " + theJob.Created.ToLongTimeString ());  		if (theJob.StartTime != null)  			sb.AppendLine ("Job StartTime (UTC) : " + theJob.StartTime.Value.ToLongDateString () + " " + theJob.StartTime.Value.ToLongTimeString ());  		if (theJob.EndTime != null)  			sb.AppendLine ("Job EndTime (UTC)   : " + theJob.EndTime.Value.ToLongDateString () + " " + theJob.EndTime.Value.ToLongTimeString ());  		TimeSpan ts = theJob.RunningDuration;  		string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Job CPU runtime     : " + elapsedTime);  		if ((theJob.StartTime != null) && (theJob.EndTime != null)) {  			ts = ((DateTime)theJob.EndTime).Subtract ((DateTime)theJob.StartTime);  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Job Duration        : " + elapsedTime);  		}  		sb.AppendLine ("Number of tasks     : " + theJob.Tasks.Count);  		sb.AppendLine ("Media Account       : " + theJob.GetMediaContext ().Credentials.ClientId);  		sb.AppendLine ("");  		sb.AppendLine (section);  		foreach (ITask task in theJob.Tasks) {  			sb.AppendLine ("Task Name           : " + task.Name);  			sb.AppendLine (section);  			sb.AppendLine ("");  			sb.AppendLine ("Task ID             : " + task.Id);  			sb.AppendLine ("Task Priority       : " + task.Priority);  			sb.AppendLine ("Task State          : " + task.State);  			sb.AppendLine ("Task Options        : " + task.Options);  			sb.AppendLine ("Media Processor     : " + task.MediaProcessorId);  			IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ());  			if (processor != null)  				sb.AppendLine ("Media Processor Name: " + processor.Name);  			if (task.StartTime != null)  				// If not in queued state  				sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ());  			if (task.EndTime != null)  				// If not completed yet  				sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ());  			ts = task.RunningDuration;  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Task CPU runtime    : " + elapsedTime);  			if ((task.StartTime != null) && (task.EndTime != null)) {  				ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  				elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  				sb.AppendLine ("Task Duration       : " + elapsedTime);  			}  			sb.AppendLine ("Task PerfMessage    : " + task.PerfMessage);  			sb.AppendLine ("Task Progress       : " + task.Progress);  			// Task historical event?  			foreach (TaskHistoricalEvent thEvent in task.HistoricalEvents) {  				sb.AppendLine (thEvent.TimeStamp.ToLongTimeString () + " :-  " + thEvent.Message);  			}  			sb.AppendLine ("");  			sb.AppendLine ("Task Body           : ");  			sb.AppendLine ("=====================");  			sb.AppendLine (task.TaskBody);  			sb.AppendLine ("");  			sb.AppendLine ("Task Configuration  : ");  			sb.AppendLine ("=====================");  			if (task.Options == TaskOptions.None) {  				sb.AppendLine (task.Configuration);  			} else {  				sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)");  			}  			sb.AppendLine ("");  			sb.AppendLine ("Input Assets        :");  			sb.AppendLine ("=====================");  			sb.AppendLine ("");  			try {  				foreach (IAsset asset in task.InputAssets) {  					if (asset.State == AssetState.Deleted) {  						sb.AppendLine ("Asset Deleted");  					} else {  						ListAssetInfo (asset' ref sb);  						sb.AppendLine ("");  						ListFilesInAsset (asset' ref sb);  					}  				}  			} catch {  				sb.AppendLine ("Asset(s) error. Deleted?");  			}  			sb.AppendLine ("");  			sb.AppendLine ("Output Assets       :");  			sb.AppendLine ("=====================");  			sb.AppendLine ("");  			try {  				foreach (IAsset asset in task.OutputAssets) {  					if (asset.State == AssetState.Deleted) {  						sb.AppendLine ("Asset Deleted");  					} else {  						ListAssetInfo (asset' ref sb);  						sb.AppendLine ("");  						ListFilesInAsset (asset' ref sb);  					}  				}  			} catch {  				sb.AppendLine ("Asset(s) error. Deleted?");  			}  			sb.AppendLine ("");  			if (task.State == JobState.Error) {  				foreach (var errordetail in task.ErrorDetails) {  					sb.AppendLine ("Error Message : " + errordetail.Message);  					sb.AppendLine ("Error Code    : " + errordetail.Code);  				}  			}  			if (task.State == JobState.Finished) {  				TaskSizeAndPrice MyTaskSizePrice = CalculateTaskSizeAndPrice (task' (CloudMediaContext)theJob.GetMediaContext ());  				if (theJob.Tasks.Count > 1)// only display for the task if there are several tasks  				 {  					sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc));  					sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc));  					//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc));  					if (MyTaskSizePrice.Price >= 0) {  						sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price));  					}  				}  			}  			sb.AppendLine ("");  			sb.AppendLine (section);  		}  		sb.AppendLine ("");  		TaskSizeAndPrice MyJobSizePrice = CalculateJobSizeAndPrice (theJob);  		sb.AppendLine ("Input size processed by the job  : " + ((MyJobSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize) : cannotcalc));  		sb.AppendLine ("Output size processed by the job : " + ((MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.OutputSize) : cannotcalc));  		sb.AppendLine ("Total size processed by the job  : " + ((MyJobSizePrice.InputSize != -1 && MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize + MyJobSizePrice.OutputSize) : cannotcalc));  		/*                     if (MyJobSizePrice.Price != -1)                     {                         sb.AppendLine(string.Format("Estimated cost of the job        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyJobSizePrice.Price));                     }                     */sb.AppendLine ("");  		sb.AppendLine (section);  		sb.AppendLine (" END OF JOB REPORT");  		sb.AppendLine (section);  		sb.AppendLine ("");  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: if (SelectedJobs.Count > 0) {  	// Job Stats  	sb.AppendLine (section);  	foreach (IJob theJob in SelectedJobs) {  		sb.AppendLine (" START OF JOB REPORT");  		sb.AppendLine (section);  		sb.AppendLine ("");  		sb.AppendLine ("Job Name            : " + theJob.Name);  		sb.AppendLine ("Job ID              : " + theJob.Id);  		sb.AppendLine ("Job State           : " + theJob.State);  		sb.AppendLine ("Job Priority        : " + theJob.Priority);  		sb.AppendLine ("Job Template Id     : " + theJob.TemplateId);  		sb.AppendLine ("Job Created (UTC)   : " + theJob.Created.ToLongDateString () + " " + theJob.Created.ToLongTimeString ());  		if (theJob.StartTime != null)  			sb.AppendLine ("Job StartTime (UTC) : " + theJob.StartTime.Value.ToLongDateString () + " " + theJob.StartTime.Value.ToLongTimeString ());  		if (theJob.EndTime != null)  			sb.AppendLine ("Job EndTime (UTC)   : " + theJob.EndTime.Value.ToLongDateString () + " " + theJob.EndTime.Value.ToLongTimeString ());  		TimeSpan ts = theJob.RunningDuration;  		string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Job CPU runtime     : " + elapsedTime);  		if ((theJob.StartTime != null) && (theJob.EndTime != null)) {  			ts = ((DateTime)theJob.EndTime).Subtract ((DateTime)theJob.StartTime);  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Job Duration        : " + elapsedTime);  		}  		sb.AppendLine ("Number of tasks     : " + theJob.Tasks.Count);  		sb.AppendLine ("Media Account       : " + theJob.GetMediaContext ().Credentials.ClientId);  		sb.AppendLine ("");  		sb.AppendLine (section);  		foreach (ITask task in theJob.Tasks) {  			sb.AppendLine ("Task Name           : " + task.Name);  			sb.AppendLine (section);  			sb.AppendLine ("");  			sb.AppendLine ("Task ID             : " + task.Id);  			sb.AppendLine ("Task Priority       : " + task.Priority);  			sb.AppendLine ("Task State          : " + task.State);  			sb.AppendLine ("Task Options        : " + task.Options);  			sb.AppendLine ("Media Processor     : " + task.MediaProcessorId);  			IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ());  			if (processor != null)  				sb.AppendLine ("Media Processor Name: " + processor.Name);  			if (task.StartTime != null)  				// If not in queued state  				sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ());  			if (task.EndTime != null)  				// If not completed yet  				sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ());  			ts = task.RunningDuration;  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Task CPU runtime    : " + elapsedTime);  			if ((task.StartTime != null) && (task.EndTime != null)) {  				ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  				elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  				sb.AppendLine ("Task Duration       : " + elapsedTime);  			}  			sb.AppendLine ("Task PerfMessage    : " + task.PerfMessage);  			sb.AppendLine ("Task Progress       : " + task.Progress);  			// Task historical event?  			foreach (TaskHistoricalEvent thEvent in task.HistoricalEvents) {  				sb.AppendLine (thEvent.TimeStamp.ToLongTimeString () + " :-  " + thEvent.Message);  			}  			sb.AppendLine ("");  			sb.AppendLine ("Task Body           : ");  			sb.AppendLine ("=====================");  			sb.AppendLine (task.TaskBody);  			sb.AppendLine ("");  			sb.AppendLine ("Task Configuration  : ");  			sb.AppendLine ("=====================");  			if (task.Options == TaskOptions.None) {  				sb.AppendLine (task.Configuration);  			} else {  				sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)");  			}  			sb.AppendLine ("");  			sb.AppendLine ("Input Assets        :");  			sb.AppendLine ("=====================");  			sb.AppendLine ("");  			try {  				foreach (IAsset asset in task.InputAssets) {  					if (asset.State == AssetState.Deleted) {  						sb.AppendLine ("Asset Deleted");  					} else {  						ListAssetInfo (asset' ref sb);  						sb.AppendLine ("");  						ListFilesInAsset (asset' ref sb);  					}  				}  			} catch {  				sb.AppendLine ("Asset(s) error. Deleted?");  			}  			sb.AppendLine ("");  			sb.AppendLine ("Output Assets       :");  			sb.AppendLine ("=====================");  			sb.AppendLine ("");  			try {  				foreach (IAsset asset in task.OutputAssets) {  					if (asset.State == AssetState.Deleted) {  						sb.AppendLine ("Asset Deleted");  					} else {  						ListAssetInfo (asset' ref sb);  						sb.AppendLine ("");  						ListFilesInAsset (asset' ref sb);  					}  				}  			} catch {  				sb.AppendLine ("Asset(s) error. Deleted?");  			}  			sb.AppendLine ("");  			if (task.State == JobState.Error) {  				foreach (var errordetail in task.ErrorDetails) {  					sb.AppendLine ("Error Message : " + errordetail.Message);  					sb.AppendLine ("Error Code    : " + errordetail.Code);  				}  			}  			if (task.State == JobState.Finished) {  				TaskSizeAndPrice MyTaskSizePrice = CalculateTaskSizeAndPrice (task' (CloudMediaContext)theJob.GetMediaContext ());  				if (theJob.Tasks.Count > 1)// only display for the task if there are several tasks  				 {  					sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc));  					sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc));  					//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc));  					if (MyTaskSizePrice.Price >= 0) {  						sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price));  					}  				}  			}  			sb.AppendLine ("");  			sb.AppendLine (section);  		}  		sb.AppendLine ("");  		TaskSizeAndPrice MyJobSizePrice = CalculateJobSizeAndPrice (theJob);  		sb.AppendLine ("Input size processed by the job  : " + ((MyJobSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize) : cannotcalc));  		sb.AppendLine ("Output size processed by the job : " + ((MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.OutputSize) : cannotcalc));  		sb.AppendLine ("Total size processed by the job  : " + ((MyJobSizePrice.InputSize != -1 && MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize + MyJobSizePrice.OutputSize) : cannotcalc));  		/*                     if (MyJobSizePrice.Price != -1)                     {                         sb.AppendLine(string.Format("Estimated cost of the job        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyJobSizePrice.Price));                     }                     */sb.AppendLine ("");  		sb.AppendLine (section);  		sb.AppendLine (" END OF JOB REPORT");  		sb.AppendLine (section);  		sb.AppendLine ("");  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: if (SelectedJobs.Count > 0) {  	// Job Stats  	sb.AppendLine (section);  	foreach (IJob theJob in SelectedJobs) {  		sb.AppendLine (" START OF JOB REPORT");  		sb.AppendLine (section);  		sb.AppendLine ("");  		sb.AppendLine ("Job Name            : " + theJob.Name);  		sb.AppendLine ("Job ID              : " + theJob.Id);  		sb.AppendLine ("Job State           : " + theJob.State);  		sb.AppendLine ("Job Priority        : " + theJob.Priority);  		sb.AppendLine ("Job Template Id     : " + theJob.TemplateId);  		sb.AppendLine ("Job Created (UTC)   : " + theJob.Created.ToLongDateString () + " " + theJob.Created.ToLongTimeString ());  		if (theJob.StartTime != null)  			sb.AppendLine ("Job StartTime (UTC) : " + theJob.StartTime.Value.ToLongDateString () + " " + theJob.StartTime.Value.ToLongTimeString ());  		if (theJob.EndTime != null)  			sb.AppendLine ("Job EndTime (UTC)   : " + theJob.EndTime.Value.ToLongDateString () + " " + theJob.EndTime.Value.ToLongTimeString ());  		TimeSpan ts = theJob.RunningDuration;  		string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Job CPU runtime     : " + elapsedTime);  		if ((theJob.StartTime != null) && (theJob.EndTime != null)) {  			ts = ((DateTime)theJob.EndTime).Subtract ((DateTime)theJob.StartTime);  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Job Duration        : " + elapsedTime);  		}  		sb.AppendLine ("Number of tasks     : " + theJob.Tasks.Count);  		sb.AppendLine ("Media Account       : " + theJob.GetMediaContext ().Credentials.ClientId);  		sb.AppendLine ("");  		sb.AppendLine (section);  		foreach (ITask task in theJob.Tasks) {  			sb.AppendLine ("Task Name           : " + task.Name);  			sb.AppendLine (section);  			sb.AppendLine ("");  			sb.AppendLine ("Task ID             : " + task.Id);  			sb.AppendLine ("Task Priority       : " + task.Priority);  			sb.AppendLine ("Task State          : " + task.State);  			sb.AppendLine ("Task Options        : " + task.Options);  			sb.AppendLine ("Media Processor     : " + task.MediaProcessorId);  			IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ());  			if (processor != null)  				sb.AppendLine ("Media Processor Name: " + processor.Name);  			if (task.StartTime != null)  				// If not in queued state  				sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ());  			if (task.EndTime != null)  				// If not completed yet  				sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ());  			ts = task.RunningDuration;  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Task CPU runtime    : " + elapsedTime);  			if ((task.StartTime != null) && (task.EndTime != null)) {  				ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  				elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  				sb.AppendLine ("Task Duration       : " + elapsedTime);  			}  			sb.AppendLine ("Task PerfMessage    : " + task.PerfMessage);  			sb.AppendLine ("Task Progress       : " + task.Progress);  			// Task historical event?  			foreach (TaskHistoricalEvent thEvent in task.HistoricalEvents) {  				sb.AppendLine (thEvent.TimeStamp.ToLongTimeString () + " :-  " + thEvent.Message);  			}  			sb.AppendLine ("");  			sb.AppendLine ("Task Body           : ");  			sb.AppendLine ("=====================");  			sb.AppendLine (task.TaskBody);  			sb.AppendLine ("");  			sb.AppendLine ("Task Configuration  : ");  			sb.AppendLine ("=====================");  			if (task.Options == TaskOptions.None) {  				sb.AppendLine (task.Configuration);  			} else {  				sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)");  			}  			sb.AppendLine ("");  			sb.AppendLine ("Input Assets        :");  			sb.AppendLine ("=====================");  			sb.AppendLine ("");  			try {  				foreach (IAsset asset in task.InputAssets) {  					if (asset.State == AssetState.Deleted) {  						sb.AppendLine ("Asset Deleted");  					} else {  						ListAssetInfo (asset' ref sb);  						sb.AppendLine ("");  						ListFilesInAsset (asset' ref sb);  					}  				}  			} catch {  				sb.AppendLine ("Asset(s) error. Deleted?");  			}  			sb.AppendLine ("");  			sb.AppendLine ("Output Assets       :");  			sb.AppendLine ("=====================");  			sb.AppendLine ("");  			try {  				foreach (IAsset asset in task.OutputAssets) {  					if (asset.State == AssetState.Deleted) {  						sb.AppendLine ("Asset Deleted");  					} else {  						ListAssetInfo (asset' ref sb);  						sb.AppendLine ("");  						ListFilesInAsset (asset' ref sb);  					}  				}  			} catch {  				sb.AppendLine ("Asset(s) error. Deleted?");  			}  			sb.AppendLine ("");  			if (task.State == JobState.Error) {  				foreach (var errordetail in task.ErrorDetails) {  					sb.AppendLine ("Error Message : " + errordetail.Message);  					sb.AppendLine ("Error Code    : " + errordetail.Code);  				}  			}  			if (task.State == JobState.Finished) {  				TaskSizeAndPrice MyTaskSizePrice = CalculateTaskSizeAndPrice (task' (CloudMediaContext)theJob.GetMediaContext ());  				if (theJob.Tasks.Count > 1)// only display for the task if there are several tasks  				 {  					sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc));  					sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc));  					//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc));  					if (MyTaskSizePrice.Price >= 0) {  						sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price));  					}  				}  			}  			sb.AppendLine ("");  			sb.AppendLine (section);  		}  		sb.AppendLine ("");  		TaskSizeAndPrice MyJobSizePrice = CalculateJobSizeAndPrice (theJob);  		sb.AppendLine ("Input size processed by the job  : " + ((MyJobSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize) : cannotcalc));  		sb.AppendLine ("Output size processed by the job : " + ((MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.OutputSize) : cannotcalc));  		sb.AppendLine ("Total size processed by the job  : " + ((MyJobSizePrice.InputSize != -1 && MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize + MyJobSizePrice.OutputSize) : cannotcalc));  		/*                     if (MyJobSizePrice.Price != -1)                     {                         sb.AppendLine(string.Format("Estimated cost of the job        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyJobSizePrice.Price));                     }                     */sb.AppendLine ("");  		sb.AppendLine (section);  		sb.AppendLine (" END OF JOB REPORT");  		sb.AppendLine (section);  		sb.AppendLine ("");  	}  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: foreach (IJob theJob in SelectedJobs) {  	sb.AppendLine (" START OF JOB REPORT");  	sb.AppendLine (section);  	sb.AppendLine ("");  	sb.AppendLine ("Job Name            : " + theJob.Name);  	sb.AppendLine ("Job ID              : " + theJob.Id);  	sb.AppendLine ("Job State           : " + theJob.State);  	sb.AppendLine ("Job Priority        : " + theJob.Priority);  	sb.AppendLine ("Job Template Id     : " + theJob.TemplateId);  	sb.AppendLine ("Job Created (UTC)   : " + theJob.Created.ToLongDateString () + " " + theJob.Created.ToLongTimeString ());  	if (theJob.StartTime != null)  		sb.AppendLine ("Job StartTime (UTC) : " + theJob.StartTime.Value.ToLongDateString () + " " + theJob.StartTime.Value.ToLongTimeString ());  	if (theJob.EndTime != null)  		sb.AppendLine ("Job EndTime (UTC)   : " + theJob.EndTime.Value.ToLongDateString () + " " + theJob.EndTime.Value.ToLongTimeString ());  	TimeSpan ts = theJob.RunningDuration;  	string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  	sb.AppendLine ("Job CPU runtime     : " + elapsedTime);  	if ((theJob.StartTime != null) && (theJob.EndTime != null)) {  		ts = ((DateTime)theJob.EndTime).Subtract ((DateTime)theJob.StartTime);  		elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Job Duration        : " + elapsedTime);  	}  	sb.AppendLine ("Number of tasks     : " + theJob.Tasks.Count);  	sb.AppendLine ("Media Account       : " + theJob.GetMediaContext ().Credentials.ClientId);  	sb.AppendLine ("");  	sb.AppendLine (section);  	foreach (ITask task in theJob.Tasks) {  		sb.AppendLine ("Task Name           : " + task.Name);  		sb.AppendLine (section);  		sb.AppendLine ("");  		sb.AppendLine ("Task ID             : " + task.Id);  		sb.AppendLine ("Task Priority       : " + task.Priority);  		sb.AppendLine ("Task State          : " + task.State);  		sb.AppendLine ("Task Options        : " + task.Options);  		sb.AppendLine ("Media Processor     : " + task.MediaProcessorId);  		IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ());  		if (processor != null)  			sb.AppendLine ("Media Processor Name: " + processor.Name);  		if (task.StartTime != null)  			// If not in queued state  			sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ());  		if (task.EndTime != null)  			// If not completed yet  			sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ());  		ts = task.RunningDuration;  		elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Task CPU runtime    : " + elapsedTime);  		if ((task.StartTime != null) && (task.EndTime != null)) {  			ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Task Duration       : " + elapsedTime);  		}  		sb.AppendLine ("Task PerfMessage    : " + task.PerfMessage);  		sb.AppendLine ("Task Progress       : " + task.Progress);  		// Task historical event?  		foreach (TaskHistoricalEvent thEvent in task.HistoricalEvents) {  			sb.AppendLine (thEvent.TimeStamp.ToLongTimeString () + " :-  " + thEvent.Message);  		}  		sb.AppendLine ("");  		sb.AppendLine ("Task Body           : ");  		sb.AppendLine ("=====================");  		sb.AppendLine (task.TaskBody);  		sb.AppendLine ("");  		sb.AppendLine ("Task Configuration  : ");  		sb.AppendLine ("=====================");  		if (task.Options == TaskOptions.None) {  			sb.AppendLine (task.Configuration);  		} else {  			sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)");  		}  		sb.AppendLine ("");  		sb.AppendLine ("Input Assets        :");  		sb.AppendLine ("=====================");  		sb.AppendLine ("");  		try {  			foreach (IAsset asset in task.InputAssets) {  				if (asset.State == AssetState.Deleted) {  					sb.AppendLine ("Asset Deleted");  				} else {  					ListAssetInfo (asset' ref sb);  					sb.AppendLine ("");  					ListFilesInAsset (asset' ref sb);  				}  			}  		} catch {  			sb.AppendLine ("Asset(s) error. Deleted?");  		}  		sb.AppendLine ("");  		sb.AppendLine ("Output Assets       :");  		sb.AppendLine ("=====================");  		sb.AppendLine ("");  		try {  			foreach (IAsset asset in task.OutputAssets) {  				if (asset.State == AssetState.Deleted) {  					sb.AppendLine ("Asset Deleted");  				} else {  					ListAssetInfo (asset' ref sb);  					sb.AppendLine ("");  					ListFilesInAsset (asset' ref sb);  				}  			}  		} catch {  			sb.AppendLine ("Asset(s) error. Deleted?");  		}  		sb.AppendLine ("");  		if (task.State == JobState.Error) {  			foreach (var errordetail in task.ErrorDetails) {  				sb.AppendLine ("Error Message : " + errordetail.Message);  				sb.AppendLine ("Error Code    : " + errordetail.Code);  			}  		}  		if (task.State == JobState.Finished) {  			TaskSizeAndPrice MyTaskSizePrice = CalculateTaskSizeAndPrice (task' (CloudMediaContext)theJob.GetMediaContext ());  			if (theJob.Tasks.Count > 1)// only display for the task if there are several tasks  			 {  				sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc));  				sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc));  				//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc));  				if (MyTaskSizePrice.Price >= 0) {  					sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price));  				}  			}  		}  		sb.AppendLine ("");  		sb.AppendLine (section);  	}  	sb.AppendLine ("");  	TaskSizeAndPrice MyJobSizePrice = CalculateJobSizeAndPrice (theJob);  	sb.AppendLine ("Input size processed by the job  : " + ((MyJobSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize) : cannotcalc));  	sb.AppendLine ("Output size processed by the job : " + ((MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.OutputSize) : cannotcalc));  	sb.AppendLine ("Total size processed by the job  : " + ((MyJobSizePrice.InputSize != -1 && MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize + MyJobSizePrice.OutputSize) : cannotcalc));  	/*                     if (MyJobSizePrice.Price != -1)                     {                         sb.AppendLine(string.Format("Estimated cost of the job        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyJobSizePrice.Price));                     }                     */sb.AppendLine ("");  	sb.AppendLine (section);  	sb.AppendLine (" END OF JOB REPORT");  	sb.AppendLine (section);  	sb.AppendLine ("");  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: foreach (IJob theJob in SelectedJobs) {  	sb.AppendLine (" START OF JOB REPORT");  	sb.AppendLine (section);  	sb.AppendLine ("");  	sb.AppendLine ("Job Name            : " + theJob.Name);  	sb.AppendLine ("Job ID              : " + theJob.Id);  	sb.AppendLine ("Job State           : " + theJob.State);  	sb.AppendLine ("Job Priority        : " + theJob.Priority);  	sb.AppendLine ("Job Template Id     : " + theJob.TemplateId);  	sb.AppendLine ("Job Created (UTC)   : " + theJob.Created.ToLongDateString () + " " + theJob.Created.ToLongTimeString ());  	if (theJob.StartTime != null)  		sb.AppendLine ("Job StartTime (UTC) : " + theJob.StartTime.Value.ToLongDateString () + " " + theJob.StartTime.Value.ToLongTimeString ());  	if (theJob.EndTime != null)  		sb.AppendLine ("Job EndTime (UTC)   : " + theJob.EndTime.Value.ToLongDateString () + " " + theJob.EndTime.Value.ToLongTimeString ());  	TimeSpan ts = theJob.RunningDuration;  	string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  	sb.AppendLine ("Job CPU runtime     : " + elapsedTime);  	if ((theJob.StartTime != null) && (theJob.EndTime != null)) {  		ts = ((DateTime)theJob.EndTime).Subtract ((DateTime)theJob.StartTime);  		elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Job Duration        : " + elapsedTime);  	}  	sb.AppendLine ("Number of tasks     : " + theJob.Tasks.Count);  	sb.AppendLine ("Media Account       : " + theJob.GetMediaContext ().Credentials.ClientId);  	sb.AppendLine ("");  	sb.AppendLine (section);  	foreach (ITask task in theJob.Tasks) {  		sb.AppendLine ("Task Name           : " + task.Name);  		sb.AppendLine (section);  		sb.AppendLine ("");  		sb.AppendLine ("Task ID             : " + task.Id);  		sb.AppendLine ("Task Priority       : " + task.Priority);  		sb.AppendLine ("Task State          : " + task.State);  		sb.AppendLine ("Task Options        : " + task.Options);  		sb.AppendLine ("Media Processor     : " + task.MediaProcessorId);  		IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ());  		if (processor != null)  			sb.AppendLine ("Media Processor Name: " + processor.Name);  		if (task.StartTime != null)  			// If not in queued state  			sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ());  		if (task.EndTime != null)  			// If not completed yet  			sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ());  		ts = task.RunningDuration;  		elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Task CPU runtime    : " + elapsedTime);  		if ((task.StartTime != null) && (task.EndTime != null)) {  			ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Task Duration       : " + elapsedTime);  		}  		sb.AppendLine ("Task PerfMessage    : " + task.PerfMessage);  		sb.AppendLine ("Task Progress       : " + task.Progress);  		// Task historical event?  		foreach (TaskHistoricalEvent thEvent in task.HistoricalEvents) {  			sb.AppendLine (thEvent.TimeStamp.ToLongTimeString () + " :-  " + thEvent.Message);  		}  		sb.AppendLine ("");  		sb.AppendLine ("Task Body           : ");  		sb.AppendLine ("=====================");  		sb.AppendLine (task.TaskBody);  		sb.AppendLine ("");  		sb.AppendLine ("Task Configuration  : ");  		sb.AppendLine ("=====================");  		if (task.Options == TaskOptions.None) {  			sb.AppendLine (task.Configuration);  		} else {  			sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)");  		}  		sb.AppendLine ("");  		sb.AppendLine ("Input Assets        :");  		sb.AppendLine ("=====================");  		sb.AppendLine ("");  		try {  			foreach (IAsset asset in task.InputAssets) {  				if (asset.State == AssetState.Deleted) {  					sb.AppendLine ("Asset Deleted");  				} else {  					ListAssetInfo (asset' ref sb);  					sb.AppendLine ("");  					ListFilesInAsset (asset' ref sb);  				}  			}  		} catch {  			sb.AppendLine ("Asset(s) error. Deleted?");  		}  		sb.AppendLine ("");  		sb.AppendLine ("Output Assets       :");  		sb.AppendLine ("=====================");  		sb.AppendLine ("");  		try {  			foreach (IAsset asset in task.OutputAssets) {  				if (asset.State == AssetState.Deleted) {  					sb.AppendLine ("Asset Deleted");  				} else {  					ListAssetInfo (asset' ref sb);  					sb.AppendLine ("");  					ListFilesInAsset (asset' ref sb);  				}  			}  		} catch {  			sb.AppendLine ("Asset(s) error. Deleted?");  		}  		sb.AppendLine ("");  		if (task.State == JobState.Error) {  			foreach (var errordetail in task.ErrorDetails) {  				sb.AppendLine ("Error Message : " + errordetail.Message);  				sb.AppendLine ("Error Code    : " + errordetail.Code);  			}  		}  		if (task.State == JobState.Finished) {  			TaskSizeAndPrice MyTaskSizePrice = CalculateTaskSizeAndPrice (task' (CloudMediaContext)theJob.GetMediaContext ());  			if (theJob.Tasks.Count > 1)// only display for the task if there are several tasks  			 {  				sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc));  				sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc));  				//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc));  				if (MyTaskSizePrice.Price >= 0) {  					sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price));  				}  			}  		}  		sb.AppendLine ("");  		sb.AppendLine (section);  	}  	sb.AppendLine ("");  	TaskSizeAndPrice MyJobSizePrice = CalculateJobSizeAndPrice (theJob);  	sb.AppendLine ("Input size processed by the job  : " + ((MyJobSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize) : cannotcalc));  	sb.AppendLine ("Output size processed by the job : " + ((MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.OutputSize) : cannotcalc));  	sb.AppendLine ("Total size processed by the job  : " + ((MyJobSizePrice.InputSize != -1 && MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize + MyJobSizePrice.OutputSize) : cannotcalc));  	/*                     if (MyJobSizePrice.Price != -1)                     {                         sb.AppendLine(string.Format("Estimated cost of the job        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyJobSizePrice.Price));                     }                     */sb.AppendLine ("");  	sb.AppendLine (section);  	sb.AppendLine (" END OF JOB REPORT");  	sb.AppendLine (section);  	sb.AppendLine ("");  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: foreach (IJob theJob in SelectedJobs) {  	sb.AppendLine (" START OF JOB REPORT");  	sb.AppendLine (section);  	sb.AppendLine ("");  	sb.AppendLine ("Job Name            : " + theJob.Name);  	sb.AppendLine ("Job ID              : " + theJob.Id);  	sb.AppendLine ("Job State           : " + theJob.State);  	sb.AppendLine ("Job Priority        : " + theJob.Priority);  	sb.AppendLine ("Job Template Id     : " + theJob.TemplateId);  	sb.AppendLine ("Job Created (UTC)   : " + theJob.Created.ToLongDateString () + " " + theJob.Created.ToLongTimeString ());  	if (theJob.StartTime != null)  		sb.AppendLine ("Job StartTime (UTC) : " + theJob.StartTime.Value.ToLongDateString () + " " + theJob.StartTime.Value.ToLongTimeString ());  	if (theJob.EndTime != null)  		sb.AppendLine ("Job EndTime (UTC)   : " + theJob.EndTime.Value.ToLongDateString () + " " + theJob.EndTime.Value.ToLongTimeString ());  	TimeSpan ts = theJob.RunningDuration;  	string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  	sb.AppendLine ("Job CPU runtime     : " + elapsedTime);  	if ((theJob.StartTime != null) && (theJob.EndTime != null)) {  		ts = ((DateTime)theJob.EndTime).Subtract ((DateTime)theJob.StartTime);  		elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Job Duration        : " + elapsedTime);  	}  	sb.AppendLine ("Number of tasks     : " + theJob.Tasks.Count);  	sb.AppendLine ("Media Account       : " + theJob.GetMediaContext ().Credentials.ClientId);  	sb.AppendLine ("");  	sb.AppendLine (section);  	foreach (ITask task in theJob.Tasks) {  		sb.AppendLine ("Task Name           : " + task.Name);  		sb.AppendLine (section);  		sb.AppendLine ("");  		sb.AppendLine ("Task ID             : " + task.Id);  		sb.AppendLine ("Task Priority       : " + task.Priority);  		sb.AppendLine ("Task State          : " + task.State);  		sb.AppendLine ("Task Options        : " + task.Options);  		sb.AppendLine ("Media Processor     : " + task.MediaProcessorId);  		IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ());  		if (processor != null)  			sb.AppendLine ("Media Processor Name: " + processor.Name);  		if (task.StartTime != null)  			// If not in queued state  			sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ());  		if (task.EndTime != null)  			// If not completed yet  			sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ());  		ts = task.RunningDuration;  		elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Task CPU runtime    : " + elapsedTime);  		if ((task.StartTime != null) && (task.EndTime != null)) {  			ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Task Duration       : " + elapsedTime);  		}  		sb.AppendLine ("Task PerfMessage    : " + task.PerfMessage);  		sb.AppendLine ("Task Progress       : " + task.Progress);  		// Task historical event?  		foreach (TaskHistoricalEvent thEvent in task.HistoricalEvents) {  			sb.AppendLine (thEvent.TimeStamp.ToLongTimeString () + " :-  " + thEvent.Message);  		}  		sb.AppendLine ("");  		sb.AppendLine ("Task Body           : ");  		sb.AppendLine ("=====================");  		sb.AppendLine (task.TaskBody);  		sb.AppendLine ("");  		sb.AppendLine ("Task Configuration  : ");  		sb.AppendLine ("=====================");  		if (task.Options == TaskOptions.None) {  			sb.AppendLine (task.Configuration);  		} else {  			sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)");  		}  		sb.AppendLine ("");  		sb.AppendLine ("Input Assets        :");  		sb.AppendLine ("=====================");  		sb.AppendLine ("");  		try {  			foreach (IAsset asset in task.InputAssets) {  				if (asset.State == AssetState.Deleted) {  					sb.AppendLine ("Asset Deleted");  				} else {  					ListAssetInfo (asset' ref sb);  					sb.AppendLine ("");  					ListFilesInAsset (asset' ref sb);  				}  			}  		} catch {  			sb.AppendLine ("Asset(s) error. Deleted?");  		}  		sb.AppendLine ("");  		sb.AppendLine ("Output Assets       :");  		sb.AppendLine ("=====================");  		sb.AppendLine ("");  		try {  			foreach (IAsset asset in task.OutputAssets) {  				if (asset.State == AssetState.Deleted) {  					sb.AppendLine ("Asset Deleted");  				} else {  					ListAssetInfo (asset' ref sb);  					sb.AppendLine ("");  					ListFilesInAsset (asset' ref sb);  				}  			}  		} catch {  			sb.AppendLine ("Asset(s) error. Deleted?");  		}  		sb.AppendLine ("");  		if (task.State == JobState.Error) {  			foreach (var errordetail in task.ErrorDetails) {  				sb.AppendLine ("Error Message : " + errordetail.Message);  				sb.AppendLine ("Error Code    : " + errordetail.Code);  			}  		}  		if (task.State == JobState.Finished) {  			TaskSizeAndPrice MyTaskSizePrice = CalculateTaskSizeAndPrice (task' (CloudMediaContext)theJob.GetMediaContext ());  			if (theJob.Tasks.Count > 1)// only display for the task if there are several tasks  			 {  				sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc));  				sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc));  				//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc));  				if (MyTaskSizePrice.Price >= 0) {  					sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price));  				}  			}  		}  		sb.AppendLine ("");  		sb.AppendLine (section);  	}  	sb.AppendLine ("");  	TaskSizeAndPrice MyJobSizePrice = CalculateJobSizeAndPrice (theJob);  	sb.AppendLine ("Input size processed by the job  : " + ((MyJobSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize) : cannotcalc));  	sb.AppendLine ("Output size processed by the job : " + ((MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.OutputSize) : cannotcalc));  	sb.AppendLine ("Total size processed by the job  : " + ((MyJobSizePrice.InputSize != -1 && MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize + MyJobSizePrice.OutputSize) : cannotcalc));  	/*                     if (MyJobSizePrice.Price != -1)                     {                         sb.AppendLine(string.Format("Estimated cost of the job        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyJobSizePrice.Price));                     }                     */sb.AppendLine ("");  	sb.AppendLine (section);  	sb.AppendLine (" END OF JOB REPORT");  	sb.AppendLine (section);  	sb.AppendLine ("");  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: foreach (IJob theJob in SelectedJobs) {  	sb.AppendLine (" START OF JOB REPORT");  	sb.AppendLine (section);  	sb.AppendLine ("");  	sb.AppendLine ("Job Name            : " + theJob.Name);  	sb.AppendLine ("Job ID              : " + theJob.Id);  	sb.AppendLine ("Job State           : " + theJob.State);  	sb.AppendLine ("Job Priority        : " + theJob.Priority);  	sb.AppendLine ("Job Template Id     : " + theJob.TemplateId);  	sb.AppendLine ("Job Created (UTC)   : " + theJob.Created.ToLongDateString () + " " + theJob.Created.ToLongTimeString ());  	if (theJob.StartTime != null)  		sb.AppendLine ("Job StartTime (UTC) : " + theJob.StartTime.Value.ToLongDateString () + " " + theJob.StartTime.Value.ToLongTimeString ());  	if (theJob.EndTime != null)  		sb.AppendLine ("Job EndTime (UTC)   : " + theJob.EndTime.Value.ToLongDateString () + " " + theJob.EndTime.Value.ToLongTimeString ());  	TimeSpan ts = theJob.RunningDuration;  	string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  	sb.AppendLine ("Job CPU runtime     : " + elapsedTime);  	if ((theJob.StartTime != null) && (theJob.EndTime != null)) {  		ts = ((DateTime)theJob.EndTime).Subtract ((DateTime)theJob.StartTime);  		elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Job Duration        : " + elapsedTime);  	}  	sb.AppendLine ("Number of tasks     : " + theJob.Tasks.Count);  	sb.AppendLine ("Media Account       : " + theJob.GetMediaContext ().Credentials.ClientId);  	sb.AppendLine ("");  	sb.AppendLine (section);  	foreach (ITask task in theJob.Tasks) {  		sb.AppendLine ("Task Name           : " + task.Name);  		sb.AppendLine (section);  		sb.AppendLine ("");  		sb.AppendLine ("Task ID             : " + task.Id);  		sb.AppendLine ("Task Priority       : " + task.Priority);  		sb.AppendLine ("Task State          : " + task.State);  		sb.AppendLine ("Task Options        : " + task.Options);  		sb.AppendLine ("Media Processor     : " + task.MediaProcessorId);  		IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ());  		if (processor != null)  			sb.AppendLine ("Media Processor Name: " + processor.Name);  		if (task.StartTime != null)  			// If not in queued state  			sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ());  		if (task.EndTime != null)  			// If not completed yet  			sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ());  		ts = task.RunningDuration;  		elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Task CPU runtime    : " + elapsedTime);  		if ((task.StartTime != null) && (task.EndTime != null)) {  			ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  			elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  			sb.AppendLine ("Task Duration       : " + elapsedTime);  		}  		sb.AppendLine ("Task PerfMessage    : " + task.PerfMessage);  		sb.AppendLine ("Task Progress       : " + task.Progress);  		// Task historical event?  		foreach (TaskHistoricalEvent thEvent in task.HistoricalEvents) {  			sb.AppendLine (thEvent.TimeStamp.ToLongTimeString () + " :-  " + thEvent.Message);  		}  		sb.AppendLine ("");  		sb.AppendLine ("Task Body           : ");  		sb.AppendLine ("=====================");  		sb.AppendLine (task.TaskBody);  		sb.AppendLine ("");  		sb.AppendLine ("Task Configuration  : ");  		sb.AppendLine ("=====================");  		if (task.Options == TaskOptions.None) {  			sb.AppendLine (task.Configuration);  		} else {  			sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)");  		}  		sb.AppendLine ("");  		sb.AppendLine ("Input Assets        :");  		sb.AppendLine ("=====================");  		sb.AppendLine ("");  		try {  			foreach (IAsset asset in task.InputAssets) {  				if (asset.State == AssetState.Deleted) {  					sb.AppendLine ("Asset Deleted");  				} else {  					ListAssetInfo (asset' ref sb);  					sb.AppendLine ("");  					ListFilesInAsset (asset' ref sb);  				}  			}  		} catch {  			sb.AppendLine ("Asset(s) error. Deleted?");  		}  		sb.AppendLine ("");  		sb.AppendLine ("Output Assets       :");  		sb.AppendLine ("=====================");  		sb.AppendLine ("");  		try {  			foreach (IAsset asset in task.OutputAssets) {  				if (asset.State == AssetState.Deleted) {  					sb.AppendLine ("Asset Deleted");  				} else {  					ListAssetInfo (asset' ref sb);  					sb.AppendLine ("");  					ListFilesInAsset (asset' ref sb);  				}  			}  		} catch {  			sb.AppendLine ("Asset(s) error. Deleted?");  		}  		sb.AppendLine ("");  		if (task.State == JobState.Error) {  			foreach (var errordetail in task.ErrorDetails) {  				sb.AppendLine ("Error Message : " + errordetail.Message);  				sb.AppendLine ("Error Code    : " + errordetail.Code);  			}  		}  		if (task.State == JobState.Finished) {  			TaskSizeAndPrice MyTaskSizePrice = CalculateTaskSizeAndPrice (task' (CloudMediaContext)theJob.GetMediaContext ());  			if (theJob.Tasks.Count > 1)// only display for the task if there are several tasks  			 {  				sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc));  				sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc));  				//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc));  				if (MyTaskSizePrice.Price >= 0) {  					sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price));  				}  			}  		}  		sb.AppendLine ("");  		sb.AppendLine (section);  	}  	sb.AppendLine ("");  	TaskSizeAndPrice MyJobSizePrice = CalculateJobSizeAndPrice (theJob);  	sb.AppendLine ("Input size processed by the job  : " + ((MyJobSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize) : cannotcalc));  	sb.AppendLine ("Output size processed by the job : " + ((MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.OutputSize) : cannotcalc));  	sb.AppendLine ("Total size processed by the job  : " + ((MyJobSizePrice.InputSize != -1 && MyJobSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyJobSizePrice.InputSize + MyJobSizePrice.OutputSize) : cannotcalc));  	/*                     if (MyJobSizePrice.Price != -1)                     {                         sb.AppendLine(string.Format("Estimated cost of the job        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyJobSizePrice.Price));                     }                     */sb.AppendLine ("");  	sb.AppendLine (section);  	sb.AppendLine (" END OF JOB REPORT");  	sb.AppendLine (section);  	sb.AppendLine ("");  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: if ((theJob.StartTime != null) && (theJob.EndTime != null)) {  	ts = ((DateTime)theJob.EndTime).Subtract ((DateTime)theJob.StartTime);  	elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  	sb.AppendLine ("Job Duration        : " + elapsedTime);  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: foreach (ITask task in theJob.Tasks) {  	sb.AppendLine ("Task Name           : " + task.Name);  	sb.AppendLine (section);  	sb.AppendLine ("");  	sb.AppendLine ("Task ID             : " + task.Id);  	sb.AppendLine ("Task Priority       : " + task.Priority);  	sb.AppendLine ("Task State          : " + task.State);  	sb.AppendLine ("Task Options        : " + task.Options);  	sb.AppendLine ("Media Processor     : " + task.MediaProcessorId);  	IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ());  	if (processor != null)  		sb.AppendLine ("Media Processor Name: " + processor.Name);  	if (task.StartTime != null)  		// If not in queued state  		sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ());  	if (task.EndTime != null)  		// If not completed yet  		sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ());  	ts = task.RunningDuration;  	elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  	sb.AppendLine ("Task CPU runtime    : " + elapsedTime);  	if ((task.StartTime != null) && (task.EndTime != null)) {  		ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  		elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Task Duration       : " + elapsedTime);  	}  	sb.AppendLine ("Task PerfMessage    : " + task.PerfMessage);  	sb.AppendLine ("Task Progress       : " + task.Progress);  	// Task historical event?  	foreach (TaskHistoricalEvent thEvent in task.HistoricalEvents) {  		sb.AppendLine (thEvent.TimeStamp.ToLongTimeString () + " :-  " + thEvent.Message);  	}  	sb.AppendLine ("");  	sb.AppendLine ("Task Body           : ");  	sb.AppendLine ("=====================");  	sb.AppendLine (task.TaskBody);  	sb.AppendLine ("");  	sb.AppendLine ("Task Configuration  : ");  	sb.AppendLine ("=====================");  	if (task.Options == TaskOptions.None) {  		sb.AppendLine (task.Configuration);  	} else {  		sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)");  	}  	sb.AppendLine ("");  	sb.AppendLine ("Input Assets        :");  	sb.AppendLine ("=====================");  	sb.AppendLine ("");  	try {  		foreach (IAsset asset in task.InputAssets) {  			if (asset.State == AssetState.Deleted) {  				sb.AppendLine ("Asset Deleted");  			} else {  				ListAssetInfo (asset' ref sb);  				sb.AppendLine ("");  				ListFilesInAsset (asset' ref sb);  			}  		}  	} catch {  		sb.AppendLine ("Asset(s) error. Deleted?");  	}  	sb.AppendLine ("");  	sb.AppendLine ("Output Assets       :");  	sb.AppendLine ("=====================");  	sb.AppendLine ("");  	try {  		foreach (IAsset asset in task.OutputAssets) {  			if (asset.State == AssetState.Deleted) {  				sb.AppendLine ("Asset Deleted");  			} else {  				ListAssetInfo (asset' ref sb);  				sb.AppendLine ("");  				ListFilesInAsset (asset' ref sb);  			}  		}  	} catch {  		sb.AppendLine ("Asset(s) error. Deleted?");  	}  	sb.AppendLine ("");  	if (task.State == JobState.Error) {  		foreach (var errordetail in task.ErrorDetails) {  			sb.AppendLine ("Error Message : " + errordetail.Message);  			sb.AppendLine ("Error Code    : " + errordetail.Code);  		}  	}  	if (task.State == JobState.Finished) {  		TaskSizeAndPrice MyTaskSizePrice = CalculateTaskSizeAndPrice (task' (CloudMediaContext)theJob.GetMediaContext ());  		if (theJob.Tasks.Count > 1)// only display for the task if there are several tasks  		 {  			sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc));  			sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc));  			//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc));  			if (MyTaskSizePrice.Price >= 0) {  				sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price));  			}  		}  	}  	sb.AppendLine ("");  	sb.AppendLine (section);  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: foreach (ITask task in theJob.Tasks) {  	sb.AppendLine ("Task Name           : " + task.Name);  	sb.AppendLine (section);  	sb.AppendLine ("");  	sb.AppendLine ("Task ID             : " + task.Id);  	sb.AppendLine ("Task Priority       : " + task.Priority);  	sb.AppendLine ("Task State          : " + task.State);  	sb.AppendLine ("Task Options        : " + task.Options);  	sb.AppendLine ("Media Processor     : " + task.MediaProcessorId);  	IMediaProcessor processor = JobInfo.GetMediaProcessorFromId (task.MediaProcessorId' (CloudMediaContext)theJob.GetMediaContext ());  	if (processor != null)  		sb.AppendLine ("Media Processor Name: " + processor.Name);  	if (task.StartTime != null)  		// If not in queued state  		sb.AppendLine ("Task StartTime (UTC): " + task.StartTime.Value.ToLongDateString () + " " + task.StartTime.Value.ToLongTimeString ());  	if (task.EndTime != null)  		// If not completed yet  		sb.AppendLine ("Task EndTime (UTC)  : " + task.EndTime.Value.ToLongDateString () + " " + task.EndTime.Value.ToLongTimeString ());  	ts = task.RunningDuration;  	elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  	sb.AppendLine ("Task CPU runtime    : " + elapsedTime);  	if ((task.StartTime != null) && (task.EndTime != null)) {  		ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  		elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  		sb.AppendLine ("Task Duration       : " + elapsedTime);  	}  	sb.AppendLine ("Task PerfMessage    : " + task.PerfMessage);  	sb.AppendLine ("Task Progress       : " + task.Progress);  	// Task historical event?  	foreach (TaskHistoricalEvent thEvent in task.HistoricalEvents) {  		sb.AppendLine (thEvent.TimeStamp.ToLongTimeString () + " :-  " + thEvent.Message);  	}  	sb.AppendLine ("");  	sb.AppendLine ("Task Body           : ");  	sb.AppendLine ("=====================");  	sb.AppendLine (task.TaskBody);  	sb.AppendLine ("");  	sb.AppendLine ("Task Configuration  : ");  	sb.AppendLine ("=====================");  	if (task.Options == TaskOptions.None) {  		sb.AppendLine (task.Configuration);  	} else {  		sb.AppendLine ("(Not displayed here as task configuration is protected. This data is visible in Job Information / Tasks)");  	}  	sb.AppendLine ("");  	sb.AppendLine ("Input Assets        :");  	sb.AppendLine ("=====================");  	sb.AppendLine ("");  	try {  		foreach (IAsset asset in task.InputAssets) {  			if (asset.State == AssetState.Deleted) {  				sb.AppendLine ("Asset Deleted");  			} else {  				ListAssetInfo (asset' ref sb);  				sb.AppendLine ("");  				ListFilesInAsset (asset' ref sb);  			}  		}  	} catch {  		sb.AppendLine ("Asset(s) error. Deleted?");  	}  	sb.AppendLine ("");  	sb.AppendLine ("Output Assets       :");  	sb.AppendLine ("=====================");  	sb.AppendLine ("");  	try {  		foreach (IAsset asset in task.OutputAssets) {  			if (asset.State == AssetState.Deleted) {  				sb.AppendLine ("Asset Deleted");  			} else {  				ListAssetInfo (asset' ref sb);  				sb.AppendLine ("");  				ListFilesInAsset (asset' ref sb);  			}  		}  	} catch {  		sb.AppendLine ("Asset(s) error. Deleted?");  	}  	sb.AppendLine ("");  	if (task.State == JobState.Error) {  		foreach (var errordetail in task.ErrorDetails) {  			sb.AppendLine ("Error Message : " + errordetail.Message);  			sb.AppendLine ("Error Code    : " + errordetail.Code);  		}  	}  	if (task.State == JobState.Finished) {  		TaskSizeAndPrice MyTaskSizePrice = CalculateTaskSizeAndPrice (task' (CloudMediaContext)theJob.GetMediaContext ());  		if (theJob.Tasks.Count > 1)// only display for the task if there are several tasks  		 {  			sb.AppendLine ("Input size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.InputSize) : cannotcalc));  			sb.AppendLine ("Output size processed by the task : " + ((MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize (MyTaskSizePrice.OutputSize) : cannotcalc));  			//sb.AppendLine("Total size processed by the task  : " + ((MyTaskSizePrice.InputSize != -1 && MyTaskSizePrice.OutputSize != -1) ? AssetInfo.FormatByteSize(MyTaskSizePrice.InputSize + MyTaskSizePrice.OutputSize) : cannotcalc));  			if (MyTaskSizePrice.Price >= 0) {  				sb.AppendLine (string.Format ("Estimated cost of the task        : {0} {1:0.00}"' Properties.Settings.Default.Currency' MyTaskSizePrice.Price));  			}  		}  	}  	sb.AppendLine ("");  	sb.AppendLine (section);  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: if ((task.StartTime != null) && (task.EndTime != null)) {  	ts = ((DateTime)task.EndTime).Subtract ((DateTime)task.StartTime);  	elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  	sb.AppendLine ("Task Duration       : " + elapsedTime);  }  
Magic Number,AMSExplorer,JobInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetStats,The following statement contains a magic number: elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}:{3:00}.{4:00}"' ts.Days' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,AddParameterToUrlString,The following statement contains a magic number: if (urlstr.Contains (querystr))// there is already a parameter   {  	int pos = urlstr.IndexOf (querystr' 0);  	urlstr = urlstr.Substring (0' pos + 10) + parameter + "'" + urlstr.Substring (pos + 10);  } else {  	urlstr += string.Format ("({0})"' parameter);  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,AddParameterToUrlString,The following statement contains a magic number: if (urlstr.Contains (querystr))// there is already a parameter   {  	int pos = urlstr.IndexOf (querystr' 0);  	urlstr = urlstr.Substring (0' pos + 10) + parameter + "'" + urlstr.Substring (pos + 10);  } else {  	urlstr += string.Format ("({0})"' parameter);  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,AddParameterToUrlString,The following statement contains a magic number: urlstr = urlstr.Substring (0' pos + 10) + parameter + "'" + urlstr.Substring (pos + 10);  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,AddParameterToUrlString,The following statement contains a magic number: urlstr = urlstr.Substring (0' pos + 10) + parameter + "'" + urlstr.Substring (pos + 10);  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: switch (asset.AssetType) {  case AssetType.MediaServicesHLS:  	type = Type_AMSHLS;  	break;  case AssetType.MP4:  	break;  case AssetType.MultiBitrateMP4:  	var mp4files = AssetFiles.Where (f => f.Name.EndsWith (".mp4"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = mp4files.Count ();  	type = number == 1 ? Type_Single : Type_Multi;  	break;  case AssetType.SmoothStreaming:  	type = Type_Smooth;  	var cfffiles = AssetFiles.Where (f => f.Name.EndsWith (".ismv"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".isma"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = cfffiles.Count ();  	if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  		if (fragmentedFilesCount == AssetFiles.Count - 2) {  			number = AssetFiles.Count - 2;  			// tracks - 2 manifest files  			type = Type_LiveArchive;  		} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  			number = AssetFiles.Count - 4;  			// tracks - 4 manifest files  			type = Type_Fragmented;  		}  	}  	break;  case AssetType.Unknown:  	string ext;  	string pr = string.Empty;  	if (assetfilescount == 0)  		return Type_Empty;  	if (assetfilescount == 1) {  		number = 1;  		ext = Path.GetExtension (AssetFiles.FirstOrDefault ().Name.ToUpper ());  		if (!string.IsNullOrEmpty (ext))  			ext = ext.Substring (1);  		switch (ext) {  		case "WORKFLOW":  			type = Type_Workflow;  			break;  		default:  			type = ext;  			break;  		}  	} else {  		// multi files in asset  		var ThumbnailsAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".jpg"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".png"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".bmp"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		var XMLAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".xml"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		int nonThumbnailFilesCount = AssetFiles.Count - ThumbnailsAssetFiles.Count ();  		if ((ThumbnailsAssetFiles.Count () > 0) && ((nonThumbnailFilesCount == 0) || (XMLAssetFiles.Count () == 1))) {  			type = Type_Thumbnails;  			number = ThumbnailsAssetFiles.Count ();  		}  	}  	break;  default:  	break;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: switch (asset.AssetType) {  case AssetType.MediaServicesHLS:  	type = Type_AMSHLS;  	break;  case AssetType.MP4:  	break;  case AssetType.MultiBitrateMP4:  	var mp4files = AssetFiles.Where (f => f.Name.EndsWith (".mp4"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = mp4files.Count ();  	type = number == 1 ? Type_Single : Type_Multi;  	break;  case AssetType.SmoothStreaming:  	type = Type_Smooth;  	var cfffiles = AssetFiles.Where (f => f.Name.EndsWith (".ismv"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".isma"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = cfffiles.Count ();  	if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  		if (fragmentedFilesCount == AssetFiles.Count - 2) {  			number = AssetFiles.Count - 2;  			// tracks - 2 manifest files  			type = Type_LiveArchive;  		} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  			number = AssetFiles.Count - 4;  			// tracks - 4 manifest files  			type = Type_Fragmented;  		}  	}  	break;  case AssetType.Unknown:  	string ext;  	string pr = string.Empty;  	if (assetfilescount == 0)  		return Type_Empty;  	if (assetfilescount == 1) {  		number = 1;  		ext = Path.GetExtension (AssetFiles.FirstOrDefault ().Name.ToUpper ());  		if (!string.IsNullOrEmpty (ext))  			ext = ext.Substring (1);  		switch (ext) {  		case "WORKFLOW":  			type = Type_Workflow;  			break;  		default:  			type = ext;  			break;  		}  	} else {  		// multi files in asset  		var ThumbnailsAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".jpg"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".png"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".bmp"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		var XMLAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".xml"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		int nonThumbnailFilesCount = AssetFiles.Count - ThumbnailsAssetFiles.Count ();  		if ((ThumbnailsAssetFiles.Count () > 0) && ((nonThumbnailFilesCount == 0) || (XMLAssetFiles.Count () == 1))) {  			type = Type_Thumbnails;  			number = ThumbnailsAssetFiles.Count ();  		}  	}  	break;  default:  	break;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: switch (asset.AssetType) {  case AssetType.MediaServicesHLS:  	type = Type_AMSHLS;  	break;  case AssetType.MP4:  	break;  case AssetType.MultiBitrateMP4:  	var mp4files = AssetFiles.Where (f => f.Name.EndsWith (".mp4"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = mp4files.Count ();  	type = number == 1 ? Type_Single : Type_Multi;  	break;  case AssetType.SmoothStreaming:  	type = Type_Smooth;  	var cfffiles = AssetFiles.Where (f => f.Name.EndsWith (".ismv"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".isma"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = cfffiles.Count ();  	if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  		if (fragmentedFilesCount == AssetFiles.Count - 2) {  			number = AssetFiles.Count - 2;  			// tracks - 2 manifest files  			type = Type_LiveArchive;  		} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  			number = AssetFiles.Count - 4;  			// tracks - 4 manifest files  			type = Type_Fragmented;  		}  	}  	break;  case AssetType.Unknown:  	string ext;  	string pr = string.Empty;  	if (assetfilescount == 0)  		return Type_Empty;  	if (assetfilescount == 1) {  		number = 1;  		ext = Path.GetExtension (AssetFiles.FirstOrDefault ().Name.ToUpper ());  		if (!string.IsNullOrEmpty (ext))  			ext = ext.Substring (1);  		switch (ext) {  		case "WORKFLOW":  			type = Type_Workflow;  			break;  		default:  			type = ext;  			break;  		}  	} else {  		// multi files in asset  		var ThumbnailsAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".jpg"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".png"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".bmp"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		var XMLAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".xml"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		int nonThumbnailFilesCount = AssetFiles.Count - ThumbnailsAssetFiles.Count ();  		if ((ThumbnailsAssetFiles.Count () > 0) && ((nonThumbnailFilesCount == 0) || (XMLAssetFiles.Count () == 1))) {  			type = Type_Thumbnails;  			number = ThumbnailsAssetFiles.Count ();  		}  	}  	break;  default:  	break;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: switch (asset.AssetType) {  case AssetType.MediaServicesHLS:  	type = Type_AMSHLS;  	break;  case AssetType.MP4:  	break;  case AssetType.MultiBitrateMP4:  	var mp4files = AssetFiles.Where (f => f.Name.EndsWith (".mp4"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = mp4files.Count ();  	type = number == 1 ? Type_Single : Type_Multi;  	break;  case AssetType.SmoothStreaming:  	type = Type_Smooth;  	var cfffiles = AssetFiles.Where (f => f.Name.EndsWith (".ismv"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".isma"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = cfffiles.Count ();  	if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  		if (fragmentedFilesCount == AssetFiles.Count - 2) {  			number = AssetFiles.Count - 2;  			// tracks - 2 manifest files  			type = Type_LiveArchive;  		} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  			number = AssetFiles.Count - 4;  			// tracks - 4 manifest files  			type = Type_Fragmented;  		}  	}  	break;  case AssetType.Unknown:  	string ext;  	string pr = string.Empty;  	if (assetfilescount == 0)  		return Type_Empty;  	if (assetfilescount == 1) {  		number = 1;  		ext = Path.GetExtension (AssetFiles.FirstOrDefault ().Name.ToUpper ());  		if (!string.IsNullOrEmpty (ext))  			ext = ext.Substring (1);  		switch (ext) {  		case "WORKFLOW":  			type = Type_Workflow;  			break;  		default:  			type = ext;  			break;  		}  	} else {  		// multi files in asset  		var ThumbnailsAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".jpg"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".png"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".bmp"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		var XMLAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".xml"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		int nonThumbnailFilesCount = AssetFiles.Count - ThumbnailsAssetFiles.Count ();  		if ((ThumbnailsAssetFiles.Count () > 0) && ((nonThumbnailFilesCount == 0) || (XMLAssetFiles.Count () == 1))) {  			type = Type_Thumbnails;  			number = ThumbnailsAssetFiles.Count ();  		}  	}  	break;  default:  	break;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: switch (asset.AssetType) {  case AssetType.MediaServicesHLS:  	type = Type_AMSHLS;  	break;  case AssetType.MP4:  	break;  case AssetType.MultiBitrateMP4:  	var mp4files = AssetFiles.Where (f => f.Name.EndsWith (".mp4"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = mp4files.Count ();  	type = number == 1 ? Type_Single : Type_Multi;  	break;  case AssetType.SmoothStreaming:  	type = Type_Smooth;  	var cfffiles = AssetFiles.Where (f => f.Name.EndsWith (".ismv"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".isma"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = cfffiles.Count ();  	if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  		if (fragmentedFilesCount == AssetFiles.Count - 2) {  			number = AssetFiles.Count - 2;  			// tracks - 2 manifest files  			type = Type_LiveArchive;  		} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  			number = AssetFiles.Count - 4;  			// tracks - 4 manifest files  			type = Type_Fragmented;  		}  	}  	break;  case AssetType.Unknown:  	string ext;  	string pr = string.Empty;  	if (assetfilescount == 0)  		return Type_Empty;  	if (assetfilescount == 1) {  		number = 1;  		ext = Path.GetExtension (AssetFiles.FirstOrDefault ().Name.ToUpper ());  		if (!string.IsNullOrEmpty (ext))  			ext = ext.Substring (1);  		switch (ext) {  		case "WORKFLOW":  			type = Type_Workflow;  			break;  		default:  			type = ext;  			break;  		}  	} else {  		// multi files in asset  		var ThumbnailsAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".jpg"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".png"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".bmp"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		var XMLAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".xml"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		int nonThumbnailFilesCount = AssetFiles.Count - ThumbnailsAssetFiles.Count ();  		if ((ThumbnailsAssetFiles.Count () > 0) && ((nonThumbnailFilesCount == 0) || (XMLAssetFiles.Count () == 1))) {  			type = Type_Thumbnails;  			number = ThumbnailsAssetFiles.Count ();  		}  	}  	break;  default:  	break;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: switch (asset.AssetType) {  case AssetType.MediaServicesHLS:  	type = Type_AMSHLS;  	break;  case AssetType.MP4:  	break;  case AssetType.MultiBitrateMP4:  	var mp4files = AssetFiles.Where (f => f.Name.EndsWith (".mp4"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = mp4files.Count ();  	type = number == 1 ? Type_Single : Type_Multi;  	break;  case AssetType.SmoothStreaming:  	type = Type_Smooth;  	var cfffiles = AssetFiles.Where (f => f.Name.EndsWith (".ismv"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".isma"' StringComparison.OrdinalIgnoreCase)).ToArray ();  	number = cfffiles.Count ();  	if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  		if (fragmentedFilesCount == AssetFiles.Count - 2) {  			number = AssetFiles.Count - 2;  			// tracks - 2 manifest files  			type = Type_LiveArchive;  		} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  			number = AssetFiles.Count - 4;  			// tracks - 4 manifest files  			type = Type_Fragmented;  		}  	}  	break;  case AssetType.Unknown:  	string ext;  	string pr = string.Empty;  	if (assetfilescount == 0)  		return Type_Empty;  	if (assetfilescount == 1) {  		number = 1;  		ext = Path.GetExtension (AssetFiles.FirstOrDefault ().Name.ToUpper ());  		if (!string.IsNullOrEmpty (ext))  			ext = ext.Substring (1);  		switch (ext) {  		case "WORKFLOW":  			type = Type_Workflow;  			break;  		default:  			type = ext;  			break;  		}  	} else {  		// multi files in asset  		var ThumbnailsAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".jpg"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".png"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".bmp"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		var XMLAssetFiles = AssetFiles.Where (f => f.Name.EndsWith (".xml"' StringComparison.OrdinalIgnoreCase)).ToArray ();  		int nonThumbnailFilesCount = AssetFiles.Count - ThumbnailsAssetFiles.Count ();  		if ((ThumbnailsAssetFiles.Count () > 0) && ((nonThumbnailFilesCount == 0) || (XMLAssetFiles.Count () == 1))) {  			type = Type_Thumbnails;  			number = ThumbnailsAssetFiles.Count ();  		}  	}  	break;  default:  	break;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  	if (fragmentedFilesCount == AssetFiles.Count - 2) {  		number = AssetFiles.Count - 2;  		// tracks - 2 manifest files  		type = Type_LiveArchive;  	} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		number = AssetFiles.Count - 4;  		// tracks - 4 manifest files  		type = Type_Fragmented;  	}  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  	if (fragmentedFilesCount == AssetFiles.Count - 2) {  		number = AssetFiles.Count - 2;  		// tracks - 2 manifest files  		type = Type_LiveArchive;  	} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		number = AssetFiles.Count - 4;  		// tracks - 4 manifest files  		type = Type_Fragmented;  	}  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  	if (fragmentedFilesCount == AssetFiles.Count - 2) {  		number = AssetFiles.Count - 2;  		// tracks - 2 manifest files  		type = Type_LiveArchive;  	} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		number = AssetFiles.Count - 4;  		// tracks - 4 manifest files  		type = Type_Fragmented;  	}  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  	if (fragmentedFilesCount == AssetFiles.Count - 2) {  		number = AssetFiles.Count - 2;  		// tracks - 2 manifest files  		type = Type_LiveArchive;  	} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		number = AssetFiles.Count - 4;  		// tracks - 4 manifest files  		type = Type_Fragmented;  	}  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  	if (fragmentedFilesCount == AssetFiles.Count - 2) {  		number = AssetFiles.Count - 2;  		// tracks - 2 manifest files  		type = Type_LiveArchive;  	} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		number = AssetFiles.Count - 4;  		// tracks - 4 manifest files  		type = Type_Fragmented;  	}  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (number == 0 && AssetFiles.Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith (".ismc"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	var fragmentedFilesCount = AssetFiles.Where (f => f.AssetFileOptions == AssetFileOptions.Fragmented).Count ();  	if (fragmentedFilesCount == AssetFiles.Count - 2) {  		number = AssetFiles.Count - 2;  		// tracks - 2 manifest files  		type = Type_LiveArchive;  	} else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  		number = AssetFiles.Count - 4;  		// tracks - 4 manifest files  		type = Type_Fragmented;  	}  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (fragmentedFilesCount == AssetFiles.Count - 2) {  	number = AssetFiles.Count - 2;  	// tracks - 2 manifest files  	type = Type_LiveArchive;  } else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	number = AssetFiles.Count - 4;  	// tracks - 4 manifest files  	type = Type_Fragmented;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (fragmentedFilesCount == AssetFiles.Count - 2) {  	number = AssetFiles.Count - 2;  	// tracks - 2 manifest files  	type = Type_LiveArchive;  } else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	number = AssetFiles.Count - 4;  	// tracks - 4 manifest files  	type = Type_Fragmented;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (fragmentedFilesCount == AssetFiles.Count - 2) {  	number = AssetFiles.Count - 2;  	// tracks - 2 manifest files  	type = Type_LiveArchive;  } else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	number = AssetFiles.Count - 4;  	// tracks - 4 manifest files  	type = Type_Fragmented;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (fragmentedFilesCount == AssetFiles.Count - 2) {  	number = AssetFiles.Count - 2;  	// tracks - 2 manifest files  	type = Type_LiveArchive;  } else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	number = AssetFiles.Count - 4;  	// tracks - 4 manifest files  	type = Type_Fragmented;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if (fragmentedFilesCount == AssetFiles.Count - 2) {  	number = AssetFiles.Count - 2;  	// tracks - 2 manifest files  	type = Type_LiveArchive;  } else if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	number = AssetFiles.Count - 4;  	// tracks - 4 manifest files  	type = Type_Fragmented;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: number = AssetFiles.Count - 2;  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	number = AssetFiles.Count - 4;  	// tracks - 4 manifest files  	type = Type_Fragmented;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	number = AssetFiles.Count - 4;  	// tracks - 4 manifest files  	type = Type_Fragmented;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: if ((fragmentedFilesCount == AssetFiles.Count - 4) && AssetFiles.Where (f => f.Name.EndsWith ("_manifest.xml"' StringComparison.OrdinalIgnoreCase) || f.Name.EndsWith ("_metadata.xml"' StringComparison.OrdinalIgnoreCase)).Count () == 2) {  	number = AssetFiles.Count - 4;  	// tracks - 4 manifest files  	type = Type_Fragmented;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetAssetType,The following statement contains a magic number: number = AssetFiles.Count - 4;  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,FormatByteSize,The following statement contains a magic number: if (byteCountl.HasValue == true) {  	long byteCount = (long)byteCountl;  	string[] suf =  {  		"B"'  		"KB"'  		"MB"'  		"GB"'  		"TB"'  		"PB"'  		"EB"  	};  	//Longs run out around EB  	if (byteCount == 0)  		return "0 " + suf [0];  	long bytes = Math.Abs (byteCount);  	int place = Convert.ToInt32 (Math.Floor (Math.Log (bytes' 1024)));  	double num = Math.Round (bytes / Math.Pow (1024' place)' 1);  	return (Math.Sign (byteCount) * num).ToString () + " " + suf [place];  } else  	return null;  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,FormatByteSize,The following statement contains a magic number: if (byteCountl.HasValue == true) {  	long byteCount = (long)byteCountl;  	string[] suf =  {  		"B"'  		"KB"'  		"MB"'  		"GB"'  		"TB"'  		"PB"'  		"EB"  	};  	//Longs run out around EB  	if (byteCount == 0)  		return "0 " + suf [0];  	long bytes = Math.Abs (byteCount);  	int place = Convert.ToInt32 (Math.Floor (Math.Log (bytes' 1024)));  	double num = Math.Round (bytes / Math.Pow (1024' place)' 1);  	return (Math.Sign (byteCount) * num).ToString () + " " + suf [place];  } else  	return null;  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,Inverse_FormatByteSize,The following statement contains a magic number: if (sizes.Any (s => mystring.EndsWith (" " + s.unitn))) {  	var val = mystring.Substring (0' mystring.Length - 2).Trim ();  	try {  		var valdouble = double.Parse (val);  		var myunit = mystring.Substring (mystring.Length - 2' 2).Trim ();  		var mymult = sizes.Where (s => s.unitn == myunit).FirstOrDefault ().mult;  		return (long)(valdouble * mymult);  	} catch {  		return null;  	}  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,Inverse_FormatByteSize,The following statement contains a magic number: if (sizes.Any (s => mystring.EndsWith (" " + s.unitn))) {  	var val = mystring.Substring (0' mystring.Length - 2).Trim ();  	try {  		var valdouble = double.Parse (val);  		var myunit = mystring.Substring (mystring.Length - 2' 2).Trim ();  		var mymult = sizes.Where (s => s.unitn == myunit).FirstOrDefault ().mult;  		return (long)(valdouble * mymult);  	} catch {  		return null;  	}  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,Inverse_FormatByteSize,The following statement contains a magic number: if (sizes.Any (s => mystring.EndsWith (" " + s.unitn))) {  	var val = mystring.Substring (0' mystring.Length - 2).Trim ();  	try {  		var valdouble = double.Parse (val);  		var myunit = mystring.Substring (mystring.Length - 2' 2).Trim ();  		var mymult = sizes.Where (s => s.unitn == myunit).FirstOrDefault ().mult;  		return (long)(valdouble * mymult);  	} catch {  		return null;  	}  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,Inverse_FormatByteSize,The following statement contains a magic number: try {  	var valdouble = double.Parse (val);  	var myunit = mystring.Substring (mystring.Length - 2' 2).Trim ();  	var mymult = sizes.Where (s => s.unitn == myunit).FirstOrDefault ().mult;  	return (long)(valdouble * mymult);  } catch {  	return null;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,Inverse_FormatByteSize,The following statement contains a magic number: try {  	var valdouble = double.Parse (val);  	var myunit = mystring.Substring (mystring.Length - 2' 2).Trim ();  	var mymult = sizes.Where (s => s.unitn == myunit).FirstOrDefault ().mult;  	return (long)(valdouble * mymult);  } catch {  	return null;  }  
Magic Number,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,AssetFileNameIsOk,The following statement contains a magic number: if (filename.Length > 248) {  	return false;  }  
Magic Number,AMSExplorer,EncodingAMEPreset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEPreset.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,EncodingAMEPreset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEPreset.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Magic Number,AMSExplorer,EncodingAMEPreset,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingAMEPreset.cs,InitializeComponent,The following statement contains a magic number: this.label34.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(46))))' ((int)(((byte)(128))))' ((int)(((byte)(171)))));  
Duplicate Code,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,ProcessImportFromAzureStorage,The method contains a code clone-set at the following line numbers (starting from the method definition): ((84' 113)' (139' 168))
Missing Default,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,CreateFilterTracks,The following switch statement is missing a default case: switch (condition.property) {  case (FilterProperty.Bitrate):  	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackBitrateRangeCondition (ReturnFilterTrackBitrateRangeFromString (condition.value)' oper));  	break;  case (FilterProperty.FourCC):  	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackFourCCCondition (condition.value' oper));  	break;  case (FilterProperty.Language):  	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackLanguageCondition (condition.value' oper));  	break;  case (FilterProperty.Name):  	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackNameCondition (condition.value' oper));  	break;  case (FilterProperty.Type):  	var mytype = (FilterTrackType)Enum.Parse (typeof(FilterTrackType)' condition.value);  	filterTrackSelectStatement.PropertyConditions.Add (new FilterTrackTypeCondition (mytype' oper));  	break;  }  
Missing Default,AMSExplorer,DynManifestFilter,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\DynManifestFilter.cs,dataGridViewTracks_CurrentCellDirtyStateChanged,The following switch statement is missing a default case: switch (dataGridViewTracks.CurrentCell.ColumnIndex) {  case 0:  	// property  	filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].property = dataGridViewTracks.CurrentCell.Value.ToString ();  	break;  case 1:  	// operator  	filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].oper = dataGridViewTracks.CurrentCell.Value.ToString ();  	break;  case 2:  	// value  	filtertracks [listBoxTracks.SelectedIndex].conditions [dataGridViewTracks.CurrentCell.RowIndex].value = dataGridViewTracks.CurrentCell.Value.ToString ();  	break;  }  
Missing Default,AMSExplorer,EncodingMES,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\EncodingMES.cs,AddThumbnailJSON,The following switch statement is missing a default case: switch (thtype) {  case ThumbnailType.Bmp:  	thEntry.BmpLayers = new JArray () as dynamic;  	thEntry.BmpLayers.Add (Layer);  	break;  case ThumbnailType.Png:  	thEntry.PngLayers = new JArray () as dynamic;  	thEntry.PngLayers.Add (Layer);  	break;  case ThumbnailType.Jpg:  	thEntry.JpgLayers = new JArray () as dynamic;  	thEntry.JpgLayers.Add (Layer);  	break;  }  
Missing Default,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The following switch statement is missing a default case: switch (usertask.InputAssetType) {  case TypeInputAssetGeneric.InputJobAssets:  	assetname = asset.Name;  	break;  case TypeInputAssetGeneric.SpecificAssetID:  	assetname = AssetInfo.GetAsset (usertask.InputAsset' _context).Name;  	break;  case TypeInputAssetGeneric.TaskOutputAsset:  	assetname = "output of task#" + usertask.InputAsset;  	break;  }  
Missing Default,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The following switch statement is missing a default case: switch (usertask.InputAssetType) {  case TypeInputAssetGeneric.InputJobAssets:  	job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (asset);  	break;  case TypeInputAssetGeneric.SpecificAssetID:  	job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (AssetInfo.GetAsset (usertask.InputAsset' _context));  	break;  case TypeInputAssetGeneric.TaskOutputAsset:  	var oasset = job.Tasks [Convert.ToInt16 (usertask.InputAsset)].OutputAssets;  	job.Tasks [gentasks.IndexOf (usertask)].InputAssets.AddRange (oasset);  	break;  }  
Missing Default,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The following switch statement is missing a default case: switch (usertask.InputAssetType) {  case TypeInputAssetGeneric.InputJobAssets:  	assetname = inputasssetname;  	break;  case TypeInputAssetGeneric.SpecificAssetID:  	assetname = AssetInfo.GetAsset (usertask.InputAsset' _context).Name;  	break;  case TypeInputAssetGeneric.TaskOutputAsset:  	assetname = "output of task#" + usertask.InputAsset;  	break;  }  
Missing Default,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoMenuProcessGeneric,The following switch statement is missing a default case: switch (usertask.InputAssetType) {  case TypeInputAssetGeneric.InputJobAssets:  	job.Tasks [gentasks.IndexOf (usertask)].InputAssets.AddRange (SelectedAssets);  	break;  case TypeInputAssetGeneric.SpecificAssetID:  	job.Tasks [gentasks.IndexOf (usertask)].InputAssets.Add (AssetInfo.GetAsset (usertask.InputAsset' _context));  	break;  case TypeInputAssetGeneric.TaskOutputAsset:  	var oasset = job.Tasks [Convert.ToInt16 (usertask.InputAsset) - 1].OutputAssets;  	job.Tasks [gentasks.IndexOf (usertask)].InputAssets.AddRange (oasset);  	break;  }  
Missing Default,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENC,The following switch statement is missing a default case: switch (form4.GetDetailedTokenType) {  case ExplorerTokenType.SWT:  case ExplorerTokenType.JWTSym:  	mytokenverifkey = new SymmetricVerificationKey (Convert.FromBase64String (form4.SymmetricKey));  	break;  case ExplorerTokenType.JWTOpenID:  	OpenIdDoc = form4.GetOpenIdDiscoveryDocument;  	break;  case ExplorerTokenType.JWTX509:  	mytokenverifkey = new X509CertTokenVerificationKey (form4.GetX509Certificate);  	break;  }  
Missing Default,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionAndKeyDeliveryWithCENCCbcs,The following switch statement is missing a default case: switch (form4.GetDetailedTokenType) {  case ExplorerTokenType.SWT:  case ExplorerTokenType.JWTSym:  	mytokenverifkey = new SymmetricVerificationKey (Convert.FromBase64String (form4.SymmetricKey));  	break;  case ExplorerTokenType.JWTOpenID:  	OpenIdDoc = form4.GetOpenIdDiscoveryDocument;  	break;  case ExplorerTokenType.JWTX509:  	mytokenverifkey = new X509CertTokenVerificationKey (form4.GetX509Certificate);  	break;  }  
Missing Default,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,DoDynamicEncryptionWithAES,The following switch statement is missing a default case: switch (form3.GetDetailedTokenType) {  case ExplorerTokenType.SWT:  case ExplorerTokenType.JWTSym:  	mytokenverifkey = new SymmetricVerificationKey (Convert.FromBase64String (form3.SymmetricKey));  	break;  case ExplorerTokenType.JWTOpenID:  	OpenIdDoc = form3.GetOpenIdDiscoveryDocument;  	break;  case ExplorerTokenType.JWTX509:  	mytokenverifkey = new X509CertTokenVerificationKey (form3.GetX509Certificate);  	break;  }  
Missing Default,AMSExplorer,Mainform,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\GridTransfer.cs,SetRadiobuttonDisplayProgram,The following switch statement is missing a default case: switch (value) {  case enumDisplayProgram.Any:  	radioButtonChAll.Checked = true;  	break;  case enumDisplayProgram.None:  	radioButtonChNone.Checked = true;  	break;  case enumDisplayProgram.Selected:  	radioButtonChSelected.Checked = true;  	break;  }  
Missing Default,AMSExplorer,AMSLogin,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\AMSLogin.cs,buttonExport_Click,The following switch statement is missing a default case: switch (diag) {  case DialogResult.Yes:  	break;  case DialogResult.No:  	exportAll = false;  	break;  case DialogResult.Cancel:  	return;  }  
Missing Default,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,ReturnNameForProtocol,The following switch statement is missing a default case: switch (protocol) {  case StreamingProtocol.FragmentedMP4:  	name = AMSExplorer.Properties.Resources.Program_ReturnNameForProtocol_FragmentedMP4Smooth;  	break;  case StreamingProtocol.RTMP:  	name = AMSExplorer.Properties.Resources.Program_ReturnNameForProtocol_RTMP;  	break;  case StreamingProtocol.RTPMPEG2TS:  	name = AMSExplorer.Properties.Resources.Program_ReturnNameForProtocol_RTPMPEG2TransportStream;  	break;  }  
Missing Default,AMSExplorer,Program,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,GetBrowserEmulationMode,The following switch statement is missing a default case: switch (browserVersion) {  case 7:  	mode = 7000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE7 Standards mode.   	break;  case 8:  	mode = 8000;  	// Webpages containing standards-based !DOCTYPE directives are displayed in IE8 mode.   	break;  case 9:  	mode = 9000;  	// Internet Explorer 9. Webpages containing standards-based !DOCTYPE directives are displayed in IE9 mode.                      	break;  case 10:  	mode = 10000;  	// Internet Explorer 10.  	break;  }  
Missing Default,AMSExplorer,AssetInfo,F:\newReposMay17\Azure_Azure-Media-Services-Explorer\AMSExplorer\Program.cs,DoPlayBackWithStreamingEndpoint,The following switch statement is missing a default case: switch (keytype) {  case AssetProtectionType.None:  	break;  case AssetProtectionType.AES:  case AssetProtectionType.PlayReady:  case AssetProtectionType.Widevine:  case AssetProtectionType.PlayReadyAndWidevine:  	tokenresult = DynamicEncryption.GetTestToken (myasset' context' displayUI: true);  	if (!string.IsNullOrEmpty (tokenresult.TokenString)) {  		tokenresult.TokenString = HttpUtility.UrlEncode (Constants.Bearer + tokenresult.TokenString);  		//tokenresult.TokenString = Constants.Bearer + tokenresult.TokenString;  	}  	break;  }  
