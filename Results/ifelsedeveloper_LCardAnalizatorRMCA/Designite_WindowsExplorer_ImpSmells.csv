Implementation smell,Namespace,Class,File,Method,Description
Long Method,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The method has 269 lines of code.
Long Method,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The method has 169 lines of code.
Long Method,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The method has 144 lines of code.
Complex Method,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,Cyclomatic complexity of the method is 41
Complex Method,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,Cyclomatic complexity of the method is 25
Complex Method,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,btnGo_Click,Cyclomatic complexity of the method is 11
Complex Method,WindowsExplorer,ServerEnum,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,EnumerateServers,Cyclomatic complexity of the method is 13
Long Parameter List,WindowsExplorer,Win32,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,SHGetFileInfo,The method has 5 parameters.
Long Parameter List,WindowsExplorer,Win32,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,CreateDIBSection,The method has 6 parameters.
Long Parameter List,WindowsExplorer,ServerEnum,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,WNetOpenEnum,The method has 5 parameters.
Long Parameter List,WindowsExplorer,ServerEnum,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,EnumerateServers,The method has 6 parameters.
Long Parameter List,WindowsExplorer,ServerEnum,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ServerEnum,The method has 5 parameters.
Long Parameter List,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,frmOptions,The method has 5 parameters.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(ExplorerTree)); " is 133.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The length of the statement  "	this.txtPath.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 186.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The length of the statement  "	this.btnGo.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 141.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The length of the statement  "	this.tvwMain.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 231.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The length of the statement  "	this.tvwMain.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 158.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The length of the statement  "	this.imageList1.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject ("imageList1.ImageStream"))); " is 121.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The length of the statement  "	this.listView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 233.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The length of the statement  "	this.grptoolbar.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 189.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreTreeNode,The length of the statement  "				if ((String.Compare (node.Text' "My Documents") == 0) || (String.Compare (node.Text' "My Computer") == 0) || (String.Compare (node.Text' "Microsoft Windows Network") == 0) || (String.Compare (node.Text' "My Network Places") == 0)) { " is 232.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The length of the statement  "		if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) { " is 361.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The length of the statement  "					ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' ""); " is 189.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The length of the statement  "					ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS); " is 188.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterSelect,The length of the statement  "		if ((String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0)) { " is 159.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,UpdateListGoFwd,The length of the statement  "	if ((listView1.Items.Count > 0) && (String.Compare (listView1.Items [listView1.Items.Count - 1].SubItems [1].Text' "Selected") == 0)) " is 133.
Long Statement,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,btnUp_Click,The length of the statement  "		//MessageBox.Show ("Parent directory does not exists"'"Directory Not Found"'MessageBoxButtons.OK'MessageBoxIcon.Information );  " is 126.
Long Statement,WindowsExplorer,ServerEnum,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,EnumerateServers,The length of the statement  "					if ((kPath.IndexOf (pRsrc.lpRemoteName) >= 0) || (String.Compare (pRsrc.lpRemoteName' "Microsoft Windows Network") == 0)) { " is 123.
Long Statement,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,chkMyT_CheckedChanged,The length of the statement  "	//				DialogResult = MessageBox.Show(" You won't be able to customize the settings' once you make the toolbar invisible. Do you want to continue?"'"Information ExplorerTree"'MessageBoxButtons.YesNo 'MessageBoxIcon.Information ); " is 228.
Complex Conditional,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreTreeNode,The conditional expression  "(String.Compare (node.Text' "My Documents") == 0) || (String.Compare (node.Text' "My Computer") == 0) || (String.Compare (node.Text' "Microsoft Windows Network") == 0) || (String.Compare (node.Text' "My Network Places") == 0)"  is complex.
Complex Conditional,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The conditional expression  "(String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))"  is complex.
Empty Catch Block,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreTreeNode,The method has an empty catch block.
Empty Catch Block,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The method has an empty catch block.
Empty Catch Block,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The method has an empty catch block.
Empty Catch Block,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterSelect,The method has an empty catch block.
Empty Catch Block,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,btnGo_Click,The method has an empty catch block.
Empty Catch Block,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,btnUp_Click,The method has an empty catch block.
Empty Catch Block,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,txtPath_TextChanged,The method has an empty catch block.
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnRefresh.Location = new System.Drawing.Point (96' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnRefresh.Location = new System.Drawing.Point (96' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnRefresh.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnRefresh.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnRefresh.TabIndex = 62;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.txtPath.Location = new System.Drawing.Point (0' 19);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.txtPath.Size = new System.Drawing.Size (220' 20);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.txtPath.Size = new System.Drawing.Size (220' 20);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.txtPath.TabIndex = 61;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnGo.Location = new System.Drawing.Point (216' 16);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnGo.Location = new System.Drawing.Point (216' 16);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnGo.Size = new System.Drawing.Size (24' 22);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnGo.Size = new System.Drawing.Size (24' 22);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnGo.TabIndex = 60;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.tvwMain.Location = new System.Drawing.Point (0' 40);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.tvwMain.SelectedImageIndex = 2;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.tvwMain.Size = new System.Drawing.Size (240' 294);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.tvwMain.Size = new System.Drawing.Size (240' 294);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.tvwMain.TabIndex = 59;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (2' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (3' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (4' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (5' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (6' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (7' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (8' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (9' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (10' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (11' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (12' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (13' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (14' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (15' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (16' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (17' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (18' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (19' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (20' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (21' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (22' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (23' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (24' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (25' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (26' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (27' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (28' "");  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnHome.Location = new System.Drawing.Point (118' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnHome.Location = new System.Drawing.Point (118' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnHome.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnHome.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnHome.TabIndex = 63;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Location = new System.Drawing.Point (30' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Location = new System.Drawing.Point (30' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.TabIndex = 64;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Location = new System.Drawing.Point (52' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Location = new System.Drawing.Point (52' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.TabIndex = 65;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Location = new System.Drawing.Point (74' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Location = new System.Drawing.Point (74' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.TabIndex = 67;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Location = new System.Drawing.Point (8' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Location = new System.Drawing.Point (8' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.TabIndex = 70;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnInfo.Location = new System.Drawing.Point (139' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnInfo.Location = new System.Drawing.Point (139' 8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnInfo.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnInfo.Size = new System.Drawing.Size (17' 17);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.btnInfo.TabIndex = 71;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Location = new System.Drawing.Point (8' 208);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Location = new System.Drawing.Point (8' 208);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Size = new System.Drawing.Size (224' 48);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Size = new System.Drawing.Size (224' 48);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.listView1.TabIndex = 68;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.grptoolbar.Location = new System.Drawing.Point (-8' -8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.grptoolbar.Location = new System.Drawing.Point (-8' -8);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.grptoolbar.Size = new System.Drawing.Size (256' 32);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.grptoolbar.Size = new System.Drawing.Size (256' 32);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.grptoolbar.TabIndex = 71;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (240' 336);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (240' 336);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if ((!showAddressbar) && (!showToolbar)) {  	tvwMain.Top = 0;  	txtPath.Visible = false;  	btnGo.Visible = false;  	grptoolbar.Visible = false;  	tvwMain.Height = this.Height;  }  else {  	if (showToolbar && (!showAddressbar)) {  		tvwMain.Top = 20;  		txtPath.Visible = false;  		btnGo.Visible = false;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = true;  	}  	else if (showAddressbar && (!showToolbar)) {  		tvwMain.Top = 20;  		txtPath.Top = 1;  		btnGo.Top = -2;  		txtPath.Visible = true;  		btnGo.Visible = true;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = false;  	}  	else {  		tvwMain.Top = 40;  		txtPath.Visible = true;  		btnGo.Visible = true;  		txtPath.Top = 19;  		btnGo.Top = 16;  		grptoolbar.Visible = true;  		tvwMain.Height = this.Height - 40;  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if ((!showAddressbar) && (!showToolbar)) {  	tvwMain.Top = 0;  	txtPath.Visible = false;  	btnGo.Visible = false;  	grptoolbar.Visible = false;  	tvwMain.Height = this.Height;  }  else {  	if (showToolbar && (!showAddressbar)) {  		tvwMain.Top = 20;  		txtPath.Visible = false;  		btnGo.Visible = false;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = true;  	}  	else if (showAddressbar && (!showToolbar)) {  		tvwMain.Top = 20;  		txtPath.Top = 1;  		btnGo.Top = -2;  		txtPath.Visible = true;  		btnGo.Visible = true;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = false;  	}  	else {  		tvwMain.Top = 40;  		txtPath.Visible = true;  		btnGo.Visible = true;  		txtPath.Top = 19;  		btnGo.Top = 16;  		grptoolbar.Visible = true;  		tvwMain.Height = this.Height - 40;  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if ((!showAddressbar) && (!showToolbar)) {  	tvwMain.Top = 0;  	txtPath.Visible = false;  	btnGo.Visible = false;  	grptoolbar.Visible = false;  	tvwMain.Height = this.Height;  }  else {  	if (showToolbar && (!showAddressbar)) {  		tvwMain.Top = 20;  		txtPath.Visible = false;  		btnGo.Visible = false;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = true;  	}  	else if (showAddressbar && (!showToolbar)) {  		tvwMain.Top = 20;  		txtPath.Top = 1;  		btnGo.Top = -2;  		txtPath.Visible = true;  		btnGo.Visible = true;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = false;  	}  	else {  		tvwMain.Top = 40;  		txtPath.Visible = true;  		btnGo.Visible = true;  		txtPath.Top = 19;  		btnGo.Top = 16;  		grptoolbar.Visible = true;  		tvwMain.Height = this.Height - 40;  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if ((!showAddressbar) && (!showToolbar)) {  	tvwMain.Top = 0;  	txtPath.Visible = false;  	btnGo.Visible = false;  	grptoolbar.Visible = false;  	tvwMain.Height = this.Height;  }  else {  	if (showToolbar && (!showAddressbar)) {  		tvwMain.Top = 20;  		txtPath.Visible = false;  		btnGo.Visible = false;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = true;  	}  	else if (showAddressbar && (!showToolbar)) {  		tvwMain.Top = 20;  		txtPath.Top = 1;  		btnGo.Top = -2;  		txtPath.Visible = true;  		btnGo.Visible = true;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = false;  	}  	else {  		tvwMain.Top = 40;  		txtPath.Visible = true;  		btnGo.Visible = true;  		txtPath.Top = 19;  		btnGo.Top = 16;  		grptoolbar.Visible = true;  		tvwMain.Height = this.Height - 40;  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if ((!showAddressbar) && (!showToolbar)) {  	tvwMain.Top = 0;  	txtPath.Visible = false;  	btnGo.Visible = false;  	grptoolbar.Visible = false;  	tvwMain.Height = this.Height;  }  else {  	if (showToolbar && (!showAddressbar)) {  		tvwMain.Top = 20;  		txtPath.Visible = false;  		btnGo.Visible = false;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = true;  	}  	else if (showAddressbar && (!showToolbar)) {  		tvwMain.Top = 20;  		txtPath.Top = 1;  		btnGo.Top = -2;  		txtPath.Visible = true;  		btnGo.Visible = true;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = false;  	}  	else {  		tvwMain.Top = 40;  		txtPath.Visible = true;  		btnGo.Visible = true;  		txtPath.Top = 19;  		btnGo.Top = 16;  		grptoolbar.Visible = true;  		tvwMain.Height = this.Height - 40;  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if ((!showAddressbar) && (!showToolbar)) {  	tvwMain.Top = 0;  	txtPath.Visible = false;  	btnGo.Visible = false;  	grptoolbar.Visible = false;  	tvwMain.Height = this.Height;  }  else {  	if (showToolbar && (!showAddressbar)) {  		tvwMain.Top = 20;  		txtPath.Visible = false;  		btnGo.Visible = false;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = true;  	}  	else if (showAddressbar && (!showToolbar)) {  		tvwMain.Top = 20;  		txtPath.Top = 1;  		btnGo.Top = -2;  		txtPath.Visible = true;  		btnGo.Visible = true;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = false;  	}  	else {  		tvwMain.Top = 40;  		txtPath.Visible = true;  		btnGo.Visible = true;  		txtPath.Top = 19;  		btnGo.Top = 16;  		grptoolbar.Visible = true;  		tvwMain.Height = this.Height - 40;  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if ((!showAddressbar) && (!showToolbar)) {  	tvwMain.Top = 0;  	txtPath.Visible = false;  	btnGo.Visible = false;  	grptoolbar.Visible = false;  	tvwMain.Height = this.Height;  }  else {  	if (showToolbar && (!showAddressbar)) {  		tvwMain.Top = 20;  		txtPath.Visible = false;  		btnGo.Visible = false;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = true;  	}  	else if (showAddressbar && (!showToolbar)) {  		tvwMain.Top = 20;  		txtPath.Top = 1;  		btnGo.Top = -2;  		txtPath.Visible = true;  		btnGo.Visible = true;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = false;  	}  	else {  		tvwMain.Top = 40;  		txtPath.Visible = true;  		btnGo.Visible = true;  		txtPath.Top = 19;  		btnGo.Top = 16;  		grptoolbar.Visible = true;  		tvwMain.Height = this.Height - 40;  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if ((!showAddressbar) && (!showToolbar)) {  	tvwMain.Top = 0;  	txtPath.Visible = false;  	btnGo.Visible = false;  	grptoolbar.Visible = false;  	tvwMain.Height = this.Height;  }  else {  	if (showToolbar && (!showAddressbar)) {  		tvwMain.Top = 20;  		txtPath.Visible = false;  		btnGo.Visible = false;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = true;  	}  	else if (showAddressbar && (!showToolbar)) {  		tvwMain.Top = 20;  		txtPath.Top = 1;  		btnGo.Top = -2;  		txtPath.Visible = true;  		btnGo.Visible = true;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = false;  	}  	else {  		tvwMain.Top = 40;  		txtPath.Visible = true;  		btnGo.Visible = true;  		txtPath.Top = 19;  		btnGo.Top = 16;  		grptoolbar.Visible = true;  		tvwMain.Height = this.Height - 40;  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if ((!showAddressbar) && (!showToolbar)) {  	tvwMain.Top = 0;  	txtPath.Visible = false;  	btnGo.Visible = false;  	grptoolbar.Visible = false;  	tvwMain.Height = this.Height;  }  else {  	if (showToolbar && (!showAddressbar)) {  		tvwMain.Top = 20;  		txtPath.Visible = false;  		btnGo.Visible = false;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = true;  	}  	else if (showAddressbar && (!showToolbar)) {  		tvwMain.Top = 20;  		txtPath.Top = 1;  		btnGo.Top = -2;  		txtPath.Visible = true;  		btnGo.Visible = true;  		tvwMain.Height = this.Height - 20;  		grptoolbar.Visible = false;  	}  	else {  		tvwMain.Top = 40;  		txtPath.Visible = true;  		btnGo.Visible = true;  		txtPath.Top = 19;  		btnGo.Top = 16;  		grptoolbar.Visible = true;  		tvwMain.Height = this.Height - 40;  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showToolbar && (!showAddressbar)) {  	tvwMain.Top = 20;  	txtPath.Visible = false;  	btnGo.Visible = false;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = true;  }  else if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showToolbar && (!showAddressbar)) {  	tvwMain.Top = 20;  	txtPath.Visible = false;  	btnGo.Visible = false;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = true;  }  else if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showToolbar && (!showAddressbar)) {  	tvwMain.Top = 20;  	txtPath.Visible = false;  	btnGo.Visible = false;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = true;  }  else if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showToolbar && (!showAddressbar)) {  	tvwMain.Top = 20;  	txtPath.Visible = false;  	btnGo.Visible = false;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = true;  }  else if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showToolbar && (!showAddressbar)) {  	tvwMain.Top = 20;  	txtPath.Visible = false;  	btnGo.Visible = false;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = true;  }  else if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showToolbar && (!showAddressbar)) {  	tvwMain.Top = 20;  	txtPath.Visible = false;  	btnGo.Visible = false;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = true;  }  else if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showToolbar && (!showAddressbar)) {  	tvwMain.Top = 20;  	txtPath.Visible = false;  	btnGo.Visible = false;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = true;  }  else if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showToolbar && (!showAddressbar)) {  	tvwMain.Top = 20;  	txtPath.Visible = false;  	btnGo.Visible = false;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = true;  }  else if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showToolbar && (!showAddressbar)) {  	tvwMain.Top = 20;  	txtPath.Visible = false;  	btnGo.Visible = false;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = true;  }  else if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: tvwMain.Top = 20;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: tvwMain.Height = this.Height - 20;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: if (showAddressbar && (!showToolbar)) {  	tvwMain.Top = 20;  	txtPath.Top = 1;  	btnGo.Top = -2;  	txtPath.Visible = true;  	btnGo.Visible = true;  	tvwMain.Height = this.Height - 20;  	grptoolbar.Visible = false;  }  else {  	tvwMain.Top = 40;  	txtPath.Visible = true;  	btnGo.Visible = true;  	txtPath.Top = 19;  	btnGo.Top = 16;  	grptoolbar.Visible = true;  	tvwMain.Height = this.Height - 40;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: tvwMain.Top = 20;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: btnGo.Top = -2;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: tvwMain.Height = this.Height - 20;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: tvwMain.Top = 40;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: txtPath.Top = 19;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: btnGo.Top = 16;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,refreshView,The following statement contains a magic number: tvwMain.Height = this.Height - 40;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodeD.ImageIndex = 10;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodeD.SelectedImageIndex = 10;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: if (ShowMyDocuments) {  	//Add My Documents and Desktop folder outside  	nodemd = new TreeNode ();  	nodemd.Tag = Environment.GetFolderPath (Environment.SpecialFolder.Personal);  	nodemd.Text = "My Documents";  	nodemd.ImageIndex = 9;  	nodemd.SelectedImageIndex = 9;  	nodeD.Nodes.Add (nodemd);  	FillFilesandDirs (nodemd);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: if (ShowMyDocuments) {  	//Add My Documents and Desktop folder outside  	nodemd = new TreeNode ();  	nodemd.Tag = Environment.GetFolderPath (Environment.SpecialFolder.Personal);  	nodemd.Text = "My Documents";  	nodemd.ImageIndex = 9;  	nodemd.SelectedImageIndex = 9;  	nodeD.Nodes.Add (nodemd);  	FillFilesandDirs (nodemd);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodemd.ImageIndex = 9;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodemd.SelectedImageIndex = 9;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodemyC.ImageIndex = 12;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodemyC.SelectedImageIndex = 12;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodemNc.ImageIndex = 12;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodemNc.SelectedImageIndex = 12;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: if (ShowMyNetwork) {  	nodemyN = new TreeNode ();  	nodemyN.Tag = "My Network Places";  	nodemyN.Text = "My Network Places";  	nodemyN.ImageIndex = 13;  	nodemyN.SelectedImageIndex = 13;  	nodeD.Nodes.Add (nodemyN);  	nodemyN.EnsureVisible ();  	nodeEN = new TreeNode ();  	nodeEN.Tag = "Entire Network";  	nodeEN.Text = "Entire Network";  	nodeEN.ImageIndex = 14;  	nodeEN.SelectedImageIndex = 14;  	nodemyN.Nodes.Add (nodeEN);  	nodeNN = new TreeNode ();  	nodeNN.Tag = "Network Node";  	nodeNN.Text = "Network Node";  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	nodeEN.Nodes.Add (nodeNN);  	nodeEN.EnsureVisible ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: if (ShowMyNetwork) {  	nodemyN = new TreeNode ();  	nodemyN.Tag = "My Network Places";  	nodemyN.Text = "My Network Places";  	nodemyN.ImageIndex = 13;  	nodemyN.SelectedImageIndex = 13;  	nodeD.Nodes.Add (nodemyN);  	nodemyN.EnsureVisible ();  	nodeEN = new TreeNode ();  	nodeEN.Tag = "Entire Network";  	nodeEN.Text = "Entire Network";  	nodeEN.ImageIndex = 14;  	nodeEN.SelectedImageIndex = 14;  	nodemyN.Nodes.Add (nodeEN);  	nodeNN = new TreeNode ();  	nodeNN.Tag = "Network Node";  	nodeNN.Text = "Network Node";  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	nodeEN.Nodes.Add (nodeNN);  	nodeEN.EnsureVisible ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: if (ShowMyNetwork) {  	nodemyN = new TreeNode ();  	nodemyN.Tag = "My Network Places";  	nodemyN.Text = "My Network Places";  	nodemyN.ImageIndex = 13;  	nodemyN.SelectedImageIndex = 13;  	nodeD.Nodes.Add (nodemyN);  	nodemyN.EnsureVisible ();  	nodeEN = new TreeNode ();  	nodeEN.Tag = "Entire Network";  	nodeEN.Text = "Entire Network";  	nodeEN.ImageIndex = 14;  	nodeEN.SelectedImageIndex = 14;  	nodemyN.Nodes.Add (nodeEN);  	nodeNN = new TreeNode ();  	nodeNN.Tag = "Network Node";  	nodeNN.Text = "Network Node";  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	nodeEN.Nodes.Add (nodeNN);  	nodeEN.EnsureVisible ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: if (ShowMyNetwork) {  	nodemyN = new TreeNode ();  	nodemyN.Tag = "My Network Places";  	nodemyN.Text = "My Network Places";  	nodemyN.ImageIndex = 13;  	nodemyN.SelectedImageIndex = 13;  	nodeD.Nodes.Add (nodemyN);  	nodemyN.EnsureVisible ();  	nodeEN = new TreeNode ();  	nodeEN.Tag = "Entire Network";  	nodeEN.Text = "Entire Network";  	nodeEN.ImageIndex = 14;  	nodeEN.SelectedImageIndex = 14;  	nodemyN.Nodes.Add (nodeEN);  	nodeNN = new TreeNode ();  	nodeNN.Tag = "Network Node";  	nodeNN.Text = "Network Node";  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	nodeEN.Nodes.Add (nodeNN);  	nodeEN.EnsureVisible ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: if (ShowMyNetwork) {  	nodemyN = new TreeNode ();  	nodemyN.Tag = "My Network Places";  	nodemyN.Text = "My Network Places";  	nodemyN.ImageIndex = 13;  	nodemyN.SelectedImageIndex = 13;  	nodeD.Nodes.Add (nodemyN);  	nodemyN.EnsureVisible ();  	nodeEN = new TreeNode ();  	nodeEN.Tag = "Entire Network";  	nodeEN.Text = "Entire Network";  	nodeEN.ImageIndex = 14;  	nodeEN.SelectedImageIndex = 14;  	nodemyN.Nodes.Add (nodeEN);  	nodeNN = new TreeNode ();  	nodeNN.Tag = "Network Node";  	nodeNN.Text = "Network Node";  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	nodeEN.Nodes.Add (nodeNN);  	nodeEN.EnsureVisible ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: if (ShowMyNetwork) {  	nodemyN = new TreeNode ();  	nodemyN.Tag = "My Network Places";  	nodemyN.Text = "My Network Places";  	nodemyN.ImageIndex = 13;  	nodemyN.SelectedImageIndex = 13;  	nodeD.Nodes.Add (nodemyN);  	nodemyN.EnsureVisible ();  	nodeEN = new TreeNode ();  	nodeEN.Tag = "Entire Network";  	nodeEN.Text = "Entire Network";  	nodeEN.ImageIndex = 14;  	nodeEN.SelectedImageIndex = 14;  	nodemyN.Nodes.Add (nodeEN);  	nodeNN = new TreeNode ();  	nodeNN.Tag = "Network Node";  	nodeNN.Text = "Network Node";  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	nodeEN.Nodes.Add (nodeNN);  	nodeEN.EnsureVisible ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodemyN.ImageIndex = 13;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodemyN.SelectedImageIndex = 13;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodeEN.ImageIndex = 14;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodeEN.SelectedImageIndex = 14;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodeNN.ImageIndex = 15;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodeNN.SelectedImageIndex = 15;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: if (ShowMyFavorites) {  	nodemf = new TreeNode ();  	nodemf.Tag = Environment.GetFolderPath (Environment.SpecialFolder.Favorites);  	nodemf.Text = "My Favorites";  	nodemf.ImageIndex = 26;  	nodemf.SelectedImageIndex = 26;  	nodeD.Nodes.Add (nodemf);  	FillFilesandDirs (nodemf);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: if (ShowMyFavorites) {  	nodemf = new TreeNode ();  	nodemf.Tag = Environment.GetFolderPath (Environment.SpecialFolder.Favorites);  	nodemf.Text = "My Favorites";  	nodemf.ImageIndex = 26;  	nodemf.SelectedImageIndex = 26;  	nodeD.Nodes.Add (nodemf);  	FillFilesandDirs (nodemf);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodemf.ImageIndex = 26;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,GetDirectory,The following statement contains a magic number: nodemf.SelectedImageIndex = 26;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.Text.IndexOf (":"' 1) > 0) {  	ExploreTreeNode (n);  }  else {  	//(String.Compare(n.Text '"My Documents")==0) || (String.Compare(n.Text'"Desktop")==0) ||   	if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  		if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  		//add each drive and files and dirs  		 {  			nodemyC.FirstNode.Remove ();  			foreach (string drive in drives) {  				nodeDrive = new TreeNode ();  				nodeDrive.Tag = drive;  				nodeDrive.Text = drive;  				//Determine icon to display by drive  				switch (Win32.GetDriveType (drive)) {  				case 2:  					nodeDrive.ImageIndex = 17;  					nodeDrive.SelectedImageIndex = 17;  					break;  				case 3:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				case 4:  					nodeDrive.ImageIndex = 8;  					nodeDrive.SelectedImageIndex = 8;  					break;  				case 5:  					nodeDrive.ImageIndex = 7;  					nodeDrive.SelectedImageIndex = 7;  					break;  				default:  					nodeDrive.ImageIndex = 0;  					nodeDrive.SelectedImageIndex = 0;  					break;  				}  				nodemyC.Nodes.Add (nodeDrive);  				nodeDrive.EnsureVisible ();  				tvwMain.Refresh ();  				try {  					//add dirs under drive  					if (Directory.Exists (drive)) {  						foreach (string dir in Directory.GetDirectories (drive)) {  							dir2 = dir;  							node = new TreeNode ();  							node.Tag = dir;  							node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  							node.ImageIndex = 1;  							nodeDrive.Nodes.Add (node);  						}  					}  					//fill those dirs  					//					foreach(TreeNode curNode in   					//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  					//					{  					//						FillFilesandDirs(curNode);  					//					}  				}  				catch (Exception)//error just add blank dir  				 {  					// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  					//					node = new TreeNode();  					//					node.Tag = dir2;  					//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  					//					node.ImageIndex = 1;  					//					tvwMain.Nodes.Add(node);  				}  				nodemyC.Expand ();  			}  		}  		if ((String.Compare (n.Text' "Entire Network") == 0)) {  			if (n.FirstNode.Text == "Network Node") {  				n.FirstNode.Remove ();  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  				foreach (string s1 in servers) {  					string s2 = "";  					s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  					if (s1.IndexOf ("NETWORK"' 1) > 0) {  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2;  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodeNN.ImageIndex = 15;  						nodeNN.SelectedImageIndex = 15;  						n.Nodes.Add (nodeNN);  					}  					else {  						TreeNode nodemNc;  						nodemN = new TreeNode ();  						nodemN.Tag = s2;  						//"my Node";  						nodemN.Text = s2;  						//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemN.ImageIndex = 16;  						nodemN.SelectedImageIndex = 16;  						n.LastNode.Nodes.Add (nodemN);  						nodemNc = new TreeNode ();  						nodemNc.Tag = "my netNode";  						nodemNc.Text = "my netNode";  						//dir.Substring(dir.LastIndexOf(@"\") + 1);  						nodemNc.ImageIndex = 12;  						nodemNc.SelectedImageIndex = 12;  						nodemN.Nodes.Add (nodemNc);  					}  				}  			}  		}  		if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  			if (n.FirstNode.Text == "my netNode") {  				n.FirstNode.Remove ();  				string pS = n.Text;  				//NETRESOURCE netRoot = new NETRESOURCE();  				ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  				foreach (string s1 in servers) {  					string s2 = "";  					if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  						s2 = s1;  						//.Substring(s1.IndexOf("\\"'2));  						nodeNN = new TreeNode ();  						nodeNN.Tag = s2;  						nodeNN.Text = s2.Substring (2);  						nodeNN.ImageIndex = 12;  						nodeNN.SelectedImageIndex = 12;  						n.Nodes.Add (nodeNN);  						foreach (string s1node in servers) {  							if (s1node.Length > 6) {  								if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  									if (s2.Length <= s1node.Length) {  										try {  											if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  												nodeNNode = new TreeNode ();  												nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  												nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  												nodeNNode.ImageIndex = 28;  												nodeNNode.SelectedImageIndex = 28;  												nodeNN.Nodes.Add (nodeNNode);  											}  										}  										catch (Exception) {  										}  									}  								}  							}  						}  					}  				}  			}  		}  	}  	else {  		ExploreTreeNode (n);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Desktop") == 0) || (String.Compare (n.Text' "Microsoft Windows Network") == 0) || (String.Compare (n.Text' "My Computer") == 0) || (String.Compare (n.Text' "My Network Places") == 0) || (String.Compare (n.Text' "Entire Network") == 0) || ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0))) {  	if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  	//add each drive and files and dirs  	 {  		nodemyC.FirstNode.Remove ();  		foreach (string drive in drives) {  			nodeDrive = new TreeNode ();  			nodeDrive.Tag = drive;  			nodeDrive.Text = drive;  			//Determine icon to display by drive  			switch (Win32.GetDriveType (drive)) {  			case 2:  				nodeDrive.ImageIndex = 17;  				nodeDrive.SelectedImageIndex = 17;  				break;  			case 3:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			case 4:  				nodeDrive.ImageIndex = 8;  				nodeDrive.SelectedImageIndex = 8;  				break;  			case 5:  				nodeDrive.ImageIndex = 7;  				nodeDrive.SelectedImageIndex = 7;  				break;  			default:  				nodeDrive.ImageIndex = 0;  				nodeDrive.SelectedImageIndex = 0;  				break;  			}  			nodemyC.Nodes.Add (nodeDrive);  			nodeDrive.EnsureVisible ();  			tvwMain.Refresh ();  			try {  				//add dirs under drive  				if (Directory.Exists (drive)) {  					foreach (string dir in Directory.GetDirectories (drive)) {  						dir2 = dir;  						node = new TreeNode ();  						node.Tag = dir;  						node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  						node.ImageIndex = 1;  						nodeDrive.Nodes.Add (node);  					}  				}  				//fill those dirs  				//					foreach(TreeNode curNode in   				//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  				//					{  				//						FillFilesandDirs(curNode);  				//					}  			}  			catch (Exception)//error just add blank dir  			 {  				// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  				//					node = new TreeNode();  				//					node.Tag = dir2;  				//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  				//					node.ImageIndex = 1;  				//					tvwMain.Nodes.Add(node);  			}  			nodemyC.Expand ();  		}  	}  	if ((String.Compare (n.Text' "Entire Network") == 0)) {  		if (n.FirstNode.Text == "Network Node") {  			n.FirstNode.Remove ();  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  			foreach (string s1 in servers) {  				string s2 = "";  				s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  				if (s1.IndexOf ("NETWORK"' 1) > 0) {  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2;  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodeNN.ImageIndex = 15;  					nodeNN.SelectedImageIndex = 15;  					n.Nodes.Add (nodeNN);  				}  				else {  					TreeNode nodemNc;  					nodemN = new TreeNode ();  					nodemN.Tag = s2;  					//"my Node";  					nodemN.Text = s2;  					//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemN.ImageIndex = 16;  					nodemN.SelectedImageIndex = 16;  					n.LastNode.Nodes.Add (nodemN);  					nodemNc = new TreeNode ();  					nodemNc.Tag = "my netNode";  					nodemNc.Text = "my netNode";  					//dir.Substring(dir.LastIndexOf(@"\") + 1);  					nodemNc.ImageIndex = 12;  					nodemNc.SelectedImageIndex = 12;  					nodemN.Nodes.Add (nodemNc);  				}  			}  		}  	}  	if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  		if (n.FirstNode.Text == "my netNode") {  			n.FirstNode.Remove ();  			string pS = n.Text;  			//NETRESOURCE netRoot = new NETRESOURCE();  			ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  			foreach (string s1 in servers) {  				string s2 = "";  				if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  					s2 = s1;  					//.Substring(s1.IndexOf("\\"'2));  					nodeNN = new TreeNode ();  					nodeNN.Tag = s2;  					nodeNN.Text = s2.Substring (2);  					nodeNN.ImageIndex = 12;  					nodeNN.SelectedImageIndex = 12;  					n.Nodes.Add (nodeNN);  					foreach (string s1node in servers) {  						if (s1node.Length > 6) {  							if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  								if (s2.Length <= s1node.Length) {  									try {  										if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  											nodeNNode = new TreeNode ();  											nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  											nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  											nodeNNode.ImageIndex = 28;  											nodeNNode.SelectedImageIndex = 28;  											nodeNN.Nodes.Add (nodeNNode);  										}  									}  									catch (Exception) {  									}  								}  							}  						}  					}  				}  			}  		}  	}  }  else {  	ExploreTreeNode (n);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "My Computer") == 0) && (nodemyC.GetNodeCount (true) < 2))///////////  //add each drive and files and dirs   {  	nodemyC.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		//Determine icon to display by drive  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		nodemyC.Nodes.Add (nodeDrive);  		nodeDrive.EnsureVisible ();  		tvwMain.Refresh ();  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  			//fill those dirs  			//					foreach(TreeNode curNode in   			//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  			//					{  			//						FillFilesandDirs(curNode);  			//					}  		}  		catch (Exception)//error just add blank dir  		 {  			// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  			//					node = new TreeNode();  			//					node.Tag = dir2;  			//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  			//					node.ImageIndex = 1;  			//					tvwMain.Nodes.Add(node);  		}  		nodemyC.Expand ();  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	//Determine icon to display by drive  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	nodemyC.Nodes.Add (nodeDrive);  	nodeDrive.EnsureVisible ();  	tvwMain.Refresh ();  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  		//fill those dirs  		//					foreach(TreeNode curNode in   		//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  		//					{  		//						FillFilesandDirs(curNode);  		//					}  	}  	catch (Exception)//error just add blank dir  	 {  		// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  		//					node = new TreeNode();  		//					node.Tag = dir2;  		//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  		//					node.ImageIndex = 1;  		//					tvwMain.Nodes.Add(node);  	}  	nodemyC.Expand ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	//Determine icon to display by drive  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	nodemyC.Nodes.Add (nodeDrive);  	nodeDrive.EnsureVisible ();  	tvwMain.Refresh ();  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  		//fill those dirs  		//					foreach(TreeNode curNode in   		//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  		//					{  		//						FillFilesandDirs(curNode);  		//					}  	}  	catch (Exception)//error just add blank dir  	 {  		// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  		//					node = new TreeNode();  		//					node.Tag = dir2;  		//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  		//					node.ImageIndex = 1;  		//					tvwMain.Nodes.Add(node);  	}  	nodemyC.Expand ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	//Determine icon to display by drive  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	nodemyC.Nodes.Add (nodeDrive);  	nodeDrive.EnsureVisible ();  	tvwMain.Refresh ();  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  		//fill those dirs  		//					foreach(TreeNode curNode in   		//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  		//					{  		//						FillFilesandDirs(curNode);  		//					}  	}  	catch (Exception)//error just add blank dir  	 {  		// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  		//					node = new TreeNode();  		//					node.Tag = dir2;  		//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  		//					node.ImageIndex = 1;  		//					tvwMain.Nodes.Add(node);  	}  	nodemyC.Expand ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	//Determine icon to display by drive  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	nodemyC.Nodes.Add (nodeDrive);  	nodeDrive.EnsureVisible ();  	tvwMain.Refresh ();  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  		//fill those dirs  		//					foreach(TreeNode curNode in   		//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  		//					{  		//						FillFilesandDirs(curNode);  		//					}  	}  	catch (Exception)//error just add blank dir  	 {  		// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  		//					node = new TreeNode();  		//					node.Tag = dir2;  		//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  		//					node.ImageIndex = 1;  		//					tvwMain.Nodes.Add(node);  	}  	nodemyC.Expand ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	//Determine icon to display by drive  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	nodemyC.Nodes.Add (nodeDrive);  	nodeDrive.EnsureVisible ();  	tvwMain.Refresh ();  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  		//fill those dirs  		//					foreach(TreeNode curNode in   		//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  		//					{  		//						FillFilesandDirs(curNode);  		//					}  	}  	catch (Exception)//error just add blank dir  	 {  		// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  		//					node = new TreeNode();  		//					node.Tag = dir2;  		//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  		//					node.ImageIndex = 1;  		//					tvwMain.Nodes.Add(node);  	}  	nodemyC.Expand ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	//Determine icon to display by drive  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	nodemyC.Nodes.Add (nodeDrive);  	nodeDrive.EnsureVisible ();  	tvwMain.Refresh ();  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  		//fill those dirs  		//					foreach(TreeNode curNode in   		//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  		//					{  		//						FillFilesandDirs(curNode);  		//					}  	}  	catch (Exception)//error just add blank dir  	 {  		// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  		//					node = new TreeNode();  		//					node.Tag = dir2;  		//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  		//					node.ImageIndex = 1;  		//					tvwMain.Nodes.Add(node);  	}  	nodemyC.Expand ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	//Determine icon to display by drive  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	nodemyC.Nodes.Add (nodeDrive);  	nodeDrive.EnsureVisible ();  	tvwMain.Refresh ();  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  		//fill those dirs  		//					foreach(TreeNode curNode in   		//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  		//					{  		//						FillFilesandDirs(curNode);  		//					}  	}  	catch (Exception)//error just add blank dir  	 {  		// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  		//					node = new TreeNode();  		//					node.Tag = dir2;  		//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  		//					node.ImageIndex = 1;  		//					tvwMain.Nodes.Add(node);  	}  	nodemyC.Expand ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	//Determine icon to display by drive  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	nodemyC.Nodes.Add (nodeDrive);  	nodeDrive.EnsureVisible ();  	tvwMain.Refresh ();  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  		//fill those dirs  		//					foreach(TreeNode curNode in   		//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  		//					{  		//						FillFilesandDirs(curNode);  		//					}  	}  	catch (Exception)//error just add blank dir  	 {  		// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  		//					node = new TreeNode();  		//					node.Tag = dir2;  		//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  		//					node.ImageIndex = 1;  		//					tvwMain.Nodes.Add(node);  	}  	nodemyC.Expand ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	//Determine icon to display by drive  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	nodemyC.Nodes.Add (nodeDrive);  	nodeDrive.EnsureVisible ();  	tvwMain.Refresh ();  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  		//fill those dirs  		//					foreach(TreeNode curNode in   		//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  		//					{  		//						FillFilesandDirs(curNode);  		//					}  	}  	catch (Exception)//error just add blank dir  	 {  		// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  		//					node = new TreeNode();  		//					node.Tag = dir2;  		//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  		//					node.ImageIndex = 1;  		//					tvwMain.Nodes.Add(node);  	}  	nodemyC.Expand ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	//Determine icon to display by drive  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	nodemyC.Nodes.Add (nodeDrive);  	nodeDrive.EnsureVisible ();  	tvwMain.Refresh ();  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  		//fill those dirs  		//					foreach(TreeNode curNode in   		//						tvwMain.Nodes[tvwMain.Nodes.Count - 1].Nodes)  		//					{  		//						FillFilesandDirs(curNode);  		//					}  	}  	catch (Exception)//error just add blank dir  	 {  		// MessageBox.Show ("Error while Filling the Explorer:" + ex.Message );  		//					node = new TreeNode();  		//					node.Tag = dir2;  		//					node.Text = dir2.Substring(dir2.LastIndexOf(@"\") + 1);  		//					node.ImageIndex = 1;  		//					tvwMain.Nodes.Add(node);  	}  	nodemyC.Expand ();  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeDrive.ImageIndex = 17;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeDrive.SelectedImageIndex = 17;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeDrive.ImageIndex = 8;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeDrive.SelectedImageIndex = 8;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeDrive.ImageIndex = 7;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeDrive.SelectedImageIndex = 7;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Entire Network") == 0)) {  	if (n.FirstNode.Text == "Network Node") {  		n.FirstNode.Remove ();  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  		foreach (string s1 in servers) {  			string s2 = "";  			s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  			if (s1.IndexOf ("NETWORK"' 1) > 0) {  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2;  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodeNN.ImageIndex = 15;  				nodeNN.SelectedImageIndex = 15;  				n.Nodes.Add (nodeNN);  			}  			else {  				TreeNode nodemNc;  				nodemN = new TreeNode ();  				nodemN.Tag = s2;  				//"my Node";  				nodemN.Text = s2;  				//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemN.ImageIndex = 16;  				nodemN.SelectedImageIndex = 16;  				n.LastNode.Nodes.Add (nodemN);  				nodemNc = new TreeNode ();  				nodemNc.Tag = "my netNode";  				nodemNc.Text = "my netNode";  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemNc.ImageIndex = 12;  				nodemNc.SelectedImageIndex = 12;  				nodemN.Nodes.Add (nodemNc);  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Entire Network") == 0)) {  	if (n.FirstNode.Text == "Network Node") {  		n.FirstNode.Remove ();  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  		foreach (string s1 in servers) {  			string s2 = "";  			s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  			if (s1.IndexOf ("NETWORK"' 1) > 0) {  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2;  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodeNN.ImageIndex = 15;  				nodeNN.SelectedImageIndex = 15;  				n.Nodes.Add (nodeNN);  			}  			else {  				TreeNode nodemNc;  				nodemN = new TreeNode ();  				nodemN.Tag = s2;  				//"my Node";  				nodemN.Text = s2;  				//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemN.ImageIndex = 16;  				nodemN.SelectedImageIndex = 16;  				n.LastNode.Nodes.Add (nodemN);  				nodemNc = new TreeNode ();  				nodemNc.Tag = "my netNode";  				nodemNc.Text = "my netNode";  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemNc.ImageIndex = 12;  				nodemNc.SelectedImageIndex = 12;  				nodemN.Nodes.Add (nodemNc);  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Entire Network") == 0)) {  	if (n.FirstNode.Text == "Network Node") {  		n.FirstNode.Remove ();  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  		foreach (string s1 in servers) {  			string s2 = "";  			s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  			if (s1.IndexOf ("NETWORK"' 1) > 0) {  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2;  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodeNN.ImageIndex = 15;  				nodeNN.SelectedImageIndex = 15;  				n.Nodes.Add (nodeNN);  			}  			else {  				TreeNode nodemNc;  				nodemN = new TreeNode ();  				nodemN.Tag = s2;  				//"my Node";  				nodemN.Text = s2;  				//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemN.ImageIndex = 16;  				nodemN.SelectedImageIndex = 16;  				n.LastNode.Nodes.Add (nodemN);  				nodemNc = new TreeNode ();  				nodemNc.Tag = "my netNode";  				nodemNc.Text = "my netNode";  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemNc.ImageIndex = 12;  				nodemNc.SelectedImageIndex = 12;  				nodemN.Nodes.Add (nodemNc);  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Entire Network") == 0)) {  	if (n.FirstNode.Text == "Network Node") {  		n.FirstNode.Remove ();  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  		foreach (string s1 in servers) {  			string s2 = "";  			s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  			if (s1.IndexOf ("NETWORK"' 1) > 0) {  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2;  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodeNN.ImageIndex = 15;  				nodeNN.SelectedImageIndex = 15;  				n.Nodes.Add (nodeNN);  			}  			else {  				TreeNode nodemNc;  				nodemN = new TreeNode ();  				nodemN.Tag = s2;  				//"my Node";  				nodemN.Text = s2;  				//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemN.ImageIndex = 16;  				nodemN.SelectedImageIndex = 16;  				n.LastNode.Nodes.Add (nodemN);  				nodemNc = new TreeNode ();  				nodemNc.Tag = "my netNode";  				nodemNc.Text = "my netNode";  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemNc.ImageIndex = 12;  				nodemNc.SelectedImageIndex = 12;  				nodemN.Nodes.Add (nodemNc);  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Entire Network") == 0)) {  	if (n.FirstNode.Text == "Network Node") {  		n.FirstNode.Remove ();  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  		foreach (string s1 in servers) {  			string s2 = "";  			s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  			if (s1.IndexOf ("NETWORK"' 1) > 0) {  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2;  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodeNN.ImageIndex = 15;  				nodeNN.SelectedImageIndex = 15;  				n.Nodes.Add (nodeNN);  			}  			else {  				TreeNode nodemNc;  				nodemN = new TreeNode ();  				nodemN.Tag = s2;  				//"my Node";  				nodemN.Text = s2;  				//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemN.ImageIndex = 16;  				nodemN.SelectedImageIndex = 16;  				n.LastNode.Nodes.Add (nodemN);  				nodemNc = new TreeNode ();  				nodemNc.Tag = "my netNode";  				nodemNc.Text = "my netNode";  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemNc.ImageIndex = 12;  				nodemNc.SelectedImageIndex = 12;  				nodemN.Nodes.Add (nodemNc);  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((String.Compare (n.Text' "Entire Network") == 0)) {  	if (n.FirstNode.Text == "Network Node") {  		n.FirstNode.Remove ();  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  		foreach (string s1 in servers) {  			string s2 = "";  			s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  			if (s1.IndexOf ("NETWORK"' 1) > 0) {  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2;  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodeNN.ImageIndex = 15;  				nodeNN.SelectedImageIndex = 15;  				n.Nodes.Add (nodeNN);  			}  			else {  				TreeNode nodemNc;  				nodemN = new TreeNode ();  				nodemN.Tag = s2;  				//"my Node";  				nodemN.Text = s2;  				//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemN.ImageIndex = 16;  				nodemN.SelectedImageIndex = 16;  				n.LastNode.Nodes.Add (nodemN);  				nodemNc = new TreeNode ();  				nodemNc.Tag = "my netNode";  				nodemNc.Text = "my netNode";  				//dir.Substring(dir.LastIndexOf(@"\") + 1);  				nodemNc.ImageIndex = 12;  				nodemNc.SelectedImageIndex = 12;  				nodemN.Nodes.Add (nodemNc);  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "Network Node") {  	n.FirstNode.Remove ();  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  	foreach (string s1 in servers) {  		string s2 = "";  		s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  		if (s1.IndexOf ("NETWORK"' 1) > 0) {  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2;  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodeNN.ImageIndex = 15;  			nodeNN.SelectedImageIndex = 15;  			n.Nodes.Add (nodeNN);  		}  		else {  			TreeNode nodemNc;  			nodemN = new TreeNode ();  			nodemN.Tag = s2;  			//"my Node";  			nodemN.Text = s2;  			//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemN.ImageIndex = 16;  			nodemN.SelectedImageIndex = 16;  			n.LastNode.Nodes.Add (nodemN);  			nodemNc = new TreeNode ();  			nodemNc.Tag = "my netNode";  			nodemNc.Text = "my netNode";  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemNc.ImageIndex = 12;  			nodemNc.SelectedImageIndex = 12;  			nodemN.Nodes.Add (nodemNc);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "Network Node") {  	n.FirstNode.Remove ();  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  	foreach (string s1 in servers) {  		string s2 = "";  		s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  		if (s1.IndexOf ("NETWORK"' 1) > 0) {  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2;  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodeNN.ImageIndex = 15;  			nodeNN.SelectedImageIndex = 15;  			n.Nodes.Add (nodeNN);  		}  		else {  			TreeNode nodemNc;  			nodemN = new TreeNode ();  			nodemN.Tag = s2;  			//"my Node";  			nodemN.Text = s2;  			//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemN.ImageIndex = 16;  			nodemN.SelectedImageIndex = 16;  			n.LastNode.Nodes.Add (nodemN);  			nodemNc = new TreeNode ();  			nodemNc.Tag = "my netNode";  			nodemNc.Text = "my netNode";  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemNc.ImageIndex = 12;  			nodemNc.SelectedImageIndex = 12;  			nodemN.Nodes.Add (nodemNc);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "Network Node") {  	n.FirstNode.Remove ();  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  	foreach (string s1 in servers) {  		string s2 = "";  		s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  		if (s1.IndexOf ("NETWORK"' 1) > 0) {  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2;  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodeNN.ImageIndex = 15;  			nodeNN.SelectedImageIndex = 15;  			n.Nodes.Add (nodeNN);  		}  		else {  			TreeNode nodemNc;  			nodemN = new TreeNode ();  			nodemN.Tag = s2;  			//"my Node";  			nodemN.Text = s2;  			//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemN.ImageIndex = 16;  			nodemN.SelectedImageIndex = 16;  			n.LastNode.Nodes.Add (nodemN);  			nodemNc = new TreeNode ();  			nodemNc.Tag = "my netNode";  			nodemNc.Text = "my netNode";  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemNc.ImageIndex = 12;  			nodemNc.SelectedImageIndex = 12;  			nodemN.Nodes.Add (nodemNc);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "Network Node") {  	n.FirstNode.Remove ();  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  	foreach (string s1 in servers) {  		string s2 = "";  		s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  		if (s1.IndexOf ("NETWORK"' 1) > 0) {  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2;  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodeNN.ImageIndex = 15;  			nodeNN.SelectedImageIndex = 15;  			n.Nodes.Add (nodeNN);  		}  		else {  			TreeNode nodemNc;  			nodemN = new TreeNode ();  			nodemN.Tag = s2;  			//"my Node";  			nodemN.Text = s2;  			//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemN.ImageIndex = 16;  			nodemN.SelectedImageIndex = 16;  			n.LastNode.Nodes.Add (nodemN);  			nodemNc = new TreeNode ();  			nodemNc.Tag = "my netNode";  			nodemNc.Text = "my netNode";  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemNc.ImageIndex = 12;  			nodemNc.SelectedImageIndex = 12;  			nodemN.Nodes.Add (nodemNc);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "Network Node") {  	n.FirstNode.Remove ();  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  	foreach (string s1 in servers) {  		string s2 = "";  		s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  		if (s1.IndexOf ("NETWORK"' 1) > 0) {  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2;  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodeNN.ImageIndex = 15;  			nodeNN.SelectedImageIndex = 15;  			n.Nodes.Add (nodeNN);  		}  		else {  			TreeNode nodemNc;  			nodemN = new TreeNode ();  			nodemN.Tag = s2;  			//"my Node";  			nodemN.Text = s2;  			//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemN.ImageIndex = 16;  			nodemN.SelectedImageIndex = 16;  			n.LastNode.Nodes.Add (nodemN);  			nodemNc = new TreeNode ();  			nodemNc.Tag = "my netNode";  			nodemNc.Text = "my netNode";  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemNc.ImageIndex = 12;  			nodemNc.SelectedImageIndex = 12;  			nodemN.Nodes.Add (nodemNc);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "Network Node") {  	n.FirstNode.Remove ();  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK' "");  	foreach (string s1 in servers) {  		string s2 = "";  		s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  		if (s1.IndexOf ("NETWORK"' 1) > 0) {  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2;  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodeNN.ImageIndex = 15;  			nodeNN.SelectedImageIndex = 15;  			n.Nodes.Add (nodeNN);  		}  		else {  			TreeNode nodemNc;  			nodemN = new TreeNode ();  			nodemN.Tag = s2;  			//"my Node";  			nodemN.Text = s2;  			//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemN.ImageIndex = 16;  			nodemN.SelectedImageIndex = 16;  			n.LastNode.Nodes.Add (nodemN);  			nodemNc = new TreeNode ();  			nodemNc.Tag = "my netNode";  			nodemNc.Text = "my netNode";  			//dir.Substring(dir.LastIndexOf(@"\") + 1);  			nodemNc.ImageIndex = 12;  			nodemNc.SelectedImageIndex = 12;  			nodemN.Nodes.Add (nodemNc);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  	if (s1.IndexOf ("NETWORK"' 1) > 0) {  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2;  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodeNN.ImageIndex = 15;  		nodeNN.SelectedImageIndex = 15;  		n.Nodes.Add (nodeNN);  	}  	else {  		TreeNode nodemNc;  		nodemN = new TreeNode ();  		nodemN.Tag = s2;  		//"my Node";  		nodemN.Text = s2;  		//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemN.ImageIndex = 16;  		nodemN.SelectedImageIndex = 16;  		n.LastNode.Nodes.Add (nodemN);  		nodemNc = new TreeNode ();  		nodemNc.Tag = "my netNode";  		nodemNc.Text = "my netNode";  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemNc.ImageIndex = 12;  		nodemNc.SelectedImageIndex = 12;  		nodemN.Nodes.Add (nodemNc);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  	if (s1.IndexOf ("NETWORK"' 1) > 0) {  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2;  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodeNN.ImageIndex = 15;  		nodeNN.SelectedImageIndex = 15;  		n.Nodes.Add (nodeNN);  	}  	else {  		TreeNode nodemNc;  		nodemN = new TreeNode ();  		nodemN.Tag = s2;  		//"my Node";  		nodemN.Text = s2;  		//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemN.ImageIndex = 16;  		nodemN.SelectedImageIndex = 16;  		n.LastNode.Nodes.Add (nodemN);  		nodemNc = new TreeNode ();  		nodemNc.Tag = "my netNode";  		nodemNc.Text = "my netNode";  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemNc.ImageIndex = 12;  		nodemNc.SelectedImageIndex = 12;  		nodemN.Nodes.Add (nodemNc);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  	if (s1.IndexOf ("NETWORK"' 1) > 0) {  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2;  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodeNN.ImageIndex = 15;  		nodeNN.SelectedImageIndex = 15;  		n.Nodes.Add (nodeNN);  	}  	else {  		TreeNode nodemNc;  		nodemN = new TreeNode ();  		nodemN.Tag = s2;  		//"my Node";  		nodemN.Text = s2;  		//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemN.ImageIndex = 16;  		nodemN.SelectedImageIndex = 16;  		n.LastNode.Nodes.Add (nodemN);  		nodemNc = new TreeNode ();  		nodemNc.Tag = "my netNode";  		nodemNc.Text = "my netNode";  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemNc.ImageIndex = 12;  		nodemNc.SelectedImageIndex = 12;  		nodemN.Nodes.Add (nodemNc);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  	if (s1.IndexOf ("NETWORK"' 1) > 0) {  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2;  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodeNN.ImageIndex = 15;  		nodeNN.SelectedImageIndex = 15;  		n.Nodes.Add (nodeNN);  	}  	else {  		TreeNode nodemNc;  		nodemN = new TreeNode ();  		nodemN.Tag = s2;  		//"my Node";  		nodemN.Text = s2;  		//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemN.ImageIndex = 16;  		nodemN.SelectedImageIndex = 16;  		n.LastNode.Nodes.Add (nodemN);  		nodemNc = new TreeNode ();  		nodemNc.Tag = "my netNode";  		nodemNc.Text = "my netNode";  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemNc.ImageIndex = 12;  		nodemNc.SelectedImageIndex = 12;  		nodemN.Nodes.Add (nodemNc);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  	if (s1.IndexOf ("NETWORK"' 1) > 0) {  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2;  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodeNN.ImageIndex = 15;  		nodeNN.SelectedImageIndex = 15;  		n.Nodes.Add (nodeNN);  	}  	else {  		TreeNode nodemNc;  		nodemN = new TreeNode ();  		nodemN.Tag = s2;  		//"my Node";  		nodemN.Text = s2;  		//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemN.ImageIndex = 16;  		nodemN.SelectedImageIndex = 16;  		n.LastNode.Nodes.Add (nodemN);  		nodemNc = new TreeNode ();  		nodemNc.Tag = "my netNode";  		nodemNc.Text = "my netNode";  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemNc.ImageIndex = 12;  		nodemNc.SelectedImageIndex = 12;  		nodemN.Nodes.Add (nodemNc);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	s2 = s1.Substring (0' s1.IndexOf ("|"' 1));  	if (s1.IndexOf ("NETWORK"' 1) > 0) {  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2;  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodeNN.ImageIndex = 15;  		nodeNN.SelectedImageIndex = 15;  		n.Nodes.Add (nodeNN);  	}  	else {  		TreeNode nodemNc;  		nodemN = new TreeNode ();  		nodemN.Tag = s2;  		//"my Node";  		nodemN.Text = s2;  		//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemN.ImageIndex = 16;  		nodemN.SelectedImageIndex = 16;  		n.LastNode.Nodes.Add (nodemN);  		nodemNc = new TreeNode ();  		nodemNc.Tag = "my netNode";  		nodemNc.Text = "my netNode";  		//dir.Substring(dir.LastIndexOf(@"\") + 1);  		nodemNc.ImageIndex = 12;  		nodemNc.SelectedImageIndex = 12;  		nodemN.Nodes.Add (nodemNc);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1.IndexOf ("NETWORK"' 1) > 0) {  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2;  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	n.Nodes.Add (nodeNN);  }  else {  	TreeNode nodemNc;  	nodemN = new TreeNode ();  	nodemN.Tag = s2;  	//"my Node";  	nodemN.Text = s2;  	//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemN.ImageIndex = 16;  	nodemN.SelectedImageIndex = 16;  	n.LastNode.Nodes.Add (nodemN);  	nodemNc = new TreeNode ();  	nodemNc.Tag = "my netNode";  	nodemNc.Text = "my netNode";  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemNc.ImageIndex = 12;  	nodemNc.SelectedImageIndex = 12;  	nodemN.Nodes.Add (nodemNc);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1.IndexOf ("NETWORK"' 1) > 0) {  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2;  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	n.Nodes.Add (nodeNN);  }  else {  	TreeNode nodemNc;  	nodemN = new TreeNode ();  	nodemN.Tag = s2;  	//"my Node";  	nodemN.Text = s2;  	//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemN.ImageIndex = 16;  	nodemN.SelectedImageIndex = 16;  	n.LastNode.Nodes.Add (nodemN);  	nodemNc = new TreeNode ();  	nodemNc.Tag = "my netNode";  	nodemNc.Text = "my netNode";  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemNc.ImageIndex = 12;  	nodemNc.SelectedImageIndex = 12;  	nodemN.Nodes.Add (nodemNc);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1.IndexOf ("NETWORK"' 1) > 0) {  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2;  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	n.Nodes.Add (nodeNN);  }  else {  	TreeNode nodemNc;  	nodemN = new TreeNode ();  	nodemN.Tag = s2;  	//"my Node";  	nodemN.Text = s2;  	//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemN.ImageIndex = 16;  	nodemN.SelectedImageIndex = 16;  	n.LastNode.Nodes.Add (nodemN);  	nodemNc = new TreeNode ();  	nodemNc.Tag = "my netNode";  	nodemNc.Text = "my netNode";  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemNc.ImageIndex = 12;  	nodemNc.SelectedImageIndex = 12;  	nodemN.Nodes.Add (nodemNc);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1.IndexOf ("NETWORK"' 1) > 0) {  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2;  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	n.Nodes.Add (nodeNN);  }  else {  	TreeNode nodemNc;  	nodemN = new TreeNode ();  	nodemN.Tag = s2;  	//"my Node";  	nodemN.Text = s2;  	//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemN.ImageIndex = 16;  	nodemN.SelectedImageIndex = 16;  	n.LastNode.Nodes.Add (nodemN);  	nodemNc = new TreeNode ();  	nodemNc.Tag = "my netNode";  	nodemNc.Text = "my netNode";  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemNc.ImageIndex = 12;  	nodemNc.SelectedImageIndex = 12;  	nodemN.Nodes.Add (nodemNc);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1.IndexOf ("NETWORK"' 1) > 0) {  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2;  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	n.Nodes.Add (nodeNN);  }  else {  	TreeNode nodemNc;  	nodemN = new TreeNode ();  	nodemN.Tag = s2;  	//"my Node";  	nodemN.Text = s2;  	//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemN.ImageIndex = 16;  	nodemN.SelectedImageIndex = 16;  	n.LastNode.Nodes.Add (nodemN);  	nodemNc = new TreeNode ();  	nodemNc.Tag = "my netNode";  	nodemNc.Text = "my netNode";  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemNc.ImageIndex = 12;  	nodemNc.SelectedImageIndex = 12;  	nodemN.Nodes.Add (nodemNc);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1.IndexOf ("NETWORK"' 1) > 0) {  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2;  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodeNN.ImageIndex = 15;  	nodeNN.SelectedImageIndex = 15;  	n.Nodes.Add (nodeNN);  }  else {  	TreeNode nodemNc;  	nodemN = new TreeNode ();  	nodemN.Tag = s2;  	//"my Node";  	nodemN.Text = s2;  	//"my Node";//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemN.ImageIndex = 16;  	nodemN.SelectedImageIndex = 16;  	n.LastNode.Nodes.Add (nodemN);  	nodemNc = new TreeNode ();  	nodemNc.Tag = "my netNode";  	nodemNc.Text = "my netNode";  	//dir.Substring(dir.LastIndexOf(@"\") + 1);  	nodemNc.ImageIndex = 12;  	nodemNc.SelectedImageIndex = 12;  	nodemN.Nodes.Add (nodemNc);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeNN.ImageIndex = 15;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeNN.SelectedImageIndex = 15;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodemN.ImageIndex = 16;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodemN.SelectedImageIndex = 16;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodemNc.ImageIndex = 12;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodemNc.SelectedImageIndex = 12;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((n.Parent != null) && (String.Compare (n.Parent.Text' "Microsoft Windows Network") == 0)) {  	if (n.FirstNode.Text == "my netNode") {  		n.FirstNode.Remove ();  		string pS = n.Text;  		//NETRESOURCE netRoot = new NETRESOURCE();  		ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  		foreach (string s1 in servers) {  			string s2 = "";  			if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  				s2 = s1;  				//.Substring(s1.IndexOf("\\"'2));  				nodeNN = new TreeNode ();  				nodeNN.Tag = s2;  				nodeNN.Text = s2.Substring (2);  				nodeNN.ImageIndex = 12;  				nodeNN.SelectedImageIndex = 12;  				n.Nodes.Add (nodeNN);  				foreach (string s1node in servers) {  					if (s1node.Length > 6) {  						if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  							if (s2.Length <= s1node.Length) {  								try {  									if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  										nodeNNode = new TreeNode ();  										nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  										nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  										nodeNNode.ImageIndex = 28;  										nodeNNode.SelectedImageIndex = 28;  										nodeNN.Nodes.Add (nodeNNode);  									}  								}  								catch (Exception) {  								}  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (n.FirstNode.Text == "my netNode") {  	n.FirstNode.Remove ();  	string pS = n.Text;  	//NETRESOURCE netRoot = new NETRESOURCE();  	ServerEnum servers = new ServerEnum (ResourceScope.RESOURCE_GLOBALNET' ResourceType.RESOURCETYPE_DISK' ResourceUsage.RESOURCEUSAGE_ALL' ResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER' pS);  	foreach (string s1 in servers) {  		string s2 = "";  		if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  			s2 = s1;  			//.Substring(s1.IndexOf("\\"'2));  			nodeNN = new TreeNode ();  			nodeNN.Tag = s2;  			nodeNN.Text = s2.Substring (2);  			nodeNN.ImageIndex = 12;  			nodeNN.SelectedImageIndex = 12;  			n.Nodes.Add (nodeNN);  			foreach (string s1node in servers) {  				if (s1node.Length > 6) {  					if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  						if (s2.Length <= s1node.Length) {  							try {  								if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  									nodeNNode = new TreeNode ();  									nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  									nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  									nodeNNode.ImageIndex = 28;  									nodeNNode.SelectedImageIndex = 28;  									nodeNN.Nodes.Add (nodeNNode);  								}  							}  							catch (Exception) {  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1 in servers) {  	string s2 = "";  	if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  		s2 = s1;  		//.Substring(s1.IndexOf("\\"'2));  		nodeNN = new TreeNode ();  		nodeNN.Tag = s2;  		nodeNN.Text = s2.Substring (2);  		nodeNN.ImageIndex = 12;  		nodeNN.SelectedImageIndex = 12;  		n.Nodes.Add (nodeNN);  		foreach (string s1node in servers) {  			if (s1node.Length > 6) {  				if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  					if (s2.Length <= s1node.Length) {  						try {  							if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  								nodeNNode = new TreeNode ();  								nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  								nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  								nodeNNode.ImageIndex = 28;  								nodeNNode.SelectedImageIndex = 28;  								nodeNN.Nodes.Add (nodeNNode);  							}  						}  						catch (Exception) {  						}  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if ((s1.Length < 6) || (String.Compare (s1.Substring (s1.Length - 6' 6)' "-share") != 0)) {  	s2 = s1;  	//.Substring(s1.IndexOf("\\"'2));  	nodeNN = new TreeNode ();  	nodeNN.Tag = s2;  	nodeNN.Text = s2.Substring (2);  	nodeNN.ImageIndex = 12;  	nodeNN.SelectedImageIndex = 12;  	n.Nodes.Add (nodeNN);  	foreach (string s1node in servers) {  		if (s1node.Length > 6) {  			if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  				if (s2.Length <= s1node.Length) {  					try {  						if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  							nodeNNode = new TreeNode ();  							nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  							nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  							nodeNNode.ImageIndex = 28;  							nodeNNode.SelectedImageIndex = 28;  							nodeNN.Nodes.Add (nodeNNode);  						}  					}  					catch (Exception) {  					}  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeNN.Text = s2.Substring (2);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeNN.ImageIndex = 12;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeNN.SelectedImageIndex = 12;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1node in servers) {  	if (s1node.Length > 6) {  		if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  			if (s2.Length <= s1node.Length) {  				try {  					if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  						nodeNNode = new TreeNode ();  						nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  						nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  						nodeNNode.ImageIndex = 28;  						nodeNNode.SelectedImageIndex = 28;  						nodeNN.Nodes.Add (nodeNNode);  					}  				}  				catch (Exception) {  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1node in servers) {  	if (s1node.Length > 6) {  		if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  			if (s2.Length <= s1node.Length) {  				try {  					if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  						nodeNNode = new TreeNode ();  						nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  						nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  						nodeNNode.ImageIndex = 28;  						nodeNNode.SelectedImageIndex = 28;  						nodeNN.Nodes.Add (nodeNNode);  					}  				}  				catch (Exception) {  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1node in servers) {  	if (s1node.Length > 6) {  		if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  			if (s2.Length <= s1node.Length) {  				try {  					if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  						nodeNNode = new TreeNode ();  						nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  						nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  						nodeNNode.ImageIndex = 28;  						nodeNNode.SelectedImageIndex = 28;  						nodeNN.Nodes.Add (nodeNNode);  					}  				}  				catch (Exception) {  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1node in servers) {  	if (s1node.Length > 6) {  		if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  			if (s2.Length <= s1node.Length) {  				try {  					if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  						nodeNNode = new TreeNode ();  						nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  						nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  						nodeNNode.ImageIndex = 28;  						nodeNNode.SelectedImageIndex = 28;  						nodeNN.Nodes.Add (nodeNNode);  					}  				}  				catch (Exception) {  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1node in servers) {  	if (s1node.Length > 6) {  		if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  			if (s2.Length <= s1node.Length) {  				try {  					if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  						nodeNNode = new TreeNode ();  						nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  						nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  						nodeNNode.ImageIndex = 28;  						nodeNNode.SelectedImageIndex = 28;  						nodeNN.Nodes.Add (nodeNNode);  					}  				}  				catch (Exception) {  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1node in servers) {  	if (s1node.Length > 6) {  		if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  			if (s2.Length <= s1node.Length) {  				try {  					if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  						nodeNNode = new TreeNode ();  						nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  						nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  						nodeNNode.ImageIndex = 28;  						nodeNNode.SelectedImageIndex = 28;  						nodeNN.Nodes.Add (nodeNNode);  					}  				}  				catch (Exception) {  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: foreach (string s1node in servers) {  	if (s1node.Length > 6) {  		if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  			if (s2.Length <= s1node.Length) {  				try {  					if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  						nodeNNode = new TreeNode ();  						nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  						nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  						nodeNNode.ImageIndex = 28;  						nodeNNode.SelectedImageIndex = 28;  						nodeNN.Nodes.Add (nodeNNode);  					}  				}  				catch (Exception) {  				}  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1node.Length > 6) {  	if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  		if (s2.Length <= s1node.Length) {  			try {  				if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  					nodeNNode = new TreeNode ();  					nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  					nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  					nodeNNode.ImageIndex = 28;  					nodeNNode.SelectedImageIndex = 28;  					nodeNN.Nodes.Add (nodeNNode);  				}  			}  			catch (Exception) {  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1node.Length > 6) {  	if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  		if (s2.Length <= s1node.Length) {  			try {  				if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  					nodeNNode = new TreeNode ();  					nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  					nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  					nodeNNode.ImageIndex = 28;  					nodeNNode.SelectedImageIndex = 28;  					nodeNN.Nodes.Add (nodeNNode);  				}  			}  			catch (Exception) {  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1node.Length > 6) {  	if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  		if (s2.Length <= s1node.Length) {  			try {  				if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  					nodeNNode = new TreeNode ();  					nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  					nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  					nodeNNode.ImageIndex = 28;  					nodeNNode.SelectedImageIndex = 28;  					nodeNN.Nodes.Add (nodeNNode);  				}  			}  			catch (Exception) {  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1node.Length > 6) {  	if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  		if (s2.Length <= s1node.Length) {  			try {  				if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  					nodeNNode = new TreeNode ();  					nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  					nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  					nodeNNode.ImageIndex = 28;  					nodeNNode.SelectedImageIndex = 28;  					nodeNN.Nodes.Add (nodeNNode);  				}  			}  			catch (Exception) {  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1node.Length > 6) {  	if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  		if (s2.Length <= s1node.Length) {  			try {  				if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  					nodeNNode = new TreeNode ();  					nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  					nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  					nodeNNode.ImageIndex = 28;  					nodeNNode.SelectedImageIndex = 28;  					nodeNN.Nodes.Add (nodeNNode);  				}  			}  			catch (Exception) {  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1node.Length > 6) {  	if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  		if (s2.Length <= s1node.Length) {  			try {  				if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  					nodeNNode = new TreeNode ();  					nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  					nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  					nodeNNode.ImageIndex = 28;  					nodeNNode.SelectedImageIndex = 28;  					nodeNN.Nodes.Add (nodeNNode);  				}  			}  			catch (Exception) {  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s1node.Length > 6) {  	if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  		if (s2.Length <= s1node.Length) {  			try {  				if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  					nodeNNode = new TreeNode ();  					nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  					nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  					nodeNNode.ImageIndex = 28;  					nodeNNode.SelectedImageIndex = 28;  					nodeNN.Nodes.Add (nodeNNode);  				}  			}  			catch (Exception) {  			}  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  	if (s2.Length <= s1node.Length) {  		try {  			if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  				nodeNNode = new TreeNode ();  				nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  				nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  				nodeNNode.ImageIndex = 28;  				nodeNNode.SelectedImageIndex = 28;  				nodeNN.Nodes.Add (nodeNNode);  			}  		}  		catch (Exception) {  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  	if (s2.Length <= s1node.Length) {  		try {  			if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  				nodeNNode = new TreeNode ();  				nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  				nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  				nodeNNode.ImageIndex = 28;  				nodeNNode.SelectedImageIndex = 28;  				nodeNN.Nodes.Add (nodeNNode);  			}  		}  		catch (Exception) {  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  	if (s2.Length <= s1node.Length) {  		try {  			if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  				nodeNNode = new TreeNode ();  				nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  				nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  				nodeNNode.ImageIndex = 28;  				nodeNNode.SelectedImageIndex = 28;  				nodeNN.Nodes.Add (nodeNNode);  			}  		}  		catch (Exception) {  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  	if (s2.Length <= s1node.Length) {  		try {  			if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  				nodeNNode = new TreeNode ();  				nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  				nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  				nodeNNode.ImageIndex = 28;  				nodeNNode.SelectedImageIndex = 28;  				nodeNN.Nodes.Add (nodeNNode);  			}  		}  		catch (Exception) {  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  	if (s2.Length <= s1node.Length) {  		try {  			if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  				nodeNNode = new TreeNode ();  				nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  				nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  				nodeNNode.ImageIndex = 28;  				nodeNNode.SelectedImageIndex = 28;  				nodeNN.Nodes.Add (nodeNNode);  			}  		}  		catch (Exception) {  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (String.Compare (s1node.Substring (s1node.Length - 6' 6)' "-share") == 0) {  	if (s2.Length <= s1node.Length) {  		try {  			if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  				nodeNNode = new TreeNode ();  				nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  				nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  				nodeNNode.ImageIndex = 28;  				nodeNNode.SelectedImageIndex = 28;  				nodeNN.Nodes.Add (nodeNNode);  			}  		}  		catch (Exception) {  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s2.Length <= s1node.Length) {  	try {  		if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  			nodeNNode = new TreeNode ();  			nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  			nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  			nodeNNode.ImageIndex = 28;  			nodeNNode.SelectedImageIndex = 28;  			nodeNN.Nodes.Add (nodeNNode);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s2.Length <= s1node.Length) {  	try {  		if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  			nodeNNode = new TreeNode ();  			nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  			nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  			nodeNNode.ImageIndex = 28;  			nodeNNode.SelectedImageIndex = 28;  			nodeNN.Nodes.Add (nodeNNode);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s2.Length <= s1node.Length) {  	try {  		if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  			nodeNNode = new TreeNode ();  			nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  			nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  			nodeNNode.ImageIndex = 28;  			nodeNNode.SelectedImageIndex = 28;  			nodeNN.Nodes.Add (nodeNNode);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (s2.Length <= s1node.Length) {  	try {  		if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  			nodeNNode = new TreeNode ();  			nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  			nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  			nodeNNode.ImageIndex = 28;  			nodeNNode.SelectedImageIndex = 28;  			nodeNN.Nodes.Add (nodeNNode);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: try {  	if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  		nodeNNode = new TreeNode ();  		nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  		nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  		nodeNNode.ImageIndex = 28;  		nodeNNode.SelectedImageIndex = 28;  		nodeNN.Nodes.Add (nodeNNode);  	}  }  catch (Exception) {  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: try {  	if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  		nodeNNode = new TreeNode ();  		nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  		nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  		nodeNNode.ImageIndex = 28;  		nodeNNode.SelectedImageIndex = 28;  		nodeNN.Nodes.Add (nodeNNode);  	}  }  catch (Exception) {  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: try {  	if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  		nodeNNode = new TreeNode ();  		nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  		nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  		nodeNNode.ImageIndex = 28;  		nodeNNode.SelectedImageIndex = 28;  		nodeNN.Nodes.Add (nodeNNode);  	}  }  catch (Exception) {  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: try {  	if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  		nodeNNode = new TreeNode ();  		nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  		nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  		nodeNNode.ImageIndex = 28;  		nodeNNode.SelectedImageIndex = 28;  		nodeNN.Nodes.Add (nodeNNode);  	}  }  catch (Exception) {  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  	nodeNNode = new TreeNode ();  	nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  	nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  	nodeNNode.ImageIndex = 28;  	nodeNNode.SelectedImageIndex = 28;  	nodeNN.Nodes.Add (nodeNNode);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  	nodeNNode = new TreeNode ();  	nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  	nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  	nodeNNode.ImageIndex = 28;  	nodeNNode.SelectedImageIndex = 28;  	nodeNN.Nodes.Add (nodeNNode);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  	nodeNNode = new TreeNode ();  	nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  	nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  	nodeNNode.ImageIndex = 28;  	nodeNNode.SelectedImageIndex = 28;  	nodeNN.Nodes.Add (nodeNNode);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: if (String.Compare (s1node.Substring (0' s2.Length + 1)' s2 + @"\") == 0) {  	nodeNNode = new TreeNode ();  	nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  	nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  	nodeNNode.ImageIndex = 28;  	nodeNNode.SelectedImageIndex = 28;  	nodeNN.Nodes.Add (nodeNNode);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeNNode.Tag = s1node.Substring (0' s1node.Length - 6);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeNNode.Text = s1node.Substring (s2.Length + 1' s1node.Length - s2.Length - 7);  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeNNode.ImageIndex = 28;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_AfterExpand,The following statement contains a magic number: nodeNNode.SelectedImageIndex = 28;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: if (TreeNodeMyComputer.GetNodeCount (true) < 2) {  	TreeNodeMyComputer.FirstNode.Remove ();  	foreach (string drive in drives) {  		nodeDrive = new TreeNode ();  		nodeDrive.Tag = drive;  		nodeDrive.Text = drive;  		switch (Win32.GetDriveType (drive)) {  		case 2:  			nodeDrive.ImageIndex = 17;  			nodeDrive.SelectedImageIndex = 17;  			break;  		case 3:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		case 4:  			nodeDrive.ImageIndex = 8;  			nodeDrive.SelectedImageIndex = 8;  			break;  		case 5:  			nodeDrive.ImageIndex = 7;  			nodeDrive.SelectedImageIndex = 7;  			break;  		default:  			nodeDrive.ImageIndex = 0;  			nodeDrive.SelectedImageIndex = 0;  			break;  		}  		TreeNodeMyComputer.Nodes.Add (nodeDrive);  		try {  			//add dirs under drive  			if (Directory.Exists (drive)) {  				foreach (string dir in Directory.GetDirectories (drive)) {  					dir2 = dir;  					node = new TreeNode ();  					node.Tag = dir;  					node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  					node.ImageIndex = 1;  					nodeDrive.Nodes.Add (node);  				}  			}  		}  		catch (Exception ex)//error just add blank dir  		 {  			MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  		}  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	TreeNodeMyComputer.Nodes.Add (nodeDrive);  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	TreeNodeMyComputer.Nodes.Add (nodeDrive);  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	TreeNodeMyComputer.Nodes.Add (nodeDrive);  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	TreeNodeMyComputer.Nodes.Add (nodeDrive);  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	TreeNodeMyComputer.Nodes.Add (nodeDrive);  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	TreeNodeMyComputer.Nodes.Add (nodeDrive);  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	TreeNodeMyComputer.Nodes.Add (nodeDrive);  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	TreeNodeMyComputer.Nodes.Add (nodeDrive);  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	TreeNodeMyComputer.Nodes.Add (nodeDrive);  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: foreach (string drive in drives) {  	nodeDrive = new TreeNode ();  	nodeDrive.Tag = drive;  	nodeDrive.Text = drive;  	switch (Win32.GetDriveType (drive)) {  	case 2:  		nodeDrive.ImageIndex = 17;  		nodeDrive.SelectedImageIndex = 17;  		break;  	case 3:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	case 4:  		nodeDrive.ImageIndex = 8;  		nodeDrive.SelectedImageIndex = 8;  		break;  	case 5:  		nodeDrive.ImageIndex = 7;  		nodeDrive.SelectedImageIndex = 7;  		break;  	default:  		nodeDrive.ImageIndex = 0;  		nodeDrive.SelectedImageIndex = 0;  		break;  	}  	TreeNodeMyComputer.Nodes.Add (nodeDrive);  	try {  		//add dirs under drive  		if (Directory.Exists (drive)) {  			foreach (string dir in Directory.GetDirectories (drive)) {  				dir2 = dir;  				node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodeDrive.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: switch (Win32.GetDriveType (drive)) {  case 2:  	nodeDrive.ImageIndex = 17;  	nodeDrive.SelectedImageIndex = 17;  	break;  case 3:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  case 4:  	nodeDrive.ImageIndex = 8;  	nodeDrive.SelectedImageIndex = 8;  	break;  case 5:  	nodeDrive.ImageIndex = 7;  	nodeDrive.SelectedImageIndex = 7;  	break;  default:  	nodeDrive.ImageIndex = 0;  	nodeDrive.SelectedImageIndex = 0;  	break;  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: nodeDrive.ImageIndex = 17;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: nodeDrive.SelectedImageIndex = 17;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: nodeDrive.ImageIndex = 8;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: nodeDrive.SelectedImageIndex = 8;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: nodeDrive.ImageIndex = 7;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,ExploreMyComputer,The following statement contains a magic number: nodeDrive.SelectedImageIndex = 7;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_MouseUp,The following statement contains a magic number: if (tvwMain.SelectedNode != null) {  	if ((tvwMain.SelectedNode.ImageIndex == 18) && (e.Button == MouseButtons.Right))  		cMShortcut.Show (tvwMain' new Point (e.X' e.Y));  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,tvwMain_MouseUp,The following statement contains a magic number: if ((tvwMain.SelectedNode.ImageIndex == 18) && (e.Button == MouseButtons.Right))  	cMShortcut.Show (tvwMain' new Point (e.X' e.Y));  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,AddFolderNode,The following statement contains a magic number: try {  	TreeNode nodemyC = new TreeNode ();  	nodemyC.Tag = path;  	nodemyC.Text = name;  	nodemyC.ImageIndex = 18;  	nodemyC.SelectedImageIndex = 18;  	TreeNodeRootNode.Nodes.Add (nodemyC);  	try {  		//add dirs under drive  		if (Directory.Exists (path)) {  			foreach (string dir in Directory.GetDirectories (path)) {  				TreeNode node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodemyC.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  catch (Exception e) {  	MessageBox.Show (e.Message);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,AddFolderNode,The following statement contains a magic number: try {  	TreeNode nodemyC = new TreeNode ();  	nodemyC.Tag = path;  	nodemyC.Text = name;  	nodemyC.ImageIndex = 18;  	nodemyC.SelectedImageIndex = 18;  	TreeNodeRootNode.Nodes.Add (nodemyC);  	try {  		//add dirs under drive  		if (Directory.Exists (path)) {  			foreach (string dir in Directory.GetDirectories (path)) {  				TreeNode node = new TreeNode ();  				node.Tag = dir;  				node.Text = dir.Substring (dir.LastIndexOf (@"\") + 1);  				node.ImageIndex = 1;  				nodemyC.Nodes.Add (node);  			}  		}  	}  	catch (Exception ex)//error just add blank dir  	 {  		MessageBox.Show ("Error while Filling the Explorer:" + ex.Message);  	}  }  catch (Exception e) {  	MessageBox.Show (e.Message);  }  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,AddFolderNode,The following statement contains a magic number: nodemyC.ImageIndex = 18;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,AddFolderNode,The following statement contains a magic number: nodemyC.SelectedImageIndex = 18;  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,mnuShortcut_Click,The following statement contains a magic number: if (tvwMain.SelectedNode.ImageIndex == 18)  	tvwMain.SelectedNode.Remove ();  
Magic Number,WindowsExplorer,ExplorerTree,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\ExplorerTree.cs,txtPath_KeyUp,The following statement contains a magic number: if (e.KeyValue == 13) {  	btnGo_Click (sender' e);  	txtPath.Focus ();  }  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point (8' 8);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point (8' 8);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size (56' 48);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size (56' 48);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (128' 200);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (128' 200);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 20;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyD.Location = new System.Drawing.Point (96' 24);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyD.Location = new System.Drawing.Point (96' 24);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyD.TabIndex = 21;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyF.Location = new System.Drawing.Point (96' 48);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyF.Location = new System.Drawing.Point (96' 48);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyF.TabIndex = 22;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyN.Location = new System.Drawing.Point (96' 72);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyN.Location = new System.Drawing.Point (96' 72);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyN.TabIndex = 23;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (72' 8);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (72' 8);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (144' 16);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (144' 16);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 24;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.lblAbout.Location = new System.Drawing.Point (96' 144);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.lblAbout.Location = new System.Drawing.Point (96' 144);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.lblAbout.Size = new System.Drawing.Size (200' 32);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.lblAbout.Size = new System.Drawing.Size (200' 32);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.lblAbout.TabIndex = 25;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Location = new System.Drawing.Point (32' 112);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Location = new System.Drawing.Point (32' 112);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.Size = new System.Drawing.Size (248' 1);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.TabIndex = 26;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (96' 120);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (96' 120);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (124' 16);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (124' 16);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 27;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Location = new System.Drawing.Point (96' 176);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Location = new System.Drawing.Point (96' 176);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Size = new System.Drawing.Size (143' 16);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Size = new System.Drawing.Size (143' 16);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.TabIndex = 28;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyT.Location = new System.Drawing.Point (200' 48);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyT.Location = new System.Drawing.Point (200' 48);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyT.TabIndex = 30;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyA.Location = new System.Drawing.Point (200' 24);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyA.Location = new System.Drawing.Point (200' 24);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.chkMyA.TabIndex = 29;  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (322' 232);  
Magic Number,WindowsExplorer,frmOptions,C:\repos\ifelsedeveloper_LCardAnalizatorRMCA\Explorer Tree\frmOptions.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (322' 232);  
