Implementation smell,Namespace,Class,File,Method,Description
Long Method,NRack.Server.Isolation.ProcessIsolation,ProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The method has 118 lines of code.
Complex Method,NRack.Server.Isolation.ProcessIsolation,ProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,Cyclomatic complexity of the method is 11
Long Parameter List,NRack.Server,IRemoteManagedApp,C:\repos\kerryjiang_NDock\src\NRack.Server\IRemoteManagedApp.cs,Setup,The method has 5 parameters. Parameters: serverType' bootstrapUri' assemblyImportRoot' config' startupConfigFile
Long Identifier,NRack.Server.Isolation.ProcessIsolation,ProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,,The length of the parameter m_AutoStartAfterUnexpectedShutdown is 34.
Long Identifier,NRack.Server.Isolation.AppDomainIsolation,AppDomainApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\AppDomainIsolation\AppDomainApp.cs,,The length of the parameter m_AppDomainMonitoringSupported is 30.
Long Statement,NRack.Server,BootstrapBase,C:\repos\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,StartStatusCollect,The length of the statement  "                PerformanceCounter = new ProcessPerformanceCounter(Process.GetCurrentProcess()' PerformanceCounterInfo.GetDefaultPerformanceCounterDefinitions()' this.ConfigSource.Isolation == IsolationMode.None)' " is 197.
Long Statement,NRack.Server,BootstrapBase,C:\repos\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,RegisterRemotingService,The length of the statement  "            var bootstrapIpcPort = string.Format("NRack.Bootstrap[{0}]"' Math.Abs(AppDomain.CurrentDomain.BaseDirectory.TrimEnd(Path.DirectorySeparatorChar).GetHashCode())); " is 161.
Long Statement,NRack.Server,BootstrapBase,C:\repos\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,RegisterRemotingService,The length of the statement  "            serverChannel = new IpcServerChannel(serverIpcChannelName' bootstrapIpcPort' new BinaryServerFormatterSinkProvider { TypeFilterLevel = TypeFilterLevel.Full }); " is 159.
Long Statement,NRack.Server,BootstrapBase,C:\repos\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,RegisterRemotingService,The length of the statement  "                serverChannel = new TcpServerChannel(serverTcpChannelName' ConfigSource.TcpRemotingPort' new BinaryServerFormatterSinkProvider { TypeFilterLevel = TypeFilterLevel.Full }); " is 171.
Long Statement,NRack.Server,Program,C:\repos\kerryjiang_NDock\src\NRack.Server\Program.cs,Main,The length of the statement  "                || (isMono && !AppDomain.CurrentDomain.FriendlyName.Equals(Path.GetFileName(Assembly.GetEntryAssembly().CodeBase))))//MonoService " is 129.
Long Statement,NRack.Server,Program,C:\repos\kerryjiang_NDock\src\NRack.Server\Program.cs,RunAsController,The length of the statement  "                var remoteBootstrapUri = string.Format("ipc://NRack.Bootstrap[{0}]/Bootstrap.rem"' Math.Abs(AppDomain.CurrentDomain.BaseDirectory.TrimEnd(Path.DirectorySeparatorChar).GetHashCode())); " is 183.
Long Statement,NRack.Server,Program,C:\repos\kerryjiang_NDock\src\NRack.Server\Program.cs,RunAsService,The length of the statement  "            currentDomain.SetCachePath(Path.Combine(Path.Combine(currentDomain.BaseDirectory' IsolationAppConst.ShadowCopyDir)' "Bootstrap")); " is 130.
Long Statement,NRack.Server,ProcessLocker,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessLocker.cs,GetLockedProcess,The length of the statement  "                var standardInput = new StreamWriter(new FileStream(safeInputHandle' FileAccess.Write' 4096' false)' Encoding.UTF8' 4096); " is 122.
Long Statement,NRack.Server.Isolation,IsolationBootstrap,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\IsolationBootstrap.cs,GetAppServerMetadata,The length of the statement  "                validateDomain = AppDomain.CreateDomain("ValidationDomain"' AppDomain.CurrentDomain.Evidence' IsolationApp.GetAppWorkingDir(serverConfig)' string.Empty' false); " is 160.
Long Statement,NRack.Server.Isolation,IsolationBootstrap,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\IsolationBootstrap.cs,GetAppServerMetadata,The length of the statement  "                var validator = (RemoteAppTypeValidator)validateDomain.CreateInstanceAndUnwrap(validatorType.Assembly.FullName' validatorType.FullName); " is 136.
Long Statement,NRack.Server.Isolation.ProcessIsolation,ExternalProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ExternalProcessApp.cs,CreateAndStartServerInstance,The length of the statement  "            m_PerformanceCounter = new ProcessPerformanceCounter(process' PerformanceCounterInfo.GetDefaultPerformanceCounterDefinitions()); " is 128.
Long Statement,NRack.Server.Isolation.ProcessIsolation,ProcessBootstrap,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessBootstrap.cs,CreateAppInstance,The length of the statement  "            var serverMetadata = new ExternalProcessAppServerMetadata(serverConfig.Options.Get("appDir")' appFile' serverConfig.Options.Get("appArgs")); " is 140.
Long Statement,NRack.Server.Isolation.ProcessIsolation,ProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The length of the statement  "                    startInfo = new ProcessStartInfo((Path.DirectorySeparatorChar == '\\' ? "mono.exe" : "mono")' "--runtime=v" + System.Environment.Version.ToString(2) + " \"" + ProcessAppConst.WorkerAssemblyName + "\" " + args); " is 210.
Long Statement,NRack.Server.Isolation.ProcessIsolation,ProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The length of the statement  "                    ret = appServer.Setup(GetMetadata().AppType' "ipc://" + bootstrapIpcPort + "/Bootstrap.rem"' currentDomain.BaseDirectory' Config' StartupConfigFile); " is 149.
Long Statement,NRack.Server.Isolation.ProcessIsolation,ProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The length of the statement  "            m_PerformanceCounter = new ProcessPerformanceCounter(m_WorkingProcess' PerformanceCounterInfo.GetDefaultPerformanceCounterDefinitions()); " is 137.
Long Statement,NRack.Server.Isolation.AppDomainIsolation,AppDomainApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\AppDomainIsolation\AppDomainApp.cs,CollectStatus,The length of the statement  "                var value = m_HostDomain.MonitoringTotalProcessorTime.TotalMilliseconds * 100 / process.TotalProcessorTime.TotalMilliseconds; " is 125.
Long Statement,NRack.Server.Utils,ProcessPerformanceCounter,C:\repos\kerryjiang_NDock\src\NRack.Server\Utils\ProcessPerformanceCounter.cs,SetupPerformanceCounters,The length of the statement  "            var instanceName = (isUnix || NRackEnv.IsMono) ? string.Format("{0}/{1}"' m_Process.Id' m_Process.ProcessName) : GetPerformanceCounterInstanceName(m_Process); " is 158.
Long Statement,NRack.Server.Utils,ProcessPerformanceCounter,C:\repos\kerryjiang_NDock\src\NRack.Server\Utils\ProcessPerformanceCounter.cs,Collect,The length of the statement  "                    if (Environment.OSVersion.Platform == PlatformID.Unix || Environment.OSVersion.Platform == PlatformID.MacOSX || NRackEnv.IsMono) " is 128.
Complex Conditional,NRack.Server,Program,C:\repos\kerryjiang_NDock\src\NRack.Server\Program.cs,Main,The conditional expression  "(!isMono && !Environment.UserInteractive)//Windows Service                  || (isMono && !AppDomain.CurrentDomain.FriendlyName.Equals(Path.GetFileName(Assembly.GetEntryAssembly().CodeBase)))"  is complex.
Virtual Method Call from Constructor,NRack.Server,BootstrapBase,C:\repos\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,BootstrapBase,The constructor "BootstrapBase" calls a virtual method "CreateExportProvider".
Empty Catch Block,NRack.Server,Program,C:\repos\kerryjiang_NDock\src\NRack.Server\Program.cs,ChangeScriptExecutable,The method has an empty catch block.
Empty Catch Block,NRack.Server.Isolation.ProcessIsolation,ExternalProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ExternalProcessApp.cs,ShutdownProcess,The method has an empty catch block.
Empty Catch Block,NRack.Server.Isolation.ProcessIsolation,ProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,ShutdownProcess,The method has an empty catch block.
Magic Number,NRack.Server,BootstrapBase,C:\repos\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,StartStatusCollect,The following statement contains a magic number: if(interval == 0)                  interval = 60;
Magic Number,NRack.Server,BootstrapBase,C:\repos\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,StartStatusCollect,The following statement contains a magic number: interval = interval * 1000;
Magic Number,NRack.Server,Program,C:\repos\kerryjiang_NDock\src\NRack.Server\Program.cs,RunAsController,The following statement contains a magic number: if (arguments == null || arguments.Length < 2)              {                  Console.WriteLine("Invalid arguments!");                  return;              }
Magic Number,NRack.Server,ProcessLocker,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessLocker.cs,GetLockedProcess,The following statement contains a magic number: try              {                  var process = Process.GetProcessById(processId);                    var safeInputHandle = new SafeFileHandle(new IntPtr(long.Parse(lockFileInfoArray[1]))' true);                    var standardInput = new StreamWriter(new FileStream(safeInputHandle' FileAccess.Write' 4096' false)' Encoding.UTF8' 4096);                  standardInput.AutoFlush = true;                    var standInputFieldName = NRackEnv.IsMono ? "input_stream" : "standardInput";                    var standInputField = process.GetType().GetField(standInputFieldName'                      BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.SetField | BindingFlags.GetField);                    standInputField.SetValue(process' standardInput);                    return process;              }              catch              {                  File.Delete(m_LockFilePath);                  return null;              }
Magic Number,NRack.Server,ProcessLocker,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessLocker.cs,GetLockedProcess,The following statement contains a magic number: try              {                  var process = Process.GetProcessById(processId);                    var safeInputHandle = new SafeFileHandle(new IntPtr(long.Parse(lockFileInfoArray[1]))' true);                    var standardInput = new StreamWriter(new FileStream(safeInputHandle' FileAccess.Write' 4096' false)' Encoding.UTF8' 4096);                  standardInput.AutoFlush = true;                    var standInputFieldName = NRackEnv.IsMono ? "input_stream" : "standardInput";                    var standInputField = process.GetType().GetField(standInputFieldName'                      BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.SetField | BindingFlags.GetField);                    standInputField.SetValue(process' standardInput);                    return process;              }              catch              {                  File.Delete(m_LockFilePath);                  return null;              }
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: if (process == null)              {                  var args = string.Join(" "' (new string[] { Name }).Select(a => "\"" + a + "\"").ToArray());                    ProcessStartInfo startInfo;                    if (!NRack.Base.NRackEnv.IsMono)                  {                      startInfo = new ProcessStartInfo(ProcessAppConst.WorkerAssemblyName' args);                  }                  else                  {                      startInfo = new ProcessStartInfo((Path.DirectorySeparatorChar == '\\' ? "mono.exe" : "mono")' "--runtime=v" + System.Environment.Version.ToString(2) + " \"" + ProcessAppConst.WorkerAssemblyName + "\" " + args);                  }                    startInfo.CreateNoWindow = true;                  startInfo.WindowStyle = ProcessWindowStyle.Hidden;                  startInfo.WorkingDirectory = currentDomain.BaseDirectory;                  startInfo.UseShellExecute = false;                  startInfo.RedirectStandardOutput = true;                  startInfo.RedirectStandardError = true;                  startInfo.RedirectStandardInput = true;                    try                  {                      m_WorkingProcess = Process.Start(startInfo);                  }                  catch (Exception e)                  {                      OnExceptionThrown(e);                      return null;                  }                      m_WorkingProcess.EnableRaisingEvents = true;                  m_WorkingProcess.ErrorDataReceived += new DataReceivedEventHandler(WorkingProcess_ErrorDataReceived);                  m_WorkingProcess.OutputDataReceived += new DataReceivedEventHandler(WorkingProcess_OutputDataReceived);                  m_WorkingProcess.BeginErrorReadLine();                  m_WorkingProcess.BeginOutputReadLine();              }              else              {                  m_WorkingProcess = process;                  m_WorkingProcess.EnableRaisingEvents = true;              }
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: if (process == null)              {                  var startTimeOut = 0;                    int.TryParse(Config.Options.GetValue("startTimeOut"' "0")' out startTimeOut);                    if (startTimeOut <= 0)                  {                      startTimeOut = 10;                  }                    if (!m_ProcessWorkEvent.WaitOne(1000 * startTimeOut))                  {                      ShutdownProcess();                      OnExceptionThrown(new Exception("The remote work item was timeout to setup!"));                      return null;                  }                    if (!"Ok".Equals(m_ProcessWorkStatus' StringComparison.OrdinalIgnoreCase))                  {                      OnExceptionThrown(new Exception("The worker process didn't start successfully!"));                      return null;                  }                    appServer = GetRemoteServer(remoteUri);                    if (appServer == null)                      return null;                    var bootstrapIpcPort = AppDomain.CurrentDomain.GetData("BootstrapIpcPort") as string;                    if (string.IsNullOrEmpty(bootstrapIpcPort))                      throw new Exception("The bootstrap's remoting service has not been started.");                    var ret = false;                  Exception exc = null;                    try                  {                      //Setup and then start the remote server instance                      ret = appServer.Setup(GetMetadata().AppType' "ipc://" + bootstrapIpcPort + "/Bootstrap.rem"' currentDomain.BaseDirectory' Config' StartupConfigFile);                  }                  catch (Exception e)                  {                      exc = e;                  }                    if (!ret)                  {                      ShutdownProcess();                      OnExceptionThrown(new Exception("The remote work item failed to setup!"' exc));                      return null;                  }                    try                  {                      ret = appServer.Start();                  }                  catch (Exception e)                  {                      ret = false;                      exc = e;                  }                    if (!ret)                  {                      ShutdownProcess();                      OnExceptionThrown(new Exception("The remote work item failed to start!"' exc));                      return null;                  }                    m_Locker.SaveLock(m_WorkingProcess);              }              else              {                  appServer = GetRemoteServer(remoteUri);                    if (appServer == null)                      return null;              }
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: if (process == null)              {                  var startTimeOut = 0;                    int.TryParse(Config.Options.GetValue("startTimeOut"' "0")' out startTimeOut);                    if (startTimeOut <= 0)                  {                      startTimeOut = 10;                  }                    if (!m_ProcessWorkEvent.WaitOne(1000 * startTimeOut))                  {                      ShutdownProcess();                      OnExceptionThrown(new Exception("The remote work item was timeout to setup!"));                      return null;                  }                    if (!"Ok".Equals(m_ProcessWorkStatus' StringComparison.OrdinalIgnoreCase))                  {                      OnExceptionThrown(new Exception("The worker process didn't start successfully!"));                      return null;                  }                    appServer = GetRemoteServer(remoteUri);                    if (appServer == null)                      return null;                    var bootstrapIpcPort = AppDomain.CurrentDomain.GetData("BootstrapIpcPort") as string;                    if (string.IsNullOrEmpty(bootstrapIpcPort))                      throw new Exception("The bootstrap's remoting service has not been started.");                    var ret = false;                  Exception exc = null;                    try                  {                      //Setup and then start the remote server instance                      ret = appServer.Setup(GetMetadata().AppType' "ipc://" + bootstrapIpcPort + "/Bootstrap.rem"' currentDomain.BaseDirectory' Config' StartupConfigFile);                  }                  catch (Exception e)                  {                      exc = e;                  }                    if (!ret)                  {                      ShutdownProcess();                      OnExceptionThrown(new Exception("The remote work item failed to setup!"' exc));                      return null;                  }                    try                  {                      ret = appServer.Start();                  }                  catch (Exception e)                  {                      ret = false;                      exc = e;                  }                    if (!ret)                  {                      ShutdownProcess();                      OnExceptionThrown(new Exception("The remote work item failed to start!"' exc));                      return null;                  }                    m_Locker.SaveLock(m_WorkingProcess);              }              else              {                  appServer = GetRemoteServer(remoteUri);                    if (appServer == null)                      return null;              }
Magic Number,NRack.Server.Isolation.AppDomainIsolation,AppDomainApp,C:\repos\kerryjiang_NDock\src\NRack.Server\Isolation\AppDomainIsolation\AppDomainApp.cs,CollectStatus,The following statement contains a magic number: if(m_AppDomainMonitoringSupported)              {                  status[StatusInfoKeys.MemoryUsage] = m_HostDomain == null ? 0 : m_HostDomain.MonitoringSurvivedMemorySize;                    var process = Process.GetCurrentProcess();                  var value = m_HostDomain.MonitoringTotalProcessorTime.TotalMilliseconds * 100 / process.TotalProcessorTime.TotalMilliseconds;                  status[StatusInfoKeys.CpuUsage] = value;              }
