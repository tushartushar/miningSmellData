Implementation smell,Namespace,Class,File,Method,Description
Long Method,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The method has 95 lines of code.
Complex Method,NRack.Server,BootstrapBase,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,NRack.Server,Program,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Program.cs,Main,Cyclomatic complexity of the method is 7
Complex Method,NRack.Server,Program,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Program.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,NRack.Server,Program,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Program.cs,RunAsController,Cyclomatic complexity of the method is 7
Complex Method,NRack.Server.Utils,ProcessPerformanceCounter,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Utils\ProcessPerformanceCounter.cs,GetPerformanceCounterInstanceName,Cyclomatic complexity of the method is 7
Complex Method,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,Cyclomatic complexity of the method is 13
Long Parameter List,NRack.Server,IRemoteManagedApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\IRemoteManagedApp.cs,Setup,The method has 5 parameters.
Long Identifier,NRack.Server.Utils,ProcessPerformanceCounter,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Utils\ProcessPerformanceCounter.cs,Collect,The length of the parameter availableCompletionPortThreads is 30.
Long Statement,NRack.Server,ConfigurationWatcher,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\ConfigurationWatcher.cs,OnConfigFileUpdated,The length of the statement  "		var server = bootstrap.AppServers.FirstOrDefault (x => x.Name.Equals (serverConfig.Name' StringComparison.OrdinalIgnoreCase)); " is 126.
Long Statement,NRack.Server,DefaultStatusCollector,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\DefaultStatusCollector.cs,CollectAppServer,The length of the statement  "		sb.AppendLine (string.Format ("{0}: {1}"' info.Name' string.IsNullOrEmpty (info.Format) ? infoValue : string.Format (info.Format' infoValue))); " is 143.
Long Statement,NRack.Server,BootstrapBase,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,StartStatusCollect,The length of the statement  "		PerformanceCounter = new ProcessPerformanceCounter (Process.GetCurrentProcess ()' PerformanceCounterInfo.GetDefaultPerformanceCounterDefinitions ()' this.ConfigSource.Isolation == IsolationMode.None)' " is 200.
Long Statement,NRack.Server,BootstrapBase,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,RegisterRemotingService,The length of the statement  "	var bootstrapIpcPort = string.Format ("NRack.Bootstrap[{0}]"' Math.Abs (AppDomain.CurrentDomain.BaseDirectory.TrimEnd (Path.DirectorySeparatorChar).GetHashCode ())); " is 165.
Long Statement,NRack.Server,BootstrapBase,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,RegisterRemotingService,The length of the statement  "		serverChannel = new TcpServerChannel (serverTcpChannelName' ConfigSource.TcpRemotingPort' new BinaryServerFormatterSinkProvider { " is 129.
Long Statement,NRack.Server,BootstrapBase,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,RegisterRemotingService,The length of the statement  "		RemotingConfiguration.RegisterWellKnownServiceType (bootstrapProxyType' "Bootstrap.rem"' WellKnownObjectMode.Singleton); " is 120.
Long Statement,NRack.Server,MefExtensions,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\MefExtensions.cs,GetExportType,The length of the statement  "	var valueFactoryField = typeof(Lazy<TExport>).GetField ("m_valueFactory"' BindingFlags.Instance | BindingFlags.NonPublic); " is 122.
Long Statement,NRack.Server,MefExtensions,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\MefExtensions.cs,GetExportType,The length of the statement  "	var exportField = valueFactory.Target.GetType ().GetField ("export"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 139.
Long Statement,NRack.Server,MefExtensions,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\MefExtensions.cs,GetExportType,The length of the statement  "	var memberInfo = (LazyMemberInfo)export.Definition.GetType ().GetProperty ("ExportingLazyMember").GetValue (export.Definition' null); " is 133.
Long Statement,NRack.Server,Program,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Program.cs,Main,The length of the statement  "	|| (isMono && !AppDomain.CurrentDomain.FriendlyName.Equals (Path.GetFileName (Assembly.GetEntryAssembly ().CodeBase))))//MonoService " is 132.
Long Statement,NRack.Server,Program,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Program.cs,RunAsController,The length of the statement  "		var remoteBootstrapUri = string.Format ("ipc://NRack.Bootstrap[{0}]/Bootstrap.rem"' Math.Abs (AppDomain.CurrentDomain.BaseDirectory.TrimEnd (Path.DirectorySeparatorChar).GetHashCode ())); " is 187.
Long Statement,NRack.Server,Program,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Program.cs,RunAsService,The length of the statement  "	currentDomain.SetCachePath (Path.Combine (Path.Combine (currentDomain.BaseDirectory' IsolationAppConst.ShadowCopyDir)' "Bootstrap")); " is 133.
Long Statement,NRack.Server,RemoteAppTypeValidator,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\RemoteAppTypeValidator.cs,GetServerMetadata,The length of the statement  "		lazyServerFactory = m_ExportProvider.GetExports<IAppServer' IAppServerMetadata> ().FirstOrDefault (f => f.Metadata.Name.Equals (serverTypeName' StringComparison.OrdinalIgnoreCase)); " is 181.
Long Statement,NRack.Server,ProcessLocker,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessLocker.cs,GetLockedProcess,The length of the statement  "		var standardInput = new StreamWriter (new FileStream (safeInputHandle' FileAccess.Write' 4096' false)' Encoding.UTF8' 4096); " is 124.
Long Statement,NRack.Server,ProcessLocker,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessLocker.cs,GetLockedProcess,The length of the statement  "		var standInputField = process.GetType ().GetField (standInputFieldName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.SetField | BindingFlags.GetField); " is 168.
Long Statement,NRack.Server.Isolation,AppAssemblyUpdateState,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\AppAssemblyUpdateState.cs,GetLastUpdateTime,The length of the statement  "	foreach (var file in Directory.GetFiles (m_AppAssemblyDir' "*.dll").Union (Directory.GetFiles (m_AppAssemblyDir' "*.exe"))) { " is 125.
Long Statement,NRack.Server.Isolation,AssemblyImport,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\AssemblyImport.cs,RegisterAssembplyImport,The length of the statement  "	hostAppDomain.CreateInstanceFrom (assemblyImportType.Assembly.CodeBase' assemblyImportType.FullName' true' BindingFlags.CreateInstance' null' new object[] { " is 156.
Long Statement,NRack.Server.Isolation,IsolationApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\IsolationApp.cs,RunRecycleTriggers,The length of the statement  "			Task.Factory.StartNew (Restart).ContinueWith (t => OnExceptionThrown (t.Exception)' TaskContinuationOptions.OnlyOnFaulted); " is 123.
Long Statement,NRack.Server.Isolation,IsolationBootstrap,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\IsolationBootstrap.cs,GetAppServerMetadata,The length of the statement  "		validateDomain = AppDomain.CreateDomain ("ValidationDomain"' AppDomain.CurrentDomain.Evidence' IsolationApp.GetAppWorkingDir (serverConfig)' string.Empty' false); " is 162.
Long Statement,NRack.Server.Isolation,IsolationBootstrap,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\IsolationBootstrap.cs,GetAppServerMetadata,The length of the statement  "		var validator = (RemoteAppTypeValidator)validateDomain.CreateInstanceAndUnwrap (validatorType.Assembly.FullName' validatorType.FullName); " is 137.
Long Statement,NRack.Server.Isolation,IsolationBootstrap,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\IsolationBootstrap.cs,SetupRecycleTriggers,The length of the statement  "			var triggerType = m_RecycleTriggers.FirstOrDefault (t => t.Metadata.Name.Equals (triggerConfig.Name' StringComparison.OrdinalIgnoreCase)); " is 138.
Long Statement,NRack.Server.Isolation.AppDomainIsolation,AppDomainApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\AppDomainIsolation\AppDomainApp.cs,CreateHostAppDomain,The length of the statement  "	hostAppDomain.CreateInstanceFrom (assemblyImportType.Assembly.CodeBase' assemblyImportType.FullName' true' BindingFlags.CreateInstance' null' new object[] { " is 156.
Long Statement,NRack.Server.Isolation.AppDomainIsolation,AppDomainApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\AppDomainIsolation\AppDomainApp.cs,CreateAndStartServerInstance,The length of the statement  "		appServer = (IManagedApp)m_HostDomain.CreateInstanceAndUnwrap (marshalServerType.Assembly.FullName' marshalServerType.FullName' true' BindingFlags.CreateInstance' null' new object[] { " is 183.
Long Statement,NRack.Server.Isolation.AppDomainIsolation,AppDomainApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\AppDomainIsolation\AppDomainApp.cs,CollectStatus,The length of the statement  "		var value = m_HostDomain.MonitoringTotalProcessorTime.TotalMilliseconds * 100 / process.TotalProcessorTime.TotalMilliseconds; " is 125.
Long Statement,NRack.Server.Utils,ProcessPerformanceCounter,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Utils\ProcessPerformanceCounter.cs,SetupPerformanceCounters,The length of the statement  "	var instanceName = (isUnix || NRackEnv.IsMono) ? string.Format ("{0}/{1}"' m_Process.Id' m_Process.ProcessName) : GetPerformanceCounterInstanceName (m_Process); " is 160.
Long Statement,NRack.Server.Utils,ProcessPerformanceCounter,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Utils\ProcessPerformanceCounter.cs,Collect,The length of the statement  "			if (Environment.OSVersion.Platform == PlatformID.Unix || Environment.OSVersion.Platform == PlatformID.MacOSX || NRackEnv.IsMono) " is 128.
Long Statement,NRack.Server.Isolation.ProcessIsolation,ExternalProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ExternalProcessApp.cs,CreateAndStartServerInstance,The length of the statement  "	m_PerformanceCounter = new ProcessPerformanceCounter (process' PerformanceCounterInfo.GetDefaultPerformanceCounterDefinitions ()); " is 130.
Long Statement,NRack.Server.Isolation.ProcessIsolation,ProcessBootstrap,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessBootstrap.cs,CreateAppInstance,The length of the statement  "	var serverMetadata = new ExternalProcessAppServerMetadata (serverConfig.Options.Get ("appDir")' appFile' serverConfig.Options.Get ("appArgs")); " is 143.
Long Statement,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The length of the statement  "			startInfo = new ProcessStartInfo ((Path.DirectorySeparatorChar == '\\' ? "mono.exe" : "mono")' "--runtime=v" + System.Environment.Version.ToString (2) + " \"" + ProcessAppConst.WorkerAssemblyName + "\" " + args); " is 212.
Long Statement,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The length of the statement  "			ret = appServer.Setup (GetMetadata ().AppType' "ipc://" + bootstrapIpcPort + "/Bootstrap.rem"' currentDomain.BaseDirectory' Config' StartupConfigFile); " is 151.
Long Statement,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The length of the statement  "	m_PerformanceCounter = new ProcessPerformanceCounter (m_WorkingProcess' PerformanceCounterInfo.GetDefaultPerformanceCounterDefinitions ()); " is 139.
Complex Conditional,NRack.Server,Program,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Program.cs,Main,The conditional expression  "(!isMono && !Environment.UserInteractive) //Windows Service  || (isMono && !AppDomain.CurrentDomain.FriendlyName.Equals (Path.GetFileName (Assembly.GetEntryAssembly ().CodeBase)))"  is complex.
Virtual Method Call from Constructor,NRack.Server,BootstrapBase,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,BootstrapBase,The constructor "BootstrapBase" calls a virtual method "CreateExportProvider".
Empty Catch Block,NRack.Server,Program,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Program.cs,ChangeScriptExecutable,The method has an empty catch block.
Empty Catch Block,NRack.Server.Isolation.ProcessIsolation,ExternalProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ExternalProcessApp.cs,ShutdownProcess,The method has an empty catch block.
Empty Catch Block,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,ShutdownProcess,The method has an empty catch block.
Magic Number,NRack.Server,BootstrapBase,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,StartStatusCollect,The following statement contains a magic number: if (interval == 0)  	interval = 60;  
Magic Number,NRack.Server,BootstrapBase,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,StartStatusCollect,The following statement contains a magic number: interval = 60;  
Magic Number,NRack.Server,BootstrapBase,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\BootstrapBase.cs,StartStatusCollect,The following statement contains a magic number: interval = interval * 1000;  
Magic Number,NRack.Server,Program,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Program.cs,RunAsController,The following statement contains a magic number: if (arguments == null || arguments.Length < 2) {  	Console.WriteLine ("Invalid arguments!");  	return;  }  
Magic Number,NRack.Server,ProcessLocker,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessLocker.cs,GetLockedProcess,The following statement contains a magic number: try {  	var process = Process.GetProcessById (processId);  	var safeInputHandle = new SafeFileHandle (new IntPtr (long.Parse (lockFileInfoArray [1]))' true);  	var standardInput = new StreamWriter (new FileStream (safeInputHandle' FileAccess.Write' 4096' false)' Encoding.UTF8' 4096);  	standardInput.AutoFlush = true;  	var standInputFieldName = NRackEnv.IsMono ? "input_stream" : "standardInput";  	var standInputField = process.GetType ().GetField (standInputFieldName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.SetField | BindingFlags.GetField);  	standInputField.SetValue (process' standardInput);  	return process;  } catch {  	File.Delete (m_LockFilePath);  	return null;  }  
Magic Number,NRack.Server,ProcessLocker,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessLocker.cs,GetLockedProcess,The following statement contains a magic number: try {  	var process = Process.GetProcessById (processId);  	var safeInputHandle = new SafeFileHandle (new IntPtr (long.Parse (lockFileInfoArray [1]))' true);  	var standardInput = new StreamWriter (new FileStream (safeInputHandle' FileAccess.Write' 4096' false)' Encoding.UTF8' 4096);  	standardInput.AutoFlush = true;  	var standInputFieldName = NRackEnv.IsMono ? "input_stream" : "standardInput";  	var standInputField = process.GetType ().GetField (standInputFieldName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.SetField | BindingFlags.GetField);  	standInputField.SetValue (process' standardInput);  	return process;  } catch {  	File.Delete (m_LockFilePath);  	return null;  }  
Magic Number,NRack.Server.Isolation.AppDomainIsolation,AppDomainApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\AppDomainIsolation\AppDomainApp.cs,CollectStatus,The following statement contains a magic number: if (m_AppDomainMonitoringSupported) {  	status [StatusInfoKeys.MemoryUsage] = m_HostDomain == null ? 0 : m_HostDomain.MonitoringSurvivedMemorySize;  	var process = Process.GetCurrentProcess ();  	var value = m_HostDomain.MonitoringTotalProcessorTime.TotalMilliseconds * 100 / process.TotalProcessorTime.TotalMilliseconds;  	status [StatusInfoKeys.CpuUsage] = value;  }  
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: if (process == null) {  	var args = string.Join (" "' (new string[] {  		Name  	}).Select (a => "\"" + a + "\"").ToArray ());  	ProcessStartInfo startInfo;  	if (!NRack.Base.NRackEnv.IsMono) {  		startInfo = new ProcessStartInfo (ProcessAppConst.WorkerAssemblyName' args);  	} else {  		startInfo = new ProcessStartInfo ((Path.DirectorySeparatorChar == '\\' ? "mono.exe" : "mono")' "--runtime=v" + System.Environment.Version.ToString (2) + " \"" + ProcessAppConst.WorkerAssemblyName + "\" " + args);  	}  	startInfo.CreateNoWindow = true;  	startInfo.WindowStyle = ProcessWindowStyle.Hidden;  	startInfo.WorkingDirectory = currentDomain.BaseDirectory;  	startInfo.UseShellExecute = false;  	startInfo.RedirectStandardOutput = true;  	startInfo.RedirectStandardError = true;  	startInfo.RedirectStandardInput = true;  	try {  		m_WorkingProcess = Process.Start (startInfo);  	} catch (Exception e) {  		OnExceptionThrown (e);  		return null;  	}  	m_WorkingProcess.EnableRaisingEvents = true;  	m_WorkingProcess.ErrorDataReceived += new DataReceivedEventHandler (WorkingProcess_ErrorDataReceived);  	m_WorkingProcess.OutputDataReceived += new DataReceivedEventHandler (WorkingProcess_OutputDataReceived);  	m_WorkingProcess.BeginErrorReadLine ();  	m_WorkingProcess.BeginOutputReadLine ();  } else {  	m_WorkingProcess = process;  	m_WorkingProcess.EnableRaisingEvents = true;  }  
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: if (!NRack.Base.NRackEnv.IsMono) {  	startInfo = new ProcessStartInfo (ProcessAppConst.WorkerAssemblyName' args);  } else {  	startInfo = new ProcessStartInfo ((Path.DirectorySeparatorChar == '\\' ? "mono.exe" : "mono")' "--runtime=v" + System.Environment.Version.ToString (2) + " \"" + ProcessAppConst.WorkerAssemblyName + "\" " + args);  }  
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: startInfo = new ProcessStartInfo ((Path.DirectorySeparatorChar == '\\' ? "mono.exe" : "mono")' "--runtime=v" + System.Environment.Version.ToString (2) + " \"" + ProcessAppConst.WorkerAssemblyName + "\" " + args);  
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: if (process == null) {  	var startTimeOut = 0;  	int.TryParse (Config.Options.GetValue ("startTimeOut"' "0")' out startTimeOut);  	if (startTimeOut <= 0) {  		startTimeOut = 10;  	}  	if (!m_ProcessWorkEvent.WaitOne (1000 * startTimeOut)) {  		ShutdownProcess ();  		OnExceptionThrown (new Exception ("The remote work item was timeout to setup!"));  		return null;  	}  	if (!"Ok".Equals (m_ProcessWorkStatus' StringComparison.OrdinalIgnoreCase)) {  		OnExceptionThrown (new Exception ("The worker process didn't start successfully!"));  		return null;  	}  	appServer = GetRemoteServer (remoteUri);  	if (appServer == null)  		return null;  	var bootstrapIpcPort = AppDomain.CurrentDomain.GetData ("BootstrapIpcPort") as string;  	if (string.IsNullOrEmpty (bootstrapIpcPort))  		throw new Exception ("The bootstrap's remoting service has not been started.");  	var ret = false;  	Exception exc = null;  	try {  		//Setup and then start the remote server instance  		ret = appServer.Setup (GetMetadata ().AppType' "ipc://" + bootstrapIpcPort + "/Bootstrap.rem"' currentDomain.BaseDirectory' Config' StartupConfigFile);  	} catch (Exception e) {  		exc = e;  	}  	if (!ret) {  		ShutdownProcess ();  		OnExceptionThrown (new Exception ("The remote work item failed to setup!"' exc));  		return null;  	}  	try {  		ret = appServer.Start ();  	} catch (Exception e) {  		ret = false;  		exc = e;  	}  	if (!ret) {  		ShutdownProcess ();  		OnExceptionThrown (new Exception ("The remote work item failed to start!"' exc));  		return null;  	}  	m_Locker.SaveLock (m_WorkingProcess);  } else {  	appServer = GetRemoteServer (remoteUri);  	if (appServer == null)  		return null;  }  
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: if (process == null) {  	var startTimeOut = 0;  	int.TryParse (Config.Options.GetValue ("startTimeOut"' "0")' out startTimeOut);  	if (startTimeOut <= 0) {  		startTimeOut = 10;  	}  	if (!m_ProcessWorkEvent.WaitOne (1000 * startTimeOut)) {  		ShutdownProcess ();  		OnExceptionThrown (new Exception ("The remote work item was timeout to setup!"));  		return null;  	}  	if (!"Ok".Equals (m_ProcessWorkStatus' StringComparison.OrdinalIgnoreCase)) {  		OnExceptionThrown (new Exception ("The worker process didn't start successfully!"));  		return null;  	}  	appServer = GetRemoteServer (remoteUri);  	if (appServer == null)  		return null;  	var bootstrapIpcPort = AppDomain.CurrentDomain.GetData ("BootstrapIpcPort") as string;  	if (string.IsNullOrEmpty (bootstrapIpcPort))  		throw new Exception ("The bootstrap's remoting service has not been started.");  	var ret = false;  	Exception exc = null;  	try {  		//Setup and then start the remote server instance  		ret = appServer.Setup (GetMetadata ().AppType' "ipc://" + bootstrapIpcPort + "/Bootstrap.rem"' currentDomain.BaseDirectory' Config' StartupConfigFile);  	} catch (Exception e) {  		exc = e;  	}  	if (!ret) {  		ShutdownProcess ();  		OnExceptionThrown (new Exception ("The remote work item failed to setup!"' exc));  		return null;  	}  	try {  		ret = appServer.Start ();  	} catch (Exception e) {  		ret = false;  		exc = e;  	}  	if (!ret) {  		ShutdownProcess ();  		OnExceptionThrown (new Exception ("The remote work item failed to start!"' exc));  		return null;  	}  	m_Locker.SaveLock (m_WorkingProcess);  } else {  	appServer = GetRemoteServer (remoteUri);  	if (appServer == null)  		return null;  }  
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: if (startTimeOut <= 0) {  	startTimeOut = 10;  }  
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: startTimeOut = 10;  
Magic Number,NRack.Server.Isolation.ProcessIsolation,ProcessApp,D:\newReposJune17\kerryjiang_NDock\src\NRack.Server\Isolation\ProcessIsolation\ProcessApp.cs,CreateAndStartServerInstance,The following statement contains a magic number: if (!m_ProcessWorkEvent.WaitOne (1000 * startTimeOut)) {  	ShutdownProcess ();  	OnExceptionThrown (new Exception ("The remote work item was timeout to setup!"));  	return null;  }  
