Implementation smell,Namespace,Class,File,Method,Description
Long Method,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The method has 550 lines of code.
Long Method,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The method has 119 lines of code.
Complex Method,R7.ImageHandler,ImageHandlerInternal,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerInternal.cs,HandleImageRequest,Cyclomatic complexity of the method is 11
Complex Method,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GetImageFilename,Cyclomatic complexity of the method is 12
Complex Method,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,Cyclomatic complexity of the method is 79
Complex Method,R7.ImageHandler,PaletteQuantizer,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Quantizers\PaletteQuantizer.cs,QuantizePixel,Cyclomatic complexity of the method is 8
Complex Method,R7.ImageHandler,ImageBarcodeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBarcodeTransform.cs,ProcessImage,Cyclomatic complexity of the method is 40
Complex Method,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,Cyclomatic complexity of the method is 11
Complex Method,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,Cyclomatic complexity of the method is 11
Complex Method,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,Cyclomatic complexity of the method is 9
Complex Method,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,ProcessImage,Cyclomatic complexity of the method is 15
Complex Method,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,Cyclomatic complexity of the method is 45
Complex Method,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,Cyclomatic complexity of the method is 38
Complex Method,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,Cyclomatic complexity of the method is 16
Complex Method,R7.ImageHandler,ImageHandlerBase,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerBase.cs,ProcessRequest,Cyclomatic complexity of the method is 11
Complex Method,R7.ImageHandler,Utils,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Utils.cs,GetImageFormatByExtension,Cyclomatic complexity of the method is 11
Complex Method,R7.ImageHandler,ImageHandlerSettings,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerSettings.cs,ImageHandlerSettings,Cyclomatic complexity of the method is 52
Long Parameter List,R7.ImageHandler,QuantizerBase,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Quantizers\QuantizerBase.cs,SecondPass,The method has 5 parameters.
Long Statement,R7.ImageHandler,ImageHandlerInternal,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerInternal.cs,HandleImageRequest,The length of the statement  "		if (!string.IsNullOrEmpty (context.Request.Headers ["If-Modified-Since"]) && !string.IsNullOrEmpty (context.Request.Headers ["If-None-Match"])) { " is 145.
Long Statement,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The length of the statement  "				*/if (imgFile == string.Empty && string.IsNullOrEmpty (parameters ["url"]) && string.IsNullOrEmpty (parameters ["imageurl"]) && string.IsNullOrEmpty (parameters ["db"]) && string.IsNullOrEmpty (parameters ["dnn"]) && string.IsNullOrEmpty (parameters ["percentage"]) && string.IsNullOrEmpty (parameters ["placeholder"]) && string.IsNullOrEmpty (parameters ["barcode"]) && string.IsNullOrEmpty (parameters ["schedule"])) { " is 420.
Long Statement,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The length of the statement  "				dbTrans.CompositingQuality = CompositingQuality.HighQuality;*/if (connectionName == string.Empty || table == string.Empty || imageField == string.Empty || idField == string.Empty) { " is 181.
Long Statement,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The length of the statement  "		if (conn == null || string.IsNullOrEmpty (table) || string.IsNullOrEmpty (idField) || string.IsNullOrEmpty (parameters ["IdValue"]) || string.IsNullOrEmpty (imageField)) { " is 171.
Long Statement,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The length of the statement  "		if (!string.IsNullOrEmpty (parameters ["type"]) && "upca'ean8'ean13'code39'code128'itf'codabar'plessey'msi'qrcode'pdf417'aztec'datamatrix'".LastIndexOf (parameters ["type"].ToLowerInvariant () + "'") > -1) { " is 207.
Long Statement,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The length of the statement  "	if (string.IsNullOrEmpty (parameters ["placeholder"]) && string.IsNullOrEmpty (parameters ["barcode"]) && (!string.IsNullOrEmpty (parameters ["width"]) || !string.IsNullOrEmpty (parameters ["height"]) || (!string.IsNullOrEmpty (parameters ["maxwidth"]) || !string.IsNullOrEmpty (parameters ["maxheight"])))) { " is 309.
Long Statement,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The length of the statement  "		if (double.TryParse (parameters ["Gamma"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out gamma) && (gamma >= 0.2 && gamma <= 5)) { " is 150.
Long Statement,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The length of the statement  "		if (double.TryParse (parameters ["contrast"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out contrast) && (contrast >= -100 && contrast <= 100)) { " is 165.
Long Statement,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The length of the statement  "				placeHolderTrans.CompositingQuality = CompositingQuality.HighQuality;*/placeHolderTrans.InterpolationMode = InterpolationMode.HighQualityBicubic; " is 145.
Long Statement,R7.ImageHandler,ImageDbTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageDbTransform.cs,ProcessImage,The length of the statement  "		sqlCmd = "SELECT RTRIM(Files.Folder) + RTRIM(LTRIM(Files.FileName)) AS profilepic" + " FROM UserProfile " + " INNER JOIN ProfilePropertydefinition on ProfilePropertydefinition.PropertyDefinitionID = UserProfile.PropertyDefinitionID" + " INNER JOIN Files on UserProfile.PropertyValue = Files.FileId" + " WHERE ProfilePropertydefinition.Propertyname = 'Photo'" + " AND ProfilePropertydefinition.PortalId = " + this.PortalId.ToString () + " AND Userprofile.UserId = " + this.UserId.ToString (); " is 491.
Long Statement,R7.ImageHandler,ImageDbTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageDbTransform.cs,ProcessImage,The length of the statement  "			string imgFile = Path.Combine (HttpContext.Current.Request.PhysicalApplicationPath' "Portals\\" + this.PortalId.ToString ()); " is 125.
Long Statement,R7.ImageHandler,ImageDbTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageDbTransform.cs,ProcessImage,The length of the statement  "		object result = SqlHelper.ExecuteScalar (this.ConnectionString' CommandType.Text' sqlCmd' new SqlParameter ("Value"' this.IdFieldValue)); " is 137.
Long Statement,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitImage,The length of the statement  "	graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' resizeWidth + 2 * _border' resizeHeight + 2 * _border)); " is 129.
Long Statement,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitImage,The length of the statement  "	graphics.DrawImage (img' new Rectangle (_border' _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible " is 124.
Long Statement,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitSquareImage,The length of the statement  "	graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' this.Width + 2 * _border' this.Width + 2 * _border)); " is 126.
Long Statement,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitSquareImage,The length of the statement  "	graphics.DrawImage (img' new Rectangle ((this.Width - resizeWidth) / 2 + _border' (this.Width - resizeHeight) / 2 + _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible " is 191.
Long Statement,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,GetImage,The length of the statement  "			viewObject.Draw (1' -1' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero' deviceContextHandle' ref rectangle' IntPtr.Zero' IntPtr.Zero' 0); " is 128.
Long Statement,R7.ImageHandler,ImageHandlerBase,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerBase.cs,ProcessRequest,The length of the statement  "					throw new SecurityException (string.Format ("Not allowed to use from {0} (only localhost + {1}): "' context.Request.UrlReferrer.Host' allowedDomains)); " is 151.
Complex Conditional,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The conditional expression  "imgFile == string.Empty && string.IsNullOrEmpty (parameters ["url"]) && string.IsNullOrEmpty (parameters ["imageurl"]) && string.IsNullOrEmpty (parameters ["db"]) && string.IsNullOrEmpty (parameters ["dnn"]) && string.IsNullOrEmpty (parameters ["percentage"]) && string.IsNullOrEmpty (parameters ["placeholder"]) && string.IsNullOrEmpty (parameters ["barcode"]) && string.IsNullOrEmpty (parameters ["schedule"])"  is complex.
Complex Conditional,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The conditional expression  "connectionName == string.Empty || table == string.Empty || imageField == string.Empty || idField == string.Empty"  is complex.
Complex Conditional,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The conditional expression  "conn == null || string.IsNullOrEmpty (table) || string.IsNullOrEmpty (idField) || string.IsNullOrEmpty (parameters ["IdValue"]) || string.IsNullOrEmpty (imageField)"  is complex.
Complex Conditional,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The conditional expression  "string.IsNullOrEmpty (parameters ["placeholder"]) && string.IsNullOrEmpty (parameters ["barcode"]) && (!string.IsNullOrEmpty (parameters ["width"]) || !string.IsNullOrEmpty (parameters ["height"]) || (!string.IsNullOrEmpty (parameters ["maxwidth"]) || !string.IsNullOrEmpty (parameters ["maxheight"])))"  is complex.
Empty Catch Block,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GetImageFilename,The method has an empty catch block.
Empty Catch Block,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The method has an empty catch block.
Empty Catch Block,R7.ImageHandler,DiskImageStore,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageStore\DiskImageStore.cs,Add,The method has an empty catch block.
Magic Number,R7.ImageHandler,ImageHandlerInternal,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (Settings.EnableClientCache) {  	if (!string.IsNullOrEmpty (context.Request.Headers ["If-Modified-Since"]) && !string.IsNullOrEmpty (context.Request.Headers ["If-None-Match"])) {  		var provider = CultureInfo.InvariantCulture;  		var lastMod = DateTime.ParseExact (context.Request.Headers ["If-Modified-Since"]' "r"' provider).ToLocalTime ();  		var etag = context.Request.Headers ["If-None-Match"];  		if (lastMod + Settings.ClientCacheExpiration > Settings.Now && etag == cacheId) {  			// send 304 when cache time is not expired  			context.Response.StatusCode = 304;  			context.Response.StatusDescription = "Not Modified";  			context.Response.End ();  			return;  		}  	}  	cachePolicy.SetCacheability (GetDnnCacheability (context));  	cachePolicy.SetLastModified (Settings.Now);  	// REVIEW: Check if DNN has option about client cache expiration?  	cachePolicy.SetExpires (Settings.Now + Settings.ClientCacheExpiration);  	cachePolicy.SetETag (cacheId);  }  
Magic Number,R7.ImageHandler,ImageHandlerInternal,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (!string.IsNullOrEmpty (context.Request.Headers ["If-Modified-Since"]) && !string.IsNullOrEmpty (context.Request.Headers ["If-None-Match"])) {  	var provider = CultureInfo.InvariantCulture;  	var lastMod = DateTime.ParseExact (context.Request.Headers ["If-Modified-Since"]' "r"' provider).ToLocalTime ();  	var etag = context.Request.Headers ["If-None-Match"];  	if (lastMod + Settings.ClientCacheExpiration > Settings.Now && etag == cacheId) {  		// send 304 when cache time is not expired  		context.Response.StatusCode = 304;  		context.Response.StatusDescription = "Not Modified";  		context.Response.End ();  		return;  	}  }  
Magic Number,R7.ImageHandler,ImageHandlerInternal,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (lastMod + Settings.ClientCacheExpiration > Settings.Now && etag == cacheId) {  	// send 304 when cache time is not expired  	context.Response.StatusCode = 304;  	context.Response.StatusDescription = "Not Modified";  	context.Response.End ();  	return;  }  
Magic Number,R7.ImageHandler,ImageHandlerInternal,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: context.Response.StatusCode = 304;  
Magic Number,R7.ImageHandler,ImageHandlerInternal,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerInternal.cs,RenderImage,The following statement contains a magic number: if (ContentType == ImageFormat.Gif) {  	var quantizer = new OctreeQuantizer (255' 8);  	using (var quantizedBitmap = quantizer.Quantize (image)) {  		quantizedBitmap.Save (outStream' ImageFormat.Gif);  	}  }  else {  	var encParams = new EncoderParameters (1);  	encParams.Param [0] = new EncoderParameter (System.Drawing.Imaging.Encoder.Quality' Settings.ImageCompression);  	ImageCodecInfo ici = Utils.GetEncoderInfo (Utils.GetImageMimeType (ContentType));  	image.Save (outStream' ici' encParams);  }  
Magic Number,R7.ImageHandler,ImageHandlerInternal,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerInternal.cs,RenderImage,The following statement contains a magic number: if (ContentType == ImageFormat.Gif) {  	var quantizer = new OctreeQuantizer (255' 8);  	using (var quantizedBitmap = quantizer.Quantize (image)) {  		quantizedBitmap.Save (outStream' ImageFormat.Gif);  	}  }  else {  	var encParams = new EncoderParameters (1);  	encParams.Param [0] = new EncoderParameter (System.Drawing.Imaging.Encoder.Quality' Settings.ImageCompression);  	ImageCodecInfo ici = Utils.GetEncoderInfo (Utils.GetImageMimeType (ContentType));  	image.Save (outStream' ici' encParams);  }  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: if (!string.IsNullOrEmpty ((parameters ["barcode"]))) {  	var barcodeTrans = new ImageBarcodeTransform ();  	/* 				barcodeTrans.InterpolationMode = InterpolationMode.HighQualityBicubic; 				barcodeTrans.PixelOffsetMode = PixelOffsetMode.HighQuality; 				barcodeTrans.SmoothingMode = SmoothingMode.HighQuality; 				barcodeTrans.CompositingQuality = CompositingQuality.HighQuality; 				*/barcodeTrans.InterpolationMode = Settings.InterpolationMode;  	barcodeTrans.PixelOffsetMode = Settings.PixelOffsetMode;  	barcodeTrans.SmoothingMode = Settings.SmoothingMode;  	barcodeTrans.CompositingQuality = Settings.CompositingQuality;  	barcodeTrans.Border = 0;  	barcodeTrans.Width = 100;  	barcodeTrans.Height = 100;  	if (!string.IsNullOrEmpty (parameters ["encoding"]))  		barcodeTrans.Encoding = parameters ["encoding"];  	if (!string.IsNullOrEmpty (parameters ["type"]) && "upca'ean8'ean13'code39'code128'itf'codabar'plessey'msi'qrcode'pdf417'aztec'datamatrix'".LastIndexOf (parameters ["type"].ToLowerInvariant () + "'") > -1) {  		barcodeTrans.Type = parameters ["type"].ToLower ();  	}  	if (!string.IsNullOrEmpty (parameters ["content"])) {  		barcodeTrans.Content = HttpUtility.UrlDecode (parameters ["content"]);  	}  	if (!string.IsNullOrEmpty (parameters ["width"])) {  		barcodeTrans.Width = Convert.ToInt32 (parameters ["width"]);  	}  	if (!string.IsNullOrEmpty (parameters ["height"])) {  		barcodeTrans.Height = Convert.ToInt32 (parameters ["height"]);  	}  	if (!string.IsNullOrEmpty (parameters ["border"])) {  		barcodeTrans.Border = Convert.ToInt32 (parameters ["border"]);  	}  	ImageTransforms.Add (barcodeTrans);  }  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: if (!string.IsNullOrEmpty ((parameters ["barcode"]))) {  	var barcodeTrans = new ImageBarcodeTransform ();  	/* 				barcodeTrans.InterpolationMode = InterpolationMode.HighQualityBicubic; 				barcodeTrans.PixelOffsetMode = PixelOffsetMode.HighQuality; 				barcodeTrans.SmoothingMode = SmoothingMode.HighQuality; 				barcodeTrans.CompositingQuality = CompositingQuality.HighQuality; 				*/barcodeTrans.InterpolationMode = Settings.InterpolationMode;  	barcodeTrans.PixelOffsetMode = Settings.PixelOffsetMode;  	barcodeTrans.SmoothingMode = Settings.SmoothingMode;  	barcodeTrans.CompositingQuality = Settings.CompositingQuality;  	barcodeTrans.Border = 0;  	barcodeTrans.Width = 100;  	barcodeTrans.Height = 100;  	if (!string.IsNullOrEmpty (parameters ["encoding"]))  		barcodeTrans.Encoding = parameters ["encoding"];  	if (!string.IsNullOrEmpty (parameters ["type"]) && "upca'ean8'ean13'code39'code128'itf'codabar'plessey'msi'qrcode'pdf417'aztec'datamatrix'".LastIndexOf (parameters ["type"].ToLowerInvariant () + "'") > -1) {  		barcodeTrans.Type = parameters ["type"].ToLower ();  	}  	if (!string.IsNullOrEmpty (parameters ["content"])) {  		barcodeTrans.Content = HttpUtility.UrlDecode (parameters ["content"]);  	}  	if (!string.IsNullOrEmpty (parameters ["width"])) {  		barcodeTrans.Width = Convert.ToInt32 (parameters ["width"]);  	}  	if (!string.IsNullOrEmpty (parameters ["height"])) {  		barcodeTrans.Height = Convert.ToInt32 (parameters ["height"]);  	}  	if (!string.IsNullOrEmpty (parameters ["border"])) {  		barcodeTrans.Border = Convert.ToInt32 (parameters ["border"]);  	}  	ImageTransforms.Add (barcodeTrans);  }  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: barcodeTrans.Width = 100;  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: barcodeTrans.Height = 100;  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: if (!string.IsNullOrEmpty (parameters ["gamma"])) {  	var gammaTrans = new ImageGammaTransform ();  	gammaTrans.InterpolationMode = Settings.InterpolationMode;  	gammaTrans.PixelOffsetMode = Settings.PixelOffsetMode;  	gammaTrans.SmoothingMode = Settings.SmoothingMode;  	gammaTrans.CompositingQuality = Settings.CompositingQuality;  	/* 				gammaTrans.InterpolationMode = InterpolationMode.HighQualityBicubic; 				gammaTrans.PixelOffsetMode = PixelOffsetMode.HighQuality; 				gammaTrans.SmoothingMode = SmoothingMode.HighQuality; 				gammaTrans.CompositingQuality = CompositingQuality.HighQuality; 			*/var gamma = 1.0;  	if (double.TryParse (parameters ["Gamma"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out gamma) && (gamma >= 0.2 && gamma <= 5)) {  		gammaTrans.Gamma = gamma;  		ImageTransforms.Add (gammaTrans);  	}  }  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: if (!string.IsNullOrEmpty (parameters ["gamma"])) {  	var gammaTrans = new ImageGammaTransform ();  	gammaTrans.InterpolationMode = Settings.InterpolationMode;  	gammaTrans.PixelOffsetMode = Settings.PixelOffsetMode;  	gammaTrans.SmoothingMode = Settings.SmoothingMode;  	gammaTrans.CompositingQuality = Settings.CompositingQuality;  	/* 				gammaTrans.InterpolationMode = InterpolationMode.HighQualityBicubic; 				gammaTrans.PixelOffsetMode = PixelOffsetMode.HighQuality; 				gammaTrans.SmoothingMode = SmoothingMode.HighQuality; 				gammaTrans.CompositingQuality = CompositingQuality.HighQuality; 			*/var gamma = 1.0;  	if (double.TryParse (parameters ["Gamma"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out gamma) && (gamma >= 0.2 && gamma <= 5)) {  		gammaTrans.Gamma = gamma;  		ImageTransforms.Add (gammaTrans);  	}  }  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: if (double.TryParse (parameters ["Gamma"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out gamma) && (gamma >= 0.2 && gamma <= 5)) {  	gammaTrans.Gamma = gamma;  	ImageTransforms.Add (gammaTrans);  }  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: if (double.TryParse (parameters ["Gamma"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out gamma) && (gamma >= 0.2 && gamma <= 5)) {  	gammaTrans.Gamma = gamma;  	ImageTransforms.Add (gammaTrans);  }  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: if (!string.IsNullOrEmpty (parameters ["contrast"])) {  	var contrastTrans = new ImageContrastTransform ();  	/* 				contrastTrans.InterpolationMode = InterpolationMode.HighQualityBicubic; 				contrastTrans.PixelOffsetMode = PixelOffsetMode.HighQuality; 				contrastTrans.SmoothingMode = SmoothingMode.HighQuality; 				contrastTrans.CompositingQuality = CompositingQuality.HighQuality; 				*/contrastTrans.InterpolationMode = Settings.InterpolationMode;  	contrastTrans.PixelOffsetMode = Settings.PixelOffsetMode;  	contrastTrans.SmoothingMode = Settings.SmoothingMode;  	contrastTrans.CompositingQuality = Settings.CompositingQuality;  	var contrast = 0.0;  	if (double.TryParse (parameters ["contrast"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out contrast) && (contrast >= -100 && contrast <= 100)) {  		contrastTrans.Contrast = contrast;  		ImageTransforms.Add (contrastTrans);  	}  }  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: if (!string.IsNullOrEmpty (parameters ["contrast"])) {  	var contrastTrans = new ImageContrastTransform ();  	/* 				contrastTrans.InterpolationMode = InterpolationMode.HighQualityBicubic; 				contrastTrans.PixelOffsetMode = PixelOffsetMode.HighQuality; 				contrastTrans.SmoothingMode = SmoothingMode.HighQuality; 				contrastTrans.CompositingQuality = CompositingQuality.HighQuality; 				*/contrastTrans.InterpolationMode = Settings.InterpolationMode;  	contrastTrans.PixelOffsetMode = Settings.PixelOffsetMode;  	contrastTrans.SmoothingMode = Settings.SmoothingMode;  	contrastTrans.CompositingQuality = Settings.CompositingQuality;  	var contrast = 0.0;  	if (double.TryParse (parameters ["contrast"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out contrast) && (contrast >= -100 && contrast <= 100)) {  		contrastTrans.Contrast = contrast;  		ImageTransforms.Add (contrastTrans);  	}  }  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: if (double.TryParse (parameters ["contrast"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out contrast) && (contrast >= -100 && contrast <= 100)) {  	contrastTrans.Contrast = contrast;  	ImageTransforms.Add (contrastTrans);  }  
Magic Number,R7.ImageHandler,ImageHandler,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\R7.ImageHandler.cs,GenerateImage,The following statement contains a magic number: if (double.TryParse (parameters ["contrast"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out contrast) && (contrast >= -100 && contrast <= 100)) {  	contrastTrans.Contrast = contrast;  	ImageTransforms.Add (contrastTrans);  }  
Magic Number,R7.ImageHandler,GrayscaleQuantizer,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Quantizers\GrayscaleQuantizer.cs,GrayscaleQuantizer,The following statement contains a magic number: _colors = new Color[256];  
Magic Number,R7.ImageHandler,GrayscaleQuantizer,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Quantizers\GrayscaleQuantizer.cs,QuantizePixel,The following statement contains a magic number: colorIndex = (byte)(luminance + 0.5);  
Magic Number,R7.ImageHandler,OctreeQuantizer,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Quantizers\OctreeQuantizer.cs,OctreeQuantizer,The following statement contains a magic number: if (maxColors > 255)  	throw new ArgumentOutOfRangeException ("maxColors"' maxColors' "The number of colors should be less than 256");  
Magic Number,R7.ImageHandler,OctreeQuantizer,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Quantizers\OctreeQuantizer.cs,OctreeQuantizer,The following statement contains a magic number: if ((maxColorBits < 1) | (maxColorBits > 8))  	throw new ArgumentOutOfRangeException ("maxColorBits"' maxColorBits' "This should be between 1 and 8");  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (Brightness < -255)  	Brightness = -255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (Brightness < -255)  	Brightness = -255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: Brightness = -255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (Brightness > 255)  	Brightness = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (Brightness > 255)  	Brightness = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: Brightness = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cR > 255)  	cR = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cR > 255)  	cR = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: cR = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cG > 255)  	cG = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cG > 255)  	cG = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: cG = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cB > 255)  	cB = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cB > 255)  	cB = 255;  
Magic Number,R7.ImageHandler,ImageBrightnessTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: cB = 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (Contrast < -100)  	Contrast = -100;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (Contrast < -100)  	Contrast = -100;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: Contrast = -100;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (Contrast > 100)  	Contrast = 100;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (Contrast > 100)  	Contrast = 100;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: Contrast = 100;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: Contrast = (100.0 + Contrast) / 100.0;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: Contrast = (100.0 + Contrast) / 100.0;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pR -= 0.5;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pR += 0.5;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pR *= 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pR > 255)  	pR = 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pR > 255)  	pR = 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pR = 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pG -= 0.5;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pG += 0.5;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pG *= 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pG > 255)  	pG = 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pG > 255)  	pG = 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pG = 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pB -= 0.5;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pB += 0.5;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pB *= 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pB > 255)  	pB = 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pB > 255)  	pB = 255;  
Magic Number,R7.ImageHandler,ImageContrastTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pB = 255;  
Magic Number,R7.ImageHandler,ImageCounterTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageCounterTransform.cs,ImageCounterTransform,The following statement contains a magic number: this.Digits = 5;  
Magic Number,R7.ImageHandler,ImageGammaTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  }  
Magic Number,R7.ImageHandler,ImageGammaTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  }  
Magic Number,R7.ImageHandler,ImageGammaTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  }  
Magic Number,R7.ImageHandler,ImageGammaTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  }  
Magic Number,R7.ImageHandler,ImageGammaTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  }  
Magic Number,R7.ImageHandler,ImageGammaTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  
Magic Number,R7.ImageHandler,ImageGammaTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  
Magic Number,R7.ImageHandler,ImageGammaTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  
Magic Number,R7.ImageHandler,ImageGammaTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  
Magic Number,R7.ImageHandler,ImageGreyScaleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < bmap.Width; i++) {  	for (var j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		var gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  		bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  	}  }  
Magic Number,R7.ImageHandler,ImageGreyScaleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < bmap.Width; i++) {  	for (var j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		var gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  		bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  	}  }  
Magic Number,R7.ImageHandler,ImageGreyScaleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < bmap.Width; i++) {  	for (var j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		var gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  		bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  	}  }  
Magic Number,R7.ImageHandler,ImageGreyScaleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (var j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	var gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  	bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  }  
Magic Number,R7.ImageHandler,ImageGreyScaleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (var j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	var gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  	bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  }  
Magic Number,R7.ImageHandler,ImageGreyScaleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (var j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	var gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  	bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  }  
Magic Number,R7.ImageHandler,ImageInvertTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  	}  }  
Magic Number,R7.ImageHandler,ImageInvertTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  	}  }  
Magic Number,R7.ImageHandler,ImageInvertTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  	}  }  
Magic Number,R7.ImageHandler,ImageInvertTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  }  
Magic Number,R7.ImageHandler,ImageInvertTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  }  
Magic Number,R7.ImageHandler,ImageInvertTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  }  
Magic Number,R7.ImageHandler,ImageInvertTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  
Magic Number,R7.ImageHandler,ImageInvertTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  
Magic Number,R7.ImageHandler,ImageInvertTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill pie  	// Degrees are taken clockwise' 0 is parallel with x  	// For sweep angle we must convert percent to degrees (90/25 = 18/5)  	float startAngle = -90.0F;  	float sweepAngle = (18.0F / 5) * Percentage;  	Rectangle rectangle = new Rectangle (5' 5' 90' 90);  	Brush colorBrush = new SolidBrush (Color);  	objGraphics.FillPie (colorBrush' rectangle' startAngle' sweepAngle);  	// Fill inner circle with white  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.FillEllipse (Brushes.White' rectangle);  	// Draw circles  	rectangle = new Rectangle (5' 5' 90' 90);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	rectangle = new Rectangle (20' 20' 60' 60);  	objGraphics.DrawEllipse (Pens.LightGray' rectangle);  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' 13' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	rectangle = new Rectangle (20' 40' 62' 20);  	objGraphics.DrawString (Percentage + "%"' font' Brushes.DarkGray' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 20' 60' 60);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 20' 60' 60);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 20' 60' 60);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 20' 60' 60);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (5' 5' 90' 90);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (5' 5' 90' 90);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (5' 5' 90' 90);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (5' 5' 90' 90);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 20' 60' 60);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 20' 60' 60);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 20' 60' 60);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 20' 60' 60);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 40' 62' 20);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 40' 62' 20);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 40' 62' 20);  
Magic Number,R7.ImageHandler,ImagePercentageTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePercentageTransform.cs,ProcessImage,The following statement contains a magic number: rectangle = new Rectangle (20' 40' 62' 20);  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (Graphics objGraphics = Graphics.FromImage (bitmap)) {  	// Initialize graphics  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	// Fill bitmap with backcolor  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	// Draw border  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	// Determine fontsize  	int fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	// Draw text on image  	// Use rectangle for text and align text to center of rectangle  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	StringFormat stringFormat = new StringFormat ();  	stringFormat.Alignment = StringAlignment.Center;  	stringFormat.LineAlignment = StringAlignment.Center;  	Rectangle rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	// Save indicator to file  	objGraphics.Flush ();  }  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: fontSize = 8;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: fontSize = 10;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: fontSize = 12;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: fontSize = 14;  
Magic Number,R7.ImageHandler,ImagePlaceholderTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImagePlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: fontSize = 24;  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitImage,The following statement contains a magic number: graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' resizeWidth + 2 * _border' resizeHeight + 2 * _border));  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitImage,The following statement contains a magic number: graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' resizeWidth + 2 * _border' resizeHeight + 2 * _border));  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitImage,The following statement contains a magic number: graphics.DrawImage (img' new Rectangle (_border' _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible  new Rectangle (2' 2' img.Width - 4' img.Height - 4)' GraphicsUnit.Pixel);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitImage,The following statement contains a magic number: graphics.DrawImage (img' new Rectangle (_border' _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible  new Rectangle (2' 2' img.Width - 4' img.Height - 4)' GraphicsUnit.Pixel);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitImage,The following statement contains a magic number: graphics.DrawImage (img' new Rectangle (_border' _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible  new Rectangle (2' 2' img.Width - 4' img.Height - 4)' GraphicsUnit.Pixel);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitImage,The following statement contains a magic number: graphics.DrawImage (img' new Rectangle (_border' _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible  new Rectangle (2' 2' img.Width - 4' img.Height - 4)' GraphicsUnit.Pixel);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' this.Width + 2 * _border' this.Width + 2 * _border));  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' this.Width + 2 * _border' this.Width + 2 * _border));  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.DrawImage (img' new Rectangle ((this.Width - resizeWidth) / 2 + _border' (this.Width - resizeHeight) / 2 + _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible  new Rectangle (2' 2' img.Width - 4' img.Height - 4)' GraphicsUnit.Pixel);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.DrawImage (img' new Rectangle ((this.Width - resizeWidth) / 2 + _border' (this.Width - resizeHeight) / 2 + _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible  new Rectangle (2' 2' img.Width - 4' img.Height - 4)' GraphicsUnit.Pixel);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.DrawImage (img' new Rectangle ((this.Width - resizeWidth) / 2 + _border' (this.Width - resizeHeight) / 2 + _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible  new Rectangle (2' 2' img.Width - 4' img.Height - 4)' GraphicsUnit.Pixel);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.DrawImage (img' new Rectangle ((this.Width - resizeWidth) / 2 + _border' (this.Width - resizeHeight) / 2 + _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible  new Rectangle (2' 2' img.Width - 4' img.Height - 4)' GraphicsUnit.Pixel);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.DrawImage (img' new Rectangle ((this.Width - resizeWidth) / 2 + _border' (this.Width - resizeHeight) / 2 + _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible  new Rectangle (2' 2' img.Width - 4' img.Height - 4)' GraphicsUnit.Pixel);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.DrawImage (img' new Rectangle ((this.Width - resizeWidth) / 2 + _border' (this.Width - resizeHeight) / 2 + _border' resizeWidth' resizeHeight)' // HACK: makes 2px border less visible  new Rectangle (2' 2' img.Width - 4' img.Height - 4)' GraphicsUnit.Pixel);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,CropImage,The following statement contains a magic number: graphics.DrawImage (img' (this.Width - resizeWidth) / 2' (this.Height - resizeHeight) / 2' resizeWidth' resizeHeight);  
Magic Number,R7.ImageHandler,ImageResizeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageResizeTransform.cs,CropImage,The following statement contains a magic number: graphics.DrawImage (img' (this.Width - resizeWidth) / 2' (this.Height - resizeHeight) / 2' resizeWidth' resizeHeight);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (var gr = Graphics.FromImage (bmp)) {  	gr.Clear (BackColor);  	// Paint Month Name boxes  	int x = 1;  	int y = 2;  	for (int i = 0; i < 12; i++) {  		y += 17;  		gr.FillRectangle (captionBrush' x' y' 50' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  			string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Far'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  		}  	}  	// Paint Day Number boxes  	x = 38;  	y = 1;  	for (int i = 0; i < 31; i++) {  		x += 14;  		gr.FillRectangle (captionBrush' x' y' 13' 16);  		using (Font drawFont = new Font ("Arial"' 6.5f)) {  			string day = (i + 1).ToString ().PadLeft (2' '0');  			StringFormat stringFormat = new StringFormat () {  				Alignment = StringAlignment.Center'  				LineAlignment = StringAlignment.Center  			};  			gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  		}  	}  	int['] matrix = new int[12' 31];  	char[] chars = Matrix.ToCharArray ();  	for (int month = 1; month < 13; month++) {  		for (int day = 1; day < 32; day++) {  			char value = chars [(month - 1) * 31 + day - 1];  			matrix [month - 1' day - 1] = int.Parse (value.ToString ());  		}  	}  	int yesterday = 1;  	x = 38;  	y = 2;  	for (int month = 0; month < 12; month++) {  		y += 17;  		for (int day = 0; day < 31; day++) {  			x += 14;  			Point[] firstHalf =  {  				new Point (x' y)'  				new Point (x + 13' y)'  				new Point (x' y + 16)  			};  			Point[] lastHalf =  {  				new Point (x + 13' y)'  				new Point (x + 13' y + 16)'  				new Point (x' y + 16)  			};  			int today = matrix [month' day];  			if (today == 0) {  				gr.FillRectangle (emptyBrush' x' y' 13' 16);  			}  			else {  				switch (today) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' lastHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' lastHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' lastHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' lastHalf);  					break;  				}  				switch (yesterday) {  				case 1:  				case 6:  					gr.FillPolygon (freeBrush' firstHalf);  					break;  				case 2:  				case 7:  					gr.FillPolygon (reservedBrush' firstHalf);  					break;  				case 3:  				case 8:  					gr.FillPolygon (occupiedBrush' firstHalf);  					break;  				case 4:  				case 9:  					gr.FillPolygon (selectedBrush' firstHalf);  					break;  				}  				if (today > 4) {  					gr.FillRectangle (transBrush' x' y' 13' 16);  				}  				yesterday = matrix [month' day];  			}  		}  		x = 38;  	}  	return (Image)bmp;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	y += 17;  	gr.FillRectangle (captionBrush' x' y' 50' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  		string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Far'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	y += 17;  	gr.FillRectangle (captionBrush' x' y' 50' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  		string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Far'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	y += 17;  	gr.FillRectangle (captionBrush' x' y' 50' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  		string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Far'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	y += 17;  	gr.FillRectangle (captionBrush' x' y' 50' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  		string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Far'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	y += 17;  	gr.FillRectangle (captionBrush' x' y' 50' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  		string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Far'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	y += 17;  	gr.FillRectangle (captionBrush' x' y' 50' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  		string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Far'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: y += 17;  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.FillRectangle (captionBrush' x' y' 50' 16);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.FillRectangle (captionBrush' x' y' 50' 16);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (Font drawFont = new Font ("Arial"' 6.5f)) {  	Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  	string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  	StringFormat stringFormat = new StringFormat () {  		Alignment = StringAlignment.Far'  		LineAlignment = StringAlignment.Center  	};  	gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (Font drawFont = new Font ("Arial"' 6.5f)) {  	Thread.CurrentThread.CurrentCulture = new CultureInfo (Culture);  	string month = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames [i];  	StringFormat stringFormat = new StringFormat () {  		Alignment = StringAlignment.Far'  		LineAlignment = StringAlignment.Center  	};  	gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.DrawString (month' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 48' 16)' stringFormat);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: x = 38;  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 31; i++) {  	x += 14;  	gr.FillRectangle (captionBrush' x' y' 13' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		string day = (i + 1).ToString ().PadLeft (2' '0');  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Center'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 31; i++) {  	x += 14;  	gr.FillRectangle (captionBrush' x' y' 13' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		string day = (i + 1).ToString ().PadLeft (2' '0');  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Center'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 31; i++) {  	x += 14;  	gr.FillRectangle (captionBrush' x' y' 13' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		string day = (i + 1).ToString ().PadLeft (2' '0');  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Center'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 31; i++) {  	x += 14;  	gr.FillRectangle (captionBrush' x' y' 13' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		string day = (i + 1).ToString ().PadLeft (2' '0');  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Center'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 31; i++) {  	x += 14;  	gr.FillRectangle (captionBrush' x' y' 13' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		string day = (i + 1).ToString ().PadLeft (2' '0');  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Center'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 31; i++) {  	x += 14;  	gr.FillRectangle (captionBrush' x' y' 13' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		string day = (i + 1).ToString ().PadLeft (2' '0');  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Center'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < 31; i++) {  	x += 14;  	gr.FillRectangle (captionBrush' x' y' 13' 16);  	using (Font drawFont = new Font ("Arial"' 6.5f)) {  		string day = (i + 1).ToString ().PadLeft (2' '0');  		StringFormat stringFormat = new StringFormat () {  			Alignment = StringAlignment.Center'  			LineAlignment = StringAlignment.Center  		};  		gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: x += 14;  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.FillRectangle (captionBrush' x' y' 13' 16);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.FillRectangle (captionBrush' x' y' 13' 16);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (Font drawFont = new Font ("Arial"' 6.5f)) {  	string day = (i + 1).ToString ().PadLeft (2' '0');  	StringFormat stringFormat = new StringFormat () {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (Font drawFont = new Font ("Arial"' 6.5f)) {  	string day = (i + 1).ToString ().PadLeft (2' '0');  	StringFormat stringFormat = new StringFormat () {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: using (Font drawFont = new Font ("Arial"' 6.5f)) {  	string day = (i + 1).ToString ().PadLeft (2' '0');  	StringFormat stringFormat = new StringFormat () {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.DrawString (day' drawFont' new SolidBrush (Color.Black)' new RectangleF (x' y' 13' 16)' stringFormat);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 1; month < 13; month++) {  	for (int day = 1; day < 32; day++) {  		char value = chars [(month - 1) * 31 + day - 1];  		matrix [month - 1' day - 1] = int.Parse (value.ToString ());  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 1; month < 13; month++) {  	for (int day = 1; day < 32; day++) {  		char value = chars [(month - 1) * 31 + day - 1];  		matrix [month - 1' day - 1] = int.Parse (value.ToString ());  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 1; month < 13; month++) {  	for (int day = 1; day < 32; day++) {  		char value = chars [(month - 1) * 31 + day - 1];  		matrix [month - 1' day - 1] = int.Parse (value.ToString ());  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 1; day < 32; day++) {  	char value = chars [(month - 1) * 31 + day - 1];  	matrix [month - 1' day - 1] = int.Parse (value.ToString ());  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 1; day < 32; day++) {  	char value = chars [(month - 1) * 31 + day - 1];  	matrix [month - 1' day - 1] = int.Parse (value.ToString ());  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: x = 38;  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: y = 2;  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int month = 0; month < 12; month++) {  	y += 17;  	for (int day = 0; day < 31; day++) {  		x += 14;  		Point[] firstHalf =  {  			new Point (x' y)'  			new Point (x + 13' y)'  			new Point (x' y + 16)  		};  		Point[] lastHalf =  {  			new Point (x + 13' y)'  			new Point (x + 13' y + 16)'  			new Point (x' y + 16)  		};  		int today = matrix [month' day];  		if (today == 0) {  			gr.FillRectangle (emptyBrush' x' y' 13' 16);  		}  		else {  			switch (today) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' lastHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' lastHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' lastHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' lastHalf);  				break;  			}  			switch (yesterday) {  			case 1:  			case 6:  				gr.FillPolygon (freeBrush' firstHalf);  				break;  			case 2:  			case 7:  				gr.FillPolygon (reservedBrush' firstHalf);  				break;  			case 3:  			case 8:  				gr.FillPolygon (occupiedBrush' firstHalf);  				break;  			case 4:  			case 9:  				gr.FillPolygon (selectedBrush' firstHalf);  				break;  			}  			if (today > 4) {  				gr.FillRectangle (transBrush' x' y' 13' 16);  			}  			yesterday = matrix [month' day];  		}  	}  	x = 38;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: y += 17;  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: for (int day = 0; day < 31; day++) {  	x += 14;  	Point[] firstHalf =  {  		new Point (x' y)'  		new Point (x + 13' y)'  		new Point (x' y + 16)  	};  	Point[] lastHalf =  {  		new Point (x + 13' y)'  		new Point (x + 13' y + 16)'  		new Point (x' y + 16)  	};  	int today = matrix [month' day];  	if (today == 0) {  		gr.FillRectangle (emptyBrush' x' y' 13' 16);  	}  	else {  		switch (today) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' lastHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' lastHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' lastHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' lastHalf);  			break;  		}  		switch (yesterday) {  		case 1:  		case 6:  			gr.FillPolygon (freeBrush' firstHalf);  			break;  		case 2:  		case 7:  			gr.FillPolygon (reservedBrush' firstHalf);  			break;  		case 3:  		case 8:  			gr.FillPolygon (occupiedBrush' firstHalf);  			break;  		case 4:  		case 9:  			gr.FillPolygon (selectedBrush' firstHalf);  			break;  		}  		if (today > 4) {  			gr.FillRectangle (transBrush' x' y' 13' 16);  		}  		yesterday = matrix [month' day];  	}  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: x += 14;  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today == 0) {  	gr.FillRectangle (emptyBrush' x' y' 13' 16);  }  else {  	switch (today) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' lastHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' lastHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' lastHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' lastHalf);  		break;  	}  	switch (yesterday) {  	case 1:  	case 6:  		gr.FillPolygon (freeBrush' firstHalf);  		break;  	case 2:  	case 7:  		gr.FillPolygon (reservedBrush' firstHalf);  		break;  	case 3:  	case 8:  		gr.FillPolygon (occupiedBrush' firstHalf);  		break;  	case 4:  	case 9:  		gr.FillPolygon (selectedBrush' firstHalf);  		break;  	}  	if (today > 4) {  		gr.FillRectangle (transBrush' x' y' 13' 16);  	}  	yesterday = matrix [month' day];  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.FillRectangle (emptyBrush' x' y' 13' 16);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.FillRectangle (emptyBrush' x' y' 13' 16);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (today) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' lastHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' lastHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' lastHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' lastHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (today) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' lastHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' lastHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' lastHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' lastHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (today) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' lastHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' lastHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' lastHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' lastHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (today) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' lastHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' lastHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' lastHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' lastHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (today) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' lastHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' lastHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' lastHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' lastHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (today) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' lastHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' lastHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' lastHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' lastHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (today) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' lastHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' lastHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' lastHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' lastHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (yesterday) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' firstHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' firstHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' firstHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' firstHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (yesterday) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' firstHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' firstHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' firstHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' firstHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (yesterday) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' firstHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' firstHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' firstHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' firstHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (yesterday) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' firstHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' firstHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' firstHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' firstHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (yesterday) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' firstHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' firstHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' firstHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' firstHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (yesterday) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' firstHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' firstHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' firstHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' firstHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: switch (yesterday) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' firstHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' firstHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' firstHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' firstHalf);  	break;  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today > 4) {  	gr.FillRectangle (transBrush' x' y' 13' 16);  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today > 4) {  	gr.FillRectangle (transBrush' x' y' 13' 16);  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: if (today > 4) {  	gr.FillRectangle (transBrush' x' y' 13' 16);  }  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.FillRectangle (transBrush' x' y' 13' 16);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: gr.FillRectangle (transBrush' x' y' 13' 16);  
Magic Number,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following statement contains a magic number: x = 38;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ImageWatermarkTransform,The following statement contains a magic number: WatermarkOpacity = 127;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ImageWatermarkTransform,The following statement contains a magic number: FontSize = 14;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: switch (this.WatermarkPosition) {  case WatermarkPositionMode.TopLeft:  	x = 0;  	y = 0;  	break;  case WatermarkPositionMode.TopCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = 0;  	break;  case WatermarkPositionMode.TopRight:  	x = image.Width - sz.Width;  	y = 0;  	break;  case WatermarkPositionMode.CenterLeft:  	x = 0;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.Center:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.CenterRight:  	x = image.Width - sz.Width;  	y = image.Height / 2 - sz.Height / 2;  	break;  case WatermarkPositionMode.BottomLeft:  	x = 0;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomCenter:  	x = image.Width / 2 - sz.Width / 2;  	y = image.Height - sz.Height;  	break;  case WatermarkPositionMode.BottomRight:  	x = image.Width - sz.Width;  	y = image.Height - sz.Height;  	break;  default:  	break;  }  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: x = image.Width / 2 - sz.Width / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: x = image.Width / 2 - sz.Width / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: y = image.Height / 2 - sz.Height / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: y = image.Height / 2 - sz.Height / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: x = image.Width / 2 - sz.Width / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: x = image.Width / 2 - sz.Width / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: y = image.Height / 2 - sz.Height / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: y = image.Height / 2 - sz.Height / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: y = image.Height / 2 - sz.Height / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: y = image.Height / 2 - sz.Height / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: x = image.Width / 2 - sz.Width / 2;  
Magic Number,R7.ImageHandler,ImageWatermarkTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageWatermarkTransform.cs,ProcessImage,The following statement contains a magic number: x = image.Width / 2 - sz.Width / 2;  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: try {  	WebBrowser browser = (WebBrowser)sender;  	HtmlDocument doc = browser.Document;  	if (_html != String.Empty) {  		doc.OpenNew (true);  		doc.Write (_html);  	}  	switch (_ratio) {  	case UrlRatioMode.Full:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = doc.Body.ScrollRectangle.Height;  		break;  	case UrlRatioMode.Screen:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = Convert.ToInt32 (browser.Width / 3 * 2);  		break;  	case UrlRatioMode.Cinema:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = Convert.ToInt32 (browser.Width / 16 * 9);  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  	Bitmap bitmap = new Bitmap (browser.Width' browser.Height);  	GetImage (browser.ActiveXInstance' bitmap' Color.White);  	browser.Dispose ();  	Thumb = (Image)bitmap;  }  catch (Exception) {  }  finally {  	ResultEvent.Set ();  }  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: try {  	WebBrowser browser = (WebBrowser)sender;  	HtmlDocument doc = browser.Document;  	if (_html != String.Empty) {  		doc.OpenNew (true);  		doc.Write (_html);  	}  	switch (_ratio) {  	case UrlRatioMode.Full:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = doc.Body.ScrollRectangle.Height;  		break;  	case UrlRatioMode.Screen:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = Convert.ToInt32 (browser.Width / 3 * 2);  		break;  	case UrlRatioMode.Cinema:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = Convert.ToInt32 (browser.Width / 16 * 9);  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  	Bitmap bitmap = new Bitmap (browser.Width' browser.Height);  	GetImage (browser.ActiveXInstance' bitmap' Color.White);  	browser.Dispose ();  	Thumb = (Image)bitmap;  }  catch (Exception) {  }  finally {  	ResultEvent.Set ();  }  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: try {  	WebBrowser browser = (WebBrowser)sender;  	HtmlDocument doc = browser.Document;  	if (_html != String.Empty) {  		doc.OpenNew (true);  		doc.Write (_html);  	}  	switch (_ratio) {  	case UrlRatioMode.Full:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = doc.Body.ScrollRectangle.Height;  		break;  	case UrlRatioMode.Screen:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = Convert.ToInt32 (browser.Width / 3 * 2);  		break;  	case UrlRatioMode.Cinema:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = Convert.ToInt32 (browser.Width / 16 * 9);  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  	Bitmap bitmap = new Bitmap (browser.Width' browser.Height);  	GetImage (browser.ActiveXInstance' bitmap' Color.White);  	browser.Dispose ();  	Thumb = (Image)bitmap;  }  catch (Exception) {  }  finally {  	ResultEvent.Set ();  }  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: try {  	WebBrowser browser = (WebBrowser)sender;  	HtmlDocument doc = browser.Document;  	if (_html != String.Empty) {  		doc.OpenNew (true);  		doc.Write (_html);  	}  	switch (_ratio) {  	case UrlRatioMode.Full:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = doc.Body.ScrollRectangle.Height;  		break;  	case UrlRatioMode.Screen:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = Convert.ToInt32 (browser.Width / 3 * 2);  		break;  	case UrlRatioMode.Cinema:  		browser.Width = doc.Body.ScrollRectangle.Width;  		browser.Height = Convert.ToInt32 (browser.Width / 16 * 9);  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  	Bitmap bitmap = new Bitmap (browser.Width' browser.Height);  	GetImage (browser.ActiveXInstance' bitmap' Color.White);  	browser.Dispose ();  	Thumb = (Image)bitmap;  }  catch (Exception) {  }  finally {  	ResultEvent.Set ();  }  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: switch (_ratio) {  case UrlRatioMode.Full:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = doc.Body.ScrollRectangle.Height;  	break;  case UrlRatioMode.Screen:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = Convert.ToInt32 (browser.Width / 3 * 2);  	break;  case UrlRatioMode.Cinema:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = Convert.ToInt32 (browser.Width / 16 * 9);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: switch (_ratio) {  case UrlRatioMode.Full:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = doc.Body.ScrollRectangle.Height;  	break;  case UrlRatioMode.Screen:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = Convert.ToInt32 (browser.Width / 3 * 2);  	break;  case UrlRatioMode.Cinema:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = Convert.ToInt32 (browser.Width / 16 * 9);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: switch (_ratio) {  case UrlRatioMode.Full:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = doc.Body.ScrollRectangle.Height;  	break;  case UrlRatioMode.Screen:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = Convert.ToInt32 (browser.Width / 3 * 2);  	break;  case UrlRatioMode.Cinema:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = Convert.ToInt32 (browser.Width / 16 * 9);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: switch (_ratio) {  case UrlRatioMode.Full:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = doc.Body.ScrollRectangle.Height;  	break;  case UrlRatioMode.Screen:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = Convert.ToInt32 (browser.Width / 3 * 2);  	break;  case UrlRatioMode.Cinema:  	browser.Width = doc.Body.ScrollRectangle.Width;  	browser.Height = Convert.ToInt32 (browser.Width / 16 * 9);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: browser.Height = Convert.ToInt32 (browser.Width / 3 * 2);  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: browser.Height = Convert.ToInt32 (browser.Width / 3 * 2);  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: browser.Height = Convert.ToInt32 (browser.Width / 16 * 9);  
Magic Number,R7.ImageHandler,IEBrowser,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\IEBrowser.cs,IEBrowser_DocumentCompleted,The following statement contains a magic number: browser.Height = Convert.ToInt32 (browser.Width / 16 * 9);  
Magic Number,R7.ImageHandler,ImageHandlerSettings,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerSettings.cs,ImageHandlerSettings,The following statement contains a magic number: ImageCompression = 92;  
Magic Number,R7.ImageHandler,ImageHandlerSettings,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerSettings.cs,ImageHandlerSettings,The following statement contains a magic number: ServerCacheExpiration = new TimeSpan (0' 20' 0);  
Missing Default,R7.ImageHandler,ImageHandlerInternal,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\ImageHandlerInternal.cs,GetDnnCacheability,The following switch statement is missing a default case: switch (Host.AuthenticatedCacheability) {  case "0":  	return HttpCacheability.NoCache;  case "1":  	return HttpCacheability.Private;  case "2":  	return HttpCacheability.Public;  case "3":  	return HttpCacheability.Server;  case "4":  	return HttpCacheability.ServerAndNoCache;  case "5":  	return HttpCacheability.ServerAndPrivate;  }  
Missing Default,R7.ImageHandler,ImageBarcodeTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageBarcodeTransform.cs,ProcessImage,The following switch statement is missing a default case: switch (Type) {  case "upca":  	barcodeWriter.Format = BarcodeFormat.UPC_A;  	break;  case "ean8":  	barcodeWriter.Format = BarcodeFormat.EAN_8;  	break;  case "ean13":  	barcodeWriter.Format = BarcodeFormat.EAN_13;  	break;  case "code39":  	barcodeWriter.Format = BarcodeFormat.CODE_39;  	break;  case "code128":  	barcodeWriter.Format = BarcodeFormat.CODE_128;  	break;  case "itf":  	barcodeWriter.Format = BarcodeFormat.ITF;  	break;  case "codabar":  	barcodeWriter.Format = BarcodeFormat.CODABAR;  	break;  case "plessey":  	barcodeWriter.Format = BarcodeFormat.PLESSEY;  	break;  case "msi":  	barcodeWriter.Format = BarcodeFormat.MSI;  	break;  case "qrcode":  	barcodeWriter.Format = BarcodeFormat.QR_CODE;  	break;  case "pdf417":  	barcodeWriter.Format = BarcodeFormat.PDF_417;  	break;  case "aztec":  	barcodeWriter.Format = BarcodeFormat.AZTEC;  	break;  case "datamatrix":  	barcodeWriter.Format = BarcodeFormat.DATA_MATRIX;  	break;  }  
Missing Default,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following switch statement is missing a default case: switch (today) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' lastHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' lastHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' lastHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' lastHalf);  	break;  }  
Missing Default,R7.ImageHandler,ImageScheduleTransform,C:\repos\roman-yagodin_R7.ImageHandler\R7.ImageHandler\Transforms\ImageScheduleTransform.cs,ProcessImage,The following switch statement is missing a default case: switch (yesterday) {  case 1:  case 6:  	gr.FillPolygon (freeBrush' firstHalf);  	break;  case 2:  case 7:  	gr.FillPolygon (reservedBrush' firstHalf);  	break;  case 3:  case 8:  	gr.FillPolygon (occupiedBrush' firstHalf);  	break;  case 4:  case 9:  	gr.FillPolygon (selectedBrush' firstHalf);  	break;  }  
