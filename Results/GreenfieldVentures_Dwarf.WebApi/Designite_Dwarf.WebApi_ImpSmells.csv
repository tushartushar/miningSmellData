Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Evergreen.Dwarf.WebApi,DwarfConverter,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfConverter.cs,ReadJson,Cyclomatic complexity of the method is 9
Long Parameter List,Evergreen.Dwarf.WebApi,CustomContractResolver,C:\repos\GreenfieldVentures_Dwarf.WebApi\CustomContractResolver.cs,CreateProperties,The method has 5 parameters.
Long Parameter List,Evergreen.Dwarf.WebApi,CachedDataAnnotationsModelMetadataEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,CachedDataAnnotationsModelMetadataEx,The method has 5 parameters.
Long Parameter List,Evergreen.Dwarf.WebApi,CachedModelMetadataEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,CachedModelMetadataEx,The method has 5 parameters.
Long Statement,Evergreen.Dwarf.WebApi,DwarfWebApi,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,Register,The length of the statement  "	config.Services.Replace (typeof(System.Web.Http.Metadata.ModelMetadataProvider)' new DataAnnotationsModelMetadataProviderEx ()); " is 128.
Long Statement,Evergreen.Dwarf.WebApi,AssociatedMetadataProviderEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,GetTypeInformation,The length of the statement  "	// This retrieval is implemented as a TryGetValue/TryAdd instead of a GetOrAdd to avoid the performance cost of creating instance delegates " is 139.
Long Statement,Evergreen.Dwarf.WebApi,AssociatedMetadataProviderEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,CreateTypeInformation,The length of the statement  "	ICustomTypeDescriptor typeDescriptor = new AssociatedMetadataTypeTypeDescriptionProvider (type).GetTypeDescriptor (type); " is 121.
Long Statement,Evergreen.Dwarf.WebApi,AssociatedMetadataProviderEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,CreateTypeInformation,The length of the statement  "	info.Prototype = CreateMetadataPrototype (AsAttributes (typeDescriptor.GetAttributes ())' containerType: null' modelType: type' propertyName: null); " is 148.
Long Statement,Evergreen.Dwarf.WebApi,AssociatedMetadataProviderEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,CreatePropertyInformation,The length of the statement  "	info.Prototype = CreateMetadataPrototype (AsAttributes (property.Attributes)' containerType' property.PropertyType' property.Name); " is 131.
Long Statement,Evergreen.Dwarf.WebApi,AssociatedMetadataProviderEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,CreateDynamicValueAccessor,The length of the statement  "	DynamicMethod dynamicMethod = new DynamicMethod ("Get" + propertyName + "From" + declaringType.Name' typeof(object)' new Type[] { " is 129.
Long Statement,Evergreen.Dwarf.WebApi,CachedDataAnnotationsModelMetadataEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,ComputeConvertEmptyStringToNull,The length of the statement  "	return PrototypeCache.DisplayFormat != null ? PrototypeCache.DisplayFormat.ConvertEmptyStringToNull : base.ComputeConvertEmptyStringToNull (); " is 142.
Long Statement,Evergreen.Dwarf.WebApi,CachedDataAnnotationsModelMetadataEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,GetDisplayName,The length of the statement  "	// It's also possible for DisplayNameAttribute to be used without setting a name. If a user does that' then DisplayName will " is 124.
Long Statement,Evergreen.Dwarf.WebApi,CachedDataAnnotationsModelMetadataEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,GetDisplayName,The length of the statement  "	// return the empty string - but for consistency with MVC we allow it. We do fallback to the property name in the (unlikely) " is 124.
Long Statement,Evergreen.Dwarf.WebApi,CachedModelMetadataEx,C:\repos\GreenfieldVentures_Dwarf.WebApi\DwarfWebApi.cs,CreateCacheKey,The length of the statement  "	// If metadata is for a type then containerType == null && propertyName == null' so we have to use modelType for the cache key. " is 127.
