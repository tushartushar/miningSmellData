Implementation smell,Namespace,Class,File,Method,Description
Long Method,ArenaNet.SockNet.Common,BaseSockNetChannel<S>,C:\repos\arenanet_socknet\SockNet.Common\BaseSockNetChannel.cs,ReceiveCallback,The method has 101 lines of code.
Long Statement,ArenaNet.SockNet.Common.IO,ChunkedBuffer,C:\repos\arenanet_socknet\SockNet.Common\IO\ChunkedBuffer.cs,Read,The length of the statement  "                        Buffer.BlockCopy(currentChunk.pooledBytes' currentChunk.offset + sourceChunkOffset' buffer' offset + bytesRead' bytesToCopy); " is 125.
Long Statement,ArenaNet.SockNet.Common.IO,ChunkedBuffer,C:\repos\arenanet_socknet\SockNet.Common\IO\ChunkedBuffer.cs,OfferChunk,The length of the statement  "                throw new Exception("The given pooled object does not belong to the pool that is assigned to this stream: " + pooledObject.Pool); " is 129.
Long Statement,ArenaNet.SockNet.Common.IO,ChunkedBuffer,C:\repos\arenanet_socknet\SockNet.Common\IO\ChunkedBuffer.cs,DrainToStreamSync,The length of the statement  "                    if (rootChunk.pooledObject != null && rootChunk.pooledObject.Pool != null && rootChunk.pooledObject.RefCount.Decrement() < 1) " is 125.
Long Statement,ArenaNet.SockNet.Common.IO,ChunkedBuffer,C:\repos\arenanet_socknet\SockNet.Common\IO\ChunkedBuffer.cs,DrainToStream,The length of the statement  "            stream.BeginWrite(currentChunk.pooledBytes' currentChunk.offset' currentChunk.count' new AsyncCallback(OnDrainToStreamWriteComplete)' " is 133.
Long Statement,ArenaNet.SockNet.Common.IO,ChunkedBuffer,C:\repos\arenanet_socknet\SockNet.Common\IO\ChunkedBuffer.cs,OnDrainToStreamWriteComplete,The length of the statement  "            if (state.currentChunk.pooledObject != null && state.currentChunk.pooledObject.Pool != null && state.currentChunk.pooledObject.RefCount.Decrement() < 1) " is 152.
Long Statement,ArenaNet.SockNet.Common.IO,SockNetChannelPipe,C:\repos\arenanet_socknet\SockNet.Common\IO\SockNetChannelPipe.cs,DebugLog,The length of the statement  "                    SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' "OnIncoming: " + del.Delegate.Target + "." + del.Delegate.Method); " is 120.
Long Statement,ArenaNet.SockNet.Common.IO,SockNetChannelPipe,C:\repos\arenanet_socknet\SockNet.Common\IO\SockNetChannelPipe.cs,DebugLog,The length of the statement  "                    SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' "OnOutgoing: " + del.Delegate.Target + "." + del.Delegate.Method); " is 120.
Long Statement,ArenaNet.SockNet.Common.IO,SockNetChannelPipe,C:\repos\arenanet_socknet\SockNet.Common\IO\SockNetChannelPipe.cs,HandleOpened,The length of the statement  "                        SockNetLogger.Log(SockNetLogger.LogLevel.ERROR' parent' "Pipe opened invokation failed on: " + delegateRef.Target + "." + delegateRef.Method' e); " is 145.
Long Statement,ArenaNet.SockNet.Common.IO,SockNetChannelPipe,C:\repos\arenanet_socknet\SockNet.Common\IO\SockNetChannelPipe.cs,HandleClosed,The length of the statement  "                        SockNetLogger.Log(SockNetLogger.LogLevel.ERROR' parent' "Pipe closed invokation failed on: " + delegateRef.Target + "." + delegateRef.Method' e); " is 145.
Long Statement,ArenaNet.SockNet.Common.IO,SockNetChannelPipe,C:\repos\arenanet_socknet\SockNet.Common\IO\SockNetChannelPipe.cs,HandleOutgoingData,The length of the statement  "                        SockNetLogger.Log(SockNetLogger.LogLevel.ERROR' parent' "Pipe outgoing invokation failed on: " + delegateRef.Delegate.Target + "." + delegateRef.Delegate.Method' e); " is 165.
Long Statement,ArenaNet.SockNet.Common.IO,SockNetChannelPipe,C:\repos\arenanet_socknet\SockNet.Common\IO\SockNetChannelPipe.cs,HandleIncomingData,The length of the statement  "                        SockNetLogger.Log(SockNetLogger.LogLevel.ERROR' parent' "Pipe incoming invokation failed on: " + delegateRef.Delegate.Target + "." + delegateRef.Delegate.Method' e); " is 165.
Long Statement,ArenaNet.SockNet.Common,BaseSockNetChannel<S>,C:\repos\arenanet_socknet\SockNet.Common\BaseSockNetChannel.cs,EnableClientSsl,The length of the statement  "            sslStream.BeginAuthenticateAsClient(RemoteEndpoint.Address.ToString()' certCollection' SslProtocols.Tls' false' new AsyncCallback(EnableClientSslCallback)' sslStream); " is 167.
Long Statement,ArenaNet.SockNet.Common,BaseSockNetChannel<S>,C:\repos\arenanet_socknet\SockNet.Common\BaseSockNetChannel.cs,ReceiveCallback,The length of the statement  "            SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' (this.stream is SslStream ? "[SSL] " : "") + "Received [{0}] bytes from [{1}]."' count' RemoteEndpoint); " is 158.
Long Statement,ArenaNet.SockNet.Common,BaseSockNetChannel<S>,C:\repos\arenanet_socknet\SockNet.Common\BaseSockNetChannel.cs,ReceiveCallback,The length of the statement  "                                    SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' (this.stream is SslStream ? "[SSL] " : "") + "Reading data from [{0}]..."' RemoteEndpoint); " is 145.
Long Statement,ArenaNet.SockNet.Common,BaseSockNetChannel<S>,C:\repos\arenanet_socknet\SockNet.Common\BaseSockNetChannel.cs,ReceiveCallback,The length of the statement  "                                    SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' (this.stream is SslStream ? "[SSL] " : "") + "Reading data from [{0}]..."' RemoteEndpoint); " is 145.
Long Statement,ArenaNet.SockNet.Common,BaseSockNetChannel<S>,C:\repos\arenanet_socknet\SockNet.Common\BaseSockNetChannel.cs,ReceiveCallback,The length of the statement  "                                    currentReadResult = stream.BeginRead(receiveState.buffer.Value' receiveState.offset' receiveState.length - receiveState.offset' new AsyncCallback(ReceiveCallback)' null); " is 170.
Long Statement,ArenaNet.SockNet.Common,BaseSockNetChannel<S>,C:\repos\arenanet_socknet\SockNet.Common\BaseSockNetChannel.cs,Send,The length of the statement  "                    SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' (IsConnectionEncrypted ? "[SSL] " : "") + "Sending [{0}] bytes to [{1}]..."' rawSendableData.Length' RemoteEndpoint); " is 171.
Long Statement,ArenaNet.SockNet.Common,BaseSockNetChannel<S>,C:\repos\arenanet_socknet\SockNet.Common\BaseSockNetChannel.cs,Send,The length of the statement  "                    EnqueueToSendQueueAndNotify(new ChunkedBuffer(bufferPool).OfferRaw(rawSendableData' 0' rawSendableData.Length)' promise); " is 121.
Long Statement,ArenaNet.SockNet.Common,BaseSockNetChannel<S>,C:\repos\arenanet_socknet\SockNet.Common\BaseSockNetChannel.cs,Send,The length of the statement  "                    SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' (IsConnectionEncrypted ? "[SSL] " : "") + "Sending [{0}] bytes to [{1}]..."' sendableStream.AvailableBytesToRead' RemoteEndpoint); " is 184.
Long Statement,ArenaNet.SockNet.Common,BaseSockNetChannel<S>,C:\repos\arenanet_socknet\SockNet.Common\BaseSockNetChannel.cs,QueueWriteCallback,The length of the statement  "                SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' (stream is SslStream ? "[SSL] " : "") + "Sent data to [{0}]."' RemoteEndpoint); " is 133.
Magic Number,ArenaNet.SockNet.Common.IO,SockNetChannelPipe,C:\repos\arenanet_socknet\SockNet.Common\IO\SockNetChannelPipe.cs,HandleOutgoingData,The following statement contains a magic number: lock (outgoingHandlers)              {                  foreach (IDelegateReference delegateRef in outgoingHandlers)                  {                      try                      {                          if (delegateRef != null && delegateRef.DelegateType.IsAssignableFrom(message.GetType()))                          {                              object[] args = new object[2]                                  {                                    parent'                                    message                                  };                                delegateRef.Delegate.DynamicInvoke(args);                              message = args[1];                          }                      }                      catch (Exception e)                      {                          SockNetLogger.Log(SockNetLogger.LogLevel.ERROR' parent' "Pipe outgoing invokation failed on: " + delegateRef.Delegate.Target + "." + delegateRef.Delegate.Method' e);                      }                  }              }
Magic Number,ArenaNet.SockNet.Common.IO,SockNetChannelPipe,C:\repos\arenanet_socknet\SockNet.Common\IO\SockNetChannelPipe.cs,HandleIncomingData,The following statement contains a magic number: lock (incomingHandlers)              {                  foreach (IDelegateReference delegateRef in incomingHandlers)                  {                      try                      {                          if (delegateRef != null && delegateRef.DelegateType.IsAssignableFrom(message.GetType()))                          {                              object[] args = new object[2]                                  {                                    parent'                                    message                                  };                                delegateRef.Delegate.DynamicInvoke(args);                              message = args[1];                          }                      }                      catch (Exception e)                      {                          SockNetLogger.Log(SockNetLogger.LogLevel.ERROR' parent' "Pipe incoming invokation failed on: " + delegateRef.Delegate.Target + "." + delegateRef.Delegate.Method' e);                      }                  }              }
Missing Default,ArenaNet.SockNet.Common.IO,ChunkedBufferStream,C:\repos\arenanet_socknet\SockNet.Common\IO\ChunkedBufferStream.cs,Seek,The following switch statement is missing a default case: switch (origin)                  {                      case SeekOrigin.Begin:                          chunkedBuffer.ReadPosition = offset;                          break;                      case SeekOrigin.Current:                          chunkedBuffer.ReadPosition += offset;                          break;                      case SeekOrigin.End:                          long newPosition = Length + offset;                            if (newPosition > Length)                          {                              throw new Exception("Applied offset to position exceeds length.");                          }                            chunkedBuffer.ReadPosition = newPosition;                          break;                  }
