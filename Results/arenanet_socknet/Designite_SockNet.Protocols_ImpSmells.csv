Implementation smell,Namespace,Class,File,Method,Description
Long Method,ArenaNet.SockNet.Protocols.Http,HttpPayload,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpPayload.cs,Parse,The method has 132 lines of code.
Complex Method,ArenaNet.SockNet.Protocols.Gds,GdsFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Gds\GdsFrame.cs,ParseFrame,Cyclomatic complexity of the method is 8
Complex Method,ArenaNet.SockNet.Protocols.Gds,PerChannelGdsSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Gds\GdsSockNetChannelModule.cs,UpdateChunk,Cyclomatic complexity of the method is 9
Complex Method,ArenaNet.SockNet.Protocols.Http,HttpPayload,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpPayload.cs,Parse,Cyclomatic complexity of the method is 18
Complex Method,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,Write,Cyclomatic complexity of the method is 16
Long Parameter List,ArenaNet.SockNet.Protocols.Gds,GdsFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Gds\GdsFrame.cs,NewContentFrame,The method has 5 parameters. Parameters: streamId' headers' areHeadersCompressed' body' isComplete
Long Statement,ArenaNet.SockNet.Protocols.Gds,PerChannelGdsSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Gds\GdsSockNetChannelModule.cs,HandleIncoming,The length of the statement  "                        SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' "Received Gds message. Body Size: {0}' Type: {1}' IsComplete: {2}"' frame.Body.AvailableBytesToRead' Enum.GetName(typeof(GdsFrame.GdsFrameType)' frame.Type)' frame.IsComplete); " is 230.
Long Statement,ArenaNet.SockNet.Protocols.Gds,PerChannelGdsSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Gds\GdsSockNetChannelModule.cs,UpdateChunk,The length of the statement  "                    if (frame.Type == GdsFrame.GdsFrameType.Ping || frame.Type == GdsFrame.GdsFrameType.Pong || frame.Type == GdsFrame.GdsFrameType.Close) " is 134.
Long Statement,ArenaNet.SockNet.Protocols.Http,PerChannelClientHttpSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpSockNetChannelModule.cs,HandleIncomingResponse,The length of the statement  "                        SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' "Received HTTP Response: Command Line: [{0}]' Body Size [{1}]"' currentIncoming.CommandLine' currentIncoming.BodySize); " is 173.
Long Statement,ArenaNet.SockNet.Protocols.Http,PerChannelClientHttpSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpSockNetChannelModule.cs,HandleOutgoingRequest,The length of the statement  "                    SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' "Sending HTTP Request: Command Line: [{0}]' Body Size [{1}]"' data.CommandLine' data.BodySize); " is 149.
Long Statement,ArenaNet.SockNet.Protocols.Http,PerChannelServerHttpSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpSockNetChannelModule.cs,HandleIncomingRequest,The length of the statement  "                        SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' "Received HTTP Request: Command Line: [{0}]' Body Size [{1}]"' currentIncoming.CommandLine' currentIncoming.BodySize); " is 172.
Long Statement,ArenaNet.SockNet.Protocols.Http,PerChannelServerHttpSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpSockNetChannelModule.cs,HandleOutgoingResponse,The length of the statement  "                    SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' "Sending HTTP Response: Command Line: [{0}]' Body Size [{1}]"' data.CommandLine' data.BodySize); " is 150.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,PerChannelWebSocketServerSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketServerSockNetChannelModule.cs,HandleHandshake,The length of the statement  "                if (connection != null && upgrade != null && securityKey != null && "websocket".Equals(upgrade.Trim().ToLower()) && "upgrade".Equals(connection.Trim().ToLower())) " is 162.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,PerChannelWebSocketServerSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketServerSockNetChannelModule.cs,HandleIncomingFrames,The length of the statement  "                        SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' "Received WebSocket message. Size: {0}' Type: {1}' IsFinished: {2}"' frame.Data.Length' Enum.GetName(typeof(WebSocketFrame.WebSocketFrameOperation)' frame.Operation)' frame.IsFinished); " is 239.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,PerChannelWebSocketClientSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketClientSockNetChannelModule.cs,HandleIncomingFrames,The length of the statement  "                        SockNetLogger.Log(SockNetLogger.LogLevel.DEBUG' this' "Received WebSocket message. Size: {0}' Type: {1}' IsFinished: {2}"' frame.Data.Length' Enum.GetName(typeof(WebSocketFrame.WebSocketFrameOperation)' frame.Operation)' frame.IsFinished); " is 239.
Complex Conditional,ArenaNet.SockNet.Protocols.WebSocket,PerChannelWebSocketServerSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketServerSockNetChannelModule.cs,HandleHandshake,The conditional expression  "connection != null && upgrade != null && securityKey != null && "websocket".Equals(upgrade.Trim().ToLower()) && "upgrade".Equals(connection.Trim().ToLower())"  is complex.
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpPayload,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpPayload.cs,Parse,The following statement contains a magic number: switch (state)                  {                      case ParseState.BODY:                          string transferEncoding = Header["transfer-encoding"];                          string contentLength = Header["content-length"];                          if (contentLength == null)                          {                              contentLength = Header["l"];                          }                            if (IsChunked || (transferEncoding != null && "chunked".Equals(transferEncoding.Trim())))                          {                              IsChunked = true;                                string length;                                                            if (!ReadLine(stream' Encoding.ASCII' out length))                              {                                  return false;                              }                                int bodySize = Convert.ToInt32(length.Split(';')[0]' 16);                                if (bodySize == 0)                              {                                  return true;                              }                              else                              {                                  int actuallyRead = Copy(stream' Body.Stream' bodySize);                                    if (actuallyRead != bodySize || !ReadLine(stream' Encoding.ASCII' out length))                                  {                                      Body.ReadPosition = 0;                                      stream.Position = bodyStartPosition;                                  }                                    return false;                              }                          }                          else if (!string.IsNullOrEmpty(contentLength))                          {                              int bodySize = Convert.ToInt32(contentLength' 10);                                int actuallyRead = Copy(stream' Body.Stream' bodySize);                                if (actuallyRead != bodySize)                              {                                  Body.ReadPosition = 0;                                  stream.Position = startingPosition;                                    return false;                              }                              else                              {                                  return true;                              }                          }                          else if (isClosed)                          {                              Copy(stream' Body.Stream' int.MaxValue);                                return true;                          }                            goto default;                      default:                          stream.Position = startingPosition;                            return false;                  }
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpPayload,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpPayload.cs,Parse,The following statement contains a magic number: switch (state)                  {                      case ParseState.BODY:                          string transferEncoding = Header["transfer-encoding"];                          string contentLength = Header["content-length"];                          if (contentLength == null)                          {                              contentLength = Header["l"];                          }                            if (IsChunked || (transferEncoding != null && "chunked".Equals(transferEncoding.Trim())))                          {                              IsChunked = true;                                string length;                                                            if (!ReadLine(stream' Encoding.ASCII' out length))                              {                                  return false;                              }                                int bodySize = Convert.ToInt32(length.Split(';')[0]' 16);                                if (bodySize == 0)                              {                                  return true;                              }                              else                              {                                  int actuallyRead = Copy(stream' Body.Stream' bodySize);                                    if (actuallyRead != bodySize || !ReadLine(stream' Encoding.ASCII' out length))                                  {                                      Body.ReadPosition = 0;                                      stream.Position = bodyStartPosition;                                  }                                    return false;                              }                          }                          else if (!string.IsNullOrEmpty(contentLength))                          {                              int bodySize = Convert.ToInt32(contentLength' 10);                                int actuallyRead = Copy(stream' Body.Stream' bodySize);                                if (actuallyRead != bodySize)                              {                                  Body.ReadPosition = 0;                                  stream.Position = startingPosition;                                    return false;                              }                              else                              {                                  return true;                              }                          }                          else if (isClosed)                          {                              Copy(stream' Body.Stream' int.MaxValue);                                return true;                          }                            goto default;                      default:                          stream.Position = startingPosition;                            return false;                  }
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpPayload,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpPayload.cs,HandleHeaderLine,The following statement contains a magic number: string[] split = headerLine.Split(new string[] { ":" }' 2' StringSplitOptions.None);
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpPayload,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpPayload.cs,HandleHeaderLine,The following statement contains a magic number: split.Length == 2
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpPayload,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpPayload.cs,Copy,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpResponse,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpResponse.cs,HandleCommandLine,The following statement contains a magic number: string[] split = commandLine.Split(new string[] { " " }' 3' StringSplitOptions.None);
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpResponse,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpResponse.cs,HandleCommandLine,The following statement contains a magic number: Reason = split[2].Trim();
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpResponse,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpResponse.cs,HandleCommandLine,The following statement contains a magic number: split.Length > 2
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpRequest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpRequest.cs,HandleCommandLine,The following statement contains a magic number: string[] split = commandLine.Split(new string[] { " " }' 3' StringSplitOptions.None);
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpRequest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpRequest.cs,HandleCommandLine,The following statement contains a magic number: Version = split[2].Trim();
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpRequest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpRequest.cs,HandleCommandLine,The following statement contains a magic number: split.Length == 3
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,Write,The following statement contains a magic number: finRsvAndOp |= (byte)128;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,Write,The following statement contains a magic number: finRsvAndOp |= (byte)64;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,Write,The following statement contains a magic number: finRsvAndOp |= (byte)32;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,Write,The following statement contains a magic number: finRsvAndOp |= (byte)16;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,Write,The following statement contains a magic number: maskAndLength |= (byte)128;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,Write,The following statement contains a magic number: this.Data.Length < 126
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,Write,The following statement contains a magic number: data[i] = (byte)(this.Data[i] ^ this.Mask[i % 4]);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,CreateTextFrame,The following statement contains a magic number: maskData = new byte[4]                  {                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)'                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)'                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)'                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)                  };
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,CreateTextFrame,The following statement contains a magic number: maskData = new byte[4]                  {                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)'                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)'                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)'                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)                  };
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,CreateBinaryFrame,The following statement contains a magic number: maskData = new byte[4]                  {                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)'                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)'                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)'                    (byte) WebSocketFrame.GlobalRandom.Next(byte.MaxValue)                  };
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: throw new ArgumentException("Invalid operation: " + ((int)finRsvAndOp & 15));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: !Enum.IsDefined(typeof(WebSocketFrame.WebSocketFrameOperation)' (byte)((int)finRsvAndOp & 15))
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: frame.IsFinished = ((int)finRsvAndOp & 128) != 0;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: frame.Reserved1 = ((int)finRsvAndOp & 64) != 0;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: frame.Reserved2 = ((int)finRsvAndOp & 32) != 0;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: frame.Reserved3 = ((int)finRsvAndOp & 16) != 0;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: frame.Operation = (WebSocketFrame.WebSocketFrameOperation)(byte)((int)finRsvAndOp & 15);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: bool isMasked = (maskAndLength & 128) != 0;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: int length = maskAndLength & 127;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: switch (length)              {                  case 126:                  {                      length = (int)(ushort)IPAddress.HostToNetworkOrder((short)binaryReader.ReadUInt16());                      break;                  }                  case 127:                  {                      length = Convert.ToInt32((ulong)IPAddress.HostToNetworkOrder((long)binaryReader.ReadUInt64()));                      break;                  }              }
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: switch (length)              {                  case 126:                  {                      length = (int)(ushort)IPAddress.HostToNetworkOrder((short)binaryReader.ReadUInt16());                      break;                  }                  case 127:                  {                      length = Convert.ToInt32((ulong)IPAddress.HostToNetworkOrder((long)binaryReader.ReadUInt64()));                      break;                  }              }
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: frame.Mask = binaryReader.ReadBytes(4);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following statement contains a magic number: frame.Data[i] = (byte)(frame.Data[i] ^ frame.Mask[i % 4]);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketUtil,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketUtil.cs,GenerateSecurityKey,The following statement contains a magic number: return Convert.ToBase64String(Encoding.ASCII.GetBytes(Guid.NewGuid().ToString().Substring(0' 16)));
Missing Default,ArenaNet.SockNet.Protocols.Http,HttpPayload,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\Http\HttpPayload.cs,Parse,The following switch statement is missing a default case: switch (state)                          {                              case ParseState.COMMAND_LINE:                                  line = line.Trim();                                    if (!HandleCommandLine(line))                                  {                                      state = ParseState.ERROR;                                  }                                  else                                  {                                      state = ParseState.HEADERS;                                  }                                  break;                              case ParseState.HEADERS:                                  line = line.Trim();                                    if ("".Equals(line))                                  {                                      state = ParseState.BODY;                                  }                                  else                                  {                                      KeyValuePair<string' List<string>> header;                                        if (HandleHeaderLine(line' out header))                                      {                                          List<string> values;                                            if (headers.TryGetValue(header.Key' out values))                                          {                                              values.AddRange(header.Value);                                          }                                          else                                          {                                              headers[header.Key] = header.Value;                                          }                                      }                                      else                                      {                                          state = ParseState.ERROR;                                      }                                  }                                  break;                          }
Missing Default,ArenaNet.SockNet.Protocols.WebSocket,PerChannelWebSocketServerSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketServerSockNetChannelModule.cs,UpdateContinuation,The following switch statement is missing a default case: switch (continuationFrame.Operation)                      {                          case WebSocketFrame.WebSocketFrameOperation.BinaryFrame:                              continuationFrame = WebSocketFrame.CreateBinaryFrame(frameData' false' false);                              break;                          case WebSocketFrame.WebSocketFrameOperation.TextFrame:                              continuationFrame = WebSocketFrame.CreateTextFrame(frameData' false' false);                              break;                      }
Missing Default,ArenaNet.SockNet.Protocols.WebSocket,WebSocketFrame,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketFrame.cs,ParseFrame,The following switch statement is missing a default case: switch (length)              {                  case 126:                  {                      length = (int)(ushort)IPAddress.HostToNetworkOrder((short)binaryReader.ReadUInt16());                      break;                  }                  case 127:                  {                      length = Convert.ToInt32((ulong)IPAddress.HostToNetworkOrder((long)binaryReader.ReadUInt64()));                      break;                  }              }
Missing Default,ArenaNet.SockNet.Protocols.WebSocket,PerChannelWebSocketClientSockNetChannelModule,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols\WebSocket\WebSocketClientSockNetChannelModule.cs,UpdateContinuation,The following switch statement is missing a default case: switch (continuationFrame.Operation)                      {                          case WebSocketFrame.WebSocketFrameOperation.BinaryFrame:                              continuationFrame = WebSocketFrame.CreateBinaryFrame(frameData' false' false);                              break;                          case WebSocketFrame.WebSocketFrameOperation.TextFrame:                              continuationFrame = WebSocketFrame.CreateTextFrame(frameData' false' false);                              break;                      }
