Implementation smell,Namespace,Class,File,Method,Description
Long Method,ArenaNet.SockNet.Protocols,CertificateUtil,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CreateSelfSignCertificatePfx,The method has 160 lines of code.
Long Parameter List,ArenaNet.SockNet.Protocols,NativeMethods,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CryptAcquireContextW,The method has 5 parameters. Parameters: providerContext' container' provider' providerType' flags
Long Parameter List,ArenaNet.SockNet.Protocols,NativeMethods,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CertStrToNameW,The method has 7 parameters. Parameters: certificateEncodingType' x500' strType' reserved' encoded' encodedLength' errorString
Long Parameter List,ArenaNet.SockNet.Protocols,NativeMethods,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CertCreateSelfSignCertificate,The method has 8 parameters. Parameters: providerHandle' subjectIssuerBlob' flags' keyProviderInformation' signatureAlgorithm' startTime' endTime' extensions
Long Parameter List,ArenaNet.SockNet.Protocols,NativeMethods,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CertOpenStore,The method has 5 parameters. Parameters: storeProvider' messageAndCertificateEncodingType' cryptProvHandle' flags' parameters
Long Parameter List,ArenaNet.SockNet.Protocols,NativeMethods,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,PFXExportCertStoreEx,The method has 5 parameters. Parameters: certificateStoreHandle' pfxBlob' password' reserved' flags
Long Identifier,ArenaNet.SockNet.Protocols,NativeMethods,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CertOpenStore,The length of the parameter messageAndCertificateEncodingType is 33.
Long Statement,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestCompression,The length of the statement  "            byte[] header1Value = Encoding.UTF8.GetBytes("Well here is a great value for some key. We're really great at making keys and value."); " is 134.
Long Statement,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleContent,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleContent,The length of the statement  "                client.Pipe.AddIncomingLast<GdsFrame>((ISockNetChannel sockNetClient' ref GdsFrame data) => { blockingCollection.Add(data); }); " is 127.
Long Statement,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleSslContent,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleSslContent,The length of the statement  "                client.ConnectWithTLS((object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }) " is 137.
Long Statement,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleSslContent,The length of the statement  "                client.Pipe.AddIncomingLast<GdsFrame>((ISockNetChannel sockNetClient' ref GdsFrame data) => { blockingCollection.Add(data); }); " is 127.
Long Statement,ArenaNet.SockNet.Protocols.Gds,GdsEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,Start,The length of the statement  "                        byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10)); " is 146.
Long Statement,ArenaNet.SockNet.Protocols.Gds,GdsEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,Start,The length of the statement  "                            (object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }).WaitForValue(TimeSpan.FromSeconds(5)); " is 154.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpResponseTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpResponseTest.cs,TestContentLengthNotClosed,The length of the statement  "            string sampleRequest = "HTTP/1.0 200 OK\r\nHost: localhost\r\nContent-Length: " + sampleContentLength + "\r\n\r\n" + sampleContent; " is 131.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpResponseTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpResponseTest.cs,TestContentLengthPartial,The length of the statement  "            string sampleRequest = "HTTP/1.0 200 OK\r\nHost: localhost\r\nContent-Length: " + sampleContentLength + "\r\n\r\n" + sampleContent; " is 131.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpResponseTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpResponseTest.cs,TestContentLengthClosed,The length of the statement  "            string sampleRequest = "HTTP/1.0 200 OK\r\nHost: localhost\r\nContent-Length: " + sampleContentLength + "\r\n\r\n" + sampleContent; " is 131.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpResponseTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpResponseTest.cs,TestChunked,The length of the statement  "            string chunk1Request = "HTTP/1.0 200 OK\r\nHost: localhost\r\nTransfer-Encoding: chunked\r\n\r\n" + string.Format("{0:X}"' chunk1ContentLength) + "\r\n" + chunk1Content + "\r\n"; " is 178.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpResponseTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpResponseTest.cs,TestChunked,The length of the statement  "                Assert.AreEqual("HTTP/1.0 200 OK\r\nHost: localhost\r\nTransfer-Encoding: chunked\r\n\r\n" + sampleContent' reader.ReadToEnd()); " is 128.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpRequestTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpRequestTest.cs,TestContentLengthNotClosed,The length of the statement  "            string sampleRequest = "POST / HTTP/1.0\r\nHost: localhost\r\nContent-Length: " + sampleContentLength + "\r\n\r\n" + sampleContent; " is 131.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpRequestTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpRequestTest.cs,TestContentLengthPartial,The length of the statement  "            string sampleRequest = "POST / HTTP/1.0\r\nHost: localhost\r\nContent-Length: " + sampleContentLength + "\r\n\r\n" + sampleContent; " is 131.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpRequestTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpRequestTest.cs,TestContentLengthClosed,The length of the statement  "            string sampleRequest = "POST / HTTP/1.0\r\nHost: localhost\r\nContent-Length: " + sampleContentLength + "\r\n\r\n" + sampleContent; " is 131.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpRequestTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpRequestTest.cs,TestChunked,The length of the statement  "            string chunk1Request = "POST / HTTP/1.0\r\nHost: localhost\r\nTransfer-Encoding: chunked\r\n\r\n" + string.Format("{0:X}"' chunk1ContentLength) + "\r\n" + chunk1Content + "\r\n"; " is 178.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpRequestTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpRequestTest.cs,TestChunked,The length of the statement  "                Assert.AreEqual("POST / HTTP/1.0\r\nHost: localhost\r\nTransfer-Encoding: chunked\r\n\r\n" + sampleContent' reader.ReadToEnd()); " is 128.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGet,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGet,The length of the statement  "                client.Pipe.AddIncomingLast<HttpResponse>((ISockNetChannel channel' ref HttpResponse data) => { responses.Add(data); }); " is 120.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGetHttps,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGetHttps,The length of the statement  "                client.Pipe.AddIncomingLast<HttpResponse>((ISockNetChannel channel' ref HttpResponse data) => { responses.Add(data); }); " is 120.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGetHttps,The length of the statement  "                client.ConnectWithTLS((object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }) " is 137.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestChunked,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestChunked,The length of the statement  "                client.Pipe.AddIncomingLast<HttpResponse>((ISockNetChannel channel' ref HttpResponse data) => { responses.Add(data); }); " is 120.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestServer,The length of the statement  "            ServerSockNetChannel server = (ServerSockNetChannel)SockNetServer.Create(GetLocalIpAddress()' 0' ServerSockNetChannel.DefaultBacklog' pool) " is 139.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestServer,The length of the statement  "                    if (("http/1.0".Equals(data.Version) && !"keep-alive".Equals(data.Header["connection"]' StringComparison.CurrentCultureIgnoreCase)) || " is 134.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestServer,The length of the statement  "                HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create("http://" + GetLocalIpAddress() + ":" + server.LocalEndpoint.Port); " is 130.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpChunkedServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The length of the statement  "                string chunk1HttpContent = "HTTP/1.0 200 OK\r\nTransfer-Encoding: chunked\r\n\r\n" + string.Format("{0:X}"' chunk1ContentLength) + "\r\n" + chunk1Content + "\r\n"; " is 163.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpChunkedServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The length of the statement  "                        byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10)); " is 146.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpChunkedServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The length of the statement  "                            (object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }).WaitForValue(TimeSpan.FromSeconds(5)); " is 154.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The length of the statement  "                        byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10)); " is 146.
Long Statement,ArenaNet.SockNet.Protocols.Http,HttpEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The length of the statement  "                            (object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }).WaitForValue(TimeSpan.FromSeconds(5)); " is 154.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuation,The length of the statement  "            HttpResponse handshakeResponse = new HttpResponse(channel.BufferPool) { Code = "200"' Reason = "OK"' Version = "HTTP/1.1" }; " is 124.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuation,The length of the statement  "            handshakeResponse.Header[WebSocketUtil.WebSocketAcceptHeader] = WebSocketUtil.GenerateAccept(request.Header[WebSocketUtil.WebSocketKeyHeader]); " is 143.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessage,The length of the statement  "                handshakeResponse.Header[WebSocketUtil.WebSocketAcceptHeader] = WebSocketUtil.GenerateAccept(request.Header[WebSocketUtil.WebSocketKeyHeader]); " is 143.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessage,The length of the statement  "            Random random = new Random(this.GetHashCode() ^ (int)DateTime.Now.Subtract(new DateTime(2000' 1' 1)).TotalMilliseconds); " is 120.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessage,The length of the statement  "                handshakeResponse.Header[WebSocketUtil.WebSocketAcceptHeader] = WebSocketUtil.GenerateAccept(request.Header[WebSocketUtil.WebSocketKeyHeader]); " is 143.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessage,The length of the statement  "            Random random = new Random(this.GetHashCode() ^ (int)DateTime.Now.Subtract(new DateTime(2000' 1' 1)).TotalMilliseconds); " is 120.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The length of the statement  "                client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 144.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The length of the statement  "                    .AddModule(new WebSocketClientSockNetChannelModule("/"' "localhost"' (ISockNetChannel sockNetClient) => { blockingCollection.Add(true); })); " is 140.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The length of the statement  "                client.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel sockNetClient' ref WebSocketFrame data) => { blockingCollection.Add(data); }); " is 139.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The length of the statement  "                    .AddModule(new WebSocketClientSockNetChannelModule("/"' "localhost"' (ISockNetChannel sockNetClient) => { blockingCollection.Add(true); })); " is 140.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The length of the statement  "                client.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel sockNetClient' ref WebSocketFrame data) => { blockingCollection.Add(data); }); " is 139.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMask,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMask,The length of the statement  "                    .AddModule(new WebSocketClientSockNetChannelModule("/"' "localhost"' (ISockNetChannel sockNetClient) => { blockingCollection.Add(true); })); " is 140.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMask,The length of the statement  "                client.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel sockNetClient' ref WebSocketFrame data) => { blockingCollection.Add(data); }); " is 139.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuationEchoWithMask,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuationEchoWithMask,The length of the statement  "                    .AddModule(new WebSocketClientSockNetChannelModule("/"' "localhost"' (ISockNetChannel sockNetClient) => { blockingCollection.Add(true); })); " is 140.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuationEchoWithMask,The length of the statement  "                client.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel sockNetClient' ref WebSocketFrame data) => { blockingCollection.Add(data); }); " is 139.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestIncompleteBufferParsing,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestIncompleteBufferParsing,The length of the statement  "                    .AddModule(new WebSocketClientSockNetChannelModule("/"' "localhost"' (ISockNetChannel sockNetClient) => { blockingCollection.Add(true); })); " is 140.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestIncompleteBufferParsing,The length of the statement  "                client.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel sockNetClient' ref WebSocketFrame data) => { blockingCollection.Add(data); }); " is 139.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMaskWithSsl,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMaskWithSsl,The length of the statement  "                    .AddModule(new WebSocketClientSockNetChannelModule("/"' "localhost"' (ISockNetChannel sockNetClient) => { blockingCollection.Add(true); })); " is 140.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMaskWithSsl,The length of the statement  "                client.ConnectWithTLS((object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }) " is 137.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMaskWithSsl,The length of the statement  "                client.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel sockNetClient' ref WebSocketFrame data) => { blockingCollection.Add(data); }); " is 139.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithoutMask,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithoutMask,The length of the statement  "                    .AddModule(new WebSocketClientSockNetChannelModule("/"' "localhost"' (ISockNetChannel sockNetClient) => { blockingCollection.Add(true); })); " is 140.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithoutMask,The length of the statement  "                client.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel sockNetClient' ref WebSocketFrame data) => { blockingCollection.Add(data); }); " is 139.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The length of the statement  "                ClientSockNetChannel client = (ClientSockNetChannel)SockNetClient.Create(server.Endpoint' ClientSockNetChannel.DefaultNoDelay' ClientSockNetChannel.DefaultTtl' pool) " is 165.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The length of the statement  "                    .AddModule(new WebSocketClientSockNetChannelModule("/"' "localhost"' (ISockNetChannel sockNetClient) => { blockingCollection.Add(true); })); " is 140.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The length of the statement  "                client.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel sockNetClient' ref WebSocketFrame data) => { blockingCollection.Add(data); }); " is 139.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSocketEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,Start,The length of the statement  "                        byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10)); " is 146.
Long Statement,ArenaNet.SockNet.Protocols.WebSocket,WebSocketEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,Start,The length of the statement  "                            (object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }).WaitForValue(TimeSpan.FromSeconds(5)); " is 154.
Magic Number,ArenaNet.SockNet.Protocols,CertificateUtil,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CreateSelfSignCertificatePfx,The following statement contains a magic number: Check(NativeMethods.CryptAcquireContextW(                      out providerContext'                      containerName'                      null'                      1' // PROV_RSA_FULL                      8));
Magic Number,ArenaNet.SockNet.Protocols,CertificateUtil,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CreateSelfSignCertificatePfx,The following statement contains a magic number: !NativeMethods.CertStrToNameW(                      0x00010001' // X509_ASN_ENCODING | PKCS_7_ASN_ENCODING                      dataHandle.AddrOfPinnedObject()'                      3' // CERT_X500_NAME_STR = 3                      IntPtr.Zero'                      null'                      ref nameDataLength'                      out errorStringPtr)
Magic Number,ArenaNet.SockNet.Protocols,CertificateUtil,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CreateSelfSignCertificatePfx,The following statement contains a magic number: !NativeMethods.CertStrToNameW(                      0x00010001' // X509_ASN_ENCODING | PKCS_7_ASN_ENCODING                      dataHandle.AddrOfPinnedObject()'                      3' // CERT_X500_NAME_STR = 3                      IntPtr.Zero'                      nameData'                      ref nameDataLength'                      out errorStringPtr)
Magic Number,ArenaNet.SockNet.Protocols,CertificateUtil,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CreateSelfSignCertificatePfx,The following statement contains a magic number: NativeMethods.CertSetCertificateContextProperty(                      storeCertContext'                      2' // CERT_KEY_PROV_INFO_PROP_ID                      0'                      ref kpi);
Magic Number,ArenaNet.SockNet.Protocols,CertificateUtil,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CreateSelfSignCertificatePfx,The following statement contains a magic number: Check(NativeMethods.PFXExportCertStoreEx(                      certStore'                      ref pfxBlob'                      passwordPtr'                      IntPtr.Zero'                      7));
Magic Number,ArenaNet.SockNet.Protocols,CertificateUtil,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\CertificateUtil.cs,CreateSelfSignCertificatePfx,The following statement contains a magic number: Check(NativeMethods.PFXExportCertStoreEx(                      certStore'                      ref pfxBlob'                      passwordPtr'                      IntPtr.Zero'                      7));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestCompression,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestCompression,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestCompression,The following statement contains a magic number: Assert.AreEqual(2' frame.Headers.Count);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestCompression,The following statement contains a magic number: int uncompressedSize = (4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestCompression,The following statement contains a magic number: int uncompressedSize = (4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestCompression,The following statement contains a magic number: int uncompressedSize = (4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestCompression,The following statement contains a magic number: int uncompressedSize = (4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestPing,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestPing,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestPing,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestPing,The following statement contains a magic number: Assert.AreEqual(4' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestPong,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestPong,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestPong,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestPong,The following statement contains a magic number: Assert.AreEqual(4' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestClose,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestClose,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestClose,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestClose,The following statement contains a magic number: Assert.AreEqual(4' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: Assert.AreEqual(2' frame.Headers.Count);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyNotCompressed,The following statement contains a magic number: Assert.AreEqual(2' readFrame.Headers.Count);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: Assert.AreEqual(2' frame.Headers.Count);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestHeaderOnlyCompressed,The following statement contains a magic number: Assert.AreEqual(2' readFrame.Headers.Count);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestBodyOnly,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestBodyOnly,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestBodyOnly,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestBodyOnly,The following statement contains a magic number: byte[] bodyBuffer = new byte[rand.Next(1024' 1024*64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestBodyOnly,The following statement contains a magic number: byte[] bodyBuffer = new byte[rand.Next(1024' 1024*64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestBodyOnly,The following statement contains a magic number: byte[] bodyBuffer = new byte[rand.Next(1024' 1024*64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestBodyOnly,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 4         // body definition                  + bodyBuffer.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestBodyOnly,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 4         // body definition                  + bodyBuffer.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: byte[] bodyBuffer = new byte[rand.Next(1024' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: byte[] bodyBuffer = new byte[rand.Next(1024' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: byte[] bodyBuffer = new byte[rand.Next(1024' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: Assert.AreEqual(2' frame.Headers.Count);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length                  + 4         // body definition                  + bodyBuffer.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length                  + 4         // body definition                  + bodyBuffer.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length                  + 4         // body definition                  + bodyBuffer.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length                  + 4         // body definition                  + bodyBuffer.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: Assert.AreEqual(                  4           // frame definition                  + 2         // header definition                  + (4 * 2)   // header sizes for two headers                  + header1Key.Length + header1Value.Length + header2Key.Length + header2Value.Length                  + 4         // body definition                  + bodyBuffer.Length                  ' stream.Position);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFull,The following statement contains a magic number: Assert.AreEqual(2' readFrame.Headers.Count);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: uint streamId = (uint)rand.Next(0' (int)(Math.Pow(2' 24) - 1));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: byte[] header1Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: byte[] header2Value = new byte[rand.Next(32' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: byte[] bodyBuffer = new byte[rand.Next(1024' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: byte[] bodyBuffer = new byte[rand.Next(1024' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: byte[] bodyBuffer = new byte[rand.Next(1024' 1024 * 64)];
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: Assert.AreEqual(2' frame.Headers.Count);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,TestFullCompressed,The following statement contains a magic number: Assert.AreEqual(2' readFrame.Headers.Count);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,PrintBitStream,The following statement contains a magic number: Console.Write(Convert.ToString(byt' 2).PadLeft(8' '0'));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsFrameTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsFrameTest.cs,PrintBitStream,The following statement contains a magic number: Console.Write(Convert.ToString(byt' 2).PadLeft(8' '0'));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleContent,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleContent,The following statement contains a magic number: client.Connect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleContent,The following statement contains a magic number: Assert.IsTrue(blockingCollection.TryTake(out currentObject' 5000));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleContent,The following statement contains a magic number: client.Disconnect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleSslContent,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleSslContent,The following statement contains a magic number: client.ConnectWithTLS((object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; })                      .WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleSslContent,The following statement contains a magic number: Assert.IsTrue(blockingCollection.TryTake(out currentObject' 5000));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestSimpleSslContent,The following statement contains a magic number: client.Disconnect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestChunks,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestChunks,The following statement contains a magic number: GdsFrame chunk2 = GdsFrame.NewContentFrame(streamId' new Dictionary<string' byte[]>()                   {                       { "test2"' new byte[] { 2 } } '                      { "test"' new byte[] { 2 } } '                  }'                  false' body' false);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestChunks,The following statement contains a magic number: GdsFrame chunk2 = GdsFrame.NewContentFrame(streamId' new Dictionary<string' byte[]>()                   {                       { "test2"' new byte[] { 2 } } '                      { "test"' new byte[] { 2 } } '                  }'                  false' body' false);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestChunks,The following statement contains a magic number: GdsFrame chunk3 = GdsFrame.NewContentFrame(streamId' new Dictionary<string' byte[]>()                   {                       { "test3"' new byte[] { 3 } } '                      { "test"' new byte[] { 3 } } '                  }'                  false' body' true);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestChunks,The following statement contains a magic number: GdsFrame chunk3 = GdsFrame.NewContentFrame(streamId' new Dictionary<string' byte[]>()                   {                       { "test3"' new byte[] { 3 } } '                      { "test"' new byte[] { 3 } } '                  }'                  false' body' true);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestChunks,The following statement contains a magic number: Assert.AreEqual(2' ((GdsFrame)receiveResponse).Headers["test2"][0]);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestChunks,The following statement contains a magic number: Assert.AreEqual(3' ((GdsFrame)receiveResponse).Headers["test3"][0]);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,TestChunks,The following statement contains a magic number: Assert.AreEqual(3' ((GdsFrame)receiveResponse).Headers["test"][0]);
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,ToBuffer,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10));
Magic Number,ArenaNet.SockNet.Protocols.Gds,GdsEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Gds\GdsSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: server.BindWithTLS(new X509Certificate2(rawCert)'                              (object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }).WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpResponseTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpResponseTest.cs,TestContentLengthPartial,The following statement contains a magic number: int partialSize = sampleRequest.Length / 3;
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpResponseTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpResponseTest.cs,TestContentLengthPartial,The following statement contains a magic number: string sampleRequest3 = sampleRequest.Substring(partialSize * 2' sampleRequest.Length - (partialSize * 2));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpResponseTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpResponseTest.cs,TestContentLengthPartial,The following statement contains a magic number: string sampleRequest3 = sampleRequest.Substring(partialSize * 2' sampleRequest.Length - (partialSize * 2));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpRequestTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpRequestTest.cs,TestContentLengthPartial,The following statement contains a magic number: int partialSize = sampleRequest.Length / 3;
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpRequestTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpRequestTest.cs,TestContentLengthPartial,The following statement contains a magic number: string sampleRequest3 = sampleRequest.Substring(partialSize * 2' sampleRequest.Length - (partialSize * 2));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpRequestTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpRequestTest.cs,TestContentLengthPartial,The following statement contains a magic number: string sampleRequest3 = sampleRequest.Substring(partialSize * 2' sampleRequest.Length - (partialSize * 2));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGet,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGet,The following statement contains a magic number: client.Connect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGet,The following statement contains a magic number: responses.TryTake(out response' 5000);
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGetHttps,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGetHttps,The following statement contains a magic number: client.ConnectWithTLS((object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; })                      .WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestSimpleGetHttps,The following statement contains a magic number: responses.TryTake(out response' 5000);
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestChunked,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestChunked,The following statement contains a magic number: Assert.IsNotNull(client.Connect().WaitForValue(TimeSpan.FromSeconds(5)));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestChunked,The following statement contains a magic number: responses.TryTake(out response' 10000);
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestServer,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestServer,The following statement contains a magic number: Assert.IsNotNull(server.Bind().WaitForValue(TimeSpan.FromSeconds(5)));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestServer,The following statement contains a magic number: request.Timeout = 5000;
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,TestServer,The following statement contains a magic number: Assert.AreEqual(200' (int)response.StatusCode);
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Copy,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpChunkedServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpChunkedServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpChunkedServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: server.BindWithTLS(new X509Certificate2(rawCert)'                              (object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }).WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10));
Magic Number,ArenaNet.SockNet.Protocols.Http,HttpEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\Http\HttpSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: server.BindWithTLS(new X509Certificate2(rawCert)'                              (object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }).WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuation,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuation,The following statement contains a magic number: channel.outgoing.TryTake(out sent' 5000);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessage,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessage,The following statement contains a magic number: channel.outgoing.TryTake(out sent' 5000);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessage,The following statement contains a magic number: Random random = new Random(this.GetHashCode() ^ (int)DateTime.Now.Subtract(new DateTime(2000' 1' 1)).TotalMilliseconds);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessage,The following statement contains a magic number: byte[] data = new byte[random.Next(50' 150)];
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessage,The following statement contains a magic number: byte[] data = new byte[random.Next(50' 150)];
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessage,The following statement contains a magic number: n < 1000
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessage,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessage,The following statement contains a magic number: channel.outgoing.TryTake(out sent' 5000);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessage,The following statement contains a magic number: Random random = new Random(this.GetHashCode() ^ (int)DateTime.Now.Subtract(new DateTime(2000' 1' 1)).TotalMilliseconds);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessage,The following statement contains a magic number: byte[] data = new byte[random.Next(50000' 150000)];
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessage,The following statement contains a magic number: byte[] data = new byte[random.Next(50000' 150000)];
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessage,The following statement contains a magic number: n < 100
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,ToBuffer,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: client.Connect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: int numberOfMessages = 20;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(75000' 125000)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(75000' 125000)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(75000' 125000)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(75000' 125000)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(75000' 125000)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(75000' 125000)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(75000' 125000)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(75000' 125000)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: i % Math.Max(numberOfMessages / 10' 1) == 0
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: index |= incomingData[1] << 8;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: index |= incomingData[2] << 16;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: index |= incomingData[2] << 16;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: index |= incomingData[3] << 24;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: index |= incomingData[3] << 24;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLargeMessagesInParallel,The following statement contains a magic number: client.Disconnect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: client.Connect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: int numberOfMessages = 100;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(50' 100)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(50' 100)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(50' 100)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(50' 100)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(50' 100)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(50' 100)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(50' 100)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((object state) =>                      {                          int index = (int)state;                            byte[] messageData = new byte[random.Next(50' 100)];                          random.NextBytes(messageData);                          messageData[0] = (byte)(index >> 0);                          messageData[1] = (byte)(index >> 8);                          messageData[2] = (byte)(index >> 16);                          messageData[3] = (byte)(index >> 24);                            expectedResults[index] = messageData;                            client.Send(WebSocketFrame.CreateBinaryFrame(messageData));                            // simulate GC                          if (index % Math.Max(numberOfMessages / 10' 1) == 0)                          {                              GC.Collect();                              GC.WaitForPendingFinalizers();                          }                      }' i);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: i % Math.Max(numberOfMessages / 10' 1) == 0
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: index |= incomingData[1] << 8;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: index |= incomingData[2] << 16;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: index |= incomingData[2] << 16;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: index |= incomingData[3] << 24;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: index |= incomingData[3] << 24;
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestSmallMessagesInParallel,The following statement contains a magic number: client.Disconnect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMask,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMask,The following statement contains a magic number: client.Connect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMask,The following statement contains a magic number: client.Disconnect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuationEchoWithMask,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuationEchoWithMask,The following statement contains a magic number: client.Connect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuationEchoWithMask,The following statement contains a magic number: byte[] rawData = new byte[rand.Next(5000' 10000)];
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuationEchoWithMask,The following statement contains a magic number: byte[] rawData = new byte[rand.Next(5000' 10000)];
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestContinuationEchoWithMask,The following statement contains a magic number: client.Disconnect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestIncompleteBufferParsing,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestIncompleteBufferParsing,The following statement contains a magic number: client.Connect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestIncompleteBufferParsing,The following statement contains a magic number: string body1 = new string('A'' 4913) + "X";
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestIncompleteBufferParsing,The following statement contains a magic number: string body2 = new string('B'' 81) + "Y";
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestIncompleteBufferParsing,The following statement contains a magic number: client.Disconnect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMaskWithSsl,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMaskWithSsl,The following statement contains a magic number: client.ConnectWithTLS((object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; })                      .WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithMaskWithSsl,The following statement contains a magic number: client.Disconnect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithoutMask,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithoutMask,The following statement contains a magic number: client.Connect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestEchoWithoutMask,The following statement contains a magic number: client.Disconnect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The following statement contains a magic number: ObjectPool<byte[]> pool = new ObjectPool<byte[]>(() => { return new byte[1024]; });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The following statement contains a magic number: client.Connect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The following statement contains a magic number: byte[] randomData = new byte[2000];
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The following statement contains a magic number: i < 1000
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The following statement contains a magic number: receivedMessages < 1000 && blockingCollection.TryTake(out currentObject' DEFAULT_ASYNC_TIMEOUT)
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The following statement contains a magic number: i < 1000
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The following statement contains a magic number: Assert.AreEqual(1000' receivedMessages);
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSockeClientSockNetChannelModuleTest,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,TestLotsOfMessages,The following statement contains a magic number: client.Disconnect().WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: byte[] rawCert = CertificateUtil.CreateSelfSignCertificatePfx("CN=\"test\"; C=\"USA\""' DateTime.Today.AddDays(-10)' DateTime.Today.AddDays(+10));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: server.BindWithTLS(new X509Certificate2(rawCert)'                              (object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { return true; }).WaitForValue(TimeSpan.FromSeconds(5));
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: server.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel channel' ref WebSocketFrame data) =>                      {                          if (doContinuations)                          {                              int perFrameSize = data.Data.Length / 3;                                for (int i = 0; i < 3; i++)                              {                                  bool isDone = false;                                  byte[] rawData;                                    if (i + 1 < 3)                                  {                                      rawData = new byte[perFrameSize];                                      isDone = false;                                  }                                  else                                  {                                      rawData = new byte[data.Data.Length - (perFrameSize * 2)];                                      isDone = true;                                  }                                    Buffer.BlockCopy(data.Data' i * perFrameSize' rawData' 0' rawData.Length);                                    if (data.Operation == WebSocketFrame.WebSocketFrameOperation.BinaryFrame)                                  {                                      channel.Send(WebSocketFrame.CreateBinaryFrame(rawData' true' i != 0' isDone));                                  }                                  else                                  {                                      channel.Send(WebSocketFrame.CreateTextFrame(rawData' true' i != 0' isDone));                                  }                              }                          }                          else                          {                              channel.Send(data);                          }                      });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: server.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel channel' ref WebSocketFrame data) =>                      {                          if (doContinuations)                          {                              int perFrameSize = data.Data.Length / 3;                                for (int i = 0; i < 3; i++)                              {                                  bool isDone = false;                                  byte[] rawData;                                    if (i + 1 < 3)                                  {                                      rawData = new byte[perFrameSize];                                      isDone = false;                                  }                                  else                                  {                                      rawData = new byte[data.Data.Length - (perFrameSize * 2)];                                      isDone = true;                                  }                                    Buffer.BlockCopy(data.Data' i * perFrameSize' rawData' 0' rawData.Length);                                    if (data.Operation == WebSocketFrame.WebSocketFrameOperation.BinaryFrame)                                  {                                      channel.Send(WebSocketFrame.CreateBinaryFrame(rawData' true' i != 0' isDone));                                  }                                  else                                  {                                      channel.Send(WebSocketFrame.CreateTextFrame(rawData' true' i != 0' isDone));                                  }                              }                          }                          else                          {                              channel.Send(data);                          }                      });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: server.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel channel' ref WebSocketFrame data) =>                      {                          if (doContinuations)                          {                              int perFrameSize = data.Data.Length / 3;                                for (int i = 0; i < 3; i++)                              {                                  bool isDone = false;                                  byte[] rawData;                                    if (i + 1 < 3)                                  {                                      rawData = new byte[perFrameSize];                                      isDone = false;                                  }                                  else                                  {                                      rawData = new byte[data.Data.Length - (perFrameSize * 2)];                                      isDone = true;                                  }                                    Buffer.BlockCopy(data.Data' i * perFrameSize' rawData' 0' rawData.Length);                                    if (data.Operation == WebSocketFrame.WebSocketFrameOperation.BinaryFrame)                                  {                                      channel.Send(WebSocketFrame.CreateBinaryFrame(rawData' true' i != 0' isDone));                                  }                                  else                                  {                                      channel.Send(WebSocketFrame.CreateTextFrame(rawData' true' i != 0' isDone));                                  }                              }                          }                          else                          {                              channel.Send(data);                          }                      });
Magic Number,ArenaNet.SockNet.Protocols.WebSocket,WebSocketEchoServer,D:\research\architectureSmells\repos\arenanet_socknet\SockNet.Protocols.Tests\WebSocket\WebSockeClientSockNetChannelModuleTest.cs,Start,The following statement contains a magic number: server.Pipe.AddIncomingLast<WebSocketFrame>((ISockNetChannel channel' ref WebSocketFrame data) =>                      {                          if (doContinuations)                          {                              int perFrameSize = data.Data.Length / 3;                                for (int i = 0; i < 3; i++)                              {                                  bool isDone = false;                                  byte[] rawData;                                    if (i + 1 < 3)                                  {                                      rawData = new byte[perFrameSize];                                      isDone = false;                                  }                                  else                                  {                                      rawData = new byte[data.Data.Length - (perFrameSize * 2)];                                      isDone = true;                                  }                                    Buffer.BlockCopy(data.Data' i * perFrameSize' rawData' 0' rawData.Length);                                    if (data.Operation == WebSocketFrame.WebSocketFrameOperation.BinaryFrame)                                  {                                      channel.Send(WebSocketFrame.CreateBinaryFrame(rawData' true' i != 0' isDone));                                  }                                  else                                  {                                      channel.Send(WebSocketFrame.CreateTextFrame(rawData' true' i != 0' isDone));                                  }                              }                          }                          else                          {                              channel.Send(data);                          }                      });
