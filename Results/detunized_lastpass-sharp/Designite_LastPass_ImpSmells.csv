Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LastPass,Asn1,F:\newReposMay17\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,Cyclomatic complexity of the method is 16
Complex Method,LastPass,Fetcher,F:\newReposMay17\detunized_lastpass-sharp\src\Fetcher.cs,CreateLoginException,Cyclomatic complexity of the method is 11
Complex Method,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,ParseSecureNoteServer,Cyclomatic complexity of the method is 14
Complex Method,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,Cyclomatic complexity of the method is 11
Complex Method,LastPass,Vault,F:\newReposMay17\detunized_lastpass-sharp\src\Vault.cs,ParseAccounts,Cyclomatic complexity of the method is 12
Long Parameter List,LastPass,Account,F:\newReposMay17\detunized_lastpass-sharp\src\Account.cs,Account,The method has 6 parameters.
Long Parameter List,LastPass,Fetcher,F:\newReposMay17\detunized_lastpass-sharp\src\Fetcher.cs,Login,The method has 5 parameters.
Long Parameter List,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,ParseSecureNoteServer,The method has 5 parameters.
Long Statement,LastPass,Fetcher,F:\newReposMay17\detunized_lastpass-sharp\src\Fetcher.cs,Fetch,The length of the statement  "		response = webClient.DownloadData ("https://lastpass.com/getaccts.php?mobile=1&b64=1&hash=0.0&hasplugin=3.0.23&requestsrc=android"); " is 132.
Long Statement,LastPass,Fetcher,F:\newReposMay17\detunized_lastpass-sharp\src\Fetcher.cs,RequestIterationCount,The length of the statement  "	Func<Exception' Exception> invalidInt = e => new LoginException (LoginException.FailureReason.InvalidResponse' "Iteration count is invalid"' e); " is 144.
Long Statement,LastPass,Fetcher,F:\newReposMay17\detunized_lastpass-sharp\src\Fetcher.cs,CreateLoginException,The length of the statement  "			return new LoginException (LoginException.FailureReason.LastPassIncorrectGoogleAuthenticatorCode' "Google Authenticator code is missing or incorrect"); " is 151.
Long Statement,LastPass,Fetcher,F:\newReposMay17\detunized_lastpass-sharp\src\Fetcher.cs,CreateLoginException,The length of the statement  "			return new LoginException (LoginException.FailureReason.LastPassIncorrectYubikeyPassword' "Yubikey password is missing or incorrect"); " is 134.
Long Statement,LastPass,Fetcher,F:\newReposMay17\detunized_lastpass-sharp\src\Fetcher.cs,CreateLoginException,The length of the statement  "			return new LoginException (LoginException.FailureReason.LastPassOutOfBandAuthenticationRequired' "Out of band authentication required"); " is 136.
Long Statement,LastPass,Fetcher,F:\newReposMay17\detunized_lastpass-sharp\src\Fetcher.cs,CreateLoginException,The length of the statement  "			return new LoginException (LoginException.FailureReason.LastPassOutOfBandAuthenticationFailed' "Out of band authentication failed"); " is 132.
Long Statement,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_PRIK,The length of the statement  "	var decrypted = DecryptAes256 (chunk.Payload.ToUtf8 ().DecodeHex ()' encryptionKey' CipherMode.CBC' encryptionKey.Take (16).ToArray ()); " is 136.
Long Statement,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_PRIK,The length of the statement  "	var asn1EncodedKey = decrypted.Substring (header.Length' decrypted.Length - header.Length - footer.Length).DecodeHex (); " is 120.
Long Statement,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256CbcBase64,The length of the statement  "	return DecryptAes256 (data.Skip (26).ToArray ().ToUtf8 ().Decode64 ()' encryptionKey' CipherMode.CBC' data.Skip (1).Take (24).ToArray ().ToUtf8 ().Decode64 ()); " is 160.
Empty Catch Block,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,ExtractChunks,The method has an empty catch block.
Magic Number,LastPass,Asn1,F:\newReposMay17\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: switch (tag) {  case 2:  	kind = Kind.Integer;  	break;  case 4:  	kind = Kind.Bytes;  	break;  case 5:  	kind = Kind.Null;  	break;  case 16:  	kind = Kind.Sequence;  	break;  default:  	throw new ArgumentException (string.Format ("Unknown ASN.1 tag {0}"' tag));  }  
Magic Number,LastPass,Asn1,F:\newReposMay17\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: switch (tag) {  case 2:  	kind = Kind.Integer;  	break;  case 4:  	kind = Kind.Bytes;  	break;  case 5:  	kind = Kind.Null;  	break;  case 16:  	kind = Kind.Sequence;  	break;  default:  	throw new ArgumentException (string.Format ("Unknown ASN.1 tag {0}"' tag));  }  
Magic Number,LastPass,Asn1,F:\newReposMay17\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: switch (tag) {  case 2:  	kind = Kind.Integer;  	break;  case 4:  	kind = Kind.Bytes;  	break;  case 5:  	kind = Kind.Null;  	break;  case 16:  	kind = Kind.Sequence;  	break;  default:  	throw new ArgumentException (string.Format ("Unknown ASN.1 tag {0}"' tag));  }  
Magic Number,LastPass,Asn1,F:\newReposMay17\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: switch (tag) {  case 2:  	kind = Kind.Integer;  	break;  case 4:  	kind = Kind.Bytes;  	break;  case 5:  	kind = Kind.Null;  	break;  case 16:  	kind = Kind.Sequence;  	break;  default:  	throw new ArgumentException (string.Format ("Unknown ASN.1 tag {0}"' tag));  }  
Magic Number,LastPass,Asn1,F:\newReposMay17\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: if ((size & 0x80) != 0) {  	var sizeLength = size & 0x7F;  	size = 0;  	for (var i = 0; i < sizeLength; ++i) {  		var oneByte = reader.ReadByte ();  		size = size * 256 + oneByte;  	}  }  
Magic Number,LastPass,Asn1,F:\newReposMay17\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: for (var i = 0; i < sizeLength; ++i) {  	var oneByte = reader.ReadByte ();  	size = size * 256 + oneByte;  }  
Magic Number,LastPass,Asn1,F:\newReposMay17\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: size = size * 256 + oneByte;  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,Reverse,The following statement contains a magic number: return ((x & 0xff) << 24) | ((x & 0xff00) << 8) | ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24);  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,Reverse,The following statement contains a magic number: return ((x & 0xff) << 24) | ((x & 0xff00) << 8) | ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24);  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,Reverse,The following statement contains a magic number: return ((x & 0xff) << 24) | ((x & 0xff00) << 8) | ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24);  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,Reverse,The following statement contains a magic number: return ((x & 0xff) << 24) | ((x & 0xff00) << 8) | ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24);  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: if (s.Length % 2 != 0)  	throw new ArgumentException ("Input length must be multple of 2");  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < s.Length / 2; ++i) {  	var b = 0;  	for (var j = 0; j < 2; ++j) {  		b <<= 4;  		var c = char.ToLower (s [i * 2 + j]);  		if (c >= '0' && c <= '9')  			b |= c - '0';  		else if (c >= 'a' && c <= 'f')  			b |= c - 'a' + 10;  		else  			throw new ArgumentException ("Input contains invalid characters");  	}  	bytes [i] = (byte)b;  }  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < s.Length / 2; ++i) {  	var b = 0;  	for (var j = 0; j < 2; ++j) {  		b <<= 4;  		var c = char.ToLower (s [i * 2 + j]);  		if (c >= '0' && c <= '9')  			b |= c - '0';  		else if (c >= 'a' && c <= 'f')  			b |= c - 'a' + 10;  		else  			throw new ArgumentException ("Input contains invalid characters");  	}  	bytes [i] = (byte)b;  }  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < s.Length / 2; ++i) {  	var b = 0;  	for (var j = 0; j < 2; ++j) {  		b <<= 4;  		var c = char.ToLower (s [i * 2 + j]);  		if (c >= '0' && c <= '9')  			b |= c - '0';  		else if (c >= 'a' && c <= 'f')  			b |= c - 'a' + 10;  		else  			throw new ArgumentException ("Input contains invalid characters");  	}  	bytes [i] = (byte)b;  }  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < s.Length / 2; ++i) {  	var b = 0;  	for (var j = 0; j < 2; ++j) {  		b <<= 4;  		var c = char.ToLower (s [i * 2 + j]);  		if (c >= '0' && c <= '9')  			b |= c - '0';  		else if (c >= 'a' && c <= 'f')  			b |= c - 'a' + 10;  		else  			throw new ArgumentException ("Input contains invalid characters");  	}  	bytes [i] = (byte)b;  }  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < s.Length / 2; ++i) {  	var b = 0;  	for (var j = 0; j < 2; ++j) {  		b <<= 4;  		var c = char.ToLower (s [i * 2 + j]);  		if (c >= '0' && c <= '9')  			b |= c - '0';  		else if (c >= 'a' && c <= 'f')  			b |= c - 'a' + 10;  		else  			throw new ArgumentException ("Input contains invalid characters");  	}  	bytes [i] = (byte)b;  }  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: for (var j = 0; j < 2; ++j) {  	b <<= 4;  	var c = char.ToLower (s [i * 2 + j]);  	if (c >= '0' && c <= '9')  		b |= c - '0';  	else if (c >= 'a' && c <= 'f')  		b |= c - 'a' + 10;  	else  		throw new ArgumentException ("Input contains invalid characters");  }  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: for (var j = 0; j < 2; ++j) {  	b <<= 4;  	var c = char.ToLower (s [i * 2 + j]);  	if (c >= '0' && c <= '9')  		b |= c - '0';  	else if (c >= 'a' && c <= 'f')  		b |= c - 'a' + 10;  	else  		throw new ArgumentException ("Input contains invalid characters");  }  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: for (var j = 0; j < 2; ++j) {  	b <<= 4;  	var c = char.ToLower (s [i * 2 + j]);  	if (c >= '0' && c <= '9')  		b |= c - '0';  	else if (c >= 'a' && c <= 'f')  		b |= c - 'a' + 10;  	else  		throw new ArgumentException ("Input contains invalid characters");  }  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: for (var j = 0; j < 2; ++j) {  	b <<= 4;  	var c = char.ToLower (s [i * 2 + j]);  	if (c >= '0' && c <= '9')  		b |= c - '0';  	else if (c >= 'a' && c <= 'f')  		b |= c - 'a' + 10;  	else  		throw new ArgumentException ("Input contains invalid characters");  }  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: b <<= 4;  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: if (c >= '0' && c <= '9')  	b |= c - '0';  else if (c >= 'a' && c <= 'f')  	b |= c - 'a' + 10;  else  	throw new ArgumentException ("Input contains invalid characters");  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	b |= c - 'a' + 10;  else  	throw new ArgumentException ("Input contains invalid characters");  
Magic Number,LastPass,Extensions,F:\newReposMay17\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: b |= c - 'a' + 10;  
Magic Number,LastPass,FetcherHelper,F:\newReposMay17\detunized_lastpass-sharp\src\FetcherHelper.cs,MakeKey,The following statement contains a magic number: return Pbkdf2.Generate (password' username' iterationCount' 32);  
Magic Number,LastPass,FetcherHelper,F:\newReposMay17\detunized_lastpass-sharp\src\FetcherHelper.cs,MakeHash,The following statement contains a magic number: return Pbkdf2.Generate (key' password' 1' 32).ToHex ();  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_ACCT,The following statement contains a magic number: return WithBytes (chunk.Payload' reader => {  	var placeholder = "decryption failed";  	// Read all items  	var id = ReadItem (reader).ToUtf8 ();  	var name = DecryptAes256Plain (ReadItem (reader)' encryptionKey' placeholder);  	var group = DecryptAes256Plain (ReadItem (reader)' encryptionKey' placeholder);  	var url = ReadItem (reader).ToUtf8 ().DecodeHex ().ToUtf8 ();  	var notes = DecryptAes256Plain (ReadItem (reader)' encryptionKey' placeholder);  	2.Times (() => SkipItem (reader));  	var username = DecryptAes256Plain (ReadItem (reader)' encryptionKey' placeholder);  	var password = DecryptAes256Plain (ReadItem (reader)' encryptionKey' placeholder);  	2.Times (() => SkipItem (reader));  	var secureNoteMarker = ReadItem (reader).ToUtf8 ();  	// Parse secure note  	if (secureNoteMarker == "1") {  		var type = "";  		ParseSecureNoteServer (notes' ref type' ref url' ref username' ref password);  		// Only the some secure notes contain account-like information  		if (!AllowedSecureNoteTypes.Contains (type))  			return null;  	}  	// Override the group name with the shared folder name if any.  	if (folder != null)  		group = folder.Name;  	return new Account (id' name' username' password' url' group);  });  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_ACCT,The following statement contains a magic number: return WithBytes (chunk.Payload' reader => {  	var placeholder = "decryption failed";  	// Read all items  	var id = ReadItem (reader).ToUtf8 ();  	var name = DecryptAes256Plain (ReadItem (reader)' encryptionKey' placeholder);  	var group = DecryptAes256Plain (ReadItem (reader)' encryptionKey' placeholder);  	var url = ReadItem (reader).ToUtf8 ().DecodeHex ().ToUtf8 ();  	var notes = DecryptAes256Plain (ReadItem (reader)' encryptionKey' placeholder);  	2.Times (() => SkipItem (reader));  	var username = DecryptAes256Plain (ReadItem (reader)' encryptionKey' placeholder);  	var password = DecryptAes256Plain (ReadItem (reader)' encryptionKey' placeholder);  	2.Times (() => SkipItem (reader));  	var secureNoteMarker = ReadItem (reader).ToUtf8 ();  	// Parse secure note  	if (secureNoteMarker == "1") {  		var type = "";  		ParseSecureNoteServer (notes' ref type' ref url' ref username' ref password);  		// Only the some secure notes contain account-like information  		if (!AllowedSecureNoteTypes.Contains (type))  			return null;  	}  	// Override the group name with the shared folder name if any.  	if (folder != null)  		group = folder.Name;  	return new Account (id' name' username' password' url' group);  });  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_ACCT,The following statement contains a magic number: 2.Times (() => SkipItem (reader));  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_ACCT,The following statement contains a magic number: 2.Times (() => SkipItem (reader));  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_PRIK,The following statement contains a magic number: 2.Times (() => Asn1.ExtractItem (reader));  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_SHAR,The following statement contains a magic number: return WithBytes (chunk.Payload' reader => {  	var id = ReadItem (reader).ToUtf8 ();  	var rsaEncryptedFolderKey = ReadItem (reader);  	var encryptedName = ReadItem (reader);  	2.Times (() => SkipItem (reader));  	var aesEncryptedFolderKey = ReadItem (reader);  	byte[] key = null;  	// Shared folder encryption key might come already in pre-decrypted form'  	// where it's only AES encrypted with the regular encryption key.  	if (aesEncryptedFolderKey.Length > 0) {  		key = DecryptAes256Plain (aesEncryptedFolderKey' encryptionKey).DecodeHex ();  	} else {  		// When the key is blank' then there's an RSA encrypted key' which has to  		// be decrypted first before use.  		using (var rsa = new RSACryptoServiceProvider ()) {  			rsa.ImportParameters (rsaKey);  			key = rsa.Decrypt (rsaEncryptedFolderKey.ToUtf8 ().DecodeHex ()' true).ToUtf8 ().DecodeHex ();  		}  	}  	return new SharedFolder (id' DecryptAes256Base64 (encryptedName' key)' key);  });  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_SHAR,The following statement contains a magic number: 2.Times (() => SkipItem (reader));  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,ParseSecureNoteServer,The following statement contains a magic number: foreach (var i in notes.Split ('\n')) {  	var keyValue = i.Split (new[] {  		':'  	}' 2);  	if (keyValue.Length < 2)  		continue;  	switch (keyValue [0]) {  	case "NoteType":  		type = keyValue [1];  		break;  	case "Hostname":  		url = keyValue [1];  		break;  	case "Username":  		username = keyValue [1];  		break;  	case "Password":  		password = keyValue [1];  		break;  	}  }  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,ParseSecureNoteServer,The following statement contains a magic number: foreach (var i in notes.Split ('\n')) {  	var keyValue = i.Split (new[] {  		':'  	}' 2);  	if (keyValue.Length < 2)  		continue;  	switch (keyValue [0]) {  	case "NoteType":  		type = keyValue [1];  		break;  	case "Hostname":  		url = keyValue [1];  		break;  	case "Username":  		username = keyValue [1];  		break;  	case "Password":  		password = keyValue [1];  		break;  	}  }  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,ParseSecureNoteServer,The following statement contains a magic number: if (keyValue.Length < 2)  	continue;  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,ReadId,The following statement contains a magic number: return reader.ReadBytes (4).ToUtf8 ();  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256Plain,The following statement contains a magic number: if (length == 0)  	return "";  else if (data [0] == '!' && length % 16 == 1 && length > 32)  	return DecryptAes256CbcPlain (data' encryptionKey);  else  	return DecryptAes256EcbPlain (data' encryptionKey);  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256Plain,The following statement contains a magic number: if (length == 0)  	return "";  else if (data [0] == '!' && length % 16 == 1 && length > 32)  	return DecryptAes256CbcPlain (data' encryptionKey);  else  	return DecryptAes256EcbPlain (data' encryptionKey);  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256Plain,The following statement contains a magic number: if (data [0] == '!' && length % 16 == 1 && length > 32)  	return DecryptAes256CbcPlain (data' encryptionKey);  else  	return DecryptAes256EcbPlain (data' encryptionKey);  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256Plain,The following statement contains a magic number: if (data [0] == '!' && length % 16 == 1 && length > 32)  	return DecryptAes256CbcPlain (data' encryptionKey);  else  	return DecryptAes256EcbPlain (data' encryptionKey);  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256CbcPlain,The following statement contains a magic number: return DecryptAes256 (data.Skip (17).ToArray ()' encryptionKey' CipherMode.CBC' data.Skip (1).Take (16).ToArray ());  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256CbcPlain,The following statement contains a magic number: return DecryptAes256 (data.Skip (17).ToArray ()' encryptionKey' CipherMode.CBC' data.Skip (1).Take (16).ToArray ());  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256CbcBase64,The following statement contains a magic number: return DecryptAes256 (data.Skip (26).ToArray ().ToUtf8 ().Decode64 ()' encryptionKey' CipherMode.CBC' data.Skip (1).Take (24).ToArray ().ToUtf8 ().Decode64 ());  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256CbcBase64,The following statement contains a magic number: return DecryptAes256 (data.Skip (26).ToArray ().ToUtf8 ().Decode64 ()' encryptionKey' CipherMode.CBC' data.Skip (1).Take (24).ToArray ().ToUtf8 ().Decode64 ());  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256,The following statement contains a magic number: return DecryptAes256 (data' encryptionKey' mode' new byte[16]);  
Magic Number,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256,The following statement contains a magic number: using (var aes = new AesManaged {  	KeySize = 256'  	Key = encryptionKey'  	Mode = mode'  	IV = iv  })  	using (var decryptor = aes.CreateDecryptor ())  		using (var stream = new MemoryStream (data' false))  			using (var cryptoStream = new CryptoStream (stream' decryptor' CryptoStreamMode.Read))  				using (var reader = new StreamReader (cryptoStream)) {  					// TODO: StreamReader is a text reader. This might fail with arbitrary binary encrypted  					//       data. Luckily we have only text encrypted. Pay attention when refactoring!  					return reader.ReadToEnd ();  				}  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: using (var hmac = new HMACSHA256 ()) {  	hmac.Key = password;  	// Prepare hash input (salt + block index)  	var hashInputSize = salt.Length + 4;  	var hashInput = new byte[hashInputSize];  	salt.CopyTo (hashInput' 0);  	hashInput [hashInputSize - 4] = 0;  	hashInput [hashInputSize - 3] = 0;  	hashInput [hashInputSize - 2] = 0;  	hashInput [hashInputSize - 1] = 0;  	var bytes = new byte[byteCount];  	var hashSize = hmac.HashSize / 8;  	var blockCount = (byteCount + hashSize - 1) / hashSize;  	for (var i = 0; i < blockCount; ++i) {  		// Increase 32-bit big-endian block index at the end of the hash input buffer  		if (++hashInput [hashInputSize - 1] == 0)  			if (++hashInput [hashInputSize - 2] == 0)  				if (++hashInput [hashInputSize - 3] == 0)  					++hashInput [hashInputSize - 4];  		var hashed = hmac.ComputeHash (hashInput);  		var block = hashed;  		for (var j = 1; j < iterationCount; ++j) {  			hashed = hmac.ComputeHash (hashed);  			for (var k = 0; k < hashed.Length; ++k) {  				block [k] ^= hashed [k];  			}  		}  		var offset = i * hashSize;  		var size = Math.Min (hashSize' byteCount - offset);  		Array.Copy (block' 0' bytes' offset' size);  	}  	return bytes;  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: using (var hmac = new HMACSHA256 ()) {  	hmac.Key = password;  	// Prepare hash input (salt + block index)  	var hashInputSize = salt.Length + 4;  	var hashInput = new byte[hashInputSize];  	salt.CopyTo (hashInput' 0);  	hashInput [hashInputSize - 4] = 0;  	hashInput [hashInputSize - 3] = 0;  	hashInput [hashInputSize - 2] = 0;  	hashInput [hashInputSize - 1] = 0;  	var bytes = new byte[byteCount];  	var hashSize = hmac.HashSize / 8;  	var blockCount = (byteCount + hashSize - 1) / hashSize;  	for (var i = 0; i < blockCount; ++i) {  		// Increase 32-bit big-endian block index at the end of the hash input buffer  		if (++hashInput [hashInputSize - 1] == 0)  			if (++hashInput [hashInputSize - 2] == 0)  				if (++hashInput [hashInputSize - 3] == 0)  					++hashInput [hashInputSize - 4];  		var hashed = hmac.ComputeHash (hashInput);  		var block = hashed;  		for (var j = 1; j < iterationCount; ++j) {  			hashed = hmac.ComputeHash (hashed);  			for (var k = 0; k < hashed.Length; ++k) {  				block [k] ^= hashed [k];  			}  		}  		var offset = i * hashSize;  		var size = Math.Min (hashSize' byteCount - offset);  		Array.Copy (block' 0' bytes' offset' size);  	}  	return bytes;  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: using (var hmac = new HMACSHA256 ()) {  	hmac.Key = password;  	// Prepare hash input (salt + block index)  	var hashInputSize = salt.Length + 4;  	var hashInput = new byte[hashInputSize];  	salt.CopyTo (hashInput' 0);  	hashInput [hashInputSize - 4] = 0;  	hashInput [hashInputSize - 3] = 0;  	hashInput [hashInputSize - 2] = 0;  	hashInput [hashInputSize - 1] = 0;  	var bytes = new byte[byteCount];  	var hashSize = hmac.HashSize / 8;  	var blockCount = (byteCount + hashSize - 1) / hashSize;  	for (var i = 0; i < blockCount; ++i) {  		// Increase 32-bit big-endian block index at the end of the hash input buffer  		if (++hashInput [hashInputSize - 1] == 0)  			if (++hashInput [hashInputSize - 2] == 0)  				if (++hashInput [hashInputSize - 3] == 0)  					++hashInput [hashInputSize - 4];  		var hashed = hmac.ComputeHash (hashInput);  		var block = hashed;  		for (var j = 1; j < iterationCount; ++j) {  			hashed = hmac.ComputeHash (hashed);  			for (var k = 0; k < hashed.Length; ++k) {  				block [k] ^= hashed [k];  			}  		}  		var offset = i * hashSize;  		var size = Math.Min (hashSize' byteCount - offset);  		Array.Copy (block' 0' bytes' offset' size);  	}  	return bytes;  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: using (var hmac = new HMACSHA256 ()) {  	hmac.Key = password;  	// Prepare hash input (salt + block index)  	var hashInputSize = salt.Length + 4;  	var hashInput = new byte[hashInputSize];  	salt.CopyTo (hashInput' 0);  	hashInput [hashInputSize - 4] = 0;  	hashInput [hashInputSize - 3] = 0;  	hashInput [hashInputSize - 2] = 0;  	hashInput [hashInputSize - 1] = 0;  	var bytes = new byte[byteCount];  	var hashSize = hmac.HashSize / 8;  	var blockCount = (byteCount + hashSize - 1) / hashSize;  	for (var i = 0; i < blockCount; ++i) {  		// Increase 32-bit big-endian block index at the end of the hash input buffer  		if (++hashInput [hashInputSize - 1] == 0)  			if (++hashInput [hashInputSize - 2] == 0)  				if (++hashInput [hashInputSize - 3] == 0)  					++hashInput [hashInputSize - 4];  		var hashed = hmac.ComputeHash (hashInput);  		var block = hashed;  		for (var j = 1; j < iterationCount; ++j) {  			hashed = hmac.ComputeHash (hashed);  			for (var k = 0; k < hashed.Length; ++k) {  				block [k] ^= hashed [k];  			}  		}  		var offset = i * hashSize;  		var size = Math.Min (hashSize' byteCount - offset);  		Array.Copy (block' 0' bytes' offset' size);  	}  	return bytes;  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: using (var hmac = new HMACSHA256 ()) {  	hmac.Key = password;  	// Prepare hash input (salt + block index)  	var hashInputSize = salt.Length + 4;  	var hashInput = new byte[hashInputSize];  	salt.CopyTo (hashInput' 0);  	hashInput [hashInputSize - 4] = 0;  	hashInput [hashInputSize - 3] = 0;  	hashInput [hashInputSize - 2] = 0;  	hashInput [hashInputSize - 1] = 0;  	var bytes = new byte[byteCount];  	var hashSize = hmac.HashSize / 8;  	var blockCount = (byteCount + hashSize - 1) / hashSize;  	for (var i = 0; i < blockCount; ++i) {  		// Increase 32-bit big-endian block index at the end of the hash input buffer  		if (++hashInput [hashInputSize - 1] == 0)  			if (++hashInput [hashInputSize - 2] == 0)  				if (++hashInput [hashInputSize - 3] == 0)  					++hashInput [hashInputSize - 4];  		var hashed = hmac.ComputeHash (hashInput);  		var block = hashed;  		for (var j = 1; j < iterationCount; ++j) {  			hashed = hmac.ComputeHash (hashed);  			for (var k = 0; k < hashed.Length; ++k) {  				block [k] ^= hashed [k];  			}  		}  		var offset = i * hashSize;  		var size = Math.Min (hashSize' byteCount - offset);  		Array.Copy (block' 0' bytes' offset' size);  	}  	return bytes;  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: using (var hmac = new HMACSHA256 ()) {  	hmac.Key = password;  	// Prepare hash input (salt + block index)  	var hashInputSize = salt.Length + 4;  	var hashInput = new byte[hashInputSize];  	salt.CopyTo (hashInput' 0);  	hashInput [hashInputSize - 4] = 0;  	hashInput [hashInputSize - 3] = 0;  	hashInput [hashInputSize - 2] = 0;  	hashInput [hashInputSize - 1] = 0;  	var bytes = new byte[byteCount];  	var hashSize = hmac.HashSize / 8;  	var blockCount = (byteCount + hashSize - 1) / hashSize;  	for (var i = 0; i < blockCount; ++i) {  		// Increase 32-bit big-endian block index at the end of the hash input buffer  		if (++hashInput [hashInputSize - 1] == 0)  			if (++hashInput [hashInputSize - 2] == 0)  				if (++hashInput [hashInputSize - 3] == 0)  					++hashInput [hashInputSize - 4];  		var hashed = hmac.ComputeHash (hashInput);  		var block = hashed;  		for (var j = 1; j < iterationCount; ++j) {  			hashed = hmac.ComputeHash (hashed);  			for (var k = 0; k < hashed.Length; ++k) {  				block [k] ^= hashed [k];  			}  		}  		var offset = i * hashSize;  		var size = Math.Min (hashSize' byteCount - offset);  		Array.Copy (block' 0' bytes' offset' size);  	}  	return bytes;  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: using (var hmac = new HMACSHA256 ()) {  	hmac.Key = password;  	// Prepare hash input (salt + block index)  	var hashInputSize = salt.Length + 4;  	var hashInput = new byte[hashInputSize];  	salt.CopyTo (hashInput' 0);  	hashInput [hashInputSize - 4] = 0;  	hashInput [hashInputSize - 3] = 0;  	hashInput [hashInputSize - 2] = 0;  	hashInput [hashInputSize - 1] = 0;  	var bytes = new byte[byteCount];  	var hashSize = hmac.HashSize / 8;  	var blockCount = (byteCount + hashSize - 1) / hashSize;  	for (var i = 0; i < blockCount; ++i) {  		// Increase 32-bit big-endian block index at the end of the hash input buffer  		if (++hashInput [hashInputSize - 1] == 0)  			if (++hashInput [hashInputSize - 2] == 0)  				if (++hashInput [hashInputSize - 3] == 0)  					++hashInput [hashInputSize - 4];  		var hashed = hmac.ComputeHash (hashInput);  		var block = hashed;  		for (var j = 1; j < iterationCount; ++j) {  			hashed = hmac.ComputeHash (hashed);  			for (var k = 0; k < hashed.Length; ++k) {  				block [k] ^= hashed [k];  			}  		}  		var offset = i * hashSize;  		var size = Math.Min (hashSize' byteCount - offset);  		Array.Copy (block' 0' bytes' offset' size);  	}  	return bytes;  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: using (var hmac = new HMACSHA256 ()) {  	hmac.Key = password;  	// Prepare hash input (salt + block index)  	var hashInputSize = salt.Length + 4;  	var hashInput = new byte[hashInputSize];  	salt.CopyTo (hashInput' 0);  	hashInput [hashInputSize - 4] = 0;  	hashInput [hashInputSize - 3] = 0;  	hashInput [hashInputSize - 2] = 0;  	hashInput [hashInputSize - 1] = 0;  	var bytes = new byte[byteCount];  	var hashSize = hmac.HashSize / 8;  	var blockCount = (byteCount + hashSize - 1) / hashSize;  	for (var i = 0; i < blockCount; ++i) {  		// Increase 32-bit big-endian block index at the end of the hash input buffer  		if (++hashInput [hashInputSize - 1] == 0)  			if (++hashInput [hashInputSize - 2] == 0)  				if (++hashInput [hashInputSize - 3] == 0)  					++hashInput [hashInputSize - 4];  		var hashed = hmac.ComputeHash (hashInput);  		var block = hashed;  		for (var j = 1; j < iterationCount; ++j) {  			hashed = hmac.ComputeHash (hashed);  			for (var k = 0; k < hashed.Length; ++k) {  				block [k] ^= hashed [k];  			}  		}  		var offset = i * hashSize;  		var size = Math.Min (hashSize' byteCount - offset);  		Array.Copy (block' 0' bytes' offset' size);  	}  	return bytes;  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: hashInput [hashInputSize - 4] = 0;  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: hashInput [hashInputSize - 3] = 0;  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: hashInput [hashInputSize - 2] = 0;  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: for (var i = 0; i < blockCount; ++i) {  	// Increase 32-bit big-endian block index at the end of the hash input buffer  	if (++hashInput [hashInputSize - 1] == 0)  		if (++hashInput [hashInputSize - 2] == 0)  			if (++hashInput [hashInputSize - 3] == 0)  				++hashInput [hashInputSize - 4];  	var hashed = hmac.ComputeHash (hashInput);  	var block = hashed;  	for (var j = 1; j < iterationCount; ++j) {  		hashed = hmac.ComputeHash (hashed);  		for (var k = 0; k < hashed.Length; ++k) {  			block [k] ^= hashed [k];  		}  	}  	var offset = i * hashSize;  	var size = Math.Min (hashSize' byteCount - offset);  	Array.Copy (block' 0' bytes' offset' size);  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: for (var i = 0; i < blockCount; ++i) {  	// Increase 32-bit big-endian block index at the end of the hash input buffer  	if (++hashInput [hashInputSize - 1] == 0)  		if (++hashInput [hashInputSize - 2] == 0)  			if (++hashInput [hashInputSize - 3] == 0)  				++hashInput [hashInputSize - 4];  	var hashed = hmac.ComputeHash (hashInput);  	var block = hashed;  	for (var j = 1; j < iterationCount; ++j) {  		hashed = hmac.ComputeHash (hashed);  		for (var k = 0; k < hashed.Length; ++k) {  			block [k] ^= hashed [k];  		}  	}  	var offset = i * hashSize;  	var size = Math.Min (hashSize' byteCount - offset);  	Array.Copy (block' 0' bytes' offset' size);  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: for (var i = 0; i < blockCount; ++i) {  	// Increase 32-bit big-endian block index at the end of the hash input buffer  	if (++hashInput [hashInputSize - 1] == 0)  		if (++hashInput [hashInputSize - 2] == 0)  			if (++hashInput [hashInputSize - 3] == 0)  				++hashInput [hashInputSize - 4];  	var hashed = hmac.ComputeHash (hashInput);  	var block = hashed;  	for (var j = 1; j < iterationCount; ++j) {  		hashed = hmac.ComputeHash (hashed);  		for (var k = 0; k < hashed.Length; ++k) {  			block [k] ^= hashed [k];  		}  	}  	var offset = i * hashSize;  	var size = Math.Min (hashSize' byteCount - offset);  	Array.Copy (block' 0' bytes' offset' size);  }  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: if (++hashInput [hashInputSize - 1] == 0)  	if (++hashInput [hashInputSize - 2] == 0)  		if (++hashInput [hashInputSize - 3] == 0)  			++hashInput [hashInputSize - 4];  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: if (++hashInput [hashInputSize - 1] == 0)  	if (++hashInput [hashInputSize - 2] == 0)  		if (++hashInput [hashInputSize - 3] == 0)  			++hashInput [hashInputSize - 4];  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: if (++hashInput [hashInputSize - 1] == 0)  	if (++hashInput [hashInputSize - 2] == 0)  		if (++hashInput [hashInputSize - 3] == 0)  			++hashInput [hashInputSize - 4];  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: if (++hashInput [hashInputSize - 2] == 0)  	if (++hashInput [hashInputSize - 3] == 0)  		++hashInput [hashInputSize - 4];  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: if (++hashInput [hashInputSize - 2] == 0)  	if (++hashInput [hashInputSize - 3] == 0)  		++hashInput [hashInputSize - 4];  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: if (++hashInput [hashInputSize - 2] == 0)  	if (++hashInput [hashInputSize - 3] == 0)  		++hashInput [hashInputSize - 4];  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: if (++hashInput [hashInputSize - 3] == 0)  	++hashInput [hashInputSize - 4];  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: if (++hashInput [hashInputSize - 3] == 0)  	++hashInput [hashInputSize - 4];  
Magic Number,LastPass,Pbkdf2,F:\newReposMay17\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: ++hashInput [hashInputSize - 4];  
Missing Default,LastPass,ParserHelper,F:\newReposMay17\detunized_lastpass-sharp\src\ParserHelper.cs,ParseSecureNoteServer,The following switch statement is missing a default case: switch (keyValue [0]) {  case "NoteType":  	type = keyValue [1];  	break;  case "Hostname":  	url = keyValue [1];  	break;  case "Username":  	username = keyValue [1];  	break;  case "Password":  	password = keyValue [1];  	break;  }  
Missing Default,LastPass,Vault,F:\newReposMay17\detunized_lastpass-sharp\src\Vault.cs,ParseAccounts,The following switch statement is missing a default case: switch (i.Id) {  case "ACCT":  	var account = ParserHelper.Parse_ACCT (i' folder == null ? encryptionKey : folder.EncryptionKey' folder);  	if (account != null)  		accounts.Add (account);  	break;  case "PRIK":  	rsaKey = ParserHelper.Parse_PRIK (i' encryptionKey);  	break;  case "SHAR":  	folder = ParserHelper.Parse_SHAR (i' encryptionKey' rsaKey);  	break;  }  
