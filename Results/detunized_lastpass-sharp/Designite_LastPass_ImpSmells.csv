Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LastPass,Fetcher,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Fetcher.cs,CreateLoginException,Cyclomatic complexity of the method is 10
Complex Method,LastPass,Pbkdf2,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,Cyclomatic complexity of the method is 9
Long Parameter List,LastPass,Account,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Account.cs,Account,The method has 6 parameters. Parameters: id' name' username' password' url' group
Long Parameter List,LastPass,Fetcher,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Fetcher.cs,Login,The method has 5 parameters. Parameters: username' password' clientInfo' ui' webClient
Long Parameter List,LastPass,Fetcher,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Fetcher.cs,PerformSingleLoginRequest,The method has 6 parameters. Parameters: username' password' keyIterationCount' extraParameters' clientInfo' webClient
Long Parameter List,LastPass,Fetcher,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Fetcher.cs,LoginWithOtp,The method has 7 parameters. Parameters: username' password' keyIterationCount' method' clientInfo' ui' webClient
Long Parameter List,LastPass,Fetcher,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Fetcher.cs,LoginWithOob,The method has 7 parameters. Parameters: username' password' keyIterationCount' method' clientInfo' ui' webClient
Long Parameter List,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,ParseSecureNoteServer,The method has 5 parameters. Parameters: notes' type' url' username' password
Long Parameter List,LastPass,Session,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Session.cs,Session,The method has 5 parameters. Parameters: id' keyIterationCount' token' encryptedPrivateKey' platform
Empty Catch Block,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,ExtractChunks,The method has an empty catch block.
Magic Number,LastPass,Asn1,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: switch (tag)              {              case 2:                  kind = Kind.Integer;                  break;              case 4:                  kind = Kind.Bytes;                  break;              case 5:                  kind = Kind.Null;                  break;              case 16:                  kind = Kind.Sequence;                  break;              default:                  throw new ArgumentException(string.Format("Unknown ASN.1 tag {0}"' tag));              }
Magic Number,LastPass,Asn1,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: switch (tag)              {              case 2:                  kind = Kind.Integer;                  break;              case 4:                  kind = Kind.Bytes;                  break;              case 5:                  kind = Kind.Null;                  break;              case 16:                  kind = Kind.Sequence;                  break;              default:                  throw new ArgumentException(string.Format("Unknown ASN.1 tag {0}"' tag));              }
Magic Number,LastPass,Asn1,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: switch (tag)              {              case 2:                  kind = Kind.Integer;                  break;              case 4:                  kind = Kind.Bytes;                  break;              case 5:                  kind = Kind.Null;                  break;              case 16:                  kind = Kind.Sequence;                  break;              default:                  throw new ArgumentException(string.Format("Unknown ASN.1 tag {0}"' tag));              }
Magic Number,LastPass,Asn1,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: switch (tag)              {              case 2:                  kind = Kind.Integer;                  break;              case 4:                  kind = Kind.Bytes;                  break;              case 5:                  kind = Kind.Null;                  break;              case 16:                  kind = Kind.Sequence;                  break;              default:                  throw new ArgumentException(string.Format("Unknown ASN.1 tag {0}"' tag));              }
Magic Number,LastPass,Asn1,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Asn1.cs,ExtractItem,The following statement contains a magic number: size = size * 256 + oneByte;
Magic Number,LastPass,Extensions,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Extensions.cs,Reverse,The following statement contains a magic number: return ((x & 0xff) << 24) | ((x & 0xff00) << 8) | ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24);
Magic Number,LastPass,Extensions,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Extensions.cs,Reverse,The following statement contains a magic number: return ((x & 0xff) << 24) | ((x & 0xff00) << 8) | ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24);
Magic Number,LastPass,Extensions,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Extensions.cs,Reverse,The following statement contains a magic number: return ((x & 0xff) << 24) | ((x & 0xff00) << 8) | ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24);
Magic Number,LastPass,Extensions,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Extensions.cs,Reverse,The following statement contains a magic number: return ((x & 0xff) << 24) | ((x & 0xff00) << 8) | ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24);
Magic Number,LastPass,Extensions,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: s.Length % 2 != 0
Magic Number,LastPass,Extensions,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[s.Length / 2];
Magic Number,LastPass,Extensions,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: b <<= 4;
Magic Number,LastPass,Extensions,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: var c = char.ToLower(s[i * 2 + j]);
Magic Number,LastPass,Extensions,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: j < 2
Magic Number,LastPass,Extensions,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Extensions.cs,DecodeHex,The following statement contains a magic number: i < s.Length / 2
Magic Number,LastPass,FetcherHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\FetcherHelper.cs,MakeKey,The following statement contains a magic number: return Pbkdf2.Generate(password' username' iterationCount' 32);
Magic Number,LastPass,FetcherHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\FetcherHelper.cs,MakeHash,The following statement contains a magic number: return Pbkdf2.Generate(key' password' 1' 32).ToHex();
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_ACCT,The following statement contains a magic number: return WithBytes(chunk.Payload' reader =>              {                  var placeholder = "decryption failed";                    // Read all items                  var id = ReadItem(reader).ToUtf8();                  var name = DecryptAes256Plain(ReadItem(reader)' encryptionKey' placeholder);                  var group = DecryptAes256Plain(ReadItem(reader)' encryptionKey' placeholder);                  var url = ReadItem(reader).ToUtf8().DecodeHex().ToUtf8();                    // Ignore "group" accounts. They have no credentials.                  if (url == "http://group")                      return null;                    var notes = DecryptAes256Plain(ReadItem(reader)' encryptionKey' placeholder);                  2.Times(() => SkipItem(reader));                  var username = DecryptAes256Plain(ReadItem(reader)' encryptionKey' placeholder);                  var password = DecryptAes256Plain(ReadItem(reader)' encryptionKey' placeholder);                  2.Times(() => SkipItem(reader));                  var secureNoteMarker = ReadItem(reader).ToUtf8();                    // Parse secure note                  if (secureNoteMarker == "1")                  {                      var type = "";                      ParseSecureNoteServer(notes' ref type' ref url' ref username' ref password);                        // Only the some secure notes contain account-like information                      if (!AllowedSecureNoteTypes.Contains(type))                          return null;                  }                    // Adjust the path to include the group and the shared folder' if any.                  var path = MakeAccountPath(group' folder);                    return new Account(id' name' username' password' url' path);              });
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_ACCT,The following statement contains a magic number: return WithBytes(chunk.Payload' reader =>              {                  var placeholder = "decryption failed";                    // Read all items                  var id = ReadItem(reader).ToUtf8();                  var name = DecryptAes256Plain(ReadItem(reader)' encryptionKey' placeholder);                  var group = DecryptAes256Plain(ReadItem(reader)' encryptionKey' placeholder);                  var url = ReadItem(reader).ToUtf8().DecodeHex().ToUtf8();                    // Ignore "group" accounts. They have no credentials.                  if (url == "http://group")                      return null;                    var notes = DecryptAes256Plain(ReadItem(reader)' encryptionKey' placeholder);                  2.Times(() => SkipItem(reader));                  var username = DecryptAes256Plain(ReadItem(reader)' encryptionKey' placeholder);                  var password = DecryptAes256Plain(ReadItem(reader)' encryptionKey' placeholder);                  2.Times(() => SkipItem(reader));                  var secureNoteMarker = ReadItem(reader).ToUtf8();                    // Parse secure note                  if (secureNoteMarker == "1")                  {                      var type = "";                      ParseSecureNoteServer(notes' ref type' ref url' ref username' ref password);                        // Only the some secure notes contain account-like information                      if (!AllowedSecureNoteTypes.Contains(type))                          return null;                  }                    // Adjust the path to include the group and the shared folder' if any.                  var path = MakeAccountPath(group' folder);                    return new Account(id' name' username' password' url' path);              });
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,Parse_SHAR,The following statement contains a magic number: return WithBytes(chunk.Payload' reader =>              {                  var id = ReadItem(reader).ToUtf8();                  var rsaEncryptedFolderKey = ReadItem(reader);                  var encryptedName = ReadItem(reader);                  2.Times(() => SkipItem(reader));                  var aesEncryptedFolderKey = ReadItem(reader);                    byte[] key = null;                    // Shared folder encryption key might come already in pre-decrypted form'                  // where it's only AES encrypted with the regular encryption key.                  if (aesEncryptedFolderKey.Length > 0)                  {                      key = DecryptAes256Plain(aesEncryptedFolderKey' encryptionKey).DecodeHex();                  }                  else                  {                      // When the key is blank' then there's an RSA encrypted key' which has to                      // be decrypted first before use.                      using (var rsa = new RSACryptoServiceProvider())                      {                          rsa.ImportParameters(rsaKey);                          key = rsa.Decrypt(rsaEncryptedFolderKey.ToUtf8().DecodeHex()' true).ToUtf8().DecodeHex();                      }                  }                    return new SharedFolder(id' DecryptAes256Base64(encryptedName' key)' key);              });
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,ParseEcryptedPrivateKey,The following statement contains a magic number: var decrypted = DecryptAes256(encryptedPrivateKey.DecodeHex()'                                            encryptionKey'                                            CipherMode.CBC'                                            encryptionKey.Take(16).ToArray());
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,ParseEcryptedPrivateKey,The following statement contains a magic number: var anotherEnclosingSequence = WithBytes(enclosingSequence.Value' reader => {                  2.Times(() => Asn1.ExtractItem(reader));                  return Asn1.ExtractItem(reader);              });
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,ParseSecureNoteServer,The following statement contains a magic number: var keyValue = i.Split(new[] {':'}' 2);
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,ParseSecureNoteServer,The following statement contains a magic number: keyValue.Length < 2
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,ReadId,The following statement contains a magic number: return reader.ReadBytes(4).ToUtf8();
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256CbcPlain,The following statement contains a magic number: return DecryptAes256(data.Skip(17).ToArray()'                                   encryptionKey'                                   CipherMode.CBC'                                   data.Skip(1).Take(16).ToArray());
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256CbcPlain,The following statement contains a magic number: return DecryptAes256(data.Skip(17).ToArray()'                                   encryptionKey'                                   CipherMode.CBC'                                   data.Skip(1).Take(16).ToArray());
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256CbcBase64,The following statement contains a magic number: return DecryptAes256(data.Skip(26).ToArray().ToUtf8().Decode64()'                                   encryptionKey'                                   CipherMode.CBC'                                   data.Skip(1).Take(24).ToArray().ToUtf8().Decode64());
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256CbcBase64,The following statement contains a magic number: return DecryptAes256(data.Skip(26).ToArray().ToUtf8().Decode64()'                                   encryptionKey'                                   CipherMode.CBC'                                   data.Skip(1).Take(24).ToArray().ToUtf8().Decode64());
Magic Number,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,DecryptAes256,The following statement contains a magic number: return DecryptAes256(data' encryptionKey' mode' new byte[16]);
Magic Number,LastPass,Pbkdf2,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: var hashInputSize = salt.Length + 4;
Magic Number,LastPass,Pbkdf2,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: hashInput[hashInputSize - 4] = 0;
Magic Number,LastPass,Pbkdf2,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: hashInput[hashInputSize - 3] = 0;
Magic Number,LastPass,Pbkdf2,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: hashInput[hashInputSize - 2] = 0;
Magic Number,LastPass,Pbkdf2,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: var hashSize = hmac.HashSize / 8;
Magic Number,LastPass,Pbkdf2,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: ++hashInput[hashInputSize - 4];
Magic Number,LastPass,Pbkdf2,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Pbkdf2.cs,Generate,The following statement contains a magic number: ++hashInput[hashInputSize - 3] == 0
Magic Number,LastPass,Vault,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Vault.cs,GenerateRandomClientId,The following statement contains a magic number: var bytes = new byte[16];
Missing Default,LastPass,ParserHelper,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\ParserHelper.cs,ParseSecureNoteServer,The following switch statement is missing a default case: switch (keyValue[0])                  {                  case "NoteType":                      type = keyValue[1];                      break;                  case "Hostname":                      url = keyValue[1];                      break;                  case "Username":                      username = keyValue[1];                      break;                  case "Password":                      password = keyValue[1];                      break;                  }
Missing Default,LastPass,Vault,D:\research\architectureSmells\repos\detunized_lastpass-sharp\src\Vault.cs,ParseAccounts,The following switch statement is missing a default case: switch (i.Id)                  {                  case "ACCT":                      var account = ParserHelper.Parse_ACCT(                          i'                          folder == null ? encryptionKey : folder.EncryptionKey'                          folder);                        if (account != null)                          accounts.Add(account);                      break;                  case "SHAR":                      folder = ParserHelper.Parse_SHAR(i' encryptionKey' privateKey);                      break;                  }
