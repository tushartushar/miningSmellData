Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,Cyclomatic complexity of the method is 9
Complex Method,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Atan2,Cyclomatic complexity of the method is 8
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Abs,The following statement contains a magic number: var mask = value.m_rawValue >> 63;
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,FastAbs,The following statement contains a magic number: var mask = value.m_rawValue >> 63;
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,CountLeadingZeroes,The following statement contains a magic number: while ((x & 0xF000000000000000) == 0) { result += 4; x <<= 4; }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,CountLeadingZeroes,The following statement contains a magic number: while ((x & 0xF000000000000000) == 0) { result += 4; x <<= 4; }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: var bit = 1UL << (NUM_BITS - 2);
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: while (bit > num) {                  bit >>= 2;              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: for (var i = 0; i < 2; ++i) {                  // First we get the top 48 bits of the answer.                  while (bit != 0) {                      if (num >= result + bit) {                          num -= result + bit;                          result = (result >> 1) + bit;                      }                      else {                          result = result >> 1;                      }                      bit >>= 2;                  }                    if (i == 0) {                      // Then process it again to get the lowest 16 bits.                      if (num > (1UL << (NUM_BITS / 2)) - 1) {                          // The remainder 'num' is too large to be shifted left                          // by 32' so we have to add 1 to result manually and                          // adjust 'num' accordingly.                          // num = a - (result + 0.5)^2                          //       = num + result^2 - (result + 0.5)^2                          //       = num - result - 0.5                          num -= result;                          num = (num << (NUM_BITS / 2)) - 0x80000000UL;                          result = (result << (NUM_BITS / 2)) + 0x80000000UL;                      }                      else {                          num <<= (NUM_BITS / 2);                          result <<= (NUM_BITS / 2);                      }                        bit = 1UL << (NUM_BITS / 2 - 2);                  }              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: for (var i = 0; i < 2; ++i) {                  // First we get the top 48 bits of the answer.                  while (bit != 0) {                      if (num >= result + bit) {                          num -= result + bit;                          result = (result >> 1) + bit;                      }                      else {                          result = result >> 1;                      }                      bit >>= 2;                  }                    if (i == 0) {                      // Then process it again to get the lowest 16 bits.                      if (num > (1UL << (NUM_BITS / 2)) - 1) {                          // The remainder 'num' is too large to be shifted left                          // by 32' so we have to add 1 to result manually and                          // adjust 'num' accordingly.                          // num = a - (result + 0.5)^2                          //       = num + result^2 - (result + 0.5)^2                          //       = num - result - 0.5                          num -= result;                          num = (num << (NUM_BITS / 2)) - 0x80000000UL;                          result = (result << (NUM_BITS / 2)) + 0x80000000UL;                      }                      else {                          num <<= (NUM_BITS / 2);                          result <<= (NUM_BITS / 2);                      }                        bit = 1UL << (NUM_BITS / 2 - 2);                  }              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: for (var i = 0; i < 2; ++i) {                  // First we get the top 48 bits of the answer.                  while (bit != 0) {                      if (num >= result + bit) {                          num -= result + bit;                          result = (result >> 1) + bit;                      }                      else {                          result = result >> 1;                      }                      bit >>= 2;                  }                    if (i == 0) {                      // Then process it again to get the lowest 16 bits.                      if (num > (1UL << (NUM_BITS / 2)) - 1) {                          // The remainder 'num' is too large to be shifted left                          // by 32' so we have to add 1 to result manually and                          // adjust 'num' accordingly.                          // num = a - (result + 0.5)^2                          //       = num + result^2 - (result + 0.5)^2                          //       = num - result - 0.5                          num -= result;                          num = (num << (NUM_BITS / 2)) - 0x80000000UL;                          result = (result << (NUM_BITS / 2)) + 0x80000000UL;                      }                      else {                          num <<= (NUM_BITS / 2);                          result <<= (NUM_BITS / 2);                      }                        bit = 1UL << (NUM_BITS / 2 - 2);                  }              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: for (var i = 0; i < 2; ++i) {                  // First we get the top 48 bits of the answer.                  while (bit != 0) {                      if (num >= result + bit) {                          num -= result + bit;                          result = (result >> 1) + bit;                      }                      else {                          result = result >> 1;                      }                      bit >>= 2;                  }                    if (i == 0) {                      // Then process it again to get the lowest 16 bits.                      if (num > (1UL << (NUM_BITS / 2)) - 1) {                          // The remainder 'num' is too large to be shifted left                          // by 32' so we have to add 1 to result manually and                          // adjust 'num' accordingly.                          // num = a - (result + 0.5)^2                          //       = num + result^2 - (result + 0.5)^2                          //       = num - result - 0.5                          num -= result;                          num = (num << (NUM_BITS / 2)) - 0x80000000UL;                          result = (result << (NUM_BITS / 2)) + 0x80000000UL;                      }                      else {                          num <<= (NUM_BITS / 2);                          result <<= (NUM_BITS / 2);                      }                        bit = 1UL << (NUM_BITS / 2 - 2);                  }              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: for (var i = 0; i < 2; ++i) {                  // First we get the top 48 bits of the answer.                  while (bit != 0) {                      if (num >= result + bit) {                          num -= result + bit;                          result = (result >> 1) + bit;                      }                      else {                          result = result >> 1;                      }                      bit >>= 2;                  }                    if (i == 0) {                      // Then process it again to get the lowest 16 bits.                      if (num > (1UL << (NUM_BITS / 2)) - 1) {                          // The remainder 'num' is too large to be shifted left                          // by 32' so we have to add 1 to result manually and                          // adjust 'num' accordingly.                          // num = a - (result + 0.5)^2                          //       = num + result^2 - (result + 0.5)^2                          //       = num - result - 0.5                          num -= result;                          num = (num << (NUM_BITS / 2)) - 0x80000000UL;                          result = (result << (NUM_BITS / 2)) + 0x80000000UL;                      }                      else {                          num <<= (NUM_BITS / 2);                          result <<= (NUM_BITS / 2);                      }                        bit = 1UL << (NUM_BITS / 2 - 2);                  }              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: for (var i = 0; i < 2; ++i) {                  // First we get the top 48 bits of the answer.                  while (bit != 0) {                      if (num >= result + bit) {                          num -= result + bit;                          result = (result >> 1) + bit;                      }                      else {                          result = result >> 1;                      }                      bit >>= 2;                  }                    if (i == 0) {                      // Then process it again to get the lowest 16 bits.                      if (num > (1UL << (NUM_BITS / 2)) - 1) {                          // The remainder 'num' is too large to be shifted left                          // by 32' so we have to add 1 to result manually and                          // adjust 'num' accordingly.                          // num = a - (result + 0.5)^2                          //       = num + result^2 - (result + 0.5)^2                          //       = num - result - 0.5                          num -= result;                          num = (num << (NUM_BITS / 2)) - 0x80000000UL;                          result = (result << (NUM_BITS / 2)) + 0x80000000UL;                      }                      else {                          num <<= (NUM_BITS / 2);                          result <<= (NUM_BITS / 2);                      }                        bit = 1UL << (NUM_BITS / 2 - 2);                  }              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: for (var i = 0; i < 2; ++i) {                  // First we get the top 48 bits of the answer.                  while (bit != 0) {                      if (num >= result + bit) {                          num -= result + bit;                          result = (result >> 1) + bit;                      }                      else {                          result = result >> 1;                      }                      bit >>= 2;                  }                    if (i == 0) {                      // Then process it again to get the lowest 16 bits.                      if (num > (1UL << (NUM_BITS / 2)) - 1) {                          // The remainder 'num' is too large to be shifted left                          // by 32' so we have to add 1 to result manually and                          // adjust 'num' accordingly.                          // num = a - (result + 0.5)^2                          //       = num + result^2 - (result + 0.5)^2                          //       = num - result - 0.5                          num -= result;                          num = (num << (NUM_BITS / 2)) - 0x80000000UL;                          result = (result << (NUM_BITS / 2)) + 0x80000000UL;                      }                      else {                          num <<= (NUM_BITS / 2);                          result <<= (NUM_BITS / 2);                      }                        bit = 1UL << (NUM_BITS / 2 - 2);                  }              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: for (var i = 0; i < 2; ++i) {                  // First we get the top 48 bits of the answer.                  while (bit != 0) {                      if (num >= result + bit) {                          num -= result + bit;                          result = (result >> 1) + bit;                      }                      else {                          result = result >> 1;                      }                      bit >>= 2;                  }                    if (i == 0) {                      // Then process it again to get the lowest 16 bits.                      if (num > (1UL << (NUM_BITS / 2)) - 1) {                          // The remainder 'num' is too large to be shifted left                          // by 32' so we have to add 1 to result manually and                          // adjust 'num' accordingly.                          // num = a - (result + 0.5)^2                          //       = num + result^2 - (result + 0.5)^2                          //       = num - result - 0.5                          num -= result;                          num = (num << (NUM_BITS / 2)) - 0x80000000UL;                          result = (result << (NUM_BITS / 2)) + 0x80000000UL;                      }                      else {                          num <<= (NUM_BITS / 2);                          result <<= (NUM_BITS / 2);                      }                        bit = 1UL << (NUM_BITS / 2 - 2);                  }              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,Sqrt,The following statement contains a magic number: for (var i = 0; i < 2; ++i) {                  // First we get the top 48 bits of the answer.                  while (bit != 0) {                      if (num >= result + bit) {                          num -= result + bit;                          result = (result >> 1) + bit;                      }                      else {                          result = result >> 1;                      }                      bit >>= 2;                  }                    if (i == 0) {                      // Then process it again to get the lowest 16 bits.                      if (num > (1UL << (NUM_BITS / 2)) - 1) {                          // The remainder 'num' is too large to be shifted left                          // by 32' so we have to add 1 to result manually and                          // adjust 'num' accordingly.                          // num = a - (result + 0.5)^2                          //       = num + result^2 - (result + 0.5)^2                          //       = num - result - 0.5                          num -= result;                          num = (num << (NUM_BITS / 2)) - 0x80000000UL;                          result = (result << (NUM_BITS / 2)) + 0x80000000UL;                      }                      else {                          num <<= (NUM_BITS / 2);                          result <<= (NUM_BITS / 2);                      }                        bit = 1UL << (NUM_BITS / 2 - 2);                  }              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,FastSin,The following statement contains a magic number: var rawIndex = (uint)(clampedL >> 15);
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,GenerateSinLut,The following statement contains a magic number: using (var writer = new StreamWriter("Fix64SinLut.cs")) {                  writer.Write(  @"namespace FixMath.NET {      partial struct Fix64 {          public static readonly long[] SinLut = new[] {");                  int lineCounter = 0;                  for (int i = 0; i < LUT_SIZE; ++i) {                      var angle = i * Math.PI * 0.5 / (LUT_SIZE - 1);                      if (lineCounter++ % 8 == 0) {                          writer.WriteLine();                          writer.Write("            ");                      }                      var sin = Math.Sin(angle);                      var rawValue = ((Fix64)sin).m_rawValue;                      writer.Write(string.Format("0x{0:X}L' "' rawValue));                  }                  writer.Write(  @"          };      }  }");              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,GenerateSinLut,The following statement contains a magic number: using (var writer = new StreamWriter("Fix64SinLut.cs")) {                  writer.Write(  @"namespace FixMath.NET {      partial struct Fix64 {          public static readonly long[] SinLut = new[] {");                  int lineCounter = 0;                  for (int i = 0; i < LUT_SIZE; ++i) {                      var angle = i * Math.PI * 0.5 / (LUT_SIZE - 1);                      if (lineCounter++ % 8 == 0) {                          writer.WriteLine();                          writer.Write("            ");                      }                      var sin = Math.Sin(angle);                      var rawValue = ((Fix64)sin).m_rawValue;                      writer.Write(string.Format("0x{0:X}L' "' rawValue));                  }                  writer.Write(  @"          };      }  }");              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,GenerateTanLut,The following statement contains a magic number: using (var writer = new StreamWriter("Fix64TanLut.cs")) {                  writer.Write(  @"namespace FixMath.NET {      partial struct Fix64 {          public static readonly long[] TanLut = new[] {");                  int lineCounter = 0;                  for (int i = 0; i < LUT_SIZE; ++i) {                      var angle = i * Math.PI * 0.5 / (LUT_SIZE - 1);                      if (lineCounter++ % 8 == 0) {                          writer.WriteLine();                          writer.Write("            ");                      }                      var tan = Math.Tan(angle);                      if (tan > (double)MaxValue || tan < 0.0) {                          tan = (double)MaxValue;                      }                      var rawValue = (((decimal)tan > (decimal)MaxValue || tan < 0.0) ? MaxValue : (Fix64)tan).m_rawValue;                      writer.Write(string.Format("0x{0:X}L' "' rawValue));                  }                  writer.Write(  @"          };      }  }");              }
Magic Number,FixMath.NET,Fix64,C:\repos\asik_FixedMath.Net\src\Fix64.cs,GenerateTanLut,The following statement contains a magic number: using (var writer = new StreamWriter("Fix64TanLut.cs")) {                  writer.Write(  @"namespace FixMath.NET {      partial struct Fix64 {          public static readonly long[] TanLut = new[] {");                  int lineCounter = 0;                  for (int i = 0; i < LUT_SIZE; ++i) {                      var angle = i * Math.PI * 0.5 / (LUT_SIZE - 1);                      if (lineCounter++ % 8 == 0) {                          writer.WriteLine();                          writer.Write("            ");                      }                      var tan = Math.Tan(angle);                      if (tan > (double)MaxValue || tan < 0.0) {                          tan = (double)MaxValue;                      }                      var rawValue = (((decimal)tan > (decimal)MaxValue || tan < 0.0) ? MaxValue : (Fix64)tan).m_rawValue;                      writer.Write(string.Format("0x{0:X}L' "' rawValue));                  }                  writer.Write(  @"          };      }  }");              }
