Implementation smell,Namespace,Class,File,Method,Description
Long Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The method has 211 lines of code.
Long Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,The method has 133 lines of code.
Long Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The method has 109 lines of code.
Long Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,WriteSchema,The method has 115 lines of code.
Long Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TrySerializeAuxiliaryType,The method has 115 lines of code.
Long Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TryDeserializeAuxiliaryType,The method has 125 lines of code.
Long Method,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The method has 129 lines of code.
Complex Method,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,WriteTimeSpan,Cyclomatic complexity of the method is 25
Complex Method,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,WriteDateTime,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadTimeSpanTicks,Cyclomatic complexity of the method is 12
Complex Method,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadDecimal,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadGuid,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadNetObject,Cyclomatic complexity of the method is 50
Complex Method,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,WriteNetObject,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf,Helpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Helpers.cs,GetTypeCode,Cyclomatic complexity of the method is 16
Complex Method,ProtoBuf,NetObjectCache,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\NetObjectCache.cs,SetKeyedObject,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf,NetObjectCache,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\NetObjectCache.cs,AddObjectKey,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,Cyclomatic complexity of the method is 11
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,Ensure,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,Cyclomatic complexity of the method is 12
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,EndSubItem,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,StartSubItem,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,Cyclomatic complexity of the method is 38
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,AppendBytes,Cyclomatic complexity of the method is 14
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,Cyclomatic complexity of the method is 21
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,Seek,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,AppendExtensionField,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteObject,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteFieldHeader,Cyclomatic complexity of the method is 22
Complex Method,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteBytes,Cyclomatic complexity of the method is 19
Complex Method,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,StartSubItem,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,Cyclomatic complexity of the method is 32
Complex Method,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteUInt64,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,Cyclomatic complexity of the method is 24
Complex Method,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteUInt32,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,Cyclomatic complexity of the method is 23
Complex Method,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteDouble,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,BuildSerializer,Cyclomatic complexity of the method is 18
Complex Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,Cyclomatic complexity of the method is 54
Complex Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour_AddMembers,Cyclomatic complexity of the method is 11
Complex Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,GetContractFamily,Cyclomatic complexity of the method is 18
Complex Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ResolveTupleConstructor,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,Cyclomatic complexity of the method is 23
Complex Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,Cyclomatic complexity of the method is 56
Complex Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,AddField,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ResolveListTypes,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,WriteSchema,Cyclomatic complexity of the method is 22
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchema,Cyclomatic complexity of the method is 19
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,CascadeDependents,Cyclomatic complexity of the method is 23
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,FindOrAddAuto,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,ResolveListTypes,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchemaTypeName,Cyclomatic complexity of the method is 34
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,GetWireType,Cyclomatic complexity of the method is 21
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TrySerializeAuxiliaryType,Cyclomatic complexity of the method is 55
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeWithLengthPrefix,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,SerializeWithLengthPrefix,Cyclomatic complexity of the method is 14
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,ResolveListAdd,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,GetListItemType,Cyclomatic complexity of the method is 14
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TryDeserializeList,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,CreateListInstance,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TryDeserializeAuxiliaryType,Cyclomatic complexity of the method is 79
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeepClone,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,CanSerialize,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,ParseDefaultValue,Cyclomatic complexity of the method is 23
Complex Method,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,BuildSerializer,Cyclomatic complexity of the method is 12
Complex Method,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,Cyclomatic complexity of the method is 57
Complex Method,ProtoBuf.Serializers,ImmutableCollectionDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ImmutableCollectionDecorator.cs,IdentifyImmutable,Cyclomatic complexity of the method is 15
Complex Method,ProtoBuf.Serializers,ListDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ListDecorator.cs,ListDecorator,Cyclomatic complexity of the method is 14
Complex Method,ProtoBuf.Serializers,ListDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ListDecorator.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Serializers,TupleSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\TupleSerializer.cs,TupleSerializer,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Serializers,EnumSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\EnumSerializer.cs,EnumSerializer,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Serializers,SurrogateSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\SurrogateSerializer.cs,HasCast,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Serializers,TypeSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\TypeSerializer.cs,TypeSerializer,Cyclomatic complexity of the method is 11
Complex Method,ProtoBuf.Serializers,TypeSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\TypeSerializer.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,ProtoBuf.Serializers,TypeSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\TypeSerializer.cs,InvokeCallback,Cyclomatic complexity of the method is 14
Long Parameter List,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadNetObject,The method has 5 parameters.
Long Parameter List,ProtoBuf,Extensible,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Extensible.cs,TryGetValue,The method has 5 parameters.
Long Parameter List,ProtoBuf,Extensible,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Extensible.cs,TryGetValue,The method has 7 parameters.
Long Parameter List,ProtoBuf,Extensible,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Extensible.cs,GetValues,The method has 5 parameters.
Long Parameter List,ProtoBuf,Extensible,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Extensible.cs,AppendValue,The method has 5 parameters.
Long Parameter List,ProtoBuf,ExtensibleUtil,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ExtensibleUtil.cs,GetExtendedValues,The method has 5 parameters.
Long Parameter List,ProtoBuf,ExtensibleUtil,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ExtensibleUtil.cs,GetExtendedValues,The method has 7 parameters.
Long Parameter List,ProtoBuf,ExtensibleUtil,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ExtensibleUtil.cs,AppendExtendValue,The method has 5 parameters.
Long Parameter List,ProtoBuf,Helpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Helpers.cs,BlockCopy,The method has 5 parameters.
Long Parameter List,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,Init,The method has 5 parameters.
Long Parameter List,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The method has 5 parameters.
Long Parameter List,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteObject,The method has 5 parameters.
Long Parameter List,ProtoBuf,Serializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializer.cs,TryReadLengthPrefix,The method has 5 parameters.
Long Parameter List,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour_AddMembers,The method has 13 parameters.
Long Parameter List,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,CheckForCallback,The method has 5 parameters.
Long Parameter List,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,The method has 8 parameters.
Long Parameter List,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,AddField,The method has 5 parameters.
Long Parameter List,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchemaTypeName,The method has 5 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TrySerializeAuxiliaryType,The method has 6 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeWithLengthPrefix,The method has 5 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeWithLengthPrefix,The method has 6 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeWithLengthPrefix,The method has 7 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeWithLengthPrefix,The method has 9 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeItems,The method has 5 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeItems,The method has 6 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,SerializeWithLengthPrefix,The method has 5 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,SerializeWithLengthPrefix,The method has 6 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,Deserialize,The method has 5 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TryDeserializeList,The method has 7 parameters.
Long Parameter List,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TryDeserializeAuxiliaryType,The method has 9 parameters.
Long Parameter List,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,ValueMember,The method has 9 parameters.
Long Parameter List,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,ValueMember,The method has 6 parameters.
Long Parameter List,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The method has 8 parameters.
Long Parameter List,ProtoBuf.Serializers,ArrayDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ArrayDecorator.cs,ArrayDecorator,The method has 8 parameters.
Long Parameter List,ProtoBuf.Serializers,ImmutableCollectionDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ImmutableCollectionDecorator.cs,IdentifyImmutable,The method has 6 parameters.
Long Parameter List,ProtoBuf.Serializers,ImmutableCollectionDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ImmutableCollectionDecorator.cs,ImmutableCollectionDecorator,The method has 14 parameters.
Long Parameter List,ProtoBuf.Serializers,ListDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ListDecorator.cs,Create,The method has 10 parameters.
Long Parameter List,ProtoBuf.Serializers,ListDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ListDecorator.cs,ListDecorator,The method has 10 parameters.
Long Parameter List,ProtoBuf.Serializers,SurrogateSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\SurrogateSerializer.cs,HasCast,The method has 5 parameters.
Long Parameter List,ProtoBuf.Serializers,PropertyDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\PropertyDecorator.cs,SanityCheck,The method has 6 parameters.
Long Parameter List,ProtoBuf.Serializers,TypeSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\TypeSerializer.cs,TypeSerializer,The method has 10 parameters.
Long Statement,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadGuid,The length of the statement  "	return new Guid ((int)b' (short)a' (short)(a >> 16)' (byte)d' (byte)(d >> 8)' (byte)(d >> 16)' (byte)(d >> 24)' (byte)c' (byte)(c >> 8)' (byte)(c >> 16)' (byte)(c >> 24)); " is 171.
Long Statement,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadNetObject,The length of the statement  "				throw new ProtoException ("Unable to resolve type: " + typeName + " (you can use the TypeModel.DynamicTypeFormatting event to provide a custom mapping)"); " is 154.
Long Statement,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,WriteNetObject,The length of the statement  "	bool dynamicType = (options & NetObjectOptions.DynamicType) != 0' asReference = (options & NetObjectOptions.AsReference) != 0; " is 126.
Long Statement,ProtoBuf,ExtensibleUtil,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ExtensibleUtil.cs,GetExtendedValues,The length of the statement  "	foreach (TValue value in GetExtendedValues (RuntimeTypeModel.Default' typeof(TValue)' instance' tag' format' singleton' allowDefinedTag)) { " is 139.
Long Statement,ProtoBuf,ExtensibleUtil,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ExtensibleUtil.cs,GetExtendedValues,The length of the statement  "		while (model.TryDeserializeAuxiliaryType (reader' format' tag' type' ref value' true' false' false' false) && value != null) { " is 126.
Long Statement,ProtoBuf,Helpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Helpers.cs,GetInstanceMethod,The length of the statement  "	return declaringType.GetMethod (name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' types' null); " is 127.
Long Statement,ProtoBuf,Helpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Helpers.cs,GetConstructor,The length of the statement  "	return type.GetConstructor (nonPublic ? BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic : BindingFlags.Instance | BindingFlags.Public' null' parameterTypes' null); " is 184.
Long Statement,ProtoBuf,Helpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Helpers.cs,GetConstructors,The length of the statement  "	return type.GetConstructors (nonPublic ? BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic : BindingFlags.Instance | BindingFlags.Public); " is 157.
Long Statement,ProtoBuf,Helpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Helpers.cs,GetProperty,The length of the statement  "	return type.GetProperty (name' nonPublic ? BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic : BindingFlags.Instance | BindingFlags.Public); " is 159.
Long Statement,ProtoBuf,Helpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Helpers.cs,GetInstanceFieldsAndProperties,The length of the statement  "	BindingFlags flags = publicOnly ? BindingFlags.Public | BindingFlags.Instance : BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic; " is 149.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The length of the statement  "	&& (chunk & 0xF0) == 0xF0 && available >= 10 && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0x01) { " is 207.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The length of the statement  "		return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24); " is 152.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The length of the statement  "		return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24); " is 148.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The length of the statement  "		return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56); " is 308.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ThrowEnumException,The length of the statement  "	throw AddErrorData (new ProtoException ("No " + desc + " enum is mapped to the wire-value " + value.ToString ())' this); " is 120.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,CreateWireTypeException,The length of the statement  "	return CreateException ("Invalid wire-type; this usually means you have over-written a file without truncating or setting the length; see http://stackoverflow.com/q/2152978/23354"); " is 181.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadTypedObject,The length of the statement  "		throw AddErrorData (new InvalidOperationException ("Cannot deserialize sub-objects unless a model is provided")' reader); " is 121.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadTypedObject,The length of the statement  "	else if (type != null && reader.model.TryDeserializeAuxiliaryType (reader' DataFormat.Default' Serializer.ListItemTag' type' ref value' true' false' true' false)) { " is 164.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The length of the statement  "		return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56); " is 316.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,DirectReadLittleEndianInt32,The length of the statement  "	return ReadByteOrThrow (source) | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24); " is 136.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,DirectReadBigEndianInt32,The length of the statement  "	return (ReadByteOrThrow (source) << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source); " is 136.
Long Statement,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,AddErrorData,The length of the statement  "		exception.Data.Add ("protoSource"' string.Format ("tag={0}; wire-type={1}; offset={2}; depth={3}"' source.fieldNumber' source.wireType' source.position' source.depth)); " is 168.
Long Statement,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteObject,The length of the statement  "	else if (writer.model != null && writer.model.TrySerializeAuxiliaryType (writer' value.GetType ()' DataFormat.Default' Serializer.ListItemTag' value' false)) { " is 159.
Long Statement,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteObject,The length of the statement  "		if (!writer.model.TrySerializeAuxiliaryType (writer' value.GetType ()' DataFormat.Default' Serializer.ListItemTag' value' false)) { " is 131.
Long Statement,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteFieldHeader,The length of the statement  "		throw new InvalidOperationException ("Cannot write a " + wireType.ToString () + " header until the " + writer.wireType.ToString () + " data has been written"); " is 159.
Long Statement,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteFieldHeader,The length of the statement  "		throw new InvalidOperationException ("Field mismatch during packed encoding; expected " + writer.packedFieldNumber.ToString () + " but received " + fieldNumber.ToString ()); " is 173.
Long Statement,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,CheckRecursionStackAndPush,The length of the statement  "		throw new ProtoException ("Possible recursion detected (offset: " + (recursionStack.Count - hitLevel).ToString () + " level(s)): " + instance.ToString ()); " is 155.
Long Statement,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,ThrowEnumException,The length of the statement  "	throw new ProtoException ("No wire-value is mapped to the enum " + rhs + " at position " + writer.position.ToString ()); " is 120.
Long Statement,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,CreateException,The length of the statement  "	return new ProtoException ("Invalid serialization operation with wire-type " + writer.wireType.ToString () + " at position " + writer.position.ToString ()); " is 156.
Long Statement,ProtoBuf.Meta,AttributeMap,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\AttributeMap.cs,Create,The length of the statement  "	            System.Collections.Generic.IList<CustomAttributeData> all = member.__GetCustomAttributes(model.MapType(typeof(Attribute))' inherit);" is 132.
Long Statement,ProtoBuf.Meta,AttributeMap,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\AttributeMap.cs,Create,The length of the statement  "            System.Collections.Generic.IList<CustomAttributeData> all = assembly.__GetCustomAttributes(model.MapType(typeof(Attribute))' inherit);" is 134.
Long Statement,ProtoBuf.Meta,CallbackSet,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\CallbackSet.cs,CreateInvalidCallbackSignature,The length of the statement  "	return new NotSupportedException ("Invalid callback signature in " + method.DeclaringType.FullName + "." + method.Name); " is 120.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,GetSchemaTypeName,The length of the statement  "			if (key >= 0 && (mt = model [tmp]) != null && mt.surrogate == null)// <=== need to exclude surrogate to avoid chance of infinite loop " is 133.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,InbuiltType,The length of the statement  "	return new ArgumentException ("Data of this type has inbuilt behaviour' and cannot be added to a model in this way: " + type.FullName); " is 135.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ThrowIfFrozen,The length of the statement  "		throw new InvalidOperationException ("The type cannot be changed once a serializer has been generated for " + type.FullName); " is 125.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,BuildSerializer,The length of the statement  "		return new TagDecorator (ProtoBuf.Serializer.ListItemTag' WireType.Variant' false' new EnumSerializer (type' GetEnumMap ())); " is 125.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,BuildSerializer,The length of the statement  "			throw new ArgumentException ("Repeated data (a list' collection' etc) has inbuilt behaviour and cannot use a surrogate"); " is 121.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,BuildSerializer,The length of the statement  "		ValueMember fakeMember = new ValueMember (model' ProtoBuf.Serializer.ListItemTag' type' itemType' defaultType' DataFormat.Default); " is 131.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,BuildSerializer,The length of the statement  "				throw new ArgumentException ("Repeated data (a list' collection' etc) has inbuilt behaviour and cannot be used as a subclass"); " is 127.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,BuildSerializer,The length of the statement  "	return new TypeSerializer (model' type' fieldNumbers' serializers' arr' baseType == null' UseConstructor' callbacks' constructType' factory); " is 141.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "	if (baseType != null && model.FindWithoutAdd (baseType) == null && GetContractFamily (model' baseType' null) != MetaType.AttributeFamily.None) { " is 144.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "				// IKVM can't access EnumPassthruHasValue' but conveniently' InferTagFromName will only be returned if set via ctor or property " is 127.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "				// IKVM can't access InferTagFromNameHasValue' but conveniently' InferTagFromName will only be returned if set via ctor or property " is 131.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "	MemberInfo[] foundList = type.GetMembers (isEnum ? BindingFlags.Public | BindingFlags.Static : BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance); " is 165.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "			ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType); " is 188.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "			ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType); " is 188.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "		SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7)); " is 126.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour_AddMembers,The length of the statement  "		ProtoMemberAttribute normalizedAttribute = NormalizeProtoMember (model' member' family' forced' isEnum' partialMembers' dataMemberOffset' inferTagByName); " is 154.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,The length of the statement  "	bool isPacked = false' ignore = false' done = false' isRequired = false' asReference = false' asReferenceHasValue = false' dynamicType = false' tagIsPinned = false' overwriteList = false; " is 187.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,The length of the statement  "			// IKVM can't access AsReferenceHasValue' but conveniently' AsReference will only be returned if set via ctor or property " is 121.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,The length of the statement  "					// IKVM can't access AsReferenceHasValue' but conveniently' AsReference will only be returned if set via ctor or property " is 121.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "	ValueMember vm = ((isEnum || normalizedAttribute.Tag > 0)) ? new ValueMember (model' type' normalizedAttribute.Tag' member' effectiveType' itemType' defaultType' normalizedAttribute.DataFormat' defaultValue) : null; " is 215.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,SetSurrogate,The length of the statement  "			throw new ArgumentException ("Repeated data (a list' collection' etc) has inbuilt behaviour and cannot be used as a surrogate"); " is 128.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,AddField,The length of the statement  "	            mi = Helpers.IsEnum(type) ? type.GetTypeInfo().GetDeclaredField(memberName) : Helpers.GetInstanceMember(type.GetTypeInfo()' memberName);" is 136.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,AddField,The length of the statement  "	MemberInfo[] members = type.GetMember (memberName' Helpers.IsEnum (type) ? BindingFlags.Static | BindingFlags.Public : BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 189.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,AddField,The length of the statement  "	ValueMember newField = new ValueMember (model' type' fieldNumber' mi' miType' itemType' defaultType' DataFormat.Default' defaultValue); " is 135.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ResolveListTypes,The length of the statement  "                            && itemType == typeof(System.Collections.Generic.KeyValuePair<'>).MakeGenericType(genArgs = typeInfo.GenericTypeArguments))" is 123.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ResolveListTypes,The length of the statement  "				if (type.IsGenericType && type.GetGenericTypeDefinition () == model.MapType (typeof(System.Collections.Generic.IDictionary<' >)) && itemType == model.MapType (typeof(System.Collections.Generic.KeyValuePair<' >)).MakeGenericType (genArgs = type.GetGenericArguments ())) " is 268.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,WriteSchema,The length of the statement  "		string itemTypeName = model.GetSchemaTypeName (TypeModel.GetListItemType (model' type)' DataFormat.Default' false' false' ref requiresBclImport); " is 145.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,WriteSchema,The length of the statement  "				NewLine (builder' indent + 1).Append ("optional ").Append (model.GetSchemaTypeName (effectiveType' DataFormat.Default' false' false' ref requiresBclImport).Replace ('.'' '_')).Append (' ').Append (mapping [i].Name).Append (" = ").Append (i + 1).Append (';'); " is 258.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,WriteSchema,The length of the statement  "			if (schemaTypeName == "bcl.NetObjectProxy" && member.AsReference && !member.DynamicType)// we know what it is; tell the user " is 124.
Long Statement,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,WriteSchema,The length of the statement  "				NewLine (builder' indent + 1).Append ("optional ").Append (subTypeName).Append (" ").Append (subTypeName).Append (" = ").Append (subType.FieldNumber).Append (';'); " is 163.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchema,The length of the statement  "		isInbuiltType = (ValueMember.TryGetCoreSerializer (this' DataFormat.Default' type' out defaultWireType' false' false' false' false) != null); " is 141.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchema,The length of the statement  "		MetaType.NewLine (bodyBuilder' 1).Append ("optional ").Append (GetSchemaTypeName (type' DataFormat.Default' false' false' ref requiresBclImport)).Append (" value = 1;"); " is 169.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,CascadeDependents,The length of the statement  "		IProtoSerializer coreSerializer = ValueMember.TryGetCoreSerializer (this' DataFormat.Default' itemType' out defaultWireType' false' false' false' false); " is 153.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,CascadeDependents,The length of the statement  "					IProtoSerializer coreSerializer = ValueMember.TryGetCoreSerializer (this' DataFormat.Default' type' out defaultWireType' false' false' false' false); " is 149.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,CascadeDependents,The length of the statement  "				IProtoSerializer coreSerializer = ValueMember.TryGetCoreSerializer (this' DataFormat.Default' type' out defaultWireType' false' false' false' false); " is 149.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,TryGetBasicTypeSerializer,The length of the statement  "		IProtoSerializer ser = family == MetaType.AttributeFamily.None ? ValueMember.TryGetCoreSerializer (this' DataFormat.Default' type' out defaultWireType' false' false' false' false) : null; " is 187.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,RecogniseCommonTypes,The length of the statement  "	//            if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(System.Collections.Generic.KeyValuePair<'>)) " is 126.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,RecogniseCommonTypes,The length of the statement  "	//                MetaType surrogateMeta = (MetaType)types[FindOrAddAuto(surrogate' true' true' true)]; // this forcibly adds it if needed " is 138.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,Add,The length of the statement  "		throw new ArgumentException ("IEnumerable[<T>] data cannot be used as a meta-type unless an Add method can be resolved"); " is 121.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,Add,The length of the statement  "				throw new ArgumentException ("Default behaviour must be observed for certain types with special handling; " + type.FullName' "applyDefaultBehaviour"); " is 150.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,TakeLock,The length of the statement  "	const string message = "Timeout while inspecting metadata; this may indicate a deadlock. This can often be avoided by preparing necessary serializers during application initialization' rather than allowing multiple threads to perform the initial metadata inspection; please also see the LockContended event"; " is 308.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,TakeLock,The length of the statement  "	            if(!Monitor.TryEnter(types)) throw new TimeoutException(message); // yes' we have to do this immediately - I'm not creating a "hot" loop' just because Sleep() doesn't exist..." is 175.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,ReleaseLock,The length of the statement  "				// not hugely elegant' but this is such a far-corner-case that it doesn't need to be slick - I'll settle for cross-platform " is 123.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,ResolveListTypes,The length of the statement  "                            && itemType == typeof(System.Collections.Generic.KeyValuePair<'>).MakeGenericType(genArgs = typeInfo.GenericTypeArguments))" is 123.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,ResolveListTypes,The length of the statement  "				if (type.IsGenericType && type.GetGenericTypeDefinition () == MapType (typeof(System.Collections.Generic.IDictionary<' >)) && itemType == MapType (typeof(System.Collections.Generic.KeyValuePair<' >)).MakeGenericType (genArgs = type.GetGenericArguments ())) " is 256.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchemaTypeName,The length of the statement  "	IProtoSerializer ser = ValueMember.TryGetCoreSerializer (this' dataFormat' effectiveType' out wireType' false' false' false' false); " is 132.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,VerifyFactory,The length of the statement  "			throw new ArgumentException ("The factory-method must return object" + (type == null ? "" : (" or " + type.FullName))' "factory"); " is 130.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,VerifyFactory,The length of the statement  "			throw new ArgumentException ("Invalid factory signature in " + factory.DeclaringType.FullName + "." + factory.Name' "factory"); " is 127.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeWithLengthPrefix,The length of the statement  "	return DeserializeWithLengthPrefix (source' value' type' style' expectedField' resolver' out bytesRead' out haveObject' null); " is 126.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeWithLengthPrefix,The length of the statement  "		throw new InvalidOperationException ("A type must be provided unless base-128 prefixing is being used in combination with a resolver"); " is 135.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeWithLengthPrefix,The length of the statement  "			if (!(TryDeserializeAuxiliaryType (reader' DataFormat.Default' Serializer.ListItemTag' type' ref value' true' false' true' false) || len == 0)) { " is 145.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeCore,The length of the statement  "	TryDeserializeAuxiliaryType (reader' DataFormat.Default' Serializer.ListItemTag' type' ref value' true' false' noAutoCreate' false); " is 132.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,ResolveListAdd,The length of the statement  "		bool forceList = listTypeInfo.IsInterface && listTypeInfo == model.MapType (typeof(System.Collections.Generic.IEnumerable<>)).MakeGenericType (types) " is 149.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,ResolveListAdd,The length of the statement  "			if (interfaceType.Name == "IProducerConsumerCollection`1" && interfaceType.IsGenericType && interfaceType.GetGenericTypeDefinition ().FullName == "System.Collections.Concurrent.IProducerConsumerCollection`1") { " is 210.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,GetListItemType,The length of the statement  "	if (listType == model.MapType (typeof(string)) || listType.IsArray || !model.MapType (typeof(IEnumerable)).IsAssignableFrom (listType)) " is 135.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,GetListItemType,The length of the statement  "	foreach (PropertyInfo indexer in listType.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)) { " is 129.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TestEnumerableListPatterns,The length of the statement  "                if(typeDef == typeof(System.Collections.Generic.ICollection<>) || typeDef.GetTypeInfo().FullName == "System.Collections.Concurrent.IProducerConsumerCollection`1")" is 162.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TestEnumerableListPatterns,The length of the statement  "		if (typeDef == model.MapType (typeof(System.Collections.Generic.IEnumerable<>)) || typeDef == model.MapType (typeof(System.Collections.Generic.ICollection<>)) || typeDef.FullName == "System.Collections.Concurrent.IProducerConsumerCollection`1") { " is 246.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,CheckDictionaryAccessors,The length of the statement  "            return finalType.IsGenericType && finalType.GetGenericTypeDefinition() == typeof(System.Collections.Generic.KeyValuePair<'>)" is 124.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,CheckDictionaryAccessors,The length of the statement  "	return pair.IsGenericType && pair.GetGenericTypeDefinition () == model.MapType (typeof(System.Collections.Generic.KeyValuePair<' >)) && pair.GetGenericArguments () [1] == value; " is 177.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,CreateListInstance,The length of the statement  "                    if (finalType.IsGenericType && finalType.GetGenericTypeDefinition() == typeof(System.Collections.Generic.IDictionary<'>))" is 121.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,CreateListInstance,The length of the statement  "			if (listType.IsGenericType && listType.GetGenericTypeDefinition () == typeof(System.Collections.Generic.IDictionary<' >)) { " is 123.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TryDeserializeAuxiliaryType,The length of the statement  "			throw ProtoReader.AddErrorData (new InvalidOperationException ("Expected field " + tag.ToString () + "' but found " + fieldNumber.ToString ())' reader); " is 152.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeepClone,The length of the statement  "	else if (GetWireType (Helpers.GetTypeCode (type)' DataFormat.Default' ref type' out modelKey) != WireType.None && modelKey < 0) { " is 129.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeepClone,The length of the statement  "			TryDeserializeAuxiliaryType (reader' DataFormat.Default' Serializer.ListItemTag' type' ref value' true' false' true' false); " is 124.
Long Statement,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,ThrowUnexpectedType,The length of the statement  "			throw new InvalidOperationException ("Are you mixing protobuf-net and protobuf-csharp-port? See http://stackoverflow.com/q/11564914; type: " + fullName); " is 153.
Long Statement,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,SetSpecified,The length of the statement  "		if (getSpecified.ReturnType != model.MapType (typeof(bool)) || getSpecified.IsStatic || getSpecified.GetParameters ().Length != 0) { " is 132.
Long Statement,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,SetSpecified,The length of the statement  "		if (setSpecified.ReturnType != model.MapType (typeof(void)) || setSpecified.IsStatic || (args = setSpecified.GetParameters ()).Length != 1 || args [0].ParameterType != model.MapType (typeof(bool))) { " is 199.
Long Statement,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,BuildSerializer,The length of the statement  "		IProtoSerializer ser = TryGetCoreSerializer (model' dataFormat' finalType' out wireType' asReference' dynamicType' OverwriteList' true); " is 136.
Long Statement,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,BuildSerializer,The length of the statement  "			Helpers.DebugAssert (underlyingItemType == ser.ExpectedType' "Wrong type in the tail; expected {0}' received {1}"' ser.ExpectedType' underlyingItemType); " is 153.
Long Statement,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,BuildSerializer,The length of the statement  "				ser = ListDecorator.Create (model' memberType' defaultType' ser' fieldNumber' IsPacked' wireType' member != null && PropertyDecorator.CanWrite (model' member)' OverwriteList' SupportNull); " is 188.
Long Statement,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,GetSchemaTypeName,The length of the statement  "	return model.GetSchemaTypeName (effectiveType' DataFormat' applyNetObjectProxy && asReference' applyNetObjectProxy && dynamicType' ref requiresBclImport); " is 154.
Long Statement,ProtoBuf.Serializers,ImmutableCollectionDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ImmutableCollectionDecorator.cs,IdentifyImmutable,The length of the statement  "	// try to detect immutable collections; firstly' they are all generic' and all implement IReadOnlyCollection<T> for some T " is 122.
Long Statement,ProtoBuf.Serializers,ImmutableCollectionDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ImmutableCollectionDecorator.cs,IdentifyImmutable,The length of the statement  "		if (!method.IsStatic || method.Name != "CreateBuilder" || !method.IsGenericMethodDefinition || method.GetParameters ().Length != 0 || method.GetGenericArguments ().Length != typeArgs.Length) " is 190.
Long Statement,ProtoBuf.Serializers,ParseableSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ParseableSerializer.cs,TryCreate,The length of the statement  "	#            foreach (MethodInfo tmp in type.GetMethods(BindingFlags.Public | BindingFlags.Static | BindingFlags.DeclaredOnly))" is 127.
Long Statement,ProtoBuf.Serializers,ParseableSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ParseableSerializer.cs,TryCreate,The length of the statement  "                if (tmp.Name == "Parse" && tmp.IsPublic && tmp.IsStatic && tmp.DeclaringType == type && (p = tmp.GetParameters()) != null && p.Length == 1 && p[0].ParameterType == typeof(string))" is 179.
Long Statement,ProtoBuf.Serializers,ParseableSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ParseableSerializer.cs,TryCreate,The length of the statement  "	MethodInfo method = type.GetMethod ("Parse"' BindingFlags.Public | BindingFlags.Static | BindingFlags.DeclaredOnly' null' new Type[] { " is 134.
Long Statement,ProtoBuf.Serializers,ParseableSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ParseableSerializer.cs,GetCustomToString,The length of the statement  "	return type.GetMethod ("ToString"' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly' null' Helpers.EmptyTypes' null); " is 140.
Long Statement,ProtoBuf.Serializers,ListDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ListDecorator.cs,Create,The length of the statement  "	if (returnList && ImmutableCollectionDecorator.IdentifyImmutable (model' declaredType' out builderFactory' out add' out addRange' out finish)) { " is 144.
Long Statement,ProtoBuf.Serializers,ListDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ListDecorator.cs,Create,The length of the statement  "		return new ImmutableCollectionDecorator (model' declaredType' concreteType' tail' fieldNumber' writePacked' packedWireType' returnList' overwriteList' supportNull' builderFactory' add' addRange' finish); " is 203.
Long Statement,ProtoBuf.Serializers,ListDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ListDecorator.cs,Create,The length of the statement  "	return new ListDecorator (model' declaredType' concreteType' tail' fieldNumber' writePacked' packedWireType' returnList' overwriteList' supportNull); " is 149.
Long Statement,ProtoBuf.Serializers,ListDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ListDecorator.cs,GetEnumeratorInfo,The length of the statement  "		if (moveNext != null && moveNext.ReturnType == model.MapType (typeof(bool)) && current != null && current.ReturnType == itemType) { " is 131.
Long Statement,ProtoBuf.Serializers,SurrogateSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\SurrogateSerializer.cs,GetConversion,The length of the statement  "	throw new InvalidOperationException ("No suitable conversion operator found for surrogate: " + forType.FullName + " / " + declaredType.FullName); " is 145.
Long Statement,ProtoBuf.Serializers,PropertyDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\PropertyDecorator.cs,SanityCheck,The length of the statement  "	writeValue = tail.ReturnsValue && (GetShadowSetter (model' property) != null || (property.CanWrite && Helpers.GetSetMethod (property' nonPublic' allowInternal) != null)); " is 170.
Long Statement,ProtoBuf.Serializers,PropertyDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\PropertyDecorator.cs,SanityCheck,The length of the statement  "		throw new InvalidOperationException ("Cannot apply changes to property " + property.DeclaringType.FullName + "." + property.Name); " is 130.
Long Statement,ProtoBuf.Serializers,PropertyDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\PropertyDecorator.cs,GetShadowSetter,The length of the statement  "	            MethodInfo method = Helpers.GetInstanceMethod(property.DeclaringType.GetTypeInfo()' "Set" + property.Name' new Type[] { property.PropertyType });" is 145.
Long Statement,ProtoBuf.Serializers,TypeSerializer,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\TypeSerializer.cs,InvokeCallback,The length of the statement  "				                            else if (paramType == typeof(System.Runtime.Serialization.StreamingContext)) val = (System.Runtime.Serialization.StreamingContext)context;" is 138.
Complex Conditional,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The conditional expression  "trimNegative // allow for -ve values  && (chunk & 0xF0) == 0xF0 && available >= 10 && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0x01"  is complex.
Complex Conditional,ProtoBuf.Meta,RuntimeTypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\RuntimeTypeModel.cs,FindOrAddAuto,The conditional expression  "!shouldAdd || (!Helpers.IsEnum (type) && addWithContractOnly && family == MetaType.AttributeFamily.None)"  is complex.
Complex Conditional,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,DeserializeWithLengthPrefix,The conditional expression  "expectPrefix && expectedField == 0 && type == null && resolver != null"  is complex.
Complex Conditional,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TryDeserializeAuxiliaryType,The conditional expression  "itemType == null && type.IsArray && type.GetArrayRank () == 1 && type != typeof(byte[])"  is complex.
Complex Conditional,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,SetSpecified,The conditional expression  "setSpecified.ReturnType != model.MapType (typeof(void)) || setSpecified.IsStatic || (args = setSpecified.GetParameters ()).Length != 1 || args [0].ParameterType != model.MapType (typeof(bool))"  is complex.
Complex Conditional,ProtoBuf.Serializers,ImmutableCollectionDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ImmutableCollectionDecorator.cs,IdentifyImmutable,The conditional expression  "!method.IsStatic || method.Name != "CreateBuilder" || !method.IsGenericMethodDefinition || method.GetParameters ().Length != 0 || method.GetGenericArguments ().Length != typeArgs.Length"  is complex.
Complex Conditional,ProtoBuf.Serializers,ListDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ListDecorator.cs,GetEnumeratorInfo,The conditional expression  "moveNext != null && moveNext.ReturnType == model.MapType (typeof(bool)) && current != null && current.ReturnType == itemType"  is complex.
Empty Catch Block,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,ResolveKnownType,The method has an empty catch block.
Empty Catch Block,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,ResolveKnownType,The method has an empty catch block.
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,WriteGuid,The following statement contains a magic number: if (value != Guid.Empty) {  	ProtoWriter.WriteFieldHeader (FieldGuidLow' WireType.Fixed64' dest);  	ProtoWriter.WriteBytes (blob' 0' 8' dest);  	ProtoWriter.WriteFieldHeader (FieldGuidHigh' WireType.Fixed64' dest);  	ProtoWriter.WriteBytes (blob' 8' 8' dest);  }  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,WriteGuid,The following statement contains a magic number: if (value != Guid.Empty) {  	ProtoWriter.WriteFieldHeader (FieldGuidLow' WireType.Fixed64' dest);  	ProtoWriter.WriteBytes (blob' 0' 8' dest);  	ProtoWriter.WriteFieldHeader (FieldGuidHigh' WireType.Fixed64' dest);  	ProtoWriter.WriteBytes (blob' 8' 8' dest);  }  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,WriteGuid,The following statement contains a magic number: if (value != Guid.Empty) {  	ProtoWriter.WriteFieldHeader (FieldGuidLow' WireType.Fixed64' dest);  	ProtoWriter.WriteBytes (blob' 0' 8' dest);  	ProtoWriter.WriteFieldHeader (FieldGuidHigh' WireType.Fixed64' dest);  	ProtoWriter.WriteBytes (blob' 8' 8' dest);  }  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,WriteGuid,The following statement contains a magic number: ProtoWriter.WriteBytes (blob' 0' 8' dest);  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,WriteGuid,The following statement contains a magic number: ProtoWriter.WriteBytes (blob' 8' 8' dest);  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,WriteGuid,The following statement contains a magic number: ProtoWriter.WriteBytes (blob' 8' 8' dest);  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadGuid,The following statement contains a magic number: return new Guid ((int)b' (short)a' (short)(a >> 16)' (byte)d' (byte)(d >> 8)' (byte)(d >> 16)' (byte)(d >> 24)' (byte)c' (byte)(c >> 8)' (byte)(c >> 16)' (byte)(c >> 24));  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadGuid,The following statement contains a magic number: return new Guid ((int)b' (short)a' (short)(a >> 16)' (byte)d' (byte)(d >> 8)' (byte)(d >> 16)' (byte)(d >> 24)' (byte)c' (byte)(c >> 8)' (byte)(c >> 16)' (byte)(c >> 24));  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadGuid,The following statement contains a magic number: return new Guid ((int)b' (short)a' (short)(a >> 16)' (byte)d' (byte)(d >> 8)' (byte)(d >> 16)' (byte)(d >> 24)' (byte)c' (byte)(c >> 8)' (byte)(c >> 16)' (byte)(c >> 24));  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadGuid,The following statement contains a magic number: return new Guid ((int)b' (short)a' (short)(a >> 16)' (byte)d' (byte)(d >> 8)' (byte)(d >> 16)' (byte)(d >> 24)' (byte)c' (byte)(c >> 8)' (byte)(c >> 16)' (byte)(c >> 24));  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadGuid,The following statement contains a magic number: return new Guid ((int)b' (short)a' (short)(a >> 16)' (byte)d' (byte)(d >> 8)' (byte)(d >> 16)' (byte)(d >> 24)' (byte)c' (byte)(c >> 8)' (byte)(c >> 16)' (byte)(c >> 24));  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadGuid,The following statement contains a magic number: return new Guid ((int)b' (short)a' (short)(a >> 16)' (byte)d' (byte)(d >> 8)' (byte)(d >> 16)' (byte)(d >> 24)' (byte)c' (byte)(c >> 8)' (byte)(c >> 16)' (byte)(c >> 24));  
Magic Number,ProtoBuf,BclHelpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\BclHelpers.cs,ReadGuid,The following statement contains a magic number: return new Guid ((int)b' (short)a' (short)(a >> 16)' (byte)d' (byte)(d >> 8)' (byte)(d >> 16)' (byte)(d >> 24)' (byte)c' (byte)(c >> 8)' (byte)(c >> 16)' (byte)(c >> 24));  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if (available < 10)  	Ensure (10' false);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if (available < 10)  	Ensure (10' false);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: Ensure (10' false);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 7;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 2;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: return 2;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if (available == 2)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 14;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 3;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: return 3;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if (available == 3)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 21;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: return 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if (available == 4)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: value |= chunk << 28;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0xF0) == 0)  	return 5;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: return 5;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if (trimNegative // allow for -ve values  && (chunk & 0xF0) == 0xF0 && available >= 10 && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0x01) {  	return 10;  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: if (trimNegative // allow for -ve values  && (chunk & 0xF0) == 0xF0 && available >= 10 && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0xFF && ioBuffer [++readPos] == 0x01) {  	return 10;  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32VariantWithoutMoving,The following statement contains a magic number: return 10;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt32Variant (false);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	ulong val = ReadUInt64 ();  	checked {  		return (uint)val;  	}  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt32Variant (false);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	ulong val = ReadUInt64 ();  	checked {  		return (uint)val;  	}  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt32Variant (false);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	ulong val = ReadUInt64 ();  	checked {  		return (uint)val;  	}  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt32Variant (false);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	ulong val = ReadUInt64 ();  	checked {  		return (uint)val;  	}  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt32Variant (false);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	ulong val = ReadUInt64 ();  	checked {  		return (uint)val;  	}  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt32Variant (false);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	ulong val = ReadUInt64 ();  	checked {  		return (uint)val;  	}  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt32Variant (false);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	ulong val = ReadUInt64 ();  	checked {  		return (uint)val;  	}  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: if (available < 4)  	Ensure (4' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: if (available < 4)  	Ensure (4' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: Ensure (4' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: position += 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: available -= 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt32,The following statement contains a magic number: return ((uint)ioBuffer [ioIndex++]) | (((uint)ioBuffer [ioIndex++]) << 8) | (((uint)ioBuffer [ioIndex++]) << 16) | (((uint)ioBuffer [ioIndex++]) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (int)ReadUInt32Variant (true);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	long l = ReadInt64 ();  	checked {  		return (int)l;  	}  case WireType.SignedVariant:  	return Zag (ReadUInt32Variant (true));  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (int)ReadUInt32Variant (true);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	long l = ReadInt64 ();  	checked {  		return (int)l;  	}  case WireType.SignedVariant:  	return Zag (ReadUInt32Variant (true));  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (int)ReadUInt32Variant (true);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	long l = ReadInt64 ();  	checked {  		return (int)l;  	}  case WireType.SignedVariant:  	return Zag (ReadUInt32Variant (true));  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (int)ReadUInt32Variant (true);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	long l = ReadInt64 ();  	checked {  		return (int)l;  	}  case WireType.SignedVariant:  	return Zag (ReadUInt32Variant (true));  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (int)ReadUInt32Variant (true);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	long l = ReadInt64 ();  	checked {  		return (int)l;  	}  case WireType.SignedVariant:  	return Zag (ReadUInt32Variant (true));  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (int)ReadUInt32Variant (true);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	long l = ReadInt64 ();  	checked {  		return (int)l;  	}  case WireType.SignedVariant:  	return Zag (ReadUInt32Variant (true));  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (int)ReadUInt32Variant (true);  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	position += 4;  	available -= 4;  	return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24);  case WireType.Fixed64:  	long l = ReadInt64 ();  	checked {  		return (int)l;  	}  case WireType.SignedVariant:  	return Zag (ReadUInt32Variant (true));  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: if (available < 4)  	Ensure (4' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: if (available < 4)  	Ensure (4' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: Ensure (4' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: position += 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: available -= 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt32,The following statement contains a magic number: return ((int)ioBuffer [ioIndex++]) | (((int)ioBuffer [ioIndex++]) << 8) | (((int)ioBuffer [ioIndex++]) << 16) | (((int)ioBuffer [ioIndex++]) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return (long)ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  case WireType.SignedVariant:  	return Zag (ReadUInt64Variant ());  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: if (available < 8)  	Ensure (8' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: if (available < 8)  	Ensure (8' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: Ensure (8' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: position += 8;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: available -= 8;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadInt64,The following statement contains a magic number: return ((long)ioBuffer [ioIndex++]) | (((long)ioBuffer [ioIndex++]) << 8) | (((long)ioBuffer [ioIndex++]) << 16) | (((long)ioBuffer [ioIndex++]) << 24) | (((long)ioBuffer [ioIndex++]) << 32) | (((long)ioBuffer [ioIndex++]) << 40) | (((long)ioBuffer [ioIndex++]) << 48) | (((long)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if (available < 10)  	Ensure (10' false);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if (available < 10)  	Ensure (10' false);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: Ensure (10' false);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 7;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 2;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: return 2;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if (available == 2)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 14;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 3;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: return 3;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if (available == 3)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 21;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: return 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if (available == 4)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 28;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 5;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: return 5;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if (available == 5)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 35;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 6;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: return 6;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if (available == 6)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 42;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 7;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: return 7;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if (available == 7)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 49;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 8;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: return 8;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if (available == 8)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: value |= (chunk & 0x7F) << 56;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if ((chunk & 0x80) == 0)  	return 9;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: return 9;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: if (available == 9)  	throw EoF (this);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: value |= chunk << 63;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt64VariantWithoutMoving,The following statement contains a magic number: return 10;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadFieldHeader,The following statement contains a magic number: if (TryReadUInt32Variant (out tag)) {  	wireType = (WireType)(tag & 7);  	fieldNumber = (int)(tag >> 3);  	if (fieldNumber < 1)  		throw new ProtoException ("Invalid field in source data: " + fieldNumber.ToString ());  }  else {  	wireType = WireType.None;  	fieldNumber = 0;  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadFieldHeader,The following statement contains a magic number: if (TryReadUInt32Variant (out tag)) {  	wireType = (WireType)(tag & 7);  	fieldNumber = (int)(tag >> 3);  	if (fieldNumber < 1)  		throw new ProtoException ("Invalid field in source data: " + fieldNumber.ToString ());  }  else {  	wireType = WireType.None;  	fieldNumber = 0;  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadFieldHeader,The following statement contains a magic number: wireType = (WireType)(tag & 7);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadFieldHeader,The following statement contains a magic number: fieldNumber = (int)(tag >> 3);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadFieldHeader,The following statement contains a magic number: if (read > 0 && ((int)tag >> 3) == field && (tmpWireType = (WireType)(tag & 7)) != WireType.EndGroup) {  	wireType = tmpWireType;  	fieldNumber = field;  	position += read;  	ioIndex += read;  	available -= read;  	return true;  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadFieldHeader,The following statement contains a magic number: if (read > 0 && ((int)tag >> 3) == field && (tmpWireType = (WireType)(tag & 7)) != WireType.EndGroup) {  	wireType = tmpWireType;  	fieldNumber = field;  	position += read;  	ioIndex += read;  	available -= read;  	return true;  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,Hint,The following statement contains a magic number: if (this.wireType == wireType) {  }  // fine; everything as we expect  else if (((int)wireType & 7) == (int)this.wireType) {  	// the underling type is a match; we're customising it with an extension  	this.wireType = wireType;  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,Hint,The following statement contains a magic number: if (((int)wireType & 7) == (int)this.wireType) {  	// the underling type is a match; we're customising it with an extension  	this.wireType = wireType;  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,Assert,The following statement contains a magic number: if (this.wireType == wireType) {  }  // fine; everything as we expect  else if (((int)wireType & 7) == (int)this.wireType) {  	// the underling type is a match; we're customising it with an extension  	this.wireType = wireType;  }  else {  	// nope; that is *not* what we were expecting!  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,Assert,The following statement contains a magic number: if (((int)wireType & 7) == (int)this.wireType) {  	// the underling type is a match; we're customising it with an extension  	this.wireType = wireType;  }  else {  	// nope; that is *not* what we were expecting!  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: switch (wireType) {  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	available -= 4;  	ioIndex += 4;  	position += 4;  	return;  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	available -= 8;  	ioIndex += 8;  	position += 8;  	return;  case WireType.String:  	int len = (int)ReadUInt32Variant (false);  	if (len <= available) {  		// just jump it!  		available -= len;  		ioIndex += len;  		position += len;  		return;  	}  	// everything remaining in the buffer is garbage  	position += len;  	// assumes success' but if it fails we're screwed anyway  	len -= available;  	// discount anything we've got to-hand  	ioIndex = available = 0;  	// note that we have no data in the buffer  	if (isFixedLength) {  		if (len > dataRemaining)  			throw EoF (this);  		// else assume we're going to be OK  		dataRemaining -= len;  	}  	ProtoReader.Seek (source' len' ioBuffer);  	return;  case WireType.Variant:  case WireType.SignedVariant:  	ReadUInt64Variant ();  	// and drop it  	return;  case WireType.StartGroup:  	int originalFieldNumber = this.fieldNumber;  	depth++;  	// need to satisfy the sanity-checks in ReadFieldHeader  	while (ReadFieldHeader () > 0) {  		SkipField ();  	}  	depth--;  	if (wireType == WireType.EndGroup && fieldNumber == originalFieldNumber) {  		// we expect to exit in a similar state to how we entered  		wireType = ProtoBuf.WireType.None;  		return;  	}  	throw CreateWireTypeException ();  case WireType.None:  // treat as explicit errorr  case WireType.EndGroup:  // treat as explicit error  default:  	// treat as implicit error  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: switch (wireType) {  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	available -= 4;  	ioIndex += 4;  	position += 4;  	return;  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	available -= 8;  	ioIndex += 8;  	position += 8;  	return;  case WireType.String:  	int len = (int)ReadUInt32Variant (false);  	if (len <= available) {  		// just jump it!  		available -= len;  		ioIndex += len;  		position += len;  		return;  	}  	// everything remaining in the buffer is garbage  	position += len;  	// assumes success' but if it fails we're screwed anyway  	len -= available;  	// discount anything we've got to-hand  	ioIndex = available = 0;  	// note that we have no data in the buffer  	if (isFixedLength) {  		if (len > dataRemaining)  			throw EoF (this);  		// else assume we're going to be OK  		dataRemaining -= len;  	}  	ProtoReader.Seek (source' len' ioBuffer);  	return;  case WireType.Variant:  case WireType.SignedVariant:  	ReadUInt64Variant ();  	// and drop it  	return;  case WireType.StartGroup:  	int originalFieldNumber = this.fieldNumber;  	depth++;  	// need to satisfy the sanity-checks in ReadFieldHeader  	while (ReadFieldHeader () > 0) {  		SkipField ();  	}  	depth--;  	if (wireType == WireType.EndGroup && fieldNumber == originalFieldNumber) {  		// we expect to exit in a similar state to how we entered  		wireType = ProtoBuf.WireType.None;  		return;  	}  	throw CreateWireTypeException ();  case WireType.None:  // treat as explicit errorr  case WireType.EndGroup:  // treat as explicit error  default:  	// treat as implicit error  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: switch (wireType) {  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	available -= 4;  	ioIndex += 4;  	position += 4;  	return;  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	available -= 8;  	ioIndex += 8;  	position += 8;  	return;  case WireType.String:  	int len = (int)ReadUInt32Variant (false);  	if (len <= available) {  		// just jump it!  		available -= len;  		ioIndex += len;  		position += len;  		return;  	}  	// everything remaining in the buffer is garbage  	position += len;  	// assumes success' but if it fails we're screwed anyway  	len -= available;  	// discount anything we've got to-hand  	ioIndex = available = 0;  	// note that we have no data in the buffer  	if (isFixedLength) {  		if (len > dataRemaining)  			throw EoF (this);  		// else assume we're going to be OK  		dataRemaining -= len;  	}  	ProtoReader.Seek (source' len' ioBuffer);  	return;  case WireType.Variant:  case WireType.SignedVariant:  	ReadUInt64Variant ();  	// and drop it  	return;  case WireType.StartGroup:  	int originalFieldNumber = this.fieldNumber;  	depth++;  	// need to satisfy the sanity-checks in ReadFieldHeader  	while (ReadFieldHeader () > 0) {  		SkipField ();  	}  	depth--;  	if (wireType == WireType.EndGroup && fieldNumber == originalFieldNumber) {  		// we expect to exit in a similar state to how we entered  		wireType = ProtoBuf.WireType.None;  		return;  	}  	throw CreateWireTypeException ();  case WireType.None:  // treat as explicit errorr  case WireType.EndGroup:  // treat as explicit error  default:  	// treat as implicit error  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: switch (wireType) {  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	available -= 4;  	ioIndex += 4;  	position += 4;  	return;  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	available -= 8;  	ioIndex += 8;  	position += 8;  	return;  case WireType.String:  	int len = (int)ReadUInt32Variant (false);  	if (len <= available) {  		// just jump it!  		available -= len;  		ioIndex += len;  		position += len;  		return;  	}  	// everything remaining in the buffer is garbage  	position += len;  	// assumes success' but if it fails we're screwed anyway  	len -= available;  	// discount anything we've got to-hand  	ioIndex = available = 0;  	// note that we have no data in the buffer  	if (isFixedLength) {  		if (len > dataRemaining)  			throw EoF (this);  		// else assume we're going to be OK  		dataRemaining -= len;  	}  	ProtoReader.Seek (source' len' ioBuffer);  	return;  case WireType.Variant:  case WireType.SignedVariant:  	ReadUInt64Variant ();  	// and drop it  	return;  case WireType.StartGroup:  	int originalFieldNumber = this.fieldNumber;  	depth++;  	// need to satisfy the sanity-checks in ReadFieldHeader  	while (ReadFieldHeader () > 0) {  		SkipField ();  	}  	depth--;  	if (wireType == WireType.EndGroup && fieldNumber == originalFieldNumber) {  		// we expect to exit in a similar state to how we entered  		wireType = ProtoBuf.WireType.None;  		return;  	}  	throw CreateWireTypeException ();  case WireType.None:  // treat as explicit errorr  case WireType.EndGroup:  // treat as explicit error  default:  	// treat as implicit error  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: switch (wireType) {  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	available -= 4;  	ioIndex += 4;  	position += 4;  	return;  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	available -= 8;  	ioIndex += 8;  	position += 8;  	return;  case WireType.String:  	int len = (int)ReadUInt32Variant (false);  	if (len <= available) {  		// just jump it!  		available -= len;  		ioIndex += len;  		position += len;  		return;  	}  	// everything remaining in the buffer is garbage  	position += len;  	// assumes success' but if it fails we're screwed anyway  	len -= available;  	// discount anything we've got to-hand  	ioIndex = available = 0;  	// note that we have no data in the buffer  	if (isFixedLength) {  		if (len > dataRemaining)  			throw EoF (this);  		// else assume we're going to be OK  		dataRemaining -= len;  	}  	ProtoReader.Seek (source' len' ioBuffer);  	return;  case WireType.Variant:  case WireType.SignedVariant:  	ReadUInt64Variant ();  	// and drop it  	return;  case WireType.StartGroup:  	int originalFieldNumber = this.fieldNumber;  	depth++;  	// need to satisfy the sanity-checks in ReadFieldHeader  	while (ReadFieldHeader () > 0) {  		SkipField ();  	}  	depth--;  	if (wireType == WireType.EndGroup && fieldNumber == originalFieldNumber) {  		// we expect to exit in a similar state to how we entered  		wireType = ProtoBuf.WireType.None;  		return;  	}  	throw CreateWireTypeException ();  case WireType.None:  // treat as explicit errorr  case WireType.EndGroup:  // treat as explicit error  default:  	// treat as implicit error  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: switch (wireType) {  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	available -= 4;  	ioIndex += 4;  	position += 4;  	return;  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	available -= 8;  	ioIndex += 8;  	position += 8;  	return;  case WireType.String:  	int len = (int)ReadUInt32Variant (false);  	if (len <= available) {  		// just jump it!  		available -= len;  		ioIndex += len;  		position += len;  		return;  	}  	// everything remaining in the buffer is garbage  	position += len;  	// assumes success' but if it fails we're screwed anyway  	len -= available;  	// discount anything we've got to-hand  	ioIndex = available = 0;  	// note that we have no data in the buffer  	if (isFixedLength) {  		if (len > dataRemaining)  			throw EoF (this);  		// else assume we're going to be OK  		dataRemaining -= len;  	}  	ProtoReader.Seek (source' len' ioBuffer);  	return;  case WireType.Variant:  case WireType.SignedVariant:  	ReadUInt64Variant ();  	// and drop it  	return;  case WireType.StartGroup:  	int originalFieldNumber = this.fieldNumber;  	depth++;  	// need to satisfy the sanity-checks in ReadFieldHeader  	while (ReadFieldHeader () > 0) {  		SkipField ();  	}  	depth--;  	if (wireType == WireType.EndGroup && fieldNumber == originalFieldNumber) {  		// we expect to exit in a similar state to how we entered  		wireType = ProtoBuf.WireType.None;  		return;  	}  	throw CreateWireTypeException ();  case WireType.None:  // treat as explicit errorr  case WireType.EndGroup:  // treat as explicit error  default:  	// treat as implicit error  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: switch (wireType) {  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	available -= 4;  	ioIndex += 4;  	position += 4;  	return;  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	available -= 8;  	ioIndex += 8;  	position += 8;  	return;  case WireType.String:  	int len = (int)ReadUInt32Variant (false);  	if (len <= available) {  		// just jump it!  		available -= len;  		ioIndex += len;  		position += len;  		return;  	}  	// everything remaining in the buffer is garbage  	position += len;  	// assumes success' but if it fails we're screwed anyway  	len -= available;  	// discount anything we've got to-hand  	ioIndex = available = 0;  	// note that we have no data in the buffer  	if (isFixedLength) {  		if (len > dataRemaining)  			throw EoF (this);  		// else assume we're going to be OK  		dataRemaining -= len;  	}  	ProtoReader.Seek (source' len' ioBuffer);  	return;  case WireType.Variant:  case WireType.SignedVariant:  	ReadUInt64Variant ();  	// and drop it  	return;  case WireType.StartGroup:  	int originalFieldNumber = this.fieldNumber;  	depth++;  	// need to satisfy the sanity-checks in ReadFieldHeader  	while (ReadFieldHeader () > 0) {  		SkipField ();  	}  	depth--;  	if (wireType == WireType.EndGroup && fieldNumber == originalFieldNumber) {  		// we expect to exit in a similar state to how we entered  		wireType = ProtoBuf.WireType.None;  		return;  	}  	throw CreateWireTypeException ();  case WireType.None:  // treat as explicit errorr  case WireType.EndGroup:  // treat as explicit error  default:  	// treat as implicit error  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: switch (wireType) {  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	available -= 4;  	ioIndex += 4;  	position += 4;  	return;  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	available -= 8;  	ioIndex += 8;  	position += 8;  	return;  case WireType.String:  	int len = (int)ReadUInt32Variant (false);  	if (len <= available) {  		// just jump it!  		available -= len;  		ioIndex += len;  		position += len;  		return;  	}  	// everything remaining in the buffer is garbage  	position += len;  	// assumes success' but if it fails we're screwed anyway  	len -= available;  	// discount anything we've got to-hand  	ioIndex = available = 0;  	// note that we have no data in the buffer  	if (isFixedLength) {  		if (len > dataRemaining)  			throw EoF (this);  		// else assume we're going to be OK  		dataRemaining -= len;  	}  	ProtoReader.Seek (source' len' ioBuffer);  	return;  case WireType.Variant:  case WireType.SignedVariant:  	ReadUInt64Variant ();  	// and drop it  	return;  case WireType.StartGroup:  	int originalFieldNumber = this.fieldNumber;  	depth++;  	// need to satisfy the sanity-checks in ReadFieldHeader  	while (ReadFieldHeader () > 0) {  		SkipField ();  	}  	depth--;  	if (wireType == WireType.EndGroup && fieldNumber == originalFieldNumber) {  		// we expect to exit in a similar state to how we entered  		wireType = ProtoBuf.WireType.None;  		return;  	}  	throw CreateWireTypeException ();  case WireType.None:  // treat as explicit errorr  case WireType.EndGroup:  // treat as explicit error  default:  	// treat as implicit error  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: switch (wireType) {  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	available -= 4;  	ioIndex += 4;  	position += 4;  	return;  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	available -= 8;  	ioIndex += 8;  	position += 8;  	return;  case WireType.String:  	int len = (int)ReadUInt32Variant (false);  	if (len <= available) {  		// just jump it!  		available -= len;  		ioIndex += len;  		position += len;  		return;  	}  	// everything remaining in the buffer is garbage  	position += len;  	// assumes success' but if it fails we're screwed anyway  	len -= available;  	// discount anything we've got to-hand  	ioIndex = available = 0;  	// note that we have no data in the buffer  	if (isFixedLength) {  		if (len > dataRemaining)  			throw EoF (this);  		// else assume we're going to be OK  		dataRemaining -= len;  	}  	ProtoReader.Seek (source' len' ioBuffer);  	return;  case WireType.Variant:  case WireType.SignedVariant:  	ReadUInt64Variant ();  	// and drop it  	return;  case WireType.StartGroup:  	int originalFieldNumber = this.fieldNumber;  	depth++;  	// need to satisfy the sanity-checks in ReadFieldHeader  	while (ReadFieldHeader () > 0) {  		SkipField ();  	}  	depth--;  	if (wireType == WireType.EndGroup && fieldNumber == originalFieldNumber) {  		// we expect to exit in a similar state to how we entered  		wireType = ProtoBuf.WireType.None;  		return;  	}  	throw CreateWireTypeException ();  case WireType.None:  // treat as explicit errorr  case WireType.EndGroup:  // treat as explicit error  default:  	// treat as implicit error  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: switch (wireType) {  case WireType.Fixed32:  	if (available < 4)  		Ensure (4' true);  	available -= 4;  	ioIndex += 4;  	position += 4;  	return;  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	available -= 8;  	ioIndex += 8;  	position += 8;  	return;  case WireType.String:  	int len = (int)ReadUInt32Variant (false);  	if (len <= available) {  		// just jump it!  		available -= len;  		ioIndex += len;  		position += len;  		return;  	}  	// everything remaining in the buffer is garbage  	position += len;  	// assumes success' but if it fails we're screwed anyway  	len -= available;  	// discount anything we've got to-hand  	ioIndex = available = 0;  	// note that we have no data in the buffer  	if (isFixedLength) {  		if (len > dataRemaining)  			throw EoF (this);  		// else assume we're going to be OK  		dataRemaining -= len;  	}  	ProtoReader.Seek (source' len' ioBuffer);  	return;  case WireType.Variant:  case WireType.SignedVariant:  	ReadUInt64Variant ();  	// and drop it  	return;  case WireType.StartGroup:  	int originalFieldNumber = this.fieldNumber;  	depth++;  	// need to satisfy the sanity-checks in ReadFieldHeader  	while (ReadFieldHeader () > 0) {  		SkipField ();  	}  	depth--;  	if (wireType == WireType.EndGroup && fieldNumber == originalFieldNumber) {  		// we expect to exit in a similar state to how we entered  		wireType = ProtoBuf.WireType.None;  		return;  	}  	throw CreateWireTypeException ();  case WireType.None:  // treat as explicit errorr  case WireType.EndGroup:  // treat as explicit error  default:  	// treat as implicit error  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: if (available < 4)  	Ensure (4' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: if (available < 4)  	Ensure (4' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: Ensure (4' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: available -= 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: ioIndex += 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: position += 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: if (available < 8)  	Ensure (8' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: if (available < 8)  	Ensure (8' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: Ensure (8' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: available -= 8;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: ioIndex += 8;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,SkipField,The following statement contains a magic number: position += 8;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: switch (wireType) {  case WireType.Variant:  	return ReadUInt64Variant ();  case WireType.Fixed32:  	return ReadUInt32 ();  case WireType.Fixed64:  	if (available < 8)  		Ensure (8' true);  	position += 8;  	available -= 8;  	return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  default:  	throw CreateWireTypeException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: if (available < 8)  	Ensure (8' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: if (available < 8)  	Ensure (8' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: Ensure (8' true);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: position += 8;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: available -= 8;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadUInt64,The following statement contains a magic number: return ((ulong)ioBuffer [ioIndex++]) | (((ulong)ioBuffer [ioIndex++]) << 8) | (((ulong)ioBuffer [ioIndex++]) << 16) | (((ulong)ioBuffer [ioIndex++]) << 24) | (((ulong)ioBuffer [ioIndex++]) << 32) | (((ulong)ioBuffer [ioIndex++]) << 40) | (((ulong)ioBuffer [ioIndex++]) << 48) | (((ulong)ioBuffer [ioIndex++]) << 56);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,DirectReadLittleEndianInt32,The following statement contains a magic number: return ReadByteOrThrow (source) | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,DirectReadLittleEndianInt32,The following statement contains a magic number: return ReadByteOrThrow (source) | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,DirectReadLittleEndianInt32,The following statement contains a magic number: return ReadByteOrThrow (source) | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,DirectReadBigEndianInt32,The following statement contains a magic number: return (ReadByteOrThrow (source) << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,DirectReadBigEndianInt32,The following statement contains a magic number: return (ReadByteOrThrow (source) << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,DirectReadBigEndianInt32,The following statement contains a magic number: return (ReadByteOrThrow (source) << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: switch (style) {  case PrefixStyle.None:  	bytesRead = 0;  	return int.MaxValue;  case PrefixStyle.Base128:  	uint val;  	int tmpBytesRead;  	bytesRead = 0;  	if (expectHeader) {  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (tmpBytesRead > 0) {  			if ((val & 7) != (uint)WireType.String) {  				// got a header' but it isn't a string  				throw new InvalidOperationException ();  			}  			fieldNumber = (int)(val >> 3);  			tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  			bytesRead += tmpBytesRead;  			if (bytesRead == 0) {  				// got a header' but no length  				throw EoF (null);  			}  			return (int)val;  		}  		else {  			// no header  			bytesRead = 0;  			return -1;  		}  	}  	// check for a length  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	return bytesRead < 0 ? -1 : (int)val;  case PrefixStyle.Fixed32: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  }  case PrefixStyle.Fixed32BigEndian: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  }  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: switch (style) {  case PrefixStyle.None:  	bytesRead = 0;  	return int.MaxValue;  case PrefixStyle.Base128:  	uint val;  	int tmpBytesRead;  	bytesRead = 0;  	if (expectHeader) {  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (tmpBytesRead > 0) {  			if ((val & 7) != (uint)WireType.String) {  				// got a header' but it isn't a string  				throw new InvalidOperationException ();  			}  			fieldNumber = (int)(val >> 3);  			tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  			bytesRead += tmpBytesRead;  			if (bytesRead == 0) {  				// got a header' but no length  				throw EoF (null);  			}  			return (int)val;  		}  		else {  			// no header  			bytesRead = 0;  			return -1;  		}  	}  	// check for a length  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	return bytesRead < 0 ? -1 : (int)val;  case PrefixStyle.Fixed32: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  }  case PrefixStyle.Fixed32BigEndian: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  }  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: switch (style) {  case PrefixStyle.None:  	bytesRead = 0;  	return int.MaxValue;  case PrefixStyle.Base128:  	uint val;  	int tmpBytesRead;  	bytesRead = 0;  	if (expectHeader) {  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (tmpBytesRead > 0) {  			if ((val & 7) != (uint)WireType.String) {  				// got a header' but it isn't a string  				throw new InvalidOperationException ();  			}  			fieldNumber = (int)(val >> 3);  			tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  			bytesRead += tmpBytesRead;  			if (bytesRead == 0) {  				// got a header' but no length  				throw EoF (null);  			}  			return (int)val;  		}  		else {  			// no header  			bytesRead = 0;  			return -1;  		}  	}  	// check for a length  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	return bytesRead < 0 ? -1 : (int)val;  case PrefixStyle.Fixed32: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  }  case PrefixStyle.Fixed32BigEndian: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  }  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: switch (style) {  case PrefixStyle.None:  	bytesRead = 0;  	return int.MaxValue;  case PrefixStyle.Base128:  	uint val;  	int tmpBytesRead;  	bytesRead = 0;  	if (expectHeader) {  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (tmpBytesRead > 0) {  			if ((val & 7) != (uint)WireType.String) {  				// got a header' but it isn't a string  				throw new InvalidOperationException ();  			}  			fieldNumber = (int)(val >> 3);  			tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  			bytesRead += tmpBytesRead;  			if (bytesRead == 0) {  				// got a header' but no length  				throw EoF (null);  			}  			return (int)val;  		}  		else {  			// no header  			bytesRead = 0;  			return -1;  		}  	}  	// check for a length  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	return bytesRead < 0 ? -1 : (int)val;  case PrefixStyle.Fixed32: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  }  case PrefixStyle.Fixed32BigEndian: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  }  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: switch (style) {  case PrefixStyle.None:  	bytesRead = 0;  	return int.MaxValue;  case PrefixStyle.Base128:  	uint val;  	int tmpBytesRead;  	bytesRead = 0;  	if (expectHeader) {  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (tmpBytesRead > 0) {  			if ((val & 7) != (uint)WireType.String) {  				// got a header' but it isn't a string  				throw new InvalidOperationException ();  			}  			fieldNumber = (int)(val >> 3);  			tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  			bytesRead += tmpBytesRead;  			if (bytesRead == 0) {  				// got a header' but no length  				throw EoF (null);  			}  			return (int)val;  		}  		else {  			// no header  			bytesRead = 0;  			return -1;  		}  	}  	// check for a length  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	return bytesRead < 0 ? -1 : (int)val;  case PrefixStyle.Fixed32: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  }  case PrefixStyle.Fixed32BigEndian: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  }  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: switch (style) {  case PrefixStyle.None:  	bytesRead = 0;  	return int.MaxValue;  case PrefixStyle.Base128:  	uint val;  	int tmpBytesRead;  	bytesRead = 0;  	if (expectHeader) {  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (tmpBytesRead > 0) {  			if ((val & 7) != (uint)WireType.String) {  				// got a header' but it isn't a string  				throw new InvalidOperationException ();  			}  			fieldNumber = (int)(val >> 3);  			tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  			bytesRead += tmpBytesRead;  			if (bytesRead == 0) {  				// got a header' but no length  				throw EoF (null);  			}  			return (int)val;  		}  		else {  			// no header  			bytesRead = 0;  			return -1;  		}  	}  	// check for a length  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	return bytesRead < 0 ? -1 : (int)val;  case PrefixStyle.Fixed32: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  }  case PrefixStyle.Fixed32BigEndian: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  }  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: switch (style) {  case PrefixStyle.None:  	bytesRead = 0;  	return int.MaxValue;  case PrefixStyle.Base128:  	uint val;  	int tmpBytesRead;  	bytesRead = 0;  	if (expectHeader) {  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (tmpBytesRead > 0) {  			if ((val & 7) != (uint)WireType.String) {  				// got a header' but it isn't a string  				throw new InvalidOperationException ();  			}  			fieldNumber = (int)(val >> 3);  			tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  			bytesRead += tmpBytesRead;  			if (bytesRead == 0) {  				// got a header' but no length  				throw EoF (null);  			}  			return (int)val;  		}  		else {  			// no header  			bytesRead = 0;  			return -1;  		}  	}  	// check for a length  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	return bytesRead < 0 ? -1 : (int)val;  case PrefixStyle.Fixed32: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  }  case PrefixStyle.Fixed32BigEndian: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  }  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: switch (style) {  case PrefixStyle.None:  	bytesRead = 0;  	return int.MaxValue;  case PrefixStyle.Base128:  	uint val;  	int tmpBytesRead;  	bytesRead = 0;  	if (expectHeader) {  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (tmpBytesRead > 0) {  			if ((val & 7) != (uint)WireType.String) {  				// got a header' but it isn't a string  				throw new InvalidOperationException ();  			}  			fieldNumber = (int)(val >> 3);  			tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  			bytesRead += tmpBytesRead;  			if (bytesRead == 0) {  				// got a header' but no length  				throw EoF (null);  			}  			return (int)val;  		}  		else {  			// no header  			bytesRead = 0;  			return -1;  		}  	}  	// check for a length  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	return bytesRead < 0 ? -1 : (int)val;  case PrefixStyle.Fixed32: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  }  case PrefixStyle.Fixed32BigEndian: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  }  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: switch (style) {  case PrefixStyle.None:  	bytesRead = 0;  	return int.MaxValue;  case PrefixStyle.Base128:  	uint val;  	int tmpBytesRead;  	bytesRead = 0;  	if (expectHeader) {  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (tmpBytesRead > 0) {  			if ((val & 7) != (uint)WireType.String) {  				// got a header' but it isn't a string  				throw new InvalidOperationException ();  			}  			fieldNumber = (int)(val >> 3);  			tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  			bytesRead += tmpBytesRead;  			if (bytesRead == 0) {  				// got a header' but no length  				throw EoF (null);  			}  			return (int)val;  		}  		else {  			// no header  			bytesRead = 0;  			return -1;  		}  	}  	// check for a length  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	return bytesRead < 0 ? -1 : (int)val;  case PrefixStyle.Fixed32: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  }  case PrefixStyle.Fixed32BigEndian: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  }  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: switch (style) {  case PrefixStyle.None:  	bytesRead = 0;  	return int.MaxValue;  case PrefixStyle.Base128:  	uint val;  	int tmpBytesRead;  	bytesRead = 0;  	if (expectHeader) {  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (tmpBytesRead > 0) {  			if ((val & 7) != (uint)WireType.String) {  				// got a header' but it isn't a string  				throw new InvalidOperationException ();  			}  			fieldNumber = (int)(val >> 3);  			tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  			bytesRead += tmpBytesRead;  			if (bytesRead == 0) {  				// got a header' but no length  				throw EoF (null);  			}  			return (int)val;  		}  		else {  			// no header  			bytesRead = 0;  			return -1;  		}  	}  	// check for a length  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	return bytesRead < 0 ? -1 : (int)val;  case PrefixStyle.Fixed32: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  }  case PrefixStyle.Fixed32BigEndian: {  	int b = source.ReadByte ();  	if (b < 0) {  		bytesRead = 0;  		return -1;  	}  	bytesRead = 4;  	return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  }  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: if (expectHeader) {  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	if (tmpBytesRead > 0) {  		if ((val & 7) != (uint)WireType.String) {  			// got a header' but it isn't a string  			throw new InvalidOperationException ();  		}  		fieldNumber = (int)(val >> 3);  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (bytesRead == 0) {  			// got a header' but no length  			throw EoF (null);  		}  		return (int)val;  	}  	else {  		// no header  		bytesRead = 0;  		return -1;  	}  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: if (expectHeader) {  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	if (tmpBytesRead > 0) {  		if ((val & 7) != (uint)WireType.String) {  			// got a header' but it isn't a string  			throw new InvalidOperationException ();  		}  		fieldNumber = (int)(val >> 3);  		tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  		bytesRead += tmpBytesRead;  		if (bytesRead == 0) {  			// got a header' but no length  			throw EoF (null);  		}  		return (int)val;  	}  	else {  		// no header  		bytesRead = 0;  		return -1;  	}  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: if (tmpBytesRead > 0) {  	if ((val & 7) != (uint)WireType.String) {  		// got a header' but it isn't a string  		throw new InvalidOperationException ();  	}  	fieldNumber = (int)(val >> 3);  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	if (bytesRead == 0) {  		// got a header' but no length  		throw EoF (null);  	}  	return (int)val;  }  else {  	// no header  	bytesRead = 0;  	return -1;  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: if (tmpBytesRead > 0) {  	if ((val & 7) != (uint)WireType.String) {  		// got a header' but it isn't a string  		throw new InvalidOperationException ();  	}  	fieldNumber = (int)(val >> 3);  	tmpBytesRead = ProtoReader.TryReadUInt32Variant (source' out val);  	bytesRead += tmpBytesRead;  	if (bytesRead == 0) {  		// got a header' but no length  		throw EoF (null);  	}  	return (int)val;  }  else {  	// no header  	bytesRead = 0;  	return -1;  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: if ((val & 7) != (uint)WireType.String) {  	// got a header' but it isn't a string  	throw new InvalidOperationException ();  }  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: fieldNumber = (int)(val >> 3);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: bytesRead = 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: return b | (ReadByteOrThrow (source) << 8) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 24);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: bytesRead = 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,ReadLengthPrefix,The following statement contains a magic number: return (b << 24) | (ReadByteOrThrow (source) << 16) | (ReadByteOrThrow (source) << 8) | ReadByteOrThrow (source);  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: value |= ((uint)b & 0x7F) << 7;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: if ((b & 0x80) == 0)  	return 2;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: return 2;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: value |= ((uint)b & 0x7F) << 14;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: if ((b & 0x80) == 0)  	return 3;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: return 3;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: value |= ((uint)b & 0x7F) << 21;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: if ((b & 0x80) == 0)  	return 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: return 4;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: value |= (uint)b << 28;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: if ((b & 0xF0) == 0)  	return 5;  
Magic Number,ProtoBuf,ProtoReader,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoReader.cs,TryReadUInt32Variant,The following statement contains a magic number: return 5;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteBytes,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	if (length != 4)  		throw new ArgumentException ("length");  	goto CopyFixedLength;  // ugly but effective  case WireType.Fixed64:  	if (length != 8)  		throw new ArgumentException ("length");  	goto CopyFixedLength;  // ugly but effective  case WireType.String:  	WriteUInt32Variant ((uint)length' writer);  	writer.wireType = WireType.None;  	if (length == 0)  		return;  	if (writer.flushLock != 0 || length <= writer.ioBuffer.Length)// write to the buffer  	 {  		goto CopyFixedLength;  		// ugly but effective  	}  	// writing data that is bigger than the buffer (and the buffer  	// isn't currently locked due to a sub-object needing the size backfilled)  	Flush (writer);  	// commit any existing data from the buffer  	// now just write directly to the underlying stream  	writer.dest.Write (data' offset' length);  	writer.position += length;  	// since we've flushed offset etc is 0' and remains  	// zero since we're writing directly to the stream  	return;  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteBytes,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	if (length != 4)  		throw new ArgumentException ("length");  	goto CopyFixedLength;  // ugly but effective  case WireType.Fixed64:  	if (length != 8)  		throw new ArgumentException ("length");  	goto CopyFixedLength;  // ugly but effective  case WireType.String:  	WriteUInt32Variant ((uint)length' writer);  	writer.wireType = WireType.None;  	if (length == 0)  		return;  	if (writer.flushLock != 0 || length <= writer.ioBuffer.Length)// write to the buffer  	 {  		goto CopyFixedLength;  		// ugly but effective  	}  	// writing data that is bigger than the buffer (and the buffer  	// isn't currently locked due to a sub-object needing the size backfilled)  	Flush (writer);  	// commit any existing data from the buffer  	// now just write directly to the underlying stream  	writer.dest.Write (data' offset' length);  	writer.position += length;  	// since we've flushed offset etc is 0' and remains  	// zero since we're writing directly to the stream  	return;  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteBytes,The following statement contains a magic number: if (length != 4)  	throw new ArgumentException ("length");  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteBytes,The following statement contains a magic number: if (length != 8)  	throw new ArgumentException ("length");  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,CopyRawFromStream,The following statement contains a magic number: if (writer.flushLock == 0) {  	// flush the buffer and write to the underlying stream instead  	Flush (writer);  	while ((bytesRead = source.Read (buffer' 0' buffer.Length)) > 0) {  		writer.dest.Write (buffer' 0' bytesRead);  		writer.position += bytesRead;  	}  }  else {  	do {  		// need more space; resize (double) as necessary'  		// requesting a reasonable minimum chunk each time  		// (128 is the minimum; there may actually be much  		// more space than this in the buffer)  		DemandSpace (128' writer);  		if ((bytesRead = source.Read (writer.ioBuffer' writer.ioIndex' writer.ioBuffer.Length - writer.ioIndex)) <= 0)  			break;  		writer.position += bytesRead;  		writer.ioIndex += bytesRead;  	}  	while (true);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,CopyRawFromStream,The following statement contains a magic number: do {  	// need more space; resize (double) as necessary'  	// requesting a reasonable minimum chunk each time  	// (128 is the minimum; there may actually be much  	// more space than this in the buffer)  	DemandSpace (128' writer);  	if ((bytesRead = source.Read (writer.ioBuffer' writer.ioIndex' writer.ioBuffer.Length - writer.ioIndex)) <= 0)  		break;  	writer.position += bytesRead;  	writer.ioIndex += bytesRead;  }  while (true);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,CopyRawFromStream,The following statement contains a magic number: DemandSpace (128' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,StartSubItem,The following statement contains a magic number: switch (writer.wireType) {  case WireType.StartGroup:  	writer.wireType = WireType.None;  	return new SubItemToken (-writer.fieldNumber);  case WireType.String:  	#if DEBUG  	if (writer.model != null && writer.model.ForwardsOnly) {  		throw new ProtoException ("Should not be buffering data");  	}  	#endif  	writer.wireType = WireType.None;  	DemandSpace (32' writer);  	// make some space in anticipation...  	writer.flushLock++;  	writer.position++;  	return new SubItemToken (writer.ioIndex++);  // leave 1 space (optimistic) for length  case WireType.Fixed32: {  	if (!allowFixed)  		throw CreateException (writer);  	DemandSpace (32' writer);  	// make some space in anticipation...  	writer.flushLock++;  	SubItemToken token = new SubItemToken (writer.ioIndex);  	ProtoWriter.IncrementedAndReset (4' writer);  	// leave 4 space (rigid) for length  	return token;  }  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,StartSubItem,The following statement contains a magic number: switch (writer.wireType) {  case WireType.StartGroup:  	writer.wireType = WireType.None;  	return new SubItemToken (-writer.fieldNumber);  case WireType.String:  	#if DEBUG  	if (writer.model != null && writer.model.ForwardsOnly) {  		throw new ProtoException ("Should not be buffering data");  	}  	#endif  	writer.wireType = WireType.None;  	DemandSpace (32' writer);  	// make some space in anticipation...  	writer.flushLock++;  	writer.position++;  	return new SubItemToken (writer.ioIndex++);  // leave 1 space (optimistic) for length  case WireType.Fixed32: {  	if (!allowFixed)  		throw CreateException (writer);  	DemandSpace (32' writer);  	// make some space in anticipation...  	writer.flushLock++;  	SubItemToken token = new SubItemToken (writer.ioIndex);  	ProtoWriter.IncrementedAndReset (4' writer);  	// leave 4 space (rigid) for length  	return token;  }  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,StartSubItem,The following statement contains a magic number: switch (writer.wireType) {  case WireType.StartGroup:  	writer.wireType = WireType.None;  	return new SubItemToken (-writer.fieldNumber);  case WireType.String:  	#if DEBUG  	if (writer.model != null && writer.model.ForwardsOnly) {  		throw new ProtoException ("Should not be buffering data");  	}  	#endif  	writer.wireType = WireType.None;  	DemandSpace (32' writer);  	// make some space in anticipation...  	writer.flushLock++;  	writer.position++;  	return new SubItemToken (writer.ioIndex++);  // leave 1 space (optimistic) for length  case WireType.Fixed32: {  	if (!allowFixed)  		throw CreateException (writer);  	DemandSpace (32' writer);  	// make some space in anticipation...  	writer.flushLock++;  	SubItemToken token = new SubItemToken (writer.ioIndex);  	ProtoWriter.IncrementedAndReset (4' writer);  	// leave 4 space (rigid) for length  	return token;  }  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,StartSubItem,The following statement contains a magic number: DemandSpace (32' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,StartSubItem,The following statement contains a magic number: DemandSpace (32' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,StartSubItem,The following statement contains a magic number: ProtoWriter.IncrementedAndReset (4' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: switch (style) {  case PrefixStyle.Fixed32:  	len = (int)((writer.ioIndex - value) - 4);  	ProtoWriter.WriteInt32ToBuffer (len' writer.ioBuffer' value);  	break;  case PrefixStyle.Fixed32BigEndian:  	len = (int)((writer.ioIndex - value) - 4);  	byte[] buffer = writer.ioBuffer;  	ProtoWriter.WriteInt32ToBuffer (len' buffer' value);  	// and swap the byte order  	byte b = buffer [value];  	buffer [value] = buffer [value + 3];  	buffer [value + 3] = b;  	b = buffer [value + 1];  	buffer [value + 1] = buffer [value + 2];  	buffer [value + 2] = b;  	break;  case PrefixStyle.Base128:  	// string - complicated because we only reserved one byte;  	// if the prefix turns out to need more than this then  	// we need to shuffle the existing data  	len = (int)((writer.ioIndex - value) - 1);  	int offset = 0;  	uint tmp = (uint)len;  	while ((tmp >>= 7) != 0)  		offset++;  	if (offset == 0) {  		writer.ioBuffer [value] = (byte)(len & 0x7F);  	}  	else {  		DemandSpace (offset' writer);  		byte[] blob = writer.ioBuffer;  		Helpers.BlockCopy (blob' value + 1' blob' value + 1 + offset' len);  		tmp = (uint)len;  		do {  			blob [value++] = (byte)((tmp & 0x7F) | 0x80);  		}  		while ((tmp >>= 7) != 0);  		blob [value - 1] = (byte)(blob [value - 1] & ~0x80);  		writer.position += offset;  		writer.ioIndex += offset;  	}  	break;  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: switch (style) {  case PrefixStyle.Fixed32:  	len = (int)((writer.ioIndex - value) - 4);  	ProtoWriter.WriteInt32ToBuffer (len' writer.ioBuffer' value);  	break;  case PrefixStyle.Fixed32BigEndian:  	len = (int)((writer.ioIndex - value) - 4);  	byte[] buffer = writer.ioBuffer;  	ProtoWriter.WriteInt32ToBuffer (len' buffer' value);  	// and swap the byte order  	byte b = buffer [value];  	buffer [value] = buffer [value + 3];  	buffer [value + 3] = b;  	b = buffer [value + 1];  	buffer [value + 1] = buffer [value + 2];  	buffer [value + 2] = b;  	break;  case PrefixStyle.Base128:  	// string - complicated because we only reserved one byte;  	// if the prefix turns out to need more than this then  	// we need to shuffle the existing data  	len = (int)((writer.ioIndex - value) - 1);  	int offset = 0;  	uint tmp = (uint)len;  	while ((tmp >>= 7) != 0)  		offset++;  	if (offset == 0) {  		writer.ioBuffer [value] = (byte)(len & 0x7F);  	}  	else {  		DemandSpace (offset' writer);  		byte[] blob = writer.ioBuffer;  		Helpers.BlockCopy (blob' value + 1' blob' value + 1 + offset' len);  		tmp = (uint)len;  		do {  			blob [value++] = (byte)((tmp & 0x7F) | 0x80);  		}  		while ((tmp >>= 7) != 0);  		blob [value - 1] = (byte)(blob [value - 1] & ~0x80);  		writer.position += offset;  		writer.ioIndex += offset;  	}  	break;  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: switch (style) {  case PrefixStyle.Fixed32:  	len = (int)((writer.ioIndex - value) - 4);  	ProtoWriter.WriteInt32ToBuffer (len' writer.ioBuffer' value);  	break;  case PrefixStyle.Fixed32BigEndian:  	len = (int)((writer.ioIndex - value) - 4);  	byte[] buffer = writer.ioBuffer;  	ProtoWriter.WriteInt32ToBuffer (len' buffer' value);  	// and swap the byte order  	byte b = buffer [value];  	buffer [value] = buffer [value + 3];  	buffer [value + 3] = b;  	b = buffer [value + 1];  	buffer [value + 1] = buffer [value + 2];  	buffer [value + 2] = b;  	break;  case PrefixStyle.Base128:  	// string - complicated because we only reserved one byte;  	// if the prefix turns out to need more than this then  	// we need to shuffle the existing data  	len = (int)((writer.ioIndex - value) - 1);  	int offset = 0;  	uint tmp = (uint)len;  	while ((tmp >>= 7) != 0)  		offset++;  	if (offset == 0) {  		writer.ioBuffer [value] = (byte)(len & 0x7F);  	}  	else {  		DemandSpace (offset' writer);  		byte[] blob = writer.ioBuffer;  		Helpers.BlockCopy (blob' value + 1' blob' value + 1 + offset' len);  		tmp = (uint)len;  		do {  			blob [value++] = (byte)((tmp & 0x7F) | 0x80);  		}  		while ((tmp >>= 7) != 0);  		blob [value - 1] = (byte)(blob [value - 1] & ~0x80);  		writer.position += offset;  		writer.ioIndex += offset;  	}  	break;  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: switch (style) {  case PrefixStyle.Fixed32:  	len = (int)((writer.ioIndex - value) - 4);  	ProtoWriter.WriteInt32ToBuffer (len' writer.ioBuffer' value);  	break;  case PrefixStyle.Fixed32BigEndian:  	len = (int)((writer.ioIndex - value) - 4);  	byte[] buffer = writer.ioBuffer;  	ProtoWriter.WriteInt32ToBuffer (len' buffer' value);  	// and swap the byte order  	byte b = buffer [value];  	buffer [value] = buffer [value + 3];  	buffer [value + 3] = b;  	b = buffer [value + 1];  	buffer [value + 1] = buffer [value + 2];  	buffer [value + 2] = b;  	break;  case PrefixStyle.Base128:  	// string - complicated because we only reserved one byte;  	// if the prefix turns out to need more than this then  	// we need to shuffle the existing data  	len = (int)((writer.ioIndex - value) - 1);  	int offset = 0;  	uint tmp = (uint)len;  	while ((tmp >>= 7) != 0)  		offset++;  	if (offset == 0) {  		writer.ioBuffer [value] = (byte)(len & 0x7F);  	}  	else {  		DemandSpace (offset' writer);  		byte[] blob = writer.ioBuffer;  		Helpers.BlockCopy (blob' value + 1' blob' value + 1 + offset' len);  		tmp = (uint)len;  		do {  			blob [value++] = (byte)((tmp & 0x7F) | 0x80);  		}  		while ((tmp >>= 7) != 0);  		blob [value - 1] = (byte)(blob [value - 1] & ~0x80);  		writer.position += offset;  		writer.ioIndex += offset;  	}  	break;  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: switch (style) {  case PrefixStyle.Fixed32:  	len = (int)((writer.ioIndex - value) - 4);  	ProtoWriter.WriteInt32ToBuffer (len' writer.ioBuffer' value);  	break;  case PrefixStyle.Fixed32BigEndian:  	len = (int)((writer.ioIndex - value) - 4);  	byte[] buffer = writer.ioBuffer;  	ProtoWriter.WriteInt32ToBuffer (len' buffer' value);  	// and swap the byte order  	byte b = buffer [value];  	buffer [value] = buffer [value + 3];  	buffer [value + 3] = b;  	b = buffer [value + 1];  	buffer [value + 1] = buffer [value + 2];  	buffer [value + 2] = b;  	break;  case PrefixStyle.Base128:  	// string - complicated because we only reserved one byte;  	// if the prefix turns out to need more than this then  	// we need to shuffle the existing data  	len = (int)((writer.ioIndex - value) - 1);  	int offset = 0;  	uint tmp = (uint)len;  	while ((tmp >>= 7) != 0)  		offset++;  	if (offset == 0) {  		writer.ioBuffer [value] = (byte)(len & 0x7F);  	}  	else {  		DemandSpace (offset' writer);  		byte[] blob = writer.ioBuffer;  		Helpers.BlockCopy (blob' value + 1' blob' value + 1 + offset' len);  		tmp = (uint)len;  		do {  			blob [value++] = (byte)((tmp & 0x7F) | 0x80);  		}  		while ((tmp >>= 7) != 0);  		blob [value - 1] = (byte)(blob [value - 1] & ~0x80);  		writer.position += offset;  		writer.ioIndex += offset;  	}  	break;  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: switch (style) {  case PrefixStyle.Fixed32:  	len = (int)((writer.ioIndex - value) - 4);  	ProtoWriter.WriteInt32ToBuffer (len' writer.ioBuffer' value);  	break;  case PrefixStyle.Fixed32BigEndian:  	len = (int)((writer.ioIndex - value) - 4);  	byte[] buffer = writer.ioBuffer;  	ProtoWriter.WriteInt32ToBuffer (len' buffer' value);  	// and swap the byte order  	byte b = buffer [value];  	buffer [value] = buffer [value + 3];  	buffer [value + 3] = b;  	b = buffer [value + 1];  	buffer [value + 1] = buffer [value + 2];  	buffer [value + 2] = b;  	break;  case PrefixStyle.Base128:  	// string - complicated because we only reserved one byte;  	// if the prefix turns out to need more than this then  	// we need to shuffle the existing data  	len = (int)((writer.ioIndex - value) - 1);  	int offset = 0;  	uint tmp = (uint)len;  	while ((tmp >>= 7) != 0)  		offset++;  	if (offset == 0) {  		writer.ioBuffer [value] = (byte)(len & 0x7F);  	}  	else {  		DemandSpace (offset' writer);  		byte[] blob = writer.ioBuffer;  		Helpers.BlockCopy (blob' value + 1' blob' value + 1 + offset' len);  		tmp = (uint)len;  		do {  			blob [value++] = (byte)((tmp & 0x7F) | 0x80);  		}  		while ((tmp >>= 7) != 0);  		blob [value - 1] = (byte)(blob [value - 1] & ~0x80);  		writer.position += offset;  		writer.ioIndex += offset;  	}  	break;  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: switch (style) {  case PrefixStyle.Fixed32:  	len = (int)((writer.ioIndex - value) - 4);  	ProtoWriter.WriteInt32ToBuffer (len' writer.ioBuffer' value);  	break;  case PrefixStyle.Fixed32BigEndian:  	len = (int)((writer.ioIndex - value) - 4);  	byte[] buffer = writer.ioBuffer;  	ProtoWriter.WriteInt32ToBuffer (len' buffer' value);  	// and swap the byte order  	byte b = buffer [value];  	buffer [value] = buffer [value + 3];  	buffer [value + 3] = b;  	b = buffer [value + 1];  	buffer [value + 1] = buffer [value + 2];  	buffer [value + 2] = b;  	break;  case PrefixStyle.Base128:  	// string - complicated because we only reserved one byte;  	// if the prefix turns out to need more than this then  	// we need to shuffle the existing data  	len = (int)((writer.ioIndex - value) - 1);  	int offset = 0;  	uint tmp = (uint)len;  	while ((tmp >>= 7) != 0)  		offset++;  	if (offset == 0) {  		writer.ioBuffer [value] = (byte)(len & 0x7F);  	}  	else {  		DemandSpace (offset' writer);  		byte[] blob = writer.ioBuffer;  		Helpers.BlockCopy (blob' value + 1' blob' value + 1 + offset' len);  		tmp = (uint)len;  		do {  			blob [value++] = (byte)((tmp & 0x7F) | 0x80);  		}  		while ((tmp >>= 7) != 0);  		blob [value - 1] = (byte)(blob [value - 1] & ~0x80);  		writer.position += offset;  		writer.ioIndex += offset;  	}  	break;  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: switch (style) {  case PrefixStyle.Fixed32:  	len = (int)((writer.ioIndex - value) - 4);  	ProtoWriter.WriteInt32ToBuffer (len' writer.ioBuffer' value);  	break;  case PrefixStyle.Fixed32BigEndian:  	len = (int)((writer.ioIndex - value) - 4);  	byte[] buffer = writer.ioBuffer;  	ProtoWriter.WriteInt32ToBuffer (len' buffer' value);  	// and swap the byte order  	byte b = buffer [value];  	buffer [value] = buffer [value + 3];  	buffer [value + 3] = b;  	b = buffer [value + 1];  	buffer [value + 1] = buffer [value + 2];  	buffer [value + 2] = b;  	break;  case PrefixStyle.Base128:  	// string - complicated because we only reserved one byte;  	// if the prefix turns out to need more than this then  	// we need to shuffle the existing data  	len = (int)((writer.ioIndex - value) - 1);  	int offset = 0;  	uint tmp = (uint)len;  	while ((tmp >>= 7) != 0)  		offset++;  	if (offset == 0) {  		writer.ioBuffer [value] = (byte)(len & 0x7F);  	}  	else {  		DemandSpace (offset' writer);  		byte[] blob = writer.ioBuffer;  		Helpers.BlockCopy (blob' value + 1' blob' value + 1 + offset' len);  		tmp = (uint)len;  		do {  			blob [value++] = (byte)((tmp & 0x7F) | 0x80);  		}  		while ((tmp >>= 7) != 0);  		blob [value - 1] = (byte)(blob [value - 1] & ~0x80);  		writer.position += offset;  		writer.ioIndex += offset;  	}  	break;  default:  	throw new ArgumentOutOfRangeException ("style");  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: len = (int)((writer.ioIndex - value) - 4);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: len = (int)((writer.ioIndex - value) - 4);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: buffer [value] = buffer [value + 3];  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: buffer [value + 3] = b;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: buffer [value + 1] = buffer [value + 2];  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: buffer [value + 2] = b;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: while ((tmp >>= 7) != 0)  	offset++;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: if (offset == 0) {  	writer.ioBuffer [value] = (byte)(len & 0x7F);  }  else {  	DemandSpace (offset' writer);  	byte[] blob = writer.ioBuffer;  	Helpers.BlockCopy (blob' value + 1' blob' value + 1 + offset' len);  	tmp = (uint)len;  	do {  		blob [value++] = (byte)((tmp & 0x7F) | 0x80);  	}  	while ((tmp >>= 7) != 0);  	blob [value - 1] = (byte)(blob [value - 1] & ~0x80);  	writer.position += offset;  	writer.ioIndex += offset;  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,EndSubItem,The following statement contains a magic number: do {  	blob [value++] = (byte)((tmp & 0x7F) | 0x80);  }  while ((tmp >>= 7) != 0);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteUInt32Variant,The following statement contains a magic number: DemandSpace (5' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteUInt32Variant,The following statement contains a magic number: do {  	writer.ioBuffer [writer.ioIndex++] = (byte)((value & 0x7F) | 0x80);  	count++;  }  while ((value >>= 7) != 0);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,Zig,The following statement contains a magic number: return (uint)((value << 1) ^ (value >> 31));  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,Zig,The following statement contains a magic number: return (ulong)((value << 1) ^ (value >> 63));  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteUInt64Variant,The following statement contains a magic number: DemandSpace (10' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteUInt64Variant,The following statement contains a magic number: do {  	writer.ioBuffer [writer.ioIndex++] = (byte)((value & 0x7F) | 0x80);  	count++;  }  while ((value >>= 7) != 0);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = (byte)(value >> 32);  	buffer [index + 5] = (byte)(value >> 40);  	buffer [index + 6] = (byte)(value >> 48);  	buffer [index + 7] = (byte)(value >> 56);  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt64Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt64Variant ((ulong)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  		buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  		buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  		buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  		buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  		buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  		buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  		buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  		buffer [index + 9] = 0x01;  		// sign bit  		IncrementedAndReset (10' writer);  	}  	return;  case WireType.Fixed32:  	checked {  		WriteInt32 ((int)value' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: DemandSpace (8' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 1] = (byte)(value >> 8);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 2] = (byte)(value >> 16);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 2] = (byte)(value >> 16);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 3] = (byte)(value >> 24);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 3] = (byte)(value >> 24);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 4] = (byte)(value >> 32);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 4] = (byte)(value >> 32);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 5] = (byte)(value >> 40);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 5] = (byte)(value >> 40);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 6] = (byte)(value >> 48);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 6] = (byte)(value >> 48);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 7] = (byte)(value >> 56);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 7] = (byte)(value >> 56);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: IncrementedAndReset (8' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: if (value >= 0) {  	WriteUInt64Variant ((ulong)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  	buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  	buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  	buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  	buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  	buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  	buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  	buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  	buffer [index + 9] = 0x01;  	// sign bit  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: DemandSpace (10' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 1] = (byte)((int)(value >> 7) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 2] = (byte)((int)(value >> 14) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 3] = (byte)((int)(value >> 21) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 4] = (byte)((int)(value >> 28) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 5] = (byte)((int)(value >> 35) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 6] = (byte)((int)(value >> 42) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 7] = (byte)((int)(value >> 49) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 8] = (byte)((int)(value >> 56) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: buffer [index + 9] = 0x01;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt64,The following statement contains a magic number: IncrementedAndReset (10' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32ToBuffer,The following statement contains a magic number: buffer [index + 1] = (byte)(value >> 8);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32ToBuffer,The following statement contains a magic number: buffer [index + 2] = (byte)(value >> 16);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32ToBuffer,The following statement contains a magic number: buffer [index + 2] = (byte)(value >> 16);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32ToBuffer,The following statement contains a magic number: buffer [index + 3] = (byte)(value >> 24);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32ToBuffer,The following statement contains a magic number: buffer [index + 3] = (byte)(value >> 24);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: switch (writer.wireType) {  case WireType.Fixed32:  	DemandSpace (4' writer);  	WriteInt32ToBuffer (value' writer.ioBuffer' writer.ioIndex);  	IncrementedAndReset (4' writer);  	return;  case WireType.Fixed64:  	DemandSpace (8' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)value;  	buffer [index + 1] = (byte)(value >> 8);  	buffer [index + 2] = (byte)(value >> 16);  	buffer [index + 3] = (byte)(value >> 24);  	buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  	IncrementedAndReset (8' writer);  	return;  case WireType.SignedVariant:  	WriteUInt32Variant (Zig (value)' writer);  	writer.wireType = WireType.None;  	return;  case WireType.Variant:  	if (value >= 0) {  		WriteUInt32Variant ((uint)value' writer);  		writer.wireType = WireType.None;  	}  	else {  		DemandSpace (10' writer);  		buffer = writer.ioBuffer;  		index = writer.ioIndex;  		buffer [index] = (byte)(value | 0x80);  		buffer [index + 1] = (byte)((value >> 7) | 0x80);  		buffer [index + 2] = (byte)((value >> 14) | 0x80);  		buffer [index + 3] = (byte)((value >> 21) | 0x80);  		buffer [index + 4] = (byte)((value >> 28) | 0x80);  		buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  		buffer [index + 9] = (byte)0x01;  		IncrementedAndReset (10' writer);  	}  	return;  default:  	throw CreateException (writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: DemandSpace (4' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: IncrementedAndReset (4' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: DemandSpace (8' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 1] = (byte)(value >> 8);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 2] = (byte)(value >> 16);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 2] = (byte)(value >> 16);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 3] = (byte)(value >> 24);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 3] = (byte)(value >> 24);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 4] = buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = 0;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: IncrementedAndReset (8' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: if (value >= 0) {  	WriteUInt32Variant ((uint)value' writer);  	writer.wireType = WireType.None;  }  else {  	DemandSpace (10' writer);  	buffer = writer.ioBuffer;  	index = writer.ioIndex;  	buffer [index] = (byte)(value | 0x80);  	buffer [index + 1] = (byte)((value >> 7) | 0x80);  	buffer [index + 2] = (byte)((value >> 14) | 0x80);  	buffer [index + 3] = (byte)((value >> 21) | 0x80);  	buffer [index + 4] = (byte)((value >> 28) | 0x80);  	buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  	buffer [index + 9] = (byte)0x01;  	IncrementedAndReset (10' writer);  }  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: DemandSpace (10' writer);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 1] = (byte)((value >> 7) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 2] = (byte)((value >> 14) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 2] = (byte)((value >> 14) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 3] = (byte)((value >> 21) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 3] = (byte)((value >> 21) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 4] = (byte)((value >> 28) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 4] = (byte)((value >> 28) | 0x80);  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 5] = buffer [index + 6] = buffer [index + 7] = buffer [index + 8] = (byte)0xFF;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: buffer [index + 9] = (byte)0x01;  
Magic Number,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteInt32,The following statement contains a magic number: IncrementedAndReset (10' writer);  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: foreach (MemberInfo member in foundList) {  	if (member.DeclaringType != type)  		continue;  	if (member.IsDefined (model.MapType (typeof(ProtoIgnoreAttribute))' true))  		continue;  	if (partialIgnores != null && partialIgnores.Contains (member.Name))  		continue;  	bool forced = false' isPublic' isField;  	Type effectiveType;  	PropertyInfo property;  	FieldInfo field;  	MethodInfo method;  	if ((property = member as PropertyInfo) != null) {  		if (isEnum)  			continue;  		// wasn't expecting any props!  		effectiveType = property.PropertyType;  		isPublic = Helpers.GetGetMethod (property' false' false) != null;  		isField = false;  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((field = member as FieldInfo) != null) {  		effectiveType = field.FieldType;  		isPublic = field.IsPublic;  		isField = true;  		if (isEnum && !field.IsStatic) {  			// only care about static things on enums; WinRT has a __value instance field!  			continue;  		}  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((method = member as MethodInfo) != null) {  		if (isEnum)  			continue;  		AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  		if (memberAttribs != null && memberAttribs.Length > 0) {  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  		}  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: foreach (MemberInfo member in foundList) {  	if (member.DeclaringType != type)  		continue;  	if (member.IsDefined (model.MapType (typeof(ProtoIgnoreAttribute))' true))  		continue;  	if (partialIgnores != null && partialIgnores.Contains (member.Name))  		continue;  	bool forced = false' isPublic' isField;  	Type effectiveType;  	PropertyInfo property;  	FieldInfo field;  	MethodInfo method;  	if ((property = member as PropertyInfo) != null) {  		if (isEnum)  			continue;  		// wasn't expecting any props!  		effectiveType = property.PropertyType;  		isPublic = Helpers.GetGetMethod (property' false' false) != null;  		isField = false;  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((field = member as FieldInfo) != null) {  		effectiveType = field.FieldType;  		isPublic = field.IsPublic;  		isField = true;  		if (isEnum && !field.IsStatic) {  			// only care about static things on enums; WinRT has a __value instance field!  			continue;  		}  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((method = member as MethodInfo) != null) {  		if (isEnum)  			continue;  		AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  		if (memberAttribs != null && memberAttribs.Length > 0) {  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  		}  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: foreach (MemberInfo member in foundList) {  	if (member.DeclaringType != type)  		continue;  	if (member.IsDefined (model.MapType (typeof(ProtoIgnoreAttribute))' true))  		continue;  	if (partialIgnores != null && partialIgnores.Contains (member.Name))  		continue;  	bool forced = false' isPublic' isField;  	Type effectiveType;  	PropertyInfo property;  	FieldInfo field;  	MethodInfo method;  	if ((property = member as PropertyInfo) != null) {  		if (isEnum)  			continue;  		// wasn't expecting any props!  		effectiveType = property.PropertyType;  		isPublic = Helpers.GetGetMethod (property' false' false) != null;  		isField = false;  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((field = member as FieldInfo) != null) {  		effectiveType = field.FieldType;  		isPublic = field.IsPublic;  		isField = true;  		if (isEnum && !field.IsStatic) {  			// only care about static things on enums; WinRT has a __value instance field!  			continue;  		}  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((method = member as MethodInfo) != null) {  		if (isEnum)  			continue;  		AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  		if (memberAttribs != null && memberAttribs.Length > 0) {  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  		}  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: foreach (MemberInfo member in foundList) {  	if (member.DeclaringType != type)  		continue;  	if (member.IsDefined (model.MapType (typeof(ProtoIgnoreAttribute))' true))  		continue;  	if (partialIgnores != null && partialIgnores.Contains (member.Name))  		continue;  	bool forced = false' isPublic' isField;  	Type effectiveType;  	PropertyInfo property;  	FieldInfo field;  	MethodInfo method;  	if ((property = member as PropertyInfo) != null) {  		if (isEnum)  			continue;  		// wasn't expecting any props!  		effectiveType = property.PropertyType;  		isPublic = Helpers.GetGetMethod (property' false' false) != null;  		isField = false;  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((field = member as FieldInfo) != null) {  		effectiveType = field.FieldType;  		isPublic = field.IsPublic;  		isField = true;  		if (isEnum && !field.IsStatic) {  			// only care about static things on enums; WinRT has a __value instance field!  			continue;  		}  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((method = member as MethodInfo) != null) {  		if (isEnum)  			continue;  		AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  		if (memberAttribs != null && memberAttribs.Length > 0) {  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  		}  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: foreach (MemberInfo member in foundList) {  	if (member.DeclaringType != type)  		continue;  	if (member.IsDefined (model.MapType (typeof(ProtoIgnoreAttribute))' true))  		continue;  	if (partialIgnores != null && partialIgnores.Contains (member.Name))  		continue;  	bool forced = false' isPublic' isField;  	Type effectiveType;  	PropertyInfo property;  	FieldInfo field;  	MethodInfo method;  	if ((property = member as PropertyInfo) != null) {  		if (isEnum)  			continue;  		// wasn't expecting any props!  		effectiveType = property.PropertyType;  		isPublic = Helpers.GetGetMethod (property' false' false) != null;  		isField = false;  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((field = member as FieldInfo) != null) {  		effectiveType = field.FieldType;  		isPublic = field.IsPublic;  		isField = true;  		if (isEnum && !field.IsStatic) {  			// only care about static things on enums; WinRT has a __value instance field!  			continue;  		}  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((method = member as MethodInfo) != null) {  		if (isEnum)  			continue;  		AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  		if (memberAttribs != null && memberAttribs.Length > 0) {  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  		}  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: foreach (MemberInfo member in foundList) {  	if (member.DeclaringType != type)  		continue;  	if (member.IsDefined (model.MapType (typeof(ProtoIgnoreAttribute))' true))  		continue;  	if (partialIgnores != null && partialIgnores.Contains (member.Name))  		continue;  	bool forced = false' isPublic' isField;  	Type effectiveType;  	PropertyInfo property;  	FieldInfo field;  	MethodInfo method;  	if ((property = member as PropertyInfo) != null) {  		if (isEnum)  			continue;  		// wasn't expecting any props!  		effectiveType = property.PropertyType;  		isPublic = Helpers.GetGetMethod (property' false' false) != null;  		isField = false;  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((field = member as FieldInfo) != null) {  		effectiveType = field.FieldType;  		isPublic = field.IsPublic;  		isField = true;  		if (isEnum && !field.IsStatic) {  			// only care about static things on enums; WinRT has a __value instance field!  			continue;  		}  		ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  	}  	else if ((method = member as MethodInfo) != null) {  		if (isEnum)  			continue;  		AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  		if (memberAttribs != null && memberAttribs.Length > 0) {  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  			CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  			CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  		}  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((property = member as PropertyInfo) != null) {  	if (isEnum)  		continue;  	// wasn't expecting any props!  	effectiveType = property.PropertyType;  	isPublic = Helpers.GetGetMethod (property' false' false) != null;  	isField = false;  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((property = member as PropertyInfo) != null) {  	if (isEnum)  		continue;  	// wasn't expecting any props!  	effectiveType = property.PropertyType;  	isPublic = Helpers.GetGetMethod (property' false' false) != null;  	isField = false;  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((property = member as PropertyInfo) != null) {  	if (isEnum)  		continue;  	// wasn't expecting any props!  	effectiveType = property.PropertyType;  	isPublic = Helpers.GetGetMethod (property' false' false) != null;  	isField = false;  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((property = member as PropertyInfo) != null) {  	if (isEnum)  		continue;  	// wasn't expecting any props!  	effectiveType = property.PropertyType;  	isPublic = Helpers.GetGetMethod (property' false' false) != null;  	isField = false;  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((property = member as PropertyInfo) != null) {  	if (isEnum)  		continue;  	// wasn't expecting any props!  	effectiveType = property.PropertyType;  	isPublic = Helpers.GetGetMethod (property' false' false) != null;  	isField = false;  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((property = member as PropertyInfo) != null) {  	if (isEnum)  		continue;  	// wasn't expecting any props!  	effectiveType = property.PropertyType;  	isPublic = Helpers.GetGetMethod (property' false' false) != null;  	isField = false;  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((field = member as FieldInfo) != null) {  	effectiveType = field.FieldType;  	isPublic = field.IsPublic;  	isField = true;  	if (isEnum && !field.IsStatic) {  		// only care about static things on enums; WinRT has a __value instance field!  		continue;  	}  	ApplyDefaultBehaviour_AddMembers (model' family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType);  }  else if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if ((method = member as MethodInfo) != null) {  	if (isEnum)  		continue;  	AttributeMap[] memberAttribs = AttributeMap.Create (model' method' false);  	if (memberAttribs != null && memberAttribs.Length > 0) {  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  		CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  		CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (memberAttribs != null && memberAttribs.Length > 0) {  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (memberAttribs != null && memberAttribs.Length > 0) {  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (memberAttribs != null && memberAttribs.Length > 0) {  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (memberAttribs != null && memberAttribs.Length > 0) {  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (memberAttribs != null && memberAttribs.Length > 0) {  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (memberAttribs != null && memberAttribs.Length > 0) {  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeSerializationAttribute"' ref callbacks' 0);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterSerializationAttribute"' ref callbacks' 1);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  	CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  	CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoBeforeDeserializationAttribute"' ref callbacks' 2);  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: CheckForCallback (method' memberAttribs' "ProtoBuf.ProtoAfterDeserializationAttribute"' ref callbacks' 3);  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializingAttribute"' ref callbacks' 4);  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnSerializedAttribute"' ref callbacks' 5);  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializingAttribute"' ref callbacks' 6);  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: CheckForCallback (method' memberAttribs' "System.Runtime.Serialization.OnDeserializedAttribute"' ref callbacks' 7);  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (callbacks != null) {  	SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (callbacks != null) {  	SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (callbacks != null) {  	SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (callbacks != null) {  	SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (callbacks != null) {  	SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: if (callbacks != null) {  	SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks (Coalesce (callbacks' 0' 4)' Coalesce (callbacks' 1' 5)' Coalesce (callbacks' 2' 6)' Coalesce (callbacks' 3' 7));  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,CheckForCallback,The following statement contains a magic number: for (int i = 0; i < attributes.Length; i++) {  	if (attributes [i].AttributeType.FullName == callbackTypeName) {  		if (callbacks == null) {  			callbacks = new MethodInfo[8];  		}  		else if (callbacks [index] != null) {  			#if WINRT || FEAT_IKVM  			                        Type reflected = method.DeclaringType; #else  			Type reflected = method.ReflectedType;  			#endif  			throw new ProtoException ("Duplicate " + callbackTypeName + " callbacks on " + reflected.FullName);  		}  		callbacks [index] = method;  	}  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,CheckForCallback,The following statement contains a magic number: if (attributes [i].AttributeType.FullName == callbackTypeName) {  	if (callbacks == null) {  		callbacks = new MethodInfo[8];  	}  	else if (callbacks [index] != null) {  		#if WINRT || FEAT_IKVM  		                        Type reflected = method.DeclaringType; #else  		Type reflected = method.ReflectedType;  		#endif  		throw new ProtoException ("Duplicate " + callbackTypeName + " callbacks on " + reflected.FullName);  	}  	callbacks [index] = method;  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,CheckForCallback,The following statement contains a magic number: if (callbacks == null) {  	callbacks = new MethodInfo[8];  }  else if (callbacks [index] != null) {  	#if WINRT || FEAT_IKVM  	                        Type reflected = method.DeclaringType; #else  	Type reflected = method.ReflectedType;  	#endif  	throw new ProtoException ("Duplicate " + callbackTypeName + " callbacks on " + reflected.FullName);  }  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,CheckForCallback,The following statement contains a magic number: callbacks = new MethodInfo[8];  
Magic Number,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,NewLine,The following statement contains a magic number: return Helpers.AppendLine (builder).Append (' '' indent * 3);  
Magic Number,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,GetListItemType,The following statement contains a magic number: switch (candidates.Count) {  case 0:  	return null;  case 1:  	return (Type)candidates [0];  case 2:  	if (CheckDictionaryAccessors (model' (Type)candidates [0]' (Type)candidates [1]))  		return (Type)candidates [0];  	if (CheckDictionaryAccessors (model' (Type)candidates [1]' (Type)candidates [0]))  		return (Type)candidates [1];  	break;  }  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,GetIntWireType,The following statement contains a magic number: switch (format) {  case DataFormat.ZigZag:  	return WireType.SignedVariant;  case DataFormat.FixedSize:  	return width == 32 ? WireType.Fixed32 : WireType.Fixed64;  case DataFormat.TwosComplement:  case DataFormat.Default:  	return WireType.Variant;  default:  	throw new InvalidOperationException ();  }  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,GetIntWireType,The following statement contains a magic number: return width == 32 ? WireType.Fixed32 : WireType.Fixed64;  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code) {  case ProtoTypeCode.Int32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int32Serializer (model);  case ProtoTypeCode.UInt32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt32Serializer (model);  case ProtoTypeCode.Int64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new Int64Serializer (model);  case ProtoTypeCode.UInt64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new UInt64Serializer (model);  case ProtoTypeCode.String:  	defaultWireType = WireType.String;  	if (asReference) {  		return new NetObjectSerializer (model' model.MapType (typeof(string))' 0' BclHelpers.NetObjectOptions.AsReference);  	}  	return new StringSerializer (model);  case ProtoTypeCode.Single:  	defaultWireType = WireType.Fixed32;  	return new SingleSerializer (model);  case ProtoTypeCode.Double:  	defaultWireType = WireType.Fixed64;  	return new DoubleSerializer (model);  case ProtoTypeCode.Boolean:  	defaultWireType = WireType.Variant;  	return new BooleanSerializer (model);  case ProtoTypeCode.DateTime:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new DateTimeSerializer (model);  case ProtoTypeCode.Decimal:  	defaultWireType = WireType.String;  	return new DecimalSerializer (model);  case ProtoTypeCode.Byte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new ByteSerializer (model);  case ProtoTypeCode.SByte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new SByteSerializer (model);  case ProtoTypeCode.Char:  	defaultWireType = WireType.Variant;  	return new CharSerializer (model);  case ProtoTypeCode.Int16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int16Serializer (model);  case ProtoTypeCode.UInt16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt16Serializer (model);  case ProtoTypeCode.TimeSpan:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new TimeSpanSerializer (model);  case ProtoTypeCode.Guid:  	defaultWireType = WireType.String;  	return new GuidSerializer (model);  case ProtoTypeCode.Uri:  	defaultWireType = WireType.String;  	return new StringSerializer (model);  // treat as string; wrapped in decorator later  case ProtoTypeCode.ByteArray:  	defaultWireType = WireType.String;  	return new BlobSerializer (model' overwriteList);  case ProtoTypeCode.Type:  	defaultWireType = WireType.String;  	return new SystemTypeSerializer (model);  }  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code) {  case ProtoTypeCode.Int32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int32Serializer (model);  case ProtoTypeCode.UInt32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt32Serializer (model);  case ProtoTypeCode.Int64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new Int64Serializer (model);  case ProtoTypeCode.UInt64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new UInt64Serializer (model);  case ProtoTypeCode.String:  	defaultWireType = WireType.String;  	if (asReference) {  		return new NetObjectSerializer (model' model.MapType (typeof(string))' 0' BclHelpers.NetObjectOptions.AsReference);  	}  	return new StringSerializer (model);  case ProtoTypeCode.Single:  	defaultWireType = WireType.Fixed32;  	return new SingleSerializer (model);  case ProtoTypeCode.Double:  	defaultWireType = WireType.Fixed64;  	return new DoubleSerializer (model);  case ProtoTypeCode.Boolean:  	defaultWireType = WireType.Variant;  	return new BooleanSerializer (model);  case ProtoTypeCode.DateTime:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new DateTimeSerializer (model);  case ProtoTypeCode.Decimal:  	defaultWireType = WireType.String;  	return new DecimalSerializer (model);  case ProtoTypeCode.Byte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new ByteSerializer (model);  case ProtoTypeCode.SByte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new SByteSerializer (model);  case ProtoTypeCode.Char:  	defaultWireType = WireType.Variant;  	return new CharSerializer (model);  case ProtoTypeCode.Int16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int16Serializer (model);  case ProtoTypeCode.UInt16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt16Serializer (model);  case ProtoTypeCode.TimeSpan:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new TimeSpanSerializer (model);  case ProtoTypeCode.Guid:  	defaultWireType = WireType.String;  	return new GuidSerializer (model);  case ProtoTypeCode.Uri:  	defaultWireType = WireType.String;  	return new StringSerializer (model);  // treat as string; wrapped in decorator later  case ProtoTypeCode.ByteArray:  	defaultWireType = WireType.String;  	return new BlobSerializer (model' overwriteList);  case ProtoTypeCode.Type:  	defaultWireType = WireType.String;  	return new SystemTypeSerializer (model);  }  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code) {  case ProtoTypeCode.Int32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int32Serializer (model);  case ProtoTypeCode.UInt32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt32Serializer (model);  case ProtoTypeCode.Int64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new Int64Serializer (model);  case ProtoTypeCode.UInt64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new UInt64Serializer (model);  case ProtoTypeCode.String:  	defaultWireType = WireType.String;  	if (asReference) {  		return new NetObjectSerializer (model' model.MapType (typeof(string))' 0' BclHelpers.NetObjectOptions.AsReference);  	}  	return new StringSerializer (model);  case ProtoTypeCode.Single:  	defaultWireType = WireType.Fixed32;  	return new SingleSerializer (model);  case ProtoTypeCode.Double:  	defaultWireType = WireType.Fixed64;  	return new DoubleSerializer (model);  case ProtoTypeCode.Boolean:  	defaultWireType = WireType.Variant;  	return new BooleanSerializer (model);  case ProtoTypeCode.DateTime:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new DateTimeSerializer (model);  case ProtoTypeCode.Decimal:  	defaultWireType = WireType.String;  	return new DecimalSerializer (model);  case ProtoTypeCode.Byte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new ByteSerializer (model);  case ProtoTypeCode.SByte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new SByteSerializer (model);  case ProtoTypeCode.Char:  	defaultWireType = WireType.Variant;  	return new CharSerializer (model);  case ProtoTypeCode.Int16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int16Serializer (model);  case ProtoTypeCode.UInt16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt16Serializer (model);  case ProtoTypeCode.TimeSpan:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new TimeSpanSerializer (model);  case ProtoTypeCode.Guid:  	defaultWireType = WireType.String;  	return new GuidSerializer (model);  case ProtoTypeCode.Uri:  	defaultWireType = WireType.String;  	return new StringSerializer (model);  // treat as string; wrapped in decorator later  case ProtoTypeCode.ByteArray:  	defaultWireType = WireType.String;  	return new BlobSerializer (model' overwriteList);  case ProtoTypeCode.Type:  	defaultWireType = WireType.String;  	return new SystemTypeSerializer (model);  }  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code) {  case ProtoTypeCode.Int32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int32Serializer (model);  case ProtoTypeCode.UInt32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt32Serializer (model);  case ProtoTypeCode.Int64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new Int64Serializer (model);  case ProtoTypeCode.UInt64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new UInt64Serializer (model);  case ProtoTypeCode.String:  	defaultWireType = WireType.String;  	if (asReference) {  		return new NetObjectSerializer (model' model.MapType (typeof(string))' 0' BclHelpers.NetObjectOptions.AsReference);  	}  	return new StringSerializer (model);  case ProtoTypeCode.Single:  	defaultWireType = WireType.Fixed32;  	return new SingleSerializer (model);  case ProtoTypeCode.Double:  	defaultWireType = WireType.Fixed64;  	return new DoubleSerializer (model);  case ProtoTypeCode.Boolean:  	defaultWireType = WireType.Variant;  	return new BooleanSerializer (model);  case ProtoTypeCode.DateTime:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new DateTimeSerializer (model);  case ProtoTypeCode.Decimal:  	defaultWireType = WireType.String;  	return new DecimalSerializer (model);  case ProtoTypeCode.Byte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new ByteSerializer (model);  case ProtoTypeCode.SByte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new SByteSerializer (model);  case ProtoTypeCode.Char:  	defaultWireType = WireType.Variant;  	return new CharSerializer (model);  case ProtoTypeCode.Int16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int16Serializer (model);  case ProtoTypeCode.UInt16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt16Serializer (model);  case ProtoTypeCode.TimeSpan:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new TimeSpanSerializer (model);  case ProtoTypeCode.Guid:  	defaultWireType = WireType.String;  	return new GuidSerializer (model);  case ProtoTypeCode.Uri:  	defaultWireType = WireType.String;  	return new StringSerializer (model);  // treat as string; wrapped in decorator later  case ProtoTypeCode.ByteArray:  	defaultWireType = WireType.String;  	return new BlobSerializer (model' overwriteList);  case ProtoTypeCode.Type:  	defaultWireType = WireType.String;  	return new SystemTypeSerializer (model);  }  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code) {  case ProtoTypeCode.Int32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int32Serializer (model);  case ProtoTypeCode.UInt32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt32Serializer (model);  case ProtoTypeCode.Int64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new Int64Serializer (model);  case ProtoTypeCode.UInt64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new UInt64Serializer (model);  case ProtoTypeCode.String:  	defaultWireType = WireType.String;  	if (asReference) {  		return new NetObjectSerializer (model' model.MapType (typeof(string))' 0' BclHelpers.NetObjectOptions.AsReference);  	}  	return new StringSerializer (model);  case ProtoTypeCode.Single:  	defaultWireType = WireType.Fixed32;  	return new SingleSerializer (model);  case ProtoTypeCode.Double:  	defaultWireType = WireType.Fixed64;  	return new DoubleSerializer (model);  case ProtoTypeCode.Boolean:  	defaultWireType = WireType.Variant;  	return new BooleanSerializer (model);  case ProtoTypeCode.DateTime:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new DateTimeSerializer (model);  case ProtoTypeCode.Decimal:  	defaultWireType = WireType.String;  	return new DecimalSerializer (model);  case ProtoTypeCode.Byte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new ByteSerializer (model);  case ProtoTypeCode.SByte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new SByteSerializer (model);  case ProtoTypeCode.Char:  	defaultWireType = WireType.Variant;  	return new CharSerializer (model);  case ProtoTypeCode.Int16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int16Serializer (model);  case ProtoTypeCode.UInt16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt16Serializer (model);  case ProtoTypeCode.TimeSpan:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new TimeSpanSerializer (model);  case ProtoTypeCode.Guid:  	defaultWireType = WireType.String;  	return new GuidSerializer (model);  case ProtoTypeCode.Uri:  	defaultWireType = WireType.String;  	return new StringSerializer (model);  // treat as string; wrapped in decorator later  case ProtoTypeCode.ByteArray:  	defaultWireType = WireType.String;  	return new BlobSerializer (model' overwriteList);  case ProtoTypeCode.Type:  	defaultWireType = WireType.String;  	return new SystemTypeSerializer (model);  }  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code) {  case ProtoTypeCode.Int32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int32Serializer (model);  case ProtoTypeCode.UInt32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt32Serializer (model);  case ProtoTypeCode.Int64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new Int64Serializer (model);  case ProtoTypeCode.UInt64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new UInt64Serializer (model);  case ProtoTypeCode.String:  	defaultWireType = WireType.String;  	if (asReference) {  		return new NetObjectSerializer (model' model.MapType (typeof(string))' 0' BclHelpers.NetObjectOptions.AsReference);  	}  	return new StringSerializer (model);  case ProtoTypeCode.Single:  	defaultWireType = WireType.Fixed32;  	return new SingleSerializer (model);  case ProtoTypeCode.Double:  	defaultWireType = WireType.Fixed64;  	return new DoubleSerializer (model);  case ProtoTypeCode.Boolean:  	defaultWireType = WireType.Variant;  	return new BooleanSerializer (model);  case ProtoTypeCode.DateTime:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new DateTimeSerializer (model);  case ProtoTypeCode.Decimal:  	defaultWireType = WireType.String;  	return new DecimalSerializer (model);  case ProtoTypeCode.Byte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new ByteSerializer (model);  case ProtoTypeCode.SByte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new SByteSerializer (model);  case ProtoTypeCode.Char:  	defaultWireType = WireType.Variant;  	return new CharSerializer (model);  case ProtoTypeCode.Int16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int16Serializer (model);  case ProtoTypeCode.UInt16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt16Serializer (model);  case ProtoTypeCode.TimeSpan:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new TimeSpanSerializer (model);  case ProtoTypeCode.Guid:  	defaultWireType = WireType.String;  	return new GuidSerializer (model);  case ProtoTypeCode.Uri:  	defaultWireType = WireType.String;  	return new StringSerializer (model);  // treat as string; wrapped in decorator later  case ProtoTypeCode.ByteArray:  	defaultWireType = WireType.String;  	return new BlobSerializer (model' overwriteList);  case ProtoTypeCode.Type:  	defaultWireType = WireType.String;  	return new SystemTypeSerializer (model);  }  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code) {  case ProtoTypeCode.Int32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int32Serializer (model);  case ProtoTypeCode.UInt32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt32Serializer (model);  case ProtoTypeCode.Int64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new Int64Serializer (model);  case ProtoTypeCode.UInt64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new UInt64Serializer (model);  case ProtoTypeCode.String:  	defaultWireType = WireType.String;  	if (asReference) {  		return new NetObjectSerializer (model' model.MapType (typeof(string))' 0' BclHelpers.NetObjectOptions.AsReference);  	}  	return new StringSerializer (model);  case ProtoTypeCode.Single:  	defaultWireType = WireType.Fixed32;  	return new SingleSerializer (model);  case ProtoTypeCode.Double:  	defaultWireType = WireType.Fixed64;  	return new DoubleSerializer (model);  case ProtoTypeCode.Boolean:  	defaultWireType = WireType.Variant;  	return new BooleanSerializer (model);  case ProtoTypeCode.DateTime:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new DateTimeSerializer (model);  case ProtoTypeCode.Decimal:  	defaultWireType = WireType.String;  	return new DecimalSerializer (model);  case ProtoTypeCode.Byte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new ByteSerializer (model);  case ProtoTypeCode.SByte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new SByteSerializer (model);  case ProtoTypeCode.Char:  	defaultWireType = WireType.Variant;  	return new CharSerializer (model);  case ProtoTypeCode.Int16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int16Serializer (model);  case ProtoTypeCode.UInt16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt16Serializer (model);  case ProtoTypeCode.TimeSpan:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new TimeSpanSerializer (model);  case ProtoTypeCode.Guid:  	defaultWireType = WireType.String;  	return new GuidSerializer (model);  case ProtoTypeCode.Uri:  	defaultWireType = WireType.String;  	return new StringSerializer (model);  // treat as string; wrapped in decorator later  case ProtoTypeCode.ByteArray:  	defaultWireType = WireType.String;  	return new BlobSerializer (model' overwriteList);  case ProtoTypeCode.Type:  	defaultWireType = WireType.String;  	return new SystemTypeSerializer (model);  }  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code) {  case ProtoTypeCode.Int32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int32Serializer (model);  case ProtoTypeCode.UInt32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt32Serializer (model);  case ProtoTypeCode.Int64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new Int64Serializer (model);  case ProtoTypeCode.UInt64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new UInt64Serializer (model);  case ProtoTypeCode.String:  	defaultWireType = WireType.String;  	if (asReference) {  		return new NetObjectSerializer (model' model.MapType (typeof(string))' 0' BclHelpers.NetObjectOptions.AsReference);  	}  	return new StringSerializer (model);  case ProtoTypeCode.Single:  	defaultWireType = WireType.Fixed32;  	return new SingleSerializer (model);  case ProtoTypeCode.Double:  	defaultWireType = WireType.Fixed64;  	return new DoubleSerializer (model);  case ProtoTypeCode.Boolean:  	defaultWireType = WireType.Variant;  	return new BooleanSerializer (model);  case ProtoTypeCode.DateTime:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new DateTimeSerializer (model);  case ProtoTypeCode.Decimal:  	defaultWireType = WireType.String;  	return new DecimalSerializer (model);  case ProtoTypeCode.Byte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new ByteSerializer (model);  case ProtoTypeCode.SByte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new SByteSerializer (model);  case ProtoTypeCode.Char:  	defaultWireType = WireType.Variant;  	return new CharSerializer (model);  case ProtoTypeCode.Int16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int16Serializer (model);  case ProtoTypeCode.UInt16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt16Serializer (model);  case ProtoTypeCode.TimeSpan:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new TimeSpanSerializer (model);  case ProtoTypeCode.Guid:  	defaultWireType = WireType.String;  	return new GuidSerializer (model);  case ProtoTypeCode.Uri:  	defaultWireType = WireType.String;  	return new StringSerializer (model);  // treat as string; wrapped in decorator later  case ProtoTypeCode.ByteArray:  	defaultWireType = WireType.String;  	return new BlobSerializer (model' overwriteList);  case ProtoTypeCode.Type:  	defaultWireType = WireType.String;  	return new SystemTypeSerializer (model);  }  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: defaultWireType = GetIntWireType (dataFormat' 32);  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: defaultWireType = GetIntWireType (dataFormat' 32);  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: defaultWireType = GetIntWireType (dataFormat' 64);  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: defaultWireType = GetIntWireType (dataFormat' 64);  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: defaultWireType = GetIntWireType (dataFormat' 32);  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: defaultWireType = GetIntWireType (dataFormat' 32);  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: defaultWireType = GetIntWireType (dataFormat' 32);  
Magic Number,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: defaultWireType = GetIntWireType (dataFormat' 32);  
Magic Number,ProtoBuf.Serializers,ImmutableCollectionDecorator,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Serializers\ImmutableCollectionDecorator.cs,IdentifyImmutable,The following statement contains a magic number: switch (typeArgs.Length) {  case 1:  	effectiveType = typeArgs;  	break;  // fine  case 2:  	Type kvp = model.MapType (typeof(System.Collections.Generic.KeyValuePair<' >));  	if (kvp == null)  		return false;  	kvp = kvp.MakeGenericType (typeArgs);  	effectiveType = new Type[] {  		kvp  	};  	break;  default:  	return false;  // no clue!  }  
Missing Default,ProtoBuf,Helpers,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Helpers.cs,GetTypeCode,The following switch statement is missing a default case: switch (code) {  case TypeCode.Empty:  case TypeCode.Boolean:  case TypeCode.Char:  case TypeCode.SByte:  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  case TypeCode.DateTime:  case TypeCode.String:  	return (ProtoTypeCode)code;  }  
Missing Default,ProtoBuf,ProtoWriter,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\ProtoWriter.cs,WriteBytes,The following switch statement is missing a default case: switch (writer.wireType) {  case WireType.Fixed32:  	if (length != 4)  		throw new ArgumentException ("length");  	goto CopyFixedLength;  // ugly but effective  case WireType.Fixed64:  	if (length != 8)  		throw new ArgumentException ("length");  	goto CopyFixedLength;  // ugly but effective  case WireType.String:  	WriteUInt32Variant ((uint)length' writer);  	writer.wireType = WireType.None;  	if (length == 0)  		return;  	if (writer.flushLock != 0 || length <= writer.ioBuffer.Length)// write to the buffer  	 {  		goto CopyFixedLength;  		// ugly but effective  	}  	// writing data that is bigger than the buffer (and the buffer  	// isn't currently locked due to a sub-object needing the size backfilled)  	Flush (writer);  	// commit any existing data from the buffer  	// now just write directly to the underlying stream  	writer.dest.Write (data' offset' length);  	writer.position += length;  	// since we've flushed offset etc is 0' and remains  	// zero since we're writing directly to the stream  	return;  }  
Missing Default,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour_AddMembers,The following switch statement is missing a default case: switch (implicitMode) {  case ImplicitFields.AllFields:  	if (isField)  		forced = true;  	break;  case ImplicitFields.AllPublic:  	if (isPublic)  		forced = true;  	break;  }  
Missing Default,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,GetContractFamily,The following switch statement is missing a default case: switch (attributes [i].AttributeType.FullName) {  case "ProtoBuf.ProtoContractAttribute":  	bool tmp = false;  	GetFieldBoolean (ref tmp' attributes [i]' "UseProtoMembersOnly");  	if (tmp)  		return AttributeFamily.ProtoBuf;  	family |= AttributeFamily.ProtoBuf;  	break;  case "System.Xml.Serialization.XmlTypeAttribute":  	if (!model.AutoAddProtoContractTypesOnly) {  		family |= AttributeFamily.XmlSerializer;  	}  	break;  case "System.Runtime.Serialization.DataContractAttribute":  	if (!model.AutoAddProtoContractTypesOnly) {  		family |= AttributeFamily.DataContractSerialier;  	}  	break;  }  
Missing Default,ProtoBuf.Meta,MetaType,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following switch statement is missing a default case: switch (Helpers.GetTypeCode (effectiveType)) {  case ProtoTypeCode.Boolean:  	defaultValue = false;  	break;  case ProtoTypeCode.Decimal:  	defaultValue = (decimal)0;  	break;  case ProtoTypeCode.Single:  	defaultValue = (float)0;  	break;  case ProtoTypeCode.Double:  	defaultValue = (double)0;  	break;  case ProtoTypeCode.Byte:  	defaultValue = (byte)0;  	break;  case ProtoTypeCode.Char:  	defaultValue = (char)0;  	break;  case ProtoTypeCode.Int16:  	defaultValue = (short)0;  	break;  case ProtoTypeCode.Int32:  	defaultValue = (int)0;  	break;  case ProtoTypeCode.Int64:  	defaultValue = (long)0;  	break;  case ProtoTypeCode.SByte:  	defaultValue = (sbyte)0;  	break;  case ProtoTypeCode.UInt16:  	defaultValue = (ushort)0;  	break;  case ProtoTypeCode.UInt32:  	defaultValue = (uint)0;  	break;  case ProtoTypeCode.UInt64:  	defaultValue = (ulong)0;  	break;  case ProtoTypeCode.TimeSpan:  	defaultValue = TimeSpan.Zero;  	break;  case ProtoTypeCode.Guid:  	defaultValue = Guid.Empty;  	break;  }  
Missing Default,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,GetWireType,The following switch statement is missing a default case: switch (code) {  case ProtoTypeCode.Int64:  case ProtoTypeCode.UInt64:  	return format == DataFormat.FixedSize ? WireType.Fixed64 : WireType.Variant;  case ProtoTypeCode.Int16:  case ProtoTypeCode.Int32:  case ProtoTypeCode.UInt16:  case ProtoTypeCode.UInt32:  case ProtoTypeCode.Boolean:  case ProtoTypeCode.SByte:  case ProtoTypeCode.Byte:  case ProtoTypeCode.Char:  	return format == DataFormat.FixedSize ? WireType.Fixed32 : WireType.Variant;  case ProtoTypeCode.Double:  	return WireType.Fixed64;  case ProtoTypeCode.Single:  	return WireType.Fixed32;  case ProtoTypeCode.String:  case ProtoTypeCode.DateTime:  case ProtoTypeCode.Decimal:  case ProtoTypeCode.ByteArray:  case ProtoTypeCode.TimeSpan:  case ProtoTypeCode.Guid:  case ProtoTypeCode.Uri:  	return WireType.String;  }  
Missing Default,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TrySerializeAuxiliaryType,The following switch statement is missing a default case: switch (typecode) {  case ProtoTypeCode.Int16:  	ProtoWriter.WriteInt16 ((short)value' writer);  	return true;  case ProtoTypeCode.Int32:  	ProtoWriter.WriteInt32 ((int)value' writer);  	return true;  case ProtoTypeCode.Int64:  	ProtoWriter.WriteInt64 ((long)value' writer);  	return true;  case ProtoTypeCode.UInt16:  	ProtoWriter.WriteUInt16 ((ushort)value' writer);  	return true;  case ProtoTypeCode.UInt32:  	ProtoWriter.WriteUInt32 ((uint)value' writer);  	return true;  case ProtoTypeCode.UInt64:  	ProtoWriter.WriteUInt64 ((ulong)value' writer);  	return true;  case ProtoTypeCode.Boolean:  	ProtoWriter.WriteBoolean ((bool)value' writer);  	return true;  case ProtoTypeCode.SByte:  	ProtoWriter.WriteSByte ((sbyte)value' writer);  	return true;  case ProtoTypeCode.Byte:  	ProtoWriter.WriteByte ((byte)value' writer);  	return true;  case ProtoTypeCode.Char:  	ProtoWriter.WriteUInt16 ((ushort)(char)value' writer);  	return true;  case ProtoTypeCode.Double:  	ProtoWriter.WriteDouble ((double)value' writer);  	return true;  case ProtoTypeCode.Single:  	ProtoWriter.WriteSingle ((float)value' writer);  	return true;  case ProtoTypeCode.DateTime:  	BclHelpers.WriteDateTime ((DateTime)value' writer);  	return true;  case ProtoTypeCode.Decimal:  	BclHelpers.WriteDecimal ((decimal)value' writer);  	return true;  case ProtoTypeCode.String:  	ProtoWriter.WriteString ((string)value' writer);  	return true;  case ProtoTypeCode.ByteArray:  	ProtoWriter.WriteBytes ((byte[])value' writer);  	return true;  case ProtoTypeCode.TimeSpan:  	BclHelpers.WriteTimeSpan ((TimeSpan)value' writer);  	return true;  case ProtoTypeCode.Guid:  	BclHelpers.WriteGuid ((Guid)value' writer);  	return true;  case ProtoTypeCode.Uri:  	ProtoWriter.WriteString (((Uri)value).AbsoluteUri' writer);  	return true;  }  
Missing Default,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,GetListItemType,The following switch statement is missing a default case: switch (candidates.Count) {  case 0:  	return null;  case 1:  	return (Type)candidates [0];  case 2:  	if (CheckDictionaryAccessors (model' (Type)candidates [0]' (Type)candidates [1]))  		return (Type)candidates [0];  	if (CheckDictionaryAccessors (model' (Type)candidates [1]' (Type)candidates [0]))  		return (Type)candidates [1];  	break;  }  
Missing Default,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,TryDeserializeAuxiliaryType,The following switch statement is missing a default case: switch (typecode) {  case ProtoTypeCode.Int16:  	value = reader.ReadInt16 ();  	continue;  case ProtoTypeCode.Int32:  	value = reader.ReadInt32 ();  	continue;  case ProtoTypeCode.Int64:  	value = reader.ReadInt64 ();  	continue;  case ProtoTypeCode.UInt16:  	value = reader.ReadUInt16 ();  	continue;  case ProtoTypeCode.UInt32:  	value = reader.ReadUInt32 ();  	continue;  case ProtoTypeCode.UInt64:  	value = reader.ReadUInt64 ();  	continue;  case ProtoTypeCode.Boolean:  	value = reader.ReadBoolean ();  	continue;  case ProtoTypeCode.SByte:  	value = reader.ReadSByte ();  	continue;  case ProtoTypeCode.Byte:  	value = reader.ReadByte ();  	continue;  case ProtoTypeCode.Char:  	value = (char)reader.ReadUInt16 ();  	continue;  case ProtoTypeCode.Double:  	value = reader.ReadDouble ();  	continue;  case ProtoTypeCode.Single:  	value = reader.ReadSingle ();  	continue;  case ProtoTypeCode.DateTime:  	value = BclHelpers.ReadDateTime (reader);  	continue;  case ProtoTypeCode.Decimal:  	value = BclHelpers.ReadDecimal (reader);  	continue;  case ProtoTypeCode.String:  	value = reader.ReadString ();  	continue;  case ProtoTypeCode.ByteArray:  	value = ProtoReader.AppendBytes ((byte[])value' reader);  	continue;  case ProtoTypeCode.TimeSpan:  	value = BclHelpers.ReadTimeSpan (reader);  	continue;  case ProtoTypeCode.Guid:  	value = BclHelpers.ReadGuid (reader);  	continue;  case ProtoTypeCode.Uri:  	value = new Uri (reader.ReadString ());  	continue;  }  
Missing Default,ProtoBuf.Meta,TypeModel,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\TypeModel.cs,ResolveProxies,The following switch statement is missing a default case: switch (interfaces [i].FullName) {  case "NHibernate.Proxy.INHibernateProxy":  case "NHibernate.Proxy.DynamicProxy.IProxy":  case "NHibernate.Intercept.IFieldInterceptorAccessor":  	return type.BaseType;  }  
Missing Default,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,ParseDefaultValue,The following switch statement is missing a default case: switch (Helpers.GetTypeCode (type)) {  case ProtoTypeCode.Boolean:  	return bool.Parse (s);  case ProtoTypeCode.Byte:  	return byte.Parse (s' NumberStyles.Integer' CultureInfo.InvariantCulture);  case ProtoTypeCode.Char:  	// char.Parse missing on CF/phone7  	if (s.Length == 1)  		return s [0];  	throw new FormatException ("Single character expected: \"" + s + "\"");  case ProtoTypeCode.DateTime:  	return DateTime.Parse (s' CultureInfo.InvariantCulture);  case ProtoTypeCode.Decimal:  	return decimal.Parse (s' NumberStyles.Any' CultureInfo.InvariantCulture);  case ProtoTypeCode.Double:  	return double.Parse (s' NumberStyles.Any' CultureInfo.InvariantCulture);  case ProtoTypeCode.Int16:  	return short.Parse (s' NumberStyles.Any' CultureInfo.InvariantCulture);  case ProtoTypeCode.Int32:  	return int.Parse (s' NumberStyles.Any' CultureInfo.InvariantCulture);  case ProtoTypeCode.Int64:  	return long.Parse (s' NumberStyles.Any' CultureInfo.InvariantCulture);  case ProtoTypeCode.SByte:  	return sbyte.Parse (s' NumberStyles.Integer' CultureInfo.InvariantCulture);  case ProtoTypeCode.Single:  	return float.Parse (s' NumberStyles.Any' CultureInfo.InvariantCulture);  case ProtoTypeCode.String:  	return s;  case ProtoTypeCode.UInt16:  	return ushort.Parse (s' NumberStyles.Any' CultureInfo.InvariantCulture);  case ProtoTypeCode.UInt32:  	return uint.Parse (s' NumberStyles.Any' CultureInfo.InvariantCulture);  case ProtoTypeCode.UInt64:  	return ulong.Parse (s' NumberStyles.Any' CultureInfo.InvariantCulture);  case ProtoTypeCode.TimeSpan:  	return TimeSpan.Parse (s);  case ProtoTypeCode.Uri:  	return s;  // Uri is decorated as string  case ProtoTypeCode.Guid:  	return new Guid (s);  }  
Missing Default,ProtoBuf.Meta,ValueMember,C:\repos\moto2002_UnitySocket\Assets\Plugins\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following switch statement is missing a default case: switch (code) {  case ProtoTypeCode.Int32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int32Serializer (model);  case ProtoTypeCode.UInt32:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt32Serializer (model);  case ProtoTypeCode.Int64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new Int64Serializer (model);  case ProtoTypeCode.UInt64:  	defaultWireType = GetIntWireType (dataFormat' 64);  	return new UInt64Serializer (model);  case ProtoTypeCode.String:  	defaultWireType = WireType.String;  	if (asReference) {  		return new NetObjectSerializer (model' model.MapType (typeof(string))' 0' BclHelpers.NetObjectOptions.AsReference);  	}  	return new StringSerializer (model);  case ProtoTypeCode.Single:  	defaultWireType = WireType.Fixed32;  	return new SingleSerializer (model);  case ProtoTypeCode.Double:  	defaultWireType = WireType.Fixed64;  	return new DoubleSerializer (model);  case ProtoTypeCode.Boolean:  	defaultWireType = WireType.Variant;  	return new BooleanSerializer (model);  case ProtoTypeCode.DateTime:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new DateTimeSerializer (model);  case ProtoTypeCode.Decimal:  	defaultWireType = WireType.String;  	return new DecimalSerializer (model);  case ProtoTypeCode.Byte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new ByteSerializer (model);  case ProtoTypeCode.SByte:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new SByteSerializer (model);  case ProtoTypeCode.Char:  	defaultWireType = WireType.Variant;  	return new CharSerializer (model);  case ProtoTypeCode.Int16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new Int16Serializer (model);  case ProtoTypeCode.UInt16:  	defaultWireType = GetIntWireType (dataFormat' 32);  	return new UInt16Serializer (model);  case ProtoTypeCode.TimeSpan:  	defaultWireType = GetDateTimeWireType (dataFormat);  	return new TimeSpanSerializer (model);  case ProtoTypeCode.Guid:  	defaultWireType = WireType.String;  	return new GuidSerializer (model);  case ProtoTypeCode.Uri:  	defaultWireType = WireType.String;  	return new StringSerializer (model);  // treat as string; wrapped in decorator later  case ProtoTypeCode.ByteArray:  	defaultWireType = WireType.String;  	return new BlobSerializer (model' overwriteList);  case ProtoTypeCode.Type:  	defaultWireType = WireType.String;  	return new SystemTypeSerializer (model);  }  
