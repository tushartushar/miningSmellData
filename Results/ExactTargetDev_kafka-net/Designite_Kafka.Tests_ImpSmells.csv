Implementation smell,Namespace,Class,File,Method,Description
Long Method,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The method has 100 lines of code.
Long Parameter List,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,SendMessagesToBrokerPartition,The method has 5 parameters. Parameters: config' topic' partition' numMessages' compression
Long Parameter List,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,SendMessages,The method has 5 parameters. Parameters: config' messagesPerNode' header' compressionCodec' numParts
Long Parameter List,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,GetTopicMetadata,The method has 5 parameters. Parameters: topic' partiton' brokerId' brokerHost' brokerPort
Long Parameter List,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,GetTopicMetadata,The method has 5 parameters. Parameters: topic' partition' brokerId' brokerHost' brokerPort
Long Parameter List,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,ProduceRequest,The method has 7 parameters. Parameters: topic' partition' message' acks' timeout' correlationId' clientId
Long Parameter List,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,ProduceRequestWithAcks,The method has 7 parameters. Parameters: topics' partitions' message' acks' timeout' correlationId' clientId
Long Parameter List,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,WaitUntilLeaderIsElectedOrChanged,The method has 5 parameters. Parameters: zkClient' topic' partition' timeoutMs' oldLeaderOpt
Long Identifier,Kafka.Tests.Api,SerializationTestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,,The length of the parameter PartitionDataProducerRequestArray is 33.
Long Identifier,Kafka.Tests.Api,RequestResponseSerializationTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,TestSerializationAndDeserialization,The length of the parameter deserializedTopicMetadataRequest is 32.
Long Identifier,Kafka.Tests.Api,RequestResponseSerializationTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,TestSerializationAndDeserialization,The length of the parameter deserializedTopicMetadataResponse is 33.
Long Statement,Kafka.Tests.Consumers,ConsumerIteratorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ConsumerIteratorTest.cs,TestConsumerIteratorDeduplicationDeepIterator,The length of the statement  "            var iter = new ConsumerIterator<string' string>(this.queue' this.consumerConfig.ConsumerTimeoutMs' new StringDecoder()' new StringDecoder()' string.Empty); " is 155.
Long Statement,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompression,The length of the statement  "                .Union(this.SendMessagesToBrokerPartition(Configs.Last()' Topic' 1' nMessages' CompressionCodecs.GZIPCompressionCodec)).ToList(); " is 129.
Long Statement,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,SendMessagesToBrokerPartition,The length of the statement  "            Logger.DebugFormat("Sent {0} messages to broker {1} for partition [{2}'{3}]"' ms.Count' config.BrokerId' Topic' partition); " is 123.
Long Statement,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,SendMessages,The length of the statement  "                Logger.DebugFormat("Sent {0} messages to broker {1} for partition [{2}'{3}]"' ms.Count' config.BrokerId' Topic' partition); " is 123.
Long Statement,Kafka.Tests.Integration,AutoOffsetResetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\AutoOffsetResetTest.cs,ResetAndConsume,The length of the statement  "            var messagesStream = consumerConnector.CreateMessageStreams(new Dictionary<string' int> { { Topic' 1 } })[Topic].First(); " is 121.
Long Statement,Kafka.Tests.Integration,FetcherTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\FetcherTest.cs,SendMessages,The length of the statement  "                var producer = TestUtils.CreateProducer(TestUtils.GetBrokerListFromConfigs(Configs)' new DefaultEncoder()' new StringEncoder()); " is 128.
Long Statement,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestProduceAndMultiFetch,The length of the statement  "            var topicOffsets = new List<Tuple<string' int>> { Tuple.Create("test4"' 0)' Tuple.Create("test1"' 0)' Tuple.Create("test2"' 0)' Tuple.Create("test3"' 0) }; " is 155.
Long Statement,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestProduceAndMultiFetch,The length of the statement  "            var topics = new List<Tuple<string' int>> { Tuple.Create("test4"' 0)' Tuple.Create("test1"' 0)' Tuple.Create("test2"' 0)' Tuple.Create("test3"' 0) }; " is 149.
Long Statement,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestMultiProduce,The length of the statement  "            var topics = new List<Tuple<string' int>> { Tuple.Create("test4"' 0)' Tuple.Create("test1"' 0)' Tuple.Create("test2"' 0)' Tuple.Create("test3"' 0) }; " is 149.
Long Statement,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestPipelinedProduceRequests,The length of the statement  "            this.CreateSimpleTopicsAndAwaitLeader(this.ZkClient' new List<string> { "test1"' "test2"' "test3"' "test4" }' Configs.First().BrokerId); " is 136.
Long Statement,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestPipelinedProduceRequests,The length of the statement  "                Assert.Equal(messages[topic]' fetched.Select(messageAndOffset => Util.ReadString(messageAndOffset.Message.Payload)).ToList()); " is 126.
Long Statement,Kafka.Tests.Messages,MessageCompressionTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Messages\MessageCompressionTest.cs,TestSimpleCompressDecompress,The length of the statement  "            var codecs = new List<CompressionCodecs> { CompressionCodecs.GZIPCompressionCodec' CompressionCodecs.SnappyCompressionCodec }; " is 126.
Long Statement,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,GetTopicMetadata,The length of the statement  "            return new TopicMetadata(topic' partition.Select(p => new PartitionMetadata(p' broker1' new List<Broker> { broker1 })).ToList()); " is 129.
Long Statement,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,MessagesToSet,The length of the statement  "            return new ByteBufferMessageSet(CompressionCodecs.NoCompressionCodec' messages.Select(m => new Message(key: key' bytes: m)).ToList()); " is 134.
Long Statement,Kafka.Tests.Utils,KafkaRunClassHelper,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\KafkaRunClassHelper.cs,MakeArgs,The length of the statement  "            sb.AppendFormat(@" -Dlog4j.configuration=file:{0}config\log4j.properties -Dkafka.logs.dir={0}logs "' KafkaInstallationDir); " is 123.
Long Statement,Kafka.Tests.Utils,KafkaRunClassHelper,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\KafkaRunClassHelper.cs,MakeArgs,The length of the statement  "                throw new Exception(string.Format("Unable to find kafka installation in: {0}. Verify KafkaInstallationDir in App.config and try again."' KafkaInstallationDir)); " is 160.
Long Statement,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,WaitUntilLeaderIsElectedOrChanged,The length of the statement  "                Logger.InfoFormat("Waiting for leader for partition [{0}'{1}] to be changed from old leader {2}"' topic' partition' oldLeaderOpt.Value); " is 136.
Long Statement,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,WaitUntilLeaderIsElectedOrChanged,The length of the statement  "                zkClient.SubscribeDataChanges(ZkUtils.GetTopicPartitionLeaderAndIsrPath(topic' partition)' new LeaderExistsOrChangedListener(topic' partition' leaderLock' leaderExistsOrChanged' oldLeaderOpt' zkClient)); " is 203.
Long Statement,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,WaitUntilLeaderIsElectedOrChanged,The length of the statement  "                    Logger.ErrorFormat("Timing out after {0} ms since leader is not elected for partition [{1}'{2}]"' timeoutMs' topic' partition); " is 127.
Virtual Method Call from Constructor,Kafka.Tests.Integration,KafkaServerTestHarness,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\KafkaServerTestHarness.cs,KafkaServerTestHarness,The constructor "KafkaServerTestHarness" calls a virtual method "CreateConfigs".
Empty Catch Block,Kafka.Tests.Common,ConfigTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Common\ConfigTest.cs,TestInvalidClientIds,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Common,ConfigTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Common\ConfigTest.cs,TestInvalidGroupIds,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestProduceAndFetch,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestProduceAndMultiFetch,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestProduceAndMultiFetch,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestProduceAndMultiFetch,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestProducerQueueSize,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestProduceAfterClosed,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestNoBroker,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestIncompatibleEncoder,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestUpdateBrokerPartitionInfo,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Producers,SyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\SyncProducerTest.cs,TestMessageSizeTooLargeWithAckZero,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Zk,ZKEphemeralTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Zk\ZKEphemeralTest.cs,TestEphemeralNodeCleanup,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Zk,ZooKeeperTestHarness,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Zk\ZooKeeperTestHarness.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Zk,ZooKeeperTestHarness,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Zk\ZooKeeperTestHarness.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Kafka.Tests.Zk,ZooKeeperTestHarness,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Zk\ZooKeeperTestHarness.cs,Dispose,The method has an empty catch block.
Magic Number,Kafka.Tests.Api,ApiUtilsTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\ApiUtilsTest.cs,TestShortStringNonASCII,The following statement contains a magic number: var s = rnd.NextString(Math.Abs(rnd.Next() % (short.MaxValue / 4)));
Magic Number,Kafka.Tests.Api,ApiUtilsTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\ApiUtilsTest.cs,TestShortStringNonASCII,The following statement contains a magic number: i < 100
Magic Number,Kafka.Tests.Api,ApiUtilsTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\ApiUtilsTest.cs,TestShortStringASCII,The following statement contains a magic number: i < 100
Magic Number,Kafka.Tests.Api,SerializationTestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,CreateTestProducerRequest,The following statement contains a magic number: return new ProducerRequest(1' "client 1"' 0' 1000' TopicDataProducerRequest);
Magic Number,Kafka.Tests.Api,SerializationTestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,CreateTestProducerResponse,The following statement contains a magic number: return                  new ProducerResponse(                      new Dictionary<TopicAndPartition' ProducerResponseStatus>                          {                              { new TopicAndPartition(Topic1' 0)' new ProducerResponseStatus(0' 10001) }'                                                  { new TopicAndPartition(Topic2' 0)' new ProducerResponseStatus(0' 20001) }                                              }'                                              1);
Magic Number,Kafka.Tests.Api,SerializationTestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,CreateTestProducerResponse,The following statement contains a magic number: return                  new ProducerResponse(                      new Dictionary<TopicAndPartition' ProducerResponseStatus>                          {                              { new TopicAndPartition(Topic1' 0)' new ProducerResponseStatus(0' 10001) }'                                                  { new TopicAndPartition(Topic2' 0)' new ProducerResponseStatus(0' 20001) }                                              }'                                              1);
Magic Number,Kafka.Tests.Api,SerializationTestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,CreateTestOffsetRequest,The following statement contains a magic number: return                  new OffsetRequest(                      new Dictionary<TopicAndPartition' PartitionOffsetRequestInfo>                          {                              {                                  new TopicAndPartition(Topic1' 1)'                                   new PartitionOffsetRequestInfo(                                  1000' 200)                              }                          }'                       replicaId: 0);
Magic Number,Kafka.Tests.Api,SerializationTestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,CreateTestOffsetRequest,The following statement contains a magic number: return                  new OffsetRequest(                      new Dictionary<TopicAndPartition' PartitionOffsetRequestInfo>                          {                              {                                  new TopicAndPartition(Topic1' 1)'                                   new PartitionOffsetRequestInfo(                                  1000' 200)                              }                          }'                       replicaId: 0);
Magic Number,Kafka.Tests.Api,SerializationTestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,CreateTestOffsetResponse,The following statement contains a magic number: return new OffsetResponse(                  0'                  new Dictionary<TopicAndPartition' PartitionOffsetsResponse>                      {                          {                              new TopicAndPartition(Topic1' 1)'                              new PartitionOffsetsResponse(                              ErrorMapping.NoError'                              new List<long>                                  {                                      1000L'                                      2000L'                                      3000L'                                      4000L                                  })                          }                      });
Magic Number,Kafka.Tests.Api,SerializationTestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,CreateTestOffsetResponse,The following statement contains a magic number: return new OffsetResponse(                  0'                  new Dictionary<TopicAndPartition' PartitionOffsetsResponse>                      {                          {                              new TopicAndPartition(Topic1' 1)'                              new PartitionOffsetsResponse(                              ErrorMapping.NoError'                              new List<long>                                  {                                      1000L'                                      2000L'                                      3000L'                                      4000L                                  })                          }                      });
Magic Number,Kafka.Tests.Api,SerializationTestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,CreateTestOffsetResponse,The following statement contains a magic number: return new OffsetResponse(                  0'                  new Dictionary<TopicAndPartition' PartitionOffsetsResponse>                      {                          {                              new TopicAndPartition(Topic1' 1)'                              new PartitionOffsetsResponse(                              ErrorMapping.NoError'                              new List<long>                                  {                                      1000L'                                      2000L'                                      3000L'                                      4000L                                  })                          }                      });
Magic Number,Kafka.Tests.Api,SerializationTestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Api\SerializationTestUtils.cs,CreateTestOffsetResponse,The following statement contains a magic number: return new OffsetResponse(                  0'                  new Dictionary<TopicAndPartition' PartitionOffsetsResponse>                      {                          {                              new TopicAndPartition(Topic1' 1)'                              new PartitionOffsetsResponse(                              ErrorMapping.NoError'                              new List<long>                                  {                                      1000L'                                      2000L'                                      3000L'                                      4000L                                  })                          }                      });
Magic Number,Kafka.Tests.Consumers,ConsumerIteratorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ConsumerIteratorTest.cs,ConsumerIteratorTest,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' this.topic' 0' 500);
Magic Number,Kafka.Tests.Consumers,ConsumerIteratorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ConsumerIteratorTest.cs,TestConsumerIteratorDeduplicationDeepIterator,The following statement contains a magic number: var messageStrings = Enumerable.Range(0' 10).Select(x => x.ToString()).ToList();
Magic Number,Kafka.Tests.Consumers,ConsumerIteratorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ConsumerIteratorTest.cs,TestConsumerIteratorDeduplicationDeepIterator,The following statement contains a magic number: var receivedMessages = Enumerable.Range(0' 5).Select(_ => iter.Next().Message).ToList();
Magic Number,Kafka.Tests.Consumers,ConsumerIteratorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ConsumerIteratorTest.cs,TestConsumerIteratorDeduplicationDeepIterator,The following statement contains a magic number: Assert.Equal(5' receivedMessages.Count);
Magic Number,Kafka.Tests.Consumers,ConsumerIteratorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ConsumerIteratorTest.cs,TestConsumerIteratorDecodingFailure,The following statement contains a magic number: var messageStrings = Enumerable.Range(0' 10).Select(x => x.ToString()).ToList();
Magic Number,Kafka.Tests.Consumers,ConsumerIteratorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ConsumerIteratorTest.cs,TestConsumerIteratorDecodingFailure,The following statement contains a magic number: i < 5
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: var consumerConfig0 = TestUtils.CreateConsumerProperties(ZkConnect' Group' Consumer0' 200);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: Assert.Throws<ConsumerTimeoutException>(                      () => this.GetMessages(nMessages * 2' topicMessageSterams0));
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: i < 2
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 0' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 1' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 0' 1000);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 1' 1000);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: var receivedMessages1 = this.GetMessages(nMessages * 2' topicMessageStreams1);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 0' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 1' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 0' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestBasic,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 1' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompression,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 0' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompression,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 1' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompression,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 0' 1000);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompression,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 1' 1000);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompression,The following statement contains a magic number: var receivedMessages1 = this.GetMessages(nMessages * 2' topicMessageStreams1);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompression,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 0' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompression,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 1' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompression,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 0' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompression,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 1' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompressionSetConsumption,The following statement contains a magic number: var sentMessages = this.SendMessagesToBrokerPartition(                  Configs.First()' Topic' 0' 200' CompressionCodecs.DefaultCompressionCodec)                  .Union(                      this.SendMessagesToBrokerPartition(                          Configs.First()' Topic' 1' 200' CompressionCodecs.DefaultCompressionCodec))                  .ToList();
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompressionSetConsumption,The following statement contains a magic number: var sentMessages = this.SendMessagesToBrokerPartition(                  Configs.First()' Topic' 0' 200' CompressionCodecs.DefaultCompressionCodec)                  .Union(                      this.SendMessagesToBrokerPartition(                          Configs.First()' Topic' 1' 200' CompressionCodecs.DefaultCompressionCodec))                  .ToList();
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompressionSetConsumption,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 0' 1000);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompressionSetConsumption,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 1' 1000);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestCompressionSetConsumption,The following statement contains a magic number: var receivedMessages1 = this.GetMessages(400' topicMessageStreams1);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestConsumerDecoder,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 0' 1000);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestConsumerDecoder,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 1' 1000);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestConsumerDecoder,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 0' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestConsumerDecoder,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 1' 500);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestConsumerDecoder,The following statement contains a magic number: var receivedMessages = this.GetMessages(nMessages * 2' topicMessageStreams);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestLeaderSelectionForPartition,The following statement contains a magic number: var zkClient = new ZkClient(this.zookeeperConnect' 6000' 30000' new ZkStringSerializer());
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestLeaderSelectionForPartition,The following statement contains a magic number: var zkClient = new ZkClient(this.zookeeperConnect' 6000' 30000' new ZkStringSerializer());
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestLeaderSelectionForPartition,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 0' 3000);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,TestLeaderSelectionForPartition,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 0' 1000);
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,SendMessagesToBrokerPartition,The following statement contains a magic number: var props = new ProducerConfig                              {                                  Brokers = TestUtils.GetBrokerListFromConfigs(Configs)'                                  PartitionerClass = typeof(FixedValuePartitioner).AssemblyQualifiedName'                                  CompressionCodec = compression'                                  KeySerializer = typeof(IntEncoder).AssemblyQualifiedName'                                  Serializer = typeof(StringEncoder).AssemblyQualifiedName'                                  RetryBackoffMs = 1000' // custom: we need time to rebalance leader                              };
Magic Number,Kafka.Tests.Consumers,ZookeeperConsumerConnectorTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Consumers\ZookeeperConsumerConnectorTest.cs,SendMessages,The following statement contains a magic number: var props = new ProducerConfig              {                  Brokers = TestUtils.GetBrokerListFromConfigs(Configs)'                  PartitionerClass = typeof(FixedValuePartitioner).AssemblyQualifiedName'                  KeySerializer = typeof(IntEncoder).AssemblyQualifiedName'                  Serializer = typeof(StringEncoder).AssemblyQualifiedName'                  RetryBackoffMs = 1000'              };
Magic Number,Kafka.Tests.Custom.Extensions,BitOrder,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Custom\Extensions\BitOrder.cs,TestBitOrder,The following statement contains a magic number: ByteBuffer stream = ByteBuffer.Allocate(14);
Magic Number,Kafka.Tests.Custom.Extensions,BitOrder,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Custom\Extensions\BitOrder.cs,TestBitOrder,The following statement contains a magic number: Assert.Equal(2' stream.Position);
Magic Number,Kafka.Tests.Custom.Extensions,BitOrder,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Custom\Extensions\BitOrder.cs,TestBitOrder,The following statement contains a magic number: Assert.Equal(2 + 4' stream.Position);
Magic Number,Kafka.Tests.Custom.Extensions,BitOrder,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Custom\Extensions\BitOrder.cs,TestBitOrder,The following statement contains a magic number: Assert.Equal(2 + 4' stream.Position);
Magic Number,Kafka.Tests.Custom.Extensions,BitOrder,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Custom\Extensions\BitOrder.cs,TestBitOrder,The following statement contains a magic number: Assert.Equal(2 + 4 + 8' stream.Position);
Magic Number,Kafka.Tests.Custom.Extensions,BitOrder,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Custom\Extensions\BitOrder.cs,TestBitOrder,The following statement contains a magic number: Assert.Equal(2 + 4 + 8' stream.Position);
Magic Number,Kafka.Tests.Custom.Extensions,BitOrder,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Custom\Extensions\BitOrder.cs,TestBitOrder,The following statement contains a magic number: Assert.Equal(2 + 4 + 8' stream.Position);
Magic Number,Kafka.Tests.Integration,AutoOffsetResetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\AutoOffsetResetTest.cs,ResetAndConsume,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' Topic' 0' 1000);
Magic Number,Kafka.Tests.Integration,AutoOffsetResetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\AutoOffsetResetTest.cs,ResetAndConsume,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' Topic' 0' 1000);
Magic Number,Kafka.Tests.Integration,AutoOffsetResetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\AutoOffsetResetTest.cs,ResetAndConsume,The following statement contains a magic number: consumerConfig.ConsumerTimeoutMs = 2000;
Magic Number,Kafka.Tests.Integration,FetcherTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\FetcherTest.cs,FetcherTest,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' this.topic' 0' 500);
Magic Number,Kafka.Tests.Integration,FetcherTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\FetcherTest.cs,FetcherTest,The following statement contains a magic number: this.fetcher = new ConsumerFetcherManager("consumer1"' new ConsumerConfig(string.Empty' 1234' string.Empty)' ZkClient);
Magic Number,Kafka.Tests.Integration,FetcherTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\FetcherTest.cs,TestFetcher,The following statement contains a magic number: int perNode = 2;
Magic Number,Kafka.Tests.Integration,FetcherTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\FetcherTest.cs,SendMessages,The following statement contains a magic number: var ms =                      Enumerable.Range(0' messagesPerNode)                                .Select(x => Encoding.UTF8.GetBytes((conf.BrokerId * 5) + x.ToString(CultureInfo.InvariantCulture)))                                .ToList();
Magic Number,Kafka.Tests.Integration,FetcherTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\FetcherTest.cs,Fetch,The following statement contains a magic number: this.queue.TryTake(out chunk' TimeSpan.FromSeconds(2));
Magic Number,Kafka.Tests.Integration,KafkaServerTestHarness,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\KafkaServerTestHarness.cs,WaitForServersToSettle,The following statement contains a magic number: !ZkClient.WaitUntilExists(ZkUtils.BrokerIdsPath + "/" + config.BrokerId' TimeSpan.FromSeconds(5))
Magic Number,Kafka.Tests.Integration,KafkaServerTestHarness,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\KafkaServerTestHarness.cs,Dispose,The following statement contains a magic number: process.WaitForExit(5000);
Magic Number,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestProduceAndFetch,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' topic' 0' 1000);
Magic Number,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestProduceAndFetch,The following statement contains a magic number: var fetched = Consumer.Fetch(new FetchRequestBuilder().AddFetch(topic' 0' 0' 10000).Build());
Magic Number,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestProduceAndFetch,The following statement contains a magic number: var fetchedWithError = Consumer.Fetch(new FetchRequestBuilder().AddFetch(topic' 0' -1' 10000).Build());
Magic Number,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestProduceAndMultiFetch,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' topic' 0' 1000);
Magic Number,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestProduceAndMultiFetch,The following statement contains a magic number: builder.AddFetch(topic' offset' 0' 10000);
Magic Number,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestProduceAndMultiFetch,The following statement contains a magic number: builder.AddFetch(topicAndOffset.Item1' topicAndOffset.Item2' -1' 10000);
Magic Number,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestMultiProduce,The following statement contains a magic number: builder.AddFetch(topic' 0' 0' 10000);
Magic Number,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestMultiProduce,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' topic' 0' 1000);
Magic Number,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestMultiProduceResend,The following statement contains a magic number: builder.AddFetch(topic' 0' 0' 10000);
Magic Number,Kafka.Tests.Integration,LazyInitProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\LazyInitProducerTest.cs,TestMultiProduceResend,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' topic' 0' 1000);
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestFetchRequestCanProperlySerialize,The following statement contains a magic number: var request =                  new FetchRequestBuilder().ClientId("test-client")                                           .MaxWait(10001)                                           .MinBytes(4444)                                           .AddFetch("topic1"' 0' 0' 10000)                                           .AddFetch("topic2"' 1' 1024' 9999)                                           .AddFetch("topic1"' 1' 256' 444)                                           .Build();
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestFetchRequestCanProperlySerialize,The following statement contains a magic number: var request =                  new FetchRequestBuilder().ClientId("test-client")                                           .MaxWait(10001)                                           .MinBytes(4444)                                           .AddFetch("topic1"' 0' 0' 10000)                                           .AddFetch("topic2"' 1' 1024' 9999)                                           .AddFetch("topic1"' 1' 256' 444)                                           .Build();
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestFetchRequestCanProperlySerialize,The following statement contains a magic number: var request =                  new FetchRequestBuilder().ClientId("test-client")                                           .MaxWait(10001)                                           .MinBytes(4444)                                           .AddFetch("topic1"' 0' 0' 10000)                                           .AddFetch("topic2"' 1' 1024' 9999)                                           .AddFetch("topic1"' 1' 256' 444)                                           .Build();
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestFetchRequestCanProperlySerialize,The following statement contains a magic number: var request =                  new FetchRequestBuilder().ClientId("test-client")                                           .MaxWait(10001)                                           .MinBytes(4444)                                           .AddFetch("topic1"' 0' 0' 10000)                                           .AddFetch("topic2"' 1' 1024' 9999)                                           .AddFetch("topic1"' 1' 256' 444)                                           .Build();
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestFetchRequestCanProperlySerialize,The following statement contains a magic number: var request =                  new FetchRequestBuilder().ClientId("test-client")                                           .MaxWait(10001)                                           .MinBytes(4444)                                           .AddFetch("topic1"' 0' 0' 10000)                                           .AddFetch("topic2"' 1' 1024' 9999)                                           .AddFetch("topic1"' 1' 256' 444)                                           .Build();
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestFetchRequestCanProperlySerialize,The following statement contains a magic number: var request =                  new FetchRequestBuilder().ClientId("test-client")                                           .MaxWait(10001)                                           .MinBytes(4444)                                           .AddFetch("topic1"' 0' 0' 10000)                                           .AddFetch("topic2"' 1' 1024' 9999)                                           .AddFetch("topic1"' 1' 256' 444)                                           .Build();
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestFetchRequestCanProperlySerialize,The following statement contains a magic number: var request =                  new FetchRequestBuilder().ClientId("test-client")                                           .MaxWait(10001)                                           .MinBytes(4444)                                           .AddFetch("topic1"' 0' 0' 10000)                                           .AddFetch("topic2"' 1' 1024' 9999)                                           .AddFetch("topic1"' 1' 256' 444)                                           .Build();
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestDefaultEncoderProducerAndFetch,The following statement contains a magic number: var request = new FetchRequestBuilder().ClientId("test-client").AddFetch(topic' 0' 0' 10000).Build();
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestDefaultEncoderProducerAndFetchWithCompression,The following statement contains a magic number: var request = new FetchRequestBuilder().ClientId("test-client").AddFetch(topic' 0' 0' 10000).Build();
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestProduceAndMultiFetch,The following statement contains a magic number: builder.AddFetch(topic' partition' 0' 10000);
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestProduceAndMultiFetch,The following statement contains a magic number: builder.AddFetch(topicAndPartition.Item1' topicAndPartition.Item2' -1' 10000);
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestProduceAndMultiFetch,The following statement contains a magic number: builder.AddFetch(topicAndPartition.Item1' -1' 0' 10000);
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestMultiProduce,The following statement contains a magic number: builder.AddFetch(topic' partition' 0' 10000);
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestConsumerEmptyTopic,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' newTopic' 0' 1000);
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestConsumerEmptyTopic,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' newTopic' 0' 500);
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestConsumerEmptyTopic,The following statement contains a magic number: var fetchResponse = Consumer.Fetch(new FetchRequestBuilder().AddFetch(newTopic' 0' 0' 10000).Build());
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestPipelinedProduceRequests,The following statement contains a magic number: builder.AddFetch(topic' partition' 0' 10000);
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,TestPipelinedProduceRequests,The following statement contains a magic number: Thread.Sleep(7000);
Magic Number,Kafka.Tests.Integration,PrimitiveApiTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\PrimitiveApiTest.cs,CreateSimpleTopicsAndAwaitLeader,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 0' 500);
Magic Number,Kafka.Tests.Integration,ProducerConsumerTestHarness,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\ProducerConsumerTestHarness.cs,ProducerConsumerTestHarness,The following statement contains a magic number: this.Consumer = new SimpleConsumer(this.host' this.port' 1000000' 64 * 1024' string.Empty);
Magic Number,Kafka.Tests.Integration,ProducerConsumerTestHarness,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\ProducerConsumerTestHarness.cs,ProducerConsumerTestHarness,The following statement contains a magic number: this.Consumer = new SimpleConsumer(this.host' this.port' 1000000' 64 * 1024' string.Empty);
Magic Number,Kafka.Tests.Integration,ProducerConsumerTestHarness,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\ProducerConsumerTestHarness.cs,ProducerConsumerTestHarness,The following statement contains a magic number: this.Consumer = new SimpleConsumer(this.host' this.port' 1000000' 64 * 1024' string.Empty);
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestTopicMetadataRequest,The following statement contains a magic number: var serializedMetadataRequest = ByteBuffer.Allocate(topicMetadataRequest.SizeInBytes + 2);
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestBasicTopicMetadata,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' topic' 0' 1000);
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestBasicTopicMetadata,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 0' 1000);
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestBasicTopicMetadata,The following statement contains a magic number: var topicsMetadata = ClientUtils.FetchTopicMetadata(                  new HashSet<string> { topic }' this.Brokers' "TopicMetadataTest-testBasicTopicMetadata"' 2000)                         .TopicsMetadata;
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestGetAllTopicMetadata,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' topic1' 0' 1000);
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestGetAllTopicMetadata,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' topic2' 0' 1000);
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestGetAllTopicMetadata,The following statement contains a magic number: var topicsMetadata =                  ClientUtils.FetchTopicMetadata(                      new HashSet<string>()' this.Brokers' "TopicMetadataTest-testGetAllTopicMetadata"' 2000).TopicsMetadata;
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestGetAllTopicMetadata,The following statement contains a magic number: Assert.Equal(2' topicsMetadata.Count);
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestAutoCreateTopic,The following statement contains a magic number: var topicsMetadata =                  ClientUtils.FetchTopicMetadata(                      new HashSet<string> { topic }' this.Brokers' "TopicMetadataTest-testAutoCreateTopic"' 2000)                             .TopicsMetadata;
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestAutoCreateTopic,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 0' 1000);
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestAutoCreateTopic,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.Servers' topic' 0' 1000);
Magic Number,Kafka.Tests.Integration,TopicMetadataTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Integration\TopicMetadataTest.cs,TestAutoCreateTopic,The following statement contains a magic number: topicsMetadata =                  ClientUtils.FetchTopicMetadata(                      new HashSet<string> { topic }' this.Brokers' "TopicMetadataTest-testBasicTopicMetadata"' 2000)                             .TopicsMetadata;
Magic Number,Kafka.Tests.Messages,ByteBufferMessageSetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Messages\ByteBufferMessageSetTest.cs,TestWriteToWithMessageSet,The following statement contains a magic number: var stream = ByteBuffer.Allocate(1024);
Magic Number,Kafka.Tests.Messages,ByteBufferMessageSetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Messages\ByteBufferMessageSetTest.cs,TestWriteToWithMessageSet,The following statement contains a magic number: var written = set.WriteTo(stream' 0' 1024);
Magic Number,Kafka.Tests.Messages,ByteBufferMessageSetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Messages\ByteBufferMessageSetTest.cs,TestValidBytes,The following statement contains a magic number: var buffer = ByteBuffer.Allocate(messages.SizeInBytes + 2);
Magic Number,Kafka.Tests.Messages,ByteBufferMessageSetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Messages\ByteBufferMessageSetTest.cs,TestValidBytes,The following statement contains a magic number: buffer.PutShort(4);
Magic Number,Kafka.Tests.Messages,ByteBufferMessageSetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Messages\ByteBufferMessageSetTest.cs,TestValidBytesWithCompression,The following statement contains a magic number: var buffer = ByteBuffer.Allocate(messages.SizeInBytes + 2);
Magic Number,Kafka.Tests.Messages,ByteBufferMessageSetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Messages\ByteBufferMessageSetTest.cs,TestValidBytesWithCompression,The following statement contains a magic number: buffer.PutShort(4);
Magic Number,Kafka.Tests.Messages,ByteBufferMessageSetTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Messages\ByteBufferMessageSetTest.cs,TestOffsetAssigment,The following statement contains a magic number: var offset = 1234567;
Magic Number,Kafka.Tests.Messages,MessageCompressionTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Messages\MessageCompressionTest.cs,TestComplexCompressDecompress,The following statement contains a magic number: var message = new ByteBufferMessageSet(CompressionCodecs.DefaultCompressionCodec' messages.Take(2).ToList());
Magic Number,Kafka.Tests.Messages,MessageCompressionTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Messages\MessageCompressionTest.cs,TestComplexCompressDecompress,The following statement contains a magic number: var complexMessages =                  new List<Message> { message.ShallowIterator().Next().Message }.Union(messages.Skip(2).Take(1).ToList())                                                                                .ToList();
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestProducerQueueSize,The following statement contains a magic number: config.QueueBufferingMaxMessages = 10;
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestProducerQueueSize,The following statement contains a magic number: var produceData = this.GetProduceData(12);
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestProduceAfterClosed,The following statement contains a magic number: var produceData = this.GetProduceData(10);
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: producerDataList.Add(new KeyedMessage<int' Message>("topic2"' -99' 1' new Message(Encoding.UTF8.GetBytes("msg2"))));
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: producerDataList.Add(new KeyedMessage<int' Message>("topic1"' 2' new Message(Encoding.UTF8.GetBytes("msg3"))));
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: producerDataList.Add(new KeyedMessage<int' Message>("topic1"' -101' 3' new Message(Encoding.UTF8.GetBytes("msg4"))));
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: producerDataList.Add(new KeyedMessage<int' Message>("topic1"' -101' 3' new Message(Encoding.UTF8.GetBytes("msg4"))));
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: producerDataList.Add(new KeyedMessage<int' Message>("topic2"' 4' new Message(Encoding.UTF8.GetBytes("msg5"))));
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: var broker1 = new Broker(0' "localhost"' 9092);
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: var broker2 = new Broker(1' "localhost"' 9093);
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: var topic1Broker1Data = new List<KeyedMessage<int' Message>>                                          {                                              new KeyedMessage<int' Message>(                                                  "topic1"'                                                  0'                                                  new Message(                                                  Encoding.UTF8.GetBytes("msg1")))'                                              new KeyedMessage<int' Message>(                                                  "topic1"'                                                  2'                                                  new Message(                                                  Encoding.UTF8.GetBytes("msg3")))                                          };
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: var topic1Broker2Data = new List<KeyedMessage<int' Message>>                                          {                                              new KeyedMessage<int' Message>(                                                  "topic1"'                                                  -101'                                                  3'                                                  new Message(                                                  Encoding.UTF8.GetBytes("msg4")))                                          };
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: var topic1Broker2Data = new List<KeyedMessage<int' Message>>                                          {                                              new KeyedMessage<int' Message>(                                                  "topic1"'                                                  -101'                                                  3'                                                  new Message(                                                  Encoding.UTF8.GetBytes("msg4")))                                          };
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: var topic2Broker1Data = new List<KeyedMessage<int' Message>>                                          {                                              new KeyedMessage<int' Message>(                                                  "topic2"'                                                  4'                                                  new Message(                                                  Encoding.UTF8.GetBytes("msg5")))                                          };
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestPartitionAndCollateEvents,The following statement contains a magic number: var topic2Broker2Data = new List<KeyedMessage<int' Message>>                                          {                                              new KeyedMessage<int' Message>(                                                  "topic2"'                                                  -99'                                                  1'                                                  new Message(                                                  Encoding.UTF8.GetBytes("msg2")))                                          };
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestSerializeEvents,The following statement contains a magic number: var produceData =                  TestUtils.GetMsgStrings(5).Select(m => new KeyedMessage<string' string>("topic1"' m)).ToList();
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestSerializeEvents,The following statement contains a magic number: var topic1Metadata = this.GetTopicMetadata("topic1"' 0' 0' "localhost"' 9092);
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestInvalidPartition,The following statement contains a magic number: var topic1Metadata = this.GetTopicMetadata("topic1"' 0' 0' "localhost"' 9092);
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestRandomPartitioner,The following statement contains a magic number: var topic1Metadata = this.GetTopicMetadata("topic1"' 0' 0' "localhost"' 9092);
Magic Number,Kafka.Tests.Producers,AsyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,TestRandomPartitioner,The following statement contains a magic number: var topic2Metadata = this.GetTopicMetadata("topic2"' 0' 0' "localhost"' 9092);
Magic Number,Kafka.Tests.Producers,MockEventHandler,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\AsyncProducerTest.cs,Handle,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,ProducerTest,The following statement contains a magic number: this.ports = TestUtils.ChoosePorts(2);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,ProducerTest,The following statement contains a magic number: this.consumer1 = new SimpleConsumer("localhost"' this.port1' 1000000' 64 * 1024' string.Empty);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,ProducerTest,The following statement contains a magic number: this.consumer1 = new SimpleConsumer("localhost"' this.port1' 1000000' 64 * 1024' string.Empty);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,ProducerTest,The following statement contains a magic number: this.consumer1 = new SimpleConsumer("localhost"' this.port1' 1000000' 64 * 1024' string.Empty);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,ProducerTest,The following statement contains a magic number: this.consumer2 = new SimpleConsumer("localhost"' this.port2' 100' 64 * 1024' string.Empty);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,ProducerTest,The following statement contains a magic number: this.consumer2 = new SimpleConsumer("localhost"' this.port2' 100' 64 * 1024' string.Empty);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,ProducerTest,The following statement contains a magic number: this.consumer2 = new SimpleConsumer("localhost"' this.port2' 100' 64 * 1024' string.Empty);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,WaitForServersToSettle,The following statement contains a magic number: !ZkClient.WaitUntilExists(ZkUtils.BrokerIdsPath + "/" + config.BrokerId' TimeSpan.FromSeconds(5))
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestUpdateBrokerPartitionInfo,The following statement contains a magic number: AdminUtils.CreateTopic(this.ZkClient' topic' 1' 2' new Dictionary<string' string>());
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestUpdateBrokerPartitionInfo,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.servers' topic' 0' 3000);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestUpdateBrokerPartitionInfo,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 0' 500);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestUpdateBrokerPartitionInfo,The following statement contains a magic number: producerConfig1.Brokers = new List<BrokerConfiguration>                                            {                                                new BrokerConfiguration                                                    {                                                       BrokerId = 0'                                                       Host = "localhost"'                                                       Port = 18203                                                    }'                                                    new BrokerConfiguration                                                        {                                                            BrokerId = 1'                                                            Host = "localhost"'                                                            Port = 18204                                                        }                                            };
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestUpdateBrokerPartitionInfo,The following statement contains a magic number: producerConfig1.Brokers = new List<BrokerConfiguration>                                            {                                                new BrokerConfiguration                                                    {                                                       BrokerId = 0'                                                       Host = "localhost"'                                                       Port = 18203                                                    }'                                                    new BrokerConfiguration                                                        {                                                            BrokerId = 1'                                                            Host = "localhost"'                                                            Port = 18204                                                        }                                            };
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestUpdateBrokerPartitionInfo,The following statement contains a magic number: producerConfig2.Brokers = new List<BrokerConfiguration>                                            {                                               new BrokerConfiguration                                                    {                                                       BrokerId = 0'                                                       Host = "localhost"'                                                       Port = 18203                                                    }'                                                    new BrokerConfiguration                                                        {                                                            BrokerId = 1'                                                            Host = "localhost"'                                                            Port = this.port1                                                        }                                            };
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The following statement contains a magic number: var producerConfig1 = new ProducerConfig                                        {                                            Serializer = typeof(StringEncoder).AssemblyQualifiedName'                                            KeySerializer = typeof(StringEncoder).AssemblyQualifiedName'                                            PartitionerClass =                                                typeof(StaticPartitioner).AssemblyQualifiedName'                                            Brokers =                                                TestUtils.GetBrokerListFromConfigs(                                                    new List<TempKafkaConfig> { this.config1' this.config2 })'                                            RequestRequiredAcks = 2'                                            RequestTimeoutMs = 1000                                        };
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The following statement contains a magic number: var producerConfig1 = new ProducerConfig                                        {                                            Serializer = typeof(StringEncoder).AssemblyQualifiedName'                                            KeySerializer = typeof(StringEncoder).AssemblyQualifiedName'                                            PartitionerClass =                                                typeof(StaticPartitioner).AssemblyQualifiedName'                                            Brokers =                                                TestUtils.GetBrokerListFromConfigs(                                                    new List<TempKafkaConfig> { this.config1' this.config2 })'                                            RequestRequiredAcks = 2'                                            RequestTimeoutMs = 1000                                        };
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The following statement contains a magic number: var producerConfig2 = new ProducerConfig                                        {                                            Serializer = typeof(StringEncoder).AssemblyQualifiedName'                                            KeySerializer = typeof(StringEncoder).AssemblyQualifiedName'                                            PartitionerClass =                                                typeof(StaticPartitioner).AssemblyQualifiedName'                                            Brokers =                                                TestUtils.GetBrokerListFromConfigs(                                                    new List<TempKafkaConfig> { this.config1' this.config2 })'                                            RequestRequiredAcks = 3'                                            RequestTimeoutMs = 1000                                        };
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The following statement contains a magic number: var producerConfig2 = new ProducerConfig                                        {                                            Serializer = typeof(StringEncoder).AssemblyQualifiedName'                                            KeySerializer = typeof(StringEncoder).AssemblyQualifiedName'                                            PartitionerClass =                                                typeof(StaticPartitioner).AssemblyQualifiedName'                                            Brokers =                                                TestUtils.GetBrokerListFromConfigs(                                                    new List<TempKafkaConfig> { this.config1' this.config2 })'                                            RequestRequiredAcks = 3'                                            RequestTimeoutMs = 1000                                        };
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The following statement contains a magic number: AdminUtils.CreateTopic(this.ZkClient' topic' 1' 2' new Dictionary<string' string>());
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.servers' topic' 0' 1000);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 0' 500);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The following statement contains a magic number: var messageSet = (leader == this.config1.BrokerId)                                   ? this.consumer1.Fetch(new FetchRequestBuilder().AddFetch(topic' 0' 0' 10000).Build())                                              .MessageSet("new-topic"' 0)                                              .Iterator()                                              .ToEnumerable()                                              .ToList()                                   : this.consumer2.Fetch(new FetchRequestBuilder().AddFetch(topic' 0' 0' 10000).Build())                                              .MessageSet("new-topic"' 0)                                              .Iterator()                                              .ToEnumerable()                                              .ToList();
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The following statement contains a magic number: var messageSet = (leader == this.config1.BrokerId)                                   ? this.consumer1.Fetch(new FetchRequestBuilder().AddFetch(topic' 0' 0' 10000).Build())                                              .MessageSet("new-topic"' 0)                                              .Iterator()                                              .ToEnumerable()                                              .ToList()                                   : this.consumer2.Fetch(new FetchRequestBuilder().AddFetch(topic' 0' 0' 10000).Build())                                              .MessageSet("new-topic"' 0)                                              .Iterator()                                              .ToEnumerable()                                              .ToList();
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendToNewTopic,The following statement contains a magic number: Assert.Equal(2' messageSet.Count());
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The following statement contains a magic number: var config = new ProducerConfig              {                  Serializer = typeof(StringEncoder).AssemblyQualifiedName'                  KeySerializer = typeof(StringEncoder).AssemblyQualifiedName'                  PartitionerClass =                      typeof(StaticPartitioner).AssemblyQualifiedName'                  Brokers =                      TestUtils.GetBrokerListFromConfigs(                          new List<TempKafkaConfig> { this.config1' this.config2 })'                  RequestRequiredAcks = 1'                  RequestTimeoutMs = 2000              };
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The following statement contains a magic number: AdminUtils.CreateOrUpdateTopicPartitionAssignmentPathInZK(                  this.ZkClient'                  topic'                  new Dictionary<int' List<int>>                      {                          { 0' new List<int> { 0 } }'                          { 1' new List<int> { 0 } }'                          { 2' new List<int> { 0 } }'                          { 3' new List<int> { 0 } }'                      }'                       new Dictionary<string' string>());
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The following statement contains a magic number: AdminUtils.CreateOrUpdateTopicPartitionAssignmentPathInZK(                  this.ZkClient'                  topic'                  new Dictionary<int' List<int>>                      {                          { 0' new List<int> { 0 } }'                          { 1' new List<int> { 0 } }'                          { 2' new List<int> { 0 } }'                          { 3' new List<int> { 0 } }'                      }'                       new Dictionary<string' string>());
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(this.servers' topic' 0' 1000);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 0' 500);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 1' 500);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 2' 500);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 2' 500);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 3' 500);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendWithDeadBroker,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' topic' 3' 500);
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendNullMessage,The following statement contains a magic number: AdminUtils.CreateTopic(this.ZkClient' "new-topic"' 2' 1' new Dictionary<string' string>());
Magic Number,Kafka.Tests.Producers,ProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\ProducerTest.cs,TestSendNullMessage,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' "new-topic"' 0' 500);
Magic Number,Kafka.Tests.Producers,SyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\SyncProducerTest.cs,TestReachableServer,The following statement contains a magic number: Assert.True(firstEnd - firstStart < TimeSpan.FromMilliseconds(500));
Magic Number,Kafka.Tests.Producers,SyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\SyncProducerTest.cs,TestReachableServer,The following statement contains a magic number: Assert.True(secondEnd - secondStart < TimeSpan.FromMilliseconds(500));
Magic Number,Kafka.Tests.Producers,SyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\SyncProducerTest.cs,TestMessageSizeTooLarge,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' "test"' 0' 500);
Magic Number,Kafka.Tests.Producers,SyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\SyncProducerTest.cs,TestMessageSizeTooLarge,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(Servers' "test"' 0' 2000);
Magic Number,Kafka.Tests.Producers,SyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\SyncProducerTest.cs,TestMessageSizeTooLargeWithAckZero,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' "test"' 0' 500);
Magic Number,Kafka.Tests.Producers,SyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\SyncProducerTest.cs,TestProduceCorrectlyReceivesResponse,The following statement contains a magic number: Assert.Equal(3' response.Status.Count);
Magic Number,Kafka.Tests.Producers,SyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\SyncProducerTest.cs,TestProduceCorrectlyReceivesResponse,The following statement contains a magic number: TestUtils.WaitUntilLeaderIsElectedOrChanged(this.ZkClient' "topic3"' 0' 5000);
Magic Number,Kafka.Tests.Producers,SyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\SyncProducerTest.cs,TestProduceCorrectlyReceivesResponse,The following statement contains a magic number: TestUtils.WaitUntilMetadataIsPropagated(Servers' "topic3"' 0' 2000);
Magic Number,Kafka.Tests.Producers,SyncProducerTest,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Producers\SyncProducerTest.cs,TestProduceCorrectlyReceivesResponse,The following statement contains a magic number: Assert.Equal(3' response2.Status.Count);
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,TempDir,The following statement contains a magic number: return Directory.CreateDirectory(Path.Combine(IoTmpDir' "kafka-dir-" + random.Next(1000000)));
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,TempFile,The following statement contains a magic number: var path = Path.Combine(IoTmpDir' "kafka-" + random.Next(1000000));
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,CreateConsumerProperties,The following statement contains a magic number: config.ZooKeeper.ZkSessionTimeoutMs = 400;
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,CreateConsumerProperties,The following statement contains a magic number: config.ZooKeeper.ZkSyncTimeMs = 200;
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,CreateConsumerProperties,The following statement contains a magic number: config.AutoCommitIntervalMs = 1000;
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,CreateConsumerProperties,The following statement contains a magic number: config.RebalanceMaxRetries = 4;
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,CreateConsumerProperties,The following statement contains a magic number: config.NumConsumerFetchers = 2;
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,GetSyncProducerConfig,The following statement contains a magic number: return new SyncProducerConfig                         {                             Host = "localhost"'                             Port = port'                             RequestTimeoutMs = 500'                             RequestRequiredAcks = 1'                             KeySerializer = typeof(StringEncoder).AssemblyQualifiedName'                             Serializer = typeof(StringEncoder).AssemblyQualifiedName                         };
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,CreateProducer,The following statement contains a magic number: config.SendBufferBytes = 65536;
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,CreateProducer,The following statement contains a magic number: config.RequestTimeoutMs = 10000;
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,CreateProducer,The following statement contains a magic number: config.RetryBackoffMs = 10000;
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,GetProducerConfig,The following statement contains a magic number: config.MessageSendMaxRetries = 3;
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,GetProducerConfig,The following statement contains a magic number: config.RetryBackoffMs = 1000;
Magic Number,Kafka.Tests.Utils,TestUtils,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtils.cs,GetProducerConfig,The following statement contains a magic number: config.RequestTimeoutMs = 500;
Magic Number,Kafka.Tests.Utils,TestUtil,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Utils\TestUtil.cs,DeleteFile,The following statement contains a magic number: SpinWait.SpinUntil(                      () =>                          {                              Util.Swallow(() => File.Delete(path));                              return !File.Exists(path);                          }'                      1000);
Magic Number,Kafka.Tests.Zk,ZooKeeperTestHarness,D:\research\architectureSmells\repos\ExactTargetDev_kafka-net\src\Kafka\Kafka.Tests\Zk\ZooKeeperTestHarness.cs,Dispose,The following statement contains a magic number: SpinWait.SpinUntil(() => this.Zookeeper.HasExited' 5000);
