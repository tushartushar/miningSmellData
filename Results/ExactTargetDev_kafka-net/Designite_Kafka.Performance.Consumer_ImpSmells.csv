Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,Cyclomatic complexity of the method is 8
Long Parameter List,Kafka.Performance.Consumer,ConsumerPerfThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,ConsumerPerfThread,The method has 6 parameters.
Long Parameter List,Kafka.Performance.Consumer,ConsumerPerfThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,PrintMessage,The method has 7 parameters.
Long Statement,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,The length of the statement  "			threadList.Add (new ConsumerPerfThread (i' "kafka-zk-consumer-" + i' streamList [i]' config' totalMessagesRead' totalBytesRead)); " is 129.
Long Statement,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,The length of the statement  "		var elapsedSecs = (endMs - startMs - TimeSpan.FromMilliseconds (config.ConsumerConfig.ConsumerTimeoutMs)).TotalMilliseconds / 1000.0; " is 133.
Long Statement,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,The length of the statement  "			Console.WriteLine ("{0}' {1}' {2}' {3:f4}' {4:f4}' {5}' {6:f4}"' startMs.ToString (config.DateFormat)' endMs.ToString (config.DateFormat)' config.ConsumerConfig.FetchMessageMaxBytes' totalMBRead' totalMBRead / elapsedSecs' totalMessagesRead.Get ()' totalMessagesRead.Get () / elapsedSecs); " is 289.
Long Statement,Kafka.Performance.Consumer,ConsumerPerfThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Run,The length of the statement  "					this.PrintMessage (this.threadId' bytesRead' lastBytesRead' messagesRead' lastMessagesRead' lastReportTime' DateTime.Now); " is 122.
Long Statement,Kafka.Performance.Consumer,ConsumerPerfThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,PrintMessage,The length of the statement  "	Console.WriteLine ("{0}' {1}' {2}' {3:f2}' {4:f2}' {5}' {6:f2}"' end.ToString (this.config.DateFormat)' id' this.config.ConsumerConfig.FetchMessageMaxBytes' totalMBRead' 1000.0 * (mbRead / elapsedMs)' messagesRead' ((messagesRead - lastMessagesRead) / elapsedMs) * 1000.0); " is 273.
Empty Catch Block,Kafka.Performance.Consumer,ConsumerPerfThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Run,The method has an empty catch block.
Empty Catch Block,Kafka.Performance.Consumer,ConsumerPerfThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Run,The method has an empty catch block.
Magic Number,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,The following statement contains a magic number: foreach (var topicAndMessageStream in topicMessageStreams) {  	var streamList = topicAndMessageStream.Value;  	for (var i = 0; i < streamList.Count; i++) {  		threadList.Add (new ConsumerPerfThread (i' "kafka-zk-consumer-" + i' streamList [i]' config' totalMessagesRead' totalBytesRead));  	}  	Logger.Info ("Sleeping for 1 second.");  	Thread.Sleep (1000);  	Logger.Info ("Starting threads.");  	var startMs = DateTime.Now;  	foreach (var thread in threadList) {  		new Thread (() => thread.Run ()).Start ();  	}  	foreach (var thread in threadList) {  		thread.Shutdown ();  	}  	var endMs = DateTime.Now;  	var elapsedSecs = (endMs - startMs - TimeSpan.FromMilliseconds (config.ConsumerConfig.ConsumerTimeoutMs)).TotalMilliseconds / 1000.0;  	if (!config.ShowDetailedStats) {  		var totalMBRead = (totalBytesRead.Get () * 1.0) / (1024 * 1024);  		Console.WriteLine ("{0}' {1}' {2}' {3:f4}' {4:f4}' {5}' {6:f4}"' startMs.ToString (config.DateFormat)' endMs.ToString (config.DateFormat)' config.ConsumerConfig.FetchMessageMaxBytes' totalMBRead' totalMBRead / elapsedSecs' totalMessagesRead.Get ()' totalMessagesRead.Get () / elapsedSecs);  	}  }  
Magic Number,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,The following statement contains a magic number: foreach (var topicAndMessageStream in topicMessageStreams) {  	var streamList = topicAndMessageStream.Value;  	for (var i = 0; i < streamList.Count; i++) {  		threadList.Add (new ConsumerPerfThread (i' "kafka-zk-consumer-" + i' streamList [i]' config' totalMessagesRead' totalBytesRead));  	}  	Logger.Info ("Sleeping for 1 second.");  	Thread.Sleep (1000);  	Logger.Info ("Starting threads.");  	var startMs = DateTime.Now;  	foreach (var thread in threadList) {  		new Thread (() => thread.Run ()).Start ();  	}  	foreach (var thread in threadList) {  		thread.Shutdown ();  	}  	var endMs = DateTime.Now;  	var elapsedSecs = (endMs - startMs - TimeSpan.FromMilliseconds (config.ConsumerConfig.ConsumerTimeoutMs)).TotalMilliseconds / 1000.0;  	if (!config.ShowDetailedStats) {  		var totalMBRead = (totalBytesRead.Get () * 1.0) / (1024 * 1024);  		Console.WriteLine ("{0}' {1}' {2}' {3:f4}' {4:f4}' {5}' {6:f4}"' startMs.ToString (config.DateFormat)' endMs.ToString (config.DateFormat)' config.ConsumerConfig.FetchMessageMaxBytes' totalMBRead' totalMBRead / elapsedSecs' totalMessagesRead.Get ()' totalMessagesRead.Get () / elapsedSecs);  	}  }  
Magic Number,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,The following statement contains a magic number: foreach (var topicAndMessageStream in topicMessageStreams) {  	var streamList = topicAndMessageStream.Value;  	for (var i = 0; i < streamList.Count; i++) {  		threadList.Add (new ConsumerPerfThread (i' "kafka-zk-consumer-" + i' streamList [i]' config' totalMessagesRead' totalBytesRead));  	}  	Logger.Info ("Sleeping for 1 second.");  	Thread.Sleep (1000);  	Logger.Info ("Starting threads.");  	var startMs = DateTime.Now;  	foreach (var thread in threadList) {  		new Thread (() => thread.Run ()).Start ();  	}  	foreach (var thread in threadList) {  		thread.Shutdown ();  	}  	var endMs = DateTime.Now;  	var elapsedSecs = (endMs - startMs - TimeSpan.FromMilliseconds (config.ConsumerConfig.ConsumerTimeoutMs)).TotalMilliseconds / 1000.0;  	if (!config.ShowDetailedStats) {  		var totalMBRead = (totalBytesRead.Get () * 1.0) / (1024 * 1024);  		Console.WriteLine ("{0}' {1}' {2}' {3:f4}' {4:f4}' {5}' {6:f4}"' startMs.ToString (config.DateFormat)' endMs.ToString (config.DateFormat)' config.ConsumerConfig.FetchMessageMaxBytes' totalMBRead' totalMBRead / elapsedSecs' totalMessagesRead.Get ()' totalMessagesRead.Get () / elapsedSecs);  	}  }  
Magic Number,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,The following statement contains a magic number: foreach (var topicAndMessageStream in topicMessageStreams) {  	var streamList = topicAndMessageStream.Value;  	for (var i = 0; i < streamList.Count; i++) {  		threadList.Add (new ConsumerPerfThread (i' "kafka-zk-consumer-" + i' streamList [i]' config' totalMessagesRead' totalBytesRead));  	}  	Logger.Info ("Sleeping for 1 second.");  	Thread.Sleep (1000);  	Logger.Info ("Starting threads.");  	var startMs = DateTime.Now;  	foreach (var thread in threadList) {  		new Thread (() => thread.Run ()).Start ();  	}  	foreach (var thread in threadList) {  		thread.Shutdown ();  	}  	var endMs = DateTime.Now;  	var elapsedSecs = (endMs - startMs - TimeSpan.FromMilliseconds (config.ConsumerConfig.ConsumerTimeoutMs)).TotalMilliseconds / 1000.0;  	if (!config.ShowDetailedStats) {  		var totalMBRead = (totalBytesRead.Get () * 1.0) / (1024 * 1024);  		Console.WriteLine ("{0}' {1}' {2}' {3:f4}' {4:f4}' {5}' {6:f4}"' startMs.ToString (config.DateFormat)' endMs.ToString (config.DateFormat)' config.ConsumerConfig.FetchMessageMaxBytes' totalMBRead' totalMBRead / elapsedSecs' totalMessagesRead.Get ()' totalMessagesRead.Get () / elapsedSecs);  	}  }  
Magic Number,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,The following statement contains a magic number: if (!config.ShowDetailedStats) {  	var totalMBRead = (totalBytesRead.Get () * 1.0) / (1024 * 1024);  	Console.WriteLine ("{0}' {1}' {2}' {3:f4}' {4:f4}' {5}' {6:f4}"' startMs.ToString (config.DateFormat)' endMs.ToString (config.DateFormat)' config.ConsumerConfig.FetchMessageMaxBytes' totalMBRead' totalMBRead / elapsedSecs' totalMessagesRead.Get ()' totalMessagesRead.Get () / elapsedSecs);  }  
Magic Number,Kafka.Performance.Consumer,ConsumerPerformance,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,Main,The following statement contains a magic number: if (!config.ShowDetailedStats) {  	var totalMBRead = (totalBytesRead.Get () * 1.0) / (1024 * 1024);  	Console.WriteLine ("{0}' {1}' {2}' {3:f4}' {4:f4}' {5}' {6:f4}"' startMs.ToString (config.DateFormat)' endMs.ToString (config.DateFormat)' config.ConsumerConfig.FetchMessageMaxBytes' totalMBRead' totalMBRead / elapsedSecs' totalMessagesRead.Get ()' totalMessagesRead.Get () / elapsedSecs);  }  
Magic Number,Kafka.Performance.Consumer,ConsumerPerfConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,ConsumerPerfConfig,The following statement contains a magic number: this.GroupId = "perf-consumer" + new Random ().Next (100000);  
Magic Number,Kafka.Performance.Consumer,ConsumerPerfConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,ConsumerPerfConfig,The following statement contains a magic number: this.FetchMessageMaxBytes = 1024 * 1024;  
Magic Number,Kafka.Performance.Consumer,ConsumerPerfConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,ConsumerPerfConfig,The following statement contains a magic number: this.FetchMessageMaxBytes = 1024 * 1024;  
Magic Number,Kafka.Performance.Consumer,ConsumerPerfConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,ConsumerPerfConfig,The following statement contains a magic number: this.SocketReceiveBufferBytes = 2 * 1024 * 1024;  
Magic Number,Kafka.Performance.Consumer,ConsumerPerfConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,ConsumerPerfConfig,The following statement contains a magic number: this.SocketReceiveBufferBytes = 2 * 1024 * 1024;  
Magic Number,Kafka.Performance.Consumer,ConsumerPerfConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,ConsumerPerfConfig,The following statement contains a magic number: this.SocketReceiveBufferBytes = 2 * 1024 * 1024;  
Magic Number,Kafka.Performance.Consumer,ConsumerPerfConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,ConsumerPerfConfig,The following statement contains a magic number: this.NumThreads = 10;  
Magic Number,Kafka.Performance.Consumer,ConsumerPerfConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,ConsumerPerfConfig,The following statement contains a magic number: this.ConsumerConfig = new ConsumerConfig {  	GroupId = this.GroupId'  	SocketReceiveBufferBytes = this.SocketReceiveBufferBytes'  	FetchMessageMaxBytes = this.FetchMessageMaxBytes'  	AutoOffsetReset = this.AutoOffsetReset ? "largest" : "smallest"'  	ZooKeeper = new ZkConfig {  		ZkConnect = this.ZookeeperConnect  	}'  	ConsumerTimeoutMs = 5000'  	NumConsumerFetchers = this.NumConsumerFetchers  };  
Magic Number,Kafka.Performance.Consumer,ConsumerPerfThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,PrintMessage,The following statement contains a magic number: Console.WriteLine ("{0}' {1}' {2}' {3:f2}' {4:f2}' {5}' {6:f2}"' end.ToString (this.config.DateFormat)' id' this.config.ConsumerConfig.FetchMessageMaxBytes' totalMBRead' 1000.0 * (mbRead / elapsedMs)' messagesRead' ((messagesRead - lastMessagesRead) / elapsedMs) * 1000.0);  
Magic Number,Kafka.Performance.Consumer,ConsumerPerfThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Performance.Consumer\ConsumerPerformance.cs,PrintMessage,The following statement contains a magic number: Console.WriteLine ("{0}' {1}' {2}' {3:f2}' {4:f2}' {5}' {6:f2}"' end.ToString (this.config.DateFormat)' id' this.config.ConsumerConfig.FetchMessageMaxBytes' totalMBRead' 1000.0 * (mbRead / elapsedMs)' messagesRead' ((messagesRead - lastMessagesRead) / elapsedMs) * 1000.0);  
