Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Kafka.Client.Consumers,ConsumerFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerFetcherThread.cs,HandleOffsetOutOfRange,Cyclomatic complexity of the method is 9
Complex Method,Kafka.Client.Consumers,ConsumerIterator,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerIterator.cs,MakeNext,Cyclomatic complexity of the method is 8
Complex Method,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ReinitializeConsumer,Cyclomatic complexity of the method is 9
Complex Method,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,DispatchSerializedData,Cyclomatic complexity of the method is 8
Complex Method,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Send,Cyclomatic complexity of the method is 10
Complex Method,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,GroupMessagesToSet,Cyclomatic complexity of the method is 10
Complex Method,Kafka.Client.Producers.Async,ProducerSendThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\ProducerSendThread.cs,ProcessEvents,Cyclomatic complexity of the method is 8
Complex Method,Kafka.Client.Producers,Producer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Producer.cs,AsyncSend,Cyclomatic complexity of the method is 11
Complex Method,Kafka.Client.Messages,ByteBufferMessageSetIterator,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\ByteBufferMessageSet.cs,MakeNextOuter,Cyclomatic complexity of the method is 10
Complex Method,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,ProcessFetchRequest,Cyclomatic complexity of the method is 18
Long Parameter List,Kafka.Client.Admin,AdminUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Admin\AdminUtils.cs,AssignReplicasToBrokers,The method has 5 parameters.
Long Parameter List,Kafka.Client.Admin,AdminUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Admin\AdminUtils.cs,CreateTopic,The method has 5 parameters.
Long Parameter List,Kafka.Client.Admin,AdminUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Admin\AdminUtils.cs,CreateOrUpdateTopicPartitionAssignmentPathInZK,The method has 5 parameters.
Long Parameter List,Kafka.Client.Api,FetchRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchRequest.cs,FetchRequest,The method has 7 parameters.
Long Parameter List,Kafka.Client.Api,FetchRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchRequest.cs,FetchRequest,The method has 5 parameters.
Long Parameter List,Kafka.Client.Api,OffsetRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\OffsetRequest.cs,OffsetRequest,The method has 5 parameters.
Long Parameter List,Kafka.Client.Api,ProducerRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\ProducerRequest.cs,ProducerRequest,The method has 5 parameters.
Long Parameter List,Kafka.Client.Api,ProducerRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\ProducerRequest.cs,ProducerRequest,The method has 6 parameters.
Long Parameter List,Kafka.Client.Api,PartitionMetadata,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadata.cs,PartitionMetadata,The method has 5 parameters.
Long Parameter List,Kafka.Client.Consumers,ConsumerFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerFetcherThread.cs,ConsumerFetcherThread,The method has 5 parameters.
Long Parameter List,Kafka.Client.Consumers,ConsumerIterator,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerIterator.cs,ConsumerIterator,The method has 5 parameters.
Long Parameter List,Kafka.Client.Consumers,KafkaStream,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\KafkaStream.cs,KafkaStream,The method has 5 parameters.
Long Parameter List,Kafka.Client.Consumers,PartitionTopicInfo,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\PartitionTopicInfo.cs,PartitionTopicInfo,The method has 7 parameters.
Long Parameter List,Kafka.Client.Consumers,SimpleConsumer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\SimpleConsumer.cs,SimpleConsumer,The method has 5 parameters.
Long Parameter List,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,DefaultEventHandler,The method has 6 parameters.
Long Parameter List,Kafka.Client.Producers.Async,ProducerSendThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\ProducerSendThread.cs,ProducerSendThread,The method has 6 parameters.
Long Parameter List,Kafka.Client.Client,ClientUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Client\ClientUtils.cs,FetchTopicMetadata,The method has 5 parameters.
Long Parameter List,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,ByteBuffer,The method has 6 parameters.
Long Parameter List,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,ByteBuffer,The method has 6 parameters.
Long Parameter List,Kafka.Client.Messages,Message,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\Message.cs,Message,The method has 5 parameters.
Long Parameter List,Kafka.Client.Messages,MessageAndMetadata,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\MessageAndMetadata.cs,MessageAndMetadata,The method has 6 parameters.
Long Parameter List,Kafka.Client.Network,BlockingChannel,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Network\BlockingChannel.cs,BlockingChannel,The method has 5 parameters.
Long Parameter List,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,AbstractFetcherThread,The method has 10 parameters.
Long Parameter List,Kafka.Client.Utils,ZkUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,CreateEphemeralPathExpectConflictHandleZKBug,The method has 6 parameters.
Long Parameter List,Kafka.Client.Utils,LeaderExistsOrChangedListener,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,LeaderExistsOrChangedListener,The method has 6 parameters.
Long Parameter List,Kafka.Client.ZKClient,ZkPathUtil,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\ZKClient\ZkPathUtil.cs,AddChildrenToStringBuilder,The method has 5 parameters.
Long Statement,Kafka.Client.Admin,AdminUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Admin\AdminUtils.cs,AssignReplicasToBrokers,The length of the statement  "		throw new Exception ("replication factor: " + replicationFactor + " larger than available brokers: " + brokerList.Count); " is 121.
Long Statement,Kafka.Client.Admin,AdminUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Admin\AdminUtils.cs,WriteTopicPartitionAssignment,The length of the statement  "	var jsonPartitonData = ZkUtils.ReplicaAssignmentZkData (replicaAssignment.ToDictionary (x => x.Key.ToString ()' v => v.Value)); " is 127.
Long Statement,Kafka.Client.Api,FetchRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchRequest.cs,ReadFrom,The length of the statement  "	return new FetchRequest (versionId' correlationId' clientId' replicaId' maxWait' minBytes' pairs.ToDictionary (x => x.Item1' x => x.Item2)); " is 140.
Long Statement,Kafka.Client.Api,FetchRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchRequest.cs,Equals,The length of the statement  "	return this.VersionId == other.VersionId && string.Equals (this.ClientId' other.ClientId) && this.ReplicaId == other.ReplicaId && this.CorrelationId == other.CorrelationId && this.MaxWait == other.MaxWait && this.MinBytes == other.MinBytes && this.RequestInfo.DictionaryEqual (other.RequestInfo); " is 296.
Long Statement,Kafka.Client.Api,FetchRequestBuilder,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchRequest.cs,Build,The length of the statement  "	var fetchRequest = new FetchRequest (this.versionId' this.correlationId.GetAndIncrement ()' this.clientId' this.replicaId' this.maxWait' this.minBytes' new Dictionary<TopicAndPartition' PartitionFetchInfo> (this.requestMap)); " is 225.
Long Statement,Kafka.Client.Api,FetchResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchResponse.cs,ReadFrom,The length of the statement  "		return topicData.PartitionData.Select (partIdAndData => Tuple.Create (new TopicAndPartition (topicData.Topic' partIdAndData.Key)' partIdAndData.Value)); " is 152.
Long Statement,Kafka.Client.Api,OffsetRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\OffsetRequest.cs,ReadFrom,The length of the statement  "	return new OffsetRequest (pairs.ToDictionary (x => x.Item1' x => x.Item2)' versionId: versionId' clientId: clientId' correlationId: correlationId' replicaId: replicaId); " is 169.
Long Statement,Kafka.Client.Api,OffsetRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\OffsetRequest.cs,Equals,The length of the statement  "	return this.VersionId == other.VersionId && this.CorrelationId == other.CorrelationId && string.Equals (this.ClientId' other.ClientId) && this.ReplicaId == other.ReplicaId && this.RequestInfo.DictionaryEqual (other.RequestInfo); " is 228.
Long Statement,Kafka.Client.Api,OffsetResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\OffsetResponse.cs,ReadFrom,The length of the statement  "			return new KeyValuePair<TopicAndPartition' PartitionOffsetsResponse> (new TopicAndPartition (topic' partiton)' new PartitionOffsetsResponse (error' offsets)); " is 158.
Long Statement,Kafka.Client.Api,OffsetResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\OffsetResponse.cs,Equals,The length of the statement  "	return this.CorrelationId == other.CorrelationId && this.PartitionErrorAndOffsets.DictionaryEqual (other.PartitionErrorAndOffsets); " is 131.
Long Statement,Kafka.Client.Api,PartitionOffsetsResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\OffsetResponse.cs,ToString,The length of the statement  "	return string.Format ("Error: {0}' Offsets: {1}"' ErrorMapping.ExceptionFor (this.Error)' string.Join ("'"' this.Offsets)); " is 123.
Long Statement,Kafka.Client.Api,ProducerRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\ProducerRequest.cs,ReadFrom,The length of the statement  "			return Tuple.Create (new TopicAndPartition (topic' partition)' new ByteBufferMessageSet (ByteBuffer.Wrap (messageSetBuffer))); " is 126.
Long Statement,Kafka.Client.Api,ProducerRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\ProducerRequest.cs,ReadFrom,The length of the statement  "	return new ProducerRequest (versionId' correlationId' clientId' requiredAcks' ackTimeoutMs' partitionDataPairs.ToDictionary (k => k.Item1' v => v.Item2)); " is 154.
Long Statement,Kafka.Client.Api,ProducerRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\ProducerRequest.cs,Equals,The length of the statement  "	return this.VersionId == other.VersionId && string.Equals (this.ClientId' other.ClientId) && this.CorrelationId == other.CorrelationId && this.RequiredAcks == other.RequiredAcks && this.AckTimeoutMs == other.AckTimeoutMs && this.Data.DictionaryEqual (other.Data); " is 263.
Long Statement,Kafka.Client.Api,ProducerResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\ProducerResponse.cs,ReadFrom,The length of the statement  "			return new KeyValuePair<TopicAndPartition' ProducerResponseStatus> (new TopicAndPartition (topic' partition)' new ProducerResponseStatus (error' offset)); " is 154.
Long Statement,Kafka.Client.Api,TopicMetadata,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadata.cs,ToString,The length of the statement  "				topicMetadataInfo.AppendFormat (" Metadata for partition [{0}'{1}] is {2}"' this.Topic' partitionMetadata.PartitionId' partitionMetadata.ToString ()); " is 150.
Long Statement,Kafka.Client.Api,TopicMetadata,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadata.cs,ToString,The length of the statement  "				topicMetadataInfo.AppendFormat (" Metadata for partition [{0}'{1}] is {2}"' this.Topic' partitionMetadata.PartitionId' partitionMetadata.ToString ()); " is 150.
Long Statement,Kafka.Client.Api,TopicMetadata,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadata.cs,ToString,The length of the statement  "				topicMetadataInfo.AppendFormat (" Metadata for partition [{0}'{1}] is not available due to {2}"' this.Topic' partitionMetadata.PartitionId' ErrorMapping.ExceptionFor (partitionMetadata.ErrorCode).GetType ().Name); " is 213.
Long Statement,Kafka.Client.Api,TopicMetadata,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadata.cs,ToString,The length of the statement  "		topicMetadataInfo.AppendFormat ("No partiton metadata for topic {0} due to {1}"' this.Topic' ErrorMapping.ExceptionFor (this.ErrorCode).GetType ().Name); " is 153.
Long Statement,Kafka.Client.Api,TopicMetadata,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadata.cs,Equals,The length of the statement  "	return string.Equals (this.Topic' other.Topic) && this.PartitionsMetadata.SequenceEqual (other.PartitionsMetadata) && this.ErrorCode == other.ErrorCode; " is 152.
Long Statement,Kafka.Client.Api,PartitionMetadata,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadata.cs,ToString,The length of the statement  "	partitionMetadataString.Append (" isUnderReplicated " + (this.Isr.Count () < this.Replicas.Count () ? "true" : "false")); " is 121.
Long Statement,Kafka.Client.Api,PartitionMetadata,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadata.cs,Equals,The length of the statement  "	return this.PartitionId == other.PartitionId && Equals (this.Leader' other.Leader) && this.Replicas.SequenceEqual (other.Replicas) && this.Isr.SequenceEqual (other.Isr) && this.ErrorCode == other.ErrorCode; " is 206.
Long Statement,Kafka.Client.Api,TopicMetadataRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadataRequest.cs,Equals,The length of the statement  "	return this.VersionId == other.VersionId && this.CorrelationId == other.CorrelationId && string.Equals (this.ClientId' other.ClientId) && this.Topics.SequenceEqual (other.Topics); " is 179.
Long Statement,Kafka.Client.Api,TopicMetadataResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadataResponse.cs,ReadFrom,The length of the statement  "	var topicsMetadata = Enumerable.Range (0' topicCount).Select (_ => TopicMetadata.ReadFrom (buffer' brokerMap)).ToList (); " is 121.
Long Statement,Kafka.Client.Api,TopicMetadataResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadataResponse.cs,ToString,The length of the statement  "	return string.Format ("TopicMetadataResponse(TopicsMetadata: {0}' SizeInBytes: {1})"' string.Join ("'"' this.TopicsMetadata)' this.SizeInBytes); " is 144.
Long Statement,Kafka.Client.Common,Config,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Config.cs,ValidateChars,The length of the statement  "		throw new ConfigurationErrorsException (prop + " value " + value + " is illegal' contains a character other than ASCII alphanumerics' '.'' '_' and '-'"); " is 153.
Long Statement,Kafka.Client.Common,ClientIdAndTopic,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\ClientIdAndTopic.cs,GetHashCode,The length of the statement  "		return ((this.ClientId != null ? this.ClientId.GetHashCode () : 0) * 397) ^ (this.Topic != null ? this.Topic.GetHashCode () : 0); " is 129.
Long Statement,Kafka.Client.Common,ErrorMapping,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\ErrorMapping.cs,ExceptionFor,The length of the statement  "	return (Exception)Activator.CreateInstance (CodeToException.TryGetValue (code' out exceptionType) ? exceptionType : typeof(UnknownException)); " is 142.
Long Statement,Kafka.Client.Consumers,ConsumerConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerConfig.cs,ValidateAutoOffsetReset,The length of the statement  "		throw new ConfigurationErrorsException ("Wrong value " + autoOffsetReset + "of auto.reset.offset in ConsumerConfig. " + "Valid values are: " + OffsetRequest.SmallestTimeString + " and " + OffsetRequest.LargestTimeString); " is 221.
Long Statement,Kafka.Client.Consumers,ConsumerConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerConfig.cs,GetIpAddress,The length of the statement  "		throw new ConfigurationErrorsException (string.Format (CultureInfo.CurrentCulture' "Could not resolve the zookeeper server address: {0}."' host)); " is 146.
Long Statement,Kafka.Client.Consumers,ConsumerFetcherManager,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerFetcherManager.cs,CreateFetcherThread,The length of the statement  "	return new ConsumerFetcherThread (string.Format ("ConsumerFetcherThread-{0}-{1}-{2}"' this.consumerIdString' fetcherId' sourceBroker.Id)' this.config' sourceBroker' this.partitionMap' this); " is 190.
Long Statement,Kafka.Client.Consumers,ConsumerFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerFetcherThread.cs,ProcessPartitionData,The length of the statement  "		throw new Exception (string.Format ("Offset doesn't match for partition [{0}'{1}] pti offset: {2} fetch offset: {3}"' topicAndPartition.Topic' topicAndPartition.Partiton' pti.GetFetchOffset ()' fetchOffset)); " is 208.
Long Statement,Kafka.Client.Consumers,ConsumerIterator,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerIterator.cs,MakeNext,The length of the statement  "			Logger.DebugFormat ("CurrentTopicInfo: ConsumedOffset({0})' FetchOffset({1})"' this.currentTopicInfo.GetConsumeOffset ()' this.currentTopicInfo.GetFetchOffset ()); " is 163.
Long Statement,Kafka.Client.Consumers,ConsumerIterator,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerIterator.cs,MakeNext,The length of the statement  "				Logger.ErrorFormat (CultureInfo.CurrentCulture' "consumed offset: {0} doesn't match fetch offset: {1} for {2}; consumer may lose Data"' ctiConsumeOffset' cdcFetchOffset' this.currentTopicInfo); " is 193.
Long Statement,Kafka.Client.Consumers,ConsumerIterator,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerIterator.cs,MakeNext,The length of the statement  "			throw new MessageSizeTooLargeException (string.Format ("Found a message larger than the maximum fetch size of this consumer on topic " + "{0} partition {1} at fetch offset {2}. Increase the fetch size' or decrease the maximum message size the broker will allow."' currentDataChunk.TopicInfo.Topic' currentDataChunk.TopicInfo.PartitionId' currentDataChunk.FetchOffset)); " is 369.
Long Statement,Kafka.Client.Consumers,ConsumerIterator,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ConsumerIterator.cs,MakeNext,The length of the statement  "	return new MessageAndMetadata<TKey' TValue> (this.currentTopicInfo.Topic' this.currentTopicInfo.PartitionId' item.Message' item.Offset' this.keyDecoder' this.valueDecoder); " is 172.
Long Statement,Kafka.Client.Consumers,FetchedDataChunk,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\FetchedDataChunk.cs,Equals,The length of the statement  "	return Equals (this.Messages' other.Messages) && Equals (this.TopicInfo' other.TopicInfo) && this.FetchOffset == other.FetchOffset; " is 131.
Long Statement,Kafka.Client.Consumers,PartitionTopicInfo,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\PartitionTopicInfo.cs,ToString,The length of the statement  "	return string.Format ("{0}:{1}: fetched offset = {2}: consumed offset = {3}"' this.Topic' this.PartitionId' this.fetchedOffset' this.consumedOffset); " is 149.
Long Statement,Kafka.Client.Consumers,SimpleConsumer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\SimpleConsumer.cs,Fetch,The length of the statement  "	this.fetchRequestAndResponseStats.GetFetchRequestAndResponseStats (this.BrokerInfo).RequestSizeHist.Update (fetchedSize); " is 121.
Long Statement,Kafka.Client.Consumers,StaticTopicCount,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\TopicCount.cs,Equals,The length of the statement  "	return string.Equals (this.ConsumerIdString' other.ConsumerIdString) && Equals (this.TopicCountMap' other.TopicCountMap); " is 121.
Long Statement,Kafka.Client.Consumers,StaticTopicCount,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\TopicCount.cs,GetHashCode,The length of the statement  "		return ((this.ConsumerIdString != null ? this.ConsumerIdString.GetHashCode () : 0) * 397) ^ (this.TopicCountMap != null ? this.TopicCountMap.GetHashCode () : 0); " is 161.
Long Statement,Kafka.Client.Consumers,WildcardTopicCount,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\TopicCount.cs,GetConsumerThreadIdsPerTopic,The length of the statement  "	var wildcardTopics = ZkUtils.GetChildrenParentMayNotExist (this.ZkClient' ZkUtils.BrokerTopicsPath).Where (x => TopicFilter.IsTopicAllowed (x)).ToList (); " is 154.
Long Statement,Kafka.Client.Consumers,WildcardTopicCount,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\TopicCount.cs,GetConsumerThreadIdsPerTopic,The length of the statement  "	return this.MakeConsumerThreadIdsPerTopic (this.ConsumerIdString' wildcardTopics.ToDictionary (x => x' v => this.NumStreams)); " is 126.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,CreateMessageStreamsByFilter,The length of the statement  "	var wildcardStreamsHandler = new WildcardStreamsHandler<TKey' TValue> (this' topicFilter' numStreams' keyDecoder' valueDecoder); " is 128.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ConnectZk,The length of the statement  "	this.zkClient = new ZkClient (this.Config.ZooKeeper.ZkConnect' this.Config.ZooKeeper.ZkSessionTimeoutMs' this.Config.ZooKeeper.ZkConnectionTimeoutMs' new ZkStringSerializer ()); " is 177.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,Consume,The length of the statement  "		var stream = new KafkaStream<TKey' TValue> (queue' this.Config.ConsumerTimeoutMs' keyDecoder' valueDecoder' this.Config.ClientId); " is 130.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,RegisterConsumerInZK,The length of the statement  "	ZkUtils.CreateEphemeralPathExpectConflictHandleZKBug (zkClient' dirs.ConsumerRegistryDir + "/" + consumerIdString' consumerRegistrationInfo' null' (consumerZKstring' consumer) => true' this.Config.ZooKeeper.ZkSessionTimeoutMs); " is 227.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,CommitOffsets,The length of the statement  "					ZkUtils.UpdatePersistentPath (zkClient' topicDirs.ConsumerOffsetDir + "/" + info.PartitionId' newOffset.ToString (CultureInfo.InvariantCulture)); " is 145.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ReinitializeConsumer,The length of the statement  "		loadBalancerListener = new ZKRebalancerListener<TKey' TValue> (this' this.Config.GroupId' consumerIdString' topicStreamsMaps); " is 126.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ReinitializeConsumer,The length of the statement  "		sessionExpirationListener = new ZKSessionExpireListener (this' dirs' consumerIdString' topicCount' loadBalancerListener); " is 121.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ReinitializeConsumer,The length of the statement  "	var topicStreamsMap = (IDictionary<string' IList<KafkaStream<TKey' TValue>>>)loadBalancerListener.KafkaMessageAndMetadataStreams; " is 129.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ReinitializeConsumer,The length of the statement  "                 */allQueuesAndStreams = Enumerable.Range (1' consumerThreadIdsPerTopic.Keys.Count).SelectMany (_ => queuesAndStreams).ToList (); " is 128.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ReinitializeConsumer,The length of the statement  "	Contract.Assert (topicThreadIds.Count == allQueuesAndStreams.Count' string.Format ("Mismatch betwen thread ID count ({0}) adn queue count ({1})"' topicThreadIds.Count' allQueuesAndStreams.Count)); " is 196.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ReinitializeConsumer,The length of the statement  "		Logger.DebugFormat ("Adding topicThreadId {0} and queue {1} to topicThreadIdAndQueues Data structure"' topicThreadId' string.Join ("'"' q)); " is 140.
Long Statement,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ReinitializeConsumer,The length of the statement  "		MetersFactory.NewGauge (this.Config.ClientId + "-" + this.Config.GroupId + "-" + topicThreadId.Item1 + "-" + topicThreadId.Item2 + "-FetchQueueSize"' () => q.Count); " is 165.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Handle,The length of the statement  "		if (this.topicMetadataRefreshInterval >= TimeSpan.MinValue && (DateTime.Now - this.lastTopicMetadataRefeshTime) > this.topicMetadataRefreshInterval) { " is 150.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Handle,The length of the statement  "			Util.SwallowError (Logger' () => this.brokerPartitionInfo.UpdateInfo (new HashSet<string> (this.topicMetadataToRefresh)' this.correlationId.GetAndIncrement ())); " is 161.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Handle,The length of the statement  "			Logger.InfoFormat ("Back off for {0} ms before retrying send. Remaining retries = {1}"' this.Config.RetryBackoffMs' remainingRetries - 1); " is 138.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Handle,The length of the statement  "				brokerPartitionInfo.UpdateInfo (new HashSet<string> (outstandingProduceRequests.Select (r => r.Topic))' correlationId.GetAndIncrement ()); " is 138.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Handle,The length of the statement  "		Logger.ErrorFormat ("Failed to send requests for topics {0} with correlation ids in [{1}' {2}]"' string.Join ("'"' outstandingProduceRequests.Select (r => r.Topic))' correlationIdStart' correlationIdEnd); " is 204.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Handle,The length of the statement  "		throw new FailedToSendMessageException ("Failed to send messages after " + this.Config.MessageSendMaxRetries + " tries"); " is 121.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,DispatchSerializedData,The length of the statement  "					Logger.DebugFormat ("Handling event for Topic: {0}' Broker: {1}' Partitions: {2}"' partitionAndEvent.Key' brokerId' string.Join ("'"' partitionAndEvent.Value)); " is 160.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Serialize,The length of the statement  "				return new KeyedMessage<TKey' Message> (e.Topic' e.Key' e.PartKey' new Message (encoder.ToBytes (e.Message)' keyEncoder.ToBytes (e.Key))); " is 138.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,GetPartitionListForTopic,The length of the statement  "	var topicPartitionsList = this.brokerPartitionInfo.GetBrokerPartitionInfo (m.Topic' this.correlationId.GetAndIncrement ()); " is 123.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,GetPartitionListForTopic,The length of the statement  "	Logger.DebugFormat ("Broker partitions registered for topic: {0} are {1}"' m.Topic' string.Join ("'"' topicPartitionsList.Select (p => p.PartitionId.ToString (CultureInfo.InvariantCulture)))); " is 192.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,GetPartition,The length of the statement  "		throw new UnknownTopicOrPartitionException (string.Format ("Invalid partition id : {0}. Valid values are in the range inclusive [0' {1}]"' partition' numPartitions - 1)); " is 170.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,GetPartition,The length of the statement  "	Logger.DebugFormat ("Assigning message of topic {0} and key {1} to a selected partition {2}"' topic' (key == null) ? "[none]" : key.ToString ()' partition); " is 156.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Send,The length of the statement  "		Logger.WarnFormat ("Failed to send Data since partitions {0} don't have a leader"' string.Join ("'"' messagesPerTopic.Select (m => m.Key.Partiton))); " is 149.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Send,The length of the statement  "		var producerRequest = new ProducerRequest (currentCorrelationId' this.Config.ClientId' this.Config.RequestRequiredAcks' this.Config.RequestTimeoutMs' messagesPerTopic); " is 168.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Send,The length of the statement  "			Logger.DebugFormat ("Producer sending messages with correlation id {0} for topics {1} to broker {2} on {3}:{4}"' currentCorrelationId' string.Join ("'"' messagesPerTopic.Keys)' brokerId' syncProducer.Config.Host' syncProducer.Config.Port); " is 239.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Send,The length of the statement  "					throw new KafkaException (string.Format ("Incomplete response ({0}) for producer request ({1})"' response' producerRequest)); " is 125.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Send,The length of the statement  "							Logger.DebugFormat ("Successfully sent messsage: {0}"' message.Message.IsNull () ? null : Util.ReadString (message.Message.Payload)); " is 133.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Send,The length of the statement  "					var errorString = string.Join ("'"' failedPartitionsAndStatus.OrderBy (x => x.Key.Topic).ThenBy (x => x.Key.Partiton).Select (kvp => { " is 134.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,Send,The length of the statement  "			Logger.Warn (string.Format ("Failed to send producer request with correlation id {0} to broker {1} with Data for partitions {2}"' currentCorrelationId' brokerId' string.Join ("'"' messagesPerTopic.Select (m => m.Key)))' e); " is 223.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,GroupMessagesToSet,The length of the statement  "              */IDictionary<TopicAndPartition' ByteBufferMessageSet> messagesPerTopicPartition = new Dictionary<TopicAndPartition' ByteBufferMessageSet> (); " is 142.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,GroupMessagesToSet,The length of the statement  "			messagesPerTopicPartition.Add (new KeyValuePair<TopicAndPartition' ByteBufferMessageSet> (topicAndPartition' new ByteBufferMessageSet (CompressionCodecs.NoCompressionCodec' messages))); " is 185.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,GroupMessagesToSet,The length of the statement  "				messagesPerTopicPartition.Add (new KeyValuePair<TopicAndPartition' ByteBufferMessageSet> (topicAndPartition' new ByteBufferMessageSet (this.Config.CompressionCodec' messages))); " is 177.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,GroupMessagesToSet,The length of the statement  "					messagesPerTopicPartition.Add (new KeyValuePair<TopicAndPartition' ByteBufferMessageSet> (topicAndPartition' new ByteBufferMessageSet (this.Config.CompressionCodec' messages))); " is 177.
Long Statement,Kafka.Client.Producers.Async,DefaultEventHandler,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\DefaultEventHandler.cs,GroupMessagesToSet,The length of the statement  "					messagesPerTopicPartition.Add (new KeyValuePair<TopicAndPartition' ByteBufferMessageSet> (topicAndPartition' new ByteBufferMessageSet (CompressionCodecs.NoCompressionCodec' messages))); " is 185.
Long Statement,Kafka.Client.Producers.Async,ProducerSendThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\ProducerSendThread.cs,ProcessEvents,The length of the statement  "		this.Queue.TryTake (out currentQueueItem' Math.Max (0' Convert.ToInt32 ((lastSend.AddMilliseconds (this.QueueTime) - DateTime.Now).TotalMilliseconds))); " is 152.
Long Statement,Kafka.Client.Producers.Async,ProducerSendThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\ProducerSendThread.cs,ProcessEvents,The length of the statement  "		// check if the queue time is reached. This happens when the take method above returns after a timeout and returns a null object " is 128.
Long Statement,Kafka.Client.Producers.Async,ProducerSendThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\ProducerSendThread.cs,ProcessEvents,The length of the statement  "			this.Logger.InfoFormat ("Dequeued item for topic {0}' partition key: {1}' Data: {2}"' currentQueueItem.Topic' currentQueueItem.Key' string.Join ("' "' currentQueueItem.Message)); " is 178.
Long Statement,Kafka.Client.Producers.Async,ProducerSendThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\Async\ProducerSendThread.cs,ProcessEvents,The length of the statement  "		throw new IllegalQueueStateException (string.Format ("Invalid queue state! After queue shutdown' {0} remaining items in the queue"' this.Queue.Count)); " is 151.
Long Statement,Kafka.Client.Cfg.Elements,BrokerConfigurationElement,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Cfg\Elements\BrokerConfigurationElement.cs,PostDeserialize,The length of the statement  "			throw new ConfigurationErrorsException (string.Format (CultureInfo.CurrentCulture' "Could not resolve the address: {0}."' this.Host)); " is 134.
Long Statement,Kafka.Client.Cfg.Elements,ZooKeeperServerConfigurationElement,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Cfg\Elements\ZooKeeperServerConfigurationElement.cs,PostDeserialize,The length of the statement  "			throw new ConfigurationErrorsException (string.Format (CultureInfo.CurrentCulture' "Could not resolve the address: {0}."' this.Host)); " is 134.
Long Statement,Kafka.Client.Producers,ProducerConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\ProducerConfig.cs,ValidateBatchSize,The length of the statement  "		throw new ConfigurationErrorsException ("Batch size = " + batchSize + " can't be larget than queue size = " + queueSize); " is 121.
Long Statement,Kafka.Client.Producers,ProducerConfig,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\ProducerConfig.cs,GetIpAddress,The length of the statement  "		throw new ConfigurationErrorsException (string.Format (CultureInfo.CurrentCulture' "Could not resolve the zookeeper server address: {0}."' host)); " is 146.
Long Statement,Kafka.Client.Producers,BrokerPartitionInfo,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\BrokerPartitionInfo.cs,GetBrokerPartitionInfo,The length of the statement  "			throw new KafkaException (string.Format ("Topic metadata {0} has empty partition metadata and no error code"' metadata)); " is 121.
Long Statement,Kafka.Client.Producers,BrokerPartitionInfo,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\BrokerPartitionInfo.cs,UpdateInfo,The length of the statement  "			Logger.WarnFormat ("Error while fetch metadata [{0}] for topic [{1}]: {2}"' tmd' tmd.Topic' ErrorMapping.ExceptionFor (tmd.ErrorCode).GetType ().Name); " is 151.
Long Statement,Kafka.Client.Producers,BrokerPartitionInfo,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\BrokerPartitionInfo.cs,UpdateInfo,The length of the statement  "					Logger.WarnFormat ("Error while fetching metadata {0} for topic partiton [{1}'{2}]:[{3}]"' pmd' tmd.Topic' pmd.PartitionId' ErrorMapping.ExceptionFor (pmd.ErrorCode).GetType ()); " is 178.
Long Statement,Kafka.Client.Producers,BrokerPartitionInfo,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\BrokerPartitionInfo.cs,UpdateInfo,The length of the statement  "					//// any other error code (e.g. ReplicaNotAvailable) can be ignored since the producer does not need to access the replica and isr metadata " is 139.
Long Statement,Kafka.Client.Producers,KeyedMessage,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\KeyedMessage.cs,Equals,The length of the statement  "	return string.Equals (this.Topic' other.Topic) && EqualityComparer<TKey>.Default.Equals (this.Key' other.Key) && Equals (this.PartKey' other.PartKey) && EqualityComparer<TValue>.Default.Equals (this.Message' other.Message); " is 223.
Long Statement,Kafka.Client.Producers,KeyedMessage,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\KeyedMessage.cs,ToString,The length of the statement  "	return string.Format ("Topic: {0}' Key: {1}' PartKey: {2}' Message: {3}"' this.Topic' this.Key' this.PartKey' this.Message); " is 124.
Long Statement,Kafka.Client.Client,ClientUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Client\ClientUtils.cs,FetchTopicMetadata,The length of the statement  "	var topicMetadataRequest = new TopicMetadataRequest (TopicMetadataRequest.CurrentVersion' correlationId' producerConfig.ClientId' topics.ToList ()); " is 148.
Long Statement,Kafka.Client.Client,ClientUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Client\ClientUtils.cs,FetchTopicMetadata,The length of the statement  "	// shuffle the list of brokers before sending metadata requests so that most requests don't get routed to the same broker " is 121.
Long Statement,Kafka.Client.Client,ClientUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Client\ClientUtils.cs,FetchTopicMetadata,The length of the statement  "		Logger.InfoFormat ("Fetching metadata from broker {0} with correlation id {1} for {2} topic(s) {3}"' shuffledBrokers [i]' correlationId' topics.Count' string.Join ("'"' topics)); " is 178.
Long Statement,Kafka.Client.Client,ClientUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Client\ClientUtils.cs,FetchTopicMetadata,The length of the statement  "			Logger.Warn (string.Format ("Fetching topic metadata with correlation id {0} for topic [{1}] from broker [{2}] failed"' correlationId' topics' shuffledBrokers [i])' e); " is 168.
Long Statement,Kafka.Client.Client,ClientUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Client\ClientUtils.cs,FetchTopicMetadata,The length of the statement  "		throw new KafkaException (string.Format ("fetching topic metadata for topics [{0}] from broker [{1}] failed"' string.Join ("'"' topics)' string.Join ("' "' shuffledBrokers))' t); " is 178.
Long Statement,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,GetLong,The length of the statement  "	var hi = (uint)(hb [startIndex + 4] | hb [startIndex + 5] << 8 | hb [startIndex + 6] << 16 | hb [startIndex + 7] << 24); " is 120.
Long Statement,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,GetLong,The length of the statement  "	var hi = (uint)(hb [startIndex + 4] | hb [startIndex + 5] << 8 | hb [startIndex + 6] << 16 | hb [startIndex + 7] << 24); " is 120.
Long Statement,Kafka.Client.Messages,CompressionCodec,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\CompressionCodec.cs,GetCompressionCodec,The length of the statement  "		throw new UnknownCodecException (string.Format (CultureInfo.CurrentCulture' "{0} is an unknown compression codec"' codec)); " is 123.
Long Statement,Kafka.Client.Messages,CompressionCodec,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\CompressionCodec.cs,GetCompressionCodecValue,The length of the statement  "		throw new UnknownCodecException (string.Format (CultureInfo.CurrentCulture' "{0} is an unknown compression codec"' compressionCodec)); " is 134.
Long Statement,Kafka.Client.Messages,Message,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\Message.cs,ComputeChecksum,The length of the statement  "	return Utils.Util.Crc32 (this.buffer.Array' this.buffer.ArrayOffset () + MagicOffset' (int)this.buffer.Length - MagicOffset); " is 125.
Long Statement,Kafka.Client.Messages,Message,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\Message.cs,EnsureValid,The length of the statement  "		throw new InvalidMessageException (string.Format ("Message is corrupt (stored crc = {0}' computed crc = {1})"' this.Checksum' this.ComputeChecksum ())); " is 152.
Long Statement,Kafka.Client.Messages,Message,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\Message.cs,ToString,The length of the statement  "	return string.Format ("Magic: {0}' Attributes: {1}' Checksum: {2}' Payload: {3}' Key: {4}"' this.Magic' this.Attributes' this.Checksum' this.Payload' this.Key); " is 160.
Long Statement,Kafka.Client.Network,BlockingChannel,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Network\BlockingChannel.cs,Connect,The length of the statement  "		Logger.DebugFormat ("Created socket with SO_TIMEOUT = {0} (requested {1})' SO_RCVBUF = {2} (requested {3})' SO_SNDBUF = {4} (requested {5})."' this.channel.Client.GetSocketOption (SocketOptionLevel.Socket' SocketOptionName.ReceiveTimeout)' this.ReadTimeoutMs' this.channel.Client.GetSocketOption (SocketOptionLevel.Socket' SocketOptionName.ReceiveBuffer)' this.ReadBufferSize' this.channel.Client.GetSocketOption (SocketOptionLevel.Socket' SocketOptionName.SendBuffer)' this.WriteBufferSize); " is 492.
Long Statement,Kafka.Client.Network,BoundedByteBufferReceive,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Network\BoundedByteBufferReceive.cs,ReadFrom,The length of the statement  "			throw new InvalidRequestException (string.Format ("Request of length {0} is not valid' it is larget than the maximum size of {1} bytes"' size' this.MaxSize)); " is 158.
Long Statement,Kafka.Client.Network,BoundedByteBufferReceive,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Network\BoundedByteBufferReceive.cs,ReadFrom,The length of the statement  "		read = channel.Read (this.contentBuffer.Array' (int)(this.contentBuffer.ArrayOffset () + this.contentBuffer.Position)' this.contentBuffer.Remaining ()); " is 152.
Long Statement,Kafka.Client.Server,AbstractFetcherManager,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherManager.cs,AddFetcherForPartitions,The length of the statement  "			return new BrokerAndFetcherId (brokerAndInitialOffset.Broker' this.GetFetcherId (topicAndPartition.Topic' topicAndPartition.Partiton)); " is 135.
Long Statement,Kafka.Client.Server,AbstractFetcherManager,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherManager.cs,AddFetcherForPartitions,The length of the statement  "			this.fetcherThreadMap.Get (brokerAndFetcherId).AddPartitions (partitionAndOffset.ToDictionary (x => x.Key' x => x.Value.InitOffset)); " is 133.
Long Statement,Kafka.Client.Server,AbstractFetcherManager,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherManager.cs,AddFetcherForPartitions,The length of the statement  "		return "[" + topicAndPartition + "' initOffset " + brokerAndInitialOffset.InitOffset + " to broker " + brokerAndInitialOffset.Broker + "]"; " is 139.
Long Statement,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,ProcessFetchRequest,The length of the statement  "				if (this.partitionMap.TryGetValue (topicAndPartition' out currentOffset) && fetchRequest.RequestInfo [topicAndPartition].Offset == currentOffset) { " is 147.
Long Statement,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,ProcessFetchRequest,The length of the statement  "							// 1. If there is a corrupt message in a topic partition' it does not bring the fetcher thread down and cause other topic partition to also lag " is 143.
Long Statement,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,ProcessFetchRequest,The length of the statement  "							// 2. If the message is corrupt due to a transient state in the log (truncation' partial writes can cause this)' we simply continue and " is 135.
Long Statement,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,ProcessFetchRequest,The length of the statement  "							Logger.ErrorFormat ("Found invalid messages during fetch for partiton [{0}'{1}] offset {2} error {3}"' topic' partitionId' currentOffset' ime.Message); " is 151.
Long Statement,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,ProcessFetchRequest,The length of the statement  "							throw new KafkaException (string.Format ("error processing Data for partition [{0}'{1}] offset {2}"' topic' partitionId' currentOffset)' e); " is 140.
Long Statement,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,ProcessFetchRequest,The length of the statement  "							Logger.ErrorFormat ("Current offset {0} for partiton [{1}'{2}] out of range; reste offset to {3}"' currentOffset' topic' partitionId' newOffset); " is 145.
Long Statement,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,ProcessFetchRequest,The length of the statement  "							Logger.Error (string.Format ("Error getting offset for partiton [{0}'{1}] to broker {2}"' topic' partitionId' sourceBroker.Id)' e); " is 131.
Long Statement,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,ProcessFetchRequest,The length of the statement  "							Logger.ErrorFormat ("Error for partition [{0}'{1}] to broker {2}:{3}"' topic' partitionId' this.sourceBroker.Id' ErrorMapping.ExceptionFor (partitionData.Error).GetType ().Name); " is 178.
Long Statement,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,AddPartitions,The length of the statement  "				this.partitionMap [topicAndPartition] = PartitionTopicInfo.IsOffsetInvalid (offset) ? this.HandleOffsetOutOfRange (topicAndPartition) : offset; " is 143.
Long Statement,Kafka.Client.Server,FetcherLagStats,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,GetFetcherLagStats,The length of the statement  "	return this.Stats.GetAndMaybePut (new ClientIdBrokerTopicPartition (this.metricId.ClientId' this.metricId.BrokerInfo' topic' partitionId)); " is 139.
Long Statement,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The length of the statement  "			uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24)); " is 121.
Long Statement,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The length of the statement  "			crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000]; " is 288.
Long Statement,Kafka.Client.Utils,ZkUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,CreateEphemeralPathExpectConflictHandleZKBug,The length of the statement  "					Logger.InfoFormat ("I wrote this conflicted ephemeral node [{0}] at {1} a while back in a different session' " + "hence I will backoff for this node to be deleted by Zookeeper and retry"' data' path); " is 200.
Long Statement,Kafka.Client.Utils,ZkUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,GetPartitionAssignmentForTopics,The length of the statement  "		Logger.DebugFormat ("Partition map for /brokers/topics/{0} is {1}"' topic' JObject.FromObject (partitionMap).ToString (Formatting.None)); " is 137.
Long Statement,Kafka.Client.Utils,LeaderExistsOrChangedListener,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,HandleDataChange,The length of the statement  "					Logger.DebugFormat ("In leader change listener on partition [{0}' {1}]' leader has been moved from {2} to {3}"' topic' partition' oldLeaderOpt.Value' newLeaderOpt.Value); " is 170.
Long Statement,Kafka.Client.ZKClient,ZkClient,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\ZKClient\ZkClient.cs,Process,The length of the statement  "	var dataChanged = watchedEvent.Type == EventType.NodeDataChanged || watchedEvent.Type == EventType.NodeDeleted || watchedEvent.Type == EventType.NodeCreated || watchedEvent.Type == EventType.NodeChildrenChanged; " is 211.
Long Statement,Kafka.Client.ZKClient,ZkClient,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\ZKClient\ZkClient.cs,ProcessDataOrChildChange,The length of the statement  "	if (watchedEvent.Type == EventType.NodeChildrenChanged || watchedEvent.Type == EventType.NodeCreated || watchedEvent.Type == EventType.NodeDeleted) { " is 149.
Long Statement,Kafka.Client.ZKClient,ZkClient,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\ZKClient\ZkClient.cs,ProcessDataOrChildChange,The length of the statement  "	if (watchedEvent.Type == EventType.NodeDataChanged || watchedEvent.Type == EventType.NodeDeleted || watchedEvent.Type == EventType.NodeCreated) { " is 145.
Virtual Method Call from Constructor,Kafka.Client.Network,BoundedByteBufferSend,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Network\BoundedByteBufferSend.cs,BoundedByteBufferSend,The constructor "BoundedByteBufferSend" calls a virtual method "WriteTo".
Empty Catch Block,Kafka.Client.Utils,Util,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Util.cs,Swallow,The method has an empty catch block.
Empty Catch Block,Kafka.Client.Utils,ZkUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,CreateEphemeralPathExpectConflict,The method has an empty catch block.
Empty Catch Block,Kafka.Client.Utils,ZkUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,MaybeDeletePath,The method has an empty catch block.
Empty Catch Block,Kafka.Client.ZKClient,ZkClient,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\ZKClient\ZkClient.cs,WatchForChilds,The method has an empty catch block.
Magic Number,Kafka.Client.Api,ApiUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\ApiUtils.cs,ShortStringLength,The following statement contains a magic number: if (@string == null) {  	return 2;  }  
Magic Number,Kafka.Client.Api,ApiUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\ApiUtils.cs,ShortStringLength,The following statement contains a magic number: return 2;  
Magic Number,Kafka.Client.Api,ApiUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\ApiUtils.cs,ShortStringLength,The following statement contains a magic number: return 2 + encodedString.Length;  
Magic Number,Kafka.Client.Api,PartitionFetchInfo,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchRequest.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (this.Offset.GetHashCode () * 397) ^ this.FetchSize;  }  
Magic Number,Kafka.Client.Api,PartitionFetchInfo,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchRequest.cs,GetHashCode,The following statement contains a magic number: return (this.Offset.GetHashCode () * 397) ^ this.FetchSize;  
Magic Number,Kafka.Client.Api,TopicData,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchResponse.cs,GetHeaderSize,The following statement contains a magic number: return ApiUtils.ShortStringLength (topic) + 4/* partition count */;  
Magic Number,Kafka.Client.Api,FetchResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchResponse.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (this.CorrelationId * 397) ^ (this.Data != null ? this.Data.GetHashCode () : 0);  }  
Magic Number,Kafka.Client.Api,FetchResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\FetchResponse.cs,GetHashCode,The following statement contains a magic number: return (this.CorrelationId * 397) ^ (this.Data != null ? this.Data.GetHashCode () : 0);  
Magic Number,Kafka.Client.Api,PartitionOffsetRequestInfo,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\OffsetRequest.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (this.Time.GetHashCode () * 397) ^ this.MaxNumOffsets;  }  
Magic Number,Kafka.Client.Api,PartitionOffsetRequestInfo,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\OffsetRequest.cs,GetHashCode,The following statement contains a magic number: return (this.Time.GetHashCode () * 397) ^ this.MaxNumOffsets;  
Magic Number,Kafka.Client.Api,PartitionOffsetsResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\OffsetResponse.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (this.Error.GetHashCode () * 397) ^ (this.Offsets != null ? this.Offsets.GetHashCode () : 0);  }  
Magic Number,Kafka.Client.Api,PartitionOffsetsResponse,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\OffsetResponse.cs,GetHashCode,The following statement contains a magic number: return (this.Error.GetHashCode () * 397) ^ (this.Offsets != null ? this.Offsets.GetHashCode () : 0);  
Magic Number,Kafka.Client.Api,TopicMetadataRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadataRequest.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = this.VersionId.GetHashCode ();  	hashCode = (hashCode * 397) ^ (this.ClientId != null ? this.ClientId.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (this.Topics != null ? this.Topics.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Kafka.Client.Api,TopicMetadataRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadataRequest.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = this.VersionId.GetHashCode ();  	hashCode = (hashCode * 397) ^ (this.ClientId != null ? this.ClientId.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (this.Topics != null ? this.Topics.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Kafka.Client.Api,TopicMetadataRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadataRequest.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (this.ClientId != null ? this.ClientId.GetHashCode () : 0);  
Magic Number,Kafka.Client.Api,TopicMetadataRequest,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Api\TopicMetadataRequest.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (this.Topics != null ? this.Topics.GetHashCode () : 0);  
Magic Number,Kafka.Client.Common,ClientIdAndTopic,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\ClientIdAndTopic.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((this.ClientId != null ? this.ClientId.GetHashCode () : 0) * 397) ^ (this.Topic != null ? this.Topic.GetHashCode () : 0);  }  
Magic Number,Kafka.Client.Common,ClientIdAndTopic,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\ClientIdAndTopic.cs,GetHashCode,The following statement contains a magic number: return ((this.ClientId != null ? this.ClientId.GetHashCode () : 0) * 397) ^ (this.Topic != null ? this.Topic.GetHashCode () : 0);  
Magic Number,Kafka.Client.Common,TopicAndPartition,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\TopicAndPartition.cs,TopicAndPartition,The following statement contains a magic number: unchecked {  	this._hashCode = ((this.Topic != null ? this.Topic.GetHashCode () : 0) * 397) ^ this.Partiton;  }  
Magic Number,Kafka.Client.Common,TopicAndPartition,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\TopicAndPartition.cs,TopicAndPartition,The following statement contains a magic number: this._hashCode = ((this.Topic != null ? this.Topic.GetHashCode () : 0) * 397) ^ this.Partiton;  
Magic Number,Kafka.Client.Consumers,FetchedDataChunk,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\FetchedDataChunk.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = this.Messages != null ? this.Messages.GetHashCode () : 0;  	hashCode = (hashCode * 397) ^ (this.TopicInfo != null ? this.TopicInfo.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ this.FetchOffset.GetHashCode ();  	return hashCode;  }  
Magic Number,Kafka.Client.Consumers,FetchedDataChunk,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\FetchedDataChunk.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = this.Messages != null ? this.Messages.GetHashCode () : 0;  	hashCode = (hashCode * 397) ^ (this.TopicInfo != null ? this.TopicInfo.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ this.FetchOffset.GetHashCode ();  	return hashCode;  }  
Magic Number,Kafka.Client.Consumers,FetchedDataChunk,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\FetchedDataChunk.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (this.TopicInfo != null ? this.TopicInfo.GetHashCode () : 0);  
Magic Number,Kafka.Client.Consumers,FetchedDataChunk,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\FetchedDataChunk.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.FetchOffset.GetHashCode ();  
Magic Number,Kafka.Client.Consumers,StaticTopicCount,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\TopicCount.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((this.ConsumerIdString != null ? this.ConsumerIdString.GetHashCode () : 0) * 397) ^ (this.TopicCountMap != null ? this.TopicCountMap.GetHashCode () : 0);  }  
Magic Number,Kafka.Client.Consumers,StaticTopicCount,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\TopicCount.cs,GetHashCode,The following statement contains a magic number: return ((this.ConsumerIdString != null ? this.ConsumerIdString.GetHashCode () : 0) * 397) ^ (this.TopicCountMap != null ? this.TopicCountMap.GetHashCode () : 0);  
Magic Number,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ZookeeperConsumerConnector,The following statement contains a magic number: if (config.ConsumerId != null) {  	consumerUuid = config.ConsumerId;  } else {  	// generate unique consumerId automatically  	var uuid = Guid.NewGuid ();  	consumerUuid = string.Format ("{0}-{1}-{2}"' Dns.GetHostName ()' DateTimeHelper.CurrentTimeMilis ()' BitConverter.ToString (uuid.ToByteArray ()).Substring (0' 8));  }  
Magic Number,Kafka.Client.Consumers,ZookeeperConsumerConnector,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Consumers\ZookeeperConsumerConnector.cs,ZookeeperConsumerConnector,The following statement contains a magic number: consumerUuid = string.Format ("{0}-{1}-{2}"' Dns.GetHostName ()' DateTimeHelper.CurrentTimeMilis ()' BitConverter.ToString (uuid.ToByteArray ()).Substring (0' 8));  
Magic Number,Kafka.Client.Extensions,DateTimeHelper,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Extensions\DateTimeHelper.cs,CurrentTimeMilis,The following statement contains a magic number: return (long)(DateTime.Now - new DateTime (1970' 1' 1)).TotalMilliseconds;  
Magic Number,Kafka.Client.Producers,KeyedMessage,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\KeyedMessage.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = this.Topic != null ? this.Topic.GetHashCode () : 0;  	hashCode = (hashCode * 397) ^ EqualityComparer<TKey>.Default.GetHashCode (this.Key);  	hashCode = (hashCode * 397) ^ (this.PartKey != null ? this.PartKey.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ EqualityComparer<TValue>.Default.GetHashCode (this.Message);  	return hashCode;  }  
Magic Number,Kafka.Client.Producers,KeyedMessage,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\KeyedMessage.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = this.Topic != null ? this.Topic.GetHashCode () : 0;  	hashCode = (hashCode * 397) ^ EqualityComparer<TKey>.Default.GetHashCode (this.Key);  	hashCode = (hashCode * 397) ^ (this.PartKey != null ? this.PartKey.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ EqualityComparer<TValue>.Default.GetHashCode (this.Message);  	return hashCode;  }  
Magic Number,Kafka.Client.Producers,KeyedMessage,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\KeyedMessage.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = this.Topic != null ? this.Topic.GetHashCode () : 0;  	hashCode = (hashCode * 397) ^ EqualityComparer<TKey>.Default.GetHashCode (this.Key);  	hashCode = (hashCode * 397) ^ (this.PartKey != null ? this.PartKey.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ EqualityComparer<TValue>.Default.GetHashCode (this.Message);  	return hashCode;  }  
Magic Number,Kafka.Client.Producers,KeyedMessage,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\KeyedMessage.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ EqualityComparer<TKey>.Default.GetHashCode (this.Key);  
Magic Number,Kafka.Client.Producers,KeyedMessage,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\KeyedMessage.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (this.PartKey != null ? this.PartKey.GetHashCode () : 0);  
Magic Number,Kafka.Client.Producers,KeyedMessage,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Producers\KeyedMessage.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ EqualityComparer<TValue>.Default.GetHashCode (this.Message);  
Magic Number,Kafka.Client.Clusters,Broker,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Clusters\Broker.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = this.Id;  	hashCode = (hashCode * 397) ^ (this.Host != null ? this.Host.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ this.Port;  	return hashCode;  }  
Magic Number,Kafka.Client.Clusters,Broker,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Clusters\Broker.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = this.Id;  	hashCode = (hashCode * 397) ^ (this.Host != null ? this.Host.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ this.Port;  	return hashCode;  }  
Magic Number,Kafka.Client.Clusters,Broker,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Clusters\Broker.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (this.Host != null ? this.Host.GetHashCode () : 0);  
Magic Number,Kafka.Client.Clusters,Broker,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Clusters\Broker.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.Port;  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutShort,The following statement contains a magic number: this.hb [startIndex + 1] = (byte)(x >> 8);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutShort,The following statement contains a magic number: this.hb [startIndex + 1] = (byte)(x >> 8);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutInt,The following statement contains a magic number: this.hb [startIndex + 1] = (byte)(x >> 8);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutInt,The following statement contains a magic number: this.hb [startIndex + 2] = (byte)(x >> 16);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutInt,The following statement contains a magic number: this.hb [startIndex + 2] = (byte)(x >> 16);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutInt,The following statement contains a magic number: this.hb [startIndex + 3] = (byte)(x >> 24);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutInt,The following statement contains a magic number: this.hb [startIndex + 3] = (byte)(x >> 24);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutInt,The following statement contains a magic number: this.hb [startIndex + 1] = (byte)(x >> 8);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutInt,The following statement contains a magic number: this.hb [startIndex + 2] = (byte)(x >> 16);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutInt,The following statement contains a magic number: this.hb [startIndex + 2] = (byte)(x >> 16);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutInt,The following statement contains a magic number: this.hb [startIndex + 3] = (byte)(x >> 24);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutInt,The following statement contains a magic number: this.hb [startIndex + 3] = (byte)(x >> 24);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,GetLong,The following statement contains a magic number: return IPAddress.NetworkToHostOrder ((long)((ulong)hi) << 32 | lo);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,GetLong,The following statement contains a magic number: return IPAddress.NetworkToHostOrder ((long)((ulong)hi) << 32 | lo);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 1] = (byte)(x >> 8);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 2] = (byte)(x >> 16);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 2] = (byte)(x >> 16);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 3] = (byte)(x >> 24);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 3] = (byte)(x >> 24);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 4] = (byte)(x >> 32);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 4] = (byte)(x >> 32);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 5] = (byte)(x >> 40);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 5] = (byte)(x >> 40);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 6] = (byte)(x >> 48);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 6] = (byte)(x >> 48);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 7] = (byte)(x >> 56);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 7] = (byte)(x >> 56);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 1] = (byte)(x >> 8);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 2] = (byte)(x >> 16);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 2] = (byte)(x >> 16);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 3] = (byte)(x >> 24);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 3] = (byte)(x >> 24);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 4] = (byte)(x >> 32);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 4] = (byte)(x >> 32);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 5] = (byte)(x >> 40);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 5] = (byte)(x >> 40);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 6] = (byte)(x >> 48);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 6] = (byte)(x >> 48);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 7] = (byte)(x >> 56);  
Magic Number,Kafka.Client.Common.Imported,ByteBuffer,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Common\Imported\ByteBuffer.cs,PutLong,The following statement contains a magic number: this.hb [startIndex + 7] = (byte)(x >> 56);  
Magic Number,Kafka.Client.Messages,ByteBufferMessageSet,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\ByteBufferMessageSet.cs,Decompress,The following statement contains a magic number: using (var compressed = CompressionFactory.BuildReader (message.CompressionCodec' inputStream)) {  	int read;  	while ((read = compressed.Read (intermediateBuffer' 0' 1024)) > 0) {  		outputStream.Write (intermediateBuffer' 0' read);  	}  }  
Magic Number,Kafka.Client.Messages,ByteBufferMessageSet,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\ByteBufferMessageSet.cs,Decompress,The following statement contains a magic number: while ((read = compressed.Read (intermediateBuffer' 0' 1024)) > 0) {  	outputStream.Write (intermediateBuffer' 0' read);  }  
Magic Number,Kafka.Client.Messages,ByteBufferMessageSetIterator,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\ByteBufferMessageSet.cs,MakeNextOuter,The following statement contains a magic number: if (this.topIter.Remaining () < 12) {  	return this.AllDone ();  }  
Magic Number,Kafka.Client.Messages,CompressionCodec,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\CompressionCodec.cs,GetCompressionCodec,The following statement contains a magic number: switch (codec) {  case 0:  	return CompressionCodecs.NoCompressionCodec;  case 1:  	return CompressionCodecs.GZIPCompressionCodec;  case 2:  	return CompressionCodecs.SnappyCompressionCodec;  default:  	throw new UnknownCodecException (string.Format (CultureInfo.CurrentCulture' "{0} is an unknown compression codec"' codec));  }  
Magic Number,Kafka.Client.Messages,CompressionCodec,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\CompressionCodec.cs,GetCompressionCodecValue,The following statement contains a magic number: switch (compressionCodec) {  case CompressionCodecs.SnappyCompressionCodec:  	return 2;  case CompressionCodecs.DefaultCompressionCodec:  case CompressionCodecs.GZIPCompressionCodec:  	return 1;  case CompressionCodecs.NoCompressionCodec:  	return 0;  default:  	throw new UnknownCodecException (string.Format (CultureInfo.CurrentCulture' "{0} is an unknown compression codec"' compressionCodec));  }  
Magic Number,Kafka.Client.Messages,CompressionCodec,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\CompressionCodec.cs,GetCompressionCodecValue,The following statement contains a magic number: return 2;  
Magic Number,Kafka.Client.Messages,Message,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\Message.cs,SliceDelimited,The following statement contains a magic number: if (size < 0) {  	return null;  } else {  	var b = this.buffer.Duplicate ();  	b.Position = start + 4;  	b = b.Slice ();  	b.Limit (size);  	b.Rewind ();  	return b;  }  
Magic Number,Kafka.Client.Messages,Message,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\Message.cs,SliceDelimited,The following statement contains a magic number: b.Position = start + 4;  
Magic Number,Kafka.Client.Messages,MessageAndOffset,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\MessageAndOffset.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((this.Message != null ? this.Message.GetHashCode () : 0) * 397) ^ this.Offset.GetHashCode ();  }  
Magic Number,Kafka.Client.Messages,MessageAndOffset,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\MessageAndOffset.cs,GetHashCode,The following statement contains a magic number: return ((this.Message != null ? this.Message.GetHashCode () : 0) * 397) ^ this.Offset.GetHashCode ();  
Magic Number,Kafka.Client.Messages,MessageSet,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Messages\MessageSet.cs,ToString,The following statement contains a magic number: while (iter.HasNext () && i < 100) {  	var message = iter.Next ();  	builder.Append (message);  	if (iter.HasNext ()) {  		builder.Append ("' ");  	}  	i++;  }  
Magic Number,Kafka.Client.Network,BoundedByteBufferReceive,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Network\BoundedByteBufferReceive.cs,ReadFrom,The following statement contains a magic number: if (this.sizeBuffer.Remaining () > 0) {  	read += channel.Read (this.sizeBuffer.Array' 0' 4);  	this.sizeBuffer.Position = read;  }  
Magic Number,Kafka.Client.Network,BoundedByteBufferReceive,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Network\BoundedByteBufferReceive.cs,ReadFrom,The following statement contains a magic number: read += channel.Read (this.sizeBuffer.Array' 0' 4);  
Magic Number,Kafka.Client.Server,AbstractFetcherManager,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherManager.cs,GetFetcherId,The following statement contains a magic number: return Math.Abs ((31 * topic.GetHashCode ()) + partitionId) % this.NumFetchers;  
Magic Number,Kafka.Client.Server,BrokerAndFetcherId,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherManager.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((this.Broker != null ? this.Broker.GetHashCode () : 0) * 397) ^ this.FetcherId;  }  
Magic Number,Kafka.Client.Server,BrokerAndFetcherId,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherManager.cs,GetHashCode,The following statement contains a magic number: return ((this.Broker != null ? this.Broker.GetHashCode () : 0) * 397) ^ this.FetcherId;  
Magic Number,Kafka.Client.Server,BrokerAndInitialOffset,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherManager.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((this.Broker != null ? this.Broker.GetHashCode () : 0) * 397) ^ this.InitOffset.GetHashCode ();  }  
Magic Number,Kafka.Client.Server,BrokerAndInitialOffset,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherManager.cs,GetHashCode,The following statement contains a magic number: return ((this.Broker != null ? this.Broker.GetHashCode () : 0) * 397) ^ this.InitOffset.GetHashCode ();  
Magic Number,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,DoWork,The following statement contains a magic number: try {  	if (this.partitionMap.Count == 0) {  		this.partitionMapCond.Await (TimeSpan.FromMilliseconds (200));  	}  	foreach (var topicAndOffset in this.partitionMap) {  		var topicAndPartition = topicAndOffset.Key;  		var offset = topicAndOffset.Value;  		this.fetchRequestBuilder.AddFetch (topicAndPartition.Topic' topicAndPartition.Partiton' offset' this.fetchSize);  	}  } finally {  	this.partitionMapLock.Unlock ();  }  
Magic Number,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,DoWork,The following statement contains a magic number: if (this.partitionMap.Count == 0) {  	this.partitionMapCond.Await (TimeSpan.FromMilliseconds (200));  }  
Magic Number,Kafka.Client.Server,AbstractFetcherThread,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Server\AbstractFetcherThread.cs,DoWork,The following statement contains a magic number: this.partitionMapCond.Await (TimeSpan.FromMilliseconds (200));  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: unchecked {  	Table = new uint[256 * CRC_NUM_TABLES];  	uint i;  	for (i = 0; i < 256; i++) {  		uint r = i;  		for (int j = 0; j < 8; j++) {  			r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  		}  		Table [i] = r;  	}  	for (; i < 256 * CRC_NUM_TABLES; i++) {  		uint r = Table [i - 256];  		Table [i] = Table [r & 0xFF] ^ (r >> 8);  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: unchecked {  	Table = new uint[256 * CRC_NUM_TABLES];  	uint i;  	for (i = 0; i < 256; i++) {  		uint r = i;  		for (int j = 0; j < 8; j++) {  			r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  		}  		Table [i] = r;  	}  	for (; i < 256 * CRC_NUM_TABLES; i++) {  		uint r = Table [i - 256];  		Table [i] = Table [r & 0xFF] ^ (r >> 8);  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: unchecked {  	Table = new uint[256 * CRC_NUM_TABLES];  	uint i;  	for (i = 0; i < 256; i++) {  		uint r = i;  		for (int j = 0; j < 8; j++) {  			r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  		}  		Table [i] = r;  	}  	for (; i < 256 * CRC_NUM_TABLES; i++) {  		uint r = Table [i - 256];  		Table [i] = Table [r & 0xFF] ^ (r >> 8);  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: unchecked {  	Table = new uint[256 * CRC_NUM_TABLES];  	uint i;  	for (i = 0; i < 256; i++) {  		uint r = i;  		for (int j = 0; j < 8; j++) {  			r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  		}  		Table [i] = r;  	}  	for (; i < 256 * CRC_NUM_TABLES; i++) {  		uint r = Table [i - 256];  		Table [i] = Table [r & 0xFF] ^ (r >> 8);  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: unchecked {  	Table = new uint[256 * CRC_NUM_TABLES];  	uint i;  	for (i = 0; i < 256; i++) {  		uint r = i;  		for (int j = 0; j < 8; j++) {  			r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  		}  		Table [i] = r;  	}  	for (; i < 256 * CRC_NUM_TABLES; i++) {  		uint r = Table [i - 256];  		Table [i] = Table [r & 0xFF] ^ (r >> 8);  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: unchecked {  	Table = new uint[256 * CRC_NUM_TABLES];  	uint i;  	for (i = 0; i < 256; i++) {  		uint r = i;  		for (int j = 0; j < 8; j++) {  			r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  		}  		Table [i] = r;  	}  	for (; i < 256 * CRC_NUM_TABLES; i++) {  		uint r = Table [i - 256];  		Table [i] = Table [r & 0xFF] ^ (r >> 8);  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: Table = new uint[256 * CRC_NUM_TABLES];  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	uint r = i;  	for (int j = 0; j < 8; j++) {  		r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  	}  	Table [i] = r;  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	uint r = i;  	for (int j = 0; j < 8; j++) {  		r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  	}  	Table [i] = r;  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: for (; i < 256 * CRC_NUM_TABLES; i++) {  	uint r = Table [i - 256];  	Table [i] = Table [r & 0xFF] ^ (r >> 8);  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: for (; i < 256 * CRC_NUM_TABLES; i++) {  	uint r = Table [i - 256];  	Table [i] = Table [r & 0xFF] ^ (r >> 8);  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: for (; i < 256 * CRC_NUM_TABLES; i++) {  	uint r = Table [i - 256];  	Table [i] = Table [r & 0xFF] ^ (r >> 8);  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Crc32,The following statement contains a magic number: Table [i] = Table [r & 0xFF] ^ (r >> 8);  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,UpdateByte,The following statement contains a magic number: this.value = (this.value >> 8) ^ Table [(byte)this.value ^ b];  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: for (; (offset & 7) != 0 && count != 0; count--) {  	crc = (crc >> 8) ^ table [(byte)crc ^ data [offset++]];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: for (; (offset & 7) != 0 && count != 0; count--) {  	crc = (crc >> 8) ^ table [(byte)crc ^ data [offset++]];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc = (crc >> 8) ^ table [(byte)crc ^ data [offset++]];  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: if (count >= 8) {  	/*                  * Idea from 7-zip project sources (http://7-zip.org/sdk.html)                  */int to = (count - 8) & ~7;  	count -= to;  	to += offset;  	while (offset != to) {  		crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  		uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  		offset += 8;  		crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  	}  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (offset != to) {  	crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  	uint high = (uint)(data [offset + 4] + (data [offset + 5] << 8) + (data [offset + 6] << 16) + (data [offset + 7] << 24));  	offset += 8;  	crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc ^= (uint)(data [offset] + (data [offset + 1] << 8) + (data [offset + 2] << 16) + (data [offset + 3] << 24));  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: offset += 8;  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc = table [(byte)crc + 0x700] ^ table [(byte)(crc >>= 8) + 0x600] ^ table [(byte)(crc >>= 8) + 0x500] ^ table [/*(byte)*/(crc >> 8) + 0x400] ^ table [(byte)(high) + 0x300] ^ table [(byte)(high >>= 8) + 0x200] ^ table [(byte)(high >>= 8) + 0x100] ^ table [/*(byte)*/(high >> 8) + 0x000];  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: while (count-- != 0) {  	crc = (crc >> 8) ^ table [(byte)crc ^ data [offset++]];  }  
Magic Number,Kafka.Client.Utils,Crc32,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\Crc32.cs,Update,The following statement contains a magic number: crc = (crc >> 8) ^ table [(byte)crc ^ data [offset++]];  
Magic Number,Kafka.Client.Utils,ZkUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,MaybeDeletePath,The following statement contains a magic number: try {  	var zk = new ZkClient (zkUrl' 30 * 1000' 30 * 1000' new ZkStringSerializer ());  	zk.DeleteRecursive (dir);  	zk.Dispose ();  } catch {  	// swallow  }  
Magic Number,Kafka.Client.Utils,ZkUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,MaybeDeletePath,The following statement contains a magic number: try {  	var zk = new ZkClient (zkUrl' 30 * 1000' 30 * 1000' new ZkStringSerializer ());  	zk.DeleteRecursive (dir);  	zk.Dispose ();  } catch {  	// swallow  }  
Magic Number,Kafka.Client.Utils,ZkUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,MaybeDeletePath,The following statement contains a magic number: try {  	var zk = new ZkClient (zkUrl' 30 * 1000' 30 * 1000' new ZkStringSerializer ());  	zk.DeleteRecursive (dir);  	zk.Dispose ();  } catch {  	// swallow  }  
Magic Number,Kafka.Client.Utils,ZkUtils,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\Utils\ZkUtils.cs,MaybeDeletePath,The following statement contains a magic number: try {  	var zk = new ZkClient (zkUrl' 30 * 1000' 30 * 1000' new ZkStringSerializer ());  	zk.DeleteRecursive (dir);  	zk.Dispose ();  } catch {  	// swallow  }  
Magic Number,Kafka.Client.ZKClient,ZkClient,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\ZKClient\ZkClient.cs,Dispose,The following statement contains a magic number: try {  	ShutdownTrigger = true;  	_eventThread.Interrupt ();  	_eventThread.Join (2000);  	_connection.Dispose ();  	_connection = null;  } catch (ThreadInterruptedException e) {  	throw new ZkInterruptedException (e);  } finally {  	EventLock.Unlock ();  }  
Magic Number,Kafka.Client.ZKClient,ZkClient,F:\newReposMay17\ExactTargetDev_kafka-net\src\Kafka\Kafka.Client\ZKClient\ZkClient.cs,Dispose,The following statement contains a magic number: _eventThread.Join (2000);  
