Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RohBot,Command,C:\repos\Rohansi_RohBot\RohBot\Command.cs,Handle,Cyclomatic complexity of the method is 10
Complex Method,RohBot.Commands,Ban,C:\repos\Rohansi_RohBot\RohBot\Commands\Ban.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,RohBot.Commands,Unban,C:\repos\Rohansi_RohBot\RohBot\Commands\Unban.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,RohBot.Packets,ChatHistoryRequest,C:\repos\Rohansi_RohBot\RohBot\Packets\ChatHistoryRequest.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,RohBot.Packets,SendMessage,C:\repos\Rohansi_RohBot\RohBot\Packets\SendMessage.cs,Handle,Cyclomatic complexity of the method is 8
Long Parameter List,RohBot,ChatLine,C:\repos\Rohansi_RohBot\RohBot\HistoryLine.cs,ChatLine,The method has 8 parameters. Parameters: date' chat' userType' sender' senderId' senderStyle' content' inGame
Long Parameter List,RohBot,StateLine,C:\repos\Rohansi_RohBot\RohBot\HistoryLine.cs,StateLine,The method has 12 parameters. Parameters: date' chat' state' for' forId' forType' forStyle' by' byId' byType' byStyle' content
Long Parameter List,RohBot,NotificationManager,C:\repos\Rohansi_RohBot\RohBot\NotificationManager.cs,Notify,The method has 5 parameters. Parameters: deviceTokens' title' content' chat' date
Long Parameter List,RohBot.Packets,UserList,C:\repos\Rohansi_RohBot\RohBot\Packets\UserList.cs,AddUser,The method has 8 parameters. Parameters: name' userId' rank' avatar' status' playing' web' style
Long Parameter List,RohBot.Packets,User,C:\repos\Rohansi_RohBot\RohBot\Packets\UserList.cs,User,The method has 8 parameters. Parameters: name' userId' rank' avatar' status' playing' web' style
Long Statement,RohBot,Account,C:\repos\Rohansi_RohBot\RohBot\Account.cs,Save,The length of the statement  "            var cmd = new SqlCommand("UPDATE rohbot.accounts SET password=:pass' salt=:salt' enabledstyle=:style' rooms=:rooms WHERE id=:id;"); " is 131.
Long Statement,RohBot,Account,C:\repos\Rohansi_RohBot\RohBot\Account.cs,Insert,The length of the statement  "            var cmd = new SqlCommand("INSERT INTO rohbot.accounts (address'name'password'salt'enabledstyle'rooms) VALUES (:addr':name':pass':salt':style':rooms) RETURNING id;"); " is 165.
Long Statement,RohBot,LoginToken,C:\repos\Rohansi_RohBot\RohBot\Account.cs,UpdateAccessed,The length of the statement  "            var cmd = new SqlCommand("UPDATE rohbot.logintokens2 SET accessed=:accessed' useragent=:useragent' address=:address WHERE id=:id;"); " is 132.
Long Statement,RohBot,DelayManager,C:\repos\Rohansi_RohBot\RohBot\DelayManager.cs,AddAndCheck,The length of the statement  "                    connection.SendSysMessage("Too many requests are coming from your location and your request has been canceled. Please wait and try again in a few minutes."); " is 157.
Long Statement,RohBot,ChatLine,C:\repos\Rohansi_RohBot\RohBot\HistoryLine.cs,Insert,The length of the statement  "            var cmd = new SqlCommand("INSERT INTO rohbot.chathistory (type'date'chat'content'usertype'sender'senderid'senderstyle'ingame)" + " is 128.
Long Statement,RohBot,ChatLine,C:\repos\Rohansi_RohBot\RohBot\HistoryLine.cs,Insert,The length of the statement  "                                     "VALUES (:type':date':chat':content':usertype':sender':senderid':senderstyle':ingame) RETURNING id;"' connection' transaction); " is 127.
Long Statement,RohBot,StateLine,C:\repos\Rohansi_RohBot\RohBot\HistoryLine.cs,Insert,The length of the statement  "            var cmd = new SqlCommand("INSERT INTO rohbot.chathistory (type'date'chat'content'state'\"for\"'forid'fortype'forstyle'by'byid'bytype'bystyle)" +  " is 144.
Long Statement,RohBot,StateLine,C:\repos\Rohansi_RohBot\RohBot\HistoryLine.cs,Insert,The length of the statement  "                                     "VALUES (:type':date':chat':content':state':for':forid':fortype':forstyle':by':byid':bytype':bystyle) RETURNING id;"' connection' transaction); " is 143.
Long Statement,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,LookupSpotify,The length of the statement  "                            var apiQuery = string.Format("https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=1&order=relevance&q={0}%20%2B%20{1}&key={2}"' ytName' ytArtist' ApiKey); " is 171.
Long Statement,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,LookupYoutube,The length of the statement  "                        var apiRequestUrl = string.Format(@"https://www.googleapis.com/youtube/v3/videos?part=snippet'contentDetails'statistics&id={0}&key={1}"' videoId' ApiKey); " is 154.
Long Statement,RohBot,Notification,C:\repos\Rohansi_RohBot\RohBot\Notification.cs,Insert,The length of the statement  "            var cmd = new SqlCommand("INSERT INTO rohbot.notifications (userid' regex' devicetoken) VALUES(:userid' :regex' :devicetoken) RETURNING id;"); " is 142.
Long Statement,RohBot,NotificationManager,C:\repos\Rohansi_RohBot\RohBot\NotificationManager.cs,PostNotificationRequest,The length of the statement  "            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic"' Program.Settings.NotificationAPIKey); " is 125.
Long Statement,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,IsMod,The length of the statement  "                return member != null && (member.Rank == EClanPermission.Owner || member.Rank == EClanPermission.Officer || member.Rank == EClanPermission.Moderator); " is 150.
Long Statement,RohBot.Packets,ChatHistoryRequest,C:\repos\Rohansi_RohBot\RohBot\Packets\ChatHistoryRequest.cs,Handle,The length of the statement  "                var cmd = new SqlCommand("SELECT * FROM rohbot.chathistory WHERE chat=lower(:chat) AND date<:afterdate ORDER BY date DESC LIMIT 100;"); " is 135.
Long Statement,RohBot.Packets,ChatHistoryRequest,C:\repos\Rohansi_RohBot\RohBot\Packets\ChatHistoryRequest.cs,Handle,The length of the statement  "                lines.Add(new ChatLine(0' Target' "Steam"' Program.Settings.PersonaName' "0"' ""' "No additional history is available."' false)); " is 129.
Long Statement,RohBot.Rooms,Room,C:\repos\Rohansi_RohBot\RohBot\Rooms\Room.cs,Send,The length of the statement  "            var line = new ChatLine(Util.GetCurrentTimestamp()' RoomInfo.ShortName' "Steam"' Program.Settings.PersonaName' "0"' ""' str' false); " is 132.
Long Statement,RohBot.Rooms,Room,C:\repos\Rohansi_RohBot\RohBot\Rooms\Room.cs,ClearScrollbackFor,The length of the statement  "            var chatHistory = new ChatHistory { ShortName = RoomInfo.ShortName' Requested = false' Lines = new List<HistoryLine>() }; " is 121.
Long Statement,RohBot.Rooms.Steam,SteamRoom,C:\repos\Rohansi_RohBot\RohBot\Rooms\Steam\SteamRoom.cs,SendPersistentSysMessage,The length of the statement  "            var line = new ChatLine(Util.GetCurrentTimestamp()' RoomInfo.ShortName' "Steam"' Program.Settings.PersonaName' "0"' ""' str' false); " is 132.
Long Statement,RohBot.Rooms.Steam,SteamRoom,C:\repos\Rohansi_RohBot\RohBot\Rooms\Steam\SteamRoom.cs,HandleMessage,The length of the statement  "            var line = new ChatLine(Util.GetCurrentTimestamp()' RoomInfo.ShortName' "Steam"' senderName' senderId' ""' message' inGame); " is 124.
Complex Conditional,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The conditional expression  "cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343)"  is complex.
Complex Conditional,RohBot.Rooms.Steam,SteamRoom,C:\repos\Rohansi_RohBot\RohBot\Rooms\Steam\SteamRoom.cs,SendLine,The conditional expression  "EchoWebStates && stateLine != null && Chat != null && stateLine.ForType == "RohBot" && stateLine.State != "Action""  is complex.
Empty Catch Block,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,LookupSpotify,The method has an empty catch block.
Empty Catch Block,RohBot,WebSocketClient,C:\repos\Rohansi_RohBot\RohBot\WebSocketClient.cs,WriteWebSocketAsync,The method has an empty catch block.
Magic Number,RohBot,BatchInserter,C:\repos\Rohansi_RohBot\RohBot\BatchInserter.cs,BatchInserter,The following statement contains a magic number: _buffer = new BufferBlock<IInsertable>(new DataflowBlockOptions              {                  BoundedCapacity = 250              });
Magic Number,RohBot,BatchInserter,C:\repos\Rohansi_RohBot\RohBot\BatchInserter.cs,ConsumeThread,The following statement contains a magic number: while (!ct.IsCancellationRequested)              {                  if (_buffer.Count == 0)                  {                      Thread.Sleep(100);                      continue;                  }                    try                  {                      using (var connection = Database.CreateConnection())                      using (var transaction = connection.BeginTransaction())                      {                          IInsertable insertable;                          while (_buffer.TryReceive(null' out insertable))                          {                              try                              {                                  insertable.Insert(connection' transaction);                              }                              catch (Exception e)                              {                                  Program.Logger.Error("Batch insert failed"' e);                              }                          }                            transaction.Commit();                      }                  }                  catch (Exception e)                  {                      Program.Logger.Error("Batch insert database connection failed"' e);                  }                    Thread.Sleep(100);              }
Magic Number,RohBot,BatchInserter,C:\repos\Rohansi_RohBot\RohBot\BatchInserter.cs,ConsumeThread,The following statement contains a magic number: while (!ct.IsCancellationRequested)              {                  if (_buffer.Count == 0)                  {                      Thread.Sleep(100);                      continue;                  }                    try                  {                      using (var connection = Database.CreateConnection())                      using (var transaction = connection.BeginTransaction())                      {                          IInsertable insertable;                          while (_buffer.TryReceive(null' out insertable))                          {                              try                              {                                  insertable.Insert(connection' transaction);                              }                              catch (Exception e)                              {                                  Program.Logger.Error("Batch insert failed"' e);                              }                          }                            transaction.Commit();                      }                  }                  catch (Exception e)                  {                      Program.Logger.Error("Batch insert database connection failed"' e);                  }                    Thread.Sleep(100);              }
Magic Number,RohBot,Connection,C:\repos\Rohansi_RohBot\RohBot\Connection.cs,Register,The following statement contains a magic number: do              {                  if (Session != null)                  {                      message = "You can not register while logged in.";                      break;                  }                    if (!Util.IsValidUsername(username))                  {                      message = Util.InvalidUsernameMessage;                      break;                  }                    if (!Util.IsValidPassword(password))                  {                      message = Util.InvalidPasswordMessage;                      break;                  }                    var accountsFromAddress = Account.FindWithAddress(Address).Count();                  if (accountsFromAddress >= 3)                  {                      message = "Too many accounts were created from this location.";                      break;                  }                    var salt = Util.GenerateSalt();                  var account = new Account                  {                      Address = Address'                      Name = username'                      Password = Convert.ToBase64String(Util.HashPassword(password' salt))'                      Salt = Convert.ToBase64String(salt)'                      EnabledStyle = ""'                      Rooms = new string[0]                  };                    try                  {                      account.Insert();                  }                  catch (NpgsqlException)                  {                      message = "An account with that name already exists.";                      break;                  }                    message = "Account created. You can now login.";              } while (false);
Magic Number,RohBot,Database,C:\repos\Rohansi_RohBot\RohBot\Database.cs,Database,The following statement contains a magic number: _connectionStr = new NpgsqlConnectionStringBuilder              {                  Host = Program.Settings.DbAddress'                  Port = Program.Settings.DbPort'                  Database = Program.Settings.DbName'                  UserName = Program.Settings.DbUser'                  Password = Program.Settings.DbPass'                    Pooling = true'                  MinPoolSize = 1'                  MaxPoolSize = 20              };
Magic Number,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,Lookup,The following statement contains a magic number: var titles = LookupYoutube(message)                          .Concat(LookupSpotify(message))                          .Concat(LookupFacepunch(message))                          .OrderBy(i => i.Item1)                          .Take(5)                          .ToList();
Magic Number,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,Lookup,The following statement contains a magic number: if (res.Length > 500)                  res = res.Substring(0' 500) + "...";
Magic Number,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,Lookup,The following statement contains a magic number: if (res.Length > 500)                  res = res.Substring(0' 500) + "...";
Magic Number,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,LookupYoutube,The following statement contains a magic number: foreach (var m in matches.DistinctBy(m => m.Groups[1].Value))              {                  var match = m;                  var offset = match.Index;                  var response = new AsyncLazy<string>(async () =>                  {                      try                      {                          var videoId = match.Groups[1].Value;                            // youtube video ids are 11 characters and will ignore extra characters                          // the api however does not                          if (videoId.Length > 11)                              videoId = videoId.Substring(0' 11);                            var apiRequestUrl = string.Format(@"https://www.googleapis.com/youtube/v3/videos?part=snippet'contentDetails'statistics&id={0}&key={1}"' videoId' ApiKey);                          var responseFromServer = await DownloadPage(apiRequestUrl' Encoding.UTF8);                            var token = JObject.Parse(responseFromServer);                          var item = token["items"].First;                          var title = item["snippet"]["title"].ToObject<string>();                          var length = ParseDuration(item["contentDetails"]["duration"].ToObject<string>());                          var formattedLength = FormatTime(TimeSpan.FromSeconds(length));                            var statistics = item["statistics"];                          var likeCount = statistics["likeCount"];                          var dislikeCount = statistics["dislikeCount"];                            var stats = string.Format("{0} • {1:n0} views"'                              formattedLength'                              statistics["viewCount"].ToObject<long>()                          );                            if (likeCount != null && dislikeCount != null)                          {                              stats += $" • {likeCount.ToObject<int>():n0} 👍 {dislikeCount.ToObject<int>():n0} 👎";                          }                            return $"YouTube: {title} ({stats})";                      }                      catch (Exception e)                      {                          Program.Logger.Warn("LinkTitles Error"' e);                      }                        return null;                  });                    yield return Tuple.Create(offset' response);              }
Magic Number,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,LookupYoutube,The following statement contains a magic number: foreach (var m in matches.DistinctBy(m => m.Groups[1].Value))              {                  var match = m;                  var offset = match.Index;                  var response = new AsyncLazy<string>(async () =>                  {                      try                      {                          var videoId = match.Groups[1].Value;                            // youtube video ids are 11 characters and will ignore extra characters                          // the api however does not                          if (videoId.Length > 11)                              videoId = videoId.Substring(0' 11);                            var apiRequestUrl = string.Format(@"https://www.googleapis.com/youtube/v3/videos?part=snippet'contentDetails'statistics&id={0}&key={1}"' videoId' ApiKey);                          var responseFromServer = await DownloadPage(apiRequestUrl' Encoding.UTF8);                            var token = JObject.Parse(responseFromServer);                          var item = token["items"].First;                          var title = item["snippet"]["title"].ToObject<string>();                          var length = ParseDuration(item["contentDetails"]["duration"].ToObject<string>());                          var formattedLength = FormatTime(TimeSpan.FromSeconds(length));                            var statistics = item["statistics"];                          var likeCount = statistics["likeCount"];                          var dislikeCount = statistics["dislikeCount"];                            var stats = string.Format("{0} • {1:n0} views"'                              formattedLength'                              statistics["viewCount"].ToObject<long>()                          );                            if (likeCount != null && dislikeCount != null)                          {                              stats += $" • {likeCount.ToObject<int>():n0} 👍 {dislikeCount.ToObject<int>():n0} 👎";                          }                            return $"YouTube: {title} ({stats})";                      }                      catch (Exception e)                      {                          Program.Logger.Warn("LinkTitles Error"' e);                      }                        return null;                  });                    yield return Tuple.Create(offset' response);              }
Magic Number,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,DownloadPage,The following statement contains a magic number: var timeout = Task.Delay(TimeSpan.FromSeconds(10));
Magic Number,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,ParseDuration,The following statement contains a magic number: foreach (var match in _duration.Matches(duration).Cast<Match>())              {                  var value = match.Value;                  var unit = value[value.Length - 1];                  var amount = int.Parse(value.Substring(0' value.Length - 1));                    switch (unit)                  {                      case 'H':                          seconds += amount * 60 * 60;                          break;                      case 'M':                          seconds += amount * 60;                          break;                      case 'S':                          seconds += amount;                          break;                  }              }
Magic Number,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,ParseDuration,The following statement contains a magic number: foreach (var match in _duration.Matches(duration).Cast<Match>())              {                  var value = match.Value;                  var unit = value[value.Length - 1];                  var amount = int.Parse(value.Substring(0' value.Length - 1));                    switch (unit)                  {                      case 'H':                          seconds += amount * 60 * 60;                          break;                      case 'M':                          seconds += amount * 60;                          break;                      case 'S':                          seconds += amount;                          break;                  }              }
Magic Number,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,ParseDuration,The following statement contains a magic number: foreach (var match in _duration.Matches(duration).Cast<Match>())              {                  var value = match.Value;                  var unit = value[value.Length - 1];                  var amount = int.Parse(value.Substring(0' value.Length - 1));                    switch (unit)                  {                      case 'H':                          seconds += amount * 60 * 60;                          break;                      case 'M':                          seconds += amount * 60;                          break;                      case 'S':                          seconds += amount;                          break;                  }              }
Magic Number,RohBot,Notification,C:\repos\Rohansi_RohBot\RohBot\Notification.cs,CreateRegex,The following statement contains a magic number: return new Regex(pattern' RegexOptions.IgnoreCase' TimeSpan.FromMilliseconds(15));
Magic Number,RohBot,Program,C:\repos\Rohansi_RohBot\RohBot\Program.cs,Main,The following statement contains a magic number: ThreadPool.SetMaxThreads(10' 1);
Magic Number,RohBot,Program,C:\repos\Rohansi_RohBot\RohBot\Program.cs,Main,The following statement contains a magic number: _taskScheduler.Add(TimeSpan.FromSeconds(0.5)' () =>              {                  SessionManager.Update();                  RoomManager.Update();                  DelayManager.Update();                  Steam.Update();              });
Magic Number,RohBot,Program,C:\repos\Rohansi_RohBot\RohBot\Program.cs,Main,The following statement contains a magic number: _taskScheduler.Add(TimeSpan.FromSeconds(15)' () => SessionManager.Ping());
Magic Number,RohBot,Program,C:\repos\Rohansi_RohBot\RohBot\Program.cs,Main,The following statement contains a magic number: _taskScheduler.Add(TimeSpan.FromHours(1)' () =>              {                  var t = Util.GetTimestamp(DateTime.UtcNow - TimeSpan.FromDays(30));                  LoginToken.RemoveOlderThan(t);              });
Magic Number,RohBot,Program,C:\repos\Rohansi_RohBot\RohBot\Program.cs,Main,The following statement contains a magic number: _taskScheduler.Add(TimeSpan.FromSeconds(10)' () =>              {                  if (!NotificationsDirty)                      return;                    NotificationManager.InvalidateNotificationCache();                  NotificationsDirty = false;              });
Magic Number,RohBot,Program,C:\repos\Rohansi_RohBot\RohBot\Program.cs,Main,The following statement contains a magic number: _taskScheduler.Add(TimeSpan.FromMinutes(2.5)' () =>              {                  if (Steam.Status == Steam.ConnectionStatus.Connected)                  {                      Steam.Bot.PersonaState = EPersonaState.Online;                  }              });
Magic Number,RohBot,Program,C:\repos\Rohansi_RohBot\RohBot\Program.cs,Main,The following statement contains a magic number: while (true)              {                  _taskScheduler.Run();                  Thread.Sleep(10);              }
Magic Number,RohBot,Session,C:\repos\Rohansi_RohBot\RohBot\Session.cs,Update,The following statement contains a magic number: lock (_sync)              {                  _connections.RemoveAll(conn => !conn.IsConnected);                    if (_connections.Count > 0)                  {                      _isMobile = _connections.Any(c => c.IsMobile);                      _timeWithoutConnection = 0;                      return;                  }                    float timeout = _isMobile ? 2.5f : 0.5f;                                    _timeWithoutConnection += delta;                  IsActive = _timeWithoutConnection < (timeout * 60);              }
Magic Number,RohBot,SessionManager,C:\repos\Rohansi_RohBot\RohBot\SessionManager.cs,Start,The following statement contains a magic number: _server = new WebSocketServer<Connection>(new IPEndPoint(IPAddress.Any' 12000));
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HashPassword,The following statement contains a magic number: if (salt == null || salt.Length != 16)                  throw new Exception("bad salt");
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HashPassword,The following statement contains a magic number: var h = new Rfc2898DeriveBytes(password' salt' 1000);
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HashPassword,The following statement contains a magic number: return h.GetBytes(128);
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,GenerateSalt,The following statement contains a magic number: var salt = new byte[16];
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,IsValidUsername,The following statement contains a magic number: if (value.Length < 2 || value.Length > 24)                  return false;
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,IsValidUsername,The following statement contains a magic number: if (value.Length < 2 || value.Length > 24)                  return false;
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,IsValidPassword,The following statement contains a magic number: return value.Length >= 6;
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,HtmlEncode,The following statement contains a magic number: foreach (var cp in value.AsCodePoints())              {                  switch (cp)                  {                      case 9: // TAB                          result.Append('\t');                          break;                      case 10: // LF                          result.Append('\n');                          break;                      case 13: // CR                          result.Append('\r');                          break;                      case 34: // "                          result.Append("&quot;");                          break;                      case 38: // &                          result.Append("&amp;");                          break;                      case 39: // '                          result.Append("&#39;");                          break;                      case 60: // <                          result.Append("&lt;");                          break;                      case 62: // >                          result.Append("&gt;");                          break;                      case 0xFF02: // Unicode "                          result.Append("&#65282;");                          break;                      case 0xFF06: // Unicode &                          result.Append("&#65286;");                          break;                      case 0xFF07: // Unicode '                          result.Append("&#65287;");                          break;                      case 0xFF1C: // Unicode <                          result.Append("&#65308;");                          break;                      case 0xFF1E: // Unicode >                          result.Append("&#65310;");                          break;                        case 0x200E: // Left-to-Right mark                      case 0x200F: // Right-to-Left mark                          break;                        default:                          if (cp <= 31 || (cp >= 127 && cp <= 159) || (cp >= 55296 && cp <= 57343))                              break;                            if (cp > 159 && cp < 256)                          {                              result.Append("&#");                              result.Append(cp.ToString("D"));                              result.Append(";");                          }                          else                          {                              result.Append(char.ConvertFromUtf32(cp));                          }                          break;                  }              }
Magic Number,RohBot,Util,C:\repos\Rohansi_RohBot\RohBot\Util.cs,TrimZalgoCharacters,The following statement contains a magic number: const int maxCombiningCharacters = 3;
Magic Number,RohBot,WebSocketClient,C:\repos\Rohansi_RohBot\RohBot\WebSocketClient.cs,WebSocketClient,The following statement contains a magic number: _sendBuffer = new BufferBlock<string>(new DataflowBlockOptions              {                  BoundedCapacity = 8              });
Magic Number,RohBot,WebSocketServer<TClient>,C:\repos\Rohansi_RohBot\RohBot\WebSocketServer.cs,WebSocketServer,The following statement contains a magic number: var options = new WebSocketListenerOptions              {                  PingTimeout = TimeSpan.FromSeconds(30)              };
Magic Number,RohBot.Packets,NotificationSubscriptionRequest,C:\repos\Rohansi_RohBot\RohBot\Packets\NotificationSubscriptionRequest.cs,Handle,The following statement contains a magic number: if (Program.NotificationManager.FindWithId(account.Id).Count() >= 5)              {                  connection.SendSysMessage("You may only have 5 devices registered for push notifications.");                  return;              }
Magic Number,RohBot.Packets,NotificationSubscriptionRequest,C:\repos\Rohansi_RohBot\RohBot\Packets\NotificationSubscriptionRequest.cs,IsRegexPatternValid,The following statement contains a magic number: if (string.IsNullOrWhiteSpace(regexPattern) || regexPattern.Length < 3 || regexPattern.Length > 100)                  return false;
Magic Number,RohBot.Packets,NotificationSubscriptionRequest,C:\repos\Rohansi_RohBot\RohBot\Packets\NotificationSubscriptionRequest.cs,IsRegexPatternValid,The following statement contains a magic number: if (string.IsNullOrWhiteSpace(regexPattern) || regexPattern.Length < 3 || regexPattern.Length > 100)                  return false;
Magic Number,RohBot.Packets,SendMessage,C:\repos\Rohansi_RohBot\RohBot\Packets\SendMessage.cs,Handle,The following statement contains a magic number: if (Content.Length > 2000)                  Content = Content.Substring(0' 2000) + "...";
Magic Number,RohBot.Packets,SendMessage,C:\repos\Rohansi_RohBot\RohBot\Packets\SendMessage.cs,Handle,The following statement contains a magic number: if (Content.Length > 2000)                  Content = Content.Substring(0' 2000) + "...";
Magic Number,RohBot.Packets,SendMessage,C:\repos\Rohansi_RohBot\RohBot\Packets\SendMessage.cs,CalculateMessageCost,The following statement contains a magic number: var cost = Math.Round(((message.Length / 80f) + newlines)' 2);
Magic Number,RohBot.Rooms,Room,C:\repos\Rohansi_RohBot\RohBot\Rooms\Room.cs,SessionEnter,The following statement contains a magic number: if (DateTime.Now - Program.StartTime <= TimeSpan.FromSeconds(20))                  return;
Magic Number,RohBot.Rooms,Room,C:\repos\Rohansi_RohBot\RohBot\Rooms\Room.cs,AddHistory,The following statement contains a magic number: lock (_history)              {                  if (_history.Count >= 100)                      _history.RemoveFirst();                  _history.AddLast(line);              }
Magic Number,RohBot.Rooms.Steam,SteamRoom,C:\repos\Rohansi_RohBot\RohBot\Rooms\Steam\SteamRoom.cs,Update,The following statement contains a magic number: if (Chat != null && _lastMessage.Elapsed >= TimeSpan.FromMinutes(30))              {                  Program.Logger.Info("Rejoining " + RoomInfo.ShortName);                  _lastMessage.Restart();                  Chat.Leave(SteamChatLeaveReason.Disconnected);                  return;              }
Magic Number,RohBot.Rooms.Steam,Steam,C:\repos\Rohansi_RohBot\RohBot\Rooms\Steam\Steam.cs,Update,The following statement contains a magic number: if (_connectStarted.Elapsed.TotalSeconds > 120)              {                  _bot?.Disconnect();                  Status = ConnectionStatus.Disconnected;              }
Magic Number,RohBot.Rooms.Steam,Steam,C:\repos\Rohansi_RohBot\RohBot\Rooms\Steam\Steam.cs,BotDisconnected,The following statement contains a magic number: if (reason == SteamBotDisconnectReason.SteamGuard)                  Thread.Sleep(TimeSpan.FromMinutes(2));
Missing Default,RohBot,Command,C:\repos\Rohansi_RohBot\RohBot\Command.cs,Handle,The following switch statement is missing a default case: switch (p)                      {                          case '-':                              param = ReadWord(reader);                              break;                          case ']':                              param = ReadRemaining(reader);                              break;                      }
Missing Default,RohBot,LinkTitles,C:\repos\Rohansi_RohBot\RohBot\LinkTitles.cs,ParseDuration,The following switch statement is missing a default case: switch (unit)                  {                      case 'H':                          seconds += amount * 60 * 60;                          break;                      case 'M':                          seconds += amount * 60;                          break;                      case 'S':                          seconds += amount;                          break;                  }
Missing Default,RohBot.Packets,Authenticate,C:\repos\Rohansi_RohBot\RohBot\Packets\Authenticate.cs,Handle,The following switch statement is missing a default case: switch (Method)              {                  case "login":                      Program.Logger.InfoFormat("Login '{1}' from {0}"' connection.Address' Username);                      connection.Login(Username' Password' Tokens);                      break;                    case "register":                      Program.Logger.InfoFormat("Register '{1}' from {0}"' connection.Address' Username);                      connection.Register(Username' Password);                      break;                    case "guest":                      if (connection.Session != null)                      {                          connection.Session.Remove(connection);                          connection.Session = null;                      }                        guest = true;                      break;              }
Missing Default,RohBot.Rooms.Steam,SteamRoom,C:\repos\Rohansi_RohBot\RohBot\Rooms\Steam\SteamRoom.cs,HandleLeave,The following switch statement is missing a default case: switch (reason)              {                  case SteamChatLeaveReason.Left:                      message += " left chat.";                      break;                  case SteamChatLeaveReason.Disconnected:                      message += " disconnected.";                      break;                  case SteamChatLeaveReason.Kicked:                      message += $" was kicked by {sourceUser.DisplayName}.";                      break;                  case SteamChatLeaveReason.Banned:                      message += $" was banned by {sourceUser.DisplayName}.";                      break;              }
