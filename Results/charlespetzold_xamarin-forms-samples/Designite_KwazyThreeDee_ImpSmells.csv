Implementation smell,Namespace,Class,File,Method,Description
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: for (int i = 0; i < lineViews.Length; i++)              {                  lineViews[i] = new LineView                  {                      Thickness = 3                  };                  absoluteLayout.Children.Add(lineViews[i]);              }
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,DisplayPage,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\DisplayPage.cs,DisplayPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(16)' () =>              {                  double totalSeconds = stopwatch.Elapsed.TotalSeconds;                    Matrix4D matX = Matrix4D.RotationX(Math.PI * totalSeconds / 5);                  Matrix4D matY = Matrix4D.RotationY(Math.PI * totalSeconds / 3);                  Matrix4D matZ = Matrix4D.RotationZ(Math.PI * totalSeconds / 7);                  Matrix4D matView = Matrix4D.OrthographicView(new Point(this.Width / 2' this.Height / 2)'                                                               Math.Min(this.Width' this.Height) / 4);                    // Get composite 3D transform matrix.                  Matrix4D matrix = matX * matY * matZ * matView;                    // Loop through the shared lines that comprise the figure.                  for (int i = 0; i < sharedLines.Length; i++)                  {                      // Transform the points and normals of those points.                       Point3D point1 = sharedLines[i].Point1 * matrix;                      Point3D point2 = sharedLines[i].Point2 * matrix;                      Vector3D normal1 = (Point3D)((Point3D)(sharedLines[i].Normal1) * matrix);                      Vector3D normal2 = (Point3D)((Point3D)(sharedLines[i].Normal2) * matrix);                        // Set each LineView to its new position.                      lineViews[i].Point1 = point1;                      lineViews[i].Point2 = point2;                        // Determine if the line is visible or hidden.                      bool isFacing = normal1.Z > 0 || normal2.Z > 0;                      lineViews[i].Color = isFacing ? Color.Accent : Color.FromRgba(0.75' 0.75' 0.75' 0.5);                  }                    return !stopAnimation;              });
Magic Number,KwazyThreeDee,LineView,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\LineView.cs,OnPropertyChanged,The following statement contains a magic number: double length = Math.Sqrt(Math.Pow(Point2.X - Point1.X' 2) +                                        Math.Pow(Point2.Y - Point1.Y' 2));
Magic Number,KwazyThreeDee,LineView,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\LineView.cs,OnPropertyChanged,The following statement contains a magic number: double length = Math.Sqrt(Math.Pow(Point2.X - Point1.X' 2) +                                        Math.Pow(Point2.Y - Point1.Y' 2));
Magic Number,KwazyThreeDee,LineView,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\LineView.cs,OnPropertyChanged,The following statement contains a magic number: double rotation = 180 * Math.Atan2(Point2.Y - Point1.Y'                                                 Point2.X - Point1.X) / Math.PI;
Magic Number,KwazyThreeDee,LineView,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\LineView.cs,OnPropertyChanged,The following statement contains a magic number: if (Device.OS == TargetPlatform.iOS)              {                  Point midPoint = new Point((Point1.X + Point2.X) / 2'                                             (Point1.Y + Point2.Y) / 2);                    Point position = new Point(midPoint.X - length / 2' midPoint.Y - Thickness / 2);                    BatchBegin();                  AbsoluteLayout.SetLayoutBounds(this' new Rectangle(position' new Size(length' Thickness)));                  Rotation = rotation;                  BatchCommit();              }              else              {                  AbsoluteLayout.SetLayoutBounds(this' new Rectangle(Point1' new Size(length' Thickness)));                  AnchorX = 0;                  AnchorY = 0;                  Rotation = rotation;              }
Magic Number,KwazyThreeDee,LineView,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\LineView.cs,OnPropertyChanged,The following statement contains a magic number: if (Device.OS == TargetPlatform.iOS)              {                  Point midPoint = new Point((Point1.X + Point2.X) / 2'                                             (Point1.Y + Point2.Y) / 2);                    Point position = new Point(midPoint.X - length / 2' midPoint.Y - Thickness / 2);                    BatchBegin();                  AbsoluteLayout.SetLayoutBounds(this' new Rectangle(position' new Size(length' Thickness)));                  Rotation = rotation;                  BatchCommit();              }              else              {                  AbsoluteLayout.SetLayoutBounds(this' new Rectangle(Point1' new Size(length' Thickness)));                  AnchorX = 0;                  AnchorY = 0;                  Rotation = rotation;              }
Magic Number,KwazyThreeDee,LineView,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\LineView.cs,OnPropertyChanged,The following statement contains a magic number: if (Device.OS == TargetPlatform.iOS)              {                  Point midPoint = new Point((Point1.X + Point2.X) / 2'                                             (Point1.Y + Point2.Y) / 2);                    Point position = new Point(midPoint.X - length / 2' midPoint.Y - Thickness / 2);                    BatchBegin();                  AbsoluteLayout.SetLayoutBounds(this' new Rectangle(position' new Size(length' Thickness)));                  Rotation = rotation;                  BatchCommit();              }              else              {                  AbsoluteLayout.SetLayoutBounds(this' new Rectangle(Point1' new Size(length' Thickness)));                  AnchorX = 0;                  AnchorY = 0;                  Rotation = rotation;              }
Magic Number,KwazyThreeDee,LineView,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\KwazyThreeDee\KwazyThreeDee\LineView.cs,OnPropertyChanged,The following statement contains a magic number: if (Device.OS == TargetPlatform.iOS)              {                  Point midPoint = new Point((Point1.X + Point2.X) / 2'                                             (Point1.Y + Point2.Y) / 2);                    Point position = new Point(midPoint.X - length / 2' midPoint.Y - Thickness / 2);                    BatchBegin();                  AbsoluteLayout.SetLayoutBounds(this' new Rectangle(position' new Size(length' Thickness)));                  Rotation = rotation;                  BatchCommit();              }              else              {                  AbsoluteLayout.SetLayoutBounds(this' new Rectangle(Point1' new Size(length' Thickness)));                  AnchorX = 0;                  AnchorY = 0;                  Rotation = rotation;              }
