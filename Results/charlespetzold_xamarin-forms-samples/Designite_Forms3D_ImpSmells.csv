Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Forms3D,Matrix4D,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\Matrix4D.cs,Matrix4D,The method has 16 parameters. Parameters: m11' m12' m13' m14' m21' m22' m23' m24' m31' m32' m33' m34' m41' m42' m43' m44
Complex Conditional,Forms3D,PolyhedronBase,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\PolyhedronBase.cs,InsertIntoCollection,The conditional expression  "(sharedLines[i].Point1 == pt1 && sharedLines[i].Point2 == pt2) ||                      (sharedLines[i].Point1 == pt2 && sharedLines[i].Point2 == pt1)"  is complex.
Virtual Method Call from Constructor,Forms3D,SharedLineMesh,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\SharedLineMesh.cs,SharedLineMesh,The constructor "SharedLineMesh" calls a virtual method "Generate".
Magic Number,Forms3D,Octahedron,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\Octahedron.cs,Octahedron,The following statement contains a magic number: for (int face = 0; face < 8; face++)                  for (int vertex = 0; vertex < 3; vertex++)                  {                      Point3D point = faces[face' vertex];                      faces[face' vertex] = new Point3D(2 * point.X' 2 * point.Y' 2 * point.Z);                  }
Magic Number,Forms3D,Octahedron,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\Octahedron.cs,Octahedron,The following statement contains a magic number: for (int face = 0; face < 8; face++)                  for (int vertex = 0; vertex < 3; vertex++)                  {                      Point3D point = faces[face' vertex];                      faces[face' vertex] = new Point3D(2 * point.X' 2 * point.Y' 2 * point.Z);                  }
Magic Number,Forms3D,Octahedron,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\Octahedron.cs,Octahedron,The following statement contains a magic number: for (int face = 0; face < 8; face++)                  for (int vertex = 0; vertex < 3; vertex++)                  {                      Point3D point = faces[face' vertex];                      faces[face' vertex] = new Point3D(2 * point.X' 2 * point.Y' 2 * point.Z);                  }
Magic Number,Forms3D,Octahedron,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\Octahedron.cs,Octahedron,The following statement contains a magic number: for (int face = 0; face < 8; face++)                  for (int vertex = 0; vertex < 3; vertex++)                  {                      Point3D point = faces[face' vertex];                      faces[face' vertex] = new Point3D(2 * point.X' 2 * point.Y' 2 * point.Z);                  }
Magic Number,Forms3D,Octahedron,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\Octahedron.cs,Octahedron,The following statement contains a magic number: for (int face = 0; face < 8; face++)                  for (int vertex = 0; vertex < 3; vertex++)                  {                      Point3D point = faces[face' vertex];                      faces[face' vertex] = new Point3D(2 * point.X' 2 * point.Y' 2 * point.Z);                  }
Magic Number,Forms3D,Point3D,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\Point3D.cs,GetHashCode,The following statement contains a magic number: return X.GetHashCode() ^ (Y.GetHashCode() * 397) ^ (Z.GetHashCode() * 54321);
Magic Number,Forms3D,Point3D,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\Point3D.cs,GetHashCode,The following statement contains a magic number: return X.GetHashCode() ^ (Y.GetHashCode() * 397) ^ (Z.GetHashCode() * 54321);
Magic Number,Forms3D,PolyhedronBase,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\PolyhedronBase.cs,Generate,The following statement contains a magic number: for (int face = 0; face < Faces.GetLength(0); face++)              {                  Vector3D normal = Vector3D.CrossProduct(Faces[face' 2] - Faces[face' 0]'                                                          Faces[face' 1] - Faces[face' 0]);                    // For faces that are triangles.                  if (Faces.GetLength(1) == 3)                  {                      for (int i = 0; i < 3; i++)                      {                          Point3D point1 = Faces[face' i];                          Point3D point2 = Faces[face' (i + 1) % 3];                          InsertIntoCollection(sharedLines' point1' point2' normal);                      }                  }                    // For faces that are not triangles.                  else                  {                      int num = Faces.GetLength(1) - 1;                        for (int i = 0; i < num; i++)                      {                          Point3D point1 = Faces[face' i + 1];                          Point3D point2 = Faces[face' (i + 1) % num + 1];                          InsertIntoCollection(sharedLines' point1' point2' normal);                      }                  }              }
Magic Number,Forms3D,PolyhedronBase,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\PolyhedronBase.cs,Generate,The following statement contains a magic number: for (int face = 0; face < Faces.GetLength(0); face++)              {                  Vector3D normal = Vector3D.CrossProduct(Faces[face' 2] - Faces[face' 0]'                                                          Faces[face' 1] - Faces[face' 0]);                    // For faces that are triangles.                  if (Faces.GetLength(1) == 3)                  {                      for (int i = 0; i < 3; i++)                      {                          Point3D point1 = Faces[face' i];                          Point3D point2 = Faces[face' (i + 1) % 3];                          InsertIntoCollection(sharedLines' point1' point2' normal);                      }                  }                    // For faces that are not triangles.                  else                  {                      int num = Faces.GetLength(1) - 1;                        for (int i = 0; i < num; i++)                      {                          Point3D point1 = Faces[face' i + 1];                          Point3D point2 = Faces[face' (i + 1) % num + 1];                          InsertIntoCollection(sharedLines' point1' point2' normal);                      }                  }              }
Magic Number,Forms3D,PolyhedronBase,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\PolyhedronBase.cs,Generate,The following statement contains a magic number: for (int face = 0; face < Faces.GetLength(0); face++)              {                  Vector3D normal = Vector3D.CrossProduct(Faces[face' 2] - Faces[face' 0]'                                                          Faces[face' 1] - Faces[face' 0]);                    // For faces that are triangles.                  if (Faces.GetLength(1) == 3)                  {                      for (int i = 0; i < 3; i++)                      {                          Point3D point1 = Faces[face' i];                          Point3D point2 = Faces[face' (i + 1) % 3];                          InsertIntoCollection(sharedLines' point1' point2' normal);                      }                  }                    // For faces that are not triangles.                  else                  {                      int num = Faces.GetLength(1) - 1;                        for (int i = 0; i < num; i++)                      {                          Point3D point1 = Faces[face' i + 1];                          Point3D point2 = Faces[face' (i + 1) % num + 1];                          InsertIntoCollection(sharedLines' point1' point2' normal);                      }                  }              }
Magic Number,Forms3D,PolyhedronBase,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\PolyhedronBase.cs,Generate,The following statement contains a magic number: for (int face = 0; face < Faces.GetLength(0); face++)              {                  Vector3D normal = Vector3D.CrossProduct(Faces[face' 2] - Faces[face' 0]'                                                          Faces[face' 1] - Faces[face' 0]);                    // For faces that are triangles.                  if (Faces.GetLength(1) == 3)                  {                      for (int i = 0; i < 3; i++)                      {                          Point3D point1 = Faces[face' i];                          Point3D point2 = Faces[face' (i + 1) % 3];                          InsertIntoCollection(sharedLines' point1' point2' normal);                      }                  }                    // For faces that are not triangles.                  else                  {                      int num = Faces.GetLength(1) - 1;                        for (int i = 0; i < num; i++)                      {                          Point3D point1 = Faces[face' i + 1];                          Point3D point2 = Faces[face' (i + 1) % num + 1];                          InsertIntoCollection(sharedLines' point1' point2' normal);                      }                  }              }
Magic Number,Forms3D,Sphere,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\Sphere.cs,Generate,The following statement contains a magic number: for (int stack = 0; stack <= stacks; stack++)              {                  double phi = Math.PI / 2 - stack * Math.PI / stacks;                  double y = radius * Math.Sin(phi);                  double scale = -radius * Math.Cos(phi);                    // Around the world.                  for (int slice = 0; slice <= slices; slice++)                  {                      double theta = slice * 2 * Math.PI / slices;                      double x = scale * Math.Sin(theta);                      double z = scale * Math.Cos(theta);                        Vector3D normal = new Vector3D(x' y' z);                      normals.Add(normal);                      vertices.Add(normal + center);                  }              }
Magic Number,Forms3D,Sphere,C:\repos\charlespetzold_xamarin-forms-samples\KwazyThreeDee\Forms3D\Sphere.cs,Generate,The following statement contains a magic number: for (int stack = 0; stack <= stacks; stack++)              {                  double phi = Math.PI / 2 - stack * Math.PI / stacks;                  double y = radius * Math.Sin(phi);                  double scale = -radius * Math.Cos(phi);                    // Around the world.                  for (int slice = 0; slice <= slices; slice++)                  {                      double theta = slice * 2 * Math.PI / slices;                      double x = scale * Math.Sin(theta);                      double z = scale * Math.Cos(theta);                        Vector3D normal = new Vector3D(x' y' z);                      normals.Add(normal);                      vertices.Add(normal + center);                  }              }
