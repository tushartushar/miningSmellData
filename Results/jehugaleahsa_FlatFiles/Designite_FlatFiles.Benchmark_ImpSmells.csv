Implementation smell,Namespace,Class,File,Method,Description
Long Statement,FlatFiles.Benchmark,AsyncVsSyncTest,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\AsyncVsSyncTest.cs,SyncTest,The length of the statement  "            var http = WebRequest.CreateHttp("https://raw.githubusercontent.com/jehugaleahsa/FlatFiles/master/FlatFiles.Benchmark/TestFiles/SampleData.csv"); " is 145.
Long Statement,FlatFiles.Benchmark,AsyncVsSyncTest,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\AsyncVsSyncTest.cs,AsyncTest,The length of the statement  "            var http = WebRequest.CreateHttp("https://raw.githubusercontent.com/jehugaleahsa/FlatFiles/master/FlatFiles.Benchmark/TestFiles/SampleData.csv"); " is 145.
Magic Number,FlatFiles.Benchmark,GeoLocationColumn,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\AsyncVsSyncTest.cs,OnParse,The following statement contains a magic number: string[] parts = value.Substring(1' value.Length - 2).Split('''' 2);
Magic Number,FlatFiles.Benchmark,GeoLocationColumn,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\AsyncVsSyncTest.cs,OnParse,The following statement contains a magic number: string[] parts = value.Substring(1' value.Length - 2).Split('''' 2);
Magic Number,FlatFiles.Benchmark,DirectVsDynamicTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\DirectVsDynamicTester.cs,DirectVsDynamicTester,The following statement contains a magic number: this.people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,DirectVsDynamicTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\DirectVsDynamicTester.cs,DirectVsDynamicTester,The following statement contains a magic number: this.people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,DirectVsDynamicTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\DirectVsDynamicTester.cs,DirectVsDynamicTester,The following statement contains a magic number: this.people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,DirectVsDynamicTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\DirectVsDynamicTester.cs,DirectVsDynamicTester,The following statement contains a magic number: this.people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,DirectVsDynamicTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\DirectVsDynamicTester.cs,DirectVsDynamicTester,The following statement contains a magic number: this.people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,EmitVsReflectionReadTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\EmitVsReflectionReadTester.cs,EmitVsReflectionReadTester,The following statement contains a magic number: var people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,EmitVsReflectionReadTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\EmitVsReflectionReadTester.cs,EmitVsReflectionReadTester,The following statement contains a magic number: var people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,EmitVsReflectionReadTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\EmitVsReflectionReadTester.cs,EmitVsReflectionReadTester,The following statement contains a magic number: var people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,EmitVsReflectionReadTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\EmitVsReflectionReadTester.cs,EmitVsReflectionReadTester,The following statement contains a magic number: var people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,EmitVsReflectionReadTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\EmitVsReflectionReadTester.cs,EmitVsReflectionReadTester,The following statement contains a magic number: var people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,EmitVsReflectionWriteTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\EmitVsReflectionWriteTester.cs,EmitVsReflectionWriteTester,The following statement contains a magic number: this.people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,EmitVsReflectionWriteTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\EmitVsReflectionWriteTester.cs,EmitVsReflectionWriteTester,The following statement contains a magic number: this.people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,EmitVsReflectionWriteTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\EmitVsReflectionWriteTester.cs,EmitVsReflectionWriteTester,The following statement contains a magic number: this.people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,EmitVsReflectionWriteTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\EmitVsReflectionWriteTester.cs,EmitVsReflectionWriteTester,The following statement contains a magic number: this.people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,EmitVsReflectionWriteTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\EmitVsReflectionWriteTester.cs,EmitVsReflectionWriteTester,The following statement contains a magic number: this.people = Enumerable.Range(0' 10000).Select(i => new Person()              {                  Name = "Susan"'                  IQ = 132'                  BirthDate = new DateTime(1984' 3' 15)'                  TopSpeed = 10.1m              }).ToArray();
Magic Number,FlatFiles.Benchmark,PropertyVsFieldTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\PropertyVsFieldTester.cs,PropertyVsFieldTester,The following statement contains a magic number: PropertyPerson propertyPerson = new PropertyPerson()              {                  FirstName = "John"'                  LastName = "Smith"'                  Age = 29'                  Street1 = "West Street Rd"'                  Street2 = "Apt 23"'                  City = "Lexington"'                  State = "DE"'                  Zip = "001569"'                  FavoriteColor = "Blue"'                  FavoriteFood = "Cheese and Crackers"'                  FavoriteSport = "Soccer"'                  CreatedOn = new DateTime(2017' 01' 01)'                  IsActive = true              };
Magic Number,FlatFiles.Benchmark,PropertyVsFieldTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\PropertyVsFieldTester.cs,PropertyVsFieldTester,The following statement contains a magic number: PropertyPerson propertyPerson = new PropertyPerson()              {                  FirstName = "John"'                  LastName = "Smith"'                  Age = 29'                  Street1 = "West Street Rd"'                  Street2 = "Apt 23"'                  City = "Lexington"'                  State = "DE"'                  Zip = "001569"'                  FavoriteColor = "Blue"'                  FavoriteFood = "Cheese and Crackers"'                  FavoriteSport = "Soccer"'                  CreatedOn = new DateTime(2017' 01' 01)'                  IsActive = true              };
Magic Number,FlatFiles.Benchmark,PropertyVsFieldTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\PropertyVsFieldTester.cs,PropertyVsFieldTester,The following statement contains a magic number: propertyPeople = Enumerable.Repeat(0' 10000).Select(i => propertyPerson).ToArray();
Magic Number,FlatFiles.Benchmark,PropertyVsFieldTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\PropertyVsFieldTester.cs,PropertyVsFieldTester,The following statement contains a magic number: FieldPerson fieldPerson = new FieldPerson()              {                  FirstName = "John"'                  LastName = "Smith"'                  Age = 29'                  Street1 = "West Street Rd"'                  Street2 = "Apt 23"'                  City = "Lexington"'                  State = "DE"'                  Zip = "001569"'                  FavoriteColor = "Blue"'                  FavoriteFood = "Cheese and Crackers"'                  FavoriteSport = "Soccer"'                  CreatedOn = new DateTime(2017' 01' 01)'                  IsActive = true              };
Magic Number,FlatFiles.Benchmark,PropertyVsFieldTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\PropertyVsFieldTester.cs,PropertyVsFieldTester,The following statement contains a magic number: FieldPerson fieldPerson = new FieldPerson()              {                  FirstName = "John"'                  LastName = "Smith"'                  Age = 29'                  Street1 = "West Street Rd"'                  Street2 = "Apt 23"'                  City = "Lexington"'                  State = "DE"'                  Zip = "001569"'                  FavoriteColor = "Blue"'                  FavoriteFood = "Cheese and Crackers"'                  FavoriteSport = "Soccer"'                  CreatedOn = new DateTime(2017' 01' 01)'                  IsActive = true              };
Magic Number,FlatFiles.Benchmark,PropertyVsFieldTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\PropertyVsFieldTester.cs,PropertyVsFieldTester,The following statement contains a magic number: fieldPeople = Enumerable.Repeat(0' 10000).Select(i => fieldPerson).ToArray();
Magic Number,FlatFiles.Benchmark,QuotedCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\QuotedCsvTester.cs,QuotedCsvTester,The following statement contains a magic number: data = String.Join(Environment.NewLine' (new[] { header }).Concat(Enumerable.Repeat(0' 10000).Select(i => record)));
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,RealWorldCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\RealWorldCsvTester.cs,RunCsvHelper,The following statement contains a magic number: using (var stream = File.OpenRead(path))              using (var textReader = new StreamReader(stream))              {                  var configuration = new Configuration()                  {                      HasHeaderRecord = true'                      HeaderValidated = (isValid' names' index' context) => { }                  };                  var map = configuration.AutoMap<SampleData>();                  map.Map(x => x.YearStart).Name("YearStart").Index(0);                  map.Map(x => x.YearEnd).Name("YearEnd").Index(1);                  map.Map(x => x.LocationAbbreviation).Name("LocationAbbr").Index(2);                  map.Map(x => x.LocationDescription).Name("LocationDesc").Index(3);                  map.Map(x => x.DataSource).Name("DataSource").Index(4);                  map.Map(x => x.Topic).Name("Topic").Index(5);                  map.Map(x => x.Question).Name("Question").Index(6);                  map.Map(x => x.Response).Name("Response").Index(7);                  map.Map(x => x.DataValueUnit).Name("DataValueUnit").Index(8);                  map.Map(x => x.DataValueType).Name("DataValueType").Index(9);                  map.Map(x => x.DataValue).Name("DataValue").Index(10);                  map.Map(x => x.AlternativeDataValue).Name("DataValueAlt").Index(11);                  map.Map(x => x.DataValueFootnoteSymbol).Name("DataValueFootnoteSymbol").Index(12);                  map.Map(x => x.DataValueFootnote).Name("DatavalueFootnote").Index(13);                  map.Map(x => x.LowConfidenceLimit).Name("LowConfidenceLimit").Index(14);                  map.Map(x => x.HighConfidenceLimit).Name("HighConfidenceLimit").Index(15);                  map.Map(x => x.StratificationCategory1).Name("StratificationCategory1").Index(16);                  map.Map(x => x.Stratification1).Name("Stratification1").Index(17);                  map.Map(x => x.StratificationCategory2).Name("StratificationCategory2").Index(18);                  map.Map(x => x.Stratification2).Name("Stratification2").Index(19);                  map.Map(x => x.StratificationCategory3).Name("StratificationCategory3").Index(20);                  map.Map(x => x.Stratification3).Name("Stratification3").Index(21);                  map.Map(x => x.GeoLocation).Name("GeoLocation").Index(22);                  map.Map(x => x.ResponseId).Name("ResponseID").Index(23);                  map.Map(x => x.LocationId).Name("LocationID").Index(24);                  map.Map(x => x.TopicId).Name("TopicID").Index(25);                  map.Map(x => x.QuestionId).Name("QuestionID").Index(26);                  map.Map(x => x.DataValueTypeId).Name("DataValueTypeID").Index(27);                  map.Map(x => x.StratificationCategoryId1).Name("StratificationCategoryID1").Index(28);                  map.Map(x => x.StratificationId1).Name("StratificationID1").Index(29);                  map.Map(x => x.StratificationCategoryId2).Name("StratificationCategoryID2").Index(30);                  map.Map(x => x.StratificationId2).Name("StratificationID2").Index(31);                  map.Map(x => x.StratificationCategoryId3).Name("StratificationCategoryID3").Index(32);                  map.Map(x => x.StratificationId3).Name("StratificationID3").Index(33);                  configuration.RegisterClassMap(map);                  var csvReader = new CsvHelper.CsvReader(textReader' configuration);                  csvReader.Read();                  csvReader.ReadHeader();                  var people = csvReader.GetRecords<SampleData>().ToArray();              }
Magic Number,FlatFiles.Benchmark,SimpleAsyncCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleAsyncCsvTester.cs,SimpleAsyncCsvTester,The following statement contains a magic number: data = String.Join(Environment.NewLine' (new[] { header }).Concat(Enumerable.Repeat(0' 10000).Select(i => record)));
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,SimpleCsvTester,The following statement contains a magic number: data = String.Join(Environment.NewLine' (new[] { header }).Concat(Enumerable.Repeat(0' 10000).Select(i => record)));
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleCsvTester.cs,RunStringSplit,The following statement contains a magic number: foreach (var record in records)              {                  Person person = new Person();                  person.FirstName = record[0];                  person.LastName = record[1];                  person.Age = Int32.Parse(record[2]);                  person.Street1 = record[3];                  person.Street2 = record[4];                  person.City = record[5];                  person.State = record[6];                  person.Zip = record[7];                  person.FavoriteColor = record[8];                  person.FavoriteFood = record[9];                  person.FavoriteSport = record[10];                  person.CreatedOn = DateTime.Parse(record[11]);                  person.IsActive = Boolean.Parse(record[12]);                  people.Add(person);              }
Magic Number,FlatFiles.Benchmark,SimpleSyncVsAsyncCsvTester,C:\repos\jehugaleahsa_FlatFiles\FlatFiles.Benchmark\SimpleSyncVsAsyncCsvTester.cs,SimpleSyncVsAsyncCsvTester,The following statement contains a magic number: data = String.Join(Environment.NewLine' (new[] { header }).Concat(Enumerable.Repeat(0' 10000).Select(i => record)));
