Implementation smell,Namespace,Class,File,Method,Description
Complex Method,XPlatformCloudKit.DataServices,RssService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RssService.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,XPlatformCloudKit.Helpers,HttpUtility,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\Helpers\HttpUtility.cs,HtmlDecode,Cyclomatic complexity of the method is 8
Long Identifier,XPlatformCloudKit,AppSettings,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\AppSettings.cs,,The length of the parameter CreateInitialSchemaForAzureMobileService is 40.
Long Identifier,XPlatformCloudKit,AppSettings,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\AppSettings.cs,,The length of the parameter GroupsToDisplayInFullScreenWindows8 is 35.
Long Identifier,XPlatformCloudKit,AppSettings,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\AppSettings.cs,,The length of the parameter EnableParsingPhoneNumbersPhone8X is 32.
Long Identifier,XPlatformCloudKit,AppSettings,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\AppSettings.cs,,The length of the parameter EnableSingleVerticalLayoutPhone81 is 33.
Long Identifier,XPlatformCloudKit,AppSettings,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\AppSettings.cs,,The length of the parameter DisableHyperLinksInItemDescriptionView is 38.
Long Identifier,XPlatformCloudKit,AppSettings,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\AppSettings.cs,,The length of the parameter DisableOpeningHyperLinksInNewTab is 32.
Long Identifier,XPlatformCloudKit,AppSettings,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\AppSettings.cs,,The length of the parameter NumberOfRunsBeforeRateReminder is 30.
Long Identifier,XPlatformCloudKit,AppSettings,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\AppSettings.cs,,The length of the parameter ForceYoutubeVideosToLoadFullScreen is 34.
Long Statement,XPlatformCloudKit.DataServices,RemoteUrlSourceService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RemoteUrlSourceService.cs,GetRemoteUrlSources,The length of the statement  "                           ServiceLocator.MessageService.ShowErrorAsync("Unable to add UrlSource of type " + source.Type + " to a valid collection' source will not be retrieved"' "Application Error"); " is 173.
Long Statement,XPlatformCloudKit.DataServices,TwitterService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\TwitterService.cs,GetItems,The length of the statement  "                client = OAuthUtility.CreateOAuthClient(AppSettings.TwitterConsumerKey' AppSettings.TwitterConsumerSecret' new AccessToken(AppSettings.TwitterAccessToken' AppSettings.TwitterAccessSecret)); " is 189.
Long Statement,XPlatformCloudKit.DataServices,YoutubeService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\YoutubeService.cs,GetItems,The length of the statement  "                ServiceLocator.MessageService.ShowErrorAsync("YoutubeService is enabled but YoutubePublicAPIKey appears to be invalid please check this value in AppSettings.cs"' "Application Error"); " is 183.
Long Statement,XPlatformCloudKit.DataServices,YoutubeService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\YoutubeService.cs,Parse,The length of the statement  "            string youtubeHtmlTemplate = "<p><a href=\"{0}\"><img src=\"{1}\" alt=\"\" width=300></a></p><p><a style=\"font-size: 15px; font-weight: bold; font-decoration: none;\" href=\"{0}\">{2}</a></p><p>{3}</p>"; " is 204.
Long Statement,XPlatformCloudKit.DataServices,YoutubeService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\YoutubeService.cs,Parse,The length of the statement  "                    Description = string.Format(youtubeHtmlTemplate' "https://www.youtube.com" + youtubePrefix + youtubeItem["snippet"]["resourceId"]["videoId"]' youtubeItem["snippet"]["thumbnails"]["high"]["url"].ToString()' youtubeItem["snippet"]["title"].ToString()' description)' " is 263.
Long Statement,XPlatformCloudKit.DataServices,YoutubeService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\YoutubeService.cs,Parse,The length of the statement  "                await Parse(new UrlSource {Url = currentYoutubeSource.Url + "&pageToken=" + nextPageToken' Group = currentYoutubeSource.Group}); " is 128.
Long Statement,XPlatformCloudKit.DataServices,RssService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RssService.cs,GetItems,The length of the statement  "                ServiceLocator.MessageService.ShowErrorAsync("Error when retrieving items from RssService: " + e.Message' "Application Error"); " is 127.
Long Statement,XPlatformCloudKit.DataServices,RssService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RssService.cs,Parse,The length of the statement  "                string group = rssSource.Group.Length > 1 ? rssSource.Group : Feed.Descendants("channel").Select(e => (string)e.Element("title").Value).First(); " is 144.
Long Statement,XPlatformCloudKit.DataServices,RssService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RssService.cs,Parse,The length of the statement  "                    string youtubeHtmlTemplate = "<p><iframe back width=\"315\" height=\"177\" src=\"{0}\" frameBorder=\"0\"> </iframe></p><p><a style=\"font-size: 15px; font-weight: bold; font-decoration: none;\" href=\"{0}\">{2}</a></p><p>{3}</p>"; " is 230.
Long Statement,XPlatformCloudKit.DataServices,RssService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RssService.cs,Parse,The length of the statement  "                                Description = item.Descendants(media + "thumbnail").Count() > 0 ? string.Format(youtubeHtmlTemplate' item.Element("link").Value' item.Descendants(media + "thumbnail").Select(e => (string)e.Attribute("url")).FirstOrDefault()' item.Element("title").Value' item.Element("description").Value.Substring(0' Math.Min(580' item.Element("description").Value.Length))) : string.Empty' " is 374.
Long Statement,XPlatformCloudKit.DataServices,RssService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RssService.cs,Parse,The length of the statement  "                                Image = item.Descendants(media + "thumbnail") != null ? item.Descendants(media + "thumbnail").Select(e => (string)e.Attribute("url")).FirstOrDefault() : string.Empty' " is 166.
Long Statement,XPlatformCloudKit.DataServices,RssService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RssService.cs,Parse,The length of the statement  "                    string audio_template = "<audio src=\"{0}\" controls autoplay>Your browser does not support the <code>audio</code> element.<br/><a href=\"{0}\">Link to file</a>.</audio><br/>"; " is 176.
Long Statement,XPlatformCloudKit.DataServices,RssService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RssService.cs,Parse,The length of the statement  "                                Image = item.Descendants(media + "thumbnail") != null ? item.Descendants(media + "thumbnail").Select(e => (string)e.Attribute("url")).FirstOrDefault() : ""' " is 156.
Long Statement,XPlatformCloudKit.DataServices,RssService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RssService.cs,Parse,The length of the statement  "                ServiceLocator.MessageService.ShowErrorAsync("Error when retrieving items from RssService: " + e.Message + "\nUrl: " + rssSource.Url' "Application Error"); " is 155.
Long Statement,XPlatformCloudKit.Services,RemoteAppSettingsService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\Services\RemoteAppSettingsService.cs,LoadRemoteAppSettings,The length of the statement  "                    //http://stackoverflow.com/questions/16683784/expression-convert-object-of-type-system-int64-cannot-be-converted-to-type-s " is 122.
Long Statement,XPlatformCloudKit.Services,RemoteAppSettingsService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\Services\RemoteAppSettingsService.cs,LoadRemoteAppSettings,The length of the statement  "                                urlSourceList.Add(new UrlSource { Url = item["Url"].ToString()' Group = item["Group"].ToString()' Type = item["Type"].ToString() }); " is 132.
Long Statement,XPlatformCloudKit.Services,RemoteAppSettingsService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\Services\RemoteAppSettingsService.cs,LoadRemoteAppSettings,The length of the statement  "                ServiceLocator.MessageService.ShowErrorAsync("Error Loading RemoteAppSettings: " + e.Message' "RemoteAppSettings Error"); " is 121.
Long Statement,XPlatformCloudKit.Services,RemoteAppSettingsService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\Services\RemoteAppSettingsService.cs,GetRemoteAppSettingsFromWeb,The length of the statement  "                ServiceLocator.MessageService.ShowErrorAsync("Error retrieving RemoteAppSettings: " + e.Message' "RemoteAppSettings Error"); " is 124.
Long Statement,XPlatformCloudKit.ViewModels,ItemsShowcaseViewModel,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\ViewModels\ItemsShowcaseViewModel.cs,LoadDataService,The length of the statement  "                            ServiceLocator.MessageService.ShowErrorAsync("Error Deserializing " + dataService.GetType().ToString()' "Error loading cache"); " is 127.
Long Statement,XPlatformCloudKit.ViewModels,ItemsShowcaseViewModel,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\ViewModels\ItemsShowcaseViewModel.cs,LoadDataService,The length of the statement  "                ServiceLocator.MessageService.ShowErrorAsync("Error retrieving items from " + dataService.GetType().ToString() + "\n\nPossible Causes:\nNo internet connection\nRemote Service unavailable"' "Application Error"); " is 210.
Magic Number,XPlatformCloudKit.DataServices,RemoteUrlSourceService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RemoteUrlSourceService.cs,stringToUrlSource,The following statement contains a magic number: if (fields.Length != 3)                  // Invalid remote Url source line.                  throw new FormatException("The following line is not a valid UrlSource line (invalid field count): " + str);
Magic Number,XPlatformCloudKit.DataServices,RemoteUrlSourceService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RemoteUrlSourceService.cs,stringToUrlSource,The following statement contains a magic number: string theType = cleanField(fields[2]);
Magic Number,XPlatformCloudKit.DataServices,YoutubeService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\YoutubeService.cs,GetItems,The following statement contains a magic number: if(AppSettings.YoutubePublicAPIKey.Length < 30 && !AppSettings.EnableRemoteUrlSourceService)                  ServiceLocator.MessageService.ShowErrorAsync("YoutubeService is enabled but YoutubePublicAPIKey appears to be invalid please check this value in AppSettings.cs"' "Application Error");
Magic Number,XPlatformCloudKit.DataServices,RssService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\DataServices\RssService.cs,Parse,The following statement contains a magic number: try              {                  var httpClient = new HttpClient();                    var _UserAgent = "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)";                    httpClient.DefaultRequestHeaders.Add("user-agent"' _UserAgent);                    var response = await httpClient.GetStringAsync(rssSource.Url);                    XNamespace xmlns = "http://www.w3.org/2005/Atom";                  XNamespace media = "http://search.yahoo.com/mrss/";                  XNamespace content = "http://purl.org/rss/1.0/modules/content/";                    XDocument Feed = XDocument.Parse(response);                    string group = rssSource.Group.Length > 1 ? rssSource.Group : Feed.Descendants("channel").Select(e => (string)e.Element("title").Value).First();                    IEnumerable<Item> items = new List<Item>();                    if (rssSource.Url.StartsWith("http://gdata.youtube.com/feeds/api/playlists/"))  //parse Youtube Playlist RSS                   {                      //0 is link' 1 is image' 2 is title' 3 is description                      string youtubeHtmlTemplate = "<p><iframe back width=\"315\" height=\"177\" src=\"{0}\" frameBorder=\"0\"> </iframe></p><p><a style=\"font-size: 15px; font-weight: bold; font-decoration: none;\" href=\"{0}\">{2}</a></p><p>{3}</p>";                        //string youtubeHtmlTemplate = "<iframe back width=\"315\" height=\"177\" src=\"{0}\" frameBorder=\"0\"> </iframe>";                        items = from item in Feed.Descendants("item")                              select new Item()                              {                                  Title = item.Element("title").Value'                                  Subtitle = item.Element("pubDate").Value'                                  Description = item.Descendants(media + "thumbnail").Count() > 0 ? string.Format(youtubeHtmlTemplate' item.Element("link").Value' item.Descendants(media + "thumbnail").Select(e => (string)e.Attribute("url")).FirstOrDefault()' item.Element("title").Value' item.Element("description").Value.Substring(0' Math.Min(580' item.Element("description").Value.Length))) : string.Empty'                                  Image = item.Descendants(media + "thumbnail") != null ? item.Descendants(media + "thumbnail").Select(e => (string)e.Attribute("url")).FirstOrDefault() : string.Empty'                                  Group = @group'                                  UrlSource = rssSource                              };                        items = items.Where(x => x.Description != string.Empty);                  }                  else                  {                      string audio_template = "<audio src=\"{0}\" controls autoplay>Your browser does not support the <code>audio</code> element.<br/><a href=\"{0}\">Link to file</a>.</audio><br/>";                      var feeditems = AppSettings.RssMaxItemsPerFeed < 0                          ? Feed.Descendants("item")                          : Feed.Descendants("item").Take(AppSettings.RssMaxItemsPerFeed);                      items = from item in feeditems                              let body = item.Descendants(content + "encoded").FirstOrDefault()                              // TODO: perhaps this needs to use the url's MIME type to determine the tag for audio' video' PDFs' etc.?                              let parsed = (item.Element("enclosure") != null                                          ? string.Format(audio_template' (string)(item.Element("enclosure").Attribute("url")))                                          : string.Empty)                                      + (item.Element("description") != null                                          ? (string)(item.Element("description").Value)                                          : string.Empty)                                      + (item.Element("link") != null                                          ? " <a href=" + (string)(item.Element("link").Value) + ">Link</a>"                                          : string.Empty)                              select new Item()                              {                                  Title = item.Element("title") != null ? item.Element("title").Value : string.Empty'                                  Subtitle = item.Element("pubDate") != null ? item.Element("pubDate").Value : DateTime.Now.ToString()'                                  Description = body != null ? body.Value : parsed'                                  Image = item.Descendants(media + "thumbnail") != null ? item.Descendants(media + "thumbnail").Select(e => (string)e.Attribute("url")).FirstOrDefault() : ""'                                  Group = @group'                                  UrlSource = rssSource                              };                  }                    if (items.ToList().Count > 0)                  {                        foreach (var item in items)                      {                          if (item.Image == null) //Attempt to parse an image out of the description if one is not returned in the RSS                              item.Image = Regex.Match(item.Description' @"(https?:)?//?[^'""<>]+?\.(jpg|jpeg|gif|png)").Value;                            if (item.Image == string.Empty) //Unable to locate any image' so fallback to logo                              item.Image = "/Assets/Logo.png";                            //Format dates to look cleaner                          DateTime dateTimeResult = new DateTime();                          if (DateTime.TryParse(item.Subtitle' out dateTimeResult))                              item.Subtitle = dateTimeResult.ToString("ddd' d MMM yyyy");                            if (AppSettings.ForceYoutubeVideosToLoadFullScreen)                              item.Description = item.Description.Replace("/watch?v="' "/watch_popup?v=");                            // Fix "shortcut" urls                          item.Description = item.Description.Replace("src=\"//"' "src=\"http://");                          item.Description = item.Description.Replace("src='//"' "src='http://");                            // Facebook Data                          if (item.UrlSource.Url.StartsWith("https://www.facebook.com/feeds/page.php?"))                          {                              //Payload comes back HTML encoded and begins with a space                              item.Title = XPlatformCloudKit.Helpers.HttpUtility.HtmlDecode(item.Title).TrimStart(' ');                                //Use normal image instead of small                              item.Image = item.Image.Replace("_s."' "_n.");                          }                            RssData.Add(item);                      };                  }                  else                  {                      await ServiceLocator.MessageService.ShowErrorAsync("Zero items retrieved from " + rssSource.Url' "Application Error");                  }              }              catch (Exception e)              {                  ServiceLocator.MessageService.ShowErrorAsync("Error when retrieving items from RssService: " + e.Message + "\nUrl: " + rssSource.Url' "Application Error");              }
Magic Number,XPlatformCloudKit.Helpers,HttpUtility,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\Helpers\HttpUtility.cs,GenerateLookupTable,The following statement contains a magic number: for (int i = 0; i < entitiesList.Length; i++)              {                  string text = entitiesList[i];                  dictionary.Add(text.Substring(2)' text[0]);              }
Magic Number,XPlatformCloudKit.Helpers,HttpUtility,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.PCL\Helpers\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = html[i];                  if (ch == '&')                  {                      int num3 = html.IndexOfAny(_htmlEntityEndingChars' i + 1);                      if ((num3 > 0) && (html[num3] == ';'))                      {                          string entity = html.Substring(i + 1' (num3 - i) - 1);                          if ((entity.Length > 1) && (entity[0] == '#'))                          {                              try                              {                                  if ((entity[1] == 'x') || (entity[1] == 'X'))                                  {                                      ch = (char)int.Parse(entity.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture);                                  }                                  else                                  {                                      ch = (char)int.Parse(entity.Substring(1)' CultureInfo.InvariantCulture);                                  }                                  i = num3;                              }                              catch (FormatException)                              {                                  i++;                              }                              catch (ArgumentException)                              {                                  i++;                              }                          }                          else                          {                              i = num3;                              char ch2 = Lookup(entity);                              if (ch2 != '\0')                              {                                  ch = ch2;                              }                              else                              {                                  writer.Write('&');                                  writer.Write(entity);                                  writer.Write(';');                                  continue;                              }                          }                      }                  }                  writer.Write(ch);              }
