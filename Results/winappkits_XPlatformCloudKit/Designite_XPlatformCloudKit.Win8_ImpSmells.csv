Implementation smell,Namespace,Class,File,Method,Description
Complex Method,XPlatformCloudKit.Common,RichTextColumns,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Common\RichTextColumns.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Long Identifier,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,LoadWebContent,The length of the parameter disableOpeningHyperLinksInNewTabJS is 34.
Long Statement,XPlatformCloudKit.Common,SuspensionManager,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,XPlatformCloudKit.Common,SuspensionManager,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Long Statement,XPlatformCloudKit.DataServices,AzureMobileService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\DataServices\AzureMobileService.cs,GetItems,The length of the statement  "                    item.UrlSource = new UrlSource { Url = AppSettings.MobileServiceAddress' Group = item.Group' Type = "AzureMobileService" }; " is 123.
Long Statement,XPlatformCloudKit.DataServices,AzureMobileService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\DataServices\AzureMobileService.cs,GetItems,The length of the statement  "                ServiceLocator.MessageService.ShowErrorAsync("Error when retrieving items from AzureMobileService"' "Application Error"); " is 121.
Long Statement,XPlatformCloudKit.DataServices,AzureMobileService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\DataServices\AzureMobileService.cs,CreateInitialSchema,The length of the statement  "            var schemaGeneratingDummyData = await itemsTable.Where(item => item.Title == "schemaGeneratingDummyData").ToEnumerableAsync(); " is 126.
Long Statement,XPlatformCloudKit.DataServices,AzureMobileService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\DataServices\AzureMobileService.cs,CreateInitialSchema,The length of the statement  "                await ServiceLocator.MessageService.ShowErrorAsync("Successfully Generated Schema' set \"CreateInitialSchemaForAzureMobileService\" to false in AppSettings.cs"' "Schema Generation Enabled"); " is 190.
Long Statement,XPlatformCloudKit.Helpers,ItemsShowcaseViewDataTemplateSelector,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Helpers\ItemsShowcaseViewDataTemplateSelector.cs,SelectTemplateCore,The length of the statement  "            if (selectedItem.UrlSource != null && (selectedItem.UrlSource.Url.Contains("gdata.youtube.com") || selectedItem.UrlSource.Url.Contains("googleapis.com/youtube"))) " is 162.
Long Statement,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,LoadWebContent,The length of the statement  "            var bc = AppSettings.BackgroundColorOfDescription[0] == '#' ? AppSettings.BackgroundColorOfDescription : FetchBackgroundColor(); " is 128.
Long Statement,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,LoadWebContent,The length of the statement  "            string disableHyperLinksJS = "<script type='text/javascript'>window.onload = function() {   var anchors = document.getElementsByTagName(\"a\"); for (var i = 0; i < anchors.length; i++) { anchors[i].onclick = function() {return(false);}; }};</script>"; " is 251.
Long Statement,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,LoadWebContent,The length of the statement  "            string disableOpeningHyperLinksInNewTabJS = "<script type='text/javascript'>window.onload = function() {   var anchors = document.getElementsByTagName(\"a\"); for (var i = 0; i < anchors.length; i++) { anchors[i].target = \"_self\"; }};</script>"; " is 247.
Long Statement,XPlatformCloudKit.Views,ItemsShowcaseView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemsShowcaseView.xaml.cs,ShowPrivacyPolicy,The length of the statement  "            SettingsCommand privacyPolicyCommand = new SettingsCommand("privacyPolicy"' "Privacy Policy"' (x) => { LaunchPrivacyPolicyUrl(); }); " is 132.
Complex Conditional,XPlatformCloudKit.Common,LayoutAwarePage,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,XPlatformCloudKit.Common,LayoutAwarePage,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,XPlatformCloudKit.Common,LayoutAwarePage,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,LoadWebContent,The method has an empty catch block.
Magic Number,XPlatformCloudKit.Common,LayoutAwarePage,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,XPlatformCloudKit.Common,LayoutAwarePage,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,XPlatformCloudKit.Common,LayoutAwarePage,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,XPlatformCloudKit.Common,LayoutAwarePage,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,XPlatformCloudKit.DataServices,AzureMobileService,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\DataServices\AzureMobileService.cs,GetItems,The following statement contains a magic number: try              {                  Items = await itemsTable.Take(1000).ToListAsync();                    //Fix issue #27 - Search unable to handle NULL Azure database table value                  foreach(var item in Items)                  {                      item.UrlSource = new UrlSource { Url = AppSettings.MobileServiceAddress' Group = item.Group' Type = "AzureMobileService" };                        Type type = item.GetType();                        if (type != typeof(string))                          continue;                        var properties = type.GetRuntimeProperties();                      foreach (PropertyInfo property in properties)                      {                          if (property.GetValue(item' null) == null)                              property.SetValue(item' string.Empty);                      }                  }                    return Items;              }              catch(Exception e)              {                  ServiceLocator.MessageService.ShowErrorAsync("Error when retrieving items from AzureMobileService"' "Application Error");                  return Items;              }
Magic Number,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,MaximizeWebView,The following statement contains a magic number: browser.SetValue(Grid.ColumnSpanProperty' 2);
Magic Number,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,MaximizeWebView,The following statement contains a magic number: browser.Margin = new Thickness(70' 0' 70' 47);
Magic Number,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,MaximizeWebView,The following statement contains a magic number: browser.Margin = new Thickness(70' 0' 70' 47);
Magic Number,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,MaximizeWebView,The following statement contains a magic number: browser.Margin = new Thickness(70' 0' 70' 47);
Magic Number,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,MiniMizeWebView,The following statement contains a magic number: browser.Margin = new Thickness(70' 30' 70' 47);
Magic Number,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,MiniMizeWebView,The following statement contains a magic number: browser.Margin = new Thickness(70' 30' 70' 47);
Magic Number,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,MiniMizeWebView,The following statement contains a magic number: browser.Margin = new Thickness(70' 30' 70' 47);
Magic Number,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,MiniMizeWebView,The following statement contains a magic number: browser.Margin = new Thickness(70' 30' 70' 47);
Magic Number,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,FetchBackgroundColor,The following statement contains a magic number: return color.Remove(1' 2);
Magic Number,XPlatformCloudKit.Views,ItemDescriptionView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemDescriptionView.xaml.cs,ScrollingHost_ViewChanged,The following statement contains a magic number: if (Window.Current.CoreWindow.Bounds.Width > 1024)//I.e. are we in Full Landscape?  Not Snapped or Filled              {                  if (e.IsIntermediate)                  {                      //webViewRectangleCanvas.Visibility = Visibility.Visible;                      //WebViewBrush b = new WebViewBrush();                      //b.SourceName = "webView";                      //b.Redraw();                      //webViewRectangleCanvas.Fill = b;                      webView.Visibility = Visibility.Collapsed;                      //double absoluteOffset = ((ScrollViewer)sender).HorizontalOffset;                      //double relativeOffset = absoluteOffset - (int)absoluteOffset;                      //webViewRectangleCanvas.Opacity = 1 - Math.Abs(relativeOffset);                  }                  else                  {                      webView.Visibility = Visibility.Visible;                  }              }
Magic Number,XPlatformCloudKit.Views,ItemsShowcaseView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemsShowcaseView.xaml.cs,ItemsShowcaseView_Loaded,The following statement contains a magic number: if (!AppState.ItemsShowcaseViewInitialized)              {                  ((ItemsShowcaseViewModel)DataContext).PropertyChanged += vm_PropertyChanged;                    Windows.ApplicationModel.Search.SearchPane.GetForCurrentView().QuerySubmitted += searchPane_QuerySubmitted;                  //Windows.ApplicationModel.Search.SearchPane.GetForCurrentView().ShowOnKeyboardInput = true;                    //This is a one-time execuction block' so we can test simulating a purchase here                   if (AppSettings.EnablePubcenterAdsWin8)                  {                      if (AppSettings.HideAdsIfPurchasedWin8)                      {                          #if DEBUG                          await simulateAppPurchase();                          var licenseInfo = Windows.ApplicationModel.Store.CurrentAppSimulator.LicenseInformation;                          #else                          var licenseInfo = Windows.ApplicationModel.Store.CurrentApp.LicenseInformation;                          #endif                          if (!licenseInfo.IsTrial)                              return;                      }                        adControl.ApplicationId = AppSettings.PubcenterApplicationIdWin8;                      adControl.AdUnitId = AppSettings.PubcenterAdUnitIdWin8;                      adControl.IsAutoRefreshEnabled = true;                      adControl.Width = 728;                      adControl.Height = 90;                      adControl.HorizontalAlignment = Windows.UI.Xaml.HorizontalAlignment.Right;                      ShowcaseGrid.Children.Add(adControl);                  }                    Window.Current.SizeChanged += Window_SizeChanged;                  AppState.ItemsShowcaseViewInitialized = true;              }
Magic Number,XPlatformCloudKit.Views,ItemsShowcaseView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemsShowcaseView.xaml.cs,ItemsShowcaseView_Loaded,The following statement contains a magic number: if (!AppState.ItemsShowcaseViewInitialized)              {                  ((ItemsShowcaseViewModel)DataContext).PropertyChanged += vm_PropertyChanged;                    Windows.ApplicationModel.Search.SearchPane.GetForCurrentView().QuerySubmitted += searchPane_QuerySubmitted;                  //Windows.ApplicationModel.Search.SearchPane.GetForCurrentView().ShowOnKeyboardInput = true;                    //This is a one-time execuction block' so we can test simulating a purchase here                   if (AppSettings.EnablePubcenterAdsWin8)                  {                      if (AppSettings.HideAdsIfPurchasedWin8)                      {                          #if DEBUG                          await simulateAppPurchase();                          var licenseInfo = Windows.ApplicationModel.Store.CurrentAppSimulator.LicenseInformation;                          #else                          var licenseInfo = Windows.ApplicationModel.Store.CurrentApp.LicenseInformation;                          #endif                          if (!licenseInfo.IsTrial)                              return;                      }                        adControl.ApplicationId = AppSettings.PubcenterApplicationIdWin8;                      adControl.AdUnitId = AppSettings.PubcenterAdUnitIdWin8;                      adControl.IsAutoRefreshEnabled = true;                      adControl.Width = 728;                      adControl.Height = 90;                      adControl.HorizontalAlignment = Windows.UI.Xaml.HorizontalAlignment.Right;                      ShowcaseGrid.Children.Add(adControl);                  }                    Window.Current.SizeChanged += Window_SizeChanged;                  AppState.ItemsShowcaseViewInitialized = true;              }
Magic Number,XPlatformCloudKit.Views,ItemsShowcaseView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemsShowcaseView.xaml.cs,Window_SizeChanged,The following statement contains a magic number: if (e.Size.Width == 320)//snapped              {                  if (AppSettings.EnableBackgroundWin8X == true)                  {                      ShowcaseGrid.Background.Opacity = .5;                  }                  if (AppSettings.EnablePubcenterAdsWin8)                  {                      adControl.Visibility = Visibility.Collapsed;                  }              }              else              {                  ShowcaseGrid.Background.Opacity = 1;                  adControl.Visibility = Visibility.Visible;              }
Magic Number,XPlatformCloudKit.Views,ItemsShowcaseView,C:\repos\winappkits_XPlatformCloudKit\XPlatformCloudKit\XPlatformCloudKit.Win8\Views\ItemsShowcaseView.xaml.cs,Window_SizeChanged,The following statement contains a magic number: if (e.Size.Width == 320)//snapped              {                  if (AppSettings.EnableBackgroundWin8X == true)                  {                      ShowcaseGrid.Background.Opacity = .5;                  }                  if (AppSettings.EnablePubcenterAdsWin8)                  {                      adControl.Visibility = Visibility.Collapsed;                  }              }              else              {                  ShowcaseGrid.Background.Opacity = 1;                  adControl.Visibility = Visibility.Visible;              }
