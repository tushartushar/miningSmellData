Implementation smell,Namespace,Class,File,Method,Description
Long Method,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,step3,The method has 108 lines of code.
Long Method,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,Extract,The method has 128 lines of code.
Complex Method,Library,HtmlUtility,C:\repos\peterkhoa_hdtl\Library\Content process\HtmlUtility.cs,MatchHtmlAttribute,Cyclomatic complexity of the method is 9
Complex Method,Library,Rfc822DateTime,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,ConvertZoneToLocalDifferential,Cyclomatic complexity of the method is 16
Complex Method,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,m,Cyclomatic complexity of the method is 8
Complex Method,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,step1,Cyclomatic complexity of the method is 14
Complex Method,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,step3,Cyclomatic complexity of the method is 60
Complex Method,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,step4,Cyclomatic complexity of the method is 22
Complex Method,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,step5,Cyclomatic complexity of the method is 52
Complex Method,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,Extract,Cyclomatic complexity of the method is 16
Complex Method,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermFwgCollection,Cyclomatic complexity of the method is 8
Complex Method,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,Cyclomatic complexity of the method is 9
Complex Method,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,Cyclomatic complexity of the method is 15
Complex Method,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,SortTermsIntoProbabilities,Cyclomatic complexity of the method is 8
Complex Method,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,Cyclomatic complexity of the method is 12
Complex Method,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,Cyclomatic complexity of the method is 13
Long Parameter List,Library,ImageUtil,C:\repos\peterkhoa_hdtl\Library\Util\ImageUtil.cs,GetLink,The method has 7 parameters.
Long Identifier,Library,Rfc822DateTime,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,ConvertZoneToLocalDifferential,The length of the parameter zoneRepresentedAsLocalDifferential is 34.
Long Statement,Library,Rfc822DateTime,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,Parse,The length of the statement  "		throw new FormatException (String.Format (null' "{0} is not a valid RFC 822 string representation of a date and time."' s)); " is 124.
Long Statement,Library,Rfc822DateTime,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,TryParse,The length of the statement  "		if (DateTime.TryParseExact (Rfc822DateTime.ConvertZoneToLocalDifferential (s)' Rfc822DateTime.Rfc822DateTimePatterns' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AdjustToUniversal' out parseResult)) { " is 205.
Long Statement,Library,DateTimeLib,C:\repos\peterkhoa_hdtl\Library\Util\DateTimeLib.cs,getDatetime,The length of the statement  "	return date.Day.ToString () + "/" + date.Month.ToString () + "/" + date.Year.ToString () + "  " + date.ToShortTimeString (); " is 124.
Long Statement,Library,ImageUtil,C:\repos\peterkhoa_hdtl\Library\Util\ImageUtil.cs,ResizeImageFile,The length of the statement  "	grPhoto.DrawImage (imgPhoto' new Rectangle (0' 0' targetW' targetH)' 0' 0' original.Width' original.Height' GraphicsUnit.Pixel); " is 128.
Long Statement,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The length of the statement  "			*///LabLogger.Instance.Write("TermExtractor PrepareTextToDenseParagraphs ran successfully with rawparas = " + rawparas.Count.ToString()' 411' 01' LoggingCategory.All); " is 167.
Long Statement,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The length of the statement  "	string url = "http://www.youtube.com/api/timedtext?sparams=asr_langs%2Ccaps%2Cexpire%2Cv&asr_langs=en&caps=asr&lang=en&name=English&kind&type=track&v=" + code; " is 159.
Long Statement,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The length of the statement  "		url = "http://www.youtube.com/api/timedtext?sparams=asr_langs%2Ccaps%2Cexpire%2Cv&asr_langs=en&caps=asr&hl=en&type=track&lang=en&name&kind&v=" + code; " is 150.
Long Statement,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The length of the statement  "	//    url = "http://www.youtube.com/api/timedtext?sparams=asr_langs%2Ccaps%2Cexpire%2Cv&asr_langs=en&caps=asr&hl=en&type=track&lang=en&name&kind&v=" + code; " is 156.
Long Statement,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The length of the statement  "	string output = "<br/><object width=\"640\" height=\"390\"><param name=\"movie\" value=\"" + temp + "\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"" + temp + "\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"640\" height=\"390\"></embed></object><br/>"; " is 400.
Long Statement,Library.Ranking,WilsonScore,C:\repos\peterkhoa_hdtl\Library\Ranking\WilsonScore.cs,ranking_score,The length of the statement  "	return (phat + z * z / (2 * total_rate) - z * Math.Sqrt ((phat * (1 - phat) + z * z / (4 * total_rate)) / total_rate)) / (1 + z * z / total_rate); " is 146.
Complex Conditional,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,cvc,The conditional expression  "i < 2 || !cons (i) || cons (i - 1) || !cons (i - 2)"  is complex.
Complex Conditional,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,step5,The conditional expression  "ends ("ion") && j >= 0 && (b [j] == 's' || b [j] == 't')"  is complex.
Empty Catch Block,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The method has an empty catch block.
Empty Catch Block,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The method has an empty catch block.
Empty Catch Block,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The method has an empty catch block.
Empty Catch Block,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The method has an empty catch block.
Magic Number,Library,HtmlUtility,C:\repos\peterkhoa_hdtl\Library\Content process\HtmlUtility.cs,TidyHtml,The following statement contains a magic number: doc.Options.WrapLen = 32000;  
Magic Number,Library,HtmlUtility,C:\repos\peterkhoa_hdtl\Library\Content process\HtmlUtility.cs,RemoveTidyAdditions,The following statement contains a magic number: if (start != -1 && end > start && end < text.Length) {  	text = text.Substring (start + 6' end - (start + 6));  }  else {  	return string.Empty;  }  
Magic Number,Library,HtmlUtility,C:\repos\peterkhoa_hdtl\Library\Content process\HtmlUtility.cs,RemoveTidyAdditions,The following statement contains a magic number: if (start != -1 && end > start && end < text.Length) {  	text = text.Substring (start + 6' end - (start + 6));  }  else {  	return string.Empty;  }  
Magic Number,Library,HtmlUtility,C:\repos\peterkhoa_hdtl\Library\Content process\HtmlUtility.cs,RemoveTidyAdditions,The following statement contains a magic number: text = text.Substring (start + 6' end - (start + 6));  
Magic Number,Library,HtmlUtility,C:\repos\peterkhoa_hdtl\Library\Content process\HtmlUtility.cs,RemoveTidyAdditions,The following statement contains a magic number: text = text.Substring (start + 6' end - (start + 6));  
Magic Number,Library,Time,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,GetDuration,The following statement contains a magic number: if (d.TotalSeconds < 60)  	return Math.Ceiling (d.TotalSeconds).ToString () + "  giây trước";  
Magic Number,Library,Time,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,GetDuration,The following statement contains a magic number: if (d.TotalMinutes < 60)  	return Math.Round (d.TotalMinutes).ToString () + " phút trước";  
Magic Number,Library,Time,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,GetDuration,The following statement contains a magic number: if (d.TotalHours < 24)  	return Math.Round (d.TotalHours).ToString () + " giờ trước";  
Magic Number,Library,Time,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,GetRemainDuration,The following statement contains a magic number: if (d.TotalSeconds < 60)  	return Math.Ceiling (d.TotalSeconds).ToString () + " giây";  
Magic Number,Library,Time,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,GetRemainDuration,The following statement contains a magic number: if (d.TotalMinutes < 60)  	return Math.Round (d.TotalMinutes).ToString () + " phút";  
Magic Number,Library,Time,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,GetRemainDuration,The following statement contains a magic number: if (d.TotalHours < 24)  	return Math.Round (d.TotalHours).ToString () + " giờ";  
Magic Number,Library,Time,C:\repos\peterkhoa_hdtl\Library\String\Datetime.cs,getNextMonday,The following statement contains a magic number: return getMonday (time).AddDays (7);  
Magic Number,Library,Encryptor,C:\repos\peterkhoa_hdtl\Library\String\Encryptors.cs,Encrypt,The following statement contains a magic number: keyBytes = password.GetBytes (keySize / 8);  
Magic Number,Library,Encryptor,C:\repos\peterkhoa_hdtl\Library\String\Encryptors.cs,Decrypt,The following statement contains a magic number: keyBytes = password.GetBytes (keySize / 8);  
Magic Number,Library,DateTimeLib,C:\repos\peterkhoa_hdtl\Library\Util\DateTimeLib.cs,GetWeekNumber,The following statement contains a magic number: return ((date.DayOfYear - 1) / 7) + 1;  
Magic Number,Library,DateTimeLib,C:\repos\peterkhoa_hdtl\Library\Util\DateTimeLib.cs,GetDateRange,The following statement contains a magic number: result [0] = firstDate.AddDays (7 * (weekNumber - 1) - 1);  
Magic Number,Library,DateTimeLib,C:\repos\peterkhoa_hdtl\Library\Util\DateTimeLib.cs,GetDateRange,The following statement contains a magic number: result [1] = result [0].AddDays (7);  
Magic Number,Library,ImageUtil,C:\repos\peterkhoa_hdtl\Library\Util\ImageUtil.cs,CheckImage,The following statement contains a magic number: try {  	// Load image  	System.Drawing.Image image = System.Drawing.Image.FromFile (fileName);  	// Check image's width and height  	if (image.Width > width || image.Height > height) {  		image.Dispose ();  		File.Delete (fileName);  		throw new Exception ("Sai kích thước");  	}  	image.Dispose ();  	FileInfo fileInfo = new FileInfo (fileName);  	if (fileInfo.Length > 5000000) {  		File.Delete (fileName);  		throw new Exception ("Kích thước file quá lớn.");  	}  	string fileEx = System.IO.Path.GetExtension (fileName).ToLower ();  	string[] allowedEx =  {  		".gif"'  		".png"'  		".jpg"'  		".bmp"'  		".jpeg"  	};  	bool fileok = false;  	for (int i = 0; i < allowedEx.Length; i++) {  		if (fileEx == allowedEx [i]) {  			fileok = true;  		}  	}  	if (fileok == false) {  		throw new Exception ("sai ảnh");  	}  }  catch (Exception vne) {  	throw new Exception ("Sai ảnh");  }  
Magic Number,Library,ImageUtil,C:\repos\peterkhoa_hdtl\Library\Util\ImageUtil.cs,CheckImage,The following statement contains a magic number: if (fileInfo.Length > 5000000) {  	File.Delete (fileName);  	throw new Exception ("Kích thước file quá lớn.");  }  
Magic Number,Library,ImageUtil,C:\repos\peterkhoa_hdtl\Library\Util\ImageUtil.cs,ResizeImageFile,The following statement contains a magic number: bmPhoto.SetResolution (72' 72);  
Magic Number,Library,ImageUtil,C:\repos\peterkhoa_hdtl\Library\Util\ImageUtil.cs,ResizeImageFile,The following statement contains a magic number: bmPhoto.SetResolution (72' 72);  
Magic Number,DeltaViet.Utility,LoaderUtility,C:\repos\peterkhoa_hdtl\Library\Content process\LoaderUtility.cs,SetError,The following statement contains a magic number: __page_error.Expires = DateTime.Now.AddSeconds (10);  
Magic Number,DeltaViet.Utility,LoaderUtility,C:\repos\peterkhoa_hdtl\Library\Content process\LoaderUtility.cs,SetNotice,The following statement contains a magic number: __page_notice.Expires = DateTime.Now.AddSeconds (10);  
Magic Number,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,cvc,The following statement contains a magic number: if (i < 2 || !cons (i) || cons (i - 1) || !cons (i - 2))  	return false;  
Magic Number,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,cvc,The following statement contains a magic number: if (i < 2 || !cons (i) || cons (i - 1) || !cons (i - 2))  	return false;  
Magic Number,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,step1,The following statement contains a magic number: if (b [k] == 's') {  	if (ends ("sses"))  		k -= 2;  	else if (ends ("ies"))  		setto ("i");  	else if (b [k - 1] != 's')  		k--;  }  
Magic Number,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,step1,The following statement contains a magic number: if (ends ("sses"))  	k -= 2;  else if (ends ("ies"))  	setto ("i");  else if (b [k - 1] != 's')  	k--;  
Magic Number,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,step1,The following statement contains a magic number: k -= 2;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,TermInSentence,The following statement contains a magic number: if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  	found = true;  	break;  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (KeyValuePair<decimal' string> pair in termsG) {  	string term = pair.Value;  	int termsInSentencesForTerm = 0;  	foreach (List<List<KeyTerm>> paragraph in paragraphs) {  		foreach (List<KeyTerm> sentence in paragraph) {  			bool found = false;  			//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  			if (term.IndexOf (" ") > -1) {  				string[] termWords = term.Split (' ');  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (termWords.Length == 2 && i > 2) {  						KeyTerm t1 = sentence [i - 1];  						if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  							found = true;  							break;  						}  					}  					else if (termWords.Length == 3 && i > 3) {  						KeyTerm t1 = sentence [i - 1];  						KeyTerm t2 = sentence [i - 2];  						if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  							found = true;  							break;  						}  					}  				}  			}  			else {  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (t.Stem == term) {  						found = true;  						break;  					}  				}  			}  			if (found) {  				//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  				termsInSentencesForTerm += sentence.Count;  				if (sentence.Count > 2)  					termsInSentencesForTerm += sentence.Count - 2;  				//all three word terms  				if (sentence.Count > 1)  					termsInSentencesForTerm += sentence.Count - 1;  				//all two word terms  			}  		}  	}  	termNw.Add (term' termsInSentencesForTerm);  	decimal pg = termsInSentencesForTerm / (decimal)this.termTotal;  	termPg.Add (term' pg);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (KeyValuePair<decimal' string> pair in termsG) {  	string term = pair.Value;  	int termsInSentencesForTerm = 0;  	foreach (List<List<KeyTerm>> paragraph in paragraphs) {  		foreach (List<KeyTerm> sentence in paragraph) {  			bool found = false;  			//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  			if (term.IndexOf (" ") > -1) {  				string[] termWords = term.Split (' ');  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (termWords.Length == 2 && i > 2) {  						KeyTerm t1 = sentence [i - 1];  						if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  							found = true;  							break;  						}  					}  					else if (termWords.Length == 3 && i > 3) {  						KeyTerm t1 = sentence [i - 1];  						KeyTerm t2 = sentence [i - 2];  						if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  							found = true;  							break;  						}  					}  				}  			}  			else {  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (t.Stem == term) {  						found = true;  						break;  					}  				}  			}  			if (found) {  				//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  				termsInSentencesForTerm += sentence.Count;  				if (sentence.Count > 2)  					termsInSentencesForTerm += sentence.Count - 2;  				//all three word terms  				if (sentence.Count > 1)  					termsInSentencesForTerm += sentence.Count - 1;  				//all two word terms  			}  		}  	}  	termNw.Add (term' termsInSentencesForTerm);  	decimal pg = termsInSentencesForTerm / (decimal)this.termTotal;  	termPg.Add (term' pg);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (KeyValuePair<decimal' string> pair in termsG) {  	string term = pair.Value;  	int termsInSentencesForTerm = 0;  	foreach (List<List<KeyTerm>> paragraph in paragraphs) {  		foreach (List<KeyTerm> sentence in paragraph) {  			bool found = false;  			//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  			if (term.IndexOf (" ") > -1) {  				string[] termWords = term.Split (' ');  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (termWords.Length == 2 && i > 2) {  						KeyTerm t1 = sentence [i - 1];  						if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  							found = true;  							break;  						}  					}  					else if (termWords.Length == 3 && i > 3) {  						KeyTerm t1 = sentence [i - 1];  						KeyTerm t2 = sentence [i - 2];  						if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  							found = true;  							break;  						}  					}  				}  			}  			else {  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (t.Stem == term) {  						found = true;  						break;  					}  				}  			}  			if (found) {  				//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  				termsInSentencesForTerm += sentence.Count;  				if (sentence.Count > 2)  					termsInSentencesForTerm += sentence.Count - 2;  				//all three word terms  				if (sentence.Count > 1)  					termsInSentencesForTerm += sentence.Count - 1;  				//all two word terms  			}  		}  	}  	termNw.Add (term' termsInSentencesForTerm);  	decimal pg = termsInSentencesForTerm / (decimal)this.termTotal;  	termPg.Add (term' pg);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (KeyValuePair<decimal' string> pair in termsG) {  	string term = pair.Value;  	int termsInSentencesForTerm = 0;  	foreach (List<List<KeyTerm>> paragraph in paragraphs) {  		foreach (List<KeyTerm> sentence in paragraph) {  			bool found = false;  			//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  			if (term.IndexOf (" ") > -1) {  				string[] termWords = term.Split (' ');  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (termWords.Length == 2 && i > 2) {  						KeyTerm t1 = sentence [i - 1];  						if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  							found = true;  							break;  						}  					}  					else if (termWords.Length == 3 && i > 3) {  						KeyTerm t1 = sentence [i - 1];  						KeyTerm t2 = sentence [i - 2];  						if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  							found = true;  							break;  						}  					}  				}  			}  			else {  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (t.Stem == term) {  						found = true;  						break;  					}  				}  			}  			if (found) {  				//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  				termsInSentencesForTerm += sentence.Count;  				if (sentence.Count > 2)  					termsInSentencesForTerm += sentence.Count - 2;  				//all three word terms  				if (sentence.Count > 1)  					termsInSentencesForTerm += sentence.Count - 1;  				//all two word terms  			}  		}  	}  	termNw.Add (term' termsInSentencesForTerm);  	decimal pg = termsInSentencesForTerm / (decimal)this.termTotal;  	termPg.Add (term' pg);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (KeyValuePair<decimal' string> pair in termsG) {  	string term = pair.Value;  	int termsInSentencesForTerm = 0;  	foreach (List<List<KeyTerm>> paragraph in paragraphs) {  		foreach (List<KeyTerm> sentence in paragraph) {  			bool found = false;  			//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  			if (term.IndexOf (" ") > -1) {  				string[] termWords = term.Split (' ');  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (termWords.Length == 2 && i > 2) {  						KeyTerm t1 = sentence [i - 1];  						if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  							found = true;  							break;  						}  					}  					else if (termWords.Length == 3 && i > 3) {  						KeyTerm t1 = sentence [i - 1];  						KeyTerm t2 = sentence [i - 2];  						if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  							found = true;  							break;  						}  					}  				}  			}  			else {  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (t.Stem == term) {  						found = true;  						break;  					}  				}  			}  			if (found) {  				//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  				termsInSentencesForTerm += sentence.Count;  				if (sentence.Count > 2)  					termsInSentencesForTerm += sentence.Count - 2;  				//all three word terms  				if (sentence.Count > 1)  					termsInSentencesForTerm += sentence.Count - 1;  				//all two word terms  			}  		}  	}  	termNw.Add (term' termsInSentencesForTerm);  	decimal pg = termsInSentencesForTerm / (decimal)this.termTotal;  	termPg.Add (term' pg);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (KeyValuePair<decimal' string> pair in termsG) {  	string term = pair.Value;  	int termsInSentencesForTerm = 0;  	foreach (List<List<KeyTerm>> paragraph in paragraphs) {  		foreach (List<KeyTerm> sentence in paragraph) {  			bool found = false;  			//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  			if (term.IndexOf (" ") > -1) {  				string[] termWords = term.Split (' ');  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (termWords.Length == 2 && i > 2) {  						KeyTerm t1 = sentence [i - 1];  						if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  							found = true;  							break;  						}  					}  					else if (termWords.Length == 3 && i > 3) {  						KeyTerm t1 = sentence [i - 1];  						KeyTerm t2 = sentence [i - 2];  						if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  							found = true;  							break;  						}  					}  				}  			}  			else {  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (t.Stem == term) {  						found = true;  						break;  					}  				}  			}  			if (found) {  				//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  				termsInSentencesForTerm += sentence.Count;  				if (sentence.Count > 2)  					termsInSentencesForTerm += sentence.Count - 2;  				//all three word terms  				if (sentence.Count > 1)  					termsInSentencesForTerm += sentence.Count - 1;  				//all two word terms  			}  		}  	}  	termNw.Add (term' termsInSentencesForTerm);  	decimal pg = termsInSentencesForTerm / (decimal)this.termTotal;  	termPg.Add (term' pg);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (KeyValuePair<decimal' string> pair in termsG) {  	string term = pair.Value;  	int termsInSentencesForTerm = 0;  	foreach (List<List<KeyTerm>> paragraph in paragraphs) {  		foreach (List<KeyTerm> sentence in paragraph) {  			bool found = false;  			//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  			if (term.IndexOf (" ") > -1) {  				string[] termWords = term.Split (' ');  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (termWords.Length == 2 && i > 2) {  						KeyTerm t1 = sentence [i - 1];  						if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  							found = true;  							break;  						}  					}  					else if (termWords.Length == 3 && i > 3) {  						KeyTerm t1 = sentence [i - 1];  						KeyTerm t2 = sentence [i - 2];  						if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  							found = true;  							break;  						}  					}  				}  			}  			else {  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (t.Stem == term) {  						found = true;  						break;  					}  				}  			}  			if (found) {  				//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  				termsInSentencesForTerm += sentence.Count;  				if (sentence.Count > 2)  					termsInSentencesForTerm += sentence.Count - 2;  				//all three word terms  				if (sentence.Count > 1)  					termsInSentencesForTerm += sentence.Count - 1;  				//all two word terms  			}  		}  	}  	termNw.Add (term' termsInSentencesForTerm);  	decimal pg = termsInSentencesForTerm / (decimal)this.termTotal;  	termPg.Add (term' pg);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (KeyValuePair<decimal' string> pair in termsG) {  	string term = pair.Value;  	int termsInSentencesForTerm = 0;  	foreach (List<List<KeyTerm>> paragraph in paragraphs) {  		foreach (List<KeyTerm> sentence in paragraph) {  			bool found = false;  			//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  			if (term.IndexOf (" ") > -1) {  				string[] termWords = term.Split (' ');  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (termWords.Length == 2 && i > 2) {  						KeyTerm t1 = sentence [i - 1];  						if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  							found = true;  							break;  						}  					}  					else if (termWords.Length == 3 && i > 3) {  						KeyTerm t1 = sentence [i - 1];  						KeyTerm t2 = sentence [i - 2];  						if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  							found = true;  							break;  						}  					}  				}  			}  			else {  				for (int i = 0; i < sentence.Count; i++) {  					KeyTerm t = sentence [i];  					if (t.Stem == term) {  						found = true;  						break;  					}  				}  			}  			if (found) {  				//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  				termsInSentencesForTerm += sentence.Count;  				if (sentence.Count > 2)  					termsInSentencesForTerm += sentence.Count - 2;  				//all three word terms  				if (sentence.Count > 1)  					termsInSentencesForTerm += sentence.Count - 1;  				//all two word terms  			}  		}  	}  	termNw.Add (term' termsInSentencesForTerm);  	decimal pg = termsInSentencesForTerm / (decimal)this.termTotal;  	termPg.Add (term' pg);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<List<KeyTerm>> paragraph in paragraphs) {  	foreach (List<KeyTerm> sentence in paragraph) {  		bool found = false;  		//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  		if (term.IndexOf (" ") > -1) {  			string[] termWords = term.Split (' ');  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (termWords.Length == 2 && i > 2) {  					KeyTerm t1 = sentence [i - 1];  					if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  						found = true;  						break;  					}  				}  				else if (termWords.Length == 3 && i > 3) {  					KeyTerm t1 = sentence [i - 1];  					KeyTerm t2 = sentence [i - 2];  					if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  						found = true;  						break;  					}  				}  			}  		}  		else {  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (t.Stem == term) {  					found = true;  					break;  				}  			}  		}  		if (found) {  			//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  			termsInSentencesForTerm += sentence.Count;  			if (sentence.Count > 2)  				termsInSentencesForTerm += sentence.Count - 2;  			//all three word terms  			if (sentence.Count > 1)  				termsInSentencesForTerm += sentence.Count - 1;  			//all two word terms  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<List<KeyTerm>> paragraph in paragraphs) {  	foreach (List<KeyTerm> sentence in paragraph) {  		bool found = false;  		//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  		if (term.IndexOf (" ") > -1) {  			string[] termWords = term.Split (' ');  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (termWords.Length == 2 && i > 2) {  					KeyTerm t1 = sentence [i - 1];  					if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  						found = true;  						break;  					}  				}  				else if (termWords.Length == 3 && i > 3) {  					KeyTerm t1 = sentence [i - 1];  					KeyTerm t2 = sentence [i - 2];  					if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  						found = true;  						break;  					}  				}  			}  		}  		else {  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (t.Stem == term) {  					found = true;  					break;  				}  			}  		}  		if (found) {  			//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  			termsInSentencesForTerm += sentence.Count;  			if (sentence.Count > 2)  				termsInSentencesForTerm += sentence.Count - 2;  			//all three word terms  			if (sentence.Count > 1)  				termsInSentencesForTerm += sentence.Count - 1;  			//all two word terms  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<List<KeyTerm>> paragraph in paragraphs) {  	foreach (List<KeyTerm> sentence in paragraph) {  		bool found = false;  		//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  		if (term.IndexOf (" ") > -1) {  			string[] termWords = term.Split (' ');  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (termWords.Length == 2 && i > 2) {  					KeyTerm t1 = sentence [i - 1];  					if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  						found = true;  						break;  					}  				}  				else if (termWords.Length == 3 && i > 3) {  					KeyTerm t1 = sentence [i - 1];  					KeyTerm t2 = sentence [i - 2];  					if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  						found = true;  						break;  					}  				}  			}  		}  		else {  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (t.Stem == term) {  					found = true;  					break;  				}  			}  		}  		if (found) {  			//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  			termsInSentencesForTerm += sentence.Count;  			if (sentence.Count > 2)  				termsInSentencesForTerm += sentence.Count - 2;  			//all three word terms  			if (sentence.Count > 1)  				termsInSentencesForTerm += sentence.Count - 1;  			//all two word terms  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<List<KeyTerm>> paragraph in paragraphs) {  	foreach (List<KeyTerm> sentence in paragraph) {  		bool found = false;  		//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  		if (term.IndexOf (" ") > -1) {  			string[] termWords = term.Split (' ');  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (termWords.Length == 2 && i > 2) {  					KeyTerm t1 = sentence [i - 1];  					if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  						found = true;  						break;  					}  				}  				else if (termWords.Length == 3 && i > 3) {  					KeyTerm t1 = sentence [i - 1];  					KeyTerm t2 = sentence [i - 2];  					if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  						found = true;  						break;  					}  				}  			}  		}  		else {  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (t.Stem == term) {  					found = true;  					break;  				}  			}  		}  		if (found) {  			//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  			termsInSentencesForTerm += sentence.Count;  			if (sentence.Count > 2)  				termsInSentencesForTerm += sentence.Count - 2;  			//all three word terms  			if (sentence.Count > 1)  				termsInSentencesForTerm += sentence.Count - 1;  			//all two word terms  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<List<KeyTerm>> paragraph in paragraphs) {  	foreach (List<KeyTerm> sentence in paragraph) {  		bool found = false;  		//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  		if (term.IndexOf (" ") > -1) {  			string[] termWords = term.Split (' ');  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (termWords.Length == 2 && i > 2) {  					KeyTerm t1 = sentence [i - 1];  					if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  						found = true;  						break;  					}  				}  				else if (termWords.Length == 3 && i > 3) {  					KeyTerm t1 = sentence [i - 1];  					KeyTerm t2 = sentence [i - 2];  					if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  						found = true;  						break;  					}  				}  			}  		}  		else {  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (t.Stem == term) {  					found = true;  					break;  				}  			}  		}  		if (found) {  			//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  			termsInSentencesForTerm += sentence.Count;  			if (sentence.Count > 2)  				termsInSentencesForTerm += sentence.Count - 2;  			//all three word terms  			if (sentence.Count > 1)  				termsInSentencesForTerm += sentence.Count - 1;  			//all two word terms  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<List<KeyTerm>> paragraph in paragraphs) {  	foreach (List<KeyTerm> sentence in paragraph) {  		bool found = false;  		//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  		if (term.IndexOf (" ") > -1) {  			string[] termWords = term.Split (' ');  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (termWords.Length == 2 && i > 2) {  					KeyTerm t1 = sentence [i - 1];  					if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  						found = true;  						break;  					}  				}  				else if (termWords.Length == 3 && i > 3) {  					KeyTerm t1 = sentence [i - 1];  					KeyTerm t2 = sentence [i - 2];  					if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  						found = true;  						break;  					}  				}  			}  		}  		else {  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (t.Stem == term) {  					found = true;  					break;  				}  			}  		}  		if (found) {  			//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  			termsInSentencesForTerm += sentence.Count;  			if (sentence.Count > 2)  				termsInSentencesForTerm += sentence.Count - 2;  			//all three word terms  			if (sentence.Count > 1)  				termsInSentencesForTerm += sentence.Count - 1;  			//all two word terms  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<List<KeyTerm>> paragraph in paragraphs) {  	foreach (List<KeyTerm> sentence in paragraph) {  		bool found = false;  		//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  		if (term.IndexOf (" ") > -1) {  			string[] termWords = term.Split (' ');  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (termWords.Length == 2 && i > 2) {  					KeyTerm t1 = sentence [i - 1];  					if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  						found = true;  						break;  					}  				}  				else if (termWords.Length == 3 && i > 3) {  					KeyTerm t1 = sentence [i - 1];  					KeyTerm t2 = sentence [i - 2];  					if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  						found = true;  						break;  					}  				}  			}  		}  		else {  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (t.Stem == term) {  					found = true;  					break;  				}  			}  		}  		if (found) {  			//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  			termsInSentencesForTerm += sentence.Count;  			if (sentence.Count > 2)  				termsInSentencesForTerm += sentence.Count - 2;  			//all three word terms  			if (sentence.Count > 1)  				termsInSentencesForTerm += sentence.Count - 1;  			//all two word terms  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<List<KeyTerm>> paragraph in paragraphs) {  	foreach (List<KeyTerm> sentence in paragraph) {  		bool found = false;  		//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  		if (term.IndexOf (" ") > -1) {  			string[] termWords = term.Split (' ');  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (termWords.Length == 2 && i > 2) {  					KeyTerm t1 = sentence [i - 1];  					if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  						found = true;  						break;  					}  				}  				else if (termWords.Length == 3 && i > 3) {  					KeyTerm t1 = sentence [i - 1];  					KeyTerm t2 = sentence [i - 2];  					if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  						found = true;  						break;  					}  				}  			}  		}  		else {  			for (int i = 0; i < sentence.Count; i++) {  				KeyTerm t = sentence [i];  				if (t.Stem == term) {  					found = true;  					break;  				}  			}  		}  		if (found) {  			//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  			termsInSentencesForTerm += sentence.Count;  			if (sentence.Count > 2)  				termsInSentencesForTerm += sentence.Count - 2;  			//all three word terms  			if (sentence.Count > 1)  				termsInSentencesForTerm += sentence.Count - 1;  			//all two word terms  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<KeyTerm> sentence in paragraph) {  	bool found = false;  	//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  	if (term.IndexOf (" ") > -1) {  		string[] termWords = term.Split (' ');  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (termWords.Length == 2 && i > 2) {  				KeyTerm t1 = sentence [i - 1];  				if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  					found = true;  					break;  				}  			}  			else if (termWords.Length == 3 && i > 3) {  				KeyTerm t1 = sentence [i - 1];  				KeyTerm t2 = sentence [i - 2];  				if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  					found = true;  					break;  				}  			}  		}  	}  	else {  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (t.Stem == term) {  				found = true;  				break;  			}  		}  	}  	if (found) {  		//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  		termsInSentencesForTerm += sentence.Count;  		if (sentence.Count > 2)  			termsInSentencesForTerm += sentence.Count - 2;  		//all three word terms  		if (sentence.Count > 1)  			termsInSentencesForTerm += sentence.Count - 1;  		//all two word terms  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<KeyTerm> sentence in paragraph) {  	bool found = false;  	//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  	if (term.IndexOf (" ") > -1) {  		string[] termWords = term.Split (' ');  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (termWords.Length == 2 && i > 2) {  				KeyTerm t1 = sentence [i - 1];  				if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  					found = true;  					break;  				}  			}  			else if (termWords.Length == 3 && i > 3) {  				KeyTerm t1 = sentence [i - 1];  				KeyTerm t2 = sentence [i - 2];  				if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  					found = true;  					break;  				}  			}  		}  	}  	else {  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (t.Stem == term) {  				found = true;  				break;  			}  		}  	}  	if (found) {  		//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  		termsInSentencesForTerm += sentence.Count;  		if (sentence.Count > 2)  			termsInSentencesForTerm += sentence.Count - 2;  		//all three word terms  		if (sentence.Count > 1)  			termsInSentencesForTerm += sentence.Count - 1;  		//all two word terms  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<KeyTerm> sentence in paragraph) {  	bool found = false;  	//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  	if (term.IndexOf (" ") > -1) {  		string[] termWords = term.Split (' ');  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (termWords.Length == 2 && i > 2) {  				KeyTerm t1 = sentence [i - 1];  				if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  					found = true;  					break;  				}  			}  			else if (termWords.Length == 3 && i > 3) {  				KeyTerm t1 = sentence [i - 1];  				KeyTerm t2 = sentence [i - 2];  				if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  					found = true;  					break;  				}  			}  		}  	}  	else {  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (t.Stem == term) {  				found = true;  				break;  			}  		}  	}  	if (found) {  		//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  		termsInSentencesForTerm += sentence.Count;  		if (sentence.Count > 2)  			termsInSentencesForTerm += sentence.Count - 2;  		//all three word terms  		if (sentence.Count > 1)  			termsInSentencesForTerm += sentence.Count - 1;  		//all two word terms  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<KeyTerm> sentence in paragraph) {  	bool found = false;  	//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  	if (term.IndexOf (" ") > -1) {  		string[] termWords = term.Split (' ');  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (termWords.Length == 2 && i > 2) {  				KeyTerm t1 = sentence [i - 1];  				if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  					found = true;  					break;  				}  			}  			else if (termWords.Length == 3 && i > 3) {  				KeyTerm t1 = sentence [i - 1];  				KeyTerm t2 = sentence [i - 2];  				if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  					found = true;  					break;  				}  			}  		}  	}  	else {  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (t.Stem == term) {  				found = true;  				break;  			}  		}  	}  	if (found) {  		//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  		termsInSentencesForTerm += sentence.Count;  		if (sentence.Count > 2)  			termsInSentencesForTerm += sentence.Count - 2;  		//all three word terms  		if (sentence.Count > 1)  			termsInSentencesForTerm += sentence.Count - 1;  		//all two word terms  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<KeyTerm> sentence in paragraph) {  	bool found = false;  	//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  	if (term.IndexOf (" ") > -1) {  		string[] termWords = term.Split (' ');  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (termWords.Length == 2 && i > 2) {  				KeyTerm t1 = sentence [i - 1];  				if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  					found = true;  					break;  				}  			}  			else if (termWords.Length == 3 && i > 3) {  				KeyTerm t1 = sentence [i - 1];  				KeyTerm t2 = sentence [i - 2];  				if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  					found = true;  					break;  				}  			}  		}  	}  	else {  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (t.Stem == term) {  				found = true;  				break;  			}  		}  	}  	if (found) {  		//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  		termsInSentencesForTerm += sentence.Count;  		if (sentence.Count > 2)  			termsInSentencesForTerm += sentence.Count - 2;  		//all three word terms  		if (sentence.Count > 1)  			termsInSentencesForTerm += sentence.Count - 1;  		//all two word terms  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<KeyTerm> sentence in paragraph) {  	bool found = false;  	//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  	if (term.IndexOf (" ") > -1) {  		string[] termWords = term.Split (' ');  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (termWords.Length == 2 && i > 2) {  				KeyTerm t1 = sentence [i - 1];  				if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  					found = true;  					break;  				}  			}  			else if (termWords.Length == 3 && i > 3) {  				KeyTerm t1 = sentence [i - 1];  				KeyTerm t2 = sentence [i - 2];  				if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  					found = true;  					break;  				}  			}  		}  	}  	else {  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (t.Stem == term) {  				found = true;  				break;  			}  		}  	}  	if (found) {  		//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  		termsInSentencesForTerm += sentence.Count;  		if (sentence.Count > 2)  			termsInSentencesForTerm += sentence.Count - 2;  		//all three word terms  		if (sentence.Count > 1)  			termsInSentencesForTerm += sentence.Count - 1;  		//all two word terms  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<KeyTerm> sentence in paragraph) {  	bool found = false;  	//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  	if (term.IndexOf (" ") > -1) {  		string[] termWords = term.Split (' ');  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (termWords.Length == 2 && i > 2) {  				KeyTerm t1 = sentence [i - 1];  				if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  					found = true;  					break;  				}  			}  			else if (termWords.Length == 3 && i > 3) {  				KeyTerm t1 = sentence [i - 1];  				KeyTerm t2 = sentence [i - 2];  				if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  					found = true;  					break;  				}  			}  		}  	}  	else {  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (t.Stem == term) {  				found = true;  				break;  			}  		}  	}  	if (found) {  		//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  		termsInSentencesForTerm += sentence.Count;  		if (sentence.Count > 2)  			termsInSentencesForTerm += sentence.Count - 2;  		//all three word terms  		if (sentence.Count > 1)  			termsInSentencesForTerm += sentence.Count - 1;  		//all two word terms  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: foreach (List<KeyTerm> sentence in paragraph) {  	bool found = false;  	//if term appears in this sentence' count the terms (words + 2 and 3 word terms)  	if (term.IndexOf (" ") > -1) {  		string[] termWords = term.Split (' ');  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (termWords.Length == 2 && i > 2) {  				KeyTerm t1 = sentence [i - 1];  				if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  					found = true;  					break;  				}  			}  			else if (termWords.Length == 3 && i > 3) {  				KeyTerm t1 = sentence [i - 1];  				KeyTerm t2 = sentence [i - 2];  				if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  					found = true;  					break;  				}  			}  		}  	}  	else {  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (t.Stem == term) {  				found = true;  				break;  			}  		}  	}  	if (found) {  		//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  		termsInSentencesForTerm += sentence.Count;  		if (sentence.Count > 2)  			termsInSentencesForTerm += sentence.Count - 2;  		//all three word terms  		if (sentence.Count > 1)  			termsInSentencesForTerm += sentence.Count - 1;  		//all two word terms  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (term.IndexOf (" ") > -1) {  	string[] termWords = term.Split (' ');  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (termWords.Length == 2 && i > 2) {  			KeyTerm t1 = sentence [i - 1];  			if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  				found = true;  				break;  			}  		}  		else if (termWords.Length == 3 && i > 3) {  			KeyTerm t1 = sentence [i - 1];  			KeyTerm t2 = sentence [i - 2];  			if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  				found = true;  				break;  			}  		}  	}  }  else {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (t.Stem == term) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (termWords.Length == 2 && i > 2) {  		KeyTerm t1 = sentence [i - 1];  		if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  			found = true;  			break;  		}  	}  	else if (termWords.Length == 3 && i > 3) {  		KeyTerm t1 = sentence [i - 1];  		KeyTerm t2 = sentence [i - 2];  		if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  			found = true;  			break;  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords.Length == 2 && i > 2) {  	KeyTerm t1 = sentence [i - 1];  	if (termWords [0] == t1.Stem && termWords [1] == t.Stem) {  		found = true;  		break;  	}  }  else if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords.Length == 3 && i > 3) {  	KeyTerm t1 = sentence [i - 1];  	KeyTerm t2 = sentence [i - 2];  	if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  		found = true;  		break;  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (termWords [0] == t2.Stem && termWords [1] == t1.Stem && termWords [2] == t.Stem) {  	found = true;  	break;  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (found) {  	//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  	termsInSentencesForTerm += sentence.Count;  	if (sentence.Count > 2)  		termsInSentencesForTerm += sentence.Count - 2;  	//all three word terms  	if (sentence.Count > 1)  		termsInSentencesForTerm += sentence.Count - 1;  	//all two word terms  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (found) {  	//now get terms count (words + 2 and 3 word terms) and increment termsInSentencesForTerm  	termsInSentencesForTerm += sentence.Count;  	if (sentence.Count > 2)  		termsInSentencesForTerm += sentence.Count - 2;  	//all three word terms  	if (sentence.Count > 1)  		termsInSentencesForTerm += sentence.Count - 1;  	//all two word terms  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (sentence.Count > 2)  	termsInSentencesForTerm += sentence.Count - 2;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: if (sentence.Count > 2)  	termsInSentencesForTerm += sentence.Count - 2;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,FillTermPgNwCollections,The following statement contains a magic number: termsInSentencesForTerm += sentence.Count - 2;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,SortTermsIntoProbabilities,The following statement contains a magic number: if (toptenCount > 30)  	toptenCount = 30;  else if (toptenCount < 10)  	toptenCount = 5;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,SortTermsIntoProbabilities,The following statement contains a magic number: if (toptenCount > 30)  	toptenCount = 30;  else if (toptenCount < 10)  	toptenCount = 5;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,SortTermsIntoProbabilities,The following statement contains a magic number: if (toptenCount > 30)  	toptenCount = 30;  else if (toptenCount < 10)  	toptenCount = 5;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,SortTermsIntoProbabilities,The following statement contains a magic number: if (toptenCount > 30)  	toptenCount = 30;  else if (toptenCount < 10)  	toptenCount = 5;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,SortTermsIntoProbabilities,The following statement contains a magic number: toptenCount = 30;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,SortTermsIntoProbabilities,The following statement contains a magic number: if (toptenCount < 10)  	toptenCount = 5;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,SortTermsIntoProbabilities,The following statement contains a magic number: if (toptenCount < 10)  	toptenCount = 5;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,SortTermsIntoProbabilities,The following statement contains a magic number: toptenCount = 5;  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,AddMultiWordTerms,The following statement contains a magic number: foreach (List<List<KeyTerm>> paragraph in paragraphs) {  	foreach (List<KeyTerm> sentence in paragraph) {  		for (int i = 0; i < sentence.Count; i++) {  			KeyTerm t = sentence [i];  			if (i > 0)//we can have a two word phrase  			 {  				KeyTerm tm1 = sentence [i - 1];  				string term = tm1.Stem + " " + t.Stem;  				this.AddTerm (term);  			}  			if (i > 1)//we can have a three word phras  			 {  				KeyTerm tm1 = sentence [i - 1];  				KeyTerm tm2 = sentence [i - 2];  				string term = tm2.Stem + " " + tm1.Stem + " " + t.Stem;  				this.AddTerm (term);  			}  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,AddMultiWordTerms,The following statement contains a magic number: foreach (List<KeyTerm> sentence in paragraph) {  	for (int i = 0; i < sentence.Count; i++) {  		KeyTerm t = sentence [i];  		if (i > 0)//we can have a two word phrase  		 {  			KeyTerm tm1 = sentence [i - 1];  			string term = tm1.Stem + " " + t.Stem;  			this.AddTerm (term);  		}  		if (i > 1)//we can have a three word phras  		 {  			KeyTerm tm1 = sentence [i - 1];  			KeyTerm tm2 = sentence [i - 2];  			string term = tm2.Stem + " " + tm1.Stem + " " + t.Stem;  			this.AddTerm (term);  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,AddMultiWordTerms,The following statement contains a magic number: for (int i = 0; i < sentence.Count; i++) {  	KeyTerm t = sentence [i];  	if (i > 0)//we can have a two word phrase  	 {  		KeyTerm tm1 = sentence [i - 1];  		string term = tm1.Stem + " " + t.Stem;  		this.AddTerm (term);  	}  	if (i > 1)//we can have a three word phras  	 {  		KeyTerm tm1 = sentence [i - 1];  		KeyTerm tm2 = sentence [i - 2];  		string term = tm2.Stem + " " + tm1.Stem + " " + t.Stem;  		this.AddTerm (term);  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,AddMultiWordTerms,The following statement contains a magic number: if (i > 1)//we can have a three word phras   {  	KeyTerm tm1 = sentence [i - 1];  	KeyTerm tm2 = sentence [i - 2];  	string term = tm2.Stem + " " + tm1.Stem + " " + t.Stem;  	this.AddTerm (term);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: foreach (string rawpara in rawparas) {  	if (rawpara.Trim (trim).Length > 2)//ignore empty paragraphs  	 {  		List<List<KeyTerm>> sentlist = new List<List<KeyTerm>> ();  		//string[] sents = rawpara.Split(endsent);  		MatchCollection mcsent = sentdiv.Matches (rawpara);  		string[] sents = new string[mcsent.Count];  		int i = 0;  		foreach (Match ms in mcsent) {  			sents [i] = ms.Value;  			i++;  		}  		foreach (string s in sents) {  			if (s.Trim (trim).Length > 2) {  				//look for title case phrase and add to titles collection???  				string fxs = ProcessSpecialCase (s);  				//add individual words from this sentence  				List<KeyTerm> words = new List<KeyTerm> ();  				//MatchCollection mc = wordreg.Matches(fxs);  				//foreach (Match m in mc)  				string[] ws = fxs.Split (' ');  				foreach (string word in ws) {  					//string word = m.Value.Trim(trim);  					// string word = m.Value;  					if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  					 {  						string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  						//only stem if more than 2 characters  						KeyTerm term = new KeyTerm (word' stem);  						if (stems.ContainsKey (stem)) {  							if (stems [stem].ContainsKey (word))  								stems [stem] [word]++;  							else  								stems [stem].Add (word' 1);  						}  						else {  							stems.Add (stem' new Dictionary<string' int> ());  							stems [stem].Add (word' 1);  						}  						this.AddTerm (stem);  						words.Add (term);  					}  				}  				if (words.Count > 0)//only add if we have words in the sentence  				 {  					sentlist.Add (words);  					sentenceCount++;  					//increment total sentence count to be used later  				}  			}  		}  		if (sentlist.Count > 0)//only add paragraph if there are sentences  		 {  			paragraphs.Add (sentlist);  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: foreach (string rawpara in rawparas) {  	if (rawpara.Trim (trim).Length > 2)//ignore empty paragraphs  	 {  		List<List<KeyTerm>> sentlist = new List<List<KeyTerm>> ();  		//string[] sents = rawpara.Split(endsent);  		MatchCollection mcsent = sentdiv.Matches (rawpara);  		string[] sents = new string[mcsent.Count];  		int i = 0;  		foreach (Match ms in mcsent) {  			sents [i] = ms.Value;  			i++;  		}  		foreach (string s in sents) {  			if (s.Trim (trim).Length > 2) {  				//look for title case phrase and add to titles collection???  				string fxs = ProcessSpecialCase (s);  				//add individual words from this sentence  				List<KeyTerm> words = new List<KeyTerm> ();  				//MatchCollection mc = wordreg.Matches(fxs);  				//foreach (Match m in mc)  				string[] ws = fxs.Split (' ');  				foreach (string word in ws) {  					//string word = m.Value.Trim(trim);  					// string word = m.Value;  					if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  					 {  						string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  						//only stem if more than 2 characters  						KeyTerm term = new KeyTerm (word' stem);  						if (stems.ContainsKey (stem)) {  							if (stems [stem].ContainsKey (word))  								stems [stem] [word]++;  							else  								stems [stem].Add (word' 1);  						}  						else {  							stems.Add (stem' new Dictionary<string' int> ());  							stems [stem].Add (word' 1);  						}  						this.AddTerm (stem);  						words.Add (term);  					}  				}  				if (words.Count > 0)//only add if we have words in the sentence  				 {  					sentlist.Add (words);  					sentenceCount++;  					//increment total sentence count to be used later  				}  			}  		}  		if (sentlist.Count > 0)//only add paragraph if there are sentences  		 {  			paragraphs.Add (sentlist);  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: foreach (string rawpara in rawparas) {  	if (rawpara.Trim (trim).Length > 2)//ignore empty paragraphs  	 {  		List<List<KeyTerm>> sentlist = new List<List<KeyTerm>> ();  		//string[] sents = rawpara.Split(endsent);  		MatchCollection mcsent = sentdiv.Matches (rawpara);  		string[] sents = new string[mcsent.Count];  		int i = 0;  		foreach (Match ms in mcsent) {  			sents [i] = ms.Value;  			i++;  		}  		foreach (string s in sents) {  			if (s.Trim (trim).Length > 2) {  				//look for title case phrase and add to titles collection???  				string fxs = ProcessSpecialCase (s);  				//add individual words from this sentence  				List<KeyTerm> words = new List<KeyTerm> ();  				//MatchCollection mc = wordreg.Matches(fxs);  				//foreach (Match m in mc)  				string[] ws = fxs.Split (' ');  				foreach (string word in ws) {  					//string word = m.Value.Trim(trim);  					// string word = m.Value;  					if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  					 {  						string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  						//only stem if more than 2 characters  						KeyTerm term = new KeyTerm (word' stem);  						if (stems.ContainsKey (stem)) {  							if (stems [stem].ContainsKey (word))  								stems [stem] [word]++;  							else  								stems [stem].Add (word' 1);  						}  						else {  							stems.Add (stem' new Dictionary<string' int> ());  							stems [stem].Add (word' 1);  						}  						this.AddTerm (stem);  						words.Add (term);  					}  				}  				if (words.Count > 0)//only add if we have words in the sentence  				 {  					sentlist.Add (words);  					sentenceCount++;  					//increment total sentence count to be used later  				}  			}  		}  		if (sentlist.Count > 0)//only add paragraph if there are sentences  		 {  			paragraphs.Add (sentlist);  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: foreach (string rawpara in rawparas) {  	if (rawpara.Trim (trim).Length > 2)//ignore empty paragraphs  	 {  		List<List<KeyTerm>> sentlist = new List<List<KeyTerm>> ();  		//string[] sents = rawpara.Split(endsent);  		MatchCollection mcsent = sentdiv.Matches (rawpara);  		string[] sents = new string[mcsent.Count];  		int i = 0;  		foreach (Match ms in mcsent) {  			sents [i] = ms.Value;  			i++;  		}  		foreach (string s in sents) {  			if (s.Trim (trim).Length > 2) {  				//look for title case phrase and add to titles collection???  				string fxs = ProcessSpecialCase (s);  				//add individual words from this sentence  				List<KeyTerm> words = new List<KeyTerm> ();  				//MatchCollection mc = wordreg.Matches(fxs);  				//foreach (Match m in mc)  				string[] ws = fxs.Split (' ');  				foreach (string word in ws) {  					//string word = m.Value.Trim(trim);  					// string word = m.Value;  					if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  					 {  						string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  						//only stem if more than 2 characters  						KeyTerm term = new KeyTerm (word' stem);  						if (stems.ContainsKey (stem)) {  							if (stems [stem].ContainsKey (word))  								stems [stem] [word]++;  							else  								stems [stem].Add (word' 1);  						}  						else {  							stems.Add (stem' new Dictionary<string' int> ());  							stems [stem].Add (word' 1);  						}  						this.AddTerm (stem);  						words.Add (term);  					}  				}  				if (words.Count > 0)//only add if we have words in the sentence  				 {  					sentlist.Add (words);  					sentenceCount++;  					//increment total sentence count to be used later  				}  			}  		}  		if (sentlist.Count > 0)//only add paragraph if there are sentences  		 {  			paragraphs.Add (sentlist);  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: if (rawpara.Trim (trim).Length > 2)//ignore empty paragraphs   {  	List<List<KeyTerm>> sentlist = new List<List<KeyTerm>> ();  	//string[] sents = rawpara.Split(endsent);  	MatchCollection mcsent = sentdiv.Matches (rawpara);  	string[] sents = new string[mcsent.Count];  	int i = 0;  	foreach (Match ms in mcsent) {  		sents [i] = ms.Value;  		i++;  	}  	foreach (string s in sents) {  		if (s.Trim (trim).Length > 2) {  			//look for title case phrase and add to titles collection???  			string fxs = ProcessSpecialCase (s);  			//add individual words from this sentence  			List<KeyTerm> words = new List<KeyTerm> ();  			//MatchCollection mc = wordreg.Matches(fxs);  			//foreach (Match m in mc)  			string[] ws = fxs.Split (' ');  			foreach (string word in ws) {  				//string word = m.Value.Trim(trim);  				// string word = m.Value;  				if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  				 {  					string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  					//only stem if more than 2 characters  					KeyTerm term = new KeyTerm (word' stem);  					if (stems.ContainsKey (stem)) {  						if (stems [stem].ContainsKey (word))  							stems [stem] [word]++;  						else  							stems [stem].Add (word' 1);  					}  					else {  						stems.Add (stem' new Dictionary<string' int> ());  						stems [stem].Add (word' 1);  					}  					this.AddTerm (stem);  					words.Add (term);  				}  			}  			if (words.Count > 0)//only add if we have words in the sentence  			 {  				sentlist.Add (words);  				sentenceCount++;  				//increment total sentence count to be used later  			}  		}  	}  	if (sentlist.Count > 0)//only add paragraph if there are sentences  	 {  		paragraphs.Add (sentlist);  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: if (rawpara.Trim (trim).Length > 2)//ignore empty paragraphs   {  	List<List<KeyTerm>> sentlist = new List<List<KeyTerm>> ();  	//string[] sents = rawpara.Split(endsent);  	MatchCollection mcsent = sentdiv.Matches (rawpara);  	string[] sents = new string[mcsent.Count];  	int i = 0;  	foreach (Match ms in mcsent) {  		sents [i] = ms.Value;  		i++;  	}  	foreach (string s in sents) {  		if (s.Trim (trim).Length > 2) {  			//look for title case phrase and add to titles collection???  			string fxs = ProcessSpecialCase (s);  			//add individual words from this sentence  			List<KeyTerm> words = new List<KeyTerm> ();  			//MatchCollection mc = wordreg.Matches(fxs);  			//foreach (Match m in mc)  			string[] ws = fxs.Split (' ');  			foreach (string word in ws) {  				//string word = m.Value.Trim(trim);  				// string word = m.Value;  				if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  				 {  					string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  					//only stem if more than 2 characters  					KeyTerm term = new KeyTerm (word' stem);  					if (stems.ContainsKey (stem)) {  						if (stems [stem].ContainsKey (word))  							stems [stem] [word]++;  						else  							stems [stem].Add (word' 1);  					}  					else {  						stems.Add (stem' new Dictionary<string' int> ());  						stems [stem].Add (word' 1);  					}  					this.AddTerm (stem);  					words.Add (term);  				}  			}  			if (words.Count > 0)//only add if we have words in the sentence  			 {  				sentlist.Add (words);  				sentenceCount++;  				//increment total sentence count to be used later  			}  		}  	}  	if (sentlist.Count > 0)//only add paragraph if there are sentences  	 {  		paragraphs.Add (sentlist);  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: if (rawpara.Trim (trim).Length > 2)//ignore empty paragraphs   {  	List<List<KeyTerm>> sentlist = new List<List<KeyTerm>> ();  	//string[] sents = rawpara.Split(endsent);  	MatchCollection mcsent = sentdiv.Matches (rawpara);  	string[] sents = new string[mcsent.Count];  	int i = 0;  	foreach (Match ms in mcsent) {  		sents [i] = ms.Value;  		i++;  	}  	foreach (string s in sents) {  		if (s.Trim (trim).Length > 2) {  			//look for title case phrase and add to titles collection???  			string fxs = ProcessSpecialCase (s);  			//add individual words from this sentence  			List<KeyTerm> words = new List<KeyTerm> ();  			//MatchCollection mc = wordreg.Matches(fxs);  			//foreach (Match m in mc)  			string[] ws = fxs.Split (' ');  			foreach (string word in ws) {  				//string word = m.Value.Trim(trim);  				// string word = m.Value;  				if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  				 {  					string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  					//only stem if more than 2 characters  					KeyTerm term = new KeyTerm (word' stem);  					if (stems.ContainsKey (stem)) {  						if (stems [stem].ContainsKey (word))  							stems [stem] [word]++;  						else  							stems [stem].Add (word' 1);  					}  					else {  						stems.Add (stem' new Dictionary<string' int> ());  						stems [stem].Add (word' 1);  					}  					this.AddTerm (stem);  					words.Add (term);  				}  			}  			if (words.Count > 0)//only add if we have words in the sentence  			 {  				sentlist.Add (words);  				sentenceCount++;  				//increment total sentence count to be used later  			}  		}  	}  	if (sentlist.Count > 0)//only add paragraph if there are sentences  	 {  		paragraphs.Add (sentlist);  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: if (rawpara.Trim (trim).Length > 2)//ignore empty paragraphs   {  	List<List<KeyTerm>> sentlist = new List<List<KeyTerm>> ();  	//string[] sents = rawpara.Split(endsent);  	MatchCollection mcsent = sentdiv.Matches (rawpara);  	string[] sents = new string[mcsent.Count];  	int i = 0;  	foreach (Match ms in mcsent) {  		sents [i] = ms.Value;  		i++;  	}  	foreach (string s in sents) {  		if (s.Trim (trim).Length > 2) {  			//look for title case phrase and add to titles collection???  			string fxs = ProcessSpecialCase (s);  			//add individual words from this sentence  			List<KeyTerm> words = new List<KeyTerm> ();  			//MatchCollection mc = wordreg.Matches(fxs);  			//foreach (Match m in mc)  			string[] ws = fxs.Split (' ');  			foreach (string word in ws) {  				//string word = m.Value.Trim(trim);  				// string word = m.Value;  				if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  				 {  					string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  					//only stem if more than 2 characters  					KeyTerm term = new KeyTerm (word' stem);  					if (stems.ContainsKey (stem)) {  						if (stems [stem].ContainsKey (word))  							stems [stem] [word]++;  						else  							stems [stem].Add (word' 1);  					}  					else {  						stems.Add (stem' new Dictionary<string' int> ());  						stems [stem].Add (word' 1);  					}  					this.AddTerm (stem);  					words.Add (term);  				}  			}  			if (words.Count > 0)//only add if we have words in the sentence  			 {  				sentlist.Add (words);  				sentenceCount++;  				//increment total sentence count to be used later  			}  		}  	}  	if (sentlist.Count > 0)//only add paragraph if there are sentences  	 {  		paragraphs.Add (sentlist);  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: foreach (string s in sents) {  	if (s.Trim (trim).Length > 2) {  		//look for title case phrase and add to titles collection???  		string fxs = ProcessSpecialCase (s);  		//add individual words from this sentence  		List<KeyTerm> words = new List<KeyTerm> ();  		//MatchCollection mc = wordreg.Matches(fxs);  		//foreach (Match m in mc)  		string[] ws = fxs.Split (' ');  		foreach (string word in ws) {  			//string word = m.Value.Trim(trim);  			// string word = m.Value;  			if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  			 {  				string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  				//only stem if more than 2 characters  				KeyTerm term = new KeyTerm (word' stem);  				if (stems.ContainsKey (stem)) {  					if (stems [stem].ContainsKey (word))  						stems [stem] [word]++;  					else  						stems [stem].Add (word' 1);  				}  				else {  					stems.Add (stem' new Dictionary<string' int> ());  					stems [stem].Add (word' 1);  				}  				this.AddTerm (stem);  				words.Add (term);  			}  		}  		if (words.Count > 0)//only add if we have words in the sentence  		 {  			sentlist.Add (words);  			sentenceCount++;  			//increment total sentence count to be used later  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: foreach (string s in sents) {  	if (s.Trim (trim).Length > 2) {  		//look for title case phrase and add to titles collection???  		string fxs = ProcessSpecialCase (s);  		//add individual words from this sentence  		List<KeyTerm> words = new List<KeyTerm> ();  		//MatchCollection mc = wordreg.Matches(fxs);  		//foreach (Match m in mc)  		string[] ws = fxs.Split (' ');  		foreach (string word in ws) {  			//string word = m.Value.Trim(trim);  			// string word = m.Value;  			if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  			 {  				string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  				//only stem if more than 2 characters  				KeyTerm term = new KeyTerm (word' stem);  				if (stems.ContainsKey (stem)) {  					if (stems [stem].ContainsKey (word))  						stems [stem] [word]++;  					else  						stems [stem].Add (word' 1);  				}  				else {  					stems.Add (stem' new Dictionary<string' int> ());  					stems [stem].Add (word' 1);  				}  				this.AddTerm (stem);  				words.Add (term);  			}  		}  		if (words.Count > 0)//only add if we have words in the sentence  		 {  			sentlist.Add (words);  			sentenceCount++;  			//increment total sentence count to be used later  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: foreach (string s in sents) {  	if (s.Trim (trim).Length > 2) {  		//look for title case phrase and add to titles collection???  		string fxs = ProcessSpecialCase (s);  		//add individual words from this sentence  		List<KeyTerm> words = new List<KeyTerm> ();  		//MatchCollection mc = wordreg.Matches(fxs);  		//foreach (Match m in mc)  		string[] ws = fxs.Split (' ');  		foreach (string word in ws) {  			//string word = m.Value.Trim(trim);  			// string word = m.Value;  			if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  			 {  				string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  				//only stem if more than 2 characters  				KeyTerm term = new KeyTerm (word' stem);  				if (stems.ContainsKey (stem)) {  					if (stems [stem].ContainsKey (word))  						stems [stem] [word]++;  					else  						stems [stem].Add (word' 1);  				}  				else {  					stems.Add (stem' new Dictionary<string' int> ());  					stems [stem].Add (word' 1);  				}  				this.AddTerm (stem);  				words.Add (term);  			}  		}  		if (words.Count > 0)//only add if we have words in the sentence  		 {  			sentlist.Add (words);  			sentenceCount++;  			//increment total sentence count to be used later  		}  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: if (s.Trim (trim).Length > 2) {  	//look for title case phrase and add to titles collection???  	string fxs = ProcessSpecialCase (s);  	//add individual words from this sentence  	List<KeyTerm> words = new List<KeyTerm> ();  	//MatchCollection mc = wordreg.Matches(fxs);  	//foreach (Match m in mc)  	string[] ws = fxs.Split (' ');  	foreach (string word in ws) {  		//string word = m.Value.Trim(trim);  		// string word = m.Value;  		if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  		 {  			string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  			//only stem if more than 2 characters  			KeyTerm term = new KeyTerm (word' stem);  			if (stems.ContainsKey (stem)) {  				if (stems [stem].ContainsKey (word))  					stems [stem] [word]++;  				else  					stems [stem].Add (word' 1);  			}  			else {  				stems.Add (stem' new Dictionary<string' int> ());  				stems [stem].Add (word' 1);  			}  			this.AddTerm (stem);  			words.Add (term);  		}  	}  	if (words.Count > 0)//only add if we have words in the sentence  	 {  		sentlist.Add (words);  		sentenceCount++;  		//increment total sentence count to be used later  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: if (s.Trim (trim).Length > 2) {  	//look for title case phrase and add to titles collection???  	string fxs = ProcessSpecialCase (s);  	//add individual words from this sentence  	List<KeyTerm> words = new List<KeyTerm> ();  	//MatchCollection mc = wordreg.Matches(fxs);  	//foreach (Match m in mc)  	string[] ws = fxs.Split (' ');  	foreach (string word in ws) {  		//string word = m.Value.Trim(trim);  		// string word = m.Value;  		if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  		 {  			string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  			//only stem if more than 2 characters  			KeyTerm term = new KeyTerm (word' stem);  			if (stems.ContainsKey (stem)) {  				if (stems [stem].ContainsKey (word))  					stems [stem] [word]++;  				else  					stems [stem].Add (word' 1);  			}  			else {  				stems.Add (stem' new Dictionary<string' int> ());  				stems [stem].Add (word' 1);  			}  			this.AddTerm (stem);  			words.Add (term);  		}  	}  	if (words.Count > 0)//only add if we have words in the sentence  	 {  		sentlist.Add (words);  		sentenceCount++;  		//increment total sentence count to be used later  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: if (s.Trim (trim).Length > 2) {  	//look for title case phrase and add to titles collection???  	string fxs = ProcessSpecialCase (s);  	//add individual words from this sentence  	List<KeyTerm> words = new List<KeyTerm> ();  	//MatchCollection mc = wordreg.Matches(fxs);  	//foreach (Match m in mc)  	string[] ws = fxs.Split (' ');  	foreach (string word in ws) {  		//string word = m.Value.Trim(trim);  		// string word = m.Value;  		if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  		 {  			string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  			//only stem if more than 2 characters  			KeyTerm term = new KeyTerm (word' stem);  			if (stems.ContainsKey (stem)) {  				if (stems [stem].ContainsKey (word))  					stems [stem] [word]++;  				else  					stems [stem].Add (word' 1);  			}  			else {  				stems.Add (stem' new Dictionary<string' int> ());  				stems [stem].Add (word' 1);  			}  			this.AddTerm (stem);  			words.Add (term);  		}  	}  	if (words.Count > 0)//only add if we have words in the sentence  	 {  		sentlist.Add (words);  		sentenceCount++;  		//increment total sentence count to be used later  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: foreach (string word in ws) {  	//string word = m.Value.Trim(trim);  	// string word = m.Value;  	if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  	 {  		string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  		//only stem if more than 2 characters  		KeyTerm term = new KeyTerm (word' stem);  		if (stems.ContainsKey (stem)) {  			if (stems [stem].ContainsKey (word))  				stems [stem] [word]++;  			else  				stems [stem].Add (word' 1);  		}  		else {  			stems.Add (stem' new Dictionary<string' int> ());  			stems [stem].Add (word' 1);  		}  		this.AddTerm (stem);  		words.Add (term);  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: foreach (string word in ws) {  	//string word = m.Value.Trim(trim);  	// string word = m.Value;  	if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored  	 {  		string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  		//only stem if more than 2 characters  		KeyTerm term = new KeyTerm (word' stem);  		if (stems.ContainsKey (stem)) {  			if (stems [stem].ContainsKey (word))  				stems [stem] [word]++;  			else  				stems [stem].Add (word' 1);  		}  		else {  			stems.Add (stem' new Dictionary<string' int> ());  			stems [stem].Add (word' 1);  		}  		this.AddTerm (stem);  		words.Add (term);  	}  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored   {  	string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  	//only stem if more than 2 characters  	KeyTerm term = new KeyTerm (word' stem);  	if (stems.ContainsKey (stem)) {  		if (stems [stem].ContainsKey (word))  			stems [stem] [word]++;  		else  			stems [stem].Add (word' 1);  	}  	else {  		stems.Add (stem' new Dictionary<string' int> ());  		stems [stem].Add (word' 1);  	}  	this.AddTerm (stem);  	words.Add (term);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,PrepareDenseParagraphSentences,The following statement contains a magic number: if (word.Length > 2 || WordIsUncommon (word))//all two and one letter words are ignored   {  	string stem = (word.Length > 2) ? stemmer.Porter.stemTerm (word) : word;  	//only stem if more than 2 characters  	KeyTerm term = new KeyTerm (word' stem);  	if (stems.ContainsKey (stem)) {  		if (stems [stem].ContainsKey (word))  			stems [stem] [word]++;  		else  			stems [stem].Add (word' 1);  	}  	else {  		stems.Add (stem' new Dictionary<string' int> ());  		stems [stem].Add (word' 1);  	}  	this.AddTerm (stem);  	words.Add (term);  }  
Magic Number,Library.Content_analizer,TermExtractor,C:\repos\peterkhoa_hdtl\Library\Content process\Term_Extractor.cs,WordIsUncommon,The following statement contains a magic number: if (word.Length < 2)  	return false;  
Magic Number,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The following statement contains a magic number: if (vi.Length < 10) {  	url = "http://www.youtube.com/api/timedtext?sparams=asr_langs%2Ccaps%2Cexpire%2Cv&asr_langs=en&caps=asr&hl=en&type=track&lang=en&name&kind&v=" + code;  	vi = enc.GetString (wc.DownloadData (url));  }  
Magic Number,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The following statement contains a magic number: try {  	int index20000 = output.IndexOf ('.'' 20000);  	if (index20000 > 0)  		output = output.Remove (index20000) + "\n<!--nextpage-->\n" + output.Substring (index20000);  }  catch (Exception ex) {  }  
Magic Number,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The following statement contains a magic number: try {  	int index40000 = output.IndexOf ('.'' 40000);  	if (index40000 > 0)  		output = output.Remove (index40000) + "\n<!--nextpage-->\n" + output.Substring (index40000);  }  catch (Exception ex) {  }  
Magic Number,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The following statement contains a magic number: try {  	int index60000 = output.IndexOf ('.'' 60000);  	if (index60000 > 0)  		output = output.Remove (index60000) + "\n<!--nextpage-->\n" + output.Substring (index60000);  }  catch (Exception ex) {  }  
Magic Number,YoutubeJson,_Default,C:\repos\peterkhoa_hdtl\Library\Content process\YoutubeJson\YoutubeJson\Default.aspx.cs,get,The following statement contains a magic number: try {  	int index80000 = output.IndexOf ('.'' 80000);  	if (index80000 > 0)  		output = output.Remove (index80000) + "\n<!--nextpage-->\n" + output.Substring (index80000);  }  catch (Exception ex) {  }  
Magic Number,Library.Ranking,WilsonScore,C:\repos\peterkhoa_hdtl\Library\Ranking\WilsonScore.cs,pnormaldist,The following statement contains a magic number: if (qn == 0.5)  	return 0.0;  
Magic Number,Library.Ranking,WilsonScore,C:\repos\peterkhoa_hdtl\Library\Ranking\WilsonScore.cs,pnormaldist,The following statement contains a magic number: if (qn > 0.5)  	w1 = 1.0 - w1;  
Magic Number,Library.Ranking,WilsonScore,C:\repos\peterkhoa_hdtl\Library\Ranking\WilsonScore.cs,pnormaldist,The following statement contains a magic number: for (; i < 11; i++)  	w1 += b [i] * Math.Pow (w3' i);  
Magic Number,Library.Ranking,WilsonScore,C:\repos\peterkhoa_hdtl\Library\Ranking\WilsonScore.cs,pnormaldist,The following statement contains a magic number: if (qn > 0.5)  	return Math.Sqrt (w1 * w3);  
Magic Number,Library.Ranking,WilsonScore,C:\repos\peterkhoa_hdtl\Library\Ranking\WilsonScore.cs,reddit_ranking,The following statement contains a magic number: return Math.Log10 (z) / Math.Log10 (3) + y * ts / (3600 * 12.5);  
Magic Number,Library.Ranking,WilsonScore,C:\repos\peterkhoa_hdtl\Library\Ranking\WilsonScore.cs,reddit_ranking,The following statement contains a magic number: return Math.Log10 (z) / Math.Log10 (3) + y * ts / (3600 * 12.5);  
Magic Number,Library.Ranking,WilsonScore,C:\repos\peterkhoa_hdtl\Library\Ranking\WilsonScore.cs,reddit_ranking,The following statement contains a magic number: return Math.Log10 (z) / Math.Log10 (3) + y * ts / (3600 * 12.5);  
Magic Number,Library.Ranking,WilsonScore,C:\repos\peterkhoa_hdtl\Library\Ranking\WilsonScore.cs,ranking_score,The following statement contains a magic number: return (phat + z * z / (2 * total_rate) - z * Math.Sqrt ((phat * (1 - phat) + z * z / (4 * total_rate)) / total_rate)) / (1 + z * z / total_rate);  
Magic Number,Library.Ranking,WilsonScore,C:\repos\peterkhoa_hdtl\Library\Ranking\WilsonScore.cs,ranking_score,The following statement contains a magic number: return (phat + z * z / (2 * total_rate) - z * Math.Sqrt ((phat * (1 - phat) + z * z / (4 * total_rate)) / total_rate)) / (1 + z * z / total_rate);  
Missing Default,Library.Content_analizer,PorterStemmer,C:\repos\peterkhoa_hdtl\Library\Content process\Stemmer.cs,step4,The following switch statement is missing a default case: switch (b [k]) {  case 'e':  	if (ends ("icate")) {  		r ("ic");  		break;  	}  	if (ends ("ative")) {  		r ("");  		break;  	}  	if (ends ("alize")) {  		r ("al");  		break;  	}  	break;  case 'i':  	if (ends ("iciti")) {  		r ("ic");  		break;  	}  	break;  case 'l':  	if (ends ("ical")) {  		r ("ic");  		break;  	}  	if (ends ("ful")) {  		r ("");  		break;  	}  	break;  case 's':  	if (ends ("ness")) {  		r ("");  		break;  	}  	break;  }  
