Implementation smell,Namespace,Class,File,Method,Description
Long Method,fastJSON,deserializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,ParseDictionary,The method has 125 lines of code.
Long Method,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The method has 103 lines of code.
Complex Method,fastJSON,Formatter,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Formatter.cs,PrettyPrint,Cyclomatic complexity of the method is 11
Complex Method,fastJSON,JSONSerializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteValue,Cyclomatic complexity of the method is 23
Complex Method,fastJSON,JSONSerializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteObject,Cyclomatic complexity of the method is 18
Complex Method,fastJSON,JSONSerializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteString,Cyclomatic complexity of the method is 15
Complex Method,fastJSON,deserializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,ToObject,Cyclomatic complexity of the method is 15
Complex Method,fastJSON,deserializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,ChangeType,Cyclomatic complexity of the method is 17
Complex Method,fastJSON,deserializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,RootDictionary,Cyclomatic complexity of the method is 10
Complex Method,fastJSON,deserializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,ParseDictionary,Cyclomatic complexity of the method is 40
Complex Method,fastJSON,deserializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateStringKeyDictionary,Cyclomatic complexity of the method is 8
Complex Method,fastJSON,deserializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDictionary,Cyclomatic complexity of the method is 10
Complex Method,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseString,Cyclomatic complexity of the method is 21
Complex Method,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,Cyclomatic complexity of the method is 16
Complex Method,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,Getproperties,Cyclomatic complexity of the method is 9
Complex Method,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,CreateMyProp,Cyclomatic complexity of the method is 17
Complex Method,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,CreateSetMethod,Cyclomatic complexity of the method is 8
Complex Method,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetters,Cyclomatic complexity of the method is 18
Long Identifier,fastJSON,JSONParameters,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,,The length of the parameter OverrideObjectHashCodeChecking is 30.
Long Statement,fastJSON,JSON,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,FillObject,The length of the statement  "            Dictionary<string' object> ht = new JsonParser(json' Parameters.AllowNonQuotedKeys).Decode() as Dictionary<string' object>; " is 123.
Long Statement,fastJSON,deserializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,ParseDictionary,The length of the statement  "                            case myPropInfoType.StringKeyDictionary: oset = CreateStringKeyDictionary((Dictionary<string' object>)v' pi.pt' pi.GenericTypes' globaltypes); break; " is 149.
Long Statement,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetterBackingField,The length of the statement  "            // Restrict operation to auto properties to avoid risking errors if a getter does not contain exactly one field read instruction (such as with calculated properties). " is 166.
Long Statement,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetterBackingField,The length of the statement  "                if (!(TryGetOpCode(code' out var opCode) || pos < byteCode.Length && TryGetOpCode((short)(code * 0x100 + byteCode[pos++])' out opCode))) " is 136.
Long Statement,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetterBackingField,The length of the statement  "                    return getMethod.Module.ResolveMember(BitConverter.ToInt32(byteCode' pos)' getMethod.DeclaringType?.GetGenericArguments()' null) as FieldInfo; " is 142.
Long Statement,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetterBackingField,The length of the statement  "                // Otherwise' set the current position to the start of the next instruction' if any (we need to know how much bytes are used by operands). " is 138.
Long Statement,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,CreateSetMethod,The length of the statement  "            DynamicMethod setter = new DynamicMethod("_csm"' typeof(object)' arguments' true);// !setMethod.IsPublic); // fix: skipverify " is 125.
Long Statement,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetters,The length of the statement  "                    getters.Add(new Getters { Getter = g' Name = p.Name' lcName = p.Name.ToLowerInvariant()' memberName = mName' ReadOnly = read_only }); " is 133.
Long Statement,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetters,The length of the statement  "                        getters.Add(new Getters { Getter = g' Name = f.Name' lcName = f.Name.ToLowerInvariant()' memberName = mName' ReadOnly = read_only }); " is 133.
Complex Conditional,fastJSON,JSONSerializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteValue,The conditional expression  "obj is int || obj is long ||                  obj is decimal ||                  obj is byte || obj is short ||                  obj is sbyte || obj is ushort ||                  obj is uint || obj is ulong"  is complex.
Complex Conditional,fastJSON,JSONSerializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteValue,The conditional expression  "_params.KVStyleStringDictionary == false && obj is IDictionary &&                  obj.GetType().IsGenericType && Reflection.Instance.GetGenericArguments(obj.GetType())[0] == typeof(string)"  is complex.
Complex Conditional,fastJSON,JSONSerializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteString,The conditional expression  "c >= ' ' && c < 128 && c != '\"' && c != '\\'"  is complex.
Complex Conditional,fastJSON,JSONSerializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteString,The conditional expression  "c != '\t' && c != '\n' && c != '\r' && c != '\"' && c != '\\' && c!='\0'"  is complex.
Complex Conditional,fastJSON,deserializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,ParseDictionary,The conditional expression  "(pi.IsClass || pi.IsStruct || pi.IsInterface) && v is Dictionary<string' object>"  is complex.
Complex Conditional,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseString,The conditional expression  "c == '"' || (allownonquotedkey && instr == false && (c == ':' || c == ' ' || c == '\t'))"  is complex.
Complex Conditional,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseNumber,The conditional expression  "(c >= '0' && c <= '9') || c == '.' || c == '-' || c == '+' || c == 'e' || c == 'E'"  is complex.
Complex Conditional,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "c != ' ' && c != '\t' && c != '\n' && c != '\r'"  is complex.
Complex Conditional,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "len - index >= 4 &&                              p[index + 0] == 'a' &&                              p[index + 1] == 'l' &&                              p[index + 2] == 's' &&                              p[index + 3] == 'e'"  is complex.
Complex Conditional,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "len - index >= 3 &&                              p[index + 0] == 'r' &&                              p[index + 1] == 'u' &&                              p[index + 2] == 'e'"  is complex.
Complex Conditional,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "len - index >= 3 &&                              p[index + 0] == 'u' &&                              p[index + 1] == 'l' &&                              p[index + 2] == 'l'"  is complex.
Complex Conditional,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,CreateMyProp,The conditional expression  "t.IsValueType && !t.IsPrimitive && !t.IsEnum && t != typeof(decimal)"  is complex.
Magic Number,fastJSON,JSONSerializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,JSONSerializer,The following statement contains a magic number: _cirobj = new Dictionary<object' int>(10' ReferenceEqualityComparer.Default);
Magic Number,fastJSON,JSONSerializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteString,The following statement contains a magic number: c >= ' ' && c < 128 && c != '\"' && c != '\\'
Magic Number,fastJSON,deserializer,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JSON.cs,deserializer,The following statement contains a magic number: _circobj = new Dictionary<object' int>(10' ReferenceEqualityComparer.Default);
Magic Number,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseObject,The following statement contains a magic number: Dictionary<string' object> table = new Dictionary<string' object>(10);
Magic Number,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseArray,The following statement contains a magic number: List<object> array = new List<object>(10);
Magic Number,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseNumber,The following statement contains a magic number: dec == false && index - startIndex < 20
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,UnicodeGetBytes,The following statement contains a magic number: int len = str.Length * 2;
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,UnicodeGetString,The following statement contains a magic number: str = new string(cptr' 0' buflen / 2);
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,FastCreateList,The following statement contains a magic number: int count = 10;
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,FastCreateList,The following statement contains a magic number: capacity > 10
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,CreateSetField,The following statement contains a magic number: Type[] arguments = new Type[2];
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetterBackingField,The following statement contains a magic number: pos += opCode.OperandType == OperandType.InlineNone                              ? 0                              : opCode.OperandType == OperandType.ShortInlineBrTarget ||                                opCode.OperandType == OperandType.ShortInlineI ||                                opCode.OperandType == OperandType.ShortInlineVar                                  ? 1                                  : opCode.OperandType == OperandType.InlineVar                                      ? 2                                      : opCode.OperandType == OperandType.InlineI8 ||                                        opCode.OperandType == OperandType.InlineR                                          ? 8                                          : opCode.OperandType == OperandType.InlineSwitch                                              ? 4 * (BitConverter.ToInt32(byteCode' pos) + 1)                                              : 4;
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetterBackingField,The following statement contains a magic number: pos += opCode.OperandType == OperandType.InlineNone                              ? 0                              : opCode.OperandType == OperandType.ShortInlineBrTarget ||                                opCode.OperandType == OperandType.ShortInlineI ||                                opCode.OperandType == OperandType.ShortInlineVar                                  ? 1                                  : opCode.OperandType == OperandType.InlineVar                                      ? 2                                      : opCode.OperandType == OperandType.InlineI8 ||                                        opCode.OperandType == OperandType.InlineR                                          ? 8                                          : opCode.OperandType == OperandType.InlineSwitch                                              ? 4 * (BitConverter.ToInt32(byteCode' pos) + 1)                                              : 4;
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetterBackingField,The following statement contains a magic number: pos += opCode.OperandType == OperandType.InlineNone                              ? 0                              : opCode.OperandType == OperandType.ShortInlineBrTarget ||                                opCode.OperandType == OperandType.ShortInlineI ||                                opCode.OperandType == OperandType.ShortInlineVar                                  ? 1                                  : opCode.OperandType == OperandType.InlineVar                                      ? 2                                      : opCode.OperandType == OperandType.InlineI8 ||                                        opCode.OperandType == OperandType.InlineR                                          ? 8                                          : opCode.OperandType == OperandType.InlineSwitch                                              ? 4 * (BitConverter.ToInt32(byteCode' pos) + 1)                                              : 4;
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetterBackingField,The following statement contains a magic number: pos += opCode.OperandType == OperandType.InlineNone                              ? 0                              : opCode.OperandType == OperandType.ShortInlineBrTarget ||                                opCode.OperandType == OperandType.ShortInlineI ||                                opCode.OperandType == OperandType.ShortInlineVar                                  ? 1                                  : opCode.OperandType == OperandType.InlineVar                                      ? 2                                      : opCode.OperandType == OperandType.InlineI8 ||                                        opCode.OperandType == OperandType.InlineR                                          ? 8                                          : opCode.OperandType == OperandType.InlineSwitch                                              ? 4 * (BitConverter.ToInt32(byteCode' pos) + 1)                                              : 4;
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,CreateSetMethod,The following statement contains a magic number: Type[] arguments = new Type[2];
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,ClearReflectionCache,The following statement contains a magic number: _tyname = new SafeDictionary<Type' string>(10);
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,ClearReflectionCache,The following statement contains a magic number: _typecache = new SafeDictionary<string' Type>(10);
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,ClearReflectionCache,The following statement contains a magic number: _constrcache = new SafeDictionary<Type' CreateObject>(10);
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,ClearReflectionCache,The following statement contains a magic number: _getterscache = new SafeDictionary<Type' Getters[]>(10);
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,ClearReflectionCache,The following statement contains a magic number: _propertycache = new SafeDictionary<string' Dictionary<string' myPropInfo>>(10);
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,ClearReflectionCache,The following statement contains a magic number: _genericTypes = new SafeDictionary<Type' Type[]>(10);
Magic Number,fastJSON,Reflection,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\Reflection.cs,ClearReflectionCache,The following statement contains a magic number: _genericTypeDef = new SafeDictionary<Type' Type>(10);
Missing Default,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(p))              {                  case Token.Number:                      return ParseNumber(p);                    case Token.String:                      return ParseString(p' val);                    case Token.Curly_Open:                      return ParseObject(p);                    case Token.Squared_Open:                      return ParseArray(p);                    case Token.True:                      ConsumeToken();                      return true;                    case Token.False:                      ConsumeToken();                      return false;                    case Token.Null:                      ConsumeToken();                      return null;              }
Missing Default,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseString,The following switch statement is missing a default case: switch (p[index++])                      {                          case '"':                              s.Append('"');                              break;                            case '\\':                              s.Append('\\');                              break;                            case '/':                              s.Append('/');                              break;                            case 'b':                              s.Append('\b');                              break;                            case 'f':                              s.Append('\f');                              break;                            case 'n':                              s.Append('\n');                              break;                            case 'r':                              s.Append('\r');                              break;                            case 't':                              s.Append('\t');                              break;                            case 'u':                              {                                  int remainingLength = l - index;                                  if (remainingLength < 4) break;                                    // parse the 32 bit hex into an integer codepoint                                  uint codePoint = ParseUnicode(p[index]' p[index + 1]' p[index + 2]' p[index + 3]);                                  s.Append((char)codePoint);                                    // skip 4 chars                                  index += 4;                              }                              break;                      }
Missing Default,fastJSON,JsonParser,D:\research\architectureSmells\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following switch statement is missing a default case: switch (c)                  {                      case '{':                          return Token.Curly_Open;                        case '}':                          return Token.Curly_Close;                        case '[':                          return Token.Squared_Open;                        case ']':                          return Token.Squared_Close;                        case ''':                          return Token.Comma;                        case '"':                          return Token.String;                        case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                      case '-':                      case '+':                      case '.':                          return Token.Number;                        case ':':                          return Token.Colon;                        case 'f':                          if (len - index >= 4 &&                              p[index + 0] == 'a' &&                              p[index + 1] == 'l' &&                              p[index + 2] == 's' &&                              p[index + 3] == 'e')                          {                              index += 4;                              return Token.False;                          }                          break;                        case 't':                          if (len - index >= 3 &&                              p[index + 0] == 'r' &&                              p[index + 1] == 'u' &&                              p[index + 2] == 'e')                          {                              index += 3;                              return Token.True;                          }                          break;                        case 'n':                          if (len - index >= 3 &&                              p[index + 0] == 'u' &&                              p[index + 1] == 'l' &&                              p[index + 2] == 'l')                          {                              index += 3;                              return Token.Null;                          }                          break;                  }
