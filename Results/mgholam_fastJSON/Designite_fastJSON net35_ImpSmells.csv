Implementation smell,Namespace,Class,File,Method,Description
Long Method,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,ParseDictionary,The method has 122 lines of code.
Complex Method,fastJSON,JSONSerializer,C:\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteObject,Cyclomatic complexity of the method is 9
Complex Method,fastJSON,JSONSerializer,C:\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteString,Cyclomatic complexity of the method is 8
Complex Method,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,ChangeType,Cyclomatic complexity of the method is 8
Complex Method,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,ParseDictionary,Cyclomatic complexity of the method is 21
Complex Method,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,ReadDataTable,Cyclomatic complexity of the method is 13
Complex Method,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseString,Cyclomatic complexity of the method is 10
Complex Method,fastJSON,Reflection,C:\repos\mgholam_fastJSON\fastJSON\Reflection.cs,GetGetters,Cyclomatic complexity of the method is 17
Long Parameter List,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The method has 9 parameters. Parameters: year' month' day' hour' min' sec' milli' extraTicks' offset
Long Statement,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,ParseDictionary,The length of the statement  "                            case myPropInfoType.StringKeyDictionary: oset = CreateStringKeyDictionary((Dictionary<string' object>)v' pi.pt' pi.GenericTypes' globaltypes); break; " is 149.
Long Statement,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDataset,The length of the statement  "                DatasetSchema ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null); " is 128.
Long Statement,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDataTable,The length of the statement  "                var ms = (DatasetSchema)this.ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null); " is 123.
Complex Conditional,fastJSON,JSONSerializer,C:\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteValue,The conditional expression  "obj is int || obj is long ||                  obj is decimal ||                  obj is byte || obj is short ||                  obj is sbyte || obj is ushort ||                  obj is uint || obj is ulong"  is complex.
Complex Conditional,fastJSON,JSONSerializer,C:\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteValue,The conditional expression  "_params.KVStyleStringDictionary == false && obj is IDictionary &&                  obj.GetType().IsGenericType && obj.GetType().GetGenericArguments()[0] == typeof(string)"  is complex.
Complex Conditional,fastJSON,JSONSerializer,C:\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteString,The conditional expression  "c >= ' ' && c < 128 && c != '\"' && c != '\\'"  is complex.
Complex Conditional,fastJSON,JSONSerializer,C:\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteString,The conditional expression  "c != '\t' && c != '\n' && c != '\r' && c != '\"' && c != '\\' && c!='\0'"  is complex.
Complex Conditional,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,ParseDictionary,The conditional expression  "(pi.IsClass || pi.IsStruct || pi.IsInterface) && v is Dictionary<string' object>"  is complex.
Complex Conditional,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseNumber,The conditional expression  "(c >= '0' && c <= '9') || c == '.' || c == '-' || c == '+' || c == 'e' || c == 'E'"  is complex.
Complex Conditional,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "c != ' ' && c != '\t' && c != '\n' && c != '\r'"  is complex.
Complex Conditional,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e'"  is complex.
Complex Conditional,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e'"  is complex.
Complex Conditional,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l'"  is complex.
Complex Conditional,fastJSON,Reflection,C:\repos\mgholam_fastJSON\fastJSON\Reflection.cs,CreateMyProp,The conditional expression  "t.IsValueType && !t.IsPrimitive && !t.IsEnum && t != typeof(decimal)"  is complex.
Magic Number,fastJSON,JSONSerializer,C:\repos\mgholam_fastJSON\fastJSON\JsonSerializer.cs,WriteString,The following statement contains a magic number: for (var index = 0; index < l; ++index)              {                  var c = s[index];                    if (_useEscapedUnicode)                  {                      if (c >= ' ' && c < 128 && c != '\"' && c != '\\')                      {                          if (runIndex == -1)                              runIndex = index;                            continue;                      }                  }                  else                  {                      if (c != '\t' && c != '\n' && c != '\r' && c != '\"' && c != '\\' && c!='\0')// && c != ':' && c!=''')                      {                          if (runIndex == -1)                              runIndex = index;                            continue;                      }                  }                    if (runIndex != -1)                  {                      _output.Append(s' runIndex' index - runIndex);                      runIndex = -1;                  }                    switch (c)                  {                      case '\t': _output.Append("\\t"); break;                      case '\r': _output.Append("\\r"); break;                      case '\n': _output.Append("\\n"); break;                      case '"':                      case '\\': _output.Append('\\'); _output.Append(c); break;                      case '\0': _output.Append("\\u0000"); break;                      default:                          if (_useEscapedUnicode)                          {                              _output.Append("\\u");                              _output.Append(((int)c).ToString("X4"' NumberFormatInfo.InvariantInfo));                          }                          else                              _output.Append(c);                            break;                  }              }
Magic Number,fastJSON,JSON,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateLong,The following statement contains a magic number: for (int x = 0; x < count; x++' index++)              {                  char cc = s[index];                    if (cc == '-')                      neg = true;                  else if (cc == '+')                      neg = false;                  else                  {                      num *= 10;                      num += (int)(cc - '0');                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: year = CreateInteger(value' 0' 4);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: month = CreateInteger(value' 5' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: month = CreateInteger(value' 5' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: day = CreateInteger(value' 8' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: day = CreateInteger(value' 8' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: hour = CreateInteger(value' 11' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: hour = CreateInteger(value' 11' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: min = CreateInteger(value' 14' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: min = CreateInteger(value' 14' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: sec = CreateInteger(value' 17' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: sec = CreateInteger(value' 17' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: int p = 20;
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')              {                  ms = CreateInteger(value' p' 3);                  p = 23;                    // handle 7 digit case                  if (value.Length > 25 && char.IsDigit(value[p]))                  {                      usTicks = CreateInteger(value' p' 4);                      p = 27;                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')              {                  ms = CreateInteger(value' p' 3);                  p = 23;                    // handle 7 digit case                  if (value.Length > 25 && char.IsDigit(value[p]))                  {                      usTicks = CreateInteger(value' p' 4);                      p = 27;                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')              {                  ms = CreateInteger(value' p' 3);                  p = 23;                    // handle 7 digit case                  if (value.Length > 25 && char.IsDigit(value[p]))                  {                      usTicks = CreateInteger(value' p' 4);                      p = 27;                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')              {                  ms = CreateInteger(value' p' 3);                  p = 23;                    // handle 7 digit case                  if (value.Length > 25 && char.IsDigit(value[p]))                  {                      usTicks = CreateInteger(value' p' 4);                      p = 27;                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')              {                  ms = CreateInteger(value' p' 3);                  p = 23;                    // handle 7 digit case                  if (value.Length > 25 && char.IsDigit(value[p]))                  {                      usTicks = CreateInteger(value' p' 4);                      p = 27;                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')              {                  ms = CreateInteger(value' p' 3);                  p = 23;                    // handle 7 digit case                  if (value.Length > 25 && char.IsDigit(value[p]))                  {                      usTicks = CreateInteger(value' p' 4);                      p = 27;                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')              {                  ms = CreateInteger(value' p' 3);                  p = 23;                    // handle 7 digit case                  if (value.Length > 25 && char.IsDigit(value[p]))                  {                      usTicks = CreateInteger(value' p' 4);                      p = 27;                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: th = CreateInteger(value' p + 1' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: tm = CreateInteger(value' p + 1 + 2 + 1' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTimeOffset,The following statement contains a magic number: tm = CreateInteger(value' p + 1 + 2 + 1' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateLong,The following statement contains a magic number: for (int x = 0; x < count; x++' index++)              {                  char cc = s[index];                    if (cc == '-')                      neg = true;                  else if (cc == '+')                      neg = false;                  else                  {                      num *= 10;                      num += (int)(cc - '0');                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateInteger,The following statement contains a magic number: for (int x = 0; x < count; x++' index++)              {                  char cc = s[index];                    if (cc == '-')                      neg = true;                  else if (cc == '+')                      neg = false;                  else                  {                      num *= 10;                      num += (int)(cc - '0');                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateGuid,The following statement contains a magic number: if (s.Length > 30)                  return new Guid(s);              else                  return new Guid(Convert.FromBase64String(s));
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: if (value.Length < 19)                  return DateTime.MinValue;
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: year = CreateInteger(value' 0' 4);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: month = CreateInteger(value' 5' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: month = CreateInteger(value' 5' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: day = CreateInteger(value' 8' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: day = CreateInteger(value' 8' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: hour = CreateInteger(value' 11' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: hour = CreateInteger(value' 11' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: min = CreateInteger(value' 14' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: min = CreateInteger(value' 14' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: sec = CreateInteger(value' 17' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: sec = CreateInteger(value' 17' 2);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')                  ms = CreateInteger(value' 20' 3);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')                  ms = CreateInteger(value' 20' 3);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')                  ms = CreateInteger(value' 20' 3);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: if (value.Length > 21 && value[19] == '.')                  ms = CreateInteger(value' 20' 3);
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDataset,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  ds.ReadXmlSchema(tr);              }              else              {                  DatasetSchema ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null);                  ds.DataSetName = ms.Name;                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      if (ds.Tables.Contains(ms.Info[i]) == false)                          ds.Tables.Add(ms.Info[i]);                      ds.Tables[ms.Info[i]].Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDataset,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  ds.ReadXmlSchema(tr);              }              else              {                  DatasetSchema ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null);                  ds.DataSetName = ms.Name;                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      if (ds.Tables.Contains(ms.Info[i]) == false)                          ds.Tables.Add(ms.Info[i]);                      ds.Tables[ms.Info[i]].Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,ReadDataTable,The following statement contains a magic number: foreach (List<object> row in rows)              {                  object[] v = new object[row.Count];                  row.CopyTo(v' 0);                  foreach (int i in guidcols)                  {                      string s = (string)v[i];                      if (s != null && s.Length < 36)                          v[i] = new Guid(Convert.FromBase64String(s));                  }                  foreach (int i in bytearraycol)                  {                      string s = (string)v[i];                      if (s != null)                          v[i] = Convert.FromBase64String(s);                  }                  if (_params.UseUTCDateTime)                  {                      foreach (int i in datecol)                      {                          string s = (string)v[i];                          if (s != null)                              v[i] = CreateDateTime(s);                      }                  }                  dt.Rows.Add(v);              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDataTable,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  dt.ReadXmlSchema(tr);              }              else              {                  var ms = (DatasetSchema)this.ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null);                  dt.TableName = ms.Info[0];                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      dt.Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,fastJSON,deserializer,C:\repos\mgholam_fastJSON\fastJSON\JSON.cs,CreateDataTable,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  dt.ReadXmlSchema(tr);              }              else              {                  var ms = (DatasetSchema)this.ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)' null);                  dt.TableName = ms.Info[0];                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      dt.Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: {                  while (index < l)                  {                      var c = p[index++];                        if (c == '"')                      {                          if (runIndex != -1)                          {                              if (s.Length == 0)                                  return json.Substring(runIndex' index - runIndex - 1);                                s.Append(json' runIndex' index - runIndex - 1);                          }                          return s.ToString();                      }                        if (c != '\\')                      {                          if (runIndex == -1)                              runIndex = index - 1;                            continue;                      }                        if (index == l) break;                        if (runIndex != -1)                      {                          s.Append(json' runIndex' index - runIndex - 1);                          runIndex = -1;                      }                        switch (p[index++])                      {                          case '"':                              s.Append('"');                              break;                            case '\\':                              s.Append('\\');                              break;                            case '/':                              s.Append('/');                              break;                            case 'b':                              s.Append('\b');                              break;                            case 'f':                              s.Append('\f');                              break;                            case 'n':                              s.Append('\n');                              break;                            case 'r':                              s.Append('\r');                              break;                            case 't':                              s.Append('\t');                              break;                            case 'u':                              {                                  int remainingLength = l - index;                                  if (remainingLength < 4) break;                                    // parse the 32 bit hex into an integer codepoint                                  uint codePoint = ParseUnicode(p[index]' p[index + 1]' p[index + 2]' p[index + 3]);                                  s.Append((char)codePoint);                                    // skip 4 chars                                  index += 4;                              }                              break;                      }                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: {                  while (index < l)                  {                      var c = p[index++];                        if (c == '"')                      {                          if (runIndex != -1)                          {                              if (s.Length == 0)                                  return json.Substring(runIndex' index - runIndex - 1);                                s.Append(json' runIndex' index - runIndex - 1);                          }                          return s.ToString();                      }                        if (c != '\\')                      {                          if (runIndex == -1)                              runIndex = index - 1;                            continue;                      }                        if (index == l) break;                        if (runIndex != -1)                      {                          s.Append(json' runIndex' index - runIndex - 1);                          runIndex = -1;                      }                        switch (p[index++])                      {                          case '"':                              s.Append('"');                              break;                            case '\\':                              s.Append('\\');                              break;                            case '/':                              s.Append('/');                              break;                            case 'b':                              s.Append('\b');                              break;                            case 'f':                              s.Append('\f');                              break;                            case 'n':                              s.Append('\n');                              break;                            case 'r':                              s.Append('\r');                              break;                            case 't':                              s.Append('\t');                              break;                            case 'u':                              {                                  int remainingLength = l - index;                                  if (remainingLength < 4) break;                                    // parse the 32 bit hex into an integer codepoint                                  uint codePoint = ParseUnicode(p[index]' p[index + 1]' p[index + 2]' p[index + 3]);                                  s.Append((char)codePoint);                                    // skip 4 chars                                  index += 4;                              }                              break;                      }                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: {                  while (index < l)                  {                      var c = p[index++];                        if (c == '"')                      {                          if (runIndex != -1)                          {                              if (s.Length == 0)                                  return json.Substring(runIndex' index - runIndex - 1);                                s.Append(json' runIndex' index - runIndex - 1);                          }                          return s.ToString();                      }                        if (c != '\\')                      {                          if (runIndex == -1)                              runIndex = index - 1;                            continue;                      }                        if (index == l) break;                        if (runIndex != -1)                      {                          s.Append(json' runIndex' index - runIndex - 1);                          runIndex = -1;                      }                        switch (p[index++])                      {                          case '"':                              s.Append('"');                              break;                            case '\\':                              s.Append('\\');                              break;                            case '/':                              s.Append('/');                              break;                            case 'b':                              s.Append('\b');                              break;                            case 'f':                              s.Append('\f');                              break;                            case 'n':                              s.Append('\n');                              break;                            case 'r':                              s.Append('\r');                              break;                            case 't':                              s.Append('\t');                              break;                            case 'u':                              {                                  int remainingLength = l - index;                                  if (remainingLength < 4) break;                                    // parse the 32 bit hex into an integer codepoint                                  uint codePoint = ParseUnicode(p[index]' p[index + 1]' p[index + 2]' p[index + 3]);                                  s.Append((char)codePoint);                                    // skip 4 chars                                  index += 4;                              }                              break;                      }                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: {                  while (index < l)                  {                      var c = p[index++];                        if (c == '"')                      {                          if (runIndex != -1)                          {                              if (s.Length == 0)                                  return json.Substring(runIndex' index - runIndex - 1);                                s.Append(json' runIndex' index - runIndex - 1);                          }                          return s.ToString();                      }                        if (c != '\\')                      {                          if (runIndex == -1)                              runIndex = index - 1;                            continue;                      }                        if (index == l) break;                        if (runIndex != -1)                      {                          s.Append(json' runIndex' index - runIndex - 1);                          runIndex = -1;                      }                        switch (p[index++])                      {                          case '"':                              s.Append('"');                              break;                            case '\\':                              s.Append('\\');                              break;                            case '/':                              s.Append('/');                              break;                            case 'b':                              s.Append('\b');                              break;                            case 'f':                              s.Append('\f');                              break;                            case 'n':                              s.Append('\n');                              break;                            case 'r':                              s.Append('\r');                              break;                            case 't':                              s.Append('\t');                              break;                            case 'u':                              {                                  int remainingLength = l - index;                                  if (remainingLength < 4) break;                                    // parse the 32 bit hex into an integer codepoint                                  uint codePoint = ParseUnicode(p[index]' p[index + 1]' p[index + 2]' p[index + 3]);                                  s.Append((char)codePoint);                                    // skip 4 chars                                  index += 4;                              }                              break;                      }                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= '0' && c1 <= '9')                  p1 = (uint)(c1 - '0') * multipliyer;              else if (c1 >= 'A' && c1 <= 'F')                  p1 = (uint)((c1 - 'A') + 10) * multipliyer;              else if (c1 >= 'a' && c1 <= 'f')                  p1 = (uint)((c1 - 'a') + 10) * multipliyer;
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= '0' && c1 <= '9')                  p1 = (uint)(c1 - '0') * multipliyer;              else if (c1 >= 'A' && c1 <= 'F')                  p1 = (uint)((c1 - 'A') + 10) * multipliyer;              else if (c1 >= 'a' && c1 <= 'f')                  p1 = (uint)((c1 - 'a') + 10) * multipliyer;
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,CreateLong,The following statement contains a magic number: foreach (char cc in s)              {                  if (cc == '-')                      neg = true;                  else if (cc == '+')                      neg = false;                  else                  {                      num *= 10;                      num += (int)(cc - '0');                  }              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseNumber,The following statement contains a magic number: if (index - startIndex < 20 && json[startIndex] != '-')                  return JSON.CreateLong(json' startIndex' index - startIndex);              else              {                  string s = json.Substring(startIndex' index - startIndex);                  //return s;                  return decimal.Parse(s' NumberFormatInfo.InvariantInfo);              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
Magic Number,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
Magic Number,fastJSON,Reflection,C:\repos\mgholam_fastJSON\fastJSON\Reflection.cs,CreateSetField,The following statement contains a magic number: Type[] arguments = new Type[2];
Magic Number,fastJSON,Reflection,C:\repos\mgholam_fastJSON\fastJSON\Reflection.cs,CreateSetMethod,The following statement contains a magic number: Type[] arguments = new Type[2];
Missing Default,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead())              {                  case Token.Number:                      return ParseNumber();                    case Token.String:                      return ParseString();                    case Token.Curly_Open:                      return ParseObject();                    case Token.Squared_Open:                      return ParseArray();                    case Token.True:                      ConsumeToken();                      return true;                    case Token.False:                      ConsumeToken();                      return false;                    case Token.Null:                      ConsumeToken();                      return null;              }
Missing Default,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,ParseString,The following switch statement is missing a default case: switch (p[index++])                      {                          case '"':                              s.Append('"');                              break;                            case '\\':                              s.Append('\\');                              break;                            case '/':                              s.Append('/');                              break;                            case 'b':                              s.Append('\b');                              break;                            case 'f':                              s.Append('\f');                              break;                            case 'n':                              s.Append('\n');                              break;                            case 'r':                              s.Append('\r');                              break;                            case 't':                              s.Append('\t');                              break;                            case 'u':                              {                                  int remainingLength = l - index;                                  if (remainingLength < 4) break;                                    // parse the 32 bit hex into an integer codepoint                                  uint codePoint = ParseUnicode(p[index]' p[index + 1]' p[index + 2]' p[index + 3]);                                  s.Append((char)codePoint);                                    // skip 4 chars                                  index += 4;                              }                              break;                      }
Missing Default,fastJSON,JsonParser,C:\repos\mgholam_fastJSON\fastJSON\JsonParser.cs,NextTokenCore,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;                    case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                  case '+':                  case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;              }
