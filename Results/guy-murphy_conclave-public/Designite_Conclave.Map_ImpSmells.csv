Implementation smell,Namespace,Class,File,Method,Description
Long Method,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The method has 117 lines of code.
Complex Method,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,Cyclomatic complexity of the method is 17
Complex Method,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,ProcessTopicQuery,Cyclomatic complexity of the method is 9
Long Parameter List,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,Association,The method has 5 parameters.
Long Parameter List,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,Association,The method has 6 parameters.
Long Parameter List,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,Association,The method has 7 parameters.
Long Parameter List,Conclave.Map.Model,EnumerableEx,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\EnumerableEx.cs,GetOccurrence,The method has 6 parameters.
Long Parameter List,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,Occurrence,The method has 6 parameters.
Long Parameter List,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,Occurrence,The method has 6 parameters.
Long Parameter List,Conclave.Map.Store,ITopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\ITopicStore.cs,SetMetadata,The method has 5 parameters.
Long Parameter List,Conclave.Map.Store,ITopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\ITopicStore.cs,UpdateMetadataForPointingAssociations,The method has 6 parameters.
Long Parameter List,Conclave.Map.Store,ITopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\ITopicStore.cs,RemoveOccurrence,The method has 5 parameters.
Long Parameter List,Conclave.Map.Store,ITopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\ITopicStore.cs,GetOccurrence,The method has 5 parameters.
Long Parameter List,Conclave.Map.Store,ITopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\ITopicStore.cs,OccurrenceExists,The method has 5 parameters.
Long Parameter List,Conclave.Map.Store,ITopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\ITopicStore.cs,CreateAssociation,The method has 6 parameters.
Long Parameter List,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,SetMetadata,The method has 5 parameters.
Long Parameter List,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,UpdateMetadataForPointingAssociations,The method has 6 parameters.
Long Parameter List,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,RemoveOccurrence,The method has 5 parameters.
Long Parameter List,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,SetOccurrence,The method has 7 parameters.
Long Parameter List,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,GetOccurrence,The method has 5 parameters.
Long Parameter List,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,OccurrenceExists,The method has 5 parameters.
Long Parameter List,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,CreateAssociation,The method has 6 parameters.
Long Statement,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,Equals,The length of the statement  "	return (base.Equals (other) && this.Parent == other.Parent && this.Type == other.Type && this.Scope == other.Scope && this.Reference == other.Reference && this.Role == other.Role); " is 180.
Long Statement,Conclave.Map.Model,EnumerableEx,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\EnumerableEx.cs,GetOccurrence,The length of the statement  "	return self.FirstOrDefault (o => o.Scope == scope && o.Role == role && o.Behaviour == behaviour && o.Reference == reference); " is 125.
Long Statement,Conclave.Map.Model,Metadata,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Metadata.cs,Equals,The length of the statement  "	return (this.Parent == other.Parent && this.Scope == other.Scope && this.Name == other.Name && this.Value == other.Value); " is 122.
Long Statement,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,Equals,The length of the statement  "	return (this.Parent == other.Parent && this.Scope == other.Scope && this.Role == other.Role && this.Behaviour == other.Behaviour && this.Reference == other.Reference); " is 167.
Long Statement,Conclave.Map.Model,Topic,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Topic.cs,Equals,The length of the statement  "	return (base.Equals (other) && this.Associations.SequenceEqual (other.Associations) && this.Occurrences.SequenceEqual (other.Occurrences)); " is 139.
Long Statement,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,AddOccurrence,The length of the statement  "	this.SetOccurrence (occurrence.Parent' occurrence.Scope' occurrence.Role' occurrence.Behaviour' occurrence.Reference' occurrence.Data' check); " is 142.
Long Statement,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,AddAssociation,The length of the statement  "	this.CreateAssociation (association.Id' association.Scope' association.Type' association.Role' association.Parent' association.Reference); " is 138.
Complex Conditional,Conclave.Map.Store,SqlTopicStore,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\SqlTopicStore.cs,ProcessTopicQuery,The conditional expression  "currentAssoc == null && assocId != null || currentAssoc != null && currentAssoc.Id != assocId"  is complex.
Empty Catch Block,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The method has an empty catch block.
Magic Number,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = base.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Type.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = base.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Type.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = base.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Type.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = base.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Type.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = base.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Type.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  
Magic Number,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Type.GetHashCode ();  
Magic Number,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  
Magic Number,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  
Magic Number,Conclave.Map.Model,Association,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Association.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Role.GetHashCode ();  
Magic Number,Conclave.Map.Model,Metadata,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Metadata.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = "Metadata".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Name.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Value.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Metadata,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Metadata.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = "Metadata".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Name.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Value.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Metadata,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Metadata.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = "Metadata".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Name.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Value.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Metadata,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Metadata.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = "Metadata".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Name.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Value.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Metadata,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Metadata.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  
Magic Number,Conclave.Map.Model,Metadata,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Metadata.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  
Magic Number,Conclave.Map.Model,Metadata,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Metadata.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Name.GetHashCode ();  
Magic Number,Conclave.Map.Model,Metadata,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Metadata.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Value.GetHashCode ();  
Magic Number,Conclave.Map.Model,Node,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Node.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = "Node".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Id.GetHashCode ();  	foreach (Metadata meta in this.Metadata) {  		_hashcode = _hashcode + 31 + meta.GetHashCode ();  	}  }  
Magic Number,Conclave.Map.Model,Node,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Node.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = "Node".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Id.GetHashCode ();  	foreach (Metadata meta in this.Metadata) {  		_hashcode = _hashcode + 31 + meta.GetHashCode ();  	}  }  
Magic Number,Conclave.Map.Model,Node,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Node.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Id.GetHashCode ();  
Magic Number,Conclave.Map.Model,Node,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Node.cs,GetHashCode,The following statement contains a magic number: foreach (Metadata meta in this.Metadata) {  	_hashcode = _hashcode + 31 + meta.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Node,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Node.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode + 31 + meta.GetHashCode ();  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = 1;  	_hashcode = _hashcode * 31 + "Occurrence::".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Behaviour.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = 1;  	_hashcode = _hashcode * 31 + "Occurrence::".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Behaviour.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = 1;  	_hashcode = _hashcode * 31 + "Occurrence::".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Behaviour.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = 1;  	_hashcode = _hashcode * 31 + "Occurrence::".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Behaviour.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = 1;  	_hashcode = _hashcode * 31 + "Occurrence::".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Behaviour.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = 1;  	_hashcode = _hashcode * 31 + "Occurrence::".GetHashCode ();  	_hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Role.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Behaviour.GetHashCode ();  	_hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + "Occurrence::".GetHashCode ();  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Parent.GetHashCode ();  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Scope.GetHashCode ();  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Role.GetHashCode ();  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Behaviour.GetHashCode ();  
Magic Number,Conclave.Map.Model,Occurrence,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Occurrence.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + this.Reference.GetHashCode ();  
Magic Number,Conclave.Map.Model,Topic,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Topic.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = base.GetHashCode ();  	foreach (Association assoc in this.Associations) {  		_hashcode = _hashcode * 31 + assoc.GetHashCode ();  	}  	foreach (Occurrence occur in this.Occurrences) {  		_hashcode = _hashcode * 31 + occur.GetHashCode ();  	}  }  
Magic Number,Conclave.Map.Model,Topic,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Topic.cs,GetHashCode,The following statement contains a magic number: if (_hashcode == 0) {  	_hashcode = base.GetHashCode ();  	foreach (Association assoc in this.Associations) {  		_hashcode = _hashcode * 31 + assoc.GetHashCode ();  	}  	foreach (Occurrence occur in this.Occurrences) {  		_hashcode = _hashcode * 31 + occur.GetHashCode ();  	}  }  
Magic Number,Conclave.Map.Model,Topic,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Topic.cs,GetHashCode,The following statement contains a magic number: foreach (Association assoc in this.Associations) {  	_hashcode = _hashcode * 31 + assoc.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Topic,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Topic.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + assoc.GetHashCode ();  
Magic Number,Conclave.Map.Model,Topic,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Topic.cs,GetHashCode,The following statement contains a magic number: foreach (Occurrence occur in this.Occurrences) {  	_hashcode = _hashcode * 31 + occur.GetHashCode ();  }  
Magic Number,Conclave.Map.Model,Topic,C:\repos\guy-murphy_conclave-public\Conclave.Map\Model\Topic.cs,GetHashCode,The following statement contains a magic number: _hashcode = _hashcode * 31 + occur.GetHashCode ();  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: try {  	ReadContext ctx = new ReadContext ();  	int count = 0;  	using (XmlTextReader reader = new XmlTextReader (path)) {  		Topic.Builder topic = null;  		Association.Builder assoc = null;  		string id' resource' value' label' role;  		string[] parts;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.Element:  				ctx.Push (reader.Name);  				switch (reader.Name) {  				case "Topic":  					if (topic == null) {  						id = reader.GetAttribute ("id"' _rdf);  						if (!String.IsNullOrWhiteSpace (id)) {  							topic = new Topic.Builder (id);  						}  					}  					break;  				case "related":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  						}  					}  					break;  				case "narrow":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  							//Association.Builder broader = new Association.Builder()   							//{  							//	Type = "category"'  							//	Role = "broader"'  							//	Parent = assoc.Reference'  							//	Reference = topic.Id  							//};  							//label = topic.Id.Split('/').Last().Replace('_'' ' ');  							//broader.AddMetadata("label"' label);  							//_store.AddAssociation(broader);  						}  					}  					break;  				case "symbolic":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							parts = resource.Split (':');  							role = parts [0];  							if (role.Length > 50)  								role = role.Substring (0' 50);  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  						}  					}  					break;  				}  				break;  			case XmlNodeType.EndElement:  				switch (reader.Name) {  				case "Topic":  					if (topic != null) {  						topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  						try {  							_store.AddTopic (topic);  						}  						catch {  						}  						count++;  						if (count % 100 == 0)  							Console.WriteLine (count);  						topic = null;  					}  					break;  				}  				ctx.Pop ();  				break;  			case XmlNodeType.Text:  				value = reader.Value.Replace ('_'' ' ');  				if (value.Length > 50)  					value = value.Substring (0' 50);  				switch (ctx.Peek ()) {  				case "d:Title":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("label"' value);  					}  					break;  				case "d:Description":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("description"' value);  					}  					break;  				case "lastUpdate":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("last-update"' value);  					}  					break;  				}  				break;  			}  		}  	}  	Console.WriteLine ();  	Console.WriteLine (count);  }  finally {  	_store.Stop ();  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: try {  	ReadContext ctx = new ReadContext ();  	int count = 0;  	using (XmlTextReader reader = new XmlTextReader (path)) {  		Topic.Builder topic = null;  		Association.Builder assoc = null;  		string id' resource' value' label' role;  		string[] parts;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.Element:  				ctx.Push (reader.Name);  				switch (reader.Name) {  				case "Topic":  					if (topic == null) {  						id = reader.GetAttribute ("id"' _rdf);  						if (!String.IsNullOrWhiteSpace (id)) {  							topic = new Topic.Builder (id);  						}  					}  					break;  				case "related":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  						}  					}  					break;  				case "narrow":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  							//Association.Builder broader = new Association.Builder()   							//{  							//	Type = "category"'  							//	Role = "broader"'  							//	Parent = assoc.Reference'  							//	Reference = topic.Id  							//};  							//label = topic.Id.Split('/').Last().Replace('_'' ' ');  							//broader.AddMetadata("label"' label);  							//_store.AddAssociation(broader);  						}  					}  					break;  				case "symbolic":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							parts = resource.Split (':');  							role = parts [0];  							if (role.Length > 50)  								role = role.Substring (0' 50);  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  						}  					}  					break;  				}  				break;  			case XmlNodeType.EndElement:  				switch (reader.Name) {  				case "Topic":  					if (topic != null) {  						topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  						try {  							_store.AddTopic (topic);  						}  						catch {  						}  						count++;  						if (count % 100 == 0)  							Console.WriteLine (count);  						topic = null;  					}  					break;  				}  				ctx.Pop ();  				break;  			case XmlNodeType.Text:  				value = reader.Value.Replace ('_'' ' ');  				if (value.Length > 50)  					value = value.Substring (0' 50);  				switch (ctx.Peek ()) {  				case "d:Title":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("label"' value);  					}  					break;  				case "d:Description":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("description"' value);  					}  					break;  				case "lastUpdate":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("last-update"' value);  					}  					break;  				}  				break;  			}  		}  	}  	Console.WriteLine ();  	Console.WriteLine (count);  }  finally {  	_store.Stop ();  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: try {  	ReadContext ctx = new ReadContext ();  	int count = 0;  	using (XmlTextReader reader = new XmlTextReader (path)) {  		Topic.Builder topic = null;  		Association.Builder assoc = null;  		string id' resource' value' label' role;  		string[] parts;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.Element:  				ctx.Push (reader.Name);  				switch (reader.Name) {  				case "Topic":  					if (topic == null) {  						id = reader.GetAttribute ("id"' _rdf);  						if (!String.IsNullOrWhiteSpace (id)) {  							topic = new Topic.Builder (id);  						}  					}  					break;  				case "related":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  						}  					}  					break;  				case "narrow":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  							//Association.Builder broader = new Association.Builder()   							//{  							//	Type = "category"'  							//	Role = "broader"'  							//	Parent = assoc.Reference'  							//	Reference = topic.Id  							//};  							//label = topic.Id.Split('/').Last().Replace('_'' ' ');  							//broader.AddMetadata("label"' label);  							//_store.AddAssociation(broader);  						}  					}  					break;  				case "symbolic":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							parts = resource.Split (':');  							role = parts [0];  							if (role.Length > 50)  								role = role.Substring (0' 50);  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  						}  					}  					break;  				}  				break;  			case XmlNodeType.EndElement:  				switch (reader.Name) {  				case "Topic":  					if (topic != null) {  						topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  						try {  							_store.AddTopic (topic);  						}  						catch {  						}  						count++;  						if (count % 100 == 0)  							Console.WriteLine (count);  						topic = null;  					}  					break;  				}  				ctx.Pop ();  				break;  			case XmlNodeType.Text:  				value = reader.Value.Replace ('_'' ' ');  				if (value.Length > 50)  					value = value.Substring (0' 50);  				switch (ctx.Peek ()) {  				case "d:Title":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("label"' value);  					}  					break;  				case "d:Description":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("description"' value);  					}  					break;  				case "lastUpdate":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("last-update"' value);  					}  					break;  				}  				break;  			}  		}  	}  	Console.WriteLine ();  	Console.WriteLine (count);  }  finally {  	_store.Stop ();  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: try {  	ReadContext ctx = new ReadContext ();  	int count = 0;  	using (XmlTextReader reader = new XmlTextReader (path)) {  		Topic.Builder topic = null;  		Association.Builder assoc = null;  		string id' resource' value' label' role;  		string[] parts;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.Element:  				ctx.Push (reader.Name);  				switch (reader.Name) {  				case "Topic":  					if (topic == null) {  						id = reader.GetAttribute ("id"' _rdf);  						if (!String.IsNullOrWhiteSpace (id)) {  							topic = new Topic.Builder (id);  						}  					}  					break;  				case "related":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  						}  					}  					break;  				case "narrow":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  							//Association.Builder broader = new Association.Builder()   							//{  							//	Type = "category"'  							//	Role = "broader"'  							//	Parent = assoc.Reference'  							//	Reference = topic.Id  							//};  							//label = topic.Id.Split('/').Last().Replace('_'' ' ');  							//broader.AddMetadata("label"' label);  							//_store.AddAssociation(broader);  						}  					}  					break;  				case "symbolic":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							parts = resource.Split (':');  							role = parts [0];  							if (role.Length > 50)  								role = role.Substring (0' 50);  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  						}  					}  					break;  				}  				break;  			case XmlNodeType.EndElement:  				switch (reader.Name) {  				case "Topic":  					if (topic != null) {  						topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  						try {  							_store.AddTopic (topic);  						}  						catch {  						}  						count++;  						if (count % 100 == 0)  							Console.WriteLine (count);  						topic = null;  					}  					break;  				}  				ctx.Pop ();  				break;  			case XmlNodeType.Text:  				value = reader.Value.Replace ('_'' ' ');  				if (value.Length > 50)  					value = value.Substring (0' 50);  				switch (ctx.Peek ()) {  				case "d:Title":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("label"' value);  					}  					break;  				case "d:Description":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("description"' value);  					}  					break;  				case "lastUpdate":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("last-update"' value);  					}  					break;  				}  				break;  			}  		}  	}  	Console.WriteLine ();  	Console.WriteLine (count);  }  finally {  	_store.Stop ();  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: try {  	ReadContext ctx = new ReadContext ();  	int count = 0;  	using (XmlTextReader reader = new XmlTextReader (path)) {  		Topic.Builder topic = null;  		Association.Builder assoc = null;  		string id' resource' value' label' role;  		string[] parts;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.Element:  				ctx.Push (reader.Name);  				switch (reader.Name) {  				case "Topic":  					if (topic == null) {  						id = reader.GetAttribute ("id"' _rdf);  						if (!String.IsNullOrWhiteSpace (id)) {  							topic = new Topic.Builder (id);  						}  					}  					break;  				case "related":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  						}  					}  					break;  				case "narrow":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  							//Association.Builder broader = new Association.Builder()   							//{  							//	Type = "category"'  							//	Role = "broader"'  							//	Parent = assoc.Reference'  							//	Reference = topic.Id  							//};  							//label = topic.Id.Split('/').Last().Replace('_'' ' ');  							//broader.AddMetadata("label"' label);  							//_store.AddAssociation(broader);  						}  					}  					break;  				case "symbolic":  					resource = reader.GetAttribute ("resource"' _rdf);  					if (!String.IsNullOrWhiteSpace (resource)) {  						if (topic != null) {  							parts = resource.Split (':');  							role = parts [0];  							if (role.Length > 50)  								role = role.Substring (0' 50);  							label = resource.Split ('/').Last ().Replace ('_'' ' ');  							topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  						}  					}  					break;  				}  				break;  			case XmlNodeType.EndElement:  				switch (reader.Name) {  				case "Topic":  					if (topic != null) {  						topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  						try {  							_store.AddTopic (topic);  						}  						catch {  						}  						count++;  						if (count % 100 == 0)  							Console.WriteLine (count);  						topic = null;  					}  					break;  				}  				ctx.Pop ();  				break;  			case XmlNodeType.Text:  				value = reader.Value.Replace ('_'' ' ');  				if (value.Length > 50)  					value = value.Substring (0' 50);  				switch (ctx.Peek ()) {  				case "d:Title":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("label"' value);  					}  					break;  				case "d:Description":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("description"' value);  					}  					break;  				case "lastUpdate":  					if (ctx.Peek (-1) == "Topic" && topic != null) {  						topic.AddMetadata ("last-update"' value);  					}  					break;  				}  				break;  			}  		}  	}  	Console.WriteLine ();  	Console.WriteLine (count);  }  finally {  	_store.Stop ();  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: using (XmlTextReader reader = new XmlTextReader (path)) {  	Topic.Builder topic = null;  	Association.Builder assoc = null;  	string id' resource' value' label' role;  	string[] parts;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.Element:  			ctx.Push (reader.Name);  			switch (reader.Name) {  			case "Topic":  				if (topic == null) {  					id = reader.GetAttribute ("id"' _rdf);  					if (!String.IsNullOrWhiteSpace (id)) {  						topic = new Topic.Builder (id);  					}  				}  				break;  			case "related":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  					}  				}  				break;  			case "narrow":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  						//Association.Builder broader = new Association.Builder()   						//{  						//	Type = "category"'  						//	Role = "broader"'  						//	Parent = assoc.Reference'  						//	Reference = topic.Id  						//};  						//label = topic.Id.Split('/').Last().Replace('_'' ' ');  						//broader.AddMetadata("label"' label);  						//_store.AddAssociation(broader);  					}  				}  				break;  			case "symbolic":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						parts = resource.Split (':');  						role = parts [0];  						if (role.Length > 50)  							role = role.Substring (0' 50);  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  					}  				}  				break;  			}  			break;  		case XmlNodeType.EndElement:  			switch (reader.Name) {  			case "Topic":  				if (topic != null) {  					topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  					try {  						_store.AddTopic (topic);  					}  					catch {  					}  					count++;  					if (count % 100 == 0)  						Console.WriteLine (count);  					topic = null;  				}  				break;  			}  			ctx.Pop ();  			break;  		case XmlNodeType.Text:  			value = reader.Value.Replace ('_'' ' ');  			if (value.Length > 50)  				value = value.Substring (0' 50);  			switch (ctx.Peek ()) {  			case "d:Title":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("label"' value);  				}  				break;  			case "d:Description":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("description"' value);  				}  				break;  			case "lastUpdate":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("last-update"' value);  				}  				break;  			}  			break;  		}  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: using (XmlTextReader reader = new XmlTextReader (path)) {  	Topic.Builder topic = null;  	Association.Builder assoc = null;  	string id' resource' value' label' role;  	string[] parts;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.Element:  			ctx.Push (reader.Name);  			switch (reader.Name) {  			case "Topic":  				if (topic == null) {  					id = reader.GetAttribute ("id"' _rdf);  					if (!String.IsNullOrWhiteSpace (id)) {  						topic = new Topic.Builder (id);  					}  				}  				break;  			case "related":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  					}  				}  				break;  			case "narrow":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  						//Association.Builder broader = new Association.Builder()   						//{  						//	Type = "category"'  						//	Role = "broader"'  						//	Parent = assoc.Reference'  						//	Reference = topic.Id  						//};  						//label = topic.Id.Split('/').Last().Replace('_'' ' ');  						//broader.AddMetadata("label"' label);  						//_store.AddAssociation(broader);  					}  				}  				break;  			case "symbolic":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						parts = resource.Split (':');  						role = parts [0];  						if (role.Length > 50)  							role = role.Substring (0' 50);  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  					}  				}  				break;  			}  			break;  		case XmlNodeType.EndElement:  			switch (reader.Name) {  			case "Topic":  				if (topic != null) {  					topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  					try {  						_store.AddTopic (topic);  					}  					catch {  					}  					count++;  					if (count % 100 == 0)  						Console.WriteLine (count);  					topic = null;  				}  				break;  			}  			ctx.Pop ();  			break;  		case XmlNodeType.Text:  			value = reader.Value.Replace ('_'' ' ');  			if (value.Length > 50)  				value = value.Substring (0' 50);  			switch (ctx.Peek ()) {  			case "d:Title":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("label"' value);  				}  				break;  			case "d:Description":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("description"' value);  				}  				break;  			case "lastUpdate":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("last-update"' value);  				}  				break;  			}  			break;  		}  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: using (XmlTextReader reader = new XmlTextReader (path)) {  	Topic.Builder topic = null;  	Association.Builder assoc = null;  	string id' resource' value' label' role;  	string[] parts;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.Element:  			ctx.Push (reader.Name);  			switch (reader.Name) {  			case "Topic":  				if (topic == null) {  					id = reader.GetAttribute ("id"' _rdf);  					if (!String.IsNullOrWhiteSpace (id)) {  						topic = new Topic.Builder (id);  					}  				}  				break;  			case "related":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  					}  				}  				break;  			case "narrow":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  						//Association.Builder broader = new Association.Builder()   						//{  						//	Type = "category"'  						//	Role = "broader"'  						//	Parent = assoc.Reference'  						//	Reference = topic.Id  						//};  						//label = topic.Id.Split('/').Last().Replace('_'' ' ');  						//broader.AddMetadata("label"' label);  						//_store.AddAssociation(broader);  					}  				}  				break;  			case "symbolic":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						parts = resource.Split (':');  						role = parts [0];  						if (role.Length > 50)  							role = role.Substring (0' 50);  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  					}  				}  				break;  			}  			break;  		case XmlNodeType.EndElement:  			switch (reader.Name) {  			case "Topic":  				if (topic != null) {  					topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  					try {  						_store.AddTopic (topic);  					}  					catch {  					}  					count++;  					if (count % 100 == 0)  						Console.WriteLine (count);  					topic = null;  				}  				break;  			}  			ctx.Pop ();  			break;  		case XmlNodeType.Text:  			value = reader.Value.Replace ('_'' ' ');  			if (value.Length > 50)  				value = value.Substring (0' 50);  			switch (ctx.Peek ()) {  			case "d:Title":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("label"' value);  				}  				break;  			case "d:Description":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("description"' value);  				}  				break;  			case "lastUpdate":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("last-update"' value);  				}  				break;  			}  			break;  		}  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: using (XmlTextReader reader = new XmlTextReader (path)) {  	Topic.Builder topic = null;  	Association.Builder assoc = null;  	string id' resource' value' label' role;  	string[] parts;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.Element:  			ctx.Push (reader.Name);  			switch (reader.Name) {  			case "Topic":  				if (topic == null) {  					id = reader.GetAttribute ("id"' _rdf);  					if (!String.IsNullOrWhiteSpace (id)) {  						topic = new Topic.Builder (id);  					}  				}  				break;  			case "related":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  					}  				}  				break;  			case "narrow":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  						//Association.Builder broader = new Association.Builder()   						//{  						//	Type = "category"'  						//	Role = "broader"'  						//	Parent = assoc.Reference'  						//	Reference = topic.Id  						//};  						//label = topic.Id.Split('/').Last().Replace('_'' ' ');  						//broader.AddMetadata("label"' label);  						//_store.AddAssociation(broader);  					}  				}  				break;  			case "symbolic":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						parts = resource.Split (':');  						role = parts [0];  						if (role.Length > 50)  							role = role.Substring (0' 50);  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  					}  				}  				break;  			}  			break;  		case XmlNodeType.EndElement:  			switch (reader.Name) {  			case "Topic":  				if (topic != null) {  					topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  					try {  						_store.AddTopic (topic);  					}  					catch {  					}  					count++;  					if (count % 100 == 0)  						Console.WriteLine (count);  					topic = null;  				}  				break;  			}  			ctx.Pop ();  			break;  		case XmlNodeType.Text:  			value = reader.Value.Replace ('_'' ' ');  			if (value.Length > 50)  				value = value.Substring (0' 50);  			switch (ctx.Peek ()) {  			case "d:Title":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("label"' value);  				}  				break;  			case "d:Description":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("description"' value);  				}  				break;  			case "lastUpdate":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("last-update"' value);  				}  				break;  			}  			break;  		}  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: using (XmlTextReader reader = new XmlTextReader (path)) {  	Topic.Builder topic = null;  	Association.Builder assoc = null;  	string id' resource' value' label' role;  	string[] parts;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.Element:  			ctx.Push (reader.Name);  			switch (reader.Name) {  			case "Topic":  				if (topic == null) {  					id = reader.GetAttribute ("id"' _rdf);  					if (!String.IsNullOrWhiteSpace (id)) {  						topic = new Topic.Builder (id);  					}  				}  				break;  			case "related":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  					}  				}  				break;  			case "narrow":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  						//Association.Builder broader = new Association.Builder()   						//{  						//	Type = "category"'  						//	Role = "broader"'  						//	Parent = assoc.Reference'  						//	Reference = topic.Id  						//};  						//label = topic.Id.Split('/').Last().Replace('_'' ' ');  						//broader.AddMetadata("label"' label);  						//_store.AddAssociation(broader);  					}  				}  				break;  			case "symbolic":  				resource = reader.GetAttribute ("resource"' _rdf);  				if (!String.IsNullOrWhiteSpace (resource)) {  					if (topic != null) {  						parts = resource.Split (':');  						role = parts [0];  						if (role.Length > 50)  							role = role.Substring (0' 50);  						label = resource.Split ('/').Last ().Replace ('_'' ' ');  						topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  					}  				}  				break;  			}  			break;  		case XmlNodeType.EndElement:  			switch (reader.Name) {  			case "Topic":  				if (topic != null) {  					topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  					try {  						_store.AddTopic (topic);  					}  					catch {  					}  					count++;  					if (count % 100 == 0)  						Console.WriteLine (count);  					topic = null;  				}  				break;  			}  			ctx.Pop ();  			break;  		case XmlNodeType.Text:  			value = reader.Value.Replace ('_'' ' ');  			if (value.Length > 50)  				value = value.Substring (0' 50);  			switch (ctx.Peek ()) {  			case "d:Title":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("label"' value);  				}  				break;  			case "d:Description":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("description"' value);  				}  				break;  			case "lastUpdate":  				if (ctx.Peek (-1) == "Topic" && topic != null) {  					topic.AddMetadata ("last-update"' value);  				}  				break;  			}  			break;  		}  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.Element:  		ctx.Push (reader.Name);  		switch (reader.Name) {  		case "Topic":  			if (topic == null) {  				id = reader.GetAttribute ("id"' _rdf);  				if (!String.IsNullOrWhiteSpace (id)) {  					topic = new Topic.Builder (id);  				}  			}  			break;  		case "related":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  				}  			}  			break;  		case "narrow":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  					//Association.Builder broader = new Association.Builder()   					//{  					//	Type = "category"'  					//	Role = "broader"'  					//	Parent = assoc.Reference'  					//	Reference = topic.Id  					//};  					//label = topic.Id.Split('/').Last().Replace('_'' ' ');  					//broader.AddMetadata("label"' label);  					//_store.AddAssociation(broader);  				}  			}  			break;  		case "symbolic":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					parts = resource.Split (':');  					role = parts [0];  					if (role.Length > 50)  						role = role.Substring (0' 50);  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  				}  			}  			break;  		}  		break;  	case XmlNodeType.EndElement:  		switch (reader.Name) {  		case "Topic":  			if (topic != null) {  				topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  				try {  					_store.AddTopic (topic);  				}  				catch {  				}  				count++;  				if (count % 100 == 0)  					Console.WriteLine (count);  				topic = null;  			}  			break;  		}  		ctx.Pop ();  		break;  	case XmlNodeType.Text:  		value = reader.Value.Replace ('_'' ' ');  		if (value.Length > 50)  			value = value.Substring (0' 50);  		switch (ctx.Peek ()) {  		case "d:Title":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("label"' value);  			}  			break;  		case "d:Description":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("description"' value);  			}  			break;  		case "lastUpdate":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("last-update"' value);  			}  			break;  		}  		break;  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.Element:  		ctx.Push (reader.Name);  		switch (reader.Name) {  		case "Topic":  			if (topic == null) {  				id = reader.GetAttribute ("id"' _rdf);  				if (!String.IsNullOrWhiteSpace (id)) {  					topic = new Topic.Builder (id);  				}  			}  			break;  		case "related":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  				}  			}  			break;  		case "narrow":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  					//Association.Builder broader = new Association.Builder()   					//{  					//	Type = "category"'  					//	Role = "broader"'  					//	Parent = assoc.Reference'  					//	Reference = topic.Id  					//};  					//label = topic.Id.Split('/').Last().Replace('_'' ' ');  					//broader.AddMetadata("label"' label);  					//_store.AddAssociation(broader);  				}  			}  			break;  		case "symbolic":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					parts = resource.Split (':');  					role = parts [0];  					if (role.Length > 50)  						role = role.Substring (0' 50);  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  				}  			}  			break;  		}  		break;  	case XmlNodeType.EndElement:  		switch (reader.Name) {  		case "Topic":  			if (topic != null) {  				topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  				try {  					_store.AddTopic (topic);  				}  				catch {  				}  				count++;  				if (count % 100 == 0)  					Console.WriteLine (count);  				topic = null;  			}  			break;  		}  		ctx.Pop ();  		break;  	case XmlNodeType.Text:  		value = reader.Value.Replace ('_'' ' ');  		if (value.Length > 50)  			value = value.Substring (0' 50);  		switch (ctx.Peek ()) {  		case "d:Title":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("label"' value);  			}  			break;  		case "d:Description":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("description"' value);  			}  			break;  		case "lastUpdate":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("last-update"' value);  			}  			break;  		}  		break;  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.Element:  		ctx.Push (reader.Name);  		switch (reader.Name) {  		case "Topic":  			if (topic == null) {  				id = reader.GetAttribute ("id"' _rdf);  				if (!String.IsNullOrWhiteSpace (id)) {  					topic = new Topic.Builder (id);  				}  			}  			break;  		case "related":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  				}  			}  			break;  		case "narrow":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  					//Association.Builder broader = new Association.Builder()   					//{  					//	Type = "category"'  					//	Role = "broader"'  					//	Parent = assoc.Reference'  					//	Reference = topic.Id  					//};  					//label = topic.Id.Split('/').Last().Replace('_'' ' ');  					//broader.AddMetadata("label"' label);  					//_store.AddAssociation(broader);  				}  			}  			break;  		case "symbolic":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					parts = resource.Split (':');  					role = parts [0];  					if (role.Length > 50)  						role = role.Substring (0' 50);  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  				}  			}  			break;  		}  		break;  	case XmlNodeType.EndElement:  		switch (reader.Name) {  		case "Topic":  			if (topic != null) {  				topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  				try {  					_store.AddTopic (topic);  				}  				catch {  				}  				count++;  				if (count % 100 == 0)  					Console.WriteLine (count);  				topic = null;  			}  			break;  		}  		ctx.Pop ();  		break;  	case XmlNodeType.Text:  		value = reader.Value.Replace ('_'' ' ');  		if (value.Length > 50)  			value = value.Substring (0' 50);  		switch (ctx.Peek ()) {  		case "d:Title":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("label"' value);  			}  			break;  		case "d:Description":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("description"' value);  			}  			break;  		case "lastUpdate":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("last-update"' value);  			}  			break;  		}  		break;  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.Element:  		ctx.Push (reader.Name);  		switch (reader.Name) {  		case "Topic":  			if (topic == null) {  				id = reader.GetAttribute ("id"' _rdf);  				if (!String.IsNullOrWhiteSpace (id)) {  					topic = new Topic.Builder (id);  				}  			}  			break;  		case "related":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  				}  			}  			break;  		case "narrow":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  					//Association.Builder broader = new Association.Builder()   					//{  					//	Type = "category"'  					//	Role = "broader"'  					//	Parent = assoc.Reference'  					//	Reference = topic.Id  					//};  					//label = topic.Id.Split('/').Last().Replace('_'' ' ');  					//broader.AddMetadata("label"' label);  					//_store.AddAssociation(broader);  				}  			}  			break;  		case "symbolic":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					parts = resource.Split (':');  					role = parts [0];  					if (role.Length > 50)  						role = role.Substring (0' 50);  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  				}  			}  			break;  		}  		break;  	case XmlNodeType.EndElement:  		switch (reader.Name) {  		case "Topic":  			if (topic != null) {  				topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  				try {  					_store.AddTopic (topic);  				}  				catch {  				}  				count++;  				if (count % 100 == 0)  					Console.WriteLine (count);  				topic = null;  			}  			break;  		}  		ctx.Pop ();  		break;  	case XmlNodeType.Text:  		value = reader.Value.Replace ('_'' ' ');  		if (value.Length > 50)  			value = value.Substring (0' 50);  		switch (ctx.Peek ()) {  		case "d:Title":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("label"' value);  			}  			break;  		case "d:Description":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("description"' value);  			}  			break;  		case "lastUpdate":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("last-update"' value);  			}  			break;  		}  		break;  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.Element:  		ctx.Push (reader.Name);  		switch (reader.Name) {  		case "Topic":  			if (topic == null) {  				id = reader.GetAttribute ("id"' _rdf);  				if (!String.IsNullOrWhiteSpace (id)) {  					topic = new Topic.Builder (id);  				}  			}  			break;  		case "related":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  				}  			}  			break;  		case "narrow":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  					//Association.Builder broader = new Association.Builder()   					//{  					//	Type = "category"'  					//	Role = "broader"'  					//	Parent = assoc.Reference'  					//	Reference = topic.Id  					//};  					//label = topic.Id.Split('/').Last().Replace('_'' ' ');  					//broader.AddMetadata("label"' label);  					//_store.AddAssociation(broader);  				}  			}  			break;  		case "symbolic":  			resource = reader.GetAttribute ("resource"' _rdf);  			if (!String.IsNullOrWhiteSpace (resource)) {  				if (topic != null) {  					parts = resource.Split (':');  					role = parts [0];  					if (role.Length > 50)  						role = role.Substring (0' 50);  					label = resource.Split ('/').Last ().Replace ('_'' ' ');  					topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  				}  			}  			break;  		}  		break;  	case XmlNodeType.EndElement:  		switch (reader.Name) {  		case "Topic":  			if (topic != null) {  				topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  				try {  					_store.AddTopic (topic);  				}  				catch {  				}  				count++;  				if (count % 100 == 0)  					Console.WriteLine (count);  				topic = null;  			}  			break;  		}  		ctx.Pop ();  		break;  	case XmlNodeType.Text:  		value = reader.Value.Replace ('_'' ' ');  		if (value.Length > 50)  			value = value.Substring (0' 50);  		switch (ctx.Peek ()) {  		case "d:Title":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("label"' value);  			}  			break;  		case "d:Description":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("description"' value);  			}  			break;  		case "lastUpdate":  			if (ctx.Peek (-1) == "Topic" && topic != null) {  				topic.AddMetadata ("last-update"' value);  			}  			break;  		}  		break;  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element:  	ctx.Push (reader.Name);  	switch (reader.Name) {  	case "Topic":  		if (topic == null) {  			id = reader.GetAttribute ("id"' _rdf);  			if (!String.IsNullOrWhiteSpace (id)) {  				topic = new Topic.Builder (id);  			}  		}  		break;  	case "related":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  			}  		}  		break;  	case "narrow":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  				//Association.Builder broader = new Association.Builder()   				//{  				//	Type = "category"'  				//	Role = "broader"'  				//	Parent = assoc.Reference'  				//	Reference = topic.Id  				//};  				//label = topic.Id.Split('/').Last().Replace('_'' ' ');  				//broader.AddMetadata("label"' label);  				//_store.AddAssociation(broader);  			}  		}  		break;  	case "symbolic":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				parts = resource.Split (':');  				role = parts [0];  				if (role.Length > 50)  					role = role.Substring (0' 50);  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  			}  		}  		break;  	}  	break;  case XmlNodeType.EndElement:  	switch (reader.Name) {  	case "Topic":  		if (topic != null) {  			topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  			try {  				_store.AddTopic (topic);  			}  			catch {  			}  			count++;  			if (count % 100 == 0)  				Console.WriteLine (count);  			topic = null;  		}  		break;  	}  	ctx.Pop ();  	break;  case XmlNodeType.Text:  	value = reader.Value.Replace ('_'' ' ');  	if (value.Length > 50)  		value = value.Substring (0' 50);  	switch (ctx.Peek ()) {  	case "d:Title":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("label"' value);  		}  		break;  	case "d:Description":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("description"' value);  		}  		break;  	case "lastUpdate":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("last-update"' value);  		}  		break;  	}  	break;  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element:  	ctx.Push (reader.Name);  	switch (reader.Name) {  	case "Topic":  		if (topic == null) {  			id = reader.GetAttribute ("id"' _rdf);  			if (!String.IsNullOrWhiteSpace (id)) {  				topic = new Topic.Builder (id);  			}  		}  		break;  	case "related":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  			}  		}  		break;  	case "narrow":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  				//Association.Builder broader = new Association.Builder()   				//{  				//	Type = "category"'  				//	Role = "broader"'  				//	Parent = assoc.Reference'  				//	Reference = topic.Id  				//};  				//label = topic.Id.Split('/').Last().Replace('_'' ' ');  				//broader.AddMetadata("label"' label);  				//_store.AddAssociation(broader);  			}  		}  		break;  	case "symbolic":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				parts = resource.Split (':');  				role = parts [0];  				if (role.Length > 50)  					role = role.Substring (0' 50);  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  			}  		}  		break;  	}  	break;  case XmlNodeType.EndElement:  	switch (reader.Name) {  	case "Topic":  		if (topic != null) {  			topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  			try {  				_store.AddTopic (topic);  			}  			catch {  			}  			count++;  			if (count % 100 == 0)  				Console.WriteLine (count);  			topic = null;  		}  		break;  	}  	ctx.Pop ();  	break;  case XmlNodeType.Text:  	value = reader.Value.Replace ('_'' ' ');  	if (value.Length > 50)  		value = value.Substring (0' 50);  	switch (ctx.Peek ()) {  	case "d:Title":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("label"' value);  		}  		break;  	case "d:Description":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("description"' value);  		}  		break;  	case "lastUpdate":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("last-update"' value);  		}  		break;  	}  	break;  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element:  	ctx.Push (reader.Name);  	switch (reader.Name) {  	case "Topic":  		if (topic == null) {  			id = reader.GetAttribute ("id"' _rdf);  			if (!String.IsNullOrWhiteSpace (id)) {  				topic = new Topic.Builder (id);  			}  		}  		break;  	case "related":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  			}  		}  		break;  	case "narrow":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  				//Association.Builder broader = new Association.Builder()   				//{  				//	Type = "category"'  				//	Role = "broader"'  				//	Parent = assoc.Reference'  				//	Reference = topic.Id  				//};  				//label = topic.Id.Split('/').Last().Replace('_'' ' ');  				//broader.AddMetadata("label"' label);  				//_store.AddAssociation(broader);  			}  		}  		break;  	case "symbolic":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				parts = resource.Split (':');  				role = parts [0];  				if (role.Length > 50)  					role = role.Substring (0' 50);  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  			}  		}  		break;  	}  	break;  case XmlNodeType.EndElement:  	switch (reader.Name) {  	case "Topic":  		if (topic != null) {  			topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  			try {  				_store.AddTopic (topic);  			}  			catch {  			}  			count++;  			if (count % 100 == 0)  				Console.WriteLine (count);  			topic = null;  		}  		break;  	}  	ctx.Pop ();  	break;  case XmlNodeType.Text:  	value = reader.Value.Replace ('_'' ' ');  	if (value.Length > 50)  		value = value.Substring (0' 50);  	switch (ctx.Peek ()) {  	case "d:Title":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("label"' value);  		}  		break;  	case "d:Description":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("description"' value);  		}  		break;  	case "lastUpdate":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("last-update"' value);  		}  		break;  	}  	break;  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element:  	ctx.Push (reader.Name);  	switch (reader.Name) {  	case "Topic":  		if (topic == null) {  			id = reader.GetAttribute ("id"' _rdf);  			if (!String.IsNullOrWhiteSpace (id)) {  				topic = new Topic.Builder (id);  			}  		}  		break;  	case "related":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  			}  		}  		break;  	case "narrow":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  				//Association.Builder broader = new Association.Builder()   				//{  				//	Type = "category"'  				//	Role = "broader"'  				//	Parent = assoc.Reference'  				//	Reference = topic.Id  				//};  				//label = topic.Id.Split('/').Last().Replace('_'' ' ');  				//broader.AddMetadata("label"' label);  				//_store.AddAssociation(broader);  			}  		}  		break;  	case "symbolic":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				parts = resource.Split (':');  				role = parts [0];  				if (role.Length > 50)  					role = role.Substring (0' 50);  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  			}  		}  		break;  	}  	break;  case XmlNodeType.EndElement:  	switch (reader.Name) {  	case "Topic":  		if (topic != null) {  			topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  			try {  				_store.AddTopic (topic);  			}  			catch {  			}  			count++;  			if (count % 100 == 0)  				Console.WriteLine (count);  			topic = null;  		}  		break;  	}  	ctx.Pop ();  	break;  case XmlNodeType.Text:  	value = reader.Value.Replace ('_'' ' ');  	if (value.Length > 50)  		value = value.Substring (0' 50);  	switch (ctx.Peek ()) {  	case "d:Title":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("label"' value);  		}  		break;  	case "d:Description":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("description"' value);  		}  		break;  	case "lastUpdate":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("last-update"' value);  		}  		break;  	}  	break;  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element:  	ctx.Push (reader.Name);  	switch (reader.Name) {  	case "Topic":  		if (topic == null) {  			id = reader.GetAttribute ("id"' _rdf);  			if (!String.IsNullOrWhiteSpace (id)) {  				topic = new Topic.Builder (id);  			}  		}  		break;  	case "related":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  			}  		}  		break;  	case "narrow":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  				//Association.Builder broader = new Association.Builder()   				//{  				//	Type = "category"'  				//	Role = "broader"'  				//	Parent = assoc.Reference'  				//	Reference = topic.Id  				//};  				//label = topic.Id.Split('/').Last().Replace('_'' ' ');  				//broader.AddMetadata("label"' label);  				//_store.AddAssociation(broader);  			}  		}  		break;  	case "symbolic":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				parts = resource.Split (':');  				role = parts [0];  				if (role.Length > 50)  					role = role.Substring (0' 50);  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  			}  		}  		break;  	}  	break;  case XmlNodeType.EndElement:  	switch (reader.Name) {  	case "Topic":  		if (topic != null) {  			topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  			try {  				_store.AddTopic (topic);  			}  			catch {  			}  			count++;  			if (count % 100 == 0)  				Console.WriteLine (count);  			topic = null;  		}  		break;  	}  	ctx.Pop ();  	break;  case XmlNodeType.Text:  	value = reader.Value.Replace ('_'' ' ');  	if (value.Length > 50)  		value = value.Substring (0' 50);  	switch (ctx.Peek ()) {  	case "d:Title":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("label"' value);  		}  		break;  	case "d:Description":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("description"' value);  		}  		break;  	case "lastUpdate":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("last-update"' value);  		}  		break;  	}  	break;  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: switch (reader.Name) {  case "Topic":  	if (topic == null) {  		id = reader.GetAttribute ("id"' _rdf);  		if (!String.IsNullOrWhiteSpace (id)) {  			topic = new Topic.Builder (id);  		}  	}  	break;  case "related":  	resource = reader.GetAttribute ("resource"' _rdf);  	if (!String.IsNullOrWhiteSpace (resource)) {  		if (topic != null) {  			label = resource.Split ('/').Last ().Replace ('_'' ' ');  			topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  		}  	}  	break;  case "narrow":  	resource = reader.GetAttribute ("resource"' _rdf);  	if (!String.IsNullOrWhiteSpace (resource)) {  		if (topic != null) {  			label = resource.Split ('/').Last ().Replace ('_'' ' ');  			assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  			//Association.Builder broader = new Association.Builder()   			//{  			//	Type = "category"'  			//	Role = "broader"'  			//	Parent = assoc.Reference'  			//	Reference = topic.Id  			//};  			//label = topic.Id.Split('/').Last().Replace('_'' ' ');  			//broader.AddMetadata("label"' label);  			//_store.AddAssociation(broader);  		}  	}  	break;  case "symbolic":  	resource = reader.GetAttribute ("resource"' _rdf);  	if (!String.IsNullOrWhiteSpace (resource)) {  		if (topic != null) {  			parts = resource.Split (':');  			role = parts [0];  			if (role.Length > 50)  				role = role.Substring (0' 50);  			label = resource.Split ('/').Last ().Replace ('_'' ' ');  			topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  		}  	}  	break;  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: switch (reader.Name) {  case "Topic":  	if (topic == null) {  		id = reader.GetAttribute ("id"' _rdf);  		if (!String.IsNullOrWhiteSpace (id)) {  			topic = new Topic.Builder (id);  		}  	}  	break;  case "related":  	resource = reader.GetAttribute ("resource"' _rdf);  	if (!String.IsNullOrWhiteSpace (resource)) {  		if (topic != null) {  			label = resource.Split ('/').Last ().Replace ('_'' ' ');  			topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  		}  	}  	break;  case "narrow":  	resource = reader.GetAttribute ("resource"' _rdf);  	if (!String.IsNullOrWhiteSpace (resource)) {  		if (topic != null) {  			label = resource.Split ('/').Last ().Replace ('_'' ' ');  			assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  			//Association.Builder broader = new Association.Builder()   			//{  			//	Type = "category"'  			//	Role = "broader"'  			//	Parent = assoc.Reference'  			//	Reference = topic.Id  			//};  			//label = topic.Id.Split('/').Last().Replace('_'' ' ');  			//broader.AddMetadata("label"' label);  			//_store.AddAssociation(broader);  		}  	}  	break;  case "symbolic":  	resource = reader.GetAttribute ("resource"' _rdf);  	if (!String.IsNullOrWhiteSpace (resource)) {  		if (topic != null) {  			parts = resource.Split (':');  			role = parts [0];  			if (role.Length > 50)  				role = role.Substring (0' 50);  			label = resource.Split ('/').Last ().Replace ('_'' ' ');  			topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  		}  	}  	break;  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace (resource)) {  	if (topic != null) {  		parts = resource.Split (':');  		role = parts [0];  		if (role.Length > 50)  			role = role.Substring (0' 50);  		label = resource.Split ('/').Last ().Replace ('_'' ' ');  		topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace (resource)) {  	if (topic != null) {  		parts = resource.Split (':');  		role = parts [0];  		if (role.Length > 50)  			role = role.Substring (0' 50);  		label = resource.Split ('/').Last ().Replace ('_'' ' ');  		topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  	}  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: if (topic != null) {  	parts = resource.Split (':');  	role = parts [0];  	if (role.Length > 50)  		role = role.Substring (0' 50);  	label = resource.Split ('/').Last ().Replace ('_'' ' ');  	topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: if (topic != null) {  	parts = resource.Split (':');  	role = parts [0];  	if (role.Length > 50)  		role = role.Substring (0' 50);  	label = resource.Split ('/').Last ().Replace ('_'' ' ');  	topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: if (role.Length > 50)  	role = role.Substring (0' 50);  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: if (role.Length > 50)  	role = role.Substring (0' 50);  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: role = role.Substring (0' 50);  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: switch (reader.Name) {  case "Topic":  	if (topic != null) {  		topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  		try {  			_store.AddTopic (topic);  		}  		catch {  		}  		count++;  		if (count % 100 == 0)  			Console.WriteLine (count);  		topic = null;  	}  	break;  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: if (topic != null) {  	topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  	try {  		_store.AddTopic (topic);  	}  	catch {  	}  	count++;  	if (count % 100 == 0)  		Console.WriteLine (count);  	topic = null;  }  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: if (count % 100 == 0)  	Console.WriteLine (count);  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: if (value.Length > 50)  	value = value.Substring (0' 50);  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: if (value.Length > 50)  	value = value.Substring (0' 50);  
Magic Number,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following statement contains a magic number: value = value.Substring (0' 50);  
Missing Default,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.Element:  	ctx.Push (reader.Name);  	switch (reader.Name) {  	case "Topic":  		if (topic == null) {  			id = reader.GetAttribute ("id"' _rdf);  			if (!String.IsNullOrWhiteSpace (id)) {  				topic = new Topic.Builder (id);  			}  		}  		break;  	case "related":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  			}  		}  		break;  	case "narrow":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  				//Association.Builder broader = new Association.Builder()   				//{  				//	Type = "category"'  				//	Role = "broader"'  				//	Parent = assoc.Reference'  				//	Reference = topic.Id  				//};  				//label = topic.Id.Split('/').Last().Replace('_'' ' ');  				//broader.AddMetadata("label"' label);  				//_store.AddAssociation(broader);  			}  		}  		break;  	case "symbolic":  		resource = reader.GetAttribute ("resource"' _rdf);  		if (!String.IsNullOrWhiteSpace (resource)) {  			if (topic != null) {  				parts = resource.Split (':');  				role = parts [0];  				if (role.Length > 50)  					role = role.Substring (0' 50);  				label = resource.Split ('/').Last ().Replace ('_'' ' ');  				topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  			}  		}  		break;  	}  	break;  case XmlNodeType.EndElement:  	switch (reader.Name) {  	case "Topic":  		if (topic != null) {  			topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  			try {  				_store.AddTopic (topic);  			}  			catch {  			}  			count++;  			if (count % 100 == 0)  				Console.WriteLine (count);  			topic = null;  		}  		break;  	}  	ctx.Pop ();  	break;  case XmlNodeType.Text:  	value = reader.Value.Replace ('_'' ' ');  	if (value.Length > 50)  		value = value.Substring (0' 50);  	switch (ctx.Peek ()) {  	case "d:Title":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("label"' value);  		}  		break;  	case "d:Description":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("description"' value);  		}  		break;  	case "lastUpdate":  		if (ctx.Peek (-1) == "Topic" && topic != null) {  			topic.AddMetadata ("last-update"' value);  		}  		break;  	}  	break;  }  
Missing Default,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following switch statement is missing a default case: switch (reader.Name) {  case "Topic":  	if (topic == null) {  		id = reader.GetAttribute ("id"' _rdf);  		if (!String.IsNullOrWhiteSpace (id)) {  			topic = new Topic.Builder (id);  		}  	}  	break;  case "related":  	resource = reader.GetAttribute ("resource"' _rdf);  	if (!String.IsNullOrWhiteSpace (resource)) {  		if (topic != null) {  			label = resource.Split ('/').Last ().Replace ('_'' ' ');  			topic.AddAssociation ("default"' "navigation"' "related"' resource' label);  		}  	}  	break;  case "narrow":  	resource = reader.GetAttribute ("resource"' _rdf);  	if (!String.IsNullOrWhiteSpace (resource)) {  		if (topic != null) {  			label = resource.Split ('/').Last ().Replace ('_'' ' ');  			assoc = topic.AddAssociation ("default"' "category"' "narrow"' resource' label);  			//Association.Builder broader = new Association.Builder()   			//{  			//	Type = "category"'  			//	Role = "broader"'  			//	Parent = assoc.Reference'  			//	Reference = topic.Id  			//};  			//label = topic.Id.Split('/').Last().Replace('_'' ' ');  			//broader.AddMetadata("label"' label);  			//_store.AddAssociation(broader);  		}  	}  	break;  case "symbolic":  	resource = reader.GetAttribute ("resource"' _rdf);  	if (!String.IsNullOrWhiteSpace (resource)) {  		if (topic != null) {  			parts = resource.Split (':');  			role = parts [0];  			if (role.Length > 50)  				role = role.Substring (0' 50);  			label = resource.Split ('/').Last ().Replace ('_'' ' ');  			topic.AddAssociation ("default"' "similar"' role' parts [1]' label);  		}  	}  	break;  }  
Missing Default,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following switch statement is missing a default case: switch (reader.Name) {  case "Topic":  	if (topic != null) {  		topic.AddOccurrence ("default"' "wiki"' "markdown"' "self"' "To be or not to be that is the question.");  		try {  			_store.AddTopic (topic);  		}  		catch {  		}  		count++;  		if (count % 100 == 0)  			Console.WriteLine (count);  		topic = null;  	}  	break;  }  
Missing Default,Conclave.Map.Store,DmozReader,C:\repos\guy-murphy_conclave-public\Conclave.Map\Store\DmozReader.cs,ReadStructure,The following switch statement is missing a default case: switch (ctx.Peek ()) {  case "d:Title":  	if (ctx.Peek (-1) == "Topic" && topic != null) {  		topic.AddMetadata ("label"' value);  	}  	break;  case "d:Description":  	if (ctx.Peek (-1) == "Topic" && topic != null) {  		topic.AddMetadata ("description"' value);  	}  	break;  case "lastUpdate":  	if (ctx.Peek (-1) == "Topic" && topic != null) {  		topic.AddMetadata ("last-update"' value);  	}  	break;  }  
