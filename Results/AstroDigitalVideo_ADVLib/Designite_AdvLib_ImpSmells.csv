Implementation smell,Namespace,Class,File,Method,Description
Long Method,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The method has 201 lines of code.
Long Method,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,The method has 103 lines of code.
Complex Method,Adv,AdvError,C:\repos\AstroDigitalVideo_ADVLib\AdvError.cs,ResolveErrorMessage,Cyclomatic complexity of the method is 27
Complex Method,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,LoadTags,Cyclomatic complexity of the method is 11
Complex Method,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,GetMainFramePixels,Cyclomatic complexity of the method is 26
Complex Method,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,GetCalibrationFramePixels,Cyclomatic complexity of the method is 26
Complex Method,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,Cyclomatic complexity of the method is 65
Complex Method,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,Cyclomatic complexity of the method is 9
Complex Method,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,Cyclomatic complexity of the method is 56
Complex Method,Adv,CrossPlatform,C:\repos\AstroDigitalVideo_ADVLib\CrossPlatform.cs,CrossPlatform,Cyclomatic complexity of the method is 19
Complex Method,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,Cyclomatic complexity of the method is 25
Complex Method,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,Cyclomatic complexity of the method is 48
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddFrame,The method has 10 parameters.
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddVideoFrame,The method has 7 parameters.
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddVideoFrame,The method has 5 parameters.
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddCalibrationFrame,The method has 7 parameters.
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddCalibrationFrame,The method has 5 parameters.
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddFrame,The method has 10 parameters.
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddVideoFrame,The method has 7 parameters.
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddVideoFrame,The method has 5 parameters.
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddCalibrationFrame,The method has 7 parameters.
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddCalibrationFrame,The method has 5 parameters.
Long Parameter List,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,The method has 6 parameters.
Long Parameter List,Adv,AdvTimeStamp,C:\repos\AstroDigitalVideo_ADVLib\Helpers.cs,FromDateTime,The method has 7 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer1_DefineImageLayout32,The method has 6 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_BeginFrame32,The method has 6 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_GetFramePixels32,The method has 5 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer1_DefineImageLayout64,The method has 6 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_BeginFrame64,The method has 6 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_GetFramePixels64,The method has 5 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer1_DefineImageLayoutUnix,The method has 6 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_BeginFrameUnix,The method has 6 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_GetFramePixelsUnix,The method has 5 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,BeginFrame,The method has 6 parameters.
Long Parameter List,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,GetFramePixels,The method has 6 parameters.
Long Parameter List,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,AddVideoFrame,The method has 6 parameters.
Long Parameter List,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,AddVideoFrame,The method has 5 parameters.
Long Identifier,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the parameter utcTimestampAccuracyInNanoseconds is 33.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_BeginFrame32,The length of the parameter utcStartTimeNanosecondsSinceAdvZeroEpoch is 40.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_BeginFrame32,The length of the parameter utcStartTimeNanosecondsSinceAdvZeroEpoch is 40.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_DefineStatusSection32,The length of the parameter utcTimestampAccuracyInNanoseconds is 33.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_BeginFrame64,The length of the parameter utcStartTimeNanosecondsSinceAdvZeroEpoch is 40.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_BeginFrame64,The length of the parameter utcStartTimeNanosecondsSinceAdvZeroEpoch is 40.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_DefineStatusSection64,The length of the parameter utcTimestampAccuracyInNanoseconds is 33.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_BeginFrameUnix,The length of the parameter utcStartTimeNanosecondsSinceAdvZeroEpoch is 40.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_BeginFrameUnix,The length of the parameter utcStartTimeNanosecondsSinceAdvZeroEpoch is 40.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,AdvVer2_DefineStatusSectionUnix,The length of the parameter utcTimestampAccuracyInNanoseconds is 33.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,BeginFrame,The length of the parameter utcStartTimeNanosecondsSinceAdvZeroEpoch is 40.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,BeginFrame,The length of the parameter utcStartTimeNanosecondsSinceAdvZeroEpoch is 40.
Long Identifier,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,DefineStatusSection,The length of the parameter utcTimestampAccuracyInNanoseconds is 33.
Long Statement,Adv,AdvError,C:\repos\AstroDigitalVideo_ADVLib\AdvError.cs,RaiseError,The length of the statement  "				System.Windows.Forms.MessageBox.Show (errorMessage' "AdvLib"' System.Windows.Forms.MessageBoxButtons.OK' System.Windows.Forms.MessageBoxIcon.Error); " is 148.
Long Statement,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,EnsureStatusTagDefinitions,The length of the statement  "		if (AdvLib.GetStatusTagInfo (i' out tagType' out tagName) == AdvError.S_OK && !string.IsNullOrEmpty (tagName) && tagType != null) { " is 131.
Long Statement,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,GetMainFramePixels,The length of the statement  "		throw new AdvLibException (string.Format ("Main frame number must be bwtween 0 and {0}"' MainSteamInfo.FrameCount - 1)); " is 120.
Long Statement,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,GetMainFramePixels,The length of the statement  "		throw new AdvLibException (string.Format ("Main frame number must be bwtween 0 and {0}"' MainSteamInfo.FrameCount - 1)); " is 120.
Long Statement,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,GetCalibrationFramePixels,The length of the statement  "		throw new AdvLibException (string.Format ("Calibration frame number must be bwtween 0 and {0}"' CalibrationSteamInfo.FrameCount - 1)); " is 134.
Long Statement,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,GetCalibrationFramePixels,The length of the statement  "		throw new AdvLibException (string.Format ("Calibration frame number must be bwtween 0 and {0}"' CalibrationSteamInfo.FrameCount - 1)); " is 134.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "		AdvError.Check (AdvLib.DefineExternalClockForCalibrationStream (m_CalibrationClockFrequency' m_CalibrationTicksTimingAccuracy)); " is 128.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "		AdvLib.AddOrUpdateFileTag ("EFFECTIVE-PIXEL-SIZE-X"' FileMetaData.EffectivePixelSizeX.ToString (CultureInfo.InvariantCulture)); " is 127.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "		AdvLib.AddOrUpdateFileTag ("EFFECTIVE-PIXEL-SIZE-Y"' FileMetaData.EffectivePixelSizeY.ToString (CultureInfo.InvariantCulture)); " is 127.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "		AdvLib.AddOrUpdateFileTag ("EFFECTIVE-FRAME-RATE"' FileMetaData.EffectiveFrameRate.ToString (CultureInfo.InvariantCulture)); " is 124.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.AddOrUpdateImageSectionTag ("IMAGE-BITPIX"' ImageConfig.ImageBitsPerPixel.ToString (CultureInfo.InvariantCulture)); " is 122.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "		AdvLib.AddOrUpdateImageSectionTag ("IMAGE-MAX-PIXEL-VALUE"' ImageConfig.ImagePixelMaxValue.Value.ToString (CultureInfo.InvariantCulture)); " is 138.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "		m_BayerPatternIsRGBorGBR = ImageConfig.ImageBayerPattern == BayerPattern.BGR || ImageConfig.ImageBayerPattern == BayerPattern.RGB; " is 130.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "	//TrackedSatellites - Number of GPS satellites tracked at the moment when the frame was timed by the GPS-based hardware timer (if applicable)  " is 141.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "	//AlmanacOffset - The determined almanac offset (and applied to the timestamp) by the GPS-based hardware timer (if applicable) " is 126.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "	//UserCommand - A list of commands issued by the user during the generation of the current video frame. The commands are saved as free text (for example: Changed gain) " is 167.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The length of the statement  "		errorCode = AdvLib.DefineStatusSectionTag ("HardwareTimerFrameId"' Adv2TagType.Long64' out m_TAGID_HardwareTimerFrameId); " is 121.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddFrame,The length of the statement  "		throw new InvalidOperationException ("To add a 24bit colour image in an RGB or BGR ImageBayerPattern the pixel data must be passed as a byte[]."); " is 146.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddFrame,The length of the statement  "	if (layoutIdForCurrentFramerate == CFG_ADV_LAYOUT_11_COLOUR24_UNCOMPRESSED || layoutIdForCurrentFramerate == CFG_ADV_LAYOUT_12_PACKED24_COMPRESSED_QLZ) " is 151.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddFrame,The length of the statement  "		throw new InvalidOperationException (String.Format ("This image layout ({0}) cannot be used when pixels are passed as ushort[]"' layoutIdForCurrentFramerate)); " is 159.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddVideoFrame,The length of the statement  "	AddFrame (AdvStream.MainStream' pixels' compressIfPossible' preferredCompression' m_PrevFrameEndTimestampAutoTicks' ticks' startUtcTimeStamp' endUtcTimeStamp' metadata' imageData); " is 180.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddVideoFrame,The length of the statement  "	AddVideoFrame (pixels' compressIfPossible' preferredCompression' new AdvTimeStamp ()' new AdvTimeStamp ()' metadata' imageData); " is 128.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddCalibrationFrame,The length of the statement  "	AddFrame (AdvStream.CalibrationStream' pixels' compressIfPossible' preferredCompression' m_PrevFrameEndTimestampAutoTicks' ticks' startUtcTimeStamp' endUtcTimeStamp' metadata' imageData); " is 187.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddCalibrationFrame,The length of the statement  "	AddCalibrationFrame (pixels' compressIfPossible' preferredCompression' new AdvTimeStamp ()' new AdvTimeStamp ()' metadata' imageData); " is 134.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddFrame,The length of the statement  "		throw new InvalidOperationException ("12bit pixel data can be only saved as 12bit byte array (2 pixels saved in 3 bytes)"); " is 123.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddFrame,The length of the statement  "		throw new InvalidOperationException ("24bit colour pixel data can be only saved with an RGB or BGR ImageBayerPattern."); " is 120.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddFrame,The length of the statement  "	if (m_BayerPatternIsRGBorGBR && layoutIdForCurrentFramerate != CFG_ADV_LAYOUT_11_COLOUR24_UNCOMPRESSED && layoutIdForCurrentFramerate != CFG_ADV_LAYOUT_12_PACKED24_COMPRESSED_QLZ) " is 179.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddFrame,The length of the statement  "		throw new InvalidOperationException ("When an RGB or BGR ImageBayerPattern is in use an 8BIT-COLOR-IMAGE image layout must be selected."); " is 138.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddVideoFrame,The length of the statement  "	AddFrame (AdvStream.MainStream' pixels' compressIfPossible' preferredCompression' m_PrevFrameEndTimestampAutoTicks' ticks' startUtcTimeStamp' endUtcTimeStamp' metadata' imageData); " is 180.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddVideoFrame,The length of the statement  "	AddVideoFrame (pixels' compressIfPossible' preferredCompression' new AdvTimeStamp ()' new AdvTimeStamp ()' metadata' imageData); " is 128.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddCalibrationFrame,The length of the statement  "	AddFrame (AdvStream.CalibrationStream' pixels' compressIfPossible' preferredCompression' m_PrevFrameEndTimestampAutoTicks' ticks' startUtcTimeStamp' endUtcTimeStamp' metadata' imageData); " is 187.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddCalibrationFrame,The length of the statement  "	AddCalibrationFrame (pixels' compressIfPossible' preferredCompression' new AdvTimeStamp ()' new AdvTimeStamp ()' metadata' imageData); " is 134.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The length of the statement  "			return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.Lagarith16 ? CFG_ADV_LAYOUT_9_PACKED12_COMPRESSED_LTH16 /* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */: CFG_ADV_LAYOUT_10_PACKED12_COMPRESSED_QLZ/* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */) : CFG_ADV_LAYOUT_8_PACKED12_UNCOMPRESSED; " is 337.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The length of the statement  "		return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.QuickLZ ? CFG_ADV_LAYOUT_3_RAW_COMPRESSED_QLZ /* "FULL-IMAGE-RAW"' "QUICKLZ"' 16' 0 */: CFG_ADV_LAYOUT_2_RAW_COMPRESSED_LTH16/* "FULL-IMAGE-RAW"' "LAGARITH16"' 16' 0 */) : CFG_ADV_LAYOUT_1_RAW_UNCOMPRESSED; " is 315.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The length of the statement  "		return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.Lagarith16 ? CFG_ADV_LAYOUT_7_RAW_COMPRESSED_LTH16 /* "FULL-IMAGE-RAW"' "QUICKLZ"' 8' 0 */: CFG_ADV_LAYOUT_6_RAW_COMPRESSED_QLZ/* "FULL-IMAGE-RAW"' "QUICKLZ"' 8' 0 */) : CFG_ADV_LAYOUT_5_RAW_UNCOMPRESSED; " is 313.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The length of the statement  "		/* "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 12 */else if (imageData == AdvImageData.PixelData12Bit)// NOTE: Think about this more. What is the difference between wanting to use a 12bit packed layout and passing the 12bit input data as bytes (2 per pixel) or shorts (1 per pixel) " is 271.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The length of the statement  "		// Should the input actually contain packed 12bit data (3 bytes per 2 pixels) and if not then how is this case going to be supported?? " is 134.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The length of the statement  "			return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.Lagarith16 ? CFG_ADV_LAYOUT_9_PACKED12_COMPRESSED_LTH16 /* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */: CFG_ADV_LAYOUT_10_PACKED12_COMPRESSED_QLZ/* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */) : CFG_ADV_LAYOUT_8_PACKED12_UNCOMPRESSED; " is 337.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The length of the statement  "		return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.QuickLZ ? CFG_ADV_LAYOUT_3_RAW_COMPRESSED_QLZ /* "FULL-IMAGE-RAW"' "QUICKLZ"' 16' 0 */: CFG_ADV_LAYOUT_2_RAW_COMPRESSED_LTH16/* "FULL-IMAGE-RAW"' "LAGARITH16"' 16' 0 */) : CFG_ADV_LAYOUT_1_RAW_UNCOMPRESSED; " is 315.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,The length of the statement  "				throw new AdvLibException ("A custom clock for the Main Stream must be defined when providing start and end clock ticks."); " is 123.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,The length of the statement  "				throw new AdvLibException ("A custom clock for the Calibration Stream must be defined when providing start and end clock ticks."); " is 130.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,The length of the statement  "		int errorCode = AdvLib.BeginFrame (streamId' startClockTicks.Value' endClockTicks.Value' elapsedTicks > 0L ? elapsedTicks : 0L' startUtcTimeStamp.NanosecondsAfterAdvZeroEpoch' (uint)(endUtcTimeStamp.NanosecondsAfterAdvZeroEpoch - startUtcTimeStamp.NanosecondsAfterAdvZeroEpoch)); " is 279.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,The length of the statement  "				throw new AdvLibException ("Must provide start and end clock ticks when a custom clock for the Main Stream is defined."); " is 121.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,The length of the statement  "				throw new AdvLibException ("Must provide start and end clock ticks when a custom clock for the Calibration Stream is defined."); " is 128.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,The length of the statement  "		int errorCode = AdvLib.BeginFrame (streamId' startUtcTimeStamp.NanosecondsAfterAdvZeroEpoch' (uint)(endUtcTimeStamp.NanosecondsAfterAdvZeroEpoch - startUtcTimeStamp.NanosecondsAfterAdvZeroEpoch)); " is 196.
Long Statement,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,The length of the statement  "		AdvLib.FrameAddStatusTagInt64 (m_TAGID_SystemTime' metadata.SystemTime.NanosecondsAfterAdvZeroEpoch > 0 ? (long)metadata.SystemTime.NanosecondsAfterAdvZeroEpoch : 0); " is 166.
Long Statement,Adv,Extensions,C:\repos\AstroDigitalVideo_ADVLib\Extensions.cs,GetFullStackTrace,The length of the statement  "		output.AppendFormat ("{0} : {1}\r\n{2}\r\n-------------------------------------\r\n\r\n"' currEx.GetType ()' currEx.Message' currEx.StackTrace); " is 144.
Long Statement,Adv,AdvTimeStamp,C:\repos\AstroDigitalVideo_ADVLib\Helpers.cs,FromDateTime,The length of the statement  "	return AdvTimeStamp.FromWindowsTicks ((ulong)new DateTime (year' month' day' hours' minutes' seconds' milliseconds).Ticks); " is 123.
Long Statement,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,BeginFrame,The length of the statement  "			return AdvVer2_BeginFrameUnix (streamId' startTicks' endTicks' elapsedTicksFromStart' utcStartTimeNanosecondsSinceAdvZeroEpoch' utcExposureNanoseconds); " is 152.
Long Statement,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,BeginFrame,The length of the statement  "			return AdvVer2_BeginFrame64 (streamId' startTicks' endTicks' elapsedTicksFromStart' utcStartTimeNanosecondsSinceAdvZeroEpoch' utcExposureNanoseconds); " is 150.
Long Statement,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,BeginFrame,The length of the statement  "			return AdvVer2_BeginFrame32 (streamId' startTicks' endTicks' elapsedTicksFromStart' utcStartTimeNanosecondsSinceAdvZeroEpoch' utcExposureNanoseconds); " is 150.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.Obsolete.AdvVer1.AddFileTag ("TIMER-FIRMWARE-VERSION"' EnsureStringLength (FileMetaData.RecorderTimerFirmwareVersion)); " is 126.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.Obsolete.AdvVer1.AddFileTag ("CAMERA-SENSOR-RESOLUTION"' EnsureStringLength (FileMetaData.CameraSensorResolution)); " is 122.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.Obsolete.AdvVer1.AddFileTag ("CAMERA-FIRMWARE-VERSION"' EnsureStringLength (FileMetaData.CameraFirmwareVersion)); " is 120.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.Obsolete.AdvVer1.AddFileTag ("CAMERA-FIRMWARE-BUILD-TIME"' EnsureStringLength (FileMetaData.CameraFirmwareBuildTime)); " is 125.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.Obsolete.AdvVer1.DefineImageSection (ImageConfig.ImageWidth' ImageConfig.ImageHeight' ImageConfig.CameraBitsPerPixel); " is 125.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.Obsolete.AdvVer1.AddOrUpdateImageSectionTag ("IMAGE-BYTE-ORDER"' ImageConfig.ImageBigEndian ? "BIG-ENDIAN" : "LITTLE-ENDIAN"); " is 133.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.Obsolete.AdvVer1.AddOrUpdateImageSectionTag ("IMAGE-DYNABITS"' ImageConfig.ImageBitsPerPixel.ToString (CultureInfo.InvariantCulture)); " is 141.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.Obsolete.AdvVer1.DefineImageLayout (CFG_ADV_LAYOUT_1_UNCOMPRESSED' "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 16' 0' null); " is 121.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.Obsolete.AdvVer1.DefineImageLayout (CFG_ADV_LAYOUT_2_COMPRESSED' "FULL-IMAGE-DIFFERENTIAL-CODING"' "QUICKLZ"' 12' 32' "PREV-FRAME"); " is 139.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "	AdvLib.Obsolete.AdvVer1.DefineImageLayout (CFG_ADV_LAYOUT_4_UNCOMPRESSED' "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 8' 0' null); " is 120.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "		m_TAGID_TrackedGPSSatellites = AdvLib.Obsolete.AdvVer1.DefineStatusSectionTag ("GPSTrackedSatellites"' AdvTagType.UInt8); " is 121.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The length of the statement  "			uint tagId = AdvLib.Obsolete.AdvVer1.DefineStatusSectionTag (tagName' StatusSectionConfig.AdditionalStatusTags [tagName]); " is 122.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The length of the statement  "	bool frameStartedOk = AdvLib.Obsolete.AdvVer1.BeginFrame ((long)timeStamp.MillisecondsAfterAdvZeroEpoch' elapsedTimeMilliseconds > 0 ? (uint)elapsedTimeMilliseconds : 0' exposureIn10thMilliseconds); " is 198.
Long Statement,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The length of the statement  "		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag64 (m_TAGID_SystemTime' metadata.SystemTime.MillisecondsAfterAdvZeroEpoch > 0 ? (ulong)metadata.SystemTime.MillisecondsAfterAdvZeroEpoch : 0); " is 183.
Empty Catch Block,Adv,AdvError,C:\repos\AstroDigitalVideo_ADVLib\AdvError.cs,RaiseError,The method has an empty catch block.
Magic Number,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,AdvFile2,The following statement contains a magic number: if (fileVersionOrErrorCode == 0)  	throw new AdvLibException (string.Format ("'{0}' is not an ADV file."' fileName));  else if (fileVersionOrErrorCode < 0)  	throw new AdvLibException (string.Format ("There was an error opening '{0}'. Error code is: {1}"' fileName' fileVersionOrErrorCode));  else if (fileVersionOrErrorCode != 2)  	throw new AdvLibException (string.Format ("'{0}' is not an ADV version 2 file."' fileName));  
Magic Number,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,AdvFile2,The following statement contains a magic number: if (fileVersionOrErrorCode < 0)  	throw new AdvLibException (string.Format ("There was an error opening '{0}'. Error code is: {1}"' fileName' fileVersionOrErrorCode));  else if (fileVersionOrErrorCode != 2)  	throw new AdvLibException (string.Format ("'{0}' is not an ADV version 2 file."' fileName));  
Magic Number,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,AdvFile2,The following statement contains a magic number: if (fileVersionOrErrorCode != 2)  	throw new AdvLibException (string.Format ("'{0}' is not an ADV version 2 file."' fileName));  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_1_RAW_UNCOMPRESSED' "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 16);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_2_RAW_COMPRESSED_LTH16' "FULL-IMAGE-RAW"' "LAGARITH16"' 16);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_3_RAW_COMPRESSED_QLZ' "FULL-IMAGE-RAW"' "QUICKLZ"' 16);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_4_RAW_UNCOMPRESSED' "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 12);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_5_RAW_UNCOMPRESSED' "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 8);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_6_RAW_COMPRESSED_QLZ' "FULL-IMAGE-RAW"' "QUICKLZ"' 8);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_7_RAW_COMPRESSED_LTH16' "FULL-IMAGE-RAW"' "LAGARITH16"' 8);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_8_PACKED12_UNCOMPRESSED' "12BIT-IMAGE-PACKED"' "UNCOMPRESSED"' 12);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_9_PACKED12_COMPRESSED_LTH16' "12BIT-IMAGE-PACKED"' "LAGARITH16"' 12);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_10_PACKED12_COMPRESSED_QLZ' "12BIT-IMAGE-PACKED"' "QUICKLZ"' 12);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_11_COLOUR24_UNCOMPRESSED' "8BIT-COLOR-IMAGE"' "UNCOMPRESSED"' 8);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_12_PACKED24_COMPRESSED_QLZ' "8BIT-COLOR-IMAGE"' "QUICKLZ"' 8);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.DefineImageLayout (CFG_ADV_LAYOUT_13_PACKED24_COMPRESSED_LTH16' "8BIT-COLOR-IMAGE"' "LAGARITH16"' 8);  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,AddFrame,The following statement contains a magic number: if (ImageConfig.ImageBitsPerPixel == 12 && imageData != AdvImageData.PixelData12Bit)  	throw new InvalidOperationException ("12bit pixel data can be only saved as 12bit byte array (2 pixels saved in 3 bytes)");  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The following statement contains a magic number: if (inputAs16BitArray) {  	if (imageData != AdvImageData.PixelDepth16Bit)  		throw new NotSupportedException ();  	if (ImageConfig.ImageBitsPerPixel == 12) {  		// Input data come as 16bit pixels but actual bit depth is 12bit. We can use a 12bit packed layout      		return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.Lagarith16 ? CFG_ADV_LAYOUT_9_PACKED12_COMPRESSED_LTH16 /* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */: CFG_ADV_LAYOUT_10_PACKED12_COMPRESSED_QLZ/* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */) : CFG_ADV_LAYOUT_8_PACKED12_UNCOMPRESSED;  		/* "12BIT-IMAGE-PACKED"' "UNCOMPRESSED"' 8 */}  	// When the input data is 16bit we always save as 16 bit regardless of the ImageBitsPerPixel  	return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.QuickLZ ? CFG_ADV_LAYOUT_3_RAW_COMPRESSED_QLZ /* "FULL-IMAGE-RAW"' "QUICKLZ"' 16' 0 */: CFG_ADV_LAYOUT_2_RAW_COMPRESSED_LTH16/* "FULL-IMAGE-RAW"' "LAGARITH16"' 16' 0 */) : CFG_ADV_LAYOUT_1_RAW_UNCOMPRESSED;  	/* "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 16 */}  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The following statement contains a magic number: if (ImageConfig.ImageBitsPerPixel == 12) {  	// Input data come as 16bit pixels but actual bit depth is 12bit. We can use a 12bit packed layout      	return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.Lagarith16 ? CFG_ADV_LAYOUT_9_PACKED12_COMPRESSED_LTH16 /* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */: CFG_ADV_LAYOUT_10_PACKED12_COMPRESSED_QLZ/* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */) : CFG_ADV_LAYOUT_8_PACKED12_UNCOMPRESSED;  	/* "12BIT-IMAGE-PACKED"' "UNCOMPRESSED"' 8 */}  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The following statement contains a magic number: if (ImageConfig.ImageBitsPerPixel <= 8) {  	if (imageData != AdvImageData.PixelDepth8Bit)  		throw new NotSupportedException ();  	return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.Lagarith16 ? CFG_ADV_LAYOUT_7_RAW_COMPRESSED_LTH16 /* "FULL-IMAGE-RAW"' "QUICKLZ"' 8' 0 */: CFG_ADV_LAYOUT_6_RAW_COMPRESSED_QLZ/* "FULL-IMAGE-RAW"' "QUICKLZ"' 8' 0 */) : CFG_ADV_LAYOUT_5_RAW_UNCOMPRESSED;  	/* "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 8 */}  else if (ImageConfig.ImageBitsPerPixel == 12) {  	if (imageData == AdvImageData.PixelDepth16Bit)  		return CFG_ADV_LAYOUT_4_RAW_UNCOMPRESSED;  	/* "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 12 */else if (imageData == AdvImageData.PixelData12Bit)// NOTE: Think about this more. What is the difference between wanting to use a 12bit packed layout and passing the 12bit input data as bytes (2 per pixel) or shorts (1 per pixel)  	// Should the input actually contain packed 12bit data (3 bytes per 2 pixels) and if not then how is this case going to be supported??  	 {  		return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.Lagarith16 ? CFG_ADV_LAYOUT_9_PACKED12_COMPRESSED_LTH16 /* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */: CFG_ADV_LAYOUT_10_PACKED12_COMPRESSED_QLZ/* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */) : CFG_ADV_LAYOUT_8_PACKED12_UNCOMPRESSED;  		/* "12BIT-IMAGE-PACKED"' "UNCOMPRESSED"' 8 */}  	else  		throw new NotSupportedException ("TODO");  }  else {  	// NOTE: 16bit data presented as little endian byte array  	if (imageData != AdvImageData.PixelDepth16Bit)  		throw new NotSupportedException ();  	// TODO: What about big endian data?  	return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.QuickLZ ? CFG_ADV_LAYOUT_3_RAW_COMPRESSED_QLZ /* "FULL-IMAGE-RAW"' "QUICKLZ"' 16' 0 */: CFG_ADV_LAYOUT_2_RAW_COMPRESSED_LTH16/* "FULL-IMAGE-RAW"' "LAGARITH16"' 16' 0 */) : CFG_ADV_LAYOUT_1_RAW_UNCOMPRESSED;  	/* "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 16 */}  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The following statement contains a magic number: if (ImageConfig.ImageBitsPerPixel <= 8) {  	if (imageData != AdvImageData.PixelDepth8Bit)  		throw new NotSupportedException ();  	return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.Lagarith16 ? CFG_ADV_LAYOUT_7_RAW_COMPRESSED_LTH16 /* "FULL-IMAGE-RAW"' "QUICKLZ"' 8' 0 */: CFG_ADV_LAYOUT_6_RAW_COMPRESSED_QLZ/* "FULL-IMAGE-RAW"' "QUICKLZ"' 8' 0 */) : CFG_ADV_LAYOUT_5_RAW_UNCOMPRESSED;  	/* "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 8 */}  else if (ImageConfig.ImageBitsPerPixel == 12) {  	if (imageData == AdvImageData.PixelDepth16Bit)  		return CFG_ADV_LAYOUT_4_RAW_UNCOMPRESSED;  	/* "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 12 */else if (imageData == AdvImageData.PixelData12Bit)// NOTE: Think about this more. What is the difference between wanting to use a 12bit packed layout and passing the 12bit input data as bytes (2 per pixel) or shorts (1 per pixel)  	// Should the input actually contain packed 12bit data (3 bytes per 2 pixels) and if not then how is this case going to be supported??  	 {  		return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.Lagarith16 ? CFG_ADV_LAYOUT_9_PACKED12_COMPRESSED_LTH16 /* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */: CFG_ADV_LAYOUT_10_PACKED12_COMPRESSED_QLZ/* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */) : CFG_ADV_LAYOUT_8_PACKED12_UNCOMPRESSED;  		/* "12BIT-IMAGE-PACKED"' "UNCOMPRESSED"' 8 */}  	else  		throw new NotSupportedException ("TODO");  }  else {  	// NOTE: 16bit data presented as little endian byte array  	if (imageData != AdvImageData.PixelDepth16Bit)  		throw new NotSupportedException ();  	// TODO: What about big endian data?  	return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.QuickLZ ? CFG_ADV_LAYOUT_3_RAW_COMPRESSED_QLZ /* "FULL-IMAGE-RAW"' "QUICKLZ"' 16' 0 */: CFG_ADV_LAYOUT_2_RAW_COMPRESSED_LTH16/* "FULL-IMAGE-RAW"' "LAGARITH16"' 16' 0 */) : CFG_ADV_LAYOUT_1_RAW_UNCOMPRESSED;  	/* "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 16 */}  
Magic Number,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,GetImageLayoutId,The following statement contains a magic number: if (ImageConfig.ImageBitsPerPixel == 12) {  	if (imageData == AdvImageData.PixelDepth16Bit)  		return CFG_ADV_LAYOUT_4_RAW_UNCOMPRESSED;  	/* "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 12 */else if (imageData == AdvImageData.PixelData12Bit)// NOTE: Think about this more. What is the difference between wanting to use a 12bit packed layout and passing the 12bit input data as bytes (2 per pixel) or shorts (1 per pixel)  	// Should the input actually contain packed 12bit data (3 bytes per 2 pixels) and if not then how is this case going to be supported??  	 {  		return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.Lagarith16 ? CFG_ADV_LAYOUT_9_PACKED12_COMPRESSED_LTH16 /* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */: CFG_ADV_LAYOUT_10_PACKED12_COMPRESSED_QLZ/* "12BIT-IMAGE-PACKED"' "QUICKLZ"' 8' 0 */) : CFG_ADV_LAYOUT_8_PACKED12_UNCOMPRESSED;  		/* "12BIT-IMAGE-PACKED"' "UNCOMPRESSED"' 8 */}  	else  		throw new NotSupportedException ("TODO");  }  else {  	// NOTE: 16bit data presented as little endian byte array  	if (imageData != AdvImageData.PixelDepth16Bit)  		throw new NotSupportedException ();  	// TODO: What about big endian data?  	return useCompression ? (preferredCompression.HasValue && preferredCompression.Value == PreferredCompression.QuickLZ ? CFG_ADV_LAYOUT_3_RAW_COMPRESSED_QLZ /* "FULL-IMAGE-RAW"' "QUICKLZ"' 16' 0 */: CFG_ADV_LAYOUT_2_RAW_COMPRESSED_LTH16/* "FULL-IMAGE-RAW"' "LAGARITH16"' 16' 0 */) : CFG_ADV_LAYOUT_1_RAW_UNCOMPRESSED;  	/* "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 16 */}  
Magic Number,Adv,AdvTimeStamp,C:\repos\AstroDigitalVideo_ADVLib\Helpers.cs,FromWindowsTicks,The following statement contains a magic number: return new AdvTimeStamp () {  	NanosecondsAfterAdvZeroEpoch = (windowsTicks - ADV_EPOCH_ZERO_TICKS) * 100'  	MillisecondsAfterAdvZeroEpoch = (windowsTicks - ADV_EPOCH_ZERO_TICKS) / 10000  };  
Magic Number,Adv,AdvTimeStamp,C:\repos\AstroDigitalVideo_ADVLib\Helpers.cs,FromWindowsTicks,The following statement contains a magic number: return new AdvTimeStamp () {  	NanosecondsAfterAdvZeroEpoch = (windowsTicks - ADV_EPOCH_ZERO_TICKS) * 100'  	MillisecondsAfterAdvZeroEpoch = (windowsTicks - ADV_EPOCH_ZERO_TICKS) / 10000  };  
Magic Number,Adv,AdvTimeStamp,C:\repos\AstroDigitalVideo_ADVLib\Helpers.cs,AddNanoseconds,The following statement contains a magic number: rv.MillisecondsAfterAdvZeroEpoch = (ulong)(NanosecondsAfterAdvZeroEpoch + (nanoseconds / 1000000.0));  
Magic Number,Adv,Library,C:\repos\AstroDigitalVideo_ADVLib\Library.cs,GetLibraryPath,The following statement contains a magic number: GetModuleFileName (handle' outputStr' 1024);  
Magic Number,Adv,AdvLib,C:\repos\AstroDigitalVideo_ADVLib\PInvoke.cs,Is64Bit,The following statement contains a magic number: if (IntPtr.Size == 8) {  	return true;  }  else {  	return false;  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,EnsureStringLength,The following statement contains a magic number: if (input == null)  	return string.Empty;  else if (input.Length > 255)  	return input.Substring (0' 255);  else  	return input;  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,EnsureStringLength,The following statement contains a magic number: if (input == null)  	return string.Empty;  else if (input.Length > 255)  	return input.Substring (0' 255);  else  	return input;  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,EnsureStringLength,The following statement contains a magic number: if (input.Length > 255)  	return input.Substring (0' 255);  else  	return input;  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,EnsureStringLength,The following statement contains a magic number: if (input.Length > 255)  	return input.Substring (0' 255);  else  	return input;  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,EnsureStringLength,The following statement contains a magic number: return input.Substring (0' 255);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.DefineImageLayout (CFG_ADV_LAYOUT_1_UNCOMPRESSED' "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 16' 0' null);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.DefineImageLayout (CFG_ADV_LAYOUT_2_COMPRESSED' "FULL-IMAGE-DIFFERENTIAL-CODING"' "QUICKLZ"' 12' 32' "PREV-FRAME");  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.DefineImageLayout (CFG_ADV_LAYOUT_2_COMPRESSED' "FULL-IMAGE-DIFFERENTIAL-CODING"' "QUICKLZ"' 12' 32' "PREV-FRAME");  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.DefineImageLayout (CFG_ADV_LAYOUT_3_COMPRESSED' "FULL-IMAGE-RAW"' "QUICKLZ"' 16' 0' null);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.DefineImageLayout (CFG_ADV_LAYOUT_4_UNCOMPRESSED' "FULL-IMAGE-RAW"' "UNCOMPRESSED"' 8' 0' null);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,StartRecordingNewFile,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.DefineImageLayout (CFG_ADV_LAYOUT_5_COMPRESSED' "FULL-IMAGE-RAW"' "QUICKLZ"' 8' 0' null);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,AddVideoFrame,The following statement contains a magic number: if (imageData == AdvImageData.PixelDepth16Bit) {  	byte layoutIdForCurrentFramerate = compress ? CFG_ADV_LAYOUT_3_COMPRESSED : CFG_ADV_LAYOUT_1_UNCOMPRESSED;  	AdvLib.Obsolete.AdvVer1.FrameAddImageBytes (layoutIdForCurrentFramerate' pixels' 16);  }  else if (imageData == AdvImageData.PixelDepth8Bit) {  	byte layoutIdForCurrentFramerate = compress ? CFG_ADV_LAYOUT_5_COMPRESSED : CFG_ADV_LAYOUT_4_UNCOMPRESSED;  	AdvLib.Obsolete.AdvVer1.FrameAddImageBytes (layoutIdForCurrentFramerate' pixels' 8);  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,AddVideoFrame,The following statement contains a magic number: if (imageData == AdvImageData.PixelDepth16Bit) {  	byte layoutIdForCurrentFramerate = compress ? CFG_ADV_LAYOUT_3_COMPRESSED : CFG_ADV_LAYOUT_1_UNCOMPRESSED;  	AdvLib.Obsolete.AdvVer1.FrameAddImageBytes (layoutIdForCurrentFramerate' pixels' 16);  }  else if (imageData == AdvImageData.PixelDepth8Bit) {  	byte layoutIdForCurrentFramerate = compress ? CFG_ADV_LAYOUT_5_COMPRESSED : CFG_ADV_LAYOUT_4_UNCOMPRESSED;  	AdvLib.Obsolete.AdvVer1.FrameAddImageBytes (layoutIdForCurrentFramerate' pixels' 8);  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,AddVideoFrame,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.FrameAddImageBytes (layoutIdForCurrentFramerate' pixels' 16);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,AddVideoFrame,The following statement contains a magic number: if (imageData == AdvImageData.PixelDepth8Bit) {  	byte layoutIdForCurrentFramerate = compress ? CFG_ADV_LAYOUT_5_COMPRESSED : CFG_ADV_LAYOUT_4_UNCOMPRESSED;  	AdvLib.Obsolete.AdvVer1.FrameAddImageBytes (layoutIdForCurrentFramerate' pixels' 8);  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,AddVideoFrame,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.FrameAddImageBytes (layoutIdForCurrentFramerate' pixels' 8);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,AddVideoFrame,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.FrameAddImage (layoutIdForCurrentFramerate' pixels' 16);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (StatusSectionConfig.RecordUserCommands && metadata.UserCommands != null) {  	for (int i = 0; i < Math.Min (16' metadata.UserCommands.Count ()); i++) {  		if (metadata.UserCommands [i] != null) {  			if (metadata.UserCommands [i].Length > 255)  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  			else  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i]);  		}  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (StatusSectionConfig.RecordUserCommands && metadata.UserCommands != null) {  	for (int i = 0; i < Math.Min (16' metadata.UserCommands.Count ()); i++) {  		if (metadata.UserCommands [i] != null) {  			if (metadata.UserCommands [i].Length > 255)  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  			else  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i]);  		}  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (StatusSectionConfig.RecordUserCommands && metadata.UserCommands != null) {  	for (int i = 0; i < Math.Min (16' metadata.UserCommands.Count ()); i++) {  		if (metadata.UserCommands [i] != null) {  			if (metadata.UserCommands [i].Length > 255)  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  			else  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i]);  		}  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: for (int i = 0; i < Math.Min (16' metadata.UserCommands.Count ()); i++) {  	if (metadata.UserCommands [i] != null) {  		if (metadata.UserCommands [i].Length > 255)  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  		else  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i]);  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: for (int i = 0; i < Math.Min (16' metadata.UserCommands.Count ()); i++) {  	if (metadata.UserCommands [i] != null) {  		if (metadata.UserCommands [i].Length > 255)  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  		else  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i]);  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: for (int i = 0; i < Math.Min (16' metadata.UserCommands.Count ()); i++) {  	if (metadata.UserCommands [i] != null) {  		if (metadata.UserCommands [i].Length > 255)  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  		else  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i]);  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (metadata.UserCommands [i] != null) {  	if (metadata.UserCommands [i].Length > 255)  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  	else  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i]);  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (metadata.UserCommands [i] != null) {  	if (metadata.UserCommands [i].Length > 255)  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  	else  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i]);  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (metadata.UserCommands [i].Length > 255)  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  else  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i]);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (metadata.UserCommands [i].Length > 255)  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  else  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i]);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_UserCommand' metadata.UserCommands [i].Substring (0' 255));  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (StatusSectionConfig.RecordSystemErrors && metadata.SystemErrors != null) {  	for (int i = 0; i < Math.Min (16' metadata.SystemErrors.Count ()); i++) {  		if (metadata.SystemErrors [i] != null) {  			if (metadata.SystemErrors [i].Length > 255)  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  			else  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i]);  		}  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (StatusSectionConfig.RecordSystemErrors && metadata.SystemErrors != null) {  	for (int i = 0; i < Math.Min (16' metadata.SystemErrors.Count ()); i++) {  		if (metadata.SystemErrors [i] != null) {  			if (metadata.SystemErrors [i].Length > 255)  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  			else  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i]);  		}  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (StatusSectionConfig.RecordSystemErrors && metadata.SystemErrors != null) {  	for (int i = 0; i < Math.Min (16' metadata.SystemErrors.Count ()); i++) {  		if (metadata.SystemErrors [i] != null) {  			if (metadata.SystemErrors [i].Length > 255)  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  			else  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i]);  		}  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: for (int i = 0; i < Math.Min (16' metadata.SystemErrors.Count ()); i++) {  	if (metadata.SystemErrors [i] != null) {  		if (metadata.SystemErrors [i].Length > 255)  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  		else  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i]);  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: for (int i = 0; i < Math.Min (16' metadata.SystemErrors.Count ()); i++) {  	if (metadata.SystemErrors [i] != null) {  		if (metadata.SystemErrors [i].Length > 255)  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  		else  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i]);  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: for (int i = 0; i < Math.Min (16' metadata.SystemErrors.Count ()); i++) {  	if (metadata.SystemErrors [i] != null) {  		if (metadata.SystemErrors [i].Length > 255)  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  		else  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i]);  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (metadata.SystemErrors [i] != null) {  	if (metadata.SystemErrors [i].Length > 255)  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  	else  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i]);  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (metadata.SystemErrors [i] != null) {  	if (metadata.SystemErrors [i].Length > 255)  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  	else  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i]);  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (metadata.SystemErrors [i].Length > 255)  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  else  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i]);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (metadata.SystemErrors [i].Length > 255)  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  else  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i]);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (m_TAGID_SystemError' metadata.SystemErrors [i].Substring (0' 255));  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: foreach (string tagName in StatusSectionConfig.AdditionalStatusTags.Keys) {  	uint tagId = m_AdditionalStatusSectionTagIds [tagName];  	additionalStatusTagId++;  	object statusTagValue = metadata.AdditionalStatusTags [additionalStatusTagId];  	switch (StatusSectionConfig.AdditionalStatusTags [tagName]) {  	case AdvTagType.UInt8:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagUInt8 (tagId' (byte)statusTagValue);  		break;  	case AdvTagType.UInt16:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag16 (tagId' (ushort)statusTagValue);  		break;  	case AdvTagType.UInt32:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag32 (tagId' (uint)statusTagValue);  		break;  	case AdvTagType.ULong64:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag64 (tagId' (ulong)statusTagValue);  		break;  	case AdvTagType.Real:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagReal (tagId' (float)statusTagValue);  		break;  	case AdvTagType.AnsiString255:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag (tagId' (string)statusTagValue);  		break;  	case AdvTagType.List16OfAnsiString255:  		string[] lines = (string[])statusTagValue;  		for (int i = 0; i < Math.Min (16' lines.Count ()); i++) {  			if (lines [i] != null) {  				if (lines [i].Length > 255)  					AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  				else  					AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  			}  		}  		break;  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: foreach (string tagName in StatusSectionConfig.AdditionalStatusTags.Keys) {  	uint tagId = m_AdditionalStatusSectionTagIds [tagName];  	additionalStatusTagId++;  	object statusTagValue = metadata.AdditionalStatusTags [additionalStatusTagId];  	switch (StatusSectionConfig.AdditionalStatusTags [tagName]) {  	case AdvTagType.UInt8:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagUInt8 (tagId' (byte)statusTagValue);  		break;  	case AdvTagType.UInt16:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag16 (tagId' (ushort)statusTagValue);  		break;  	case AdvTagType.UInt32:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag32 (tagId' (uint)statusTagValue);  		break;  	case AdvTagType.ULong64:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag64 (tagId' (ulong)statusTagValue);  		break;  	case AdvTagType.Real:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagReal (tagId' (float)statusTagValue);  		break;  	case AdvTagType.AnsiString255:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag (tagId' (string)statusTagValue);  		break;  	case AdvTagType.List16OfAnsiString255:  		string[] lines = (string[])statusTagValue;  		for (int i = 0; i < Math.Min (16' lines.Count ()); i++) {  			if (lines [i] != null) {  				if (lines [i].Length > 255)  					AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  				else  					AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  			}  		}  		break;  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: foreach (string tagName in StatusSectionConfig.AdditionalStatusTags.Keys) {  	uint tagId = m_AdditionalStatusSectionTagIds [tagName];  	additionalStatusTagId++;  	object statusTagValue = metadata.AdditionalStatusTags [additionalStatusTagId];  	switch (StatusSectionConfig.AdditionalStatusTags [tagName]) {  	case AdvTagType.UInt8:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagUInt8 (tagId' (byte)statusTagValue);  		break;  	case AdvTagType.UInt16:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag16 (tagId' (ushort)statusTagValue);  		break;  	case AdvTagType.UInt32:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag32 (tagId' (uint)statusTagValue);  		break;  	case AdvTagType.ULong64:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag64 (tagId' (ulong)statusTagValue);  		break;  	case AdvTagType.Real:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagReal (tagId' (float)statusTagValue);  		break;  	case AdvTagType.AnsiString255:  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTag (tagId' (string)statusTagValue);  		break;  	case AdvTagType.List16OfAnsiString255:  		string[] lines = (string[])statusTagValue;  		for (int i = 0; i < Math.Min (16' lines.Count ()); i++) {  			if (lines [i] != null) {  				if (lines [i].Length > 255)  					AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  				else  					AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  			}  		}  		break;  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: switch (StatusSectionConfig.AdditionalStatusTags [tagName]) {  case AdvTagType.UInt8:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagUInt8 (tagId' (byte)statusTagValue);  	break;  case AdvTagType.UInt16:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag16 (tagId' (ushort)statusTagValue);  	break;  case AdvTagType.UInt32:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag32 (tagId' (uint)statusTagValue);  	break;  case AdvTagType.ULong64:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag64 (tagId' (ulong)statusTagValue);  	break;  case AdvTagType.Real:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagReal (tagId' (float)statusTagValue);  	break;  case AdvTagType.AnsiString255:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag (tagId' (string)statusTagValue);  	break;  case AdvTagType.List16OfAnsiString255:  	string[] lines = (string[])statusTagValue;  	for (int i = 0; i < Math.Min (16' lines.Count ()); i++) {  		if (lines [i] != null) {  			if (lines [i].Length > 255)  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  			else  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  		}  	}  	break;  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: switch (StatusSectionConfig.AdditionalStatusTags [tagName]) {  case AdvTagType.UInt8:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagUInt8 (tagId' (byte)statusTagValue);  	break;  case AdvTagType.UInt16:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag16 (tagId' (ushort)statusTagValue);  	break;  case AdvTagType.UInt32:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag32 (tagId' (uint)statusTagValue);  	break;  case AdvTagType.ULong64:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag64 (tagId' (ulong)statusTagValue);  	break;  case AdvTagType.Real:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagReal (tagId' (float)statusTagValue);  	break;  case AdvTagType.AnsiString255:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag (tagId' (string)statusTagValue);  	break;  case AdvTagType.List16OfAnsiString255:  	string[] lines = (string[])statusTagValue;  	for (int i = 0; i < Math.Min (16' lines.Count ()); i++) {  		if (lines [i] != null) {  			if (lines [i].Length > 255)  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  			else  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  		}  	}  	break;  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: switch (StatusSectionConfig.AdditionalStatusTags [tagName]) {  case AdvTagType.UInt8:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagUInt8 (tagId' (byte)statusTagValue);  	break;  case AdvTagType.UInt16:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag16 (tagId' (ushort)statusTagValue);  	break;  case AdvTagType.UInt32:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag32 (tagId' (uint)statusTagValue);  	break;  case AdvTagType.ULong64:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag64 (tagId' (ulong)statusTagValue);  	break;  case AdvTagType.Real:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagReal (tagId' (float)statusTagValue);  	break;  case AdvTagType.AnsiString255:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag (tagId' (string)statusTagValue);  	break;  case AdvTagType.List16OfAnsiString255:  	string[] lines = (string[])statusTagValue;  	for (int i = 0; i < Math.Min (16' lines.Count ()); i++) {  		if (lines [i] != null) {  			if (lines [i].Length > 255)  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  			else  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  		}  	}  	break;  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: for (int i = 0; i < Math.Min (16' lines.Count ()); i++) {  	if (lines [i] != null) {  		if (lines [i].Length > 255)  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  		else  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: for (int i = 0; i < Math.Min (16' lines.Count ()); i++) {  	if (lines [i] != null) {  		if (lines [i].Length > 255)  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  		else  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: for (int i = 0; i < Math.Min (16' lines.Count ()); i++) {  	if (lines [i] != null) {  		if (lines [i].Length > 255)  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  		else  			AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  	}  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (lines [i] != null) {  	if (lines [i].Length > 255)  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  	else  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (lines [i] != null) {  	if (lines [i].Length > 255)  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  	else  		AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  }  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (lines [i].Length > 255)  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  else  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: if (lines [i].Length > 255)  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  else  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  
Magic Number,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following statement contains a magic number: AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  
Missing Default,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,GetMainFramePixels,The following switch statement is missing a default case: switch (entry.Item3) {  case Adv2TagType.Int8:  	if (AdvLib.GetStatusTagUInt8 (entry.Item2' out val8) == AdvError.S_OK && val8.HasValue)  		frameInfo.Status.Add (entry.Item1' val8.Value);  	break;  case Adv2TagType.Int16:  	if (AdvLib.GetStatusTagInt16 (entry.Item2' out val16) == AdvError.S_OK && val16.HasValue)  		frameInfo.Status.Add (entry.Item1' val16.Value);  	break;  case Adv2TagType.Int32:  	if (AdvLib.GetStatusTagInt32 (entry.Item2' out val32) == AdvError.S_OK && val32.HasValue)  		frameInfo.Status.Add (entry.Item1' val32.Value);  	break;  case Adv2TagType.Long64:  	if (AdvLib.GetStatusTagInt64 (entry.Item2' out val64) == AdvError.S_OK && val64.HasValue)  		frameInfo.Status.Add (entry.Item1' val64.Value);  	break;  case Adv2TagType.Real:  	if (AdvLib.GetStatusTagFloat (entry.Item2' out valf) == AdvError.S_OK && valf.HasValue)  		frameInfo.Status.Add (entry.Item1' valf.Value);  	break;  case Adv2TagType.UTF8String:  	if (AdvLib.GetStatusTagUTF8String (entry.Item2' out vals) == AdvError.S_OK)  		frameInfo.Status.Add (entry.Item1' vals);  	break;  }  
Missing Default,Adv,AdvFile2,C:\repos\AstroDigitalVideo_ADVLib\AdvFile2.cs,GetCalibrationFramePixels,The following switch statement is missing a default case: switch (entry.Item3) {  case Adv2TagType.Int8:  	if (AdvLib.GetStatusTagUInt8 (entry.Item2' out val8) == AdvError.S_OK && val8.HasValue)  		frameInfo.Status.Add (entry.Item1' val8.Value);  	break;  case Adv2TagType.Int16:  	if (AdvLib.GetStatusTagInt16 (entry.Item2' out val16) == AdvError.S_OK && val16.HasValue)  		frameInfo.Status.Add (entry.Item1' val16.Value);  	break;  case Adv2TagType.Int32:  	if (AdvLib.GetStatusTagInt32 (entry.Item2' out val32) == AdvError.S_OK && val32.HasValue)  		frameInfo.Status.Add (entry.Item1' val32.Value);  	break;  case Adv2TagType.Long64:  	if (AdvLib.GetStatusTagInt64 (entry.Item2' out val64) == AdvError.S_OK && val64.HasValue)  		frameInfo.Status.Add (entry.Item1' val64.Value);  	break;  case Adv2TagType.Real:  	if (AdvLib.GetStatusTagFloat (entry.Item2' out valf) == AdvError.S_OK && valf.HasValue)  		frameInfo.Status.Add (entry.Item1' valf.Value);  	break;  case Adv2TagType.UTF8String:  	if (AdvLib.GetStatusTagUTF8String (entry.Item2' out vals) == AdvError.S_OK)  		frameInfo.Status.Add (entry.Item1' vals);  	break;  }  
Missing Default,Adv,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V2.cs,BeginVideoFrame,The following switch statement is missing a default case: switch (StatusSectionConfig.AdditionalStatusTags [tagName]) {  case Adv2TagType.Int8:  	AdvLib.FrameAddStatusTagUInt8 (tagId' (byte)statusTagValue);  	break;  case Adv2TagType.Int16:  	AdvLib.FrameAddStatusTagInt16 (tagId' (short)statusTagValue);  	break;  case Adv2TagType.Int32:  	AdvLib.FrameAddStatusTagInt32 (tagId' (int)statusTagValue);  	break;  case Adv2TagType.Long64:  	AdvLib.FrameAddStatusTagInt64 (tagId' (long)statusTagValue);  	break;  case Adv2TagType.Real:  	AdvLib.FrameAddStatusTagFloat (tagId' (float)statusTagValue);  	break;  case Adv2TagType.UTF8String:  	AdvLib.FrameAddStatusTagUTF8String (tagId' (string)statusTagValue);  	break;  }  
Missing Default,Adv,CrossPlatform,C:\repos\AstroDigitalVideo_ADVLib\CrossPlatform.cs,CrossPlatform,The following switch statement is missing a default case: switch (pid) {  case PlatformID.Win32NT:  case PlatformID.Win32S:  case PlatformID.Win32Windows:  case PlatformID.WinCE:  	platformInfo = "Windows";  	break;  case PlatformID.Unix:  	platformInfo = "Unix";  	break;  case PlatformID.MacOSX:  	platformInfo = "OSX";  	break;  }  
Missing Default,AdvVer1,AdvRecorder,C:\repos\AstroDigitalVideo_ADVLib\AdvRecorder_V1.cs,BeginVideoFrame,The following switch statement is missing a default case: switch (StatusSectionConfig.AdditionalStatusTags [tagName]) {  case AdvTagType.UInt8:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagUInt8 (tagId' (byte)statusTagValue);  	break;  case AdvTagType.UInt16:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag16 (tagId' (ushort)statusTagValue);  	break;  case AdvTagType.UInt32:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag32 (tagId' (uint)statusTagValue);  	break;  case AdvTagType.ULong64:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag64 (tagId' (ulong)statusTagValue);  	break;  case AdvTagType.Real:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTagReal (tagId' (float)statusTagValue);  	break;  case AdvTagType.AnsiString255:  	AdvLib.Obsolete.AdvVer1.FrameAddStatusTag (tagId' (string)statusTagValue);  	break;  case AdvTagType.List16OfAnsiString255:  	string[] lines = (string[])statusTagValue;  	for (int i = 0; i < Math.Min (16' lines.Count ()); i++) {  		if (lines [i] != null) {  			if (lines [i].Length > 255)  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i].Substring (0' 255));  			else  				AdvLib.Obsolete.AdvVer1.FrameAddStatusTagMessage (tagId' lines [i]);  		}  	}  	break;  }  
