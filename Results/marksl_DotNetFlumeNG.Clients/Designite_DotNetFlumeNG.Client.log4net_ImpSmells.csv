Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,Cyclomatic complexity of the method is 16
Complex Method,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,DotNetFlumeNG.Client.Thrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEvent.cs,Read,Cyclomatic complexity of the method is 10
Long Statement,DotNetFlumeNG.Client.LegacyThrift,Processor,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEventServer.cs,Process,The length of the statement  "                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod' "Invalid method name: '" + msg.Name + "'"); " is 146.
Long Statement,DotNetFlumeNG.Client.Thrift,Client,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftSourceProtocol.cs,recv_appendBatch,The length of the statement  "                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "appendBatch failed: unknown result"); " is 121.
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: switch (field.ID)                  {                      case 1:                          if (field.Type == TType.I64)                          {                              Timestamp = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.I32)                          {                              Priority = (Priority)iprot.ReadI32();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 3:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 4:                          if (field.Type == TType.I64)                          {                              Nanos = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 5:                          if (field.Type == TType.String)                          {                              Host = iprot.ReadString();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 6:                          if (field.Type == TType.Map)                          {                              {                                  Fields = new Dictionary<string' byte[]>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      byte[] _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadBinary();                                      Fields[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: switch (field.ID)                  {                      case 1:                          if (field.Type == TType.I64)                          {                              Timestamp = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.I32)                          {                              Priority = (Priority)iprot.ReadI32();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 3:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 4:                          if (field.Type == TType.I64)                          {                              Nanos = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 5:                          if (field.Type == TType.String)                          {                              Host = iprot.ReadString();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 6:                          if (field.Type == TType.Map)                          {                              {                                  Fields = new Dictionary<string' byte[]>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      byte[] _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadBinary();                                      Fields[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: switch (field.ID)                  {                      case 1:                          if (field.Type == TType.I64)                          {                              Timestamp = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.I32)                          {                              Priority = (Priority)iprot.ReadI32();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 3:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 4:                          if (field.Type == TType.I64)                          {                              Nanos = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 5:                          if (field.Type == TType.String)                          {                              Host = iprot.ReadString();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 6:                          if (field.Type == TType.Map)                          {                              {                                  Fields = new Dictionary<string' byte[]>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      byte[] _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadBinary();                                      Fields[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: switch (field.ID)                  {                      case 1:                          if (field.Type == TType.I64)                          {                              Timestamp = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.I32)                          {                              Priority = (Priority)iprot.ReadI32();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 3:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 4:                          if (field.Type == TType.I64)                          {                              Nanos = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 5:                          if (field.Type == TType.String)                          {                              Host = iprot.ReadString();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 6:                          if (field.Type == TType.Map)                          {                              {                                  Fields = new Dictionary<string' byte[]>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      byte[] _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadBinary();                                      Fields[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: switch (field.ID)                  {                      case 1:                          if (field.Type == TType.I64)                          {                              Timestamp = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.I32)                          {                              Priority = (Priority)iprot.ReadI32();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 3:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 4:                          if (field.Type == TType.I64)                          {                              Nanos = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 5:                          if (field.Type == TType.String)                          {                              Host = iprot.ReadString();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 6:                          if (field.Type == TType.Map)                          {                              {                                  Fields = new Dictionary<string' byte[]>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      byte[] _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadBinary();                                      Fields[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: switch (field.ID)                  {                      case 1:                          if (field.Type == TType.Map)                          {                              {                                  Headers = new Dictionary<string' string>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      string _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadString();                                      Headers[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                              isset_headers = true;                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                              isset_body = true;                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEvent,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following statement contains a magic number: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following statement contains a magic number: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following statement contains a magic number: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following statement contains a magic number: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following statement contains a magic number: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
Missing Default,DotNetFlumeNG.Client.LegacyThrift,LegacyThriftFlumeEventAdapter,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\LegacyThriftFlumeEventAdapter.cs,GetPriority,The following switch statement is missing a default case: switch (priority)              {                  case LogPriority.Debug:                      return Priority.DEBUG;                  case LogPriority.Error:                      return Priority.ERROR;                  case LogPriority.Fatal:                      return Priority.FATAL;                  case LogPriority.Info:                      return Priority.INFO;                  case LogPriority.Trace:                      return Priority.TRACE;                  case LogPriority.Warn:                      return Priority.WARN;              }
Missing Default,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,D:\research\architectureSmells\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following switch statement is missing a default case: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
