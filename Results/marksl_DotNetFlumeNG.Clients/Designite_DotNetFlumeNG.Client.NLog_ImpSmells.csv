Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,Cyclomatic complexity of the method is 8
Long Statement,DotNetFlumeNG.Client.LegacyThrift,Processor,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEventServer.cs,Process,The length of the statement  "                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod' "Invalid method name: '" + msg.Name + "'"); " is 146.
Long Statement,DotNetFlumeNG.Client.Thrift,Client,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftSourceProtocol.cs,recv_appendBatch,The length of the statement  "                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "appendBatch failed: unknown result"); " is 121.
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: while (true)              {                  field = iprot.ReadFieldBegin();                  if (field.Type == TType.Stop)                  {                      break;                  }                  switch (field.ID)                  {                      case 1:                          if (field.Type == TType.I64)                          {                              Timestamp = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.I32)                          {                              Priority = (Priority)iprot.ReadI32();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 3:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 4:                          if (field.Type == TType.I64)                          {                              Nanos = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 5:                          if (field.Type == TType.String)                          {                              Host = iprot.ReadString();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 6:                          if (field.Type == TType.Map)                          {                              {                                  Fields = new Dictionary<string' byte[]>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      byte[] _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadBinary();                                      Fields[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }                  iprot.ReadFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: while (true)              {                  field = iprot.ReadFieldBegin();                  if (field.Type == TType.Stop)                  {                      break;                  }                  switch (field.ID)                  {                      case 1:                          if (field.Type == TType.I64)                          {                              Timestamp = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.I32)                          {                              Priority = (Priority)iprot.ReadI32();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 3:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 4:                          if (field.Type == TType.I64)                          {                              Nanos = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 5:                          if (field.Type == TType.String)                          {                              Host = iprot.ReadString();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 6:                          if (field.Type == TType.Map)                          {                              {                                  Fields = new Dictionary<string' byte[]>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      byte[] _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadBinary();                                      Fields[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }                  iprot.ReadFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: while (true)              {                  field = iprot.ReadFieldBegin();                  if (field.Type == TType.Stop)                  {                      break;                  }                  switch (field.ID)                  {                      case 1:                          if (field.Type == TType.I64)                          {                              Timestamp = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.I32)                          {                              Priority = (Priority)iprot.ReadI32();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 3:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 4:                          if (field.Type == TType.I64)                          {                              Nanos = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 5:                          if (field.Type == TType.String)                          {                              Host = iprot.ReadString();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 6:                          if (field.Type == TType.Map)                          {                              {                                  Fields = new Dictionary<string' byte[]>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      byte[] _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadBinary();                                      Fields[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }                  iprot.ReadFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: while (true)              {                  field = iprot.ReadFieldBegin();                  if (field.Type == TType.Stop)                  {                      break;                  }                  switch (field.ID)                  {                      case 1:                          if (field.Type == TType.I64)                          {                              Timestamp = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.I32)                          {                              Priority = (Priority)iprot.ReadI32();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 3:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 4:                          if (field.Type == TType.I64)                          {                              Nanos = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 5:                          if (field.Type == TType.String)                          {                              Host = iprot.ReadString();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 6:                          if (field.Type == TType.Map)                          {                              {                                  Fields = new Dictionary<string' byte[]>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      byte[] _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadBinary();                                      Fields[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }                  iprot.ReadFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: while (true)              {                  field = iprot.ReadFieldBegin();                  if (field.Type == TType.Stop)                  {                      break;                  }                  switch (field.ID)                  {                      case 1:                          if (field.Type == TType.I64)                          {                              Timestamp = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.I32)                          {                              Priority = (Priority)iprot.ReadI32();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 3:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 4:                          if (field.Type == TType.I64)                          {                              Nanos = iprot.ReadI64();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 5:                          if (field.Type == TType.String)                          {                              Host = iprot.ReadString();                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 6:                          if (field.Type == TType.Map)                          {                              {                                  Fields = new Dictionary<string' byte[]>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      byte[] _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadBinary();                                      Fields[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }                  iprot.ReadFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: if (__isset.priority)              {                  field.Name = "priority";                  field.Type = TType.I32;                  field.ID = 2;                  oprot.WriteFieldBegin(field);                  oprot.WriteI32((int)Priority);                  oprot.WriteFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: if (Body != null && __isset.body)              {                  field.Name = "body";                  field.Type = TType.String;                  field.ID = 3;                  oprot.WriteFieldBegin(field);                  oprot.WriteBinary(Body);                  oprot.WriteFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: if (__isset.nanos)              {                  field.Name = "nanos";                  field.Type = TType.I64;                  field.ID = 4;                  oprot.WriteFieldBegin(field);                  oprot.WriteI64(Nanos);                  oprot.WriteFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: if (Host != null && __isset.host)              {                  field.Name = "host";                  field.Type = TType.String;                  field.ID = 5;                  oprot.WriteFieldBegin(field);                  oprot.WriteString(Host);                  oprot.WriteFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.LegacyThrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: if (Fields != null && __isset.fields)              {                  field.Name = "fields";                  field.Type = TType.Map;                  field.ID = 6;                  oprot.WriteFieldBegin(field);                  {                      oprot.WriteMapBegin(new TMap(TType.String' TType.String' Fields.Count));                      foreach (string _iter4 in Fields.Keys)                      {                          oprot.WriteString(_iter4);                          oprot.WriteBinary(Fields[_iter4]);                          oprot.WriteMapEnd();                      }                  }                  oprot.WriteFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEvent.cs,Read,The following statement contains a magic number: while (true)              {                  field = iprot.ReadFieldBegin();                  if (field.Type == TType.Stop)                  {                      break;                  }                  switch (field.ID)                  {                      case 1:                          if (field.Type == TType.Map)                          {                              {                                  Headers = new Dictionary<string' string>();                                  TMap _map0 = iprot.ReadMapBegin();                                  for (int _i1 = 0; _i1 < _map0.Count; ++_i1)                                  {                                      string _key2;                                      string _val3;                                      _key2 = iprot.ReadString();                                      _val3 = iprot.ReadString();                                      Headers[_key2] = _val3;                                  }                                  iprot.ReadMapEnd();                              }                              isset_headers = true;                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      case 2:                          if (field.Type == TType.String)                          {                              Body = iprot.ReadBinary();                              isset_body = true;                          }                          else                          {                              TProtocolUtil.Skip(iprot' field.Type);                          }                          break;                      default:                          TProtocolUtil.Skip(iprot' field.Type);                          break;                  }                  iprot.ReadFieldEnd();              }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEvent,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEvent.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following statement contains a magic number: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following statement contains a magic number: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following statement contains a magic number: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following statement contains a magic number: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
Magic Number,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following statement contains a magic number: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
Missing Default,DotNetFlumeNG.Client.LegacyThrift,LegacyThriftFlumeEventAdapter,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\LegacyThrift\LegacyThriftFlumeEventAdapter.cs,GetPriority,The following switch statement is missing a default case: switch (priority)              {                  case LogPriority.Debug:                      return Priority.DEBUG;                  case LogPriority.Error:                      return Priority.ERROR;                  case LogPriority.Fatal:                      return Priority.FATAL;                  case LogPriority.Info:                      return Priority.INFO;                  case LogPriority.Trace:                      return Priority.TRACE;                  case LogPriority.Warn:                      return Priority.WARN;              }
Missing Default,DotNetFlumeNG.Client.Thrift,ThriftFlumeEventAdapter,C:\repos\marksl_DotNetFlumeNG.Clients\DotNetFlumeNG.Client.NLog\Thrift\ThriftFlumeEventAdapter.cs,GetLevel,The following switch statement is missing a default case: switch (priority)              {                  case LogPriority.Fatal:                      return 50000;                    case LogPriority.Error:                      return 40000;                    case LogPriority.Warn:                      return 30000;                    case LogPriority.Info:                      return 20000;                    case LogPriority.Debug:                      return 10000;                    case LogPriority.Trace:                      return int.MinValue;              }
