Implementation smell,Namespace,Class,File,Method,Description
Long Method,GeoJSONSOE,GeoJSONServer,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJSONSOE.cs,ExportGeoJsonHandler,The method has 149 lines of code.
Complex Method,GeoJSONSOE,GeoJSONServer,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJSONSOE.cs,ExportGeoJsonHandler,Cyclomatic complexity of the method is 14
Long Parameter List,GeoJSONSOE,GeoJSONServer,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJSONSOE.cs,HandleRESTRequest,The method has 7 parameters. Parameters: Capabilities' resourceName' operationName' operationInput' outputFormat' requestProperties' responseProperties
Long Parameter List,GeoJSONSOE,GeoJSONServer,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJSONSOE.cs,ExportCsvHandler,The method has 5 parameters. Parameters: boundVariables' operationInput' outputFormat' requestProperties' responseProperties
Long Parameter List,GeoJSONSOE,GeoJSONServer,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJSONSOE.cs,ExportGeoJsonHandler,The method has 5 parameters. Parameters: boundVariables' operationInput' outputFormat' requestProperties' responseProperties
Long Statement,Zekiah.GeoJSON,GeoJsonExtensions,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJsonExtensions.cs,processMultiPointBuffer,The length of the statement  "                    string coord = hasZ ? getCoordinate(points.Point[i].X' points.Point[i].Y' points.Point[i].Z) : getCoordinate(points.Point[i].X' points.Point[i].Y); " is 147.
Long Statement,GeoJSONSOE,GeoJSONServer,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJSONSOE.cs,HandleRESTRequest,The length of the statement  "            return reqHandler.HandleRESTRequest(Capabilities' resourceName' operationName' operationInput' outputFormat' requestProperties' out responseProperties); " is 152.
Complex Conditional,GeoJSONSOE,GeoJSONServer,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJSONSOE.cs,ExportGeoJsonHandler,The conditional expression  "bxmin && bymin && bxmax && bymax"  is complex.
Empty Catch Block,Zekiah.CSV,CsvExtensions,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\CsvExtensions.cs,GetHeaderRow,The method has an empty catch block.
Empty Catch Block,Zekiah.CSV,CsvExtensions,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\CsvExtensions.cs,GetHexWkb,The method has an empty catch block.
Magic Number,GeoJSONSOE,GeoJSONServer,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJSONSOE.cs,ExportGeoJsonHandler,The following statement contains a magic number: if (useBbox)              {                  try                  {                      double xmin; double ymin; double xmax; double ymax;                      string[] vals = boxClause.Split(new char[] { ''' });                      if (vals.Length == 4)                      {                          bool bxmin = double.TryParse(vals[0]' out xmin);                          bool bymin = double.TryParse(vals[1]' out ymin);                          bool bxmax = double.TryParse(vals[2]' out xmax);                          bool bymax = double.TryParse(vals[3]' out ymax);                            if (bxmin && bymin && bxmax && bymax)                          {                              ISpatialReference sr = null;                              if (useBboxSR)                              {                                  sr = helper.GetSpatialReference(bboxSRID);                                  if (sr == null)                                  {                                      //erroneous srid' ignore bounding box                                      useBbox = false;                                  }                              }                              else                              {                                  sr = helper.getWGS84();                              }                              if (useBbox)                              {                                  queryGeom = new Polygon() as IPolygon;                                  IPointCollection coll = queryGeom as IPointCollection;                                  coll.AddPoint(new Point() { X = xmin' Y = ymin' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmin' Y = ymax' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmax' Y = ymax' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmax' Y = ymin' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmin' Y = ymin' SpatialReference = sr });                                  queryGeom.SpatialReference = sr;                              }                          }                          else                          {                              useBbox = false;                          }                      }                      else                      {                          useBbox = false;                      }                  }                  catch                  {                      useBbox = false;                  }              }
Magic Number,GeoJSONSOE,GeoJSONServer,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJSONSOE.cs,ExportGeoJsonHandler,The following statement contains a magic number: if (useBbox)              {                  try                  {                      double xmin; double ymin; double xmax; double ymax;                      string[] vals = boxClause.Split(new char[] { ''' });                      if (vals.Length == 4)                      {                          bool bxmin = double.TryParse(vals[0]' out xmin);                          bool bymin = double.TryParse(vals[1]' out ymin);                          bool bxmax = double.TryParse(vals[2]' out xmax);                          bool bymax = double.TryParse(vals[3]' out ymax);                            if (bxmin && bymin && bxmax && bymax)                          {                              ISpatialReference sr = null;                              if (useBboxSR)                              {                                  sr = helper.GetSpatialReference(bboxSRID);                                  if (sr == null)                                  {                                      //erroneous srid' ignore bounding box                                      useBbox = false;                                  }                              }                              else                              {                                  sr = helper.getWGS84();                              }                              if (useBbox)                              {                                  queryGeom = new Polygon() as IPolygon;                                  IPointCollection coll = queryGeom as IPointCollection;                                  coll.AddPoint(new Point() { X = xmin' Y = ymin' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmin' Y = ymax' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmax' Y = ymax' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmax' Y = ymin' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmin' Y = ymin' SpatialReference = sr });                                  queryGeom.SpatialReference = sr;                              }                          }                          else                          {                              useBbox = false;                          }                      }                      else                      {                          useBbox = false;                      }                  }                  catch                  {                      useBbox = false;                  }              }
Magic Number,GeoJSONSOE,GeoJSONServer,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJSONSOE.cs,ExportGeoJsonHandler,The following statement contains a magic number: if (useBbox)              {                  try                  {                      double xmin; double ymin; double xmax; double ymax;                      string[] vals = boxClause.Split(new char[] { ''' });                      if (vals.Length == 4)                      {                          bool bxmin = double.TryParse(vals[0]' out xmin);                          bool bymin = double.TryParse(vals[1]' out ymin);                          bool bxmax = double.TryParse(vals[2]' out xmax);                          bool bymax = double.TryParse(vals[3]' out ymax);                            if (bxmin && bymin && bxmax && bymax)                          {                              ISpatialReference sr = null;                              if (useBboxSR)                              {                                  sr = helper.GetSpatialReference(bboxSRID);                                  if (sr == null)                                  {                                      //erroneous srid' ignore bounding box                                      useBbox = false;                                  }                              }                              else                              {                                  sr = helper.getWGS84();                              }                              if (useBbox)                              {                                  queryGeom = new Polygon() as IPolygon;                                  IPointCollection coll = queryGeom as IPointCollection;                                  coll.AddPoint(new Point() { X = xmin' Y = ymin' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmin' Y = ymax' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmax' Y = ymax' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmax' Y = ymin' SpatialReference = sr });                                  coll.AddPoint(new Point() { X = xmin' Y = ymin' SpatialReference = sr });                                  queryGeom.SpatialReference = sr;                              }                          }                          else                          {                              useBbox = false;                          }                      }                      else                      {                          useBbox = false;                      }                  }                  catch                  {                      useBbox = false;                  }              }
Missing Default,Zekiah.GeoJSON,GeoJsonExtensions,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJsonExtensions.cs,ToGeoJson,The following switch statement is missing a default case: switch (shapeType)                  {                      case esriGeometryType.esriGeometryMultipoint:                          IMultipoint mptbuff = (IMultipoint)geometry;                          retval = processMultiPointBuffer(mptbuff);                          break;                      case esriGeometryType.esriGeometryPoint:                          IPoint pt = (IPoint)geometry;                          retval = processPointBuffer(pt);                          break;                      case esriGeometryType.esriGeometryPolyline:                          IPolyline lbuff = (IPolyline)geometry;                          retval = processMultiPartBuffer((IGeometryCollection)lbuff' "MultiLineString");                          break;                      case esriGeometryType.esriGeometryPolygon:                          IPolygon pbuff = (IPolygon)geometry;                          retval = processMultiPartBuffer((IGeometryCollection)pbuff' "MultiPolygon");                          break;                  }
Missing Default,Zekiah.GeoJSON,GeoJsonExtensions,C:\repos\geobabbler_AGSOpenFormats\GeoJSONSOE\GeoJsonExtensions.cs,getMultipartDelimiter,The following switch statement is missing a default case: switch (geoJsonType.ToLower())                  {                      case "multipoint":                          retval.Add("");                          retval.Add("");                          break;                      case "multilinestring":                          retval.Add("[");                          retval.Add("]");                          break;                      case "multipolygon":                          retval.Add("[[");                          retval.Add("]]");                          break;                  }
