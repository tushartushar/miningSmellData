Implementation smell,Namespace,Class,File,Method,Description
Complex Conditional,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The conditional expression  "lower >= 'A' && lower <= 'Z' || lower >= 'a' && lower <= 'z'"  is complex.
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: byte[] scratch = new byte[16];
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: ushort hash = 17;
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  for (int j = 0; j < input.Length; j++)                  {                      scratch[15 - (j % 16)] ^= input[j];                  }                    for (int j = 0; j < 16; j += 2)                  {                      hash = Hash(scratch' hash);                        scratch[j] = (byte)(hash & 0xff);                      scratch[j + 1] = (byte)((hash >> 8) & 0xff);                  }              }
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  for (int j = 0; j < input.Length; j++)                  {                      scratch[15 - (j % 16)] ^= input[j];                  }                    for (int j = 0; j < 16; j += 2)                  {                      hash = Hash(scratch' hash);                        scratch[j] = (byte)(hash & 0xff);                      scratch[j + 1] = (byte)((hash >> 8) & 0xff);                  }              }
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  for (int j = 0; j < input.Length; j++)                  {                      scratch[15 - (j % 16)] ^= input[j];                  }                    for (int j = 0; j < 16; j += 2)                  {                      hash = Hash(scratch' hash);                        scratch[j] = (byte)(hash & 0xff);                      scratch[j + 1] = (byte)((hash >> 8) & 0xff);                  }              }
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  for (int j = 0; j < input.Length; j++)                  {                      scratch[15 - (j % 16)] ^= input[j];                  }                    for (int j = 0; j < 16; j += 2)                  {                      hash = Hash(scratch' hash);                        scratch[j] = (byte)(hash & 0xff);                      scratch[j + 1] = (byte)((hash >> 8) & 0xff);                  }              }
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  for (int j = 0; j < input.Length; j++)                  {                      scratch[15 - (j % 16)] ^= input[j];                  }                    for (int j = 0; j < 16; j += 2)                  {                      hash = Hash(scratch' hash);                        scratch[j] = (byte)(hash & 0xff);                      scratch[j + 1] = (byte)((hash >> 8) & 0xff);                  }              }
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  for (int j = 0; j < input.Length; j++)                  {                      scratch[15 - (j % 16)] ^= input[j];                  }                    for (int j = 0; j < 16; j += 2)                  {                      hash = Hash(scratch' hash);                        scratch[j] = (byte)(hash & 0xff);                      scratch[j + 1] = (byte)((hash >> 8) & 0xff);                  }              }
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: byte[] target = new byte[16];
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  byte lower = (byte)(scratch[i] & 0x7f);                    if (lower >= 'A' && lower <= 'Z' || lower >= 'a' && lower <= 'z')                      target[i] = lower;                  else                      target[i] = (byte)((scratch[i] >> 4) + 0x61);              }
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Encode,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  byte lower = (byte)(scratch[i] & 0x7f);                    if (lower >= 'A' && lower <= 'Z' || lower >= 'a' && lower <= 'z')                      target[i] = lower;                  else                      target[i] = (byte)((scratch[i] >> 4) + 0x61);              }
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Hash,The following statement contains a magic number: for (int i = 15; i >= 0; i--)              {                  hash = (ushort)(                      hash >> 8 ^                      _lookup[hash & 0xff] ^                      _lookup[scratch[i]]                  );              }
Magic Number,ProgressEncode,Progress,C:\repos\pvginkel_ProgressEncode\CSharp\ProgressEncode\Progress.cs,Hash,The following statement contains a magic number: for (int i = 15; i >= 0; i--)              {                  hash = (ushort)(                      hash >> 8 ^                      _lookup[hash & 0xff] ^                      _lookup[scratch[i]]                  );              }
