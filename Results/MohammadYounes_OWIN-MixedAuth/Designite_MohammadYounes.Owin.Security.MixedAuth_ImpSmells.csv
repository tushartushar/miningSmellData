Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,AuthenticateCoreAsync,The length of the statement  "		if (logonUserIdentity.AuthenticationType != Options.CookieOptions.AuthenticationType && logonUserIdentity.IsAuthenticated) { " is 124.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,AuthenticateCoreAsync,The length of the statement  "			// Microsoft.Owin.Security.AuthenticationManagerExtensions: ExternalLoginInfo GetExternalLoginInfo(AuthenticateResult result) " is 125.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,AuthenticateCoreAsync,The length of the statement  "			claimsIdentity.AddClaim (new Claim (ClaimTypes.NameIdentifier' logonUserIdentity.User.Value' null' Options.AuthenticationType)); " is 128.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,AuthenticateCoreAsync,The length of the statement  "			claimsIdentity.AddClaims (customClaims.Where (c => c.Type != ClaimTypes.NameIdentifier).Select (c => new Claim (c.Type' c.Value' c.ValueType' Options.AuthenticationType))); " is 172.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,AuthenticateCoreAsync,The length of the statement  "			var context = new MixedAuthAuthenticatedContext (Context' claimsIdentity' properties' Options.AccessTokenFormat.Protect (ticket)); " is 130.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,InvokeAsync,The length of the statement  "		// If not authenticated or already authenticated using cookies' current identity will be the IIS App Pool' must re-authenticate. " is 128.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,InvokeAsync,The length of the statement  "		if (logonUserIdentity.AuthenticationType == Options.CookieOptions.AuthenticationType || !logonUserIdentity.IsAuthenticated) { " is 125.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ApplyResponseChallengeAsync,The length of the statement  "	AuthenticationResponseChallenge challenge = Helper.LookupChallenge (Options.AuthenticationType' Options.AuthenticationMode); " is 124.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ApplyResponseChallengeAsync,The length of the statement  "			state.RedirectUri = Request.Scheme + Uri.SchemeDelimiter + Request.Host + Request.PathBase + Request.Path + Request.QueryString; " is 128.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ApplyResponseChallengeAsync,The length of the statement  "		// If not authenticated or already authenticated using cookies' current identity will be the IIS App Pool' must re-authenticate. " is 128.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ApplyResponseChallengeAsync,The length of the statement  "		if (logonUserIdentity.AuthenticationType == Options.CookieOptions.AuthenticationType || !logonUserIdentity.IsAuthenticated) { " is 125.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ApplyResponseChallengeAsync,The length of the statement  "		string redirectUri = Request.Scheme + Uri.SchemeDelimiter + Request.Host + RequestPathBase + Options.CallbackPath + "?state=" + Uri.EscapeDataString (Options.StateDataFormat.Protect (state)); " is 191.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,AddCookieBackIfExists,The length of the statement  "		AuthenticationTicket ticket = Options.CookieOptions.TicketDataFormat.Unprotect (Context.Request.Cookies [MixedAuthConstants.TempCookieName]); " is 141.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,AddCookieBackIfExists,The length of the statement  "			Options.CookieOptions.CookieManager.DeleteCookie (Context' MixedAuthConstants.TempCookieName' Options.CookieOptions.ToCookieOptions (DateTime.UtcNow.AddDays (-1))); " is 164.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,AddCookieBackIfExists,The length of the statement  "			Options.CookieOptions.CookieManager.AppendResponseCookie (Context' Options.CookieOptions.CookieName' Options.CookieOptions.TicketDataFormat.Protect (ticket)' Options.CookieOptions.ToCookieOptions (ticket.Properties.ExpiresUtc.Value.ToUniversalTime ().DateTime)); " is 262.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ReplaceCookie,The length of the statement  "			Options.CookieOptions.CookieManager.DeleteCookie (Context' Options.CookieOptions.CookieName' Options.CookieOptions.ToCookieOptions (DateTime.UtcNow.AddDays (-1))); " is 163.
Long Statement,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ReplaceCookie,The length of the statement  "			Options.CookieOptions.CookieManager.AppendResponseCookie (Context' MixedAuthConstants.TempCookieName' Options.CookieOptions.TicketDataFormat.Protect (ticket)' Options.CookieOptions.ToCookieOptions (DateTime.UtcNow.AddMinutes (5))); " is 231.
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthExtensions,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthExtensions.cs,RegisterMixedAuth,The following statement contains a magic number: app.EndRequest += (object sender' EventArgs e) =>  {  	if (app.Context.Response.StatusCode == MixedAuthConstants.FakeStatusCode) {  		app.Context.Response.StatusCode = 401;  		app.Context.Response.SubStatusCode = 2;  	}  };  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthExtensions,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthExtensions.cs,RegisterMixedAuth,The following statement contains a magic number: app.EndRequest += (object sender' EventArgs e) =>  {  	if (app.Context.Response.StatusCode == MixedAuthConstants.FakeStatusCode) {  		app.Context.Response.StatusCode = 401;  		app.Context.Response.SubStatusCode = 2;  	}  };  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthExtensions,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthExtensions.cs,RegisterMixedAuth,The following statement contains a magic number: if (app.Context.Response.StatusCode == MixedAuthConstants.FakeStatusCode) {  	app.Context.Response.StatusCode = 401;  	app.Context.Response.SubStatusCode = 2;  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthExtensions,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthExtensions.cs,RegisterMixedAuth,The following statement contains a magic number: if (app.Context.Response.StatusCode == MixedAuthConstants.FakeStatusCode) {  	app.Context.Response.StatusCode = 401;  	app.Context.Response.SubStatusCode = 2;  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthExtensions,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthExtensions.cs,RegisterMixedAuth,The following statement contains a magic number: app.Context.Response.StatusCode = 401;  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthExtensions,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthExtensions.cs,RegisterMixedAuth,The following statement contains a magic number: app.Context.Response.SubStatusCode = 2;  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,InvokeAsync,The following statement contains a magic number: if (Options.CallbackPath.HasValue && Options.CallbackPath == Request.Path) {  	//request token info  	if (!string.IsNullOrEmpty (Request.Query ["access_token"]) && Request.QueryString.Value.IndexOf ("token_info") >= 0) {  		try {  			AuthenticationTicket ticket = UnpackAccessTokenParameter (Request.Query);  			Newtonsoft.Json.Linq.JObject token = new Newtonsoft.Json.Linq.JObject ();  			var claim = ticket.Identity.Claims.FirstOrDefault (c => c.Type == ClaimTypes.NameIdentifier);  			token ["user_id"] = claim != null ? claim.Value : "";  			token ["app_id"] = Options.ClientId;  			Response.StatusCode = 200;  			Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (token));  		}  		catch {  			Newtonsoft.Json.Linq.JObject result = new Newtonsoft.Json.Linq.JObject ();  			result ["reason"] = "Invalid access token";  			Response.StatusCode = 200;  			Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (result));  		}  		// Prevent further processing by the owin pipeline.  		return true;  	}  	//Authenticate  	var logonUserIdentity = Options.Provider.GetLogonUserIdentity (Context);  	// If not authenticated or already authenticated using cookies' current identity will be the IIS App Pool' must re-authenticate.  	if (logonUserIdentity.AuthenticationType == Options.CookieOptions.AuthenticationType || !logonUserIdentity.IsAuthenticated) {  		// fake status code' will be changed to 401 by HttpApplication.EndRequest event.  		Response.StatusCode = MixedAuthConstants.FakeStatusCode;  		// Prevent further processing by the owin pipeline.  		return true;  	}  	else {  		var ticket = await AuthenticateAsync ();  		//authenticatd  		if (ticket != null) {  			Context.Authentication.SignIn (ticket.Properties' ticket.Identity);  			Response.Redirect (ticket.Properties.RedirectUri);  			// Prevent further processing by the owin pipeline.  			return true;  		}  	}  }  else {  	// add the cookie back if it does exist.  	AddCookieBackIfExists ();  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,InvokeAsync,The following statement contains a magic number: if (Options.CallbackPath.HasValue && Options.CallbackPath == Request.Path) {  	//request token info  	if (!string.IsNullOrEmpty (Request.Query ["access_token"]) && Request.QueryString.Value.IndexOf ("token_info") >= 0) {  		try {  			AuthenticationTicket ticket = UnpackAccessTokenParameter (Request.Query);  			Newtonsoft.Json.Linq.JObject token = new Newtonsoft.Json.Linq.JObject ();  			var claim = ticket.Identity.Claims.FirstOrDefault (c => c.Type == ClaimTypes.NameIdentifier);  			token ["user_id"] = claim != null ? claim.Value : "";  			token ["app_id"] = Options.ClientId;  			Response.StatusCode = 200;  			Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (token));  		}  		catch {  			Newtonsoft.Json.Linq.JObject result = new Newtonsoft.Json.Linq.JObject ();  			result ["reason"] = "Invalid access token";  			Response.StatusCode = 200;  			Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (result));  		}  		// Prevent further processing by the owin pipeline.  		return true;  	}  	//Authenticate  	var logonUserIdentity = Options.Provider.GetLogonUserIdentity (Context);  	// If not authenticated or already authenticated using cookies' current identity will be the IIS App Pool' must re-authenticate.  	if (logonUserIdentity.AuthenticationType == Options.CookieOptions.AuthenticationType || !logonUserIdentity.IsAuthenticated) {  		// fake status code' will be changed to 401 by HttpApplication.EndRequest event.  		Response.StatusCode = MixedAuthConstants.FakeStatusCode;  		// Prevent further processing by the owin pipeline.  		return true;  	}  	else {  		var ticket = await AuthenticateAsync ();  		//authenticatd  		if (ticket != null) {  			Context.Authentication.SignIn (ticket.Properties' ticket.Identity);  			Response.Redirect (ticket.Properties.RedirectUri);  			// Prevent further processing by the owin pipeline.  			return true;  		}  	}  }  else {  	// add the cookie back if it does exist.  	AddCookieBackIfExists ();  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,InvokeAsync,The following statement contains a magic number: if (!string.IsNullOrEmpty (Request.Query ["access_token"]) && Request.QueryString.Value.IndexOf ("token_info") >= 0) {  	try {  		AuthenticationTicket ticket = UnpackAccessTokenParameter (Request.Query);  		Newtonsoft.Json.Linq.JObject token = new Newtonsoft.Json.Linq.JObject ();  		var claim = ticket.Identity.Claims.FirstOrDefault (c => c.Type == ClaimTypes.NameIdentifier);  		token ["user_id"] = claim != null ? claim.Value : "";  		token ["app_id"] = Options.ClientId;  		Response.StatusCode = 200;  		Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (token));  	}  	catch {  		Newtonsoft.Json.Linq.JObject result = new Newtonsoft.Json.Linq.JObject ();  		result ["reason"] = "Invalid access token";  		Response.StatusCode = 200;  		Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (result));  	}  	// Prevent further processing by the owin pipeline.  	return true;  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,InvokeAsync,The following statement contains a magic number: if (!string.IsNullOrEmpty (Request.Query ["access_token"]) && Request.QueryString.Value.IndexOf ("token_info") >= 0) {  	try {  		AuthenticationTicket ticket = UnpackAccessTokenParameter (Request.Query);  		Newtonsoft.Json.Linq.JObject token = new Newtonsoft.Json.Linq.JObject ();  		var claim = ticket.Identity.Claims.FirstOrDefault (c => c.Type == ClaimTypes.NameIdentifier);  		token ["user_id"] = claim != null ? claim.Value : "";  		token ["app_id"] = Options.ClientId;  		Response.StatusCode = 200;  		Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (token));  	}  	catch {  		Newtonsoft.Json.Linq.JObject result = new Newtonsoft.Json.Linq.JObject ();  		result ["reason"] = "Invalid access token";  		Response.StatusCode = 200;  		Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (result));  	}  	// Prevent further processing by the owin pipeline.  	return true;  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,InvokeAsync,The following statement contains a magic number: try {  	AuthenticationTicket ticket = UnpackAccessTokenParameter (Request.Query);  	Newtonsoft.Json.Linq.JObject token = new Newtonsoft.Json.Linq.JObject ();  	var claim = ticket.Identity.Claims.FirstOrDefault (c => c.Type == ClaimTypes.NameIdentifier);  	token ["user_id"] = claim != null ? claim.Value : "";  	token ["app_id"] = Options.ClientId;  	Response.StatusCode = 200;  	Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (token));  }  catch {  	Newtonsoft.Json.Linq.JObject result = new Newtonsoft.Json.Linq.JObject ();  	result ["reason"] = "Invalid access token";  	Response.StatusCode = 200;  	Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (result));  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,InvokeAsync,The following statement contains a magic number: try {  	AuthenticationTicket ticket = UnpackAccessTokenParameter (Request.Query);  	Newtonsoft.Json.Linq.JObject token = new Newtonsoft.Json.Linq.JObject ();  	var claim = ticket.Identity.Claims.FirstOrDefault (c => c.Type == ClaimTypes.NameIdentifier);  	token ["user_id"] = claim != null ? claim.Value : "";  	token ["app_id"] = Options.ClientId;  	Response.StatusCode = 200;  	Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (token));  }  catch {  	Newtonsoft.Json.Linq.JObject result = new Newtonsoft.Json.Linq.JObject ();  	result ["reason"] = "Invalid access token";  	Response.StatusCode = 200;  	Response.Write (Newtonsoft.Json.JsonConvert.SerializeObject (result));  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,InvokeAsync,The following statement contains a magic number: Response.StatusCode = 200;  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,InvokeAsync,The following statement contains a magic number: Response.StatusCode = 200;  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ApplyResponseChallengeAsync,The following statement contains a magic number: if (Response.StatusCode != 401) {  	// Not a challege' move on.  	return Task.FromResult<object> (null);  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ReplaceCookie,The following statement contains a magic number: if (!string.IsNullOrEmpty (cookieValue)) {  	//extract ticket  	AuthenticationTicket ticket = Options.CookieOptions.TicketDataFormat.Unprotect (cookieValue);  	if (ticket != null) {  		//delete asp.net cookie  		Options.CookieOptions.CookieManager.DeleteCookie (Context' Options.CookieOptions.CookieName' Options.CookieOptions.ToCookieOptions (DateTime.UtcNow.AddDays (-1)));  		//add mixed auth temporary cookie  		Options.CookieOptions.CookieManager.AppendResponseCookie (Context' MixedAuthConstants.TempCookieName' Options.CookieOptions.TicketDataFormat.Protect (ticket)' Options.CookieOptions.ToCookieOptions (DateTime.UtcNow.AddMinutes (5)));  	}  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ReplaceCookie,The following statement contains a magic number: if (ticket != null) {  	//delete asp.net cookie  	Options.CookieOptions.CookieManager.DeleteCookie (Context' Options.CookieOptions.CookieName' Options.CookieOptions.ToCookieOptions (DateTime.UtcNow.AddDays (-1)));  	//add mixed auth temporary cookie  	Options.CookieOptions.CookieManager.AppendResponseCookie (Context' MixedAuthConstants.TempCookieName' Options.CookieOptions.TicketDataFormat.Protect (ticket)' Options.CookieOptions.ToCookieOptions (DateTime.UtcNow.AddMinutes (5)));  }  
Magic Number,MohammadYounes.Owin.Security.MixedAuth,MixedAuthHandler,C:\repos\MohammadYounes_OWIN-MixedAuth\src\MohammadYounes.Owin.Security.MixedAuth\MixedAuthHandler.cs,ReplaceCookie,The following statement contains a magic number: Options.CookieOptions.CookieManager.AppendResponseCookie (Context' MixedAuthConstants.TempCookieName' Options.CookieOptions.TicketDataFormat.Protect (ticket)' Options.CookieOptions.ToCookieOptions (DateTime.UtcNow.AddMinutes (5)));  
