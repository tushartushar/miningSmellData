Implementation smell,Namespace,Class,File,Method,Description
Long Method,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The method has 106 lines of code.
Complex Method,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,UseSpells,Cyclomatic complexity of the method is 9
Complex Method,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,Cyclomatic complexity of the method is 18
Long Parameter List,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' Source
Long Statement,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,UseSpells,The length of the statement  "            if (useW && target != null && W.IsReady() && Player.Distance(target) <= W.Range && W.GetPrediction(target).Hitchance >= HitChance.High && !E.IsReady()) " is 151.
Long Statement,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead)) " is 149.
Complex Conditional,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,UseSpells,The conditional expression  "useQ && Q.IsReady() && Player.Distance(target) <= Q.Range && target != null &&                       Q.GetPrediction(target).Hitchance >= HitChance.High"  is complex.
Complex Conditional,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,UseSpells,The conditional expression  "useE && target != null && E.IsReady() && Player.Distance(target) < E.Range"  is complex.
Complex Conditional,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,UseSpells,The conditional expression  "target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                  Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready && Source == "Combo" && hasmana"  is complex.
Complex Conditional,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,UseSpells,The conditional expression  "useW && target != null && W.IsReady() && Player.Distance(target) <= W.Range && W.GetPrediction(target).Hitchance >= HitChance.High && !E.IsReady()"  is complex.
Complex Conditional,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,UseSpells,The conditional expression  "useR && R.IsReady() && dmg >= target.Health &&                      Player.Distance(target) < R.Range"  is complex.
Complex Conditional,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The conditional expression  "target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600"  is complex.
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: Q = new Spell(SpellSlot.Q' 850);
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: W = new Spell(SpellSlot.W' 800);
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: E = new Spell(SpellSlot.E' 650);
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: R = new Spell(SpellSlot.R' 700);
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: Q.SetSkillshot(.5f' 30' 1600' false' SkillshotType.SkillshotCircle);
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: Q.SetSkillshot(.5f' 30' 1600' false' SkillshotType.SkillshotCircle);
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: W.SetSkillshot(0.50f' 50' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("QRange"' "Q range").SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("QRange"' "Q range").SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("QRange"' "Q range").SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("WRange"' "W range").SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("WRange"' "W range").SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("WRange"' "W range").SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("ERange"' "E range").SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("ERange"' "E range").SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("ERange"' "E range").SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("RRange"' "R range").SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("RRange"' "R range").SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Game_OnGameLoad,The following statement contains a magic number: menu.SubMenu("Drawings")                  .AddItem(new MenuItem("RRange"' "R range").SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,GetComboDamage,The following statement contains a magic number: if (W.IsReady())                  damage += Player.GetSpellDamage(enemy' SpellSlot.W) * 3;
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))              {                  if (target != null)                  {                      //ER                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 50)                      {                          if (R.IsReady() && E.IsReady())                          {                              E.CastOnUnit(target' packets());                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //WR                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W) * 3 + Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 30)                      {                          if (W.IsReady() && R.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //W                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 30)                      {                          if (W.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //Q                      if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                      {                          if (Q.IsReady())                          {                              Q.Cast(target' packets());                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                      {                          if (E.IsReady())                          {                              E.CastOnUnit(target' packets());                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 50)                      {                          if (R.IsReady())                          {                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //ignite                      if (target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600)                      {                          int IgniteMode = menu.Item("igniteMode").GetValue<StringList>().SelectedIndex;                          if (Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) > target.Health + 20)                          {                              Player.Spellbook.CastSpell(IgniteSlot' target);                          }                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))              {                  if (target != null)                  {                      //ER                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 50)                      {                          if (R.IsReady() && E.IsReady())                          {                              E.CastOnUnit(target' packets());                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //WR                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W) * 3 + Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 30)                      {                          if (W.IsReady() && R.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //W                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 30)                      {                          if (W.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //Q                      if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                      {                          if (Q.IsReady())                          {                              Q.Cast(target' packets());                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                      {                          if (E.IsReady())                          {                              E.CastOnUnit(target' packets());                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 50)                      {                          if (R.IsReady())                          {                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //ignite                      if (target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600)                      {                          int IgniteMode = menu.Item("igniteMode").GetValue<StringList>().SelectedIndex;                          if (Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) > target.Health + 20)                          {                              Player.Spellbook.CastSpell(IgniteSlot' target);                          }                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))              {                  if (target != null)                  {                      //ER                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 50)                      {                          if (R.IsReady() && E.IsReady())                          {                              E.CastOnUnit(target' packets());                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //WR                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W) * 3 + Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 30)                      {                          if (W.IsReady() && R.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //W                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 30)                      {                          if (W.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //Q                      if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                      {                          if (Q.IsReady())                          {                              Q.Cast(target' packets());                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                      {                          if (E.IsReady())                          {                              E.CastOnUnit(target' packets());                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 50)                      {                          if (R.IsReady())                          {                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //ignite                      if (target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600)                      {                          int IgniteMode = menu.Item("igniteMode").GetValue<StringList>().SelectedIndex;                          if (Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) > target.Health + 20)                          {                              Player.Spellbook.CastSpell(IgniteSlot' target);                          }                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))              {                  if (target != null)                  {                      //ER                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 50)                      {                          if (R.IsReady() && E.IsReady())                          {                              E.CastOnUnit(target' packets());                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //WR                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W) * 3 + Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 30)                      {                          if (W.IsReady() && R.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //W                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 30)                      {                          if (W.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //Q                      if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                      {                          if (Q.IsReady())                          {                              Q.Cast(target' packets());                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                      {                          if (E.IsReady())                          {                              E.CastOnUnit(target' packets());                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 50)                      {                          if (R.IsReady())                          {                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //ignite                      if (target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600)                      {                          int IgniteMode = menu.Item("igniteMode").GetValue<StringList>().SelectedIndex;                          if (Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) > target.Health + 20)                          {                              Player.Spellbook.CastSpell(IgniteSlot' target);                          }                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))              {                  if (target != null)                  {                      //ER                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 50)                      {                          if (R.IsReady() && E.IsReady())                          {                              E.CastOnUnit(target' packets());                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //WR                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W) * 3 + Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 30)                      {                          if (W.IsReady() && R.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //W                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 30)                      {                          if (W.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //Q                      if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                      {                          if (Q.IsReady())                          {                              Q.Cast(target' packets());                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                      {                          if (E.IsReady())                          {                              E.CastOnUnit(target' packets());                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 50)                      {                          if (R.IsReady())                          {                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //ignite                      if (target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600)                      {                          int IgniteMode = menu.Item("igniteMode").GetValue<StringList>().SelectedIndex;                          if (Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) > target.Health + 20)                          {                              Player.Spellbook.CastSpell(IgniteSlot' target);                          }                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))              {                  if (target != null)                  {                      //ER                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 50)                      {                          if (R.IsReady() && E.IsReady())                          {                              E.CastOnUnit(target' packets());                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //WR                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W) * 3 + Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 30)                      {                          if (W.IsReady() && R.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //W                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 30)                      {                          if (W.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //Q                      if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                      {                          if (Q.IsReady())                          {                              Q.Cast(target' packets());                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                      {                          if (E.IsReady())                          {                              E.CastOnUnit(target' packets());                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 50)                      {                          if (R.IsReady())                          {                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //ignite                      if (target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600)                      {                          int IgniteMode = menu.Item("igniteMode").GetValue<StringList>().SelectedIndex;                          if (Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) > target.Health + 20)                          {                              Player.Spellbook.CastSpell(IgniteSlot' target);                          }                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))              {                  if (target != null)                  {                      //ER                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 50)                      {                          if (R.IsReady() && E.IsReady())                          {                              E.CastOnUnit(target' packets());                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //WR                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W) * 3 + Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 30)                      {                          if (W.IsReady() && R.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //W                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 30)                      {                          if (W.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //Q                      if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                      {                          if (Q.IsReady())                          {                              Q.Cast(target' packets());                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                      {                          if (E.IsReady())                          {                              E.CastOnUnit(target' packets());                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 50)                      {                          if (R.IsReady())                          {                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //ignite                      if (target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600)                      {                          int IgniteMode = menu.Item("igniteMode").GetValue<StringList>().SelectedIndex;                          if (Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) > target.Health + 20)                          {                              Player.Spellbook.CastSpell(IgniteSlot' target);                          }                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))              {                  if (target != null)                  {                      //ER                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 50)                      {                          if (R.IsReady() && E.IsReady())                          {                              E.CastOnUnit(target' packets());                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //WR                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W) * 3 + Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 30)                      {                          if (W.IsReady() && R.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //W                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 30)                      {                          if (W.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //Q                      if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                      {                          if (Q.IsReady())                          {                              Q.Cast(target' packets());                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                      {                          if (E.IsReady())                          {                              E.CastOnUnit(target' packets());                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 50)                      {                          if (R.IsReady())                          {                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //ignite                      if (target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600)                      {                          int IgniteMode = menu.Item("igniteMode").GetValue<StringList>().SelectedIndex;                          if (Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) > target.Health + 20)                          {                              Player.Spellbook.CastSpell(IgniteSlot' target);                          }                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))              {                  if (target != null)                  {                      //ER                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 50)                      {                          if (R.IsReady() && E.IsReady())                          {                              E.CastOnUnit(target' packets());                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //WR                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W) * 3 + Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 30)                      {                          if (W.IsReady() && R.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //W                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 30)                      {                          if (W.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //Q                      if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                      {                          if (Q.IsReady())                          {                              Q.Cast(target' packets());                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                      {                          if (E.IsReady())                          {                              E.CastOnUnit(target' packets());                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 50)                      {                          if (R.IsReady())                          {                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //ignite                      if (target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600)                      {                          int IgniteMode = menu.Item("igniteMode").GetValue<StringList>().SelectedIndex;                          if (Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) > target.Health + 20)                          {                              Player.Spellbook.CastSpell(IgniteSlot' target);                          }                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,smartKS,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x) < 1300 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))              {                  if (target != null)                  {                      //ER                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 50)                      {                          if (R.IsReady() && E.IsReady())                          {                              E.CastOnUnit(target' packets());                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //WR                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W) * 3 + Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 30)                      {                          if (W.IsReady() && R.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //W                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 30)                      {                          if (W.IsReady())                          {                              W.Cast(target' packets());                              return;                          }                      }                        //Q                      if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                      {                          if (Q.IsReady())                          {                              Q.Cast(target' packets());                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                      {                          if (E.IsReady())                          {                              E.CastOnUnit(target' packets());                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 50)                      {                          if (R.IsReady())                          {                              R.CastOnUnit(target' packets());                              return;                          }                      }                        //ignite                      if (target != null && menu.Item("ignite").GetValue<bool>() && IgniteSlot != SpellSlot.Unknown &&                          Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready &&                          Player.Distance(target.ServerPosition) <= 600)                      {                          int IgniteMode = menu.Item("igniteMode").GetValue<StringList>().SelectedIndex;                          if (Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) > target.Health + 20)                          {                              Player.Spellbook.CastSpell(IgniteSlot' target);                          }                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,lastHit,The following statement contains a magic number: if (!Orbwalking.CanMove(40)) return;
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,lastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (Obj_AI_Base minion in allMinions)                  {                      if (minion.IsValidTarget() &&                          HealthPrediction.GetHealthPrediction(minion' (int) (Player.Distance(minion)*1000/1400)) <                          Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          Q.Cast(minion' packets());                          return;                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,lastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (Obj_AI_Base minion in allMinions)                  {                      if (minion.IsValidTarget() &&                          HealthPrediction.GetHealthPrediction(minion' (int) (Player.Distance(minion)*1000/1400)) <                          Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          Q.Cast(minion' packets());                          return;                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,lastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (Obj_AI_Base minion in allMinions)                  {                      if (minion.IsValidTarget() &&                          HealthPrediction.GetHealthPrediction(minion' (int) (Player.Distance(minion)*1000/1400)) <                          Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          Q.Cast(minion' packets());                          return;                      }                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Farm,The following statement contains a magic number: if (!Orbwalking.CanMove(40)) return;
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,Farm,The following statement contains a magic number: if (useQ && Q.IsReady())              {                  MinionManager.FarmLocation qPos = Q.GetCircularFarmLocation(rangedMinionsQ);                  if (qPos.MinionsHit >= 3)                      Q.Cast(qPos.Position' packets());              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,OnCreate,The following statement contains a magic number: if (Player.Distance(obj.Position) < 1500)              {                  //Q                  if (obj != null && obj.IsValid && obj.Name == "AlzaharNullZoneFlash.troy")                  {                      //Game.PrintChat("Woot");                      var range = R.Range;                      var focusSelected = menu.Item("selected").GetValue<bool>();                      Obj_AI_Hero target = TargetSelector.GetTarget(range' TargetSelector.DamageType.Magical);                      if (TargetSelector.GetSelectedTarget() != null)                          if (focusSelected && TargetSelector.GetSelectedTarget().Distance(Player.ServerPosition) < range)                              target = TargetSelector.GetSelectedTarget();                        if(GetComboDamage(target) > target.Health && R.IsReady() && target.Distance(obj.Position) < 250)                          R.CastOnUnit(target' packets());                  }              }
Magic Number,MalzaharSpaceAids,Program,C:\repos\xSalice_LSharp\MalzaharSpaceAids\MalzaharSpaceAids\Program.cs,OnCreate,The following statement contains a magic number: if (Player.Distance(obj.Position) < 1500)              {                  //Q                  if (obj != null && obj.IsValid && obj.Name == "AlzaharNullZoneFlash.troy")                  {                      //Game.PrintChat("Woot");                      var range = R.Range;                      var focusSelected = menu.Item("selected").GetValue<bool>();                      Obj_AI_Hero target = TargetSelector.GetTarget(range' TargetSelector.DamageType.Magical);                      if (TargetSelector.GetSelectedTarget() != null)                          if (focusSelected && TargetSelector.GetSelectedTarget().Distance(Player.ServerPosition) < range)                              target = TargetSelector.GetSelectedTarget();                        if(GetComboDamage(target) > target.Health && R.IsReady() && target.Distance(obj.Position) < 250)                          R.CastOnUnit(target' packets());                  }              }
